record_number,buggy_code,fixed_code,code_similarity
125001,"@Override public void run(){
  IViewReference[] viewRef=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  if (viewRef != null && viewRef.length > 0) {
    for (    IViewReference element : viewRef) {
      if (element.getView(true) instanceof TOozieView && OozieJobTrackerListener.getProcess().getLabel().equals(oozieJobName)) {
        TOozieView view=(TOozieView)element.getView(true);
        executeJobComposite=view.getExecuteJobComposite();
        Button runBtn=executeJobComposite.getRunBtn();
        Button scheduleBtn=executeJobComposite.getScheduleBtn();
        Button killBtn=executeJobComposite.getKillBtn();
        Button selectBtn=executeJobComposite.getSelectbtn();
        Text pathTxt=executeJobComposite.getPathText();
        Text outputTxt=executeJobComposite.getOutputTxt();
        Combo combo=executeJobComposite.getServerCombo();
switch (status) {
case INIT:
          break;
case DEPLOYING:
        runBtn.setEnabled(false);
      scheduleBtn.setEnabled(false);
    killBtn.setEnabled(false);
  selectBtn.setEnabled(false);
pathTxt.setEnabled(false);
combo.setEnabled(false);
outputTxt.setEnabled(true);
break;
case PREP:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
selectBtn.setEnabled(false);
pathTxt.setEnabled(false);
combo.setEnabled(false);
outputTxt.setEnabled(true);
break;
case RUNNING:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
selectBtn.setEnabled(false);
pathTxt.setEnabled(false);
combo.setEnabled(false);
outputTxt.setEnabled(true);
break;
case SUCCEEDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
selectBtn.setEnabled(true);
pathTxt.setEnabled(true);
combo.setEnabled(true);
outputTxt.setEnabled(true);
break;
case KILLED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
selectBtn.setEnabled(true);
pathTxt.setEnabled(true);
combo.setEnabled(true);
outputTxt.setEnabled(true);
break;
case FAILED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
selectBtn.setEnabled(true);
pathTxt.setEnabled(true);
combo.setEnabled(true);
outputTxt.setEnabled(true);
break;
case SUSPENDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
selectBtn.setEnabled(true);
pathTxt.setEnabled(false);
combo.setEnabled(true);
outputTxt.setEnabled(true);
break;
}
}
}
}
}","@Override public void run(){
  IViewReference[] viewRef=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getViewReferences();
  if (viewRef != null && viewRef.length > 0) {
    for (    IViewReference element : viewRef) {
      if (element.getView(true) instanceof TOozieView && OozieJobTrackerListener.getProcess().getLabel().equals(oozieJobName)) {
        TOozieView view=(TOozieView)element.getView(true);
        executeJobComposite=view.getExecuteJobComposite();
        Button runBtn=executeJobComposite.getRunBtn();
        Button scheduleBtn=executeJobComposite.getScheduleBtn();
        Button killBtn=executeJobComposite.getKillBtn();
        Button selectBtn=executeJobComposite.getSelectbtn();
        Text pathTxt=executeJobComposite.getPathText();
        Text outputTxt=executeJobComposite.getOutputTxt();
        Combo combo=executeJobComposite.getServerCombo();
switch (status) {
case INIT:
          break;
case DEPLOYING:
        runBtn.setEnabled(false);
      scheduleBtn.setEnabled(false);
    killBtn.setEnabled(false);
  selectBtn.setEnabled(false);
pathTxt.setEnabled(false);
combo.setEnabled(false);
outputTxt.setEnabled(true);
break;
case PREP:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
selectBtn.setEnabled(false);
pathTxt.setEnabled(false);
combo.setEnabled(false);
outputTxt.setEnabled(true);
break;
case RUNNING:
runBtn.setEnabled(false);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
selectBtn.setEnabled(false);
pathTxt.setEnabled(false);
combo.setEnabled(false);
outputTxt.setEnabled(true);
break;
case SUCCEEDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
selectBtn.setEnabled(true);
pathTxt.setEnabled(true);
if (GlobalServiceRegister.getDefault().isServiceRegistered(IOozieService.class)) {
combo.setEnabled(true);
}
outputTxt.setEnabled(true);
break;
case KILLED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
selectBtn.setEnabled(true);
pathTxt.setEnabled(true);
if (GlobalServiceRegister.getDefault().isServiceRegistered(IOozieService.class)) {
combo.setEnabled(true);
}
outputTxt.setEnabled(true);
break;
case FAILED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(true);
killBtn.setEnabled(false);
selectBtn.setEnabled(true);
pathTxt.setEnabled(true);
if (GlobalServiceRegister.getDefault().isServiceRegistered(IOozieService.class)) {
combo.setEnabled(true);
}
outputTxt.setEnabled(true);
break;
case SUSPENDED:
runBtn.setEnabled(true);
scheduleBtn.setEnabled(false);
killBtn.setEnabled(true);
selectBtn.setEnabled(true);
pathTxt.setEnabled(false);
if (GlobalServiceRegister.getDefault().isServiceRegistered(IOozieService.class)) {
combo.setEnabled(true);
}
outputTxt.setEnabled(true);
break;
}
}
}
}
}",0.9351887152115896
125002,"public void doSelectComboAction(){
  Combo selectCombo=executeJobComposite.getServerCombo();
  Text repositaryText=executeJobComposite.getRepositoryText();
  Button editBtn=executeJobComposite.getBtnEdit();
  hideSettingBtn();
  if (selectCombo.getSelectionIndex() == FROM_REPOSITORY && repositaryText.getText().length() == 0) {
    editBtn.setEnabled(false);
  }
  if (selectCombo.getSelectionIndex() == FROM_PREFERNCES) {
    executeJobComposite.setRepositoryValue(""String_Node_Str"");
    repositaryText.setText(""String_Node_Str"");
    updateBtnButtonEnabledOrNot();
  }
}","public void doSelectComboAction(){
  Combo selectCombo=executeJobComposite.getServerCombo();
  Text repositaryText=executeJobComposite.getRepositoryText();
  Button editBtn=executeJobComposite.getBtnEdit();
  hideSettingBtn();
  if (selectCombo.getSelectionIndex() == FROM_REPOSITORY && executeJobComposite.getRepositoryTextValue().length() == 0) {
    repositaryText.setText(""String_Node_Str"");
    editBtn.setEnabled(false);
  }
  if (selectCombo.getSelectionIndex() == FROM_PREFERNCES) {
    executeJobComposite.setRepositoryValue(""String_Node_Str"");
    repositaryText.setText(""String_Node_Str"");
    updateBtnButtonEnabledOrNot();
  }
}",0.9185185185185184
125003,"private void createCenterContents(Composite parent){
  Label pathLbl=new Label(parent,SWT.NONE);
  pathLbl.setText(TOozieUIConstants.OOZIE_LBL_PATH);
  GridDataFactory.fillDefaults().grab(false,false).indent(SWT.DEFAULT,10).align(SWT.BEGINNING,SWT.CENTER).applyTo(pathLbl);
  pathText=new Text(parent,SWT.BORDER);
  pathText.setText(getPathValue() == null ? ""String_Node_Str"" : getPathValue());
  GridDataFactory.fillDefaults().span(3,1).grab(true,false).indent(-70,10).hint(SWT.DEFAULT,20).applyTo(pathText);
  btnEdit=new Button(parent,SWT.PUSH);
  btnEdit.setImage(ImageProvider.getImage(TOozieImages.IMG_DOTS));
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).indent(SWT.DEFAULT,10).hint(30,30).align(SWT.BEGINNING,SWT.CENTER).applyTo(btnEdit);
  monitoringBtn=new Button(parent,SWT.NONE);
  monitoringBtn.setText(TOozieUIConstants.OOZIE_BTN_MONITOR);
  monitoringBtn.setImage(ImageProvider.getImage(TOozieImages.IMG_MONITOING));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).indent(SWT.DEFAULT,10).hint(computeBtnTxtSize(settingBtn).x + 60,30).align(SWT.END,SWT.CENTER).applyTo(monitoringBtn);
  monitoringBtn.setVisible(TOozieCommonUtils.isWindowsOS());
  regPathTextListener();
  regBtnEditListener();
  regMonitoringBtnListener();
}","private void createCenterContents(Composite parent){
  Label pathLbl=new Label(parent,SWT.NONE);
  pathLbl.setText(TOozieUIConstants.OOZIE_LBL_PATH);
  GridDataFactory.fillDefaults().grab(false,false).indent(SWT.DEFAULT,10).align(SWT.BEGINNING,SWT.CENTER).applyTo(pathLbl);
  pathText=new Text(parent,SWT.SINGLE | SWT.BORDER);
  Font font=new Font(Display.getCurrent(),""String_Node_Str"",12,SWT.NORMAL);
  pathText.setFont(font);
  pathText.setText(getPathValue() == null ? ""String_Node_Str"" : getPathValue());
  GridDataFactory.fillDefaults().span(3,1).grab(true,false).indent(-70,10).hint(SWT.DEFAULT,20).applyTo(pathText);
  btnEdit=new Button(parent,SWT.PUSH);
  btnEdit.setImage(ImageProvider.getImage(TOozieImages.IMG_DOTS));
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).indent(SWT.DEFAULT,10).hint(30,30).align(SWT.BEGINNING,SWT.CENTER).applyTo(btnEdit);
  monitoringBtn=new Button(parent,SWT.NONE);
  monitoringBtn.setText(TOozieUIConstants.OOZIE_BTN_MONITOR);
  monitoringBtn.setImage(ImageProvider.getImage(TOozieImages.IMG_MONITOING));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).indent(SWT.DEFAULT,10).hint(computeBtnTxtSize(settingBtn).x + 60,30).align(SWT.END,SWT.CENTER).applyTo(monitoringBtn);
  monitoringBtn.setVisible(TOozieCommonUtils.isWindowsOS());
  regPathTextListener();
  regBtnEditListener();
  regMonitoringBtnListener();
}",0.9565873914684788
125004,"private void createTopContents(Composite parent){
  createButtons(parent);
  Label serverLbl=new Label(parent,SWT.NONE);
  serverLbl.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).indent(SWT.DEFAULT,15).grab(false,false).align(SWT.END,SWT.CENTER).applyTo(serverLbl);
  String[] comboitems=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  serverCombo=new Combo(parent,SWT.DROP_DOWN | SWT.READ_ONLY);
  serverCombo.setItems(comboitems);
  serverCombo.setToolTipText(Messages.getString(""String_Node_Str""));
  if (!TOozieParamUtils.isFromRepository()) {
    serverCombo.select(1);
    serverCombo.setEnabled(false);
  }
 else   if (getRepositoryTextValue().length() != 0) {
    serverCombo.select(1);
  }
 else {
    serverCombo.select(0);
  }
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).indent(SWT.DEFAULT,15).hint(computeComboTxtSize(serverCombo).x + 10,30).applyTo(serverCombo);
  settingBtn=new Button(parent,SWT.NONE);
  settingBtn.setText(TOozieUIConstants.OOZIE_BTN_SETTING);
  settingBtn.setImage(ImageProvider.getImage(TOozieImages.IMG_SETTING));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).indent(SWT.DEFAULT,10).hint(computeBtnTxtSize(settingBtn).x + 60,30).align(SWT.END,SWT.CENTER).applyTo(settingBtn);
  repositoryText=new Text(parent,SWT.BORDER);
  repositoryText.setText(getRepositoryTextValue() == null ? ""String_Node_Str"" : getRepositoryTextValue());
  repositoryText.setEditable(false);
  repositoryText.setEnabled(false);
  repositoryText.setVisible(serverCombo.getSelectionIndex() == 1);
  GridDataFactory.fillDefaults().grab(true,false).indent(-105,10).hint(SWT.DEFAULT,20).applyTo(repositoryText);
  selectbtn=new Button(parent,SWT.NONE);
  selectbtn.setImage(ImageProvider.getImage(TOozieImages.IMG_DOTS));
  selectbtn.setVisible(serverCombo.getSelectionIndex() == 1);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).indent(SWT.DEFAULT,10).hint(30,25).align(SWT.BEGINNING,SWT.CENTER).applyTo(selectbtn);
  regServerComboListener();
  regSettingBtnListener();
  regSelectBtnListener();
  regRepositoryTextListener();
}","private void createTopContents(Composite parent){
  createButtons(parent);
  Label serverLbl=new Label(parent,SWT.NONE);
  serverLbl.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(1,1).indent(SWT.DEFAULT,10).grab(false,false).align(SWT.END,SWT.CENTER).applyTo(serverLbl);
  String[] comboitems=new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")};
  serverCombo=new Combo(parent,SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);
  serverCombo.setItems(comboitems);
  serverCombo.setToolTipText(Messages.getString(""String_Node_Str""));
  if (!TOozieParamUtils.isFromRepository()) {
    serverCombo.select(1);
    serverCombo.setEnabled(false);
  }
 else   if (getRepositoryTextValue().length() != 0) {
    serverCombo.select(1);
  }
 else {
    serverCombo.select(0);
  }
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).indent(SWT.DEFAULT,15).hint(computeComboTxtSize(serverCombo).x + 10,30).applyTo(serverCombo);
  settingBtn=new Button(parent,SWT.NONE);
  settingBtn.setText(TOozieUIConstants.OOZIE_BTN_SETTING);
  settingBtn.setImage(ImageProvider.getImage(TOozieImages.IMG_SETTING));
  GridDataFactory.fillDefaults().span(1,1).grab(false,false).indent(SWT.DEFAULT,10).hint(computeBtnTxtSize(settingBtn).x + 60,30).align(SWT.END,SWT.CENTER).applyTo(settingBtn);
  repositoryText=new Text(parent,SWT.BORDER);
  repositoryText.setText(getRepositoryTextValue() == null ? ""String_Node_Str"" : getRepositoryTextValue());
  repositoryText.setEditable(false);
  repositoryText.setEnabled(false);
  repositoryText.setVisible(serverCombo.getSelectionIndex() == 1);
  GridDataFactory.fillDefaults().grab(true,false).indent(-105,10).hint(computeBtnTxtSize(settingBtn).x + 60,14).align(SWT.FILL,SWT.CENTER).applyTo(repositoryText);
  selectbtn=new Button(parent,SWT.NONE);
  selectbtn.setImage(ImageProvider.getImage(TOozieImages.IMG_DOTS));
  selectbtn.setVisible(serverCombo.getSelectionIndex() == 1);
  GridDataFactory.fillDefaults().span(1,1).grab(true,false).indent(SWT.DEFAULT,10).hint(30,21).align(SWT.BEGINNING,SWT.CENTER).applyTo(selectbtn);
  regServerComboListener();
  regSettingBtnListener();
  regSelectBtnListener();
  regRepositoryTextListener();
}",0.9807125028363968
125005,"@Override public void notifyChanged(Notification notification){
  int type=notification.getEventType();
  int featureId=notification.getFeatureID(PigmapPackage.class);
switch (type) {
case Notification.ADD:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
switch (featureId) {
case PigmapPackage.OUTPUT_TABLE__NODES:
      refreshChildren();
    break;
case PigmapPackage.ABSTRACT_IN_OUT_TABLE__FILTER_INCOMING_CONNECTIONS:
  refreshTargetConnections();
break;
}
break;
case Notification.SET:
switch (featureId) {
case PigmapPackage.OUTPUT_TABLE__NODES:
refreshChildren();
break;
case PigmapPackage.OUTPUT_TABLE__REJECT:
case PigmapPackage.OUTPUT_TABLE__REJECT_INNER_JOIN:
case PigmapPackage.OUTPUT_TABLE__ACTIVATE_EXPRESSION_FILTER:
case PigmapPackage.OUTPUT_TABLE__MINIMIZED:
case PigmapPackage.OUTPUT_TABLE__ALL_IN_ONE:
case PigmapPackage.OUTPUT_TABLE__ENABLE_EMPTY_ELEMENT:
((OutputTableFigure)getFigure()).update(featureId);
break;
}
}
}","@Override public void notifyChanged(Notification notification){
  int type=notification.getEventType();
  int featureId=notification.getFeatureID(PigmapPackage.class);
switch (type) {
case Notification.ADD:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
switch (featureId) {
case PigmapPackage.OUTPUT_TABLE__NODES:
      refreshChildren();
    break;
case PigmapPackage.ABSTRACT_IN_OUT_TABLE__FILTER_INCOMING_CONNECTIONS:
  refreshTargetConnections();
break;
}
break;
case Notification.SET:
switch (featureId) {
case PigmapPackage.OUTPUT_TABLE__NODES:
refreshChildren();
break;
case PigmapPackage.OUTPUT_TABLE__REJECT:
case PigmapPackage.OUTPUT_TABLE__REJECT_INNER_JOIN:
case PigmapPackage.OUTPUT_TABLE__ACTIVATE_EXPRESSION_FILTER:
case PigmapPackage.OUTPUT_TABLE__MINIMIZED:
case PigmapPackage.OUTPUT_TABLE__ALL_IN_ONE:
case PigmapPackage.OUTPUT_TABLE__ENABLE_EMPTY_ELEMENT:
case PigmapPackage.OUTPUT_TABLE__EXPRESSION_FILTER:
((OutputTableFigure)getFigure()).update(featureId);
break;
}
}
}",0.9733606557377048
125006,"public void prepareClosing(int response){
}","public void prepareClosing(int response){
  List<IMetadataTable> newMetadatas=new ArrayList<IMetadataTable>();
  EList<OutputTable> outputTables=null;
  if (response == SWT.OK || response == SWT.APPLICATION_MODAL) {
    mapperManager.fireCurrentDirectEditApply();
    outputTables=copyOfMapData.getOutputTables();
  }
 else {
    outputTables=((PigMapData)mapperComponent.getExternalEmfData()).getOutputTables();
  }
  List<IMetadataTable> copyOfMetadata=new ArrayList<IMetadataTable>(mapperComponent.getMetadataList());
  for (  OutputTable outputTable : outputTables) {
    IMetadataTable found=null;
    for (    IMetadataTable table : mapperComponent.getMetadataList()) {
      if (outputTable.getName().equals(table.getTableName())) {
        found=table;
      }
    }
    if (found != null) {
      newMetadatas.add(found);
    }
 else {
      MetadataTable metadataTable=new MetadataTable();
      metadataTable.setTableName(outputTable.getName());
      mapperComponent.getProcess().addUniqueConnectionName(outputTable.getName());
      List<IMetadataColumn> listColumns=new ArrayList<IMetadataColumn>();
      for (      TableNode tableNode : outputTable.getNodes()) {
        MetadataColumn column=new MetadataColumn();
        column.setLabel(tableNode.getName());
        column.setKey(tableNode.isKey());
        column.setTalendType(tableNode.getType());
        column.setNullable(tableNode.isNullable());
        column.setPattern(tableNode.getPattern());
        listColumns.add(column);
      }
      metadataTable.setListColumns(listColumns);
      newMetadatas.add(metadataTable);
    }
  }
  mapperComponent.setMetadataList(newMetadatas);
  copyOfMetadata.removeAll(newMetadatas);
  List<IODataComponent> outputs=mapperComponent.getIODataComponents().getOuputs();
  List<String> connectionNames=new ArrayList<String>();
  for (  IODataComponent output : outputs) {
    connectionNames.add(output.getUniqueName());
  }
  for (  IMetadataTable leftTree : copyOfMetadata) {
    if (!connectionNames.contains(leftTree.getTableName())) {
      mapperComponent.getProcess().removeUniqueConnectionName(leftTree.getTableName());
    }
  }
}",0.0391442876649977
125007,"private Object getParameterValue(INode node,String paramName){
  Map<String,List<String>> componentParamsMap=HadoopMappingManager.getInstance().getComponentParamsMap();
  List<String> paramslist=componentParamsMap.get(paramName);
  if (paramslist != null && paramslist.size() > 0) {
    for (    String param : paramslist) {
      Object value=node.getPropertyValue(param);
      if (value != null) {
        return value;
      }
    }
  }
  return null;
}","private Object getParameterValue(INode node,String paramName){
  Map<String,List<String>> componentParamsMap=HadoopMappingManager.getInstance().getComponentParamsMap();
  List<String> paramslist=componentParamsMap.get(paramName);
  if (paramslist != null && paramslist.size() > 0) {
    for (    String param : paramslist) {
      Object value=null;
      if (node instanceof DataNode) {
        DataNode dataNode=(DataNode)node;
        IElementParameter parameter=dataNode.getElementParameter(param);
        if (parameter != null) {
          value=parameter.getValue();
        }
      }
 else {
        value=node.getPropertyValue(param);
      }
      if (value != null) {
        return value;
      }
    }
  }
  return null;
}",0.7667785234899329
125008,"protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGraphicalNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
  String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  connectionBean.setDistribution(distribution);
  String drivers=(String)node.getPropertyValue(EHDFSRepositoryToComponent.DB_VERSION.getParameterName());
  if (drivers != null) {
    connectionBean.setDfVersion(EHadoopVersion4Drivers.getVersionByDriverStrs(drivers));
    connectionBean.setDfDrivers(drivers);
  }
 else {
    connectionBean.setDfVersion(version);
    StringBuffer driversBuffer=new StringBuffer();
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    for (    ModuleNeeded module : moduleList) {
      if (module.isRequired(node.getElementParameters())) {
        driversBuffer.append(module.getModuleName()).append(""String_Node_Str"");
      }
    }
    if (driversBuffer.length() > 0) {
      driversBuffer.deleteCharAt(driversBuffer.length() - 1);
    }
    connectionBean.setDfDrivers(driversBuffer.toString());
  }
  connectionBean.setNameNodeURI(nameNodeUri);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb);
  connectionBean.setPrincipal(principal);
  connectionBean.setGroup(group);
  return connectionBean;
}","protected HDFSConnectionBean getHDFSConnectionBean(){
  INode node=(INode)elem;
  String useExistingConnection=ElementParameterParser.getValue(elem,""String_Node_Str"");
  if (""String_Node_Str"".equalsIgnoreCase(useExistingConnection)) {
    String connectionName=ElementParameterParser.getValue(node,""String_Node_Str"");
    List<? extends INode> nodes=node.getProcess().getGeneratingNodes();
    for (    INode iNode : nodes) {
      if (iNode.getUniqueName().equals(connectionName)) {
        node=iNode;
        break;
      }
    }
  }
  String distribution=(String)getParameterValue(node,EHadoopParameter.DISTRIBUTION.getName());
  String version=(String)getParameterValue(node,EHadoopParameter.VERSION.getName());
  String nameNodeUri=(String)getParameterValue(node,EHadoopParameter.NAMENODE_URI.getName());
  String userName=(String)getParameterValue(node,EHadoopParameter.USERNAME.getName());
  Boolean useKrb=(Boolean)getParameterValue(node,EHadoopParameter.USE_KRB.getName());
  String principal=(String)getParameterValue(node,EHadoopParameter.NAMENODE_PRINCIPAL.getName());
  String group=(String)getParameterValue(node,EHadoopParameter.GROUP.getName());
  HDFSConnectionBean connectionBean=new HDFSConnectionBean();
  connectionBean.setDistribution(distribution);
  String drivers=null;
  String oldVersionParamName=EHDFSRepositoryToComponent.DB_VERSION.getParameterName();
  if (node instanceof DataNode) {
    DataNode dataNode=(DataNode)node;
    IElementParameter parameter=dataNode.getElementParameter(oldVersionParamName);
    if (parameter != null) {
      drivers=(String)parameter.getValue();
    }
  }
 else {
    drivers=(String)node.getPropertyValue(oldVersionParamName);
  }
  if (drivers != null) {
    connectionBean.setDfVersion(EHadoopVersion4Drivers.getVersionByDriverStrs(drivers));
    connectionBean.setDfDrivers(drivers);
  }
 else {
    connectionBean.setDfVersion(version);
    StringBuffer driversBuffer=new StringBuffer();
    List<ModuleNeeded> moduleList=node.getModulesNeeded();
    for (    ModuleNeeded module : moduleList) {
      if (module.isRequired(node.getElementParameters())) {
        driversBuffer.append(module.getModuleName()).append(""String_Node_Str"");
      }
    }
    if (driversBuffer.length() > 0) {
      driversBuffer.deleteCharAt(driversBuffer.length() - 1);
    }
    connectionBean.setDfDrivers(driversBuffer.toString());
  }
  connectionBean.setNameNodeURI(nameNodeUri);
  connectionBean.setUserName(userName);
  connectionBean.setEnableKerberos(useKrb);
  connectionBean.setPrincipal(principal);
  connectionBean.setGroup(group);
  return connectionBean;
}",0.9193581149705464
125009,"public void loadHDFSFolderChildren(HDFSConnectionBean connection,Object fileSystem,ClassLoader classLoader,HDFSPath parent,String path) throws IOException, InterruptedException, URISyntaxException, InstantiationException, IllegalAccessException, ClassNotFoundException, SecurityException, IllegalArgumentException, NoSuchMethodException, InvocationTargetException {
  if (connection == null || fileSystem == null || classLoader == null || parent == null || path == null) {
    return;
  }
  Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{path});
  Object[] statusList=(Object[])ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
  if (statusList == null) {
    return;
  }
  for (  Object status : statusList) {
    if (!canAccess(connection,status)) {
      continue;
    }
    HDFSPath content=null;
    Object statusPath=ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0]);
    String pathName=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
    String absolutePath=((URI)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0])).toString();
    String relativePath=getRelativePath(connection,absolutePath);
    if ((Boolean)ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0])) {
      content=new HDFSFolder(parent);
    }
 else {
      content=new HDFSFile(parent);
      content.setTable(createTable(trimFileExtention(pathName)));
    }
    content.setPath(relativePath);
    content.setValue(pathName);
    parent.addChild(content);
  }
}","public void loadHDFSFolderChildren(HDFSConnectionBean connection,Object fileSystem,ClassLoader classLoader,HDFSPath parent,String path) throws IOException, InterruptedException, URISyntaxException, InstantiationException, IllegalAccessException, ClassNotFoundException, SecurityException, IllegalArgumentException, NoSuchMethodException, InvocationTargetException {
  if (connection == null || fileSystem == null || classLoader == null || parent == null || path == null) {
    return;
  }
  Object pathObj=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{path});
  Object[] statusList=(Object[])ReflectionUtils.invokeMethod(fileSystem,""String_Node_Str"",new Object[]{pathObj});
  if (statusList == null) {
    return;
  }
  for (  Object status : statusList) {
    if (!canAccess(connection,status)) {
      continue;
    }
    HDFSPath content=null;
    Object statusPath=ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0]);
    String pathName=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
    String absolutePath=(String)ReflectionUtils.invokeMethod(statusPath,""String_Node_Str"",new Object[0]);
    String relativePath=getRelativePath(connection,absolutePath);
    if ((Boolean)ReflectionUtils.invokeMethod(status,""String_Node_Str"",new Object[0])) {
      content=new HDFSFolder(parent);
    }
 else {
      content=new HDFSFile(parent);
      content.setTable(createTable(trimFileExtention(pathName)));
    }
    content.setPath(relativePath);
    content.setValue(pathName);
    parent.addChild(content);
  }
}",0.993099121706399
125010,"private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
  return null;
}","private Object getHadoopClusterRepositoryValue(HadoopClusterConnection hcConnection,String value,IMetadataTable table){
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.MAP_REDUCE);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHDFSRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(hcConnection.getJobTrackerURI());
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
  return null;
}",0.9974964234620888
125011,"public boolean hasDiffsFromClusterToProcess(Connection hcConnection,IProcess process){
  if (hcConnection == null || process == null) {
    return false;
  }
  if (hcConnection instanceof HadoopClusterConnection) {
    return HCRepositoryUtil.detectClusterChangeOfProcess((HadoopClusterConnection)hcConnection,process);
  }
  return false;
}","public boolean hasDiffsFromClusterToProcess(Item item,IProcess process){
  if (item == null || process == null) {
    return false;
  }
  String propertyParamName=MR_PROPERTY_PREFIX + EParameterName.PROPERTY_TYPE.getName();
  String propertyRepTypeParamName=MR_PROPERTY_PREFIX + EParameterName.REPOSITORY_PROPERTY_TYPE.getName();
  IElementParameter elementParameter=process.getElementParameter(propertyParamName);
  if (elementParameter != null && EmfComponent.REPOSITORY.equals(elementParameter.getValue())) {
    IElementParameter repositoryParam=process.getElementParameter(propertyRepTypeParamName);
    if (item.getProperty().getId().equals(repositoryParam.getValue())) {
      return false;
    }
 else {
      return true;
    }
  }
  return true;
}",0.2568306010928962
125012,"/** 
 * DOC ycbai Comment method ""updateHDFSConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHDFSConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * DOC ycbai Comment method ""updateHDFSConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHDFSConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9668411867364748
125013,"@Override public Set<EUpdateItemType> getTypes(){
  Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
  types.add(EUpdateItemType.NODE_PROPERTY);
  return types;
}","@Override public Set<EUpdateItemType> getTypes(){
  Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
  types.add(EUpdateItemType.NODE_PROPERTY);
  types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
  return types;
}",0.8664987405541562
125014,"public static boolean hasAuthority(FileStatus status,String userName,ELinuxAuthority authority){
  boolean hasAuthority=false;
  if (status == null) {
    return hasAuthority;
  }
  if (authority == null) {
    authority=ELinuxAuthority.READ;
  }
  FsPermission permission=status.getPermission();
  if (permission == null) {
    return hasAuthority;
  }
  String owner=status.getOwner();
  FsAction userAction=permission.getUserAction();
  FsAction groupAction=permission.getGroupAction();
  FsAction otherAction=permission.getOtherAction();
switch (authority) {
case READ:
    if (owner != null && owner.equals(userName)) {
      return hasReadAuthority(userAction) || hasReadAuthority(groupAction);
    }
  return hasReadAuthority(otherAction);
case WRITE:
if (owner != null && owner.equals(userName)) {
  return hasWriteAuthority(userAction) || hasWriteAuthority(groupAction);
}
return hasWriteAuthority(otherAction);
case EXCUTE:
if (owner != null && owner.equals(userName)) {
return hasExcuteAuthority(userAction) || hasExcuteAuthority(groupAction);
}
return hasExcuteAuthority(otherAction);
default :
break;
}
return hasAuthority;
}","public static boolean hasAuthority(FileStatus status,String userName,ELinuxAuthority authority){
  boolean hasAuthority=false;
  if (status == null) {
    return hasAuthority;
  }
  if (authority == null) {
    authority=ELinuxAuthority.READ;
  }
  FsPermission permission=status.getPermission();
  if (permission == null) {
    return hasAuthority;
  }
  userName=TalendQuoteUtils.addQuotesIfNotExist(userName);
  String owner=TalendQuoteUtils.addQuotesIfNotExist(status.getOwner());
  FsAction userAction=permission.getUserAction();
  FsAction groupAction=permission.getGroupAction();
  FsAction otherAction=permission.getOtherAction();
switch (authority) {
case READ:
    if (owner != null && owner.equals(userName)) {
      return hasReadAuthority(userAction) || hasReadAuthority(groupAction);
    }
  return hasReadAuthority(otherAction);
case WRITE:
if (owner != null && owner.equals(userName)) {
  return hasWriteAuthority(userAction) || hasWriteAuthority(groupAction);
}
return hasWriteAuthority(otherAction);
case EXCUTE:
if (owner != null && owner.equals(userName)) {
return hasExcuteAuthority(userAction) || hasExcuteAuthority(groupAction);
}
return hasExcuteAuthority(otherAction);
default :
break;
}
return hasAuthority;
}",0.9591234723978088
125015,"private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.TABLE_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.PARTITION_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    try {
      return HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties(),true);
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}","private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KEYTAB.getRepositoryValue().equals(value)) {
    return hcConnection.isUseKeytab();
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytabPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KEYTAB_PATH.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getKeytab()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.TABLE_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.PARTITION_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.MAPRED_RESOURCE_MANAGER.getRepositoryValue().equals(value) || EHCatalogRepositoryToComponent.RESOURCE_MANAGER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_ADVANCED_PROPERTIES.getRepositoryValue().equals(value)) {
    try {
      return HadoopRepositoryUtil.getHadoopPropertiesList(connection.getHadoopProperties(),true);
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return null;
}",0.99001749511166
125016,"private void initMetadataForm(){
  if (metadataTable == null) {
    return;
  }
  metadataEditor.setMetadataTable(metadataTable);
  Boolean flag=CoreRuntimePlugin.getInstance().getPreferenceStore().getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","private void initMetadataForm(){
  if (metadataTable == null) {
    return;
  }
  metadataEditor.setMetadataTable(metadataTable);
  IEclipsePreferences preferences=new InstanceScope().getNode(CoreRuntimePlugin.PLUGIN_ID);
  Boolean flag=preferences.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.9306333476949592
125017,"private void initMetadataForm(){
  if (metadataTable == null) {
    return;
  }
  metadataEditor.setMetadataTable(metadataTable);
  IEclipsePreferences preferences=new InstanceScope().getNode(CoreRuntimePlugin.PLUGIN_ID);
  Boolean flag=preferences.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","private void initMetadataForm(){
  if (metadataTable == null) {
    return;
  }
  metadataEditor.setMetadataTable(metadataTable);
  IEclipsePreferences preferences=new InstanceScope().getNode(ITalendCorePrefConstants.CoreUIPlugin_ID);
  Boolean flag=preferences.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.9769970723546634
125018,"private void initMetadataForm(){
  if (metadataTable == null) {
    return;
  }
  metadataEditor.setMetadataTable(metadataTable);
  Boolean flag=CoreRuntimePlugin.getInstance().getPreferenceStore().getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  String filePath=metadataTable.getAdditionalProperties().get(HDFSConstants.HDFS_PATH);
  baseFilePathText.setText(StringUtils.trimToEmpty(filePath));
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","private void initMetadataForm(){
  if (metadataTable == null) {
    return;
  }
  metadataEditor.setMetadataTable(metadataTable);
  IEclipsePreferences preferences=new InstanceScope().getNode(ITalendCorePrefConstants.CoreUIPlugin_ID);
  Boolean flag=preferences.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS,false);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  String filePath=metadataTable.getAdditionalProperties().get(HDFSConstants.HDFS_PATH);
  baseFilePathText.setText(StringUtils.trimToEmpty(filePath));
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.9339908952959028
125019,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != getNodeType()) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(getNodeType());
    }
  }
  IWizard wizard=getWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
  if (isToolbar()) {
    init(repositoryNode);
  }
  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),wizard);
  wizardDialog.setPageSize(getWizardWidth(),getWizardHeight());
  wizardDialog.create();
  wizardDialog.open();
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  if (isToolbar()) {
    if (repositoryNode != null && repositoryNode.getContentType() != getNodeType()) {
      repositoryNode=null;
    }
    if (repositoryNode == null) {
      repositoryNode=getRepositoryNodeForDefault(getNodeType());
    }
  }
  IWizard wizard=getWizard(PlatformUI.getWorkbench(),creation,repositoryNode,getExistingNames());
  if (isToolbar()) {
    init(repositoryNode);
  }
  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),wizard);
  if (Platform.getOS().equals(Platform.OS_LINUX)) {
    wizardDialog.setPageSize(getWizardWidth(),getWizardHeight() + 80);
  }
  wizardDialog.create();
  wizardDialog.open();
}",0.9594855305466238
125020,"private void addHadoopPropertiesFields(){
  Composite compositeTable=Form.startNewDimensionnedGridLayout(this,1,this.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=4;
  compositeTable.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTable);
  properties=new ArrayList<HashMap<String,Object>>();
  initHadoopProperties();
  HadoopPropertiesFieldModel model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableView=new HadoopPropertiesTableView(model,compositeTable);
  propertiesTableView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
}","private void addHadoopPropertiesFields(){
  Composite compositeTable=Form.startNewDimensionnedGridLayout(this,1,this.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=4;
  compositeTable.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTable);
  properties=new ArrayList<HashMap<String,Object>>();
  initHadoopProperties();
  HadoopPropertiesFieldModel model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableView=new HadoopPropertiesTableView(model,compositeTable);
  propertiesTableView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableView.getMainComposite();
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=180;
  fieldTableEditorComposite.setLayoutData(gridData);
  fieldTableEditorComposite.setBackground(null);
}",0.8785249457700651
125021,"private void addHadoopPropertiesFields(){
  Composite compositeTable=Form.startNewDimensionnedGridLayout(this,1,this.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.horizontalSpan=4;
  compositeTable.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTable);
  properties=new ArrayList<HashMap<String,Object>>();
  initHadoopProperties();
  HadoopPropertiesFieldModel model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableView=new HadoopPropertiesTableView(model,compositeTable);
  propertiesTableView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableView.getMainComposite();
  fieldTableEditorComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  fieldTableEditorComposite.setBackground(null);
}","private void addHadoopPropertiesFields(){
  Composite compositeTable=Form.startNewDimensionnedGridLayout(this,1,this.getBorderWidth(),150);
  GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.horizontalSpan=4;
  compositeTable.setLayoutData(gridData);
  CommandStackForComposite commandStack=new CommandStackForComposite(compositeTable);
  properties=new ArrayList<HashMap<String,Object>>();
  initHadoopProperties();
  HadoopPropertiesFieldModel model=new HadoopPropertiesFieldModel(properties,""String_Node_Str"");
  propertiesTableView=new HadoopPropertiesTableView(model,compositeTable);
  propertiesTableView.getExtendedTableViewer().setCommandStack(commandStack);
  final Composite fieldTableEditorComposite=propertiesTableView.getMainComposite();
  gridData=new GridData(GridData.FILL_HORIZONTAL);
  gridData.heightHint=180;
  fieldTableEditorComposite.setLayoutData(gridData);
  fieldTableEditorComposite.setBackground(null);
}",0.8785249457700651
125022,"public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,String header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  List<String> exisColumnNames=new ArrayList<String>();
  int headerValue=0;
  if (StringUtils.isNotBlank(header)) {
    headerValue=Integer.parseInt(header);
  }
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    int numberOfCol=getNumbersOfColumns(csvRows);
    int firstRowToExtractMetadata=headerValue;
    String[] label=new String[numberOfCol];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_COLUMN_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_COLUMN_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_COLUMN_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_COLUMN_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol; i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (current == csvRows.size()) {
          globalType=""String_Node_Str"";
          continue;
        }
 else         if (i >= csvRows.get(current).length) {
          globalType=""String_Node_Str"";
        }
 else {
          globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
          current++;
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
              globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            ICoreService coreService=CoreRuntimePlugin.getInstance().getCoreService();
            IPreferenceStore preferenceStore=coreService.getPreferenceStore();
            if (preferenceStore != null) {
              if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
                globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
                if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                  lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
                }
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=globalType;
      if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
        metadataColumn.setPrecision(precisionValue);
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      String columnLabel=IndiceHelper.getIndexedLabel(label[i],exisColumnNames);
      metadataColumn.setLabel(columnLabel);
      if (!exisColumnNames.contains(columnLabel)) {
        exisColumnNames.add(columnLabel);
      }
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}","public static List<MetadataColumn> guessSchemaFromArray(final CsvArray csvArray,boolean isFirstLineCaption,String header){
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>();
  List<String> exisColumnNames=new ArrayList<String>();
  int headerValue=0;
  if (StringUtils.isNotBlank(header)) {
    headerValue=Integer.parseInt(header);
  }
  if (csvArray == null) {
    return columns;
  }
 else {
    List<String[]> csvRows=csvArray.getRows();
    if (csvRows.isEmpty()) {
      return columns;
    }
    String[] fields=csvRows.get(0);
    int numberOfCol=getNumbersOfColumns(csvRows);
    int firstRowToExtractMetadata=headerValue;
    String[] label=new String[numberOfCol];
    for (int i=0; i < numberOfCol; i++) {
      label[i]=DEFAULT_COLUMN_LABEL + i;
      if (isFirstLineCaption) {
        if (numberOfCol <= fields.length) {
          if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
            label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            label[i]=MetadataToolHelper.validateColumnName(label[i],i);
          }
 else {
            label[i]=DEFAULT_COLUMN_LABEL + i;
          }
        }
 else {
          if (i < fields.length) {
            if (fields[i] != null && !(""String_Node_Str"").equals(fields[i])) {
              label[i]=fields[i].trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              label[i]=DEFAULT_COLUMN_LABEL + ""String_Node_Str"" + i;
            }
          }
 else {
            label[i]=DEFAULT_COLUMN_LABEL + ""String_Node_Str"" + i;
          }
        }
      }
    }
    ShadowProcessPreview.fixDuplicateNames(label);
    for (int i=0; i < numberOfCol; i++) {
      String globalType=null;
      int lengthValue=0;
      int precisionValue=0;
      int current=firstRowToExtractMetadata;
      while (globalType == null) {
        if (current == csvRows.size()) {
          globalType=""String_Node_Str"";
          continue;
        }
 else         if (i >= csvRows.get(current).length) {
          globalType=""String_Node_Str"";
        }
 else {
          globalType=JavaDataTypeHelper.getTalendTypeOfValue(csvRows.get(current)[i]);
          current++;
        }
      }
      for (int f=firstRowToExtractMetadata; f < csvRows.size(); f++) {
        fields=csvRows.get(f);
        if (fields.length > i) {
          String value=fields[i];
          if (!value.equals(""String_Node_Str"")) {
            if (!JavaDataTypeHelper.getTalendTypeOfValue(value).equals(globalType)) {
              globalType=JavaDataTypeHelper.getCommonType(globalType,JavaDataTypeHelper.getTalendTypeOfValue(value));
            }
            if (lengthValue < value.length()) {
              lengthValue=value.length();
            }
            int positionDecimal=0;
            if (value.indexOf(',') > -1) {
              positionDecimal=value.lastIndexOf(',');
              precisionValue=lengthValue - positionDecimal;
            }
 else             if (value.indexOf('.') > -1) {
              positionDecimal=value.lastIndexOf('.');
              precisionValue=lengthValue - positionDecimal;
            }
          }
 else {
            IPreferenceStore preferenceStore=null;
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreUIService.class)) {
              IDesignerCoreUIService designerCoreUiService=(IDesignerCoreUIService)GlobalServiceRegister.getDefault().getService(IDesignerCoreUIService.class);
              preferenceStore=designerCoreUiService.getPreferenceStore();
            }
            if (preferenceStore != null && preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE).equals(""String_Node_Str"")) {
              globalType=preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_TYPE);
              if (preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH) != null && !preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH).equals(""String_Node_Str"")) {
                lengthValue=Integer.parseInt(preferenceStore.getString(MetadataTypeLengthConstants.VALUE_DEFAULT_LENGTH));
              }
            }
          }
        }
      }
      if (csvRows.size() <= 1 && firstRowToExtractMetadata == 1) {
        lengthValue=255;
      }
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setPattern(""String_Node_Str"");
      String talendType=globalType;
      if (globalType.equals(JavaTypesManager.FLOAT.getId()) || globalType.equals(JavaTypesManager.DOUBLE.getId())) {
        metadataColumn.setPrecision(precisionValue);
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setTalendType(talendType);
      metadataColumn.setLength(lengthValue);
      String columnLabel=IndiceHelper.getIndexedLabel(label[i],exisColumnNames);
      metadataColumn.setLabel(columnLabel);
      if (!exisColumnNames.contains(columnLabel)) {
        exisColumnNames.add(columnLabel);
      }
      columns.add(i,metadataColumn);
    }
  }
  return columns;
}",0.946644394222266
125023,"/** 
 * DOC ycbai Comment method ""detectClusterChangeOfMRProcess"". <p> Detect the changes of hadoop related parameters from Process to Hadoop cluster. </p>
 * @param hcConnection
 * @param process
 * @return true if there are some changes from them, otherwise return false.
 */
public static boolean detectClusterChangeOfProcess(HadoopClusterConnection hcConnection,IProcess process){
  String distribution=hcConnection.getDistribution();
  String version=hcConnection.getVersion();
  String customJars=hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
  String namenode=hcConnection.getNameNodeURI();
  String jobTracker=hcConnection.getJobTrackerURI();
  boolean useKrb=hcConnection.isEnableKerberos();
  String nnPrincipal=hcConnection.getPrincipal();
  String userName=hcConnection.getUserName();
  String distributionPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.DISTRIBUTION.getParameterName());
  String versionPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.VERSION.getParameterName());
  String customJarsPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.CUSTOM_JARS.getParameterName());
  String namenodePr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.NAMENODE.getParameterName());
  String jobTrackerPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.JOB_TRACKER.getParameterName());
  String useKrbPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.USE_KRB.getParameterName());
  String nnPrincipalPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.NN_PRINCIPAL.getParameterName());
  String userNamePr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.USERNAME.getParameterName());
  if (distribution != null && !distribution.equals(distributionPr) || version != null && !version.equals(versionPr) || customJars != null && !customJars.equals(customJarsPr) || namenode != null && !namenode.equals(namenodePr) || jobTracker != null && !jobTracker.equals(jobTrackerPr) || useKrb != Boolean.valueOf(useKrbPr) || nnPrincipal != null && nnPrincipal.equals(nnPrincipalPr) || userName != null && userName.equals(userNamePr)) {
    return true;
  }
  return false;
}","/** 
 * DOC ycbai Comment method ""detectClusterChangeOfMRProcess"". <p> Detect the changes of hadoop related parameters from Process to Hadoop cluster. </p>
 * @param hcConnection
 * @param process
 * @return true if there are some changes from them, otherwise return false.
 */
public static boolean detectClusterChangeOfProcess(HadoopClusterConnection hcConnection,IProcess process){
  String distribution=hcConnection.getDistribution();
  String version=hcConnection.getDfVersion();
  String customJars=hcConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
  String namenode=hcConnection.getNameNodeURI();
  String jobTracker=hcConnection.getJobTrackerURI();
  boolean useKrb=hcConnection.isEnableKerberos();
  String nnPrincipal=hcConnection.getPrincipal();
  String userName=hcConnection.getUserName();
  String distributionPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.DISTRIBUTION.getParameterName());
  String versionPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.VERSION.getParameterName());
  String customJarsPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.CUSTOM_JARS.getParameterName());
  String namenodePr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.NAMENODE.getParameterName());
  String jobTrackerPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.JOB_TRACKER.getParameterName());
  String useKrbPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.USE_KRB.getParameterName());
  String nnPrincipalPr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.NN_PRINCIPAL.getParameterName());
  String userNamePr=HCParameterUtil.getParameterRealValue(process,process,EHadoopRepositoryToMapReduce.USERNAME.getParameterName());
  if (distribution != null && !distribution.equals(distributionPr) || version != null && !version.equals(versionPr) || customJars != null && !customJars.equals(customJarsPr) || namenode != null && !namenode.equals(namenodePr) || jobTracker != null && !jobTracker.equals(jobTrackerPr) || useKrb != Boolean.valueOf(useKrbPr) || nnPrincipal != null && !nnPrincipal.equals(nnPrincipalPr) || userName != null && !userName.equals(userNamePr)) {
    return true;
  }
  return false;
}",0.999165623696287
125024,"private static WebClient getHCatalogRootClient(HCatalogConnection connection){
  String host=StringUtils.trimToEmpty(connection.getHostName());
  String port=StringUtils.trimToEmpty(connection.getPort());
  String userName=StringUtils.trimToEmpty(connection.getUserName());
  String path=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ userName;
  return WebClient.create(path);
}","private static WebClient getHCatalogRootClient(HCatalogConnection connection){
  String host=StringUtils.trimToEmpty(connection.getHostName());
  String port=StringUtils.trimToEmpty(connection.getPort());
  String userName=StringUtils.trimToEmpty(connection.getUserName());
  String path=""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str""+ userName;
  WebClient client=WebClient.create(path);
  addKerberos2Client(client,connection);
  return client;
}",0.8718535469107551
125025,"public static JSONObject getDataFromHCatalog(WebClient client,String tableName) throws Exception {
  Response response=client.get();
  InputStream inputStream=(InputStream)response.getEntity();
  String input=IOUtils.toString(inputStream);
  JSONObject jsonObject=(JSONObject)JSONValue.parse(input);
  String errorMsgDetail=""String_Node_Str"";
  Object errorObj=jsonObject.get(""String_Node_Str"");
  if (errorObj != null) {
    errorMsgDetail=errorObj.toString();
  }
  int status=response.getStatus();
  if (status != 200) {
switch (status) {
case 400:
      throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 401:
    throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 404:
  throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 500:
if ((""String_Node_Str"" + tableName + ""String_Node_Str"").equals(errorMsgDetail)) {
  CommonExceptionHandler.warn(""String_Node_Str"" + errorMsgDetail);
}
 else {
  throw new Exception(""String_Node_Str"" + errorMsgDetail);
}
break;
case 503:
throw new Exception(""String_Node_Str"" + errorMsgDetail);
default :
throw new Exception(jsonObject.get(""String_Node_Str"") + ""String_Node_Str"" + jsonObject.get(""String_Node_Str"")+ jsonObject.get(""String_Node_Str""));
}
}
return jsonObject;
}","public static JSONObject getDataFromHCatalog(WebClient client,String tableName) throws Exception {
  Response response=client.get();
  InputStream inputStream=(InputStream)response.getEntity();
  String input=IOUtils.toString(inputStream);
  JSONObject jsonObject=(JSONObject)JSONValue.parse(input);
  if (jsonObject == null) {
    throw new Exception(input);
  }
  String errorMsgDetail=""String_Node_Str"";
  Object errorObj=jsonObject.get(""String_Node_Str"");
  if (errorObj != null) {
    errorMsgDetail=errorObj.toString();
  }
  int status=response.getStatus();
  if (status != 200) {
switch (status) {
case 400:
      throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 401:
    throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 404:
  throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 500:
if ((""String_Node_Str"" + tableName + ""String_Node_Str"").equals(errorMsgDetail)) {
  CommonExceptionHandler.warn(""String_Node_Str"" + errorMsgDetail);
}
 else {
  throw new Exception(""String_Node_Str"" + errorMsgDetail);
}
break;
case 503:
throw new Exception(""String_Node_Str"" + errorMsgDetail);
default :
throw new Exception(jsonObject.get(""String_Node_Str"") + ""String_Node_Str"" + jsonObject.get(""String_Node_Str"")+ jsonObject.get(""String_Node_Str""));
}
}
return jsonObject;
}",0.9748427672955976
125026,"/** 
 * DOC ycbai Comment method ""getHCatalogDBClient"".
 * @param connection
 * @return the HCatalog client of the special database from HCatalogConnection.
 */
public static WebClient getHCatalogDBClient(HCatalogConnection connection){
  String database=StringUtils.trimToEmpty(connection.getDatabase());
  WebClient client=getHCatalogClient(connection,database);
  addKerberos2Client(client,connection);
  return client;
}","/** 
 * DOC ycbai Comment method ""getHCatalogDBClient"".
 * @param connection
 * @return the HCatalog client of the special database from HCatalogConnection.
 */
public static WebClient getHCatalogDBClient(HCatalogConnection connection){
  String database=StringUtils.trimToEmpty(connection.getDatabase());
  WebClient client=getHCatalogClient(connection,database);
  return client;
}",0.9169764560099132
125027,"public AppConfigurationEntry[] getAppConfigurationEntry(String name){
  return new AppConfigurationEntry[]{new AppConfigurationEntry(""String_Node_Str"",AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,properties)};
}","@Override public AppConfigurationEntry[] getAppConfigurationEntry(String name){
  return new AppConfigurationEntry[]{new AppConfigurationEntry(Krb5LoginModule.class.getName(),AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,properties)};
}",0.8793103448275862
125028,"private boolean isValidFolder(IRepositoryNode node){
  if (node.getObjectType() != null && node.getObjectType().equals(HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
    return true;
  }
  return false;
}","private boolean isValidFolder(IRepositoryNode node){
  ERepositoryObjectType repObjType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (repObjType != null && repObjType.equals(HadoopClusterRepositoryNodeType.HADOOPCLUSTER)) {
    return true;
  }
  return false;
}",0.6706827309236948
125029,"public static ClassLoader getCustomClassLoader(IMetadataConnection metadataConnection){
  String hcId=metadataConnection.getId();
  String index=""String_Node_Str"" + hcId;
  return ClassLoaderFactory.getCustomClassLoader(index,(String)metadataConnection.getParameter(ECustomVersionGroup.HBASE.getName()));
}","public static ClassLoader getCustomClassLoader(IMetadataConnection metadataConnection){
  String hcId=metadataConnection.getId();
  String index=""String_Node_Str"" + hcId;
  return ClassLoaderFactory.getCustomClassLoader(index,(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS));
}",0.8740031897926634
125030,"@Override public ConnectionStatus testConnection(IMetadataConnection metadataConnection){
  classLoader=HBaseClassLoaderFactory.getClassLoader(metadataConnection);
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    Callable<Object> callable=checkHBaseAvailable(config);
    ExecutorService executor=Executors.newSingleThreadExecutor();
    Future<Object> future=executor.submit(callable);
    try {
      future.get(10,TimeUnit.SECONDS);
      connectionStatus.setResult(true);
    }
 catch (    Exception e) {
      future.cancel(true);
      connectionStatus.setResult(false);
      connectionStatus.setMessageException(""String_Node_Str"");
      ThreadGroup group=Thread.currentThread().getThreadGroup();
      int activeCount=group.activeCount();
      Thread[] allThreads=new Thread[activeCount];
      group.enumerate(allThreads);
      Thread foundThread=null;
      for (      Thread t : allThreads) {
        if (t.getClass().getName().equals(""String_Node_Str"")) {
          foundThread=t;
          break;
        }
      }
      if (foundThread != null) {
        foundThread.getClass().getDeclaredMethods();
        Method method=foundThread.getClass().getDeclaredMethod(""String_Node_Str"");
        method.setAccessible(true);
        method.invoke(foundThread);
      }
      Class ownerClass=Class.forName(""String_Node_Str"",true,classLoader);
      Method[] methods=ownerClass.getMethods();
      Method m2=null;
      for (      Method method : methods) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (""String_Node_Str"".equals(method.getName()) && parameterTypes.length == 1 && ""String_Node_Str"".equals(parameterTypes[0].getName())) {
          m2=method;
        }
      }
      if (m2 != null) {
        m2.setAccessible(true);
        m2.invoke(null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getStackTrace() == null ? e.getMessage() : e.getStackTrace().toString());
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
  return connectionStatus;
}","@Override public ConnectionStatus testConnection(IMetadataConnection metadataConnection){
  classLoader=HBaseClassLoaderFactory.getClassLoader(metadataConnection);
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    Callable<Object> callable=checkHBaseAvailable(config);
    ExecutorService executor=Executors.newSingleThreadExecutor();
    Future<Object> future=executor.submit(callable);
    try {
      int timeout=15;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
        IDesignerCoreService designerService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
        timeout=designerService.getDesignerCorePreferenceStore().getInt(ITalendCorePrefConstants.DB_CONNECTION_TIMEOUT);
      }
      future.get(timeout,TimeUnit.SECONDS);
      connectionStatus.setResult(true);
    }
 catch (    Exception e) {
      future.cancel(true);
      connectionStatus.setResult(false);
      connectionStatus.setMessageException(""String_Node_Str"");
      ThreadGroup group=Thread.currentThread().getThreadGroup();
      int activeCount=group.activeCount();
      Thread[] allThreads=new Thread[activeCount];
      group.enumerate(allThreads);
      Thread foundThread=null;
      for (      Thread t : allThreads) {
        if (t.getClass().getName().equals(""String_Node_Str"")) {
          foundThread=t;
          break;
        }
      }
      if (foundThread != null) {
        foundThread.getClass().getDeclaredMethods();
        Method method=foundThread.getClass().getDeclaredMethod(""String_Node_Str"");
        method.setAccessible(true);
        method.invoke(foundThread);
      }
      Class ownerClass=Class.forName(""String_Node_Str"",true,classLoader);
      Method[] methods=ownerClass.getMethods();
      Method m2=null;
      for (      Method method : methods) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (""String_Node_Str"".equals(method.getName()) && parameterTypes.length == 1 && ""String_Node_Str"".equals(parameterTypes[0].getName())) {
          m2=method;
        }
      }
      if (m2 != null) {
        m2.setAccessible(true);
        m2.invoke(null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getStackTrace() == null ? e.getMessage() : e.getStackTrace().toString());
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
  return connectionStatus;
}",0.9348909657320872
125031,"@Override public ConnectionStatus testConnection(IMetadataConnection metadataConnection){
  classLoader=HBaseClassLoaderFactory.getClassLoader(metadataConnection);
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
    ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{config});
    connectionStatus.setResult(true);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
  return connectionStatus;
}","@Override public ConnectionStatus testConnection(IMetadataConnection metadataConnection){
  classLoader=HBaseClassLoaderFactory.getClassLoader(metadataConnection);
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",""String_Node_Str""});
    Callable<Object> callable=checkHBaseAvailable(config);
    ExecutorService executor=Executors.newSingleThreadExecutor();
    Future<Object> future=executor.submit(callable);
    try {
      future.get(10,TimeUnit.SECONDS);
      connectionStatus.setResult(true);
    }
 catch (    Exception e) {
      future.cancel(true);
      connectionStatus.setResult(false);
      connectionStatus.setMessageException(""String_Node_Str"");
      ThreadGroup group=Thread.currentThread().getThreadGroup();
      int activeCount=group.activeCount();
      Thread[] allThreads=new Thread[activeCount];
      group.enumerate(allThreads);
      Thread foundThread=null;
      for (      Thread t : allThreads) {
        if (t.getClass().getName().equals(""String_Node_Str"")) {
          foundThread=t;
          break;
        }
      }
      if (foundThread != null) {
        foundThread.getClass().getDeclaredMethods();
        Method method=foundThread.getClass().getDeclaredMethod(""String_Node_Str"");
        method.setAccessible(true);
        method.invoke(foundThread);
      }
      Class ownerClass=Class.forName(""String_Node_Str"",true,classLoader);
      Method[] methods=ownerClass.getMethods();
      Method m2=null;
      for (      Method method : methods) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (""String_Node_Str"".equals(method.getName()) && parameterTypes.length == 1 && ""String_Node_Str"".equals(parameterTypes[0].getName())) {
          m2=method;
        }
      }
      if (m2 != null) {
        m2.setAccessible(true);
        m2.invoke(null,true);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getStackTrace() == null ? e.getMessage() : e.getStackTrace().toString());
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
  return connectionStatus;
}",0.4688995215311005
125032,"private Object getAdmin(IMetadataConnection metadataConnection){
  Object hAdmin=adminMap.get(metadataConnection);
  if (hAdmin == null) {
    ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(classLoader);
      Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
      ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
      ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
      hAdmin=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config});
      adminMap.put(metadataConnection,hAdmin);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
    }
  }
  return hAdmin;
}","private Object getAdmin(IMetadataConnection metadataConnection){
  Object hAdmin=adminMap.get(metadataConnection);
  if (hAdmin == null) {
    ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
    try {
      Thread.currentThread().setContextClassLoader(classLoader);
      Object config=ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[0]);
      ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getServerName()});
      ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
      ReflectionUtils.invokeMethod(config,""String_Node_Str"",new Object[]{""String_Node_Str"",metadataConnection.getPort()});
      hAdmin=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config});
      adminMap.put(metadataConnection,hAdmin);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
    }
  }
  return hAdmin;
}",0.9126946672958944
125033,"private boolean isExistTable(IHDFSNode node){
  if (node != null && node.getType() == EHadoopFileTypes.FILE) {
    String tabLabel=MetadataToolHelper.validateTableName(node.getTable().getName());
    return HDFSSchemaUtil.getTableByLabel(getConnection(),tabLabel) != null;
  }
  return false;
}","private boolean isExistTable(IHDFSNode node){
  if (node != null && node.getType() == EHadoopFileTypes.FILE) {
    return HDFSSchemaUtil.getTableByLabel(getConnection(),node.getTable().getName()) != null;
  }
  return false;
}",0.7730769230769231
125034,"public static MetadataTable getTableByLabel(HDFSConnection connection,String label){
  if (label != null) {
    for (    Object obj : ConnectionHelper.getTables(connection)) {
      if (obj == null) {
        continue;
      }
      MetadataTable table=(MetadataTable)obj;
      if (table.getLabel().equals(label)) {
        return table;
      }
    }
  }
  return null;
}","public static MetadataTable getTableByLabel(HDFSConnection connection,String tableLabel){
  if (tableLabel != null) {
    String label=MetadataToolHelper.validateTableName(tableLabel);
    for (    Object obj : ConnectionHelper.getTables(connection)) {
      if (obj == null) {
        continue;
      }
      MetadataTable table=(MetadataTable)obj;
      if (table.getLabel().equals(label)) {
        return table;
      }
    }
  }
  return null;
}",0.9015795868772782
125035,"/** 
 * DOC ycbai Comment method ""updateHadoopClusterConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHadoopClusterConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}","/** 
 * DOC ycbai Comment method ""updateHadoopClusterConnection"".
 * @param connectionItem
 * @param show
 * @param onlySimpleShow
 * @return
 */
public static boolean updateHadoopClusterConnection(ConnectionItem connectionItem,boolean show,final boolean onlySimpleShow){
  List<RelationshipItemBuilder.Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(connectionItem.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.PROPERTY_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(connectionItem.getConnection(),relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.NODE_PROPERTY);
      types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
      return types;
    }
  }
;
  return repositoryUpdateManager.doWork(true,false);
}",0.9683860232945092
125036,"@Override public Set<EUpdateItemType> getTypes(){
  Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
  types.add(EUpdateItemType.NODE_PROPERTY);
  return types;
}","@Override public Set<EUpdateItemType> getTypes(){
  Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
  types.add(EUpdateItemType.NODE_PROPERTY);
  types.add(EUpdateItemType.JOB_PROPERTY_MAPREDUCE);
  return types;
}",0.8664987405541562
125037,"private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.TABLE_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.PARTITION_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return hcConnection.getJobTrackerURI();
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
  return null;
}","private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.TABLE_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.PARTITION_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
  return null;
}",0.9907157831686132
125038,"private Object getHDFSRepositoryValue(HDFSConnection connection,String value,IMetadataTable table){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.FILENAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHDFSRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return hcConnection.getJobTrackerURI();
  }
 else   if (EHDFSRepositoryToComponent.FIELD_SEPARATOR_CHAR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
  return null;
}","private Object getHDFSRepositoryValue(HDFSConnection connection,String value,IMetadataTable table){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.FILENAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHDFSRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHDFSRepositoryToComponent.FIELD_SEPARATOR_CHAR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
  return null;
}",0.9431416639897204
125039,"private boolean isExistTable(IHDFSNode node){
  if (node != null && node.getType() == EHadoopFileTypes.FILE) {
    return HDFSSchemaUtil.getTableByName(getConnection(),node.getTable().getName()) != null;
  }
  return false;
}","private boolean isExistTable(IHDFSNode node){
  if (node != null && node.getType() == EHadoopFileTypes.FILE) {
    String tabName=MetadataToolHelper.validateTableName(node.getTable().getName());
    return HDFSSchemaUtil.getTableByName(getConnection(),tabName) != null;
  }
  return false;
}",0.7751937984496124
125040,"@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EHCatalogImage.HCATALOG_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_CONNECTIONS,!isRepositoryObjectEditable(),creation);
  mainPage=new HCatalogWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}","@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EHCatalogImage.HCATALOG_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new HadoopPropertiesWizardPage(""String_Node_Str"",connectionProperty,pathToSave,HCatalogRepositoryNodeType.HCATALOG,!isRepositoryObjectEditable());
  mainPage=new HCatalogWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}",0.3940435280641466
125041,"@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EHDFSImage.HDFS_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_CONNECTIONS,!isRepositoryObjectEditable(),creation);
  mainPage=new HDFSWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}","@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EHDFSImage.HDFS_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new HadoopPropertiesWizardPage(""String_Node_Str"",connectionProperty,pathToSave,HDFSRepositoryNodeType.HDFS,!isRepositoryObjectEditable());
  mainPage=new HDFSWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}",0.392732895245458
125042,"@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EHadoopClusterImage.HADOOPCLUSTER_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_CONNECTIONS,!isRepositoryObjectEditable(),creation);
  mainPage=new HadoopClusterWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}","@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EHadoopClusterImage.HADOOPCLUSTER_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new HadoopPropertiesWizardPage(""String_Node_Str"",connectionProperty,pathToSave,HadoopClusterRepositoryNodeType.HADOOPCLUSTER,!isRepositoryObjectEditable(),creation);
  mainPage=new HadoopClusterWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}",0.3950524737631184
125043,"@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EOozieImage.OOZIE_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new Step0WizardPage(connectionProperty,pathToSave,ERepositoryObjectType.METADATA_CONNECTIONS,!isRepositoryObjectEditable(),creation);
  mainPage=new OozieWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}","@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(EOozieImage.OOZIE_WIZ));
  if (isToolBar) {
    pathToSave=null;
  }
  propertiesPage=new HadoopPropertiesWizardPage(""String_Node_Str"",connectionProperty,pathToSave,OozieRepositoryNodeType.OOZIE,!isRepositoryObjectEditable());
  mainPage=new OozieWizardPage(connectionItem,isRepositoryObjectEditable(),existingNames);
  if (creation) {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(false);
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(false);
  }
 else {
    propertiesPage.setTitle(Messages.getString(""String_Node_Str""));
    propertiesPage.setDescription(Messages.getString(""String_Node_Str""));
    propertiesPage.setPageComplete(isRepositoryObjectEditable());
    mainPage.setTitle(Messages.getString(""String_Node_Str""));
    mainPage.setDescription(Messages.getString(""String_Node_Str""));
    mainPage.setPageComplete(isRepositoryObjectEditable());
  }
  addPage(propertiesPage);
  addPage(mainPage);
}",0.3930635838150289
125044,"/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(columnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}","/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  Object hAdmin=getAdmin(metadataConnection);
  Object config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  ClassLoader oldClassLoaderLoader=Thread.currentThread().getContextClassLoader();
  try {
    Thread.currentThread().setContextClassLoader(classLoader);
    if (hAdmin != null) {
      config=ReflectionUtils.invokeMethod(hAdmin,""String_Node_Str"",new Object[0]);
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      Object scan=Class.forName(""String_Node_Str"",true,classLoader).newInstance();
      Object table=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{config,tableName});
      ReflectionUtils.invokeMethod(scan,""String_Node_Str"",new Object[]{columnFamilyName.getBytes()});
      List<String> columnNameExsit=new ArrayList<String>();
      Object resultSetscanner=ReflectionUtils.invokeMethod(table,""String_Node_Str"",new Object[]{scan});
      Object result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      while (result != null) {
        List<Object> list=(List<Object>)ReflectionUtils.invokeMethod(result,""String_Node_Str"",new Object[0]);
        if (list != null) {
          for (          Object kv : list) {
            byte[] family=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
            String familyName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{family});
            if (familyName.equals(columnFamilyNode.getValue())) {
              byte[] qualifier=(byte[])ReflectionUtils.invokeMethod(kv,""String_Node_Str"",new Object[0]);
              String columnName=(String)ReflectionUtils.invokeStaticMethod(""String_Node_Str"",classLoader,""String_Node_Str"",new Object[]{qualifier});
              if (columnName != null && columnName.equals(columnNode.getValue()) && !columnNameExsit.contains(columnName)) {
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(columnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                column.getTaggedValue().add(tv);
                List<MetadataColumn> columns=metadataTable.getColumns();
                columns.add(column);
                columnNameExsit.add(columnName);
                List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                Catalog catalogToWrite=null;
                for (                Catalog c : catalogs) {
                  if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                    catalogToWrite=c;
                    break;
                  }
                }
                if (catalogToWrite != null) {
                  boolean findTable=false;
                  List exsitTables=CatalogHelper.getTables(catalogToWrite);
                  for (                  Object obj : exsitTables) {
                    if (obj instanceof TdTable) {
                      TdTable tb=(TdTable)obj;
                      if (tableName != null && tb.getLabel().equals(tableName)) {
                        List<MetadataColumn> columnsExsit=tb.getColumns();
                        columnsExsit.add(column);
                        findTable=true;
                      }
                    }
                  }
                  if (!findTable) {
                    if (metadataTable.getId() == null) {
                      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
                      metadataTable.setId(factory.getNextId());
                    }
                    PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                  }
                }
              }
            }
          }
        }
        result=ReflectionUtils.invokeMethod(resultSetscanner,""String_Node_Str"",new Object[0]);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldClassLoaderLoader);
  }
}",0.9756501916899804
125045,"public HCatalogSchemaForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,IWizardPage page,HCatalogConnection temConnection){
  super(parent,SWT.NONE,connectionItem);
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    if ((metadataTable != null && t.getLabel().equals(metadataTable.getLabel())) || metadataTable == null) {
      this.metadataTable=t;
      break;
    }
  }
  setupForm();
}","public HCatalogSchemaForm(Composite parent,ConnectionItem connectionItem,MetadataTable metadataTable,IWizardPage page,HCatalogConnection temConnection){
  super(parent,SWT.NONE,connectionItem);
  this.parentWizardPage=page;
  this.temConnection=temConnection;
  this.metadataTable=metadataTable;
  final Set<MetadataTable> tables=ConnectionHelper.getTables(temConnection);
  for (  MetadataTable t : tables) {
    if ((metadataTable != null && t.getLabel().equals(metadataTable.getLabel())) || metadataTable == null) {
      this.metadataTable=t;
      break;
    }
  }
}",0.9870354364736388
125046,"private Resource create(IProject project,HCatalogConnectionItem item,IPath path,ERepositoryObjectType type) throws PersistenceException {
  Resource itemResource=xmiResourceManager.createItemResource(project,item,path,type,false);
  itemResource.getContents().add(item.getConnection());
  return itemResource;
}","private Resource create(IProject project,HCatalogConnectionItem item,IPath path,ERepositoryObjectType type) throws PersistenceException {
  Resource itemResource=xmiResourceManager.createItemResource(project,item,path,type,false);
  MetadataManager.addContents(item,itemResource);
  itemResource.getContents().add(item.getConnection());
  return itemResource;
}",0.7172619047619048
125047,"private Resource create(IProject project,HDFSConnectionItem item,IPath path,ERepositoryObjectType type) throws PersistenceException {
  Resource itemResource=xmiResourceManager.createItemResource(project,item,path,type,false);
  itemResource.getContents().add(item.getConnection());
  return itemResource;
}","private Resource create(IProject project,HDFSConnectionItem item,IPath path,ERepositoryObjectType type) throws PersistenceException {
  Resource itemResource=xmiResourceManager.createItemResource(project,item,path,type,false);
  MetadataManager.addContents(item,itemResource);
  itemResource.getContents().add(item.getConnection());
  return itemResource;
}",0.8524096385542169
125048,"@Override public void addNode(ERepositoryObjectType type,RepositoryNode parentNode,IRepositoryViewObject repositoryObject,RepositoryNode node){
  if (type == HadoopClusterRepositoryNodeType.HADOOPCLUSTER) {
    Project project=new Project(ProjectManager.getInstance().getProject(node.getObject().getProperty()));
    for (    IHadoopSubnodeRepositoryContentHandler handler : HadoopSubnodeRepositoryContentManager.getHandlers()) {
      handler.addNode(project,node);
    }
    addHadoopDBNode(node);
  }
}","@Override public void addNode(ERepositoryObjectType type,RepositoryNode parentNode,IRepositoryViewObject repositoryObject,RepositoryNode node){
  if (type == HadoopClusterRepositoryNodeType.HADOOPCLUSTER) {
    Project project=new Project(ProjectManager.getInstance().getProject(node.getObject().getProperty()));
    for (    IHadoopSubnodeRepositoryContentHandler handler : HadoopSubnodeRepositoryContentManager.getHandlers()) {
      handler.addNode(project,node);
    }
    addHadoopDBNode(project,node);
  }
}",0.9921414538310412
125049,"private Map<String,Map<String,List<DatabaseConnectionItem>>> getLinkedDbMap(){
  Map<String,Map<String,List<DatabaseConnectionItem>>> linkedDbMap=new HashMap<String,Map<String,List<DatabaseConnectionItem>>>();
  try {
    List<IRepositoryViewObject> repObjs=ProxyRepositoryFactory.getInstance().getAll(ERepositoryObjectType.METADATA_CONNECTIONS);
    for (    IRepositoryViewObject repObj : repObjs) {
      if (repObj != null && repObj.getProperty() != null) {
        DatabaseConnectionItem item=(DatabaseConnectionItem)repObj.getProperty().getItem();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String hcId=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
        if (hcId != null) {
          Map<String,List<DatabaseConnectionItem>> dbItemMap=linkedDbMap.get(hcId);
          if (dbItemMap == null) {
            dbItemMap=new HashMap<String,List<DatabaseConnectionItem>>();
            linkedDbMap.put(hcId,dbItemMap);
          }
          List<DatabaseConnectionItem> itemList=dbItemMap.get(connection.getDatabaseType());
          if (itemList == null) {
            itemList=new ArrayList<DatabaseConnectionItem>();
            dbItemMap.put(connection.getDatabaseType(),itemList);
          }
          itemList.add(item);
        }
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return linkedDbMap;
}","private Map<String,Map<String,List<DatabaseConnectionItem>>> getLinkedDbMap(Project project){
  Map<String,Map<String,List<DatabaseConnectionItem>>> linkedDbMap=new HashMap<String,Map<String,List<DatabaseConnectionItem>>>();
  try {
    List<IRepositoryViewObject> repObjs=ProxyRepositoryFactory.getInstance().getAll(project,ERepositoryObjectType.METADATA_CONNECTIONS);
    for (    IRepositoryViewObject repObj : repObjs) {
      if (repObj != null && repObj.getProperty() != null) {
        DatabaseConnectionItem item=(DatabaseConnectionItem)repObj.getProperty().getItem();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String hcId=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
        if (hcId != null) {
          Map<String,List<DatabaseConnectionItem>> dbItemMap=linkedDbMap.get(hcId);
          if (dbItemMap == null) {
            dbItemMap=new HashMap<String,List<DatabaseConnectionItem>>();
            linkedDbMap.put(hcId,dbItemMap);
          }
          List<DatabaseConnectionItem> itemList=dbItemMap.get(connection.getDatabaseType());
          if (itemList == null) {
            itemList=new ArrayList<DatabaseConnectionItem>();
            dbItemMap.put(connection.getDatabaseType(),itemList);
          }
          itemList.add(item);
        }
      }
    }
  }
 catch (  PersistenceException e) {
  }
  return linkedDbMap;
}",0.991869918699187
125050,"private void addHadoopDBNode(RepositoryNode parentNode){
  String id=parentNode.getObject().getId();
  Map<String,List<DatabaseConnectionItem>> dbItemMap=getLinkedDbMap().get(id);
  if (dbItemMap != null && dbItemMap.size() > 0) {
    Iterator<Entry<String,List<DatabaseConnectionItem>>> iterator=dbItemMap.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<String,List<DatabaseConnectionItem>> entry=iterator.next();
      List<DatabaseConnectionItem> dbItems=entry.getValue();
      EDatabaseConnTemplate dbTemplate=EDatabaseConnTemplate.indexOfTemplate(entry.getKey());
      RepositoryNode hadoopFolderNode=createHadoopFolderNode(parentNode,ERepositoryObjectType.METADATA_CONNECTIONS,dbTemplate.getDBDisplayName(),dbItems.size());
      parentNode.getChildren().add(hadoopFolderNode);
      for (      DatabaseConnectionItem dbItem : dbItems) {
        RepositoryNode hadoopSubNode=createHadoopSubNode(hadoopFolderNode,dbItem);
      }
    }
  }
}","private void addHadoopDBNode(Project project,RepositoryNode parentNode){
  String id=parentNode.getObject().getId();
  Map<String,List<DatabaseConnectionItem>> dbItemMap=getLinkedDbMap(project).get(id);
  if (dbItemMap != null && dbItemMap.size() > 0) {
    Iterator<Entry<String,List<DatabaseConnectionItem>>> iterator=dbItemMap.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<String,List<DatabaseConnectionItem>> entry=iterator.next();
      List<DatabaseConnectionItem> dbItems=entry.getValue();
      EDatabaseConnTemplate dbTemplate=EDatabaseConnTemplate.indexOfTemplate(entry.getKey());
      RepositoryNode hadoopFolderNode=createHadoopFolderNode(parentNode,ERepositoryObjectType.METADATA_CONNECTIONS,dbTemplate.getDBDisplayName(),dbItems.size());
      parentNode.getChildren().add(hadoopFolderNode);
      for (      DatabaseConnectionItem dbItem : dbItems) {
        RepositoryNode hadoopSubNode=createHadoopSubNode(hadoopFolderNode,dbItem);
      }
    }
  }
}",0.9883070665988816
125051,"/** 
 * DOC ycbai Comment method ""extractPartitionsJsonStr"". Extract partition json string.
 * @param connection
 * @param tableName
 * @return
 * @throws Exception
 */
public static synchronized String extractPartitionsJsonStr(HCatalogConnection connection,String tableName) throws Exception {
  String path=connection.getDatabase() + SEPARATOR + TABLE+ SEPARATOR+ tableName+ SEPARATOR+ PARTITION;
  WebClient client=HCatalogServiceUtil.getHCatalogClient(connection,path);
  JSONObject obj=HCatalogServiceUtil.getDataFromHCatalog(client);
  if (obj != null) {
    return obj.toJSONString();
  }
  return null;
}","/** 
 * DOC ycbai Comment method ""extractPartitionsJsonStr"". Extract partition json string.
 * @param connection
 * @param tableName
 * @return
 * @throws Exception
 */
public static synchronized String extractPartitionsJsonStr(HCatalogConnection connection,String tableName) throws Exception {
  String path=connection.getDatabase() + SEPARATOR + TABLE+ SEPARATOR+ tableName+ SEPARATOR+ PARTITION;
  WebClient client=HCatalogServiceUtil.getHCatalogClient(connection,path);
  JSONObject obj=HCatalogServiceUtil.getDataFromHCatalog(client,tableName);
  if (obj != null) {
    return obj.toJSONString();
  }
  return null;
}",0.9918962722852512
125052,"/** 
 * DOC ycbai Comment method ""getDataFromHCatalog"". Get data from HCatalog client.
 * @param client
 * @return
 * @throws Exception
 */
public static JSONObject getDataFromHCatalog(WebClient client) throws Exception {
  Response response=client.get();
  InputStream inputStream=(InputStream)response.getEntity();
  String input=IOUtils.toString(inputStream);
  JSONObject jsonObject=(JSONObject)JSONValue.parse(input);
  String errorMsgDetail=""String_Node_Str"";
  Object errorObj=jsonObject.get(""String_Node_Str"");
  if (errorObj != null) {
    errorMsgDetail=errorObj.toString();
  }
  int status=response.getStatus();
  if (status != 200) {
switch (status) {
case 400:
      throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 401:
    throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 404:
  throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 500:
throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 503:
throw new Exception(""String_Node_Str"" + errorMsgDetail);
default :
throw new Exception(jsonObject.get(""String_Node_Str"") + ""String_Node_Str"" + jsonObject.get(""String_Node_Str"")+ jsonObject.get(""String_Node_Str""));
}
}
return jsonObject;
}","public static JSONObject getDataFromHCatalog(WebClient client,String tableName) throws Exception {
  Response response=client.get();
  InputStream inputStream=(InputStream)response.getEntity();
  String input=IOUtils.toString(inputStream);
  JSONObject jsonObject=(JSONObject)JSONValue.parse(input);
  String errorMsgDetail=""String_Node_Str"";
  Object errorObj=jsonObject.get(""String_Node_Str"");
  if (errorObj != null) {
    errorMsgDetail=errorObj.toString();
  }
  int status=response.getStatus();
  if (status != 200) {
switch (status) {
case 400:
      throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 401:
    throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 404:
  throw new Exception(""String_Node_Str"" + errorMsgDetail);
case 500:
if ((""String_Node_Str"" + tableName + ""String_Node_Str"").equals(errorMsgDetail)) {
  CommonExceptionHandler.warn(""String_Node_Str"" + errorMsgDetail);
}
 else {
  throw new Exception(""String_Node_Str"" + errorMsgDetail);
}
break;
case 503:
throw new Exception(""String_Node_Str"" + errorMsgDetail);
default :
throw new Exception(jsonObject.get(""String_Node_Str"") + ""String_Node_Str"" + jsonObject.get(""String_Node_Str"")+ jsonObject.get(""String_Node_Str""));
}
}
return jsonObject;
}",0.8236744759556104
125053,"private void initTreeNavigatorNodes(){
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (metadataTable == null) {
    if (tables != null && !tables.isEmpty()) {
      for (      MetadataTable table : tables) {
        if (!TableHelper.isDeleted(table)) {
          metadataTable=table;
          break;
        }
      }
    }
 else {
      addMetadataTable();
    }
  }
  tableNavigator.removeAll();
  List<String> tablenames=new ArrayList<String>();
  for (  MetadataTable t : tables) {
    tablenames.add(t.getLabel());
  }
  String[] allTableLabel=tablenames.toArray(new String[0]);
  Arrays.sort(allTableLabel);
  for (  String element : allTableLabel) {
    if (element.equals(metadataTable.getLabel())) {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
      tableNavigator.setSelection(subItem);
    }
 else {
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(element);
    }
  }
}","private void initTreeNavigatorNodes(){
  tableNavigator.removeAll();
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(getConnection());
  if (tables != null && !tables.isEmpty()) {
    boolean metadataTableExist=false;
    if (metadataTable == null) {
      metadataTableExist=false;
    }
 else {
      for (      MetadataTable table : tables) {
        if (table.getLabel().equals(metadataTable.getLabel())) {
          metadataTableExist=true;
        }
      }
    }
    if (!metadataTableExist) {
      metadataTable=tables.get(0);
    }
    Collections.sort(tables,new Comparator<MetadataTable>(){
      @Override public int compare(      MetadataTable tab1,      MetadataTable tab2){
        String tab1Label=tab1.getLabel();
        String tab2Label=tab2.getLabel();
        return tab1Label.compareTo(tab2Label);
      }
    }
);
    for (    MetadataTable table : tables) {
      String tabLabel=table.getLabel();
      TableItem subItem=new TableItem(tableNavigator,SWT.NONE);
      subItem.setText(tabLabel);
      if (tabLabel.equals(metadataTable.getLabel())) {
        tableNavigator.setSelection(subItem);
      }
    }
  }
}",0.3749424228466144
125054,"private void initMetadataForm(){
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}","private void initMetadataForm(){
  if (metadataTable == null) {
    return;
  }
  metadataEditor.setMetadataTable(metadataTable);
  IPreferenceStore store=RepositoryManager.getPreferenceStore();
  Boolean flag=store.getBoolean(IRepositoryPrefConstants.ALLOW_SPECIFIC_CHARACTERS_FOR_SCHEMA_COLUMNS);
  if (!flag.booleanValue()) {
    List<MetadataColumn> list=metadataEditor.getMetadataColumnList();
    for (    MetadataColumn column : list) {
      if (!isCnorEn(column.getLabel())) {
        String label=metadataEditor.getNextGeneratedColumnName(""String_Node_Str"");
        column.setLabel(label);
      }
    }
  }
  tableEditorView.setMetadataEditor(metadataEditor);
  tableEditorView.getTableViewerCreator().layout();
  metadataEditor.addAfterOperationListListener(new IListenableListListener(){
    @Override public void handleEvent(    ListenableListEvent event){
      changeTableNavigatorStatus(checkFieldsValue());
    }
  }
);
  String label=MetadataToolHelper.validateValue(metadataTable.getLabel());
  nameText.setText(label);
  commentText.setText(metadataTable.getComment());
  updateRetreiveSchemaButton();
  nameText.forceFocus();
}",0.979138925876609
125055,"@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table){
  if (value != null && canHandle(connection)) {
    return getHadoopClusterRepositoryValue((HadoopClusterConnection)connection,value,table);
  }
  return null;
}","@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table,String targetComponent){
  if (value != null && canHandle(connection)) {
    return getHadoopClusterRepositoryValue((HadoopClusterConnection)connection,value,table);
  }
  return null;
}",0.9577981651376148
125056,"@Override protected boolean hideAction(RepositoryNode node){
  HadoopClusterConnectionItem hcConnectionItem=HCRepositoryUtil.getHCConnectionItemFromRepositoryNode(node);
  if (hcConnectionItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
    EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hcConnection.getDistribution(),false);
    if (distribution == EHadoopDistributions.HORTONWORKS) {
      return false;
    }
  }
  return true;
}","@Override protected boolean hideAction(RepositoryNode node){
  HadoopClusterConnectionItem hcConnectionItem=HCRepositoryUtil.getHCConnectionItemFromRepositoryNode(node);
  if (hcConnectionItem != null) {
    HadoopClusterConnection hcConnection=(HadoopClusterConnection)hcConnectionItem.getConnection();
    EHadoopDistributions distribution=EHadoopDistributions.getDistributionByName(hcConnection.getDistribution(),false);
    if (distribution == EHadoopDistributions.HORTONWORKS || distribution == EHadoopDistributions.CUSTOM) {
      return false;
    }
  }
  return true;
}",0.957542908762421
125057,"@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table){
  if (value != null && canHandle(connection)) {
    return getHCatalogRepositoryValue((HCatalogConnection)connection,value,table);
  }
  return null;
}","@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table,String targetComponent){
  if (value != null && canHandle(connection)) {
    return getHCatalogRepositoryValue((HCatalogConnection)connection,value,table,targetComponent);
  }
  return null;
}",0.9279112754158964
125058,"private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.TABLE_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.PARTITION_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
  return null;
}","private Object getHCatalogRepositoryValue(HCatalogConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHCatalogRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHCatalogRepositoryToComponent.HCAT_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_HOST.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getHostName()));
  }
 else   if (EHCatalogRepositoryToComponent.TEMPLETON_PORT.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getPort()));
  }
 else   if (EHCatalogRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHCatalogRepositoryToComponent.KRB_PRINC.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.KRB_REALM.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbRealm()));
  }
 else   if (EHCatalogRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.DATABASE_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getDatabase()));
  }
 else   if (EHCatalogRepositoryToComponent.TABLE_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.PARTITION_NAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHCatalogRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHCatalogRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHCatalogRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHCatalogRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHCatalogRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHCatalogRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHCatalogRepositoryToComponent.JOBTRACKER_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getKrbPrincipal()));
  }
 else   if (EHCatalogRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return HCATALOG_LOAD;
  }
 else   if (EHCatalogRepositoryToComponent.STORE.getRepositoryValue().equals(value)) {
    return HCATALOG_STORE;
  }
 else   if (EHCatalogRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG_HCATALOG.getName());
    }
  }
  return null;
}",0.954370533260033
125059,"@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table){
  if (value != null && canHandle(connection)) {
    return getHDFSRepositoryValue((HDFSConnection)connection,value,table);
  }
  return null;
}","@Override public Object getComponentValue(Connection connection,String value,IMetadataTable table,String targetComponent){
  if (value != null && canHandle(connection)) {
    return getHDFSRepositoryValue((HDFSConnection)connection,value,table,targetComponent);
  }
  return null;
}",0.9257142857142856
125060,"private Object getHDFSRepositoryValue(HDFSConnection connection,String value,IMetadataTable table){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.FILENAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHDFSRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHDFSRepositoryToComponent.FIELD_SEPARATOR_CHAR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
  return null;
}","private Object getHDFSRepositoryValue(HDFSConnection connection,String value,IMetadataTable table,String targetComponent){
  HadoopClusterConnection hcConnection=HCRepositoryUtil.getRelativeHadoopClusterConnection(connection);
  if (hcConnection == null) {
    return null;
  }
  if (EHDFSRepositoryToComponent.DISTRIBUTION.getRepositoryValue().equals(value)) {
    return hcConnection.getDistribution();
  }
 else   if (EHDFSRepositoryToComponent.DB_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.HADOOP_CUSTOM_JARS.getRepositoryValue().equals(value)) {
    if (targetComponent != null && targetComponent.startsWith(""String_Node_Str"")) {
      return hcConnection.getParameters().get(ECustomVersionGroup.PIG.getName());
    }
    return HCVersionUtil.getCompCustomJarsParamFromRep(hcConnection,ECustomVersionGroup.COMMON);
  }
 else   if (EHDFSRepositoryToComponent.AUTHENTICATION_MODE.getRepositoryValue().equals(value)) {
    return hcConnection.getAuthMode();
  }
 else   if (EHDFSRepositoryToComponent.FS_DEFAULT_NAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getNameNodeURI()));
  }
 else   if (EHDFSRepositoryToComponent.USE_KRB.getRepositoryValue().equals(value)) {
    return hcConnection.isEnableKerberos();
  }
 else   if (EHDFSRepositoryToComponent.NAMENODE_PRINCIPAL.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getPrincipal()));
  }
 else   if (EHDFSRepositoryToComponent.USERNAME.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getUserName()));
  }
 else   if (EHDFSRepositoryToComponent.GROUP.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getGroup()));
  }
 else   if (EHDFSRepositoryToComponent.FILENAME.getRepositoryValue().equals(value)) {
  }
 else   if (EHDFSRepositoryToComponent.ROWSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getRowSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.FIELDSEPARATOR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOCAL.getRepositoryValue().equals(value)) {
    return false;
  }
 else   if (EHDFSRepositoryToComponent.MAPREDUCE.getRepositoryValue().equals(value)) {
    return true;
  }
 else   if (EHDFSRepositoryToComponent.PIG_VERSION.getRepositoryValue().equals(value)) {
    return hcConnection.getDfVersion();
  }
 else   if (EHDFSRepositoryToComponent.MAPRED_JOB_TRACKER.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(hcConnection.getJobTrackerURI()));
  }
 else   if (EHDFSRepositoryToComponent.FIELD_SEPARATOR_CHAR.getRepositoryValue().equals(value)) {
    return TalendQuoteUtils.addQuotesIfNotExist(StringUtils.trimToNull(connection.getFieldSeparator()));
  }
 else   if (EHDFSRepositoryToComponent.LOAD.getRepositoryValue().equals(value)) {
    return ""String_Node_Str"";
  }
  return null;
}",0.9699213327163352
125061,"@Override protected void deleteNode(Item item) throws Exception {
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  HadoopClusterConnectionItem hadoopClusterItem=(HadoopClusterConnectionItem)item;
  HadoopClusterConnection connection=(HadoopClusterConnection)hadoopClusterItem.getConnection();
  List<String> connectionList=connection.getConnectionList();
  for (  String connId : connectionList) {
    IRepositoryViewObject repObj=null;
    try {
      repObj=factory.getLastVersion(connId);
    }
 catch (    PersistenceException e) {
    }
    if (repObj != null) {
      factory.deleteObjectPhysical(repObj);
    }
  }
  connection.getConnectionList().clear();
  factory.save(hadoopClusterItem);
}","@Override protected void deleteNode(Item item) throws Exception {
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  Project project=new Project(ProjectManager.getInstance().getProject(item.getProperty()));
  HadoopClusterConnectionItem hadoopClusterItem=(HadoopClusterConnectionItem)item;
  HadoopClusterConnection connection=(HadoopClusterConnection)hadoopClusterItem.getConnection();
  List<String> connectionList=connection.getConnectionList();
  for (  String connId : connectionList) {
    IRepositoryViewObject repObj=null;
    try {
      repObj=factory.getLastVersion(project,connId);
    }
 catch (    PersistenceException e) {
    }
    if (repObj != null) {
      factory.deleteObjectPhysical(repObj);
    }
  }
  connection.getConnectionList().clear();
  factory.save(hadoopClusterItem);
  String clusterId=hadoopClusterItem.getProperty().getId();
  List<IRepositoryViewObject> repObjs=ProxyRepositoryFactory.getInstance().getAll(project,ERepositoryObjectType.METADATA_CONNECTIONS);
  for (  IRepositoryViewObject repObj : repObjs) {
    if (repObj != null && repObj.getProperty() != null) {
      DatabaseConnectionItem dbItem=(DatabaseConnectionItem)repObj.getProperty().getItem();
      DatabaseConnection dbConnection=(DatabaseConnection)dbItem.getConnection();
      String hcId=dbConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
      if (clusterId.equals(hcId)) {
        dbConnection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID,null);
        factory.save(dbItem);
      }
    }
  }
}",0.6288172043010752
125062,"/** 
 * DOC ycbai Comment method ""getSubitemsOfHadoopCluster"". Get subitems of hadoop cluster like hdfs, hcatalog, hive etc.
 * @param item
 * @return
 */
public static Set<Item> getSubitemsOfHadoopCluster(Item item){
  Set<Item> subItems=new HashSet<Item>();
  if (item.eClass() != HadoopClusterPackage.Literals.HADOOP_CLUSTER_CONNECTION_ITEM) {
    return subItems;
  }
  HadoopClusterConnectionItem clusterConnectionItem=(HadoopClusterConnectionItem)item;
  HadoopClusterConnection clusterConnection=(HadoopClusterConnection)clusterConnectionItem.getConnection();
  EList<String> connectionList=clusterConnection.getConnectionList();
  for (  String connId : connectionList) {
    if (connId != null) {
      IRepositoryViewObject repObj=null;
      try {
        repObj=ProxyRepositoryFactory.getInstance().getLastVersion(connId);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
      if (repObj != null && repObj.getProperty() != null) {
        Item subItem=repObj.getProperty().getItem();
        if (subItem != null) {
          subItems.add(subItem);
        }
      }
    }
  }
  return subItems;
}","/** 
 * DOC ycbai Comment method ""getSubitemsOfHadoopCluster"". Get subitems of hadoop cluster like hdfs, hcatalog, hive etc.
 * @param item
 * @return
 * @throws PersistenceException
 */
public static Set<Item> getSubitemsOfHadoopCluster(Item item) throws PersistenceException {
  Set<Item> subItems=new HashSet<Item>();
  if (item.eClass() != HadoopClusterPackage.Literals.HADOOP_CLUSTER_CONNECTION_ITEM) {
    return subItems;
  }
  Project project=new Project(ProjectManager.getInstance().getProject(item.getProperty()));
  HadoopClusterConnectionItem clusterConnectionItem=(HadoopClusterConnectionItem)item;
  HadoopClusterConnection clusterConnection=(HadoopClusterConnection)clusterConnectionItem.getConnection();
  EList<String> connectionList=clusterConnection.getConnectionList();
  for (  String connId : connectionList) {
    if (connId != null) {
      IRepositoryViewObject repObj=ProxyRepositoryFactory.getInstance().getLastVersion(project,connId);
      if (repObj != null && repObj.getProperty() != null) {
        Item subItem=repObj.getProperty().getItem();
        if (subItem != null) {
          subItems.add(subItem);
        }
      }
    }
  }
  String clusterId=clusterConnectionItem.getProperty().getId();
  List<IRepositoryViewObject> repObjs=ProxyRepositoryFactory.getInstance().getAll(project,ERepositoryObjectType.METADATA_CONNECTIONS);
  for (  IRepositoryViewObject repObj : repObjs) {
    if (repObj != null && repObj.getProperty() != null) {
      DatabaseConnectionItem dbItem=(DatabaseConnectionItem)repObj.getProperty().getItem();
      DatabaseConnection dbConnection=(DatabaseConnection)dbItem.getConnection();
      String hcId=dbConnection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID);
      if (clusterId.equals(hcId)) {
        subItems.add(dbItem);
      }
    }
  }
  return subItems;
}",0.6724252491694352
125063,"@Override protected int getWizardWidth(){
  return 600;
}","@Override protected int getWizardWidth(){
  return 780;
}",0.9649122807017544
125064,"@Override public boolean isHadoopSubItem(Item item){
  if (isHadoopClusterItem(item)) {
    return false;
  }
  for (  IHadoopSubnodeRepositoryContentHandler handler : HadoopSubnodeRepositoryContentManager.getHandlers()) {
    if (handler.getRelativeHadoopClusterItemId(item) != null) {
      return true;
    }
  }
  return false;
}","@Override public boolean isHadoopSubItem(Item item){
  if (isHadoopClusterItem(item)) {
    return false;
  }
  for (  IHadoopSubnodeRepositoryContentHandler handler : HadoopSubnodeRepositoryContentManager.getHandlers()) {
    if (handler.isProcess(item)) {
      return true;
    }
  }
  return false;
}",0.9073783359497644
125065,"public static Map<String,Set<String>> getCustomVersionMap(HadoopClusterConnection connection){
  Map<String,Set<String>> map=new HashMap<String,Set<String>>();
  if (connection == null) {
    return map;
  }
  EMap<String,String> parameters=connection.getParameters();
  if (parameters.size() == 0) {
    return map;
  }
  ECustomVersionGroup[] values=ECustomVersionGroup.values();
  for (  ECustomVersionGroup group : values) {
    String groupName=group.getName();
    String jarString=parameters.get(groupName);
    if (jarString != null) {
      Set<String> jarSet=new HashSet<String>();
      String[] jarArray=jarString.split(JAR_SEPARATOR);
      for (      String jar : jarArray) {
        jarSet.add(jar);
      }
      map.put(groupName,jarSet);
    }
  }
  return map;
}","public static Map<String,Set<String>> getCustomVersionMap(HadoopClusterConnection connection){
  Map<String,Set<String>> map=new HashMap<String,Set<String>>();
  if (connection == null) {
    return map;
  }
  EMap<String,String> parameters=connection.getParameters();
  if (parameters.size() == 0) {
    return map;
  }
  ECustomVersionGroup[] values=ECustomVersionGroup.values();
  for (  ECustomVersionGroup group : values) {
    String groupName=group.getName();
    String jarString=parameters.get(groupName);
    if (jarString != null && !jarString.isEmpty()) {
      Set<String> jarSet=new HashSet<String>();
      String[] jarArray=jarString.split(JAR_SEPARATOR);
      for (      String jar : jarArray) {
        jarSet.add(jar);
      }
      map.put(groupName,jarSet);
    }
  }
  return map;
}",0.9848675914249684
125066,"@Override protected String getClusterName(HadoopSubConnection hadoopSubConnection){
  StringBuffer cnBuffer=new StringBuffer();
  cnBuffer.append(""String_Node_Str"");
  HCatalogConnection connection=(HCatalogConnection)hadoopSubConnection;
  EHadoopVersion4Drivers version=EHadoopVersion4Drivers.indexOfByVersion(connection.getHcatVersion());
  String hostName=connection.getHostName();
  if (version != null) {
    cnBuffer.append(version.getVersionDisplay());
    cnBuffer.append(UNDER_LINE);
  }
  if (hostName != null) {
    cnBuffer.append(hostName);
  }
  String clusterName=cnBuffer.toString();
  clusterName=clusterName.replaceAll(""String_Node_Str"",UNDER_LINE);
  return clusterName;
}","@Override protected String getClusterName(HadoopSubConnection hadoopSubConnection){
  StringBuffer cnBuffer=new StringBuffer();
  HCatalogConnection connection=(HCatalogConnection)hadoopSubConnection;
  EHadoopVersion4Drivers version=EHadoopVersion4Drivers.indexOfByVersion(connection.getHcatVersion());
  String hostName=connection.getHostName();
  if (version != null) {
    cnBuffer.append(version.getVersionValue());
    cnBuffer.append(UNDER_LINE);
  }
  if (hostName != null) {
    cnBuffer.append(hostName);
  }
  String clusterName=cnBuffer.toString();
  clusterName=clusterName.replaceAll(""String_Node_Str"",UNDER_LINE);
  return clusterName;
}",0.9627976190476192
125067,"@Override protected String getClusterName(HadoopSubConnection hadoopConnection){
  StringBuffer cnBuffer=new StringBuffer();
  cnBuffer.append(""String_Node_Str"");
  HDFSConnection connection=(HDFSConnection)hadoopConnection;
  EHadoopVersion4Drivers version=EHadoopVersion4Drivers.indexOfByVersion(connection.getDfVersion());
  if (version != null) {
    cnBuffer.append(version.getVersionDisplay());
    cnBuffer.append(UNDER_LINE);
  }
  String nameNodeURI=connection.getNameNodeURI();
  if (nameNodeURI != null) {
    cnBuffer.append(HadoopParameterUtil.getHostNameFromNameNodeURI(nameNodeURI));
  }
  String clusterName=cnBuffer.toString();
  clusterName=clusterName.replaceAll(""String_Node_Str"",UNDER_LINE);
  return clusterName;
}","@Override protected String getClusterName(HadoopSubConnection hadoopConnection){
  StringBuffer cnBuffer=new StringBuffer();
  HDFSConnection connection=(HDFSConnection)hadoopConnection;
  EHadoopVersion4Drivers version=EHadoopVersion4Drivers.indexOfByVersion(connection.getDfVersion());
  if (version != null) {
    cnBuffer.append(version.getVersionValue());
    cnBuffer.append(UNDER_LINE);
  }
  String nameNodeURI=connection.getNameNodeURI();
  if (nameNodeURI != null) {
    cnBuffer.append(HadoopParameterUtil.getHostNameFromNameNodeURI(nameNodeURI));
  }
  String clusterName=cnBuffer.toString();
  clusterName=clusterName.replaceAll(""String_Node_Str"",UNDER_LINE);
  return clusterName;
}",0.9650837988826816
125068,"@Override protected void addFieldsListeners(){
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setUserName(userNameText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String separatorDisplay=rowSeparatorCombo.getText();
      EHDFSRowSeparator rowSeparator=EHDFSRowSeparator.indexOf(separatorDisplay,true);
      if (rowSeparator != null) {
        rowSeparatorText.setText(rowSeparator.getValue());
        rowSeparatorText.forceFocus();
        rowSeparatorText.selectAll();
      }
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String separatorDisplay=fieldSeparatorCombo.getText();
      EHDFSFieldSeparator fieldSeparator=EHDFSFieldSeparator.indexOf(separatorDisplay,true);
      if (fieldSeparator != null) {
        fieldSeparatorText.setText(fieldSeparator.getValue());
        fieldSeparatorText.forceFocus();
        fieldSeparatorText.selectAll();
      }
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparator(rowSeparatorText.getText());
      checkFieldsValue();
      EHDFSRowSeparator rowSeparator=EHDFSRowSeparator.indexOf(rowSeparatorText.getText(),false);
      if (rowSeparator == null) {
        rowSeparatorCombo.deselectAll();
      }
 else {
        rowSeparatorCombo.setText(rowSeparator.getDisplayName());
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparator(fieldSeparatorText.getText());
      checkFieldsValue();
      EHDFSFieldSeparator fieldSeparator=EHDFSFieldSeparator.indexOf(fieldSeparatorText.getText(),false);
      if (fieldSeparator == null) {
        fieldSeparatorCombo.deselectAll();
      }
 else {
        fieldSeparatorCombo.setText(fieldSeparator.getDisplayName());
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  userNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setUserName(userNameText.getText());
      checkFieldsValue();
    }
  }
);
  rowSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String separatorDisplay=rowSeparatorCombo.getText();
      EHDFSRowSeparator rowSeparator=EHDFSRowSeparator.indexOf(separatorDisplay,true);
      if (rowSeparator != null) {
        rowSeparatorText.setText(rowSeparator.getValue());
        rowSeparatorText.forceFocus();
        rowSeparatorText.selectAll();
      }
    }
  }
);
  fieldSeparatorCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      String separatorDisplay=fieldSeparatorCombo.getText();
      EHDFSFieldSeparator fieldSeparator=EHDFSFieldSeparator.indexOf(separatorDisplay,true);
      if (fieldSeparator != null) {
        fieldSeparatorText.setText(fieldSeparator.getValue());
        fieldSeparatorText.forceFocus();
        fieldSeparatorText.selectAll();
      }
    }
  }
);
  rowSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setRowSeparator(rowSeparatorText.getText());
      checkFieldsValue();
      EHDFSRowSeparator rowSeparator=EHDFSRowSeparator.indexOf(rowSeparatorText.getText(),false);
      if (rowSeparator == null) {
        rowSeparatorCombo.deselectAll();
      }
 else {
        String originalValue=rowSeparatorCombo.getText();
        String newValue=rowSeparator.getDisplayName();
        if (!newValue.equals(originalValue)) {
          rowSeparatorCombo.setText(newValue);
        }
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setFieldSeparator(fieldSeparatorText.getText());
      checkFieldsValue();
      EHDFSFieldSeparator fieldSeparator=EHDFSFieldSeparator.indexOf(fieldSeparatorText.getText(),false);
      if (fieldSeparator == null) {
        fieldSeparatorCombo.deselectAll();
      }
 else {
        String originalValue=fieldSeparatorCombo.getText();
        String newValue=fieldSeparator.getDisplayName();
        if (!newValue.equals(originalValue)) {
          fieldSeparatorCombo.setText(newValue);
        }
      }
    }
  }
);
}",0.9254237288135592
125069,"@Override public void modifyText(final ModifyEvent e){
  getConnection().setFieldSeparator(fieldSeparatorText.getText());
  checkFieldsValue();
  EHDFSFieldSeparator fieldSeparator=EHDFSFieldSeparator.indexOf(fieldSeparatorText.getText(),false);
  if (fieldSeparator == null) {
    fieldSeparatorCombo.deselectAll();
  }
 else {
    fieldSeparatorCombo.setText(fieldSeparator.getDisplayName());
  }
}","@Override public void modifyText(final ModifyEvent e){
  getConnection().setFieldSeparator(fieldSeparatorText.getText());
  checkFieldsValue();
  EHDFSFieldSeparator fieldSeparator=EHDFSFieldSeparator.indexOf(fieldSeparatorText.getText(),false);
  if (fieldSeparator == null) {
    fieldSeparatorCombo.deselectAll();
  }
 else {
    String originalValue=fieldSeparatorCombo.getText();
    String newValue=fieldSeparator.getDisplayName();
    if (!newValue.equals(originalValue)) {
      fieldSeparatorCombo.setText(newValue);
    }
  }
}",0.8303094983991463
125070,"@Override public IComponentName getCorrespondingComponentName(Item item,ERepositoryObjectType type){
  RepositoryComponentSetting setting=new RepositoryComponentSetting();
  setting.setName(HCATALOG);
  setting.setRepositoryType(HCATALOG);
  setting.setWithSchema(true);
  setting.setInputComponent(INPUT);
  setting.setOutputComponent(OUTPUT);
  List<Class<Item>> list=new ArrayList<Class<Item>>();
  Class clazz=null;
  try {
    clazz=Class.forName(HCatalogConnectionItem.class.getName());
  }
 catch (  ClassNotFoundException e) {
    ExceptionHandler.process(e);
  }
  list.add(clazz);
  setting.setClasses(list.toArray(new Class[0]));
  return setting;
}","@Override public IComponentName getCorrespondingComponentName(Item item,ERepositoryObjectType type){
  RepositoryComponentSetting setting=null;
  if (item instanceof HCatalogConnectionItem) {
    setting=new RepositoryComponentSetting();
    setting.setName(HCATALOG);
    setting.setRepositoryType(HCATALOG);
    setting.setWithSchema(true);
    setting.setInputComponent(INPUT);
    setting.setOutputComponent(OUTPUT);
    List<Class<Item>> list=new ArrayList<Class<Item>>();
    Class clazz=null;
    try {
      clazz=Class.forName(HCatalogConnectionItem.class.getName());
    }
 catch (    ClassNotFoundException e) {
      ExceptionHandler.process(e);
    }
    list.add(clazz);
    setting.setClasses(list.toArray(new Class[0]));
  }
  return setting;
}",0.9070422535211268
125071,"private boolean checkHDFSConnection(final HDFSConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      try {
        HadoopServerManager.getInstance().getDFS(connection,true);
      }
 catch (      Exception e) {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"",connection.getNameNodeURI());
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}","private boolean checkHDFSConnection(final HDFSConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      try {
        HDFSConnectionBean connectionBean=HDFSModelUtil.convert2HDFSConnectionBean(connection);
        HadoopOperationManager.getInstance().connectDFS(connectionBean);
      }
 catch (      Exception e) {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"",connection.getNameNodeURI());
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}",0.9254163649529328
125072,"protected ConnectionStatus checkConnection(boolean displayDialog){
  ConnectionStatus connectionStatus=HadoopServerUtil.testConnection(HDFSModelUtil.convert2HDFSConnectionBean(getConnection()));
  hdfsSettingIsValide=connectionStatus.getResult();
  String connectException=connectionStatus.getMessageException();
  if (hdfsSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    if (displayDialog) {
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",connectionItem.getProperty().getDisplayName()));
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    if (displayDialog) {
      new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,mainMsg,connectException);
    }
  }
  return connectionStatus;
}","protected ConnectionStatus checkConnection(boolean displayDialog){
  HDFSConnectionBean connectionBean=getConnectionBean();
  ConnectionStatus connectionStatus=HadoopOperationManager.getInstance().testConnection(connectionBean);
  hdfsSettingIsValide=connectionStatus.getResult();
  String connectException=connectionStatus.getMessageException();
  if (hdfsSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    if (displayDialog) {
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",connectionItem.getProperty().getDisplayName()));
    }
  }
 else {
    String mainMsg=Messages.getString(""String_Node_Str"");
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
    if (displayDialog) {
      new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,mainMsg,connectException);
    }
  }
  return connectionStatus;
}",0.8703108252947481
125073,"private void addSchemaFields(){
  schemaTreeViewer=new ContainerCheckedTreeViewer(scrolledCompositeFileViewer,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  schemaTreeViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  schemaTreeViewer.setUseHashlookup(true);
  schemaTreeViewer.addFilter(new FileSelectorViewerFilter());
  schemaTree=schemaTreeViewer.getTree();
  schemaTree.setHeaderVisible(true);
  schemaTree.setLinesVisible(true);
  schemaTree.addListener(SWT.Expand,new Listener(){
    public void handleEvent(    Event event){
      TreeItem treeItem=(TreeItem)event.item;
      for (      TreeItem item : treeItem.getItems()) {
        if (item.getData() != null) {
          IHDFSNode node=(IHDFSNode)item.getData();
          if (node.getType() == EHadoopFileTypes.FILE) {
            if (isExistTable(node)) {
              item.setChecked(true);
            }
 else {
              item.setChecked(false);
            }
          }
 else {
            item.setGrayed(item.getChecked());
          }
        }
      }
    }
  }
);
  int columnWidth1=250;
  int columnWidth2=100;
  int columnWidth3=110;
  int columnWidth4=130;
  int columnWidth5=140;
  TreeColumn fileName=new TreeColumn(schemaTree,SWT.LEFT);
  fileName.setText(Messages.getString(""String_Node_Str""));
  fileName.setWidth(columnWidth1);
  TreeColumn fileType=new TreeColumn(schemaTree,SWT.LEFT);
  fileType.setText(Messages.getString(""String_Node_Str""));
  fileType.setWidth(columnWidth2);
  TreeColumn fileSize=new TreeColumn(schemaTree,SWT.LEFT);
  fileSize.setText(Messages.getString(""String_Node_Str""));
  fileSize.setWidth(columnWidth3);
  TreeColumn nbColumns=new TreeColumn(schemaTree,SWT.LEFT);
  nbColumns.setText(Messages.getString(""String_Node_Str""));
  nbColumns.setWidth(columnWidth4);
  TreeColumn creationStatus=new TreeColumn(schemaTree,SWT.LEFT);
  creationStatus.setText(Messages.getString(""String_Node_Str""));
  creationStatus.setWidth(columnWidth5);
  AbstractMetadataExtractorViewProvider viewProvider=new FileSelectorTreeViewerProvider();
  schemaTreeViewer.setLabelProvider(viewProvider);
  schemaTreeViewer.setContentProvider(viewProvider);
  schemaTreeViewer.setInput(HDFSModelUtil.convert2HDFSConnectionBean(getConnection()));
  scrolledCompositeFileViewer.setContent(schemaTree);
  scrolledCompositeFileViewer.setMinSize(schemaTree.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}","private void addSchemaFields(){
  schemaTreeViewer=new ContainerCheckedTreeViewer(scrolledCompositeFileViewer,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI);
  schemaTreeViewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
  schemaTreeViewer.setUseHashlookup(true);
  schemaTreeViewer.addFilter(new FileSelectorViewerFilter());
  schemaTree=schemaTreeViewer.getTree();
  schemaTree.setHeaderVisible(true);
  schemaTree.setLinesVisible(true);
  schemaTree.addListener(SWT.Expand,new Listener(){
    public void handleEvent(    Event event){
      TreeItem treeItem=(TreeItem)event.item;
      for (      TreeItem item : treeItem.getItems()) {
        if (item.getData() != null) {
          IHDFSNode node=(IHDFSNode)item.getData();
          if (node.getType() == EHadoopFileTypes.FILE) {
            if (isExistTable(node)) {
              item.setChecked(true);
            }
 else {
              item.setChecked(false);
            }
          }
 else {
            item.setGrayed(item.getChecked());
          }
        }
      }
    }
  }
);
  int columnWidth1=250;
  int columnWidth2=100;
  int columnWidth3=110;
  int columnWidth4=130;
  int columnWidth5=140;
  TreeColumn fileName=new TreeColumn(schemaTree,SWT.LEFT);
  fileName.setText(Messages.getString(""String_Node_Str""));
  fileName.setWidth(columnWidth1);
  TreeColumn fileType=new TreeColumn(schemaTree,SWT.LEFT);
  fileType.setText(Messages.getString(""String_Node_Str""));
  fileType.setWidth(columnWidth2);
  TreeColumn fileSize=new TreeColumn(schemaTree,SWT.LEFT);
  fileSize.setText(Messages.getString(""String_Node_Str""));
  fileSize.setWidth(columnWidth3);
  TreeColumn nbColumns=new TreeColumn(schemaTree,SWT.LEFT);
  nbColumns.setText(Messages.getString(""String_Node_Str""));
  nbColumns.setWidth(columnWidth4);
  TreeColumn creationStatus=new TreeColumn(schemaTree,SWT.LEFT);
  creationStatus.setText(Messages.getString(""String_Node_Str""));
  creationStatus.setWidth(columnWidth5);
  AbstractMetadataExtractorViewProvider viewProvider=new FileSelectorTreeViewerProvider();
  schemaTreeViewer.setLabelProvider(viewProvider);
  schemaTreeViewer.setContentProvider(viewProvider);
  schemaTreeViewer.setInput(getConnectionBean());
  scrolledCompositeFileViewer.setContent(schemaTree);
  scrolledCompositeFileViewer.setMinSize(schemaTree.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}",0.9908561928512052
125074,"private void pressRetreiveSchemaButton(){
  ConnectionStatus connectionStatus=checkConnection(false);
  if (!connectionStatus.getResult()) {
    tableSettingsInfoLabel.setText(connectionStatus.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      List<MetadataColumn> metadataColumns;
      try {
        HadoopServerManager.getInstance().getDFS(getConnection(),true);
        metadataColumns=ExtractMetaDataFromHDFS.extractColumns(getConnection(),metadataTable);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return;
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}","private void pressRetreiveSchemaButton(){
  ConnectionStatus connectionStatus=checkConnection(false);
  if (!connectionStatus.getResult()) {
    tableSettingsInfoLabel.setText(connectionStatus.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      List<MetadataColumn> metadataColumns;
      try {
        HadoopOperationManager.getInstance().connectDFS(getConnectionBean());
        metadataColumns=ExtractMetaDataFromHDFS.extractColumns(getConnection(),metadataTable);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return;
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}",0.9899721448467966
125075,"@Override public IComponentName getCorrespondingComponentName(Item item,ERepositoryObjectType type){
  RepositoryComponentSetting setting=new RepositoryComponentSetting();
  setting.setName(HDFS);
  setting.setRepositoryType(HDFS);
  setting.setWithSchema(true);
  setting.setInputComponent(INPUT);
  setting.setOutputComponent(OUTPUT);
  List<Class<Item>> list=new ArrayList<Class<Item>>();
  Class clazz=null;
  try {
    clazz=Class.forName(HDFSConnectionItem.class.getName());
  }
 catch (  ClassNotFoundException e) {
    ExceptionHandler.process(e);
  }
  list.add(clazz);
  setting.setClasses(list.toArray(new Class[0]));
  return setting;
}","@Override public IComponentName getCorrespondingComponentName(Item item,ERepositoryObjectType type){
  RepositoryComponentSetting setting=null;
  if (item instanceof HDFSConnectionItem) {
    setting=new RepositoryComponentSetting();
    setting.setName(HDFS);
    setting.setRepositoryType(HDFS);
    setting.setWithSchema(true);
    setting.setInputComponent(INPUT);
    setting.setOutputComponent(OUTPUT);
    List<Class<Item>> list=new ArrayList<Class<Item>>();
    Class clazz=null;
    try {
      clazz=Class.forName(HDFSConnectionItem.class.getName());
    }
 catch (    ClassNotFoundException e) {
      ExceptionHandler.process(e);
    }
    list.add(clazz);
    setting.setClasses(list.toArray(new Class[0]));
  }
  return setting;
}",0.8074712643678161
125076,"@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType == null) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (HCRepositoryUtil.isHadoopClusterNode(node) || (node instanceof HadoopFolderRepositoryNode && getNodeType().equals(nodeType))) {
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node) || (node.getObject() != null && factory.getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      setEnabled(false);
      return;
    }
    this.setText(getCreateLabel());
    collectChildNames(node);
    creation=true;
    setEnabled(true);
    return;
  }
  if (!nodeType.equals(getNodeType())) {
    return;
  }
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  break;
case SYSTEM_FOLDER:
if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
  setEnabled(false);
  return;
}
this.setText(getCreateLabel());
collectChildNames(node);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(getEditLabel());
collectSiblingNames(node);
}
 else {
this.setText(getOpenLabel());
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}","@Override protected void init(RepositoryNode node){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType == null) {
    return;
  }
  if (hideAction(node)) {
    return;
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (HCRepositoryUtil.isHadoopClusterNode(node) || (node instanceof HadoopFolderRepositoryNode && getNodeType().equals(nodeType))) {
    if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node) || (node.getObject() != null && factory.getStatus(node.getObject()) == ERepositoryStatus.DELETED)) {
      setEnabled(false);
      return;
    }
    this.setText(getCreateLabel());
    collectChildNames(node);
    creation=true;
    setEnabled(true);
    return;
  }
  if (!nodeType.equals(getNodeType())) {
    return;
  }
switch (node.getType()) {
case SIMPLE_FOLDER:
    if (node.getObject() != null && node.getObject().getProperty().getItem().getState().isDeleted()) {
      setEnabled(false);
      return;
    }
  break;
case SYSTEM_FOLDER:
if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
  setEnabled(false);
  return;
}
this.setText(getCreateLabel());
collectChildNames(node);
creation=true;
break;
case REPOSITORY_ELEMENT:
if (factory.isPotentiallyEditable(node.getObject())) {
this.setText(getEditLabel());
collectSiblingNames(node);
}
 else {
this.setText(getOpenLabel());
}
collectSiblingNames(node);
creation=false;
break;
default :
return;
}
setEnabled(true);
}",0.9866412213740458
125077,"private boolean checkHCatalogConnection(final HCatalogConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      try {
        final ConnectionStatus connectionStatus=HCatalogServiceUtil.testConnection(connection);
        if (!connectionStatus.getResult()) {
          PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,Messages.getString(""String_Node_Str""),connectionStatus.getMessageException());
              result[0]=false;
              return;
            }
          }
);
        }
      }
 catch (      Exception e) {
      }
 finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(Display.getDefault().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}","private boolean checkHCatalogConnection(final HCatalogConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      try {
        final ConnectionStatus connectionStatus=HCatalogServiceUtil.testConnection(connection);
        if (!connectionStatus.getResult()) {
          PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
            @Override public void run(){
              new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,Messages.getString(""String_Node_Str""),connectionStatus.getMessageException());
              result[0]=false;
              return;
            }
          }
);
        }
      }
 catch (      Exception e) {
      }
 finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(Display.getDefault().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}",0.9962121212121212
125078,"public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}","@Override public void init(final IWorkbench workbench,final IStructuredSelection selection){
  this.selection=selection;
}",0.9572649572649572
125079,"public void addPages(){
  setWindowTitle(""String_Node_Str"");
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_TABLE_WIZ));
  schemaWizardPage=new HCatalogSchemaWizardPage(selectedMetadataTable,connectionItem,isRepositoryObjectEditable(),temConnection);
  if (creation) {
    tableSelectorWizardPage=new HCatalogTableSelectorWizardPage(connectionItem,isRepositoryObjectEditable(),temConnection);
    tableSelectorWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableSelectorWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    tableSelectorWizardPage.setPageComplete(true);
    addPage(tableSelectorWizardPage);
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
 else {
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
}","@Override public void addPages(){
  setWindowTitle(""String_Node_Str"");
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_TABLE_WIZ));
  schemaWizardPage=new HCatalogSchemaWizardPage(selectedMetadataTable,connectionItem,isRepositoryObjectEditable(),temConnection);
  if (creation) {
    tableSelectorWizardPage=new HCatalogTableSelectorWizardPage(connectionItem,isRepositoryObjectEditable(),temConnection);
    tableSelectorWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    tableSelectorWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    tableSelectorWizardPage.setPageComplete(true);
    addPage(tableSelectorWizardPage);
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
 else {
    schemaWizardPage.setTitle(Messages.getString(""String_Node_Str"",connectionItem.getProperty().getLabel()));
    schemaWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    schemaWizardPage.setPageComplete(false);
    addPage(schemaWizardPage);
  }
}",0.996031746031746
125080,"public void run(IProgressMonitor monitor) throws CoreException {
  connectionItem.setConnection(temConnection);
  saveMetaData();
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  connectionItem.setConnection(temConnection);
  saveMetaData();
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  temConnection=null;
}",0.981549815498155
125081,"private void cloneBaseHCatalogConnection(HCatalogConnection connection){
  temConnection=(HCatalogConnection)EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,temConnection);
}","private void cloneBaseHCatalogConnection(HCatalogConnection connection){
  temConnection=EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,temConnection);
}",0.9684542586750788
125082,"public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      public void run(      IProgressMonitor monitor) throws CoreException {
        connectionItem.setConnection(temConnection);
        saveMetaData();
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean performFinish(){
  if (schemaWizardPage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        connectionItem.setConnection(temConnection);
        saveMetaData();
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}",0.985734664764622
125083,"public Object[] getChildren(Object parentElement){
  List<IHCatalogNode> nodes=new ArrayList<IHCatalogNode>();
  if (parentElement instanceof HCatalogConnection) {
    try {
      List<TdTable> tables=ExtractMetaDataFromHCatalog.extractTables((HCatalogConnection)parentElement);
      for (      TdTable table : tables) {
        IHCatalogNode node=new HCatalogNode();
        node.setValue(table.getLabel());
        node.setTable(table);
        nodes.add(node);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return nodes.toArray();
}","@Override public Object[] getChildren(Object parentElement){
  List<IHCatalogNode> nodes=new ArrayList<IHCatalogNode>();
  if (parentElement instanceof HCatalogConnection) {
    try {
      List<TdTable> tables=ExtractMetaDataFromHCatalog.extractTables((HCatalogConnection)parentElement);
      for (      TdTable table : tables) {
        IHCatalogNode node=new HCatalogNode();
        node.setValue(table.getLabel());
        node.setTable(table);
        nodes.add(node);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return nodes.toArray();
}",0.9914236706689536
125084,"public Object getParent(Object element){
  return null;
}","@Override public Object getParent(Object element){
  return null;
}",0.9193548387096774
125085,"public Image getColumnImage(Object element,int columnIndex){
  if (columnIndex == 0 && element instanceof IHCatalogNode) {
    return ((IHCatalogNode)element).getImage();
  }
  return null;
}","@Override public Image getColumnImage(Object element,int columnIndex){
  if (columnIndex == 0 && element instanceof IHCatalogNode) {
    return ((IHCatalogNode)element).getImage();
  }
  return null;
}",0.9744897959183674
125086,"public boolean hasChildren(Object element){
  if (element instanceof HCatalogConnection) {
    return true;
  }
  return false;
}","@Override public boolean hasChildren(Object element){
  if (element instanceof HCatalogConnection) {
    return true;
  }
  return false;
}",0.9626865671641792
125087,"public Object[] getElements(Object inputElement){
  return getChildren(inputElement);
}","@Override public Object[] getElements(Object inputElement){
  return getChildren(inputElement);
}",0.9456521739130436
125088,"public String getColumnText(Object element,int columnIndex){
  IHCatalogNode content=(IHCatalogNode)element;
switch (columnIndex) {
case 0:
    return StringUtils.trimToEmpty(content.getValue());
default :
  return ""String_Node_Str"";
}
}","@Override public String getColumnText(Object element,int columnIndex){
  IHCatalogNode content=(IHCatalogNode)element;
switch (columnIndex) {
case 0:
    return StringUtils.trimToEmpty(content.getValue());
default :
  return ""String_Node_Str"";
}
}",0.9793388429752066
125089,"private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",existTable.getLabel(),pack.getName()));
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        if (existItem != null) {
          clearTreeItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(4,Messages.getString(""String_Node_Str""));
        countPending++;
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem && parentItem != null) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}","private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"",existTable.getLabel(),pack.getName()));
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        if (existItem != null) {
          clearTreeItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(4,Messages.getString(""String_Node_Str""));
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem && parentItem != null) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}",0.9908045977011494
125090,"@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TreeItem treeItem=(TreeItem)e.item;
    IHDFSNode node=(IHDFSNode)treeItem.getData();
    boolean promptNeeded=treeItem.getChecked();
    EHadoopFileTypes type=node.getType();
    if (type != EHadoopFileTypes.FILE) {
      treeItem.setGrayed(true);
    }
    if (type == EHadoopFileTypes.FILE) {
      if (promptNeeded) {
        MetadataTable existTable=HDFSSchemaUtil.getTableByName(getConnection(),treeItem.getText(0));
        if (existTable != null) {
          refreshExistItem(existTable,treeItem);
        }
 else {
          treeItem.setText(3,EMPTY_STRING);
          treeItem.setText(4,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(treeItem,-1);
        }
      }
 else {
        clearTreeItem(treeItem);
        if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
          countPending--;
        }
      }
    }
 else     if (type == EHadoopFileTypes.FOLDER) {
      fetchAllChildren(node);
      for (      TreeItem tItem : treeItem.getItems()) {
        updateItem(tItem,promptNeeded,true);
      }
    }
  }
}","@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TreeItem treeItem=(TreeItem)e.item;
    IHDFSNode node=(IHDFSNode)treeItem.getData();
    boolean promptNeeded=treeItem.getChecked();
    EHadoopFileTypes type=node.getType();
    if (type != EHadoopFileTypes.FILE) {
      treeItem.setGrayed(true);
    }
    if (type == EHadoopFileTypes.FILE) {
      if (promptNeeded) {
        MetadataTable existTable=HDFSSchemaUtil.getTableByName(getConnection(),treeItem.getText(0));
        if (existTable != null) {
          refreshExistItem(existTable,treeItem);
        }
 else {
          treeItem.setText(3,EMPTY_STRING);
          treeItem.setText(4,Messages.getString(""String_Node_Str""));
          parentWizardPage.setPageComplete(false);
          refreshTable(treeItem,-1);
        }
      }
 else {
        clearTreeItem(treeItem);
        if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
        }
      }
    }
 else     if (type == EHadoopFileTypes.FOLDER) {
      fetchAllChildren(node);
      for (      TreeItem tItem : treeItem.getItems()) {
        updateItem(tItem,promptNeeded,true);
      }
    }
  }
}",0.9790491539081386
125091,"private void updateItem(final TreeItem item,boolean checked,boolean isEvent){
  IHDFSNode node=(IHDFSNode)item.getData();
  if (node.getType() == EHadoopFileTypes.FOLDER) {
    for (    TreeItem treeItem : item.getItems()) {
      updateItem(treeItem,checked,true);
    }
  }
 else   if (node.getType() == EHadoopFileTypes.FILE) {
    String pattern=getNameFilter();
    SearchPattern matcher=new SearchPattern();
    matcher.setPattern(pattern);
    if (!matcher.matches(node.getValue())) {
      return;
    }
    if (isEvent) {
      Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
      for (      MetadataTable table : tables) {
        if (table.getLabel().equals(node.getTable().getName())) {
          item.setChecked(true);
        }
      }
      item.setChecked(!checked);
    }
    if (checked) {
      if (!item.getChecked()) {
        MetadataTable existTable=HDFSSchemaUtil.getTableByName(getConnection(),item.getText(0));
        if (existTable != null) {
          refreshExistItem(existTable,item);
        }
 else {
          item.setText(4,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(item,-1);
        }
      }
 else {
        updateStatus(IStatus.OK,null);
      }
      item.setChecked(true);
    }
 else {
      if (item.getChecked()) {
        clearTreeItem(item);
        item.setChecked(false);
      }
    }
  }
}","private void updateItem(final TreeItem item,boolean checked,boolean isEvent){
  IHDFSNode node=(IHDFSNode)item.getData();
  if (node.getType() == EHadoopFileTypes.FOLDER) {
    for (    TreeItem treeItem : item.getItems()) {
      updateItem(treeItem,checked,true);
    }
  }
 else   if (node.getType() == EHadoopFileTypes.FILE) {
    String pattern=getNameFilter();
    SearchPattern matcher=new SearchPattern();
    matcher.setPattern(pattern);
    if (!matcher.matches(node.getValue())) {
      return;
    }
    if (isEvent) {
      Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
      for (      MetadataTable table : tables) {
        if (table.getLabel().equals(node.getTable().getName())) {
          item.setChecked(true);
        }
      }
      item.setChecked(!checked);
    }
    if (checked) {
      if (!item.getChecked()) {
        MetadataTable existTable=HDFSSchemaUtil.getTableByName(getConnection(),item.getText(0));
        if (existTable != null) {
          refreshExistItem(existTable,item);
        }
 else {
          item.setText(4,Messages.getString(""String_Node_Str""));
          parentWizardPage.setPageComplete(false);
          refreshTable(item,-1);
        }
      }
 else {
        updateStatus(IStatus.OK,null);
      }
      item.setChecked(true);
    }
 else {
      if (item.getChecked()) {
        clearTreeItem(item);
        item.setChecked(false);
      }
    }
  }
}",0.9910158949550796
125092,"@Override protected void addUtilsButtonListeners(){
  checkConnectionBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      checkConnection();
    }
  }
);
  selectAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
          @Override public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                monitor.beginTask(Messages.getString(""String_Node_Str""),10);
                updateStatus(IStatus.ERROR,null);
                for (                TreeItem tItem : schemaTree.getItems()) {
                  fetchAllChildren((IHDFSNode)tItem.getData());
                }
                for (                TreeItem tItem : schemaTree.getItems()) {
                  updateItem(tItem,true,false);
                }
                monitor.done();
              }
            }
);
          }
        }
);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  selectNoneBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      count=0;
      countSuccess=0;
      countPending=0;
      for (      TreeItem tItem : schemaTree.getItems()) {
        fetchAllChildren((IHDFSNode)tItem.getData());
      }
      for (      TreeItem tItem : schemaTree.getItems()) {
        updateItem(tItem,false,false);
      }
    }
  }
);
}","@Override protected void addUtilsButtonListeners(){
  checkConnectionBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      checkConnection();
    }
  }
);
  selectAllBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      try {
        parentWizardPage.getWizard().getContainer().run(true,true,new IRunnableWithProgress(){
          @Override public void run(          final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                monitor.beginTask(Messages.getString(""String_Node_Str""),10);
                updateStatus(IStatus.ERROR,null);
                for (                TreeItem tItem : schemaTree.getItems()) {
                  fetchAllChildren((IHDFSNode)tItem.getData());
                }
                for (                TreeItem tItem : schemaTree.getItems()) {
                  updateItem(tItem,true,false);
                }
                monitor.done();
              }
            }
);
          }
        }
);
      }
 catch (      InvocationTargetException e1) {
        ExceptionHandler.process(e1);
      }
catch (      InterruptedException e1) {
        ExceptionHandler.process(e1);
      }
    }
  }
);
  selectNoneBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      for (      TreeItem tItem : schemaTree.getItems()) {
        fetchAllChildren((IHDFSNode)tItem.getData());
      }
      for (      TreeItem tItem : schemaTree.getItems()) {
        updateItem(tItem,false,false);
      }
    }
  }
);
}",0.9839717468079326
125093,"@Override protected void addFieldsListeners(){
  nameFilter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      schemaTreeViewer.refresh();
    }
  }
);
  schemaTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TreeItem treeItem=(TreeItem)e.item;
        IHDFSNode node=(IHDFSNode)treeItem.getData();
        boolean promptNeeded=treeItem.getChecked();
        EHadoopFileTypes type=node.getType();
        if (type != EHadoopFileTypes.FILE) {
          treeItem.setGrayed(true);
        }
        if (type == EHadoopFileTypes.FILE) {
          if (promptNeeded) {
            MetadataTable existTable=HDFSSchemaUtil.getTableByName(getConnection(),treeItem.getText(0));
            if (existTable != null) {
              refreshExistItem(existTable,treeItem);
            }
 else {
              treeItem.setText(3,EMPTY_STRING);
              treeItem.setText(4,Messages.getString(""String_Node_Str""));
              countPending++;
              parentWizardPage.setPageComplete(false);
              refreshTable(treeItem,-1);
            }
          }
 else {
            clearTreeItem(treeItem);
            if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
              countPending--;
            }
          }
        }
 else         if (type == EHadoopFileTypes.FOLDER) {
          fetchAllChildren(node);
          for (          TreeItem tItem : treeItem.getItems()) {
            updateItem(tItem,promptNeeded,true);
          }
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  nameFilter.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      schemaTreeViewer.refresh();
    }
  }
);
  schemaTree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TreeItem treeItem=(TreeItem)e.item;
        IHDFSNode node=(IHDFSNode)treeItem.getData();
        boolean promptNeeded=treeItem.getChecked();
        EHadoopFileTypes type=node.getType();
        if (type != EHadoopFileTypes.FILE) {
          treeItem.setGrayed(true);
        }
        if (type == EHadoopFileTypes.FILE) {
          if (promptNeeded) {
            MetadataTable existTable=HDFSSchemaUtil.getTableByName(getConnection(),treeItem.getText(0));
            if (existTable != null) {
              refreshExistItem(existTable,treeItem);
            }
 else {
              treeItem.setText(3,EMPTY_STRING);
              treeItem.setText(4,Messages.getString(""String_Node_Str""));
              parentWizardPage.setPageComplete(false);
              refreshTable(treeItem,-1);
            }
          }
 else {
            clearTreeItem(treeItem);
            if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            }
          }
        }
 else         if (type == EHadoopFileTypes.FOLDER) {
          fetchAllChildren(node);
          for (          TreeItem tItem : treeItem.getItems()) {
            updateItem(tItem,promptNeeded,true);
          }
        }
      }
    }
  }
);
}",0.9819277108433736
125094,"public void updateUIInThreadIfThread(){
  if (treeItem.isDisposed()) {
    return;
  }
  if (checkConnectionIsDone) {
    treeItem.setText(3,EMPTY_STRING + metadataColumns.size());
    treeItem.setText(4,Messages.getString(""String_Node_Str""));
    countSuccess++;
    tableColumnNums.put(treeItem.getText(0),metadataColumns.size());
  }
 else {
    String msg=Messages.getString(""String_Node_Str"");
    updateStatus(IStatus.WARNING,msg);
    new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,msg,msg);
  }
  count++;
  updateStatus(IStatus.OK,null);
  parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
}","public void updateUIInThreadIfThread(){
  if (treeItem.isDisposed()) {
    return;
  }
  if (checkConnectionIsDone) {
    treeItem.setText(3,EMPTY_STRING + metadataColumns.size());
    treeItem.setText(4,Messages.getString(""String_Node_Str""));
    tableColumnNums.put(treeItem.getText(0),metadataColumns.size());
  }
 else {
    String msg=Messages.getString(""String_Node_Str"");
    updateStatus(IStatus.WARNING,msg);
    new ErrorDialogWidthDetailArea(getShell(),Activator.PLUGIN_ID,msg,msg);
  }
  updateStatus(IStatus.OK,null);
  parentWizardPage.setPageComplete(!threadExecutor.hasThreadRunning());
}",0.8919330289193302
125095,"public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    HDFSFileSelectorWizardPage.this.setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    HDFSFileSelectorWizardPage.this.setPageComplete(isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}","@Override public void checkPerformed(final AbstractForm source){
  if (source.isStatusOnError()) {
    HDFSFileSelectorWizardPage.this.setPageComplete(false);
    setErrorMessage(source.getStatus());
  }
 else {
    HDFSFileSelectorWizardPage.this.setPageComplete(isRepositoryObjectEditable);
    setErrorMessage(null);
    setMessage(source.getStatus(),source.getStatusLevel());
  }
}",0.986842105263158
125096,"public void createControl(final Composite parent){
  hdfsFileSelectorForm=new HDFSFileSelectorForm(parent,connectionItem,temConnection,this);
  hdfsFileSelectorForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        HDFSFileSelectorWizardPage.this.setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        HDFSFileSelectorWizardPage.this.setPageComplete(isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  hdfsFileSelectorForm.setListener(listener);
  setControl(hdfsFileSelectorForm);
  if (StringUtils.isNotEmpty(connectionItem.getProperty().getLabel())) {
    hdfsFileSelectorForm.checkFieldsValue();
  }
}","@Override public void createControl(final Composite parent){
  hdfsFileSelectorForm=new HDFSFileSelectorForm(parent,connectionItem,temConnection,this);
  hdfsFileSelectorForm.setReadOnly(!isRepositoryObjectEditable);
  AbstractForm.ICheckListener listener=new AbstractForm.ICheckListener(){
    @Override public void checkPerformed(    final AbstractForm source){
      if (source.isStatusOnError()) {
        HDFSFileSelectorWizardPage.this.setPageComplete(false);
        setErrorMessage(source.getStatus());
      }
 else {
        HDFSFileSelectorWizardPage.this.setPageComplete(isRepositoryObjectEditable);
        setErrorMessage(null);
        setMessage(source.getStatus(),source.getStatusLevel());
      }
    }
  }
;
  hdfsFileSelectorForm.setListener(listener);
  setControl(hdfsFileSelectorForm);
  if (StringUtils.isNotEmpty(connectionItem.getProperty().getLabel())) {
    hdfsFileSelectorForm.checkFieldsValue();
  }
}",0.9891540130151844
125097,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  HCatalogConnection connection=null;
  MetadataTable metadataTable=null;
  boolean creation=false;
  if (repositoryNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    ERepositoryObjectType nodeType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    String metadataTableLabel=(String)repositoryNode.getProperties(EProperties.LABEL);
    HCatalogConnectionItem item=null;
    if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
      item=(HCatalogConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HCatalogConnection)item.getConnection();
      metadataTable=TableHelper.findByLabel(connection,metadataTableLabel);
      creation=false;
    }
 else     if (nodeType == HCatalogRepositoryNodeType.HCATALOG) {
      item=(HCatalogConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HCatalogConnection)item.getConnection();
      creation=true;
    }
 else {
      return;
    }
    if (!creation) {
      openHCatalogSchemaWizard(item,metadataTable,false,creation);
    }
 else     if (checkHCatalogConnection((HCatalogConnection)item.getConnection())) {
      openHCatalogSchemaWizard(item,metadataTable,false,creation);
    }
  }
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  HCatalogConnection connection=null;
  MetadataTable metadataTable=null;
  boolean creation=false;
  if (repositoryNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    ERepositoryObjectType nodeType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    String metadataTableLabel=(String)repositoryNode.getProperties(EProperties.LABEL);
    HCatalogConnectionItem item=null;
    if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
      item=(HCatalogConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HCatalogConnection)item.getConnection();
      metadataTable=TableHelper.findByLabel(connection,metadataTableLabel);
      creation=false;
    }
 else     if (nodeType == HCatalogRepositoryNodeType.HCATALOG) {
      item=(HCatalogConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HCatalogConnection)item.getConnection();
      creation=true;
    }
 else {
      return;
    }
    boolean isOK=true;
    if (creation) {
      isOK=checkHCatalogConnection((HCatalogConnection)item.getConnection());
    }
    if (isOK) {
      openHCatalogSchemaWizard(item,metadataTable,false,creation);
    }
  }
}",0.8895522388059701
125098,"@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  HDFSConnection connection=null;
  MetadataTable metadataTable=null;
  boolean creation=false;
  if (repositoryNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    ERepositoryObjectType nodeType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    String metadataTableLabel=(String)repositoryNode.getProperties(EProperties.LABEL);
    HDFSConnectionItem item=null;
    if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
      item=(HDFSConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HDFSConnection)item.getConnection();
      metadataTable=TableHelper.findByLabel(connection,metadataTableLabel);
      creation=false;
    }
 else     if (nodeType == HDFSRepositoryNodeType.HDFS) {
      item=(HDFSConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HDFSConnection)item.getConnection();
      creation=true;
    }
 else {
      return;
    }
    if (!creation) {
      openHDFSSchemaWizard(item,metadataTable,false,creation);
    }
 else     if (checkHDFSConnection((HDFSConnection)item.getConnection())) {
      openHDFSSchemaWizard(item,metadataTable,false,creation);
    }
  }
}","@Override protected void doRun(){
  if (repositoryNode == null) {
    repositoryNode=getCurrentRepositoryNode();
  }
  HDFSConnection connection=null;
  MetadataTable metadataTable=null;
  boolean creation=false;
  if (repositoryNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
    ERepositoryObjectType nodeType=(ERepositoryObjectType)repositoryNode.getProperties(EProperties.CONTENT_TYPE);
    String metadataTableLabel=(String)repositoryNode.getProperties(EProperties.LABEL);
    HDFSConnectionItem item=null;
    if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
      item=(HDFSConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HDFSConnection)item.getConnection();
      metadataTable=TableHelper.findByLabel(connection,metadataTableLabel);
      creation=false;
    }
 else     if (nodeType == HDFSRepositoryNodeType.HDFS) {
      item=(HDFSConnectionItem)repositoryNode.getObject().getProperty().getItem();
      connection=(HDFSConnection)item.getConnection();
      creation=true;
    }
 else {
      return;
    }
    boolean isOK=true;
    if (creation) {
      isOK=checkHDFSConnection((HDFSConnection)item.getConnection());
    }
    if (isOK) {
      openHDFSSchemaWizard(item,metadataTable,false,creation);
    }
  }
}",0.9513137557959814
125099,"private boolean checkHDFSConnection(final HDFSConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      try {
        HDFSConnectionBean connectionBean=HDFSModelUtil.convert2HDFSConnectionBean(connection);
        HadoopOperationManager.getInstance().connectDFS(connectionBean);
      }
 catch (      Exception e) {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"",connection.getNameNodeURI());
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
 finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}","private boolean checkHDFSConnection(final HDFSConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      Object dfs=null;
      try {
        HDFSConnectionBean connectionBean=HDFSModelUtil.convert2HDFSConnectionBean(connection);
        dfs=HadoopOperationManager.getInstance().getDFS(connectionBean);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
 finally {
        monitor.done();
      }
      if (dfs == null) {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"",connection.getNameNodeURI());
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}",0.9354075076090632
125100,"private void pressRetreiveSchemaButton(){
  ConnectionStatus connectionStatus=checkConnection(false);
  if (!connectionStatus.getResult()) {
    tableSettingsInfoLabel.setText(connectionStatus.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      List<MetadataColumn> metadataColumns;
      try {
        HadoopOperationManager.getInstance().connectDFS(getConnectionBean());
        metadataColumns=ExtractMetaDataFromHDFS.extractColumns(getConnection(),metadataTable);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return;
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}","private void pressRetreiveSchemaButton(){
  ConnectionStatus connectionStatus=checkConnection(false);
  if (!connectionStatus.getResult()) {
    tableSettingsInfoLabel.setText(connectionStatus.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      List<MetadataColumn> metadataColumns;
      try {
        HadoopOperationManager.getInstance().getDFS(getConnectionBean());
        metadataColumns=ExtractMetaDataFromHDFS.extractColumns(getConnection(),metadataTable);
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        return;
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}",0.9977728285077953
125101,"/** 
 * DOC ycbai Comment method ""createTmpFile"". Create a temporary file which contents are readed from the inputStream.
 * @param inputStream the inputStream to read
 * @param fileName the name of temporary file
 * @param maxLineNum the max quantity lines to read. If is ""-1"" means not limit the quantity.
 * @return
 */
private static File createTmpFile(InputStream inputStream,String fileName,int maxLineNum){
  int maxLines=maxLineNum;
  if (maxLines == -1) {
  }
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return null;
  }
  File tmpParentFile=new File(fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File tmpfile=new File(tmpParentFile,fileName);
  BufferedReader reader=null;
  Writer writer=null;
  try {
    if (!tmpParentFile.exists()) {
      tmpParentFile.mkdirs();
    }
    if (tmpfile.exists()) {
      tmpfile.delete();
    }
    reader=new BufferedReader(new InputStreamReader(inputStream));
    String strLine=reader.readLine();
    int totalLines=0;
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpfile)));
    while (strLine != null && (maxLineNum == -1 || totalLines < maxLineNum)) {
      totalLines++;
      strLine=reader.readLine();
      if (strLine != null) {
        writer.append(strLine);
        writer.append(""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    try {
      inputStream.close();
      reader.close();
      writer.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return tmpfile;
}","/** 
 * DOC ycbai Comment method ""createTmpFile"". Create a temporary file which contents are readed from the inputStream.
 * @param inputStream the inputStream to read
 * @param fileName the name of temporary file
 * @param maxLineNum the max quantity lines to read. If is ""-1"" means not limit the quantity.
 * @return
 */
private static File createTmpFile(InputStream inputStream,String fileName,int maxLineNum){
  Project project=ProjectManager.getInstance().getCurrentProject();
  IProject fsProject=null;
  try {
    fsProject=ResourceModelUtils.getProject(project);
  }
 catch (  PersistenceException e2) {
    ExceptionHandler.process(e2);
  }
  if (fsProject == null) {
    return null;
  }
  File tmpParentFile=new File(fsProject.getLocationURI().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File tmpfile=new File(tmpParentFile,fileName);
  BufferedReader reader=null;
  Writer writer=null;
  try {
    if (!tmpParentFile.exists()) {
      tmpParentFile.mkdirs();
    }
    if (tmpfile.exists()) {
      tmpfile.delete();
    }
    reader=new BufferedReader(new InputStreamReader(inputStream));
    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpfile)));
    int totalLines=0;
    String strLine=null;
    do {
      totalLines++;
      strLine=reader.readLine();
      if (strLine != null) {
        writer.append(strLine);
        writer.append(""String_Node_Str"");
      }
    }
 while (strLine != null && (maxLineNum == -1 || totalLines < maxLineNum));
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    try {
      inputStream.close();
      reader.close();
      writer.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return tmpfile;
}",0.8842221608179055
125102,"private boolean checkHDFSConnection(final HDFSConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      final Object[] dfs=new Object[1];
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          try {
            HDFSConnectionBean connectionBean=HDFSModelUtil.convert2HDFSConnectionBean(connection);
            dfs[0]=HadoopOperationManager.getInstance().getDFS(connectionBean);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
 finally {
            monitor.done();
          }
        }
      }
);
      if (dfs[0] == null) {
        PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"");
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}","private boolean checkHDFSConnection(final HDFSConnection connection){
  final boolean[] result=new boolean[]{true};
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      final Object[] dfs=new Object[1];
      Display display=PlatformUI.getWorkbench().getDisplay();
      display.syncExec(new Runnable(){
        @Override public void run(){
          try {
            HDFSConnectionBean connectionBean=HDFSModelUtil.convert2HDFSConnectionBean(connection);
            dfs[0]=HadoopOperationManager.getInstance().getDFS(connectionBean);
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
 finally {
            monitor.done();
          }
        }
      }
);
      if (dfs[0] == null) {
        display.syncExec(new Runnable(){
          @Override public void run(){
            String mainMsg=Messages.getString(""String_Node_Str"");
            String detailMsg=Messages.getString(""String_Node_Str"");
            new ErrorDialogWidthDetailArea(PlatformUI.getWorkbench().getDisplay().getActiveShell(),Activator.PLUGIN_ID,mainMsg,detailMsg);
            result[0]=false;
            return;
          }
        }
);
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    result[0]=false;
    ExceptionHandler.process(e);
  }
  return result[0];
}",0.971023063276168
125103,"public Map getConnectionMap(){
  return adminMap;
}","@Override public Map getConnectionMap(){
  return adminMap;
}",0.9107142857142856
125104,"public Object getParent(Object element){
  TableNode tableNode=(TableNode)element;
  return tableNode.getParent();
}","@Override public Object getParent(Object element){
  TableNode tableNode=(TableNode)element;
  return tableNode.getParent();
}",0.9586776859504132
125105,"public ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,String server,String port,String driverClassName,String driverJarPath,String dbVersionString,String additionalParam){
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  Configuration config=HBaseConfiguration.create();
  config.set(""String_Node_Str"",server);
  config.set(""String_Node_Str"",port);
  try {
    HBaseAdmin.checkHBaseAvailable(config);
    connectionStatus.setResult(true);
  }
 catch (  MasterNotRunningException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
catch (  ZooKeeperConnectionException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
 finally {
    return connectionStatus;
  }
}","@Override public ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,String server,String port,String driverClassName,String driverJarPath,String dbVersionString,String additionalParam){
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  Configuration config=HBaseConfiguration.create();
  config.set(""String_Node_Str"",server);
  config.set(""String_Node_Str"",port);
  try {
    HBaseAdmin.checkHBaseAvailable(config);
    connectionStatus.setResult(true);
  }
 catch (  MasterNotRunningException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
catch (  ZooKeeperConnectionException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(e.getMessage());
  }
  return connectionStatus;
}",0.954043048283886
125106,"public boolean hasChildren(Object element){
  TableNode tableNode=(TableNode)element;
  int type=tableNode.getType();
  if (type == TableNode.COLUMN_FAMILY || type == TableNode.TABLE) {
    return true;
  }
  return !tableNode.getChildren().isEmpty();
}","@Override public boolean hasChildren(Object element){
  TableNode tableNode=(TableNode)element;
  int type=tableNode.getType();
  if (type == TableNode.COLUMN_FAMILY || type == TableNode.TABLE) {
    return true;
  }
  return !tableNode.getChildren().isEmpty();
}",0.9806201550387597
125107,"public void updatePackage(IMetadataConnection metadataConnection){
}","@Override public void updatePackage(IMetadataConnection metadataConnection){
}",0.9315068493150684
125108,"public boolean isMetadataExsit(Object node,DatabaseConnection connection){
  TableNode columnNode=null;
  if (node == null) {
    return false;
  }
  if (node instanceof TableNode) {
    columnNode=(TableNode)node;
  }
  if (columnNode.getType() == TableNode.COLUMN) {
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    String columnName=columnNode.getValue();
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
      }
    }
    List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(connection);
    for (    MetadataTable table : tables) {
      if (table instanceof TdTable) {
        TdTable tdTable=(TdTable)table;
        if (tdTable.getLabel().equals(tableName)) {
          List<MetadataColumn> columns=tdTable.getColumns();
          for (          MetadataColumn column : columns) {
            if (column.getLabel().equals(columnName)) {
              List<TaggedValue> tagValues=column.getTaggedValue();
              for (              TaggedValue tv : tagValues) {
                String tag=tv.getTag();
                String value=tv.getValue();
                if (tag != null && tag.equals(COLUMN_FAMILY)) {
                  if (value != null && value.equals(columnFamilyName)) {
                    columns.remove(column);
                    return true;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean isMetadataExsit(Object node,DatabaseConnection connection){
  TableNode columnNode=null;
  if (node == null) {
    return false;
  }
  if (node instanceof TableNode) {
    columnNode=(TableNode)node;
  }
  if (columnNode.getType() == TableNode.COLUMN) {
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    String columnName=columnNode.getValue();
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
      }
    }
    List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(connection);
    for (    MetadataTable table : tables) {
      if (table instanceof TdTable) {
        TdTable tdTable=(TdTable)table;
        if (tdTable.getLabel().equals(tableName)) {
          List<MetadataColumn> columns=tdTable.getColumns();
          for (          MetadataColumn column : columns) {
            if (column.getLabel().equals(columnName)) {
              List<TaggedValue> tagValues=column.getTaggedValue();
              for (              TaggedValue tv : tagValues) {
                String tag=tv.getTag();
                String value=tv.getValue();
                if (tag != null && tag.equals(COLUMN_FAMILY)) {
                  if (value != null && value.equals(columnFamilyName)) {
                    columns.remove(column);
                    return true;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return false;
}",0.997005988023952
125109,"/** 
 * run method in Runnable will execute this 
 */
public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  HBaseAdmin hAdmin=getAdmin(metadataConnection);
  Configuration config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  try {
    if (hAdmin != null) {
      config=hAdmin.getConfiguration();
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      org.apache.hadoop.hbase.client.Scan scan=new org.apache.hadoop.hbase.client.Scan();
      org.apache.hadoop.hbase.client.HTable table=new org.apache.hadoop.hbase.client.HTable(config,tableName);
      scan.addFamily(columnFamilyName.getBytes());
      ResultScanner resultSetscanner=table.getScanner(scan);
      while (resultSetscanner.iterator().hasNext()) {
        Result result=resultSetscanner.iterator().next();
        if (result != null) {
          List<KeyValue> list=result.list();
          if (list != null) {
            for (            KeyValue kv : list) {
              if (Bytes.toStringBinary(kv.getFamily()).equals(columnFamilyNode.getValue())) {
                String columnName=Bytes.toStringBinary(kv.getQualifier());
                if (columnName != null && columnName.equals(columnNode.getValue())) {
                  TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                  column.setLabel(columnName);
                  column.setName(columnName);
                  column.setTalendType(""String_Node_Str"");
                  TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                  column.getTaggedValue().add(tv);
                  List<MetadataColumn> columns=metadataTable.getColumns();
                  columns.add(column);
                  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                  Catalog catalogToWrite=null;
                  for (                  Catalog c : catalogs) {
                    if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                      catalogToWrite=c;
                      break;
                    }
                  }
                  if (catalogToWrite != null) {
                    boolean findTable=false;
                    List exsitTables=CatalogHelper.getTables(catalogToWrite);
                    for (                    Object obj : exsitTables) {
                      if (obj instanceof TdTable) {
                        TdTable tb=(TdTable)obj;
                        if (tableName != null && tb.getLabel().equals(tableName)) {
                          List<MetadataColumn> columnsExsit=tb.getColumns();
                          columnsExsit.add(column);
                          findTable=true;
                        }
                      }
                    }
                    if (!findTable) {
                      PackageHelper.addMetadataTable((MetadataTable)metadataTable,catalogToWrite);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  MasterNotRunningException e) {
    e.printStackTrace();
  }
catch (  ZooKeeperConnectionException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}","/** 
 * run method in Runnable will execute this 
 */
@Override public void executeInRunnable(IMetadataConnection metadataConnection,Object currentNode,DatabaseConnection dbconn){
  HBaseAdmin hAdmin=getAdmin(metadataConnection);
  Configuration config=null;
  MetadataTable metadataTable=null;
  TableNode columnNode=null;
  try {
    if (hAdmin != null) {
      config=hAdmin.getConfiguration();
    }
    if (currentNode instanceof TableNode) {
      columnNode=(TableNode)currentNode;
    }
    if (columnNode == null) {
      return;
    }
    TableNode columnFamilyNode=columnNode.getParent();
    TableNode tableNode=null;
    String tableName=null;
    String columnFamilyName=null;
    if (columnFamilyNode != null) {
      columnFamilyName=columnFamilyNode.getValue();
      tableNode=columnFamilyNode.getParent();
      if (tableNode != null) {
        tableName=tableNode.getValue();
        metadataTable=(MetadataTable)tableNode.getTable();
      }
    }
    if (columnNode != null && columnNode.getType() == TableNode.COLUMN) {
      org.apache.hadoop.hbase.client.Scan scan=new org.apache.hadoop.hbase.client.Scan();
      org.apache.hadoop.hbase.client.HTable table=new org.apache.hadoop.hbase.client.HTable(config,tableName);
      scan.addFamily(columnFamilyName.getBytes());
      ResultScanner resultSetscanner=table.getScanner(scan);
      while (resultSetscanner.iterator().hasNext()) {
        Result result=resultSetscanner.iterator().next();
        if (result != null) {
          List<KeyValue> list=result.list();
          if (list != null) {
            for (            KeyValue kv : list) {
              if (Bytes.toStringBinary(kv.getFamily()).equals(columnFamilyNode.getValue())) {
                String columnName=Bytes.toStringBinary(kv.getQualifier());
                if (columnName != null && columnName.equals(columnNode.getValue())) {
                  TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                  column.setLabel(columnName);
                  column.setName(columnName);
                  column.setTalendType(""String_Node_Str"");
                  TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,columnFamilyName);
                  column.getTaggedValue().add(tv);
                  List<MetadataColumn> columns=metadataTable.getColumns();
                  columns.add(column);
                  List<Catalog> catalogs=ConnectionHelper.getCatalogs(dbconn);
                  Catalog catalogToWrite=null;
                  for (                  Catalog c : catalogs) {
                    if (c.getName() != null && c.getName().equals(getDefaultCatalogName())) {
                      catalogToWrite=c;
                      break;
                    }
                  }
                  if (catalogToWrite != null) {
                    boolean findTable=false;
                    List exsitTables=CatalogHelper.getTables(catalogToWrite);
                    for (                    Object obj : exsitTables) {
                      if (obj instanceof TdTable) {
                        TdTable tb=(TdTable)obj;
                        if (tableName != null && tb.getLabel().equals(tableName)) {
                          List<MetadataColumn> columnsExsit=tb.getColumns();
                          columnsExsit.add(column);
                          findTable=true;
                        }
                      }
                    }
                    if (!findTable) {
                      PackageHelper.addMetadataTable(metadataTable,catalogToWrite);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  MasterNotRunningException e) {
    e.printStackTrace();
  }
catch (  ZooKeeperConnectionException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
}",0.9967936385789408
125110,"public void deleteMetadataFromConnection(Object node,DatabaseConnection connection){
  TableNode columnNode=null;
  if (node == null) {
    return;
  }
  if (node instanceof TableNode) {
    columnNode=(TableNode)node;
  }
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(connection);
  TableNode columeFamilyNode=columnNode.getParent();
  TableNode tableNode=columeFamilyNode.getParent();
  String tableName=tableNode.getValue();
  String columnFamilyName=columeFamilyNode.getValue();
  String columnName=columnNode.getValue();
  boolean columnRemoved=false;
  for (  MetadataTable table : tables) {
    if (columnRemoved) {
      break;
    }
    if (table instanceof TdTable) {
      TdTable tdTable=(TdTable)table;
      if (tdTable.getLabel().equals(tableName)) {
        List<MetadataColumn> columns=tdTable.getColumns();
        for (        MetadataColumn column : columns) {
          if (column.getLabel().equals(columnName)) {
            List<TaggedValue> tagValues=column.getTaggedValue();
            for (            TaggedValue tv : tagValues) {
              String tag=tv.getTag();
              String value=tv.getValue();
              if (tag != null && tag.equals(COLUMN_FAMILY)) {
                if (value != null && value.equals(columnFamilyName)) {
                  columns.remove(column);
                  columnRemoved=true;
                  break;
                }
              }
            }
          }
          if (columnRemoved) {
            break;
          }
        }
      }
    }
  }
}","@Override public void deleteMetadataFromConnection(Object node,DatabaseConnection connection){
  TableNode columnNode=null;
  if (node == null) {
    return;
  }
  if (node instanceof TableNode) {
    columnNode=(TableNode)node;
  }
  List<MetadataTable> tables=ConnectionHelper.getTablesWithOrders(connection);
  TableNode columeFamilyNode=columnNode.getParent();
  TableNode tableNode=columeFamilyNode.getParent();
  String tableName=tableNode.getValue();
  String columnFamilyName=columeFamilyNode.getValue();
  String columnName=columnNode.getValue();
  boolean columnRemoved=false;
  for (  MetadataTable table : tables) {
    if (columnRemoved) {
      break;
    }
    if (table instanceof TdTable) {
      TdTable tdTable=(TdTable)table;
      if (tdTable.getLabel().equals(tableName)) {
        List<MetadataColumn> columns=tdTable.getColumns();
        for (        MetadataColumn column : columns) {
          if (column.getLabel().equals(columnName)) {
            List<TaggedValue> tagValues=column.getTaggedValue();
            for (            TaggedValue tv : tagValues) {
              String tag=tv.getTag();
              String value=tv.getValue();
              if (tag != null && tag.equals(COLUMN_FAMILY)) {
                if (value != null && value.equals(columnFamilyName)) {
                  columns.remove(column);
                  columnRemoved=true;
                  break;
                }
              }
            }
          }
          if (columnRemoved) {
            break;
          }
        }
      }
    }
  }
}",0.9967804249839022
125111,"/** 
 * returns the node type which will access a runnable when click the node.
 */
public int getRunnableAccessNodeType(){
  return TableNode.COLUMN;
}","/** 
 * returns the node type which will access a runnable when click the node.
 */
@Override public int getRunnableAccessNodeType(){
  return TableNode.COLUMN;
}",0.9681528662420382
125112,"public boolean isSupportGuessSchema(){
  return false;
}","@Override public boolean isSupportGuessSchema(){
  return false;
}",0.918032786885246
125113,"public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.COLUMN_FAMILY) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  try {
    IMetadataConnection metadataConnection=tableNode.getMetadataConn();
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    if (tableNode.getType() == TableNode.TABLE) {
      Configuration config=HBaseConfiguration.create();
      config.set(""String_Node_Str"",metadataConnection.getServerName());
      config.set(""String_Node_Str"",metadataConnection.getPort());
      HTableDescriptor td=hAdmin.getTableDescriptor(tableNode.getValue().getBytes());
      List<String> familyNames=new ArrayList<String>();
      for (      HColumnDescriptor columnDescripter : td.getColumnFamilies()) {
        String nameAsString=columnDescripter.getNameAsString();
        familyNames.add(nameAsString);
      }
      String columnFamily=metadataConnection.getSchema();
      if (columnFamily == null || ""String_Node_Str"".equals(columnFamily)) {
        for (        String columnFamilyToAdd : familyNames) {
          TableNode columnFamilyNode=new TableNode();
          columnFamilyNode.setParent(tableNode);
          columnFamilyNode.setType(TableNode.COLUMN_FAMILY);
          columnFamilyNode.setValue(columnFamilyToAdd);
          columnFamilyNode.setItemType(COLUMN_FAMILY);
          columnFamilyNode.setTable(tableNode.getTable());
          columnFamilyNode.setMetadataConn(metadataConnection);
          tableNode.getChildren().add(columnFamilyNode);
        }
      }
 else       if (columnFamily != null && familyNames.contains(columnFamily)) {
        TableNode columnFamilyNode=new TableNode();
        columnFamilyNode.setParent(tableNode);
        columnFamilyNode.setType(TableNode.COLUMN_FAMILY);
        columnFamilyNode.setValue(columnFamily);
        columnFamilyNode.setItemType(COLUMN_FAMILY);
        columnFamilyNode.setTable(tableNode.getTable());
        columnFamilyNode.setMetadataConn(metadataConnection);
        tableNode.getChildren().add(columnFamilyNode);
      }
    }
    if (tableNode.getType() == TableNode.COLUMN_FAMILY) {
      Configuration config=null;
      config=hAdmin.getConfiguration();
      TableNode parent=tableNode.getParent();
      String tableName=null;
      if (parent != null) {
        tableName=parent.getValue();
      }
      org.apache.hadoop.hbase.client.Scan scan=new org.apache.hadoop.hbase.client.Scan();
      org.apache.hadoop.hbase.client.HTable table=new org.apache.hadoop.hbase.client.HTable(config,tableName);
      scan.addFamily(tableNode.getValue().getBytes());
      ResultScanner resultSetscanner=table.getScanner(scan);
      while (resultSetscanner.iterator().hasNext()) {
        Result result=resultSetscanner.iterator().next();
        if (result != null) {
          List<KeyValue> list=result.list();
          if (list != null) {
            List<String> columnExsit=new ArrayList<String>();
            for (            KeyValue kv : list) {
              String columnName=Bytes.toStringBinary(kv.getQualifier());
              String familyName=Bytes.toStringBinary(kv.getFamily());
              String exsistColumn=columnName + ""String_Node_Str"" + familyName;
              if (!columnExsit.contains(exsistColumn)) {
                TableNode columnNode=new TableNode();
                columnNode.setParent(tableNode);
                columnNode.setType(TableNode.COLUMN);
                columnNode.setValue(Bytes.toStringBinary(kv.getQualifier()));
                columnNode.setItemType(""String_Node_Str"");
                columnNode.setTable(tableNode.getTable());
                tableNode.getChildren().add(columnNode);
                columnExsit.add(exsistColumn);
              }
            }
            columnExsit=null;
          }
        }
      }
    }
  }
 catch (  MasterNotRunningException e) {
    e.printStackTrace();
  }
catch (  ZooKeeperConnectionException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}","@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.COLUMN_FAMILY) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  try {
    IMetadataConnection metadataConnection=tableNode.getMetadataConn();
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    if (tableNode.getType() == TableNode.TABLE) {
      Configuration config=HBaseConfiguration.create();
      config.set(""String_Node_Str"",metadataConnection.getServerName());
      config.set(""String_Node_Str"",metadataConnection.getPort());
      HTableDescriptor td=hAdmin.getTableDescriptor(tableNode.getValue().getBytes());
      List<String> familyNames=new ArrayList<String>();
      for (      HColumnDescriptor columnDescripter : td.getColumnFamilies()) {
        String nameAsString=columnDescripter.getNameAsString();
        familyNames.add(nameAsString);
      }
      String columnFamily=metadataConnection.getSchema();
      if (columnFamily == null || ""String_Node_Str"".equals(columnFamily)) {
        for (        String columnFamilyToAdd : familyNames) {
          TableNode columnFamilyNode=new TableNode();
          columnFamilyNode.setParent(tableNode);
          columnFamilyNode.setType(TableNode.COLUMN_FAMILY);
          columnFamilyNode.setValue(columnFamilyToAdd);
          columnFamilyNode.setItemType(COLUMN_FAMILY);
          columnFamilyNode.setTable(tableNode.getTable());
          columnFamilyNode.setMetadataConn(metadataConnection);
          tableNode.getChildren().add(columnFamilyNode);
        }
      }
 else       if (columnFamily != null && familyNames.contains(columnFamily)) {
        TableNode columnFamilyNode=new TableNode();
        columnFamilyNode.setParent(tableNode);
        columnFamilyNode.setType(TableNode.COLUMN_FAMILY);
        columnFamilyNode.setValue(columnFamily);
        columnFamilyNode.setItemType(COLUMN_FAMILY);
        columnFamilyNode.setTable(tableNode.getTable());
        columnFamilyNode.setMetadataConn(metadataConnection);
        tableNode.getChildren().add(columnFamilyNode);
      }
    }
    if (tableNode.getType() == TableNode.COLUMN_FAMILY) {
      Configuration config=null;
      config=hAdmin.getConfiguration();
      TableNode parent=tableNode.getParent();
      String tableName=null;
      if (parent != null) {
        tableName=parent.getValue();
      }
      org.apache.hadoop.hbase.client.Scan scan=new org.apache.hadoop.hbase.client.Scan();
      org.apache.hadoop.hbase.client.HTable table=new org.apache.hadoop.hbase.client.HTable(config,tableName);
      scan.addFamily(tableNode.getValue().getBytes());
      ResultScanner resultSetscanner=table.getScanner(scan);
      while (resultSetscanner.iterator().hasNext()) {
        Result result=resultSetscanner.iterator().next();
        if (result != null) {
          List<KeyValue> list=result.list();
          if (list != null) {
            List<String> columnExsit=new ArrayList<String>();
            for (            KeyValue kv : list) {
              String columnName=Bytes.toStringBinary(kv.getQualifier());
              String familyName=Bytes.toStringBinary(kv.getFamily());
              String exsistColumn=columnName + ""String_Node_Str"" + familyName;
              if (!columnExsit.contains(exsistColumn)) {
                TableNode columnNode=new TableNode();
                columnNode.setParent(tableNode);
                columnNode.setType(TableNode.COLUMN);
                columnNode.setValue(Bytes.toStringBinary(kv.getQualifier()));
                columnNode.setItemType(""String_Node_Str"");
                columnNode.setTable(tableNode.getTable());
                tableNode.getChildren().add(columnNode);
                columnExsit.add(exsistColumn);
              }
            }
            columnExsit=null;
          }
        }
      }
    }
  }
 catch (  MasterNotRunningException e) {
    e.printStackTrace();
  }
catch (  ZooKeeperConnectionException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}",0.998850838887612
125114,"public AbstractMetadataExtractorViewProvider getMetadataViewProvider(){
  HBaseMetadataViewProvider provider=new HBaseMetadataViewProvider();
  return provider;
}","@Override public AbstractMetadataExtractorViewProvider getMetadataViewProvider(){
  HBaseMetadataViewProvider provider=new HBaseMetadataViewProvider();
  return provider;
}",0.9700598802395208
125115,"public List getTableNodeInfo(IMetadataConnection metadataConnection){
  List<TableNode> tableNodes=new ArrayList<TableNode>();
  try {
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    HTableDescriptor[] allTables=hAdmin.listTables();
    for (    HTableDescriptor td : allTables) {
      TdTable tb=RelationalFactory.eINSTANCE.createTdTable();
      tb.setLabel(td.getNameAsString());
      tb.setName(td.getNameAsString());
      tb.setTableType(ETableTypes.TABLETYPE_TABLE.getName());
      TableNode tableNode=new TableNode();
      tableNode.setType(TableNode.TABLE);
      tableNode.setValue(tb.getLabel());
      tableNode.setItemType(tb.getTableType());
      tableNode.setMetadataConn(metadataConnection);
      tableNode.setTable(tb);
      tableNodes.add(tableNode);
    }
  }
 catch (  MasterNotRunningException e) {
    ExceptionHandler.process(e);
  }
catch (  ZooKeeperConnectionException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return tableNodes;
}","@Override public List getTableNodeInfo(IMetadataConnection metadataConnection){
  List<TableNode> tableNodes=new ArrayList<TableNode>();
  try {
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    HTableDescriptor[] allTables=hAdmin.listTables();
    for (    HTableDescriptor td : allTables) {
      TdTable tb=RelationalFactory.eINSTANCE.createTdTable();
      tb.setLabel(td.getNameAsString());
      tb.setName(td.getNameAsString());
      tb.setTableType(ETableTypes.TABLETYPE_TABLE.getName());
      TableNode tableNode=new TableNode();
      tableNode.setType(TableNode.TABLE);
      tableNode.setValue(tb.getLabel());
      tableNode.setItemType(tb.getTableType());
      tableNode.setMetadataConn(metadataConnection);
      tableNode.setTable(tb);
      tableNodes.add(tableNode);
    }
  }
 catch (  MasterNotRunningException e) {
    ExceptionHandler.process(e);
  }
catch (  ZooKeeperConnectionException e) {
    ExceptionHandler.process(e);
  }
catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return tableNodes;
}",0.9952015355086372
125116,"public Image getColumnImage(Object element,int columnIndex){
  return null;
}","@Override public Image getColumnImage(Object element,int columnIndex){
  return null;
}",0.9390243902439024
125117,"public boolean isSupportRetrieveSchema(){
  return true;
}","@Override public boolean isSupportRetrieveSchema(){
  return true;
}",0.9206349206349206
125118,"public Object[] getElements(Object inputElement){
  List list=(List)inputElement;
  return list.toArray();
}","@Override public Object[] getElements(Object inputElement){
  List list=(List)inputElement;
  return list.toArray();
}",0.9557522123893806
125119,"public List<TdColumn> returnMetadataColumnsFromTable(String tableName,IMetadataConnection metadataConnection){
  List<TdColumn> toReturn=new ArrayList<TdColumn>();
  try {
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    Configuration config=hAdmin.getConfiguration();
    org.apache.hadoop.hbase.client.Scan scan=new org.apache.hadoop.hbase.client.Scan();
    org.apache.hadoop.hbase.client.HTable table=new org.apache.hadoop.hbase.client.HTable(config,tableName);
    scan.addFamily(metadataConnection.getSchema().getBytes());
    ResultScanner resultSetscanner=table.getScanner(scan);
    while (resultSetscanner.iterator().hasNext()) {
      Result result=resultSetscanner.iterator().next();
      if (result != null) {
        List<KeyValue> list=result.list();
        if (list != null) {
          List<String> columnExsit=new ArrayList<String>();
          for (          KeyValue kv : list) {
            String columnName=Bytes.toStringBinary(kv.getQualifier());
            String familyName=Bytes.toStringBinary(kv.getFamily());
            if (columnName != null) {
              String exsistColumn=columnName + ""String_Node_Str"" + familyName;
              if (!columnExsit.contains(columnExsit)) {
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(columnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,metadataConnection.getSchema());
                column.getTaggedValue().add(tv);
                toReturn.add(column);
                columnExsit.add(exsistColumn);
              }
            }
          }
          columnExsit=null;
        }
      }
    }
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return toReturn;
}","@Override public List<TdColumn> returnMetadataColumnsFromTable(String tableName,IMetadataConnection metadataConnection){
  List<TdColumn> toReturn=new ArrayList<TdColumn>();
  try {
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    Configuration config=hAdmin.getConfiguration();
    org.apache.hadoop.hbase.client.Scan scan=new org.apache.hadoop.hbase.client.Scan();
    org.apache.hadoop.hbase.client.HTable table=new org.apache.hadoop.hbase.client.HTable(config,tableName);
    scan.addFamily(metadataConnection.getSchema().getBytes());
    ResultScanner resultSetscanner=table.getScanner(scan);
    while (resultSetscanner.iterator().hasNext()) {
      Result result=resultSetscanner.iterator().next();
      if (result != null) {
        List<KeyValue> list=result.list();
        if (list != null) {
          List<String> columnExsit=new ArrayList<String>();
          for (          KeyValue kv : list) {
            String columnName=Bytes.toStringBinary(kv.getQualifier());
            String familyName=Bytes.toStringBinary(kv.getFamily());
            if (columnName != null) {
              String exsistColumn=columnName + ""String_Node_Str"" + familyName;
              if (!columnExsit.contains(columnExsit)) {
                TdColumn column=RelationalFactory.eINSTANCE.createTdColumn();
                column.setLabel(columnName);
                column.setName(columnName);
                column.setTalendType(""String_Node_Str"");
                TaggedValue tv=TaggedValueHelper.createTaggedValue(COLUMN_FAMILY,metadataConnection.getSchema());
                column.getTaggedValue().add(tv);
                toReturn.add(column);
                columnExsit.add(exsistColumn);
              }
            }
          }
          columnExsit=null;
        }
      }
    }
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return toReturn;
}",0.9973404255319148
125120,"public String getColumnText(Object element,int columnIndex){
  TableNode tableNode=(TableNode)element;
  int type=tableNode.getType();
switch (columnIndex) {
case 0:
    String value=tableNode.getValue();
  if (value == null) {
    return ""String_Node_Str"";
  }
return value;
case 1:
if (type == TableNode.CATALOG) {
return ""String_Node_Str"";
}
 else if (type == TableNode.SCHEMA) {
return ""String_Node_Str"";
}
 else {
return tableNode.getItemType();
}
default :
return ""String_Node_Str"";
}
}","@Override public String getColumnText(Object element,int columnIndex){
  TableNode tableNode=(TableNode)element;
  int type=tableNode.getType();
switch (columnIndex) {
case 0:
    String value=tableNode.getValue();
  if (value == null) {
    return ""String_Node_Str"";
  }
return value;
case 1:
if (type == TableNode.CATALOG) {
return ""String_Node_Str"";
}
 else if (type == TableNode.SCHEMA) {
return ""String_Node_Str"";
}
 else {
return tableNode.getItemType();
}
default :
return ""String_Node_Str"";
}
}",0.9899396378269618
125121,"public String getDefaultCatalogName(){
  return CATALOG_NAME;
}","@Override public String getDefaultCatalogName(){
  return CATALOG_NAME;
}",0.9264705882352942
125122,"public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","@Override public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}",0.9367088607594936
125123,"public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection){
  List<String> toReturn=new ArrayList<String>();
  try {
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    HTableDescriptor[] allTables=hAdmin.listTables();
    for (    HTableDescriptor td : allTables) {
      toReturn.add(td.getNameAsString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return toReturn;
}","@Override public List<String> returnTablesFormConnection(IMetadataConnection metadataConnection){
  List<String> toReturn=new ArrayList<String>();
  try {
    HBaseAdmin hAdmin=getAdmin(metadataConnection);
    HTableDescriptor[] allTables=hAdmin.listTables();
    for (    HTableDescriptor td : allTables) {
      toReturn.add(td.getNameAsString());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return toReturn;
}",0.988425925925926
125124,"public void fillConnection(DatabaseConnection connection){
  Catalog defaultCatalog=CatalogHelper.createCatalog(getDefaultCatalogName());
  ConnectionHelper.addPackage(defaultCatalog,connection);
  connection.setSID(getDefaultCatalogName());
}","@Override public void fillConnection(DatabaseConnection connection){
  Catalog defaultCatalog=CatalogHelper.createCatalog(getDefaultCatalogName());
  ConnectionHelper.addPackage(defaultCatalog,connection);
  connection.setSID(getDefaultCatalogName());
}",0.9798387096774194
125125,"private String doRunJob(final JobContext jobContext){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      Job runJob=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          StringBuffer output=new StringBuffer(""String_Node_Str"");
          IStatus status=Status.OK_STATUS;
          try {
            monitor.beginTask(OutputMessages.MSG_OUTPUT_STARTUP,100);
            monitor.worked(10);
            monitor.subTask(OutputMessages.MSG_OUTPUT_DEPLOYING);
            updateAllEnabledOrNot(OozieJobProcessStatus.DEPLOYING,jobContext.getJobName());
            deployJobOnHadoop(output,jobContext);
            monitor.worked(30);
            status=runRemoteJob(monitor,jobContext,output);
            return status;
          }
 catch (          InterruptedException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          JobSubmissionException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          OozieClientException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          URISyntaxException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          OozieJobDeployException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
          return Status.OK_STATUS;
        }
      }
;
      runJob.setUser(true);
      runJob.schedule();
    }
  }
);
  return null;
}","private String doRunJob(final JobContext jobContext){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      Job runJob=new Job(""String_Node_Str""){
        @Override protected IStatus run(        IProgressMonitor monitor){
          StringBuffer output=new StringBuffer(""String_Node_Str"");
          IStatus status=Status.OK_STATUS;
          try {
            monitor.beginTask(OutputMessages.MSG_OUTPUT_STARTUP,100);
            monitor.worked(10);
            monitor.subTask(OutputMessages.MSG_OUTPUT_DEPLOYING);
            updateAllEnabledOrNot(OozieJobProcessStatus.DEPLOYING,jobContext.getJobName());
            deployJobOnHadoop(output,jobContext);
            monitor.worked(30);
            status=runRemoteJob(monitor,jobContext,output);
            return status;
          }
 catch (          InterruptedException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          JobSubmissionException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            output.append(e.getCause().getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          OozieClientException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          URISyntaxException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
catch (          OozieJobDeployException e) {
            updateAllEnabledOrNot(OozieJobProcessStatus.FAILED,jobContext.getJobName());
            output.append(outputCurrentDate());
            output.append(e.getMessage());
            output.append(OutputMessages.LINE_BREAK_CHAR);
            updateOutputTextContents(output.toString(),jobContext.getJobName());
            ExceptionHandler.process(e);
          }
          return Status.OK_STATUS;
        }
      }
;
      runJob.setUser(true);
      runJob.schedule();
    }
  }
);
  return null;
}",0.9817181685811356
125126,"/** 
 * When clicking the ""Run"" button, this action will be invoked.<br> Workflow job state valid transitions: <li>--> PREP <li>PREP --> RUNNING | KILLED <li>RUNNING --> SUSPENDED | SUCCEEDED | KILLED | FAILED <li>SUSPENDED --> RUNNING | KILLED
 */
public void doRunAction(){
  try {
    JobContext jobContext=initJobCotextForOozie(JobSubmissionType.REMOTE);
    String jobIdInOozie=CorePlugin.getDefault().getPreferenceStore().getString(""String_Node_Str"" + jobContext.getJobName());
    if (jobIdInOozie != null)     traceManager.removeTrace(jobIdInOozie);
    doRunJob(jobContext);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * When clicking the ""Run"" button, this action will be invoked.<br> Workflow job state valid transitions: <li>--> PREP <li>PREP --> RUNNING | KILLED <li>RUNNING --> SUSPENDED | SUCCEEDED | KILLED | FAILED <li>SUSPENDED --> RUNNING | KILLED
 * @param iContext
 */
public void doRunAction(IContext iContext){
  try {
    JobContext jobContext=initJobContextForOozie(JobSubmissionType.REMOTE,iContext);
    String jobIdInOozie=CorePlugin.getDefault().getPreferenceStore().getString(""String_Node_Str"" + jobContext.getJobName());
    if (jobIdInOozie != null)     traceManager.removeTrace(jobIdInOozie);
    doRunJob(jobContext);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9658753709198812
125127,"private void deployJobOnHadoop(StringBuffer output,JobContext jobContext) throws OozieJobDeployException {
  String jobIdInOozie=CorePlugin.getDefault().getPreferenceStore().getString(""String_Node_Str"" + jobContext.getJobName());
  output.append(outputCurrentDate());
  output.append(OutputMessages.MSG_OUTPUT_DEPLOYING + OutputMessages.LINE_BREAK_CHAR);
  updateOutputTextContents(output.toString(),jobContext.getJobName());
  try {
    OozieJobDeployer.deployJob(OozieJobTrackerListener.getProcess(),new NullProgressMonitor());
    output.append(outputCurrentDate());
    output.append(OutputMessages.MSG_OUTPUT_DEPLOY_COMPLETE);
    output.append(OutputMessages.LINE_BREAK_CHAR);
  }
 catch (  OozieJobDeployException e) {
    output.append(outputCurrentDate());
    output.append(OutputMessages.MSG_OUTPUT_DEPLOY_FAILED);
    output.append(OutputMessages.LINE_BREAK_CHAR);
    output.append(outputCurrentDate());
    output.append(e.getMessage());
    output.append(OutputMessages.LINE_BREAK_CHAR);
    output.append(outputCurrentDate());
    output.append(e.getCause().getMessage());
    output.append(OutputMessages.LINE_BREAK_CHAR);
    updateOutputTextContents(output.toString(),jobContext.getJobName());
    throw e;
  }
  updateOutputTextContents(output.toString(),jobContext.getJobName());
}","private void deployJobOnHadoop(StringBuffer output,JobContext jobContext) throws OozieJobDeployException {
  output.append(outputCurrentDate());
  output.append(OutputMessages.MSG_OUTPUT_DEPLOYING + OutputMessages.LINE_BREAK_CHAR);
  updateOutputTextContents(output.toString(),jobContext.getJobName());
  try {
    OozieJobDeployer.deployJob(OozieJobTrackerListener.getProcess(),new NullProgressMonitor());
    output.append(outputCurrentDate());
    output.append(OutputMessages.MSG_OUTPUT_DEPLOY_COMPLETE);
    output.append(OutputMessages.LINE_BREAK_CHAR);
  }
 catch (  OozieJobDeployException e) {
    output.append(outputCurrentDate());
    output.append(OutputMessages.MSG_OUTPUT_DEPLOY_FAILED);
    output.append(OutputMessages.LINE_BREAK_CHAR);
    output.append(outputCurrentDate());
    output.append(e.getMessage());
    output.append(OutputMessages.LINE_BREAK_CHAR);
    output.append(outputCurrentDate());
    output.append(e.getCause().getMessage());
    output.append(OutputMessages.LINE_BREAK_CHAR);
    updateOutputTextContents(output.toString(),jobContext.getJobName());
    throw e;
  }
  updateOutputTextContents(output.toString(),jobContext.getJobName());
}",0.9504232164449818
125128,"/** 
 * When clicking the ""Schedule"" button, this action will open a dialog to provide some configurations for scheduling. If <code>Window.OK == Dialog.open</code>, will invoke the method.
 */
public void doScheduleAction(){
  Shell shell=executeJobComposite.getShell();
  schedulingDialog=new SchedulingDialog(shell);
  initScheduling(schedulingDialog);
  if (Window.OK == schedulingDialog.open()) {
    try {
      OozieJobDeployer.deployJob(OozieJobTrackerListener.getProcess(),new NullProgressMonitor());
      JobContext jobContext=initJobCotextForOozie(JobSubmissionType.SCHEDULED);
      updateAllEnabledOrNot(OozieJobProcessStatus.PREP,OozieJobTrackerListener.getProcess().getLabel());
      doScheduleJob(jobContext);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}","/** 
 * When clicking the ""Schedule"" button, this action will open a dialog to provide some configurations for scheduling. If <code>Window.OK == Dialog.open</code>, will invoke the method.
 */
public void doScheduleAction(IContext context){
  Shell shell=executeJobComposite.getShell();
  schedulingDialog=new SchedulingDialog(shell);
  initScheduling(schedulingDialog);
  if (Window.OK == schedulingDialog.open()) {
    String jobName=null;
    try {
      JobContext jobContext=initJobContextForOozie(JobSubmissionType.SCHEDULED,context);
      jobName=jobContext.getJobName();
      OozieJobDeployer.deployJob(OozieJobTrackerListener.getProcess(),new NullProgressMonitor());
      updateAllEnabledOrNot(OozieJobProcessStatus.PREP,OozieJobTrackerListener.getProcess().getLabel());
      doScheduleJob(jobContext);
    }
 catch (    Exception e) {
      StringBuffer output=new StringBuffer();
      output.append(e.getMessage());
      output.append(OutputMessages.LINE_BREAK_CHAR);
      output.append(e.getCause().getMessage());
      output.append(OutputMessages.LINE_BREAK_CHAR);
      updateOutputTextContents(output.toString(),jobName);
    }
  }
}",0.6758409785932722
125129,"private static void uploadProcess(IProcess2 process,String unzipDir) throws OozieJobDeployException {
  String appPathOnHDFSParent=(String)process.getElementParameter(""String_Node_Str"").getValue();
  org.apache.hadoop.fs.FileSystem fs=null;
  org.apache.hadoop.conf.Configuration config=new org.apache.hadoop.conf.Configuration();
  config.set(""String_Node_Str"",CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.OOZIE_SHCEDULER_NAME_NODE_ENDPOINT));
  String userName=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.OOZIE_SCHEDULER_USER_NAME);
  if (userName == null || ""String_Node_Str"".equals(userName)) {
    try {
      fs=org.apache.hadoop.fs.FileSystem.get(config);
    }
 catch (    IOException e) {
      throw new OozieJobDeployException(""String_Node_Str"",e);
    }
  }
 else {
    try {
      fs=org.apache.hadoop.fs.FileSystem.get(new java.net.URI(config.get(""String_Node_Str"")),config,userName);
    }
 catch (    IOException e) {
      throw new OozieJobDeployException(""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      throw new OozieJobDeployException(""String_Node_Str"",e);
    }
catch (    URISyntaxException e) {
      throw new OozieJobDeployException(""String_Node_Str"",e);
    }
  }
  try {
    fs.mkdirs(new org.apache.hadoop.fs.Path(appPathOnHDFSParent + ""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new OozieJobDeployException(""String_Node_Str"",e);
  }
  File unzipDirFile=new File(unzipDir);
  File[] files=unzipDirFile.listFiles(new FileFilter(){
    @Override public boolean accept(    File file){
      if (file != null && file.isDirectory()) {
        return true;
      }
      return false;
    }
  }
);
  if (files != null && files.length > 0) {
    for (int i=0; i < files.length; i++) {
      File file=files[i];
      File[] tempFiles=file.listFiles();
      if (tempFiles != null && tempFiles.length > 0) {
        for (int j=0; j < tempFiles.length; j++) {
          File tempFile=tempFiles[j];
          org.apache.hadoop.fs.Path srcPath=new org.apache.hadoop.fs.Path(tempFile.getAbsolutePath());
          org.apache.hadoop.fs.Path distpath=new org.apache.hadoop.fs.Path(appPathOnHDFSParent + ""String_Node_Str"");
          try {
            fs.copyFromLocalFile(false,true,srcPath,distpath);
          }
 catch (          IOException e) {
            throw new OozieJobDeployException(""String_Node_Str"",e);
          }
        }
      }
    }
  }
}","private static void uploadProcess(IProcess2 process,String unzipDir) throws OozieJobDeployException {
  String appPathOnHDFSParent=(String)process.getElementParameter(""String_Node_Str"").getValue();
  org.apache.hadoop.fs.FileSystem fs=null;
  org.apache.hadoop.conf.Configuration config=new org.apache.hadoop.conf.Configuration();
  config.set(""String_Node_Str"",CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.OOZIE_SHCEDULER_NAME_NODE_ENDPOINT));
  String userName=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.OOZIE_SCHEDULER_USER_NAME);
  if (StringUtils.isEmpty(userName)) {
    try {
      fs=org.apache.hadoop.fs.FileSystem.get(config);
    }
 catch (    IOException e) {
      throw new OozieJobDeployException(""String_Node_Str"",e);
    }
  }
 else {
    try {
      fs=org.apache.hadoop.fs.FileSystem.get(new java.net.URI(config.get(""String_Node_Str"")),config,userName);
    }
 catch (    IOException e) {
      throw new OozieJobDeployException(""String_Node_Str"" + userName + ""String_Node_Str"",e);
    }
catch (    InterruptedException e) {
      throw new OozieJobDeployException(""String_Node_Str"",e);
    }
catch (    URISyntaxException e) {
      throw new OozieJobDeployException(""String_Node_Str"",e);
    }
  }
  try {
    if (fs.exists(new org.apache.hadoop.fs.Path(appPathOnHDFSParent + ""String_Node_Str""))) {
      fs.delete(new org.apache.hadoop.fs.Path(appPathOnHDFSParent + ""String_Node_Str""),true);
    }
    fs.mkdirs(new org.apache.hadoop.fs.Path(appPathOnHDFSParent + ""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new OozieJobDeployException(""String_Node_Str"",e);
  }
  File unzipDirFile=new File(unzipDir);
  File[] files=unzipDirFile.listFiles(new FileFilter(){
    @Override public boolean accept(    File file){
      if (file != null && file.isDirectory()) {
        return true;
      }
      return false;
    }
  }
);
  if (files != null && files.length > 0) {
    for (int i=0; i < files.length; i++) {
      File file=files[i];
      File[] tempFiles=file.listFiles();
      if (tempFiles != null && tempFiles.length > 0) {
        for (int j=0; j < tempFiles.length; j++) {
          File tempFile=tempFiles[j];
          org.apache.hadoop.fs.Path srcPath=new org.apache.hadoop.fs.Path(tempFile.getAbsolutePath());
          org.apache.hadoop.fs.Path distpath=new org.apache.hadoop.fs.Path(appPathOnHDFSParent + ""String_Node_Str"");
          try {
            fs.copyFromLocalFile(false,true,srcPath,distpath);
          }
 catch (          IOException e) {
            throw new OozieJobDeployException(""String_Node_Str"",e);
          }
        }
      }
    }
  }
}",0.9448636099825886
125130,"private static String buildExportZip(IProcess2 process,IProgressMonitor progressMonitor) throws ProcessorException {
  Map<ExportChoice,Object> exportChoiceMap=JobScriptsManagerFactory.getDefaultExportChoiceMap();
  exportChoiceMap.put(ExportChoice.needLauncher,false);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,false);
  exportChoiceMap.put(ExportChoice.needContext,false);
  ProcessItem processItem=(ProcessItem)process.getProperty().getItem();
  String processName=processItem.getProperty().getLabel();
  ExportFileResource fileResource=new ExportFileResource(processItem,processName);
  ExportFileResource[] exportFileResources=new ExportFileResource[]{fileResource};
  if (progressMonitor.isCanceled()) {
    throw new ProcessorException(new InterruptedException());
  }
  JobScriptsManager jobScriptsManager=JobScriptsManagerFactory.createManagerInstance(exportChoiceMap,processItem.getProcess().getDefaultContext(),JobScriptsManager.ALL_ENVIRONMENTS,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES,JobExportType.POJO);
  String codeOptions=null;
  List<ExportFileResource> exportResources=jobScriptsManager.getExportResources(exportFileResources,codeOptions);
  if (progressMonitor.isCanceled()) {
    throw new ProcessorException(new InterruptedException());
  }
  final String archiveFilePath=Path.fromOSString(CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.FILE_PATH_TEMP)) + ""String_Node_Str"";
  final ArchiveFileExportOperationFullPath exporterOperation=new ArchiveFileExportOperationFullPath(exportResources,archiveFilePath);
  exporterOperation.setCreateLeadupStructure(true);
  exporterOperation.setUseCompression(true);
  final IProgressMonitor subProgressMonitor=new SubProgressMonitor(progressMonitor,1);
  if (progressMonitor.isCanceled()) {
    throw new ProcessorException(new InterruptedException());
  }
  try {
    exporterOperation.run(subProgressMonitor);
  }
 catch (  InvocationTargetException e) {
    throw new ProcessorException(e);
  }
catch (  InterruptedException e) {
    throw new ProcessorException(e);
  }
  jobScriptsManager.deleteTempFiles();
  ProcessorUtilities.resetExportConfig();
  return archiveFilePath;
}","private static String buildExportZip(IProcess2 process,IProgressMonitor progressMonitor) throws ProcessorException {
  Map<ExportChoice,Object> exportChoiceMap=JobScriptsManagerFactory.getDefaultExportChoiceMap();
  exportChoiceMap.put(ExportChoice.needLauncher,false);
  exportChoiceMap.put(ExportChoice.needJobItem,false);
  exportChoiceMap.put(ExportChoice.needJobScript,true);
  exportChoiceMap.put(ExportChoice.needSourceCode,false);
  exportChoiceMap.put(ExportChoice.needContext,true);
  ProcessItem processItem=(ProcessItem)process.getProperty().getItem();
  String processName=processItem.getProperty().getLabel();
  ExportFileResource fileResource=new ExportFileResource(processItem,processName);
  ExportFileResource[] exportFileResources=new ExportFileResource[]{fileResource};
  if (progressMonitor.isCanceled()) {
    throw new ProcessorException(new InterruptedException());
  }
  JobScriptsManager jobScriptsManager=JobScriptsManagerFactory.createManagerInstance(exportChoiceMap,processItem.getProcess().getDefaultContext(),JobScriptsManager.ALL_ENVIRONMENTS,IProcessor.NO_STATISTICS,IProcessor.NO_TRACES,JobExportType.POJO);
  String codeOptions=null;
  List<ExportFileResource> exportResources=jobScriptsManager.getExportResources(exportFileResources,codeOptions);
  if (progressMonitor.isCanceled()) {
    throw new ProcessorException(new InterruptedException());
  }
  final String archiveFilePath=Path.fromOSString(CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.FILE_PATH_TEMP)) + ""String_Node_Str"";
  final ArchiveFileExportOperationFullPath exporterOperation=new ArchiveFileExportOperationFullPath(exportResources,archiveFilePath);
  exporterOperation.setCreateLeadupStructure(true);
  exporterOperation.setUseCompression(true);
  final IProgressMonitor subProgressMonitor=new SubProgressMonitor(progressMonitor,1);
  if (progressMonitor.isCanceled()) {
    throw new ProcessorException(new InterruptedException());
  }
  try {
    exporterOperation.run(subProgressMonitor);
  }
 catch (  InvocationTargetException e) {
    throw new ProcessorException(e);
  }
catch (  InterruptedException e) {
    throw new ProcessorException(e);
  }
  jobScriptsManager.deleteTempFiles();
  ProcessorUtilities.resetExportConfig();
  return archiveFilePath;
}",0.998479252661308
125131,"protected void regScheduleBtnListener(){
  scheduleBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      executeJobCompController.doScheduleAction();
    }
  }
);
}","protected void regScheduleBtnListener(){
  scheduleBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      executeJobCompController.doScheduleAction(contextComposite.getSelectedContext());
    }
  }
);
}",0.9221052631578948
125132,"protected void regRunBtnListener(){
  runBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      executeJobCompController.doRunAction();
    }
  }
);
}","protected void regRunBtnListener(){
  runBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      executeJobCompController.doRunAction(contextComposite.getSelectedContext());
    }
  }
);
}",0.9168539325842696
125133,"public void setPathValue(String pathValue){
  if (getEditor() != null && !pathValue.equals(getPathValue()) && !OozieJobTrackerListener.getProcess().isReadOnly()) {
    IProcess2 process=OozieJobTrackerListener.getProcess();
    getCommandStack().execute(new PropertyChangeCommand(process,""String_Node_Str"",pathValue));
  }
}","public void setPathValue(String pathValue){
  if (getEditor() != null && !pathValue.equals(getPathValue()) && !OozieJobTrackerListener.getProcess().isReadOnly()) {
    IProcess2 process=OozieJobTrackerListener.getProcess();
    getCommandStack().execute(new PropertyChangeCommand(process,""String_Node_Str"",pathValue.trim()));
  }
}",0.9893129770992366
125134,"public void refresh(){
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (process != null) {
    String label=process.getLabel();
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
    }
    tabFactory.setTitle(Messages.getString(""String_Node_Str"",label),null);
    setPartName(Messages.getString(""String_Node_Str"",label));
    contextComposite.setProcess(process);
  }
 else {
    tabFactory.setTitle(Messages.getString(""String_Node_Str""),null);
    setPartName(Messages.getString(""String_Node_Str""));
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
    }
    contextComposite.setProcess(null);
  }
}","public void refresh(){
  IProcess2 process=OozieJobTrackerListener.getProcess();
  if (process != null) {
    String label=process.getLabel();
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
      executeJobComposite.setContextComposite(contextComposite);
    }
    tabFactory.setTitle(Messages.getString(""String_Node_Str"",label),null);
    setPartName(Messages.getString(""String_Node_Str"",label));
    contextComposite.setProcess(process);
  }
 else {
    tabFactory.setTitle(Messages.getString(""String_Node_Str""),null);
    setPartName(Messages.getString(""String_Node_Str""));
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.initValues();
    }
    contextComposite.setProcess(null);
  }
}",0.9583066067992304
125135,"public void setMultiPageTalendEditor(AbstractMultiPageTalendEditor multiPageTalendEditor){
  this.multiPageTalendEditor=multiPageTalendEditor;
  executeJobCompController.setMultiPageTalendEditor(multiPageTalendEditor);
  checkScheduleBtnValid();
  checkRunBtnValid();
  checkKillBtnValid();
  if (multiPageTalendEditor != null) {
    pathText.setEnabled(true);
    pathText.setText(getPathValue());
    outputTxt.setEnabled(true);
  }
 else {
    pathText.setEnabled(false);
    pathText.setText(""String_Node_Str"");
    outputTxt.setText(""String_Node_Str"");
    outputTxt.setEnabled(false);
  }
}","public void setMultiPageTalendEditor(AbstractMultiPageTalendEditor multiPageTalendEditor){
  this.multiPageTalendEditor=multiPageTalendEditor;
  executeJobCompController.setMultiPageTalendEditor(multiPageTalendEditor);
  checkScheduleBtnValid();
  checkRunBtnValid();
  checkKillBtnValid();
  if (!pathText.isDisposed() && !outputTxt.isDisposed()) {
    if (multiPageTalendEditor != null) {
      pathText.setEnabled(true);
      pathText.setText(getPathValue());
      outputTxt.setEnabled(true);
    }
 else {
      pathText.setEnabled(false);
      pathText.setText(""String_Node_Str"");
      outputTxt.setText(""String_Node_Str"");
      outputTxt.setEnabled(false);
    }
  }
}",0.9349019607843138
125136,"@Override public void refresh(){
}","@Override public void refresh(){
  if (!isDisposed()) {
    getParent().layout();
  }
}",0.5619834710743802
125137,"@Override public IMultiPageTalendEditor getPart(){
  return null;
}","@Override public IMultiPageTalendEditor getPart(){
  return multiPageTalendEditor;
}",0.8741721854304636
125138,"/** 
 * @param parent
 * @param style
 */
public OozieMonitoringComposite(Composite parent,int style){
  super(parent,style);
  parent.setLayout(new FillLayout());
  setExpandHorizontal(true);
  setExpandVertical(true);
  this.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_DARK_GRAY));
  Composite comp=new Composite(this,SWT.NONE);
  createContents(comp);
  this.setMinSize(comp.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}","/** 
 * @param parent
 * @param style
 */
public OozieMonitoringComposite(Composite parent,int style){
  super(parent,style);
  parent.setLayout(new FillLayout());
  setExpandHorizontal(true);
  setExpandVertical(true);
  this.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
  Composite comp=new Composite(this,SWT.NONE);
  setContent(comp);
  createContents(comp);
  this.setMinSize(comp.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}",0.959731543624161
125139,"@Override public void refresh(){
}","@Override public void refresh(){
  if (!isDisposed()) {
    getParent().layout();
  }
  if (!browser.isDisposed()) {
    if (process != null) {
      browser.setUrl(""String_Node_Str"");
    }
 else {
      browser.setUrl(""String_Node_Str"");
    }
  }
}",0.231578947368421
125140,"protected void createContents(Composite parent){
  Browser browser=new Browser(parent,SWT.NONE);
}","protected void createContents(Composite parent){
  GridLayout gridLayout=new GridLayout(1,false);
  parent.setLayout(gridLayout);
  browser=new Browser(parent,SWT.NONE);
  browser.setLayoutData(new GridData(GridData.FILL_BOTH));
}",0.5548780487804879
125141,"public void refresh(){
  getPart();
  if (part != null) {
    executeJobComposite.setMultiPageTalendEditor(part);
    tabFactory.setTitle(""String_Node_Str"" + part.getProcess().getLabel(),null);
    this.setPartName(""String_Node_Str"" + part.getProcess().getLabel() + ""String_Node_Str"");
    contextComposite.setProcess(part.getProcess());
  }
 else {
    executeJobComposite.setMultiPageTalendEditor(null);
    tabFactory.setTitle(Messages.getString(""String_Node_Str""),null);
    this.setPartName(""String_Node_Str"");
    contextComposite.setProcess(null);
  }
}","public void refresh(){
  getPart();
  if (part != null) {
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.setMultiPageTalendEditor(part);
    }
    tabFactory.setTitle(""String_Node_Str"" + part.getProcess().getLabel(),null);
    this.setPartName(""String_Node_Str"" + part.getProcess().getLabel() + ""String_Node_Str"");
    contextComposite.setProcess(part.getProcess());
    if (monitoringComposite != null && !monitoringComposite.isDisposed()) {
      monitoringComposite.setProcess(part.getProcess());
    }
  }
 else {
    if (executeJobComposite != null && !executeJobComposite.isDisposed()) {
      executeJobComposite.setMultiPageTalendEditor(null);
    }
    tabFactory.setTitle(Messages.getString(""String_Node_Str""),null);
    this.setPartName(""String_Node_Str"");
    contextComposite.setProcess(null);
    if (monitoringComposite != null && !monitoringComposite.isDisposed()) {
      monitoringComposite.setProcess(null);
    }
  }
}",0.721184803605924
125142,"protected void createCenterContents(Composite parent){
  FormData layouDatag=new FormData();
  layouDatag.left=new FormAttachment(0,0);
  layouDatag.width=32;
  layouDatag.top=new FormAttachment(0,0);
  layouDatag.bottom=new FormAttachment(100,0);
  final Composite buttonComposite=new Composite(parent,SWT.ERROR);
  buttonComposite.setLayoutData(layouDatag);
  buttonComposite.setLayout(new GridLayout());
  moveButton=new Button(buttonComposite,SWT.PUSH);
  moveButton.setText(""String_Node_Str"");
  moveButton.setToolTipText(Messages.getString(""String_Node_Str""));
  final GridData layoutData=new GridData();
  layoutData.verticalAlignment=GridData.CENTER;
  layoutData.horizontalAlignment=GridData.CENTER;
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.grabExcessVerticalSpace=true;
  moveButton.setLayoutData(layoutData);
  regMoveButtonListener();
}","protected void createCenterContents(Composite parent){
  FormData layouDatag=new FormData();
  layouDatag.left=new FormAttachment(0,0);
  layouDatag.width=32;
  layouDatag.top=new FormAttachment(0,0);
  layouDatag.bottom=new FormAttachment(100,0);
  final Composite buttonComposite=new Composite(parent,SWT.ERROR);
  buttonComposite.setLayoutData(layouDatag);
  buttonComposite.setLayout(new GridLayout());
  moveButton=new Button(buttonComposite,SWT.PUSH);
  moveButton.setText(""String_Node_Str"");
  moveButton.setToolTipText(""String_Node_Str"");
  final GridData layoutData=new GridData();
  layoutData.verticalAlignment=GridData.CENTER;
  layoutData.horizontalAlignment=GridData.CENTER;
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.grabExcessVerticalSpace=true;
  moveButton.setLayoutData(layoutData);
  regMoveButtonListener();
}",0.9883040935672516
125143,"public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  TalendPropertyTabDescriptor descriptor=(TalendPropertyTabDescriptor)selection.getFirstElement();
  if (descriptor == null) {
    return;
  }
  if (currentSelectedTab != null && (currentSelectedTab.getCategory() != descriptor.getCategory())) {
    for (    Control curControl : tabFactory.getTabComposite().getChildren()) {
      curControl.dispose();
    }
  }
  if (currentSelectedTab == null || currentSelectedTab.getCategory() != descriptor.getCategory() || selectedPrimary) {
    currentSelectedTab=descriptor;
    createDynamicComposite(tabFactory.getTabComposite(),(Element)descriptor.getData(),descriptor.getCategory());
    selectedPrimary=false;
  }
}","public void selectionChanged(SelectionChangedEvent event){
  IStructuredSelection selection=(IStructuredSelection)event.getSelection();
  TalendPropertyTabDescriptor descriptor=(TalendPropertyTabDescriptor)selection.getFirstElement();
  if (descriptor == null) {
    return;
  }
  if (currentSelectedTab != null && (currentSelectedTab.getCategory() != descriptor.getCategory())) {
    for (    Control curControl : tabFactory.getTabComposite().getChildren()) {
      curControl.dispose();
    }
  }
  if (currentSelectedTab == null || currentSelectedTab.getCategory() != descriptor.getCategory() || selectedPrimary) {
    currentSelectedTab=descriptor;
    createDynamicComposite(tabFactory.getTabComposite(),(Element)descriptor.getData(),descriptor.getCategory());
    selectedPrimary=false;
  }
  refresh();
}",0.9919204474829086
125144,"@Override public void createPartControl(Composite parent){
  this.parent=parent;
  parent.setLayout(new FillLayout());
  sash=new SashForm(parent,SWT.HORIZONTAL | SWT.SMOOTH);
  sash.setLayoutData(new GridData(GridData.FILL_BOTH));
  sash.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=new GridLayout();
  sash.setLayout(layout);
  createLeftContents(sash);
  createRightContents(sash);
  tabFactory.getTabComposite().layout();
  tabFactory.getTabbedPropertyComposite().getComposite().dispose();
  tabFactory.getTabbedPropertyComposite().pack();
  tabFactory.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      TalendPropertyTabDescriptor descriptor=(TalendPropertyTabDescriptor)selection.getFirstElement();
      if (descriptor == null) {
        return;
      }
      if (currentSelectedTab != null && (currentSelectedTab.getCategory() != descriptor.getCategory())) {
        for (        Control curControl : tabFactory.getTabComposite().getChildren()) {
          curControl.dispose();
        }
      }
      if (currentSelectedTab == null || currentSelectedTab.getCategory() != descriptor.getCategory() || selectedPrimary) {
        currentSelectedTab=descriptor;
        createDynamicComposite(tabFactory.getTabComposite(),(Element)descriptor.getData(),descriptor.getCategory());
        selectedPrimary=false;
      }
    }
  }
);
  setElement();
}","@Override public void createPartControl(Composite parent){
  this.parent=parent;
  parent.setLayout(new FillLayout());
  sash=new SashForm(parent,SWT.HORIZONTAL | SWT.SMOOTH);
  sash.setLayoutData(new GridData(GridData.FILL_BOTH));
  sash.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  GridLayout layout=new GridLayout();
  sash.setLayout(layout);
  createLeftContents(sash);
  createRightContents(sash);
  tabFactory.getTabComposite().layout();
  tabFactory.getTabbedPropertyComposite().getComposite().dispose();
  tabFactory.getTabbedPropertyComposite().pack();
  tabFactory.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      IStructuredSelection selection=(IStructuredSelection)event.getSelection();
      TalendPropertyTabDescriptor descriptor=(TalendPropertyTabDescriptor)selection.getFirstElement();
      if (descriptor == null) {
        return;
      }
      if (currentSelectedTab != null && (currentSelectedTab.getCategory() != descriptor.getCategory())) {
        for (        Control curControl : tabFactory.getTabComposite().getChildren()) {
          curControl.dispose();
        }
      }
      if (currentSelectedTab == null || currentSelectedTab.getCategory() != descriptor.getCategory() || selectedPrimary) {
        currentSelectedTab=descriptor;
        createDynamicComposite(tabFactory.getTabComposite(),(Element)descriptor.getData(),descriptor.getCategory());
        selectedPrimary=false;
      }
      refresh();
    }
  }
);
  setElement();
}",0.9945808096907872
125145,"public void fillConnection(DatabaseConnection connection){
  Catalog defaultCatalog=CatalogHelper.createCatalog(getDefaultCatalogName());
  ConnectionHelper.addPackage(defaultCatalog,connection);
}","public void fillConnection(DatabaseConnection connection){
  Catalog defaultCatalog=CatalogHelper.createCatalog(getDefaultCatalogName());
  ConnectionHelper.addPackage(defaultCatalog,connection);
  connection.setSID(getDefaultCatalogName());
}",0.8954545454545455
125146,"public double branchLength(){
  Double bl=0.;
  if ((f1 / (n + 2 * lambda)) > 1. / 3) {
    bl=-Math.log(1.5 * (1.0 - (f1 / (n + 2 * lambda))));
  }
 else {
    bl=0.0;
  }
  return bl;
}","public double branchLength(){
  return Posterior.branchLength(f1,n,lambda);
}",0.3712121212121212
125147,"private STITreeCluster[] getSisterRemaining(STINode node){
  STITreeCluster[] sisterRemaining={null,null};
  Iterator<STINode> pcit=node.getParent().getChildren().iterator();
  STINode pc=pcit.next();
  if (pc == node)   pc=pcit.next();
  sisterRemaining[0]=(STITreeCluster)pc.getData();
  if (node.getParent().isRoot() && node.getParent().getChildCount() == 3) {
    pc=pcit.next();
    if (pc == node)     pc=pcit.next();
    sisterRemaining[1]=(STITreeCluster)pc.getData();
    ;
  }
 else   if (node.getParent().isRoot() && node.getParent().getChildCount() == 2) {
    if (pc.getChildCount() == 2) {
      Iterator<STINode> nieceIt=pc.getChildren().iterator();
      sisterRemaining[0]=(STITreeCluster)nieceIt.next().getData();
      sisterRemaining[1]=(STITreeCluster)nieceIt.next().getData();
    }
  }
 else {
    sisterRemaining[1]=((STITreeCluster)node.getParent().getData()).complementaryCluster();
  }
  return sisterRemaining;
}","private STITreeCluster[] getSisterRemaining(STINode node){
  STITreeCluster[] sisterRemaining={null,null};
  Iterator<STINode> siblingsIt=node.getParent().getChildren().iterator();
  STINode sibling=siblingsIt.next();
  if (sibling == node)   sibling=siblingsIt.next();
  sisterRemaining[0]=(STITreeCluster)sibling.getData();
  if (node.getParent().isRoot() && node.getParent().getChildCount() == 3) {
    sibling=siblingsIt.next();
    if (sibling == node)     sibling=siblingsIt.next();
    sisterRemaining[1]=(STITreeCluster)sibling.getData();
    ;
  }
 else   if (node.getParent().isRoot() && node.getParent().getChildCount() == 2) {
    if (sibling.getChildCount() == 2) {
      Iterator<STINode> nieceIt=sibling.getChildren().iterator();
      sisterRemaining[0]=(STITreeCluster)nieceIt.next().getData();
      sisterRemaining[1]=(STITreeCluster)nieceIt.next().getData();
    }
 else {
      System.err.println(""String_Node_Str"");
    }
  }
 else {
    sisterRemaining[1]=((STITreeCluster)node.getParent().getData()).complementaryCluster();
  }
  return sisterRemaining;
}",0.8112927191679049
125148,"private boolean skipNode(TNode node){
  return node.isLeaf() || node.isRoot() || node.getChildCount() > 2 || (node.getParent().getChildCount() > 3) || (node.getParent().getChildCount() > 2 && !node.getParent().isRoot()) || ((node.getParent().isRoot() && node.getParent().getChildCount() == 2));
}","private boolean skipNode(TNode node){
  TNode parent=node.getParent();
  int parentChildCount=parent.getChildCount();
  return node.isLeaf() || node.isRoot() || node.getChildCount() > 2 || (parentChildCount > 3) || (parentChildCount > 2 && !parent.isRoot()) || ((parent.isRoot() && parent.getChildCount() == 2 && node.getSiblings().get(0).getChildCount() != 2));
}",0.503030303030303
125149,"/** 
 * Annotates the species tree branches with support, branch length, etc. 
 * @param st
 * @return
 */
private double scoreBranches(Tree st){
  double ret=0;
  weightCalculator=new BipartitionWeightCalculator(this,((WQWeightCalculator)this.weightCalculator).geneTreesAsInts());
  BipartitionWeightCalculator weightCalculator2=(BipartitionWeightCalculator)weightCalculator;
  WQDataCollection wqDataCollection=(WQDataCollection)this.dataCollection;
  BufferedWriter freqWriter=null;
  BufferedWriter Rscript=null;
  if (this.getBranchAnnotation() == 16) {
    String freqOutputPath=this.options.getFreqOutputPath();
    try {
      Rscript=new BufferedWriter(new FileWriter(freqOutputPath + File.separator + ""String_Node_Str""));
      freqWriter=new BufferedWriter(new FileWriter(freqOutputPath + File.separator + ""String_Node_Str""));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  Stack<STITreeCluster> stack=new Stack<STITreeCluster>();
  int numNodes=0;
  for (  TNode n : st.postTraverse()) {
    STINode node=(STINode)n;
    if (node.isLeaf()) {
      String nodeName=node.getName();
      STITreeCluster cluster=GlobalMaps.taxonIdentifier.newCluster();
      Integer taxonID=GlobalMaps.taxonIdentifier.taxonId(nodeName);
      cluster.addLeaf(taxonID);
      stack.add(cluster);
      node.setData(cluster);
    }
 else {
      ArrayList<STITreeCluster> childbslist=new ArrayList<STITreeCluster>();
      BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
      for (      TNode child : n.getChildren()) {
        STITreeCluster pop=stack.pop();
        childbslist.add(pop);
        bs.or(pop.getBitSet());
      }
      STITreeCluster cluster=GlobalMaps.taxonIdentifier.newCluster();
      cluster.setCluster((BitSet)bs.clone());
      stack.add(cluster);
      node.setData(cluster);
      if (options.getBranchannotation() == 16) {
        String ndName=""String_Node_Str"" + Integer.toString(numNodes);
        numNodes+=1;
        node.setName(ndName);
      }
    }
  }
  stack=new Stack<STITreeCluster>();
  Queue<NodeData> nodeDataList=new LinkedList<NodeData>();
  for (  TNode n : st.postTraverse()) {
    STINode node=(STINode)n;
    if (node.isLeaf()) {
      stack.push((STITreeCluster)node.getData());
    }
 else {
      NodeData nd=null;
      STITreeCluster cluster=(STITreeCluster)node.getData();
      STITreeCluster c1=null, c2=null;
      long cs=cluster.getClusterSize() + 0l;
      for (int i=0; i < node.getChildCount(); i++) {
        if (c1 == null)         c1=stack.pop();
 else         if (c2 == null)         c2=stack.pop();
 else         stack.pop();
      }
      stack.push(cluster);
      if (cs > 1 && GlobalMaps.taxonNameMap.getSpeciesIdMapper().isSingleSP(cluster.getBitSet())) {
        STITreeCluster[] sisterRemaining=getSisterRemaining(node);
        STITreeCluster sister=sisterRemaining[0];
        STITreeCluster remaining=sisterRemaining[1];
        nd=new NodeData();
        nodeDataList.add(nd);
        nd.mainfreq=0d;
        nd.alt1freqs=0d;
        nd.alt2freqs=0d;
        nd.effn=0;
        BitSet bitSet=cluster.getBitSet();
        for (int j=bitSet.nextSetBit(0); j >= 0; j=bitSet.nextSetBit(j + 1)) {
          c1=new STITreeCluster(cluster);
          c1.getBitSet().clear(j);
          c2=GlobalMaps.taxonIdentifier.newCluster();
          c2.getBitSet().set(j);
          Quadrapartition[] threequads=new Quadrapartition[]{weightCalculator2.new Quadrapartition(c1,c2,sister,remaining),weightCalculator2.new Quadrapartition(c1,sister,c2,remaining),weightCalculator2.new Quadrapartition(c1,remaining,c2,sister)};
          Results s=weightCalculator2.getWeight(threequads);
          nd.mainfreq+=s.qs[0];
          nd.alt1freqs+=s.qs[1];
          nd.alt2freqs+=s.qs[2];
          nd.effn+=s.effn;
        }
        nd.mainfreq/=cs;
        nd.alt1freqs/=cs;
        nd.alt2freqs/=cs;
        nd.effn/=(int)cs;
        nd.quartcount=(cs * (cs - 1) / 2) * (sister.getClusterSize() + 0l) * (remaining.getClusterSize() + 0l);
      }
 else       if (!skipNode(node)) {
        STITreeCluster[] sisterRemaining=getSisterRemaining(node);
        STITreeCluster sister=sisterRemaining[0];
        STITreeCluster remaining=sisterRemaining[1];
        Quadrapartition[] threequads=new Quadrapartition[]{weightCalculator2.new Quadrapartition(c1,c2,sister,remaining),weightCalculator2.new Quadrapartition(c1,sister,c2,remaining),weightCalculator2.new Quadrapartition(c1,remaining,c2,sister)};
        Results s=weightCalculator2.getWeight(threequads);
        nd=new NodeData();
        nodeDataList.add(nd);
        nd.mainfreq=s.qs[0];
        nd.alt1freqs=s.qs[1];
        nd.alt2freqs=s.qs[2];
        nd.effn=s.effn;
        nd.quartcount=(c1.getClusterSize() + 0l) * (c2.getClusterSize() + 0l) * (sister.getClusterSize() + 0l)* (remaining.getClusterSize() + 0l);
        if (this.getBranchAnnotation() == 7) {
          if (remaining.getClusterSize() != 0 && sister.getClusterSize() != 0 && c2.getClusterSize() != 0 && c1.getClusterSize() != 0) {
            System.err.print(c1.toString() + c2.toString() + ""String_Node_Str""+ sister.toString()+ remaining.toString()+ ""String_Node_Str"");
          }
        }
        if (this.getBranchAnnotation() == 6 || this.getBranchAnnotation() == 16) {
          STITreeCluster c1plussis=GlobalMaps.taxonIdentifier.newCluster();
          c1plussis.setCluster((BitSet)c1.getBitSet().clone());
          c1plussis.getBitSet().or(sister.getBitSet());
          STITreeCluster c1plusrem=GlobalMaps.taxonIdentifier.newCluster();
          c1plusrem.setCluster((BitSet)c1.getBitSet().clone());
          c1plusrem.getBitSet().or(remaining.getBitSet());
          STBipartition bmain=new STBipartition(cluster,cluster.complementaryCluster());
          STBipartition b2=new STBipartition(c1plussis,c1plussis.complementaryCluster());
          STBipartition b3=new STBipartition(c1plusrem,c1plusrem.complementaryCluster());
          STBipartition[] biparts=new STBipartition[]{bmain,b2,b3};
          nd.quads=threequads;
          nd.bipartitions=biparts;
        }
      }
      if (nd != null && nd.effn < 20) {
        System.err.println(""String_Node_Str"" + ""String_Node_Str"" + nd.effn + ""String_Node_Str""+ GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTClusterForGeneCluster(cluster));
      }
    }
  }
  NodeData nd=null;
  for (  TNode n : st.postTraverse()) {
    STINode node=(STINode)n;
    if (!node.isLeaf()) {
      nd=nodeDataList.poll();
    }
    if (nd == null) {
      node.setData(null);
      continue;
    }
    Double f1=nd.mainfreq;
    Double f2=nd.alt1freqs;
    Double f3=nd.alt2freqs;
    Long quarc=nd.quartcount;
    Double effni=nd.effn + 0.0;
    if (Math.abs((f1 + f2 + f3) - effni) > 0.01) {
      effni=f1 + f2 + f3;
    }
    Posterior post=new Posterior(f1,f2,f3,(double)effni,options.getLambda());
    double bl=post.branchLength();
    node.setParentDistance(bl);
    if (this.getBranchAnnotation() == 0) {
      node.setData(null);
    }
 else     if (this.getBranchAnnotation() == 1) {
      node.setData(df.format((f1 + .0) / effni * 100));
    }
 else     if (this.getBranchAnnotation() == 10) {
      df.setMaximumFractionDigits(5);
      double pval=post.getPvalue();
      if (pval < 0) {
        System.err.println(""String_Node_Str"" + ""String_Node_Str"" + effni + ""String_Node_Str""+ node);
        node.setData(""String_Node_Str"");
      }
 else {
        node.setData(df.format(pval));
      }
    }
 else {
      double postQ1=post.getPost();
      ret+=Math.log(postQ1);
      if (this.getBranchAnnotation() == 3 || this.getBranchAnnotation() == 12) {
        node.setData(df.format(postQ1));
      }
 else       if (this.getBranchAnnotation() % 2 == 0) {
        post=new Posterior(f2,f1,f3,(double)effni,options.getLambda());
        double postQ2=post.getPost();
        post=new Posterior(f3,f1,f2,(double)effni,options.getLambda());
        double postQ3=post.getPost();
        if (this.getBranchAnnotation() == 2)         node.setData(""String_Node_Str"" + (f1) / effni + ""String_Node_Str"" + (f2) / effni + ""String_Node_Str"" + (f3) / effni + ""String_Node_Str"" + f1 + ""String_Node_Str"" + f2 + ""String_Node_Str"" + f3 + ""String_Node_Str"" + postQ1 + ""String_Node_Str"" + postQ2 + ""String_Node_Str"" + postQ3 + ""String_Node_Str"" + quarc + ""String_Node_Str"" + effni + ""String_Node_Str"");
 else         if (this.getBranchAnnotation() == 4) {
          node.setData(""String_Node_Str"" + df.format(postQ1) + ""String_Node_Str""+ df.format(postQ2)+ ""String_Node_Str""+ df.format(postQ3)+ ""String_Node_Str"");
        }
 else         if (this.getBranchAnnotation() == 6) {
          node.setData(df.format(postQ1));
          Quadrapartition[] threequads=nd.quads;
          STBipartition[] biparts=nd.bipartitions;
          System.err.println(threequads[0] + ""String_Node_Str"" + biparts[0].toString2()+ ""String_Node_Str""+ postQ1+ ""String_Node_Str""+ f1+ ""String_Node_Str""+ f2+ ""String_Node_Str""+ f3+ ""String_Node_Str""+ effni+ ""String_Node_Str"");
          System.err.println(threequads[1] + ""String_Node_Str"" + biparts[1].toString2()+ ""String_Node_Str""+ postQ2+ ""String_Node_Str""+ f2+ ""String_Node_Str""+ f1+ ""String_Node_Str""+ f3+ ""String_Node_Str""+ effni+ ""String_Node_Str"");
          System.err.println(threequads[2] + ""String_Node_Str"" + biparts[2].toString2()+ ""String_Node_Str""+ postQ3+ ""String_Node_Str""+ f3+ ""String_Node_Str""+ f1+ ""String_Node_Str""+ f2+ ""String_Node_Str""+ effni+ ""String_Node_Str"");
        }
 else         if (this.getBranchAnnotation() == 8) {
          node.setData(""String_Node_Str"" + df.format((f1) / effni) + ""String_Node_Str""+ df.format((f2) / effni)+ ""String_Node_Str""+ df.format((f3) / effni)+ ""String_Node_Str"");
        }
 else         if (this.getBranchAnnotation() == 16) {
          node.setData(""String_Node_Str"" + df.format(postQ1) + ""String_Node_Str""+ df.format(postQ2)+ ""String_Node_Str""+ df.format(postQ3)+ ""String_Node_Str"");
          Quadrapartition[] threequads=nd.quads;
          String lineTmp=node.getName() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ threequads[0].toString2()+ ""String_Node_Str""+ Double.toString(postQ1)+ ""String_Node_Str""+ Double.toString(f1)+ ""String_Node_Str""+ Double.toString(effni);
          try {
            freqWriter.write(lineTmp + ""String_Node_Str"");
            lineTmp=node.getName() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ threequads[1].toString2()+ ""String_Node_Str""+ Double.toString(postQ2)+ ""String_Node_Str""+ Double.toString(f2)+ ""String_Node_Str""+ Double.toString(effni);
            freqWriter.write(lineTmp + ""String_Node_Str"");
            lineTmp=node.getName() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ threequads[2].toString2()+ ""String_Node_Str""+ Double.toString(postQ3)+ ""String_Node_Str""+ Double.toString(f3)+ ""String_Node_Str""+ Double.toString(effni);
            freqWriter.write(lineTmp + ""String_Node_Str"");
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
  if (!nodeDataList.isEmpty())   throw new RuntimeException(""String_Node_Str"" + nodeDataList);
  if (this.getBranchAnnotation() == 16) {
    try {
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"" + ""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.close();
      freqWriter.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  System.err.println(st);
  return ret;
}","/** 
 * Annotates the species tree branches with support, branch length, etc. 
 * @param st
 * @return
 */
private double scoreBranches(Tree st){
  double ret=0;
  weightCalculator=new BipartitionWeightCalculator(this,((WQWeightCalculator)this.weightCalculator).geneTreesAsInts());
  BipartitionWeightCalculator weightCalculator2=(BipartitionWeightCalculator)weightCalculator;
  WQDataCollection wqDataCollection=(WQDataCollection)this.dataCollection;
  BufferedWriter freqWriter=null;
  BufferedWriter Rscript=null;
  if (this.getBranchAnnotation() == 16) {
    String freqOutputPath=this.options.getFreqOutputPath();
    try {
      Rscript=new BufferedWriter(new FileWriter(freqOutputPath + File.separator + ""String_Node_Str""));
      freqWriter=new BufferedWriter(new FileWriter(freqOutputPath + File.separator + ""String_Node_Str""));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  Stack<STITreeCluster> stack=new Stack<STITreeCluster>();
  int numNodes=0;
  for (  TNode n : st.postTraverse()) {
    STINode node=(STINode)n;
    if (node.isLeaf()) {
      String nodeName=node.getName();
      STITreeCluster cluster=GlobalMaps.taxonIdentifier.newCluster();
      Integer taxonID=GlobalMaps.taxonIdentifier.taxonId(nodeName);
      cluster.addLeaf(taxonID);
      stack.add(cluster);
      node.setData(cluster);
    }
 else {
      ArrayList<STITreeCluster> childbslist=new ArrayList<STITreeCluster>();
      BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
      for (      TNode child : n.getChildren()) {
        STITreeCluster pop=stack.pop();
        childbslist.add(pop);
        bs.or(pop.getBitSet());
      }
      STITreeCluster cluster=GlobalMaps.taxonIdentifier.newCluster();
      cluster.setCluster((BitSet)bs.clone());
      stack.add(cluster);
      node.setData(cluster);
      if (options.getBranchannotation() == 16) {
        String ndName=""String_Node_Str"" + Integer.toString(numNodes);
        numNodes+=1;
        node.setName(ndName);
      }
    }
  }
  stack=new Stack<STITreeCluster>();
  Queue<NodeData> nodeDataList=new LinkedList<NodeData>();
  for (  TNode n : st.postTraverse()) {
    STINode node=(STINode)n;
    if (node.isLeaf()) {
      stack.push((STITreeCluster)node.getData());
    }
 else {
      NodeData nd=null;
      STITreeCluster cluster=(STITreeCluster)node.getData();
      STITreeCluster c1=null, c2=null;
      long cs=cluster.getClusterSize() + 0l;
      for (int i=0; i < node.getChildCount(); i++) {
        if (c1 == null)         c1=stack.pop();
 else         if (c2 == null)         c2=stack.pop();
 else         stack.pop();
      }
      stack.push(cluster);
      if (cs > 1 && GlobalMaps.taxonNameMap.getSpeciesIdMapper().isSingleSP(cluster.getBitSet())) {
        STITreeCluster[] sisterRemaining=getSisterRemaining(node);
        STITreeCluster sister=sisterRemaining[0];
        STITreeCluster remaining=sisterRemaining[1];
        nd=new NodeData();
        nodeDataList.add(nd);
        nd.mainfreq=0d;
        nd.alt1freqs=0d;
        nd.alt2freqs=0d;
        nd.effn=0;
        BitSet bitSet=cluster.getBitSet();
        for (int j=bitSet.nextSetBit(0); j >= 0; j=bitSet.nextSetBit(j + 1)) {
          c1=new STITreeCluster(cluster);
          c1.getBitSet().clear(j);
          c2=GlobalMaps.taxonIdentifier.newCluster();
          c2.getBitSet().set(j);
          Quadrapartition[] threequads=new Quadrapartition[]{weightCalculator2.new Quadrapartition(c1,c2,sister,remaining),weightCalculator2.new Quadrapartition(c1,sister,c2,remaining),weightCalculator2.new Quadrapartition(c1,remaining,c2,sister)};
          Results s=weightCalculator2.getWeight(threequads);
          nd.mainfreq+=s.qs[0];
          nd.alt1freqs+=s.qs[1];
          nd.alt2freqs+=s.qs[2];
          nd.effn+=s.effn;
        }
        nd.mainfreq/=cs;
        nd.alt1freqs/=cs;
        nd.alt2freqs/=cs;
        nd.effn/=(int)cs;
        nd.quartcount=(cs * (cs - 1) / 2) * (sister.getClusterSize() + 0l) * (remaining.getClusterSize() + 0l);
      }
 else       if (!skipNode(node)) {
        STITreeCluster[] sisterRemaining=getSisterRemaining(node);
        STITreeCluster sister=sisterRemaining[0];
        STITreeCluster remaining=sisterRemaining[1];
        Quadrapartition[] threequads=new Quadrapartition[]{weightCalculator2.new Quadrapartition(c1,c2,sister,remaining),weightCalculator2.new Quadrapartition(c1,sister,c2,remaining),weightCalculator2.new Quadrapartition(c1,remaining,c2,sister)};
        Results s=weightCalculator2.getWeight(threequads);
        nd=new NodeData();
        nodeDataList.add(nd);
        nd.mainfreq=s.qs[0];
        nd.alt1freqs=s.qs[1];
        nd.alt2freqs=s.qs[2];
        nd.effn=s.effn;
        nd.quartcount=(c1.getClusterSize() + 0l) * (c2.getClusterSize() + 0l) * (sister.getClusterSize() + 0l)* (remaining.getClusterSize() + 0l);
        if (this.getBranchAnnotation() == 7) {
          if (remaining.getClusterSize() != 0 && sister.getClusterSize() != 0 && c2.getClusterSize() != 0 && c1.getClusterSize() != 0) {
            System.err.print(c1.toString() + c2.toString() + ""String_Node_Str""+ sister.toString()+ remaining.toString()+ ""String_Node_Str"");
          }
        }
        if (this.getBranchAnnotation() == 6 || this.getBranchAnnotation() == 16) {
          STITreeCluster c1plussis=GlobalMaps.taxonIdentifier.newCluster();
          c1plussis.setCluster((BitSet)c1.getBitSet().clone());
          c1plussis.getBitSet().or(sister.getBitSet());
          STITreeCluster c1plusrem=GlobalMaps.taxonIdentifier.newCluster();
          c1plusrem.setCluster((BitSet)c1.getBitSet().clone());
          c1plusrem.getBitSet().or(remaining.getBitSet());
          STBipartition bmain=new STBipartition(cluster,cluster.complementaryCluster());
          STBipartition b2=new STBipartition(c1plussis,c1plussis.complementaryCluster());
          STBipartition b3=new STBipartition(c1plusrem,c1plusrem.complementaryCluster());
          STBipartition[] biparts=new STBipartition[]{bmain,b2,b3};
          nd.quads=threequads;
          nd.bipartitions=biparts;
        }
      }
      if (nd != null && nd.effn < 20) {
        System.err.println(""String_Node_Str"" + ""String_Node_Str"" + nd.effn + ""String_Node_Str""+ GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTClusterForGeneCluster(cluster));
      }
    }
  }
  NodeData nd=null;
  for (  TNode n : st.postTraverse()) {
    STINode node=(STINode)n;
    if (node.isLeaf()) {
      node.setData(null);
      continue;
    }
    nd=nodeDataList.poll();
    if (nd == null) {
      node.setData(null);
      continue;
    }
    Double f1=nd.mainfreq;
    Double f2=nd.alt1freqs;
    Double f3=nd.alt2freqs;
    Long quarc=nd.quartcount;
    Double effni=nd.effn + 0.0;
    if (Math.abs((f1 + f2 + f3) - effni) > 0.01) {
      effni=f1 + f2 + f3;
    }
    Posterior post=new Posterior(f1,f2,f3,(double)effni,options.getLambda());
    double bl=post.branchLength();
    node.setParentDistance(bl);
    if (this.getBranchAnnotation() == 0) {
      node.setData(null);
    }
 else     if (this.getBranchAnnotation() == 1) {
      node.setData(df.format((f1 + .0) / effni * 100));
    }
 else     if (this.getBranchAnnotation() == 10) {
      df.setMaximumFractionDigits(5);
      double pval=post.getPvalue();
      if (pval < 0) {
        System.err.println(""String_Node_Str"" + ""String_Node_Str"" + effni + ""String_Node_Str""+ node);
        node.setData(""String_Node_Str"");
      }
 else {
        node.setData(df.format(pval));
      }
    }
 else {
      double postQ1=post.getPost();
      ret+=Math.log(postQ1);
      if (this.getBranchAnnotation() == 3 || this.getBranchAnnotation() == 12) {
        node.setData(df.format(postQ1));
      }
 else       if (this.getBranchAnnotation() % 2 == 0) {
        post=new Posterior(f2,f1,f3,(double)effni,options.getLambda());
        double postQ2=post.getPost();
        post=new Posterior(f3,f1,f2,(double)effni,options.getLambda());
        double postQ3=post.getPost();
        if (this.getBranchAnnotation() == 2)         node.setData(""String_Node_Str"" + (f1) / effni + ""String_Node_Str"" + (f2) / effni + ""String_Node_Str"" + (f3) / effni + ""String_Node_Str"" + f1 + ""String_Node_Str"" + f2 + ""String_Node_Str"" + f3 + ""String_Node_Str"" + postQ1 + ""String_Node_Str"" + postQ2 + ""String_Node_Str"" + postQ3 + ""String_Node_Str"" + quarc + ""String_Node_Str"" + effni + ""String_Node_Str"");
 else         if (this.getBranchAnnotation() == 4) {
          node.setData(""String_Node_Str"" + df.format(postQ1) + ""String_Node_Str""+ df.format(postQ2)+ ""String_Node_Str""+ df.format(postQ3)+ ""String_Node_Str"");
        }
 else         if (this.getBranchAnnotation() == 6) {
          node.setData(df.format(postQ1));
          Quadrapartition[] threequads=nd.quads;
          STBipartition[] biparts=nd.bipartitions;
          System.err.println(threequads[0] + ""String_Node_Str"" + biparts[0].toString2()+ ""String_Node_Str""+ postQ1+ ""String_Node_Str""+ f1+ ""String_Node_Str""+ f2+ ""String_Node_Str""+ f3+ ""String_Node_Str""+ effni+ ""String_Node_Str"");
          System.err.println(threequads[1] + ""String_Node_Str"" + biparts[1].toString2()+ ""String_Node_Str""+ postQ2+ ""String_Node_Str""+ f2+ ""String_Node_Str""+ f1+ ""String_Node_Str""+ f3+ ""String_Node_Str""+ effni+ ""String_Node_Str"");
          System.err.println(threequads[2] + ""String_Node_Str"" + biparts[2].toString2()+ ""String_Node_Str""+ postQ3+ ""String_Node_Str""+ f3+ ""String_Node_Str""+ f1+ ""String_Node_Str""+ f2+ ""String_Node_Str""+ effni+ ""String_Node_Str"");
        }
 else         if (this.getBranchAnnotation() == 8) {
          node.setData(""String_Node_Str"" + df.format((f1) / effni) + ""String_Node_Str""+ df.format((f2) / effni)+ ""String_Node_Str""+ df.format((f3) / effni)+ ""String_Node_Str"");
        }
 else         if (this.getBranchAnnotation() == 16) {
          node.setData(""String_Node_Str"" + df.format(postQ1) + ""String_Node_Str""+ df.format(postQ2)+ ""String_Node_Str""+ df.format(postQ3)+ ""String_Node_Str"");
          Quadrapartition[] threequads=nd.quads;
          String lineTmp=node.getName() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ threequads[0].toString2()+ ""String_Node_Str""+ Double.toString(postQ1)+ ""String_Node_Str""+ Double.toString(f1)+ ""String_Node_Str""+ Double.toString(effni);
          try {
            freqWriter.write(lineTmp + ""String_Node_Str"");
            lineTmp=node.getName() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ threequads[1].toString2()+ ""String_Node_Str""+ Double.toString(postQ2)+ ""String_Node_Str""+ Double.toString(f2)+ ""String_Node_Str""+ Double.toString(effni);
            freqWriter.write(lineTmp + ""String_Node_Str"");
            lineTmp=node.getName() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ threequads[2].toString2()+ ""String_Node_Str""+ Double.toString(postQ3)+ ""String_Node_Str""+ Double.toString(f3)+ ""String_Node_Str""+ Double.toString(effni);
            freqWriter.write(lineTmp + ""String_Node_Str"");
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
  if (!nodeDataList.isEmpty())   throw new RuntimeException(""String_Node_Str"" + nodeDataList);
  if (this.getBranchAnnotation() == 16) {
    try {
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"" + ""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.write(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      Rscript.write(""String_Node_Str"");
      Rscript.close();
      freqWriter.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  System.err.println(st.toStringWD());
  return ret;
}",0.9967113584619276
125150,"public Long WQWeightByTraversal(Tripartition trip,CondensedTraversalWeightCalculator algorithm){
  long t=System.nanoTime();
  long weight=0;
  long[] sx=new long[3], sxy=new long[3];
  int[] q;
  int[] from, to;
  BitSet[] b=new BitSet[]{trip.cluster1.getBitSet(),trip.cluster2.getBitSet(),trip.cluster3.getBitSet()};
  for (int i=0, i_end=GlobalMaps.taxonIdentifier.taxonCount(); i < i_end; i++) {
    overlap[i][0]=b[0].get(i) ? 1 : 0;
    overlap[i][1]=b[1].get(i) ? 1 : 0;
    overlap[i][2]=b[2].get(i) ? 1 : 0;
  }
  for (int i=GlobalMaps.taxonIdentifier.taxonCount(), i_end=overlap.length; i < i_end; i++) {
    overlap[i][0]=0;
    overlap[i][1]=0;
    overlap[i][2]=0;
  }
  time1+=System.nanoTime() - t;
  for (int i=0, i_end=dependerID.length; i < i_end; i++) {
    from=overlap[dependeeID[i]];
    to=overlap[dependerID[i]];
    if (dependingFactor[i] == 1) {
      from[0]+=to[0];
      from[1]+=to[1];
      from[2]+=to[2];
    }
 else {
      from[0]-=to[0];
      from[1]-=to[1];
      from[2]-=to[2];
    }
  }
  time2+=System.nanoTime() - t;
  for (int i=0, j=0, i_end=partitionMultiplicity.length; i < i_end; i++) {
    if (partitionNumClusters[i] == 3) {
      weight+=F(overlap[partitionClusterID[j]],overlap[partitionClusterID[j + 1]],overlap[partitionClusterID[j + 2]]) * partitionMultiplicity[i];
    }
 else {
      long tempWeight=0;
      sx[0]=0;
      sx[1]=0;
      sx[2]=0;
      sxy[0]=0;
      sxy[1]=0;
      sxy[2]=0;
      for (int p=j, p_end=j + partitionNumClusters[i]; p < p_end; p++) {
        q=overlap[partitionClusterID[p]];
        sx[0]+=q[0];
        sx[1]+=q[1];
        sx[2]+=q[2];
        sxy[0]+=q[1] * q[2];
        sxy[1]+=q[2] * q[0];
        sxy[2]+=q[0] * q[1];
      }
      for (int p=j, p_end=j + partitionNumClusters[i]; p < p_end; p++) {
        q=overlap[partitionClusterID[p]];
        tempWeight+=((sx[1] - q[1]) * (sx[2] - q[2]) - sxy[0] + q[1] * q[2]) * q[0] * (q[0] - 1L) + ((sx[2] - q[2]) * (sx[0] - q[0]) - sxy[1] + q[2] * q[0]) * q[1] * (q[1] - 1L) + ((sx[0] - q[0]) * (sx[1] - q[1]) - sxy[2] + q[0] * q[1]) * q[2] * (q[2] - 1L);
      }
      weight+=tempWeight * partitionMultiplicity[i];
    }
    j+=partitionNumClusters[i];
  }
  time+=System.nanoTime() - t;
  return weight;
}","public Long WQWeightByTraversal(Tripartition trip,CondensedTraversalWeightCalculator algorithm){
  long t=System.nanoTime();
  long weight=0;
  long[] sx=new long[3], sxy=new long[3];
  int[] q;
  int[] from, to;
  BitSet[] b=new BitSet[]{trip.cluster1.getBitSet(),trip.cluster2.getBitSet(),trip.cluster3.getBitSet()};
  for (int i=0, i_end=GlobalMaps.taxonIdentifier.taxonCount(); i < i_end; i++) {
    overlap[i][0]=b[0].get(i) ? 1 : 0;
    overlap[i][1]=b[1].get(i) ? 1 : 0;
    overlap[i][2]=b[2].get(i) ? 1 : 0;
  }
  for (int i=GlobalMaps.taxonIdentifier.taxonCount(), i_end=overlap.length; i < i_end; i++) {
    overlap[i][0]=0;
    overlap[i][1]=0;
    overlap[i][2]=0;
  }
  time1+=System.nanoTime() - t;
  for (int i=0, i_end=dependerID.length; i < i_end; i++) {
    from=overlap[dependeeID[i]];
    to=overlap[dependerID[i]];
    if (dependingFactor[i] == 1) {
      to[0]+=from[0];
      to[1]+=from[1];
      to[2]+=from[2];
    }
 else {
      to[0]-=from[0];
      to[1]-=from[1];
      to[2]-=from[2];
    }
  }
  time2+=System.nanoTime() - t;
  for (int i=0, j=0, i_end=partitionMultiplicity.length; i < i_end; i++) {
    if (partitionNumClusters[i] == 3) {
      weight+=F(overlap[partitionClusterID[j]],overlap[partitionClusterID[j + 1]],overlap[partitionClusterID[j + 2]]) * partitionMultiplicity[i];
    }
 else {
      long tempWeight=0;
      sx[0]=0;
      sx[1]=0;
      sx[2]=0;
      sxy[0]=0;
      sxy[1]=0;
      sxy[2]=0;
      for (int p=j, p_end=j + partitionNumClusters[i]; p < p_end; p++) {
        q=overlap[partitionClusterID[p]];
        sx[0]+=q[0];
        sx[1]+=q[1];
        sx[2]+=q[2];
        sxy[0]+=q[1] * q[2];
        sxy[1]+=q[2] * q[0];
        sxy[2]+=q[0] * q[1];
      }
      for (int p=j, p_end=j + partitionNumClusters[i]; p < p_end; p++) {
        q=overlap[partitionClusterID[p]];
        tempWeight+=((sx[1] - q[1]) * (sx[2] - q[2]) - sxy[0] + q[1] * q[2]) * q[0] * (q[0] - 1L) + ((sx[2] - q[2]) * (sx[0] - q[0]) - sxy[1] + q[2] * q[0]) * q[1] * (q[1] - 1L) + ((sx[0] - q[0]) * (sx[1] - q[1]) - sxy[2] + q[0] * q[1]) * q[2] * (q[2] - 1L);
      }
      weight+=tempWeight * partitionMultiplicity[i];
    }
    j+=partitionNumClusters[i];
  }
  time+=System.nanoTime() - t;
  return weight;
}",0.9689165186500888
125151,"public Polytree(List<Tree> trees,int polytomyMaxSize,boolean randomResolve){
  this.randomResolveMultiInd=randomResolve;
  for (int i=0; i < GlobalMaps.taxonIdentifier.taxonCount(); i++) {
    STITreeCluster c=new STITreeCluster(GlobalMaps.taxonIdentifier);
    c.getBitSet().set(i);
    clusterID.put(c,i);
  }
  for (  Tree tr : trees) {
    STITreeCluster s=addSubtreeClusters(tr.getRoot(),null);
    addSubtreeClusters(tr.getRoot(),s);
    addSubtreePartitions(tr.getRoot(),s);
  }
  for (  Entry<AbstractPartition,Integer> entry : partitionCount.entrySet()) {
    STITreeCluster[] cs=entry.getKey().getClusters();
    if (cs.length > polytomyMaxSize)     continue;
    aPartitionMultiplicity.add(entry.getValue());
    aPartitionNumClusters.add(cs.length);
    for (    STITreeCluster c : cs) {
      aPartitionClusterID.add(clusterID.get(c));
    }
  }
  mapToInt(dependerID,aDependerID);
  mapToInt(dependeeID,aDependeeID);
  mapToInt(dependingFactor,aDependingFactor);
  aDependerID=null;
  aDependeeID=null;
  aDependingFactor=null;
  mapToInt(partitionMultiplicity,aPartitionMultiplicity);
  mapToInt(partitionNumClusters,aPartitionNumClusters);
  mapToInt(partitionClusterID,aPartitionClusterID);
  aPartitionMultiplicity=null;
  aPartitionNumClusters=null;
  aPartitionClusterID=null;
}","public Polytree(List<Tree> trees,int polytomyMaxSize,boolean randomResolve){
  for (int i=0; i < GlobalMaps.taxonIdentifier.taxonCount(); i++) {
    STITreeCluster c=new STITreeCluster(GlobalMaps.taxonIdentifier);
    c.getBitSet().set(i);
    clusterID.put(c,i);
  }
  for (  Tree tr : trees) {
    STITreeCluster s=addSubtreeClusters(tr.getRoot(),null);
    addSubtreeClusters(tr.getRoot(),s);
    addSubtreePartitions(tr.getRoot(),s);
  }
  for (  Entry<AbstractPartition,Integer> entry : partitionCount.entrySet()) {
    STITreeCluster[] cs=entry.getKey().getClusters();
    if (polytomyMaxSize != 0 && cs.length > polytomyMaxSize)     continue;
    aPartitionMultiplicity.add(entry.getValue());
    aPartitionNumClusters.add(cs.length);
    for (    STITreeCluster c : cs) {
      aPartitionClusterID.add(clusterID.get(c));
    }
  }
  dependerID=mapToInt(aDependerID);
  dependeeID=mapToInt(aDependeeID);
  dependingFactor=mapToInt(aDependingFactor);
  aDependerID=null;
  aDependeeID=null;
  aDependingFactor=null;
  partitionMultiplicity=mapToInt(aPartitionMultiplicity);
  partitionNumClusters=mapToInt(aPartitionNumClusters);
  partitionClusterID=mapToInt(aPartitionClusterID);
  aPartitionMultiplicity=null;
  aPartitionNumClusters=null;
  aPartitionClusterID=null;
}",0.8633540372670807
125152,"private void mapToInt(int[] ret,List<Integer> list){
  ret=new int[list.size()];
  for (int i=0; i < ret.length; i++)   ret[i]=list.get(i);
}","private int[] mapToInt(List<Integer> list){
  int[] ret=new int[list.size()];
  for (int i=0; i < ret.length; i++)   ret[i]=list.get(i);
  return ret;
}",0.8737201365187713
125153,"public Long WQWeightByTraversal(Tripartition trip,CondensedTraversalWeightCalculator algorithm){
  int[][] overlap=new int[clusterID.size()][3];
  long weight=0;
  for (int i=0; i < GlobalMaps.taxonIdentifier.taxonCount(); i++) {
    overlap[i][0]=trip.cluster1.getBitSet().get(i) ? 1 : 0;
    overlap[i][1]=trip.cluster2.getBitSet().get(i) ? 1 : 0;
    overlap[i][2]=trip.cluster3.getBitSet().get(i) ? 1 : 0;
  }
  for (int i=0; i < dependerID.length; i++) {
    overlap[dependerID[i]][0]+=overlap[dependeeID[i]][0] * dependingFactor[i];
    overlap[dependerID[i]][1]+=overlap[dependeeID[i]][1] * dependingFactor[i];
    overlap[dependerID[i]][2]+=overlap[dependeeID[i]][2] * dependingFactor[i];
  }
  for (int i=0, j=0; i < partitionMultiplicity.length; i++) {
    if (partitionNumClusters[i] == 3) {
      weight+=algorithm.F(overlap[partitionClusterID[j]],overlap[partitionClusterID[j + 1]],overlap[partitionClusterID[j + 2]]) * partitionMultiplicity[i];
    }
 else {
      for (int p=j; p < j + partitionNumClusters[i]; p++) {
        for (int q=p + 1; q < j + partitionNumClusters[i]; q++) {
          for (int r=p + 1; r < j + partitionNumClusters[i]; r++) {
            weight+=algorithm.F(overlap[partitionClusterID[p]],overlap[partitionClusterID[q]],overlap[partitionClusterID[r]]) * partitionMultiplicity[i];
          }
        }
      }
    }
    j+=partitionNumClusters[i];
  }
  return weight;
}","public Long WQWeightByTraversal(Tripartition trip,CondensedTraversalWeightCalculator algorithm){
  int[][] overlap=new int[clusterID.size()][3];
  long weight=0;
  long[] sx=new long[3], sxy=new long[3];
  int[] q;
  for (int i=0; i < GlobalMaps.taxonIdentifier.taxonCount(); i++) {
    overlap[i][0]=trip.cluster1.getBitSet().get(i) ? 1 : 0;
    overlap[i][1]=trip.cluster2.getBitSet().get(i) ? 1 : 0;
    overlap[i][2]=trip.cluster3.getBitSet().get(i) ? 1 : 0;
  }
  for (int i=0; i < dependerID.length; i++) {
    overlap[dependerID[i]][0]+=overlap[dependeeID[i]][0] * dependingFactor[i];
    overlap[dependerID[i]][1]+=overlap[dependeeID[i]][1] * dependingFactor[i];
    overlap[dependerID[i]][2]+=overlap[dependeeID[i]][2] * dependingFactor[i];
  }
  for (int i=0, j=0; i < partitionMultiplicity.length; i++) {
    if (partitionNumClusters[i] == 3) {
      weight+=algorithm.F(overlap[partitionClusterID[j]],overlap[partitionClusterID[j + 1]],overlap[partitionClusterID[j + 2]]) * partitionMultiplicity[i];
    }
 else {
      long tempWeight=0;
      sx[0]=0;
      sx[1]=0;
      sx[2]=0;
      sxy[0]=0;
      sxy[1]=0;
      sxy[2]=0;
      for (int p=j; p < j + partitionNumClusters[i]; p++) {
        q=overlap[partitionClusterID[p]];
        sx[0]+=q[0];
        sx[1]+=q[1];
        sx[2]+=q[2];
        sxy[0]+=q[1] * q[2];
        sxy[1]+=q[2] * q[0];
        sxy[2]+=q[0] * q[1];
      }
      for (int p=j; p < j + partitionNumClusters[i]; p++) {
        q=overlap[partitionClusterID[p]];
        tempWeight+=((sx[1] - q[1]) * (sx[2] - q[2]) - sxy[0] + q[1] * q[2]) * q[0] * (q[0] - 1L) + ((sx[2] - q[2]) * (sx[0] - q[0]) - sxy[1] + q[2] * q[0]) * q[1] * (q[1] - 1L) + ((sx[0] - q[0]) * (sx[1] - q[1]) - sxy[2] + q[0] * q[1]) * q[2] * (q[2] - 1L);
      }
      weight+=tempWeight * partitionMultiplicity[i];
    }
    j+=partitionNumClusters[i];
  }
  return weight;
}",0.6854716408856536
125154,"/** 
 * Each algorithm will have its own data structure for gene trees
 * @param wqInference
 */
public void setupGeneTrees(WQInference wqInference,boolean randomResolve){
  this.algorithm.setupGeneTrees(wqInference,randomResolve);
  tmpalgorithm.setupGeneTrees(wqInference,randomResolve);
}","/** 
 * Each algorithm will have its own data structure for gene trees
 * @param wqInference
 */
public void setupGeneTrees(WQInference wqInference,boolean randomResolve){
  this.algorithm.setupGeneTrees(wqInference,false);
  tmpalgorithm.setupGeneTrees(wqInference,false);
}",0.9434628975265018
125155,"public void gtToSt(MutableTree st){
  Stack<Integer> stack=new Stack<Integer>();
  HashSet<Integer> children;
  List<List<TMutableNode>> spNodes=new ArrayList<List<TMutableNode>>();
  for (  TNode node : st.postTraverse()) {
    if (node.isLeaf()) {
      int spID=this.getSpeciesIdForTaxon(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
      stack.push(spID);
      if (this.speciesIdtoTaxonId.get(spID).size() == 1) {
        if (!node.getName().equals(this.getSpeciesName(spID))) {
          ((TMutableNode)node).setName(this.getSpeciesName(spID));
        }
      }
    }
 else {
      children=new HashSet<Integer>();
      List<TMutableNode> childnodes=new ArrayList<TMutableNode>();
      for (      TNode c : node.getChildren()) {
        children.add(stack.pop());
        childnodes.add((TMutableNode)c);
      }
      if (children.size() == 1) {
        Integer spnode=children.iterator().next();
        if (spnode != -1) {
          ((TMutableNode)node).setName(this.getSpeciesName(spnode));
          ((STINode)node).setData(null);
          spNodes.add(childnodes);
          System.err.println(""String_Node_Str"");
        }
        stack.push(spnode);
      }
 else {
        stack.push(-1);
      }
    }
  }
  for (  List<TMutableNode> nodes : spNodes) {
    for (    TNode c : nodes) {
      ((TMutableNode)c).removeNode();
    }
  }
}","public void gtToSt(MutableTree st){
  Stack<Integer> stack=new Stack<Integer>();
  HashSet<Integer> children;
  List<List<TMutableNode>> spNodes=new ArrayList<List<TMutableNode>>();
  for (  TNode node : st.postTraverse()) {
    if (node.isLeaf()) {
      int spID=this.getSpeciesIdForTaxon(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
      stack.push(spID);
      if (this.speciesIdtoTaxonId.get(spID).size() == 1) {
        if (!node.getName().equals(this.getSpeciesName(spID))) {
          ((TMutableNode)node).setName(this.getSpeciesName(spID));
        }
      }
    }
 else {
      children=new HashSet<Integer>();
      List<TMutableNode> childnodes=new ArrayList<TMutableNode>();
      for (      TNode c : node.getChildren()) {
        children.add(stack.pop());
        childnodes.add((TMutableNode)c);
      }
      if (children.size() == 1) {
        Integer spnode=children.iterator().next();
        if (spnode != -1) {
          ((TMutableNode)node).setName(this.getSpeciesName(spnode));
          ((STINode)node).setData(null);
          spNodes.add(childnodes);
        }
        stack.push(spnode);
      }
 else {
        stack.push(-1);
      }
    }
  }
  for (  List<TMutableNode> nodes : spNodes) {
    for (    TNode c : nodes) {
      ((TMutableNode)c).removeNode();
    }
  }
}",0.9816685372240928
125156,"public void gtToSt2(MutableTree st){
  Stack<Integer> stack=new Stack<Integer>();
  HashSet<Integer> children;
  List<List<TMutableNode>> spNodes=new ArrayList<List<TMutableNode>>();
  for (  TNode node : st.postTraverse()) {
    if (node.isLeaf()) {
      int spID=this.getSpeciesIdForTaxon(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
      stack.push(spID);
      if (!node.getName().equals(this.getSpeciesName(spID))) {
        ((TMutableNode)node).setName(this.getSpeciesName(spID));
      }
    }
 else {
      children=new HashSet<Integer>();
      List<TMutableNode> childnodes=new ArrayList<TMutableNode>();
      for (      TNode c : node.getChildren()) {
        children.add(stack.pop());
        childnodes.add((TMutableNode)c);
      }
      if (children.size() == 1) {
        Integer spnode=children.iterator().next();
        if (spnode != -1) {
          ((TMutableNode)node).setName(this.getSpeciesName(spnode));
          ((STINode)node).setData(null);
          spNodes.add(childnodes);
          System.err.println(""String_Node_Str"");
        }
        stack.push(spnode);
      }
 else {
        stack.push(-1);
      }
    }
  }
  for (  List<TMutableNode> nodes : spNodes) {
    for (    TNode c : nodes) {
      ((TMutableNode)c).removeNode();
    }
  }
}","public void gtToSt2(MutableTree gt){
  Stack<Integer> stack=new Stack<Integer>();
  HashSet<Integer> children;
  List<List<TMutableNode>> spNodes=new ArrayList<List<TMutableNode>>();
  for (  TNode node : gt.postTraverse()) {
    if (node.isLeaf()) {
      int spID=this.getSpeciesIdForTaxon(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
      stack.push(spID);
      if (!node.getName().equals(this.getSpeciesName(spID))) {
        ((TMutableNode)node).setName(this.getSpeciesName(spID));
      }
    }
 else {
      children=new HashSet<Integer>();
      List<TMutableNode> childnodes=new ArrayList<TMutableNode>();
      for (      TNode c : node.getChildren()) {
        children.add(stack.pop());
        childnodes.add((TMutableNode)c);
      }
      if (children.size() == 1) {
        Integer spnode=children.iterator().next();
        if (spnode != -1) {
          ((TMutableNode)node).setName(this.getSpeciesName(spnode));
          ((STINode)node).setData(null);
          spNodes.add(childnodes);
          System.err.println(""String_Node_Str"");
        }
        stack.push(spnode);
      }
 else {
        stack.push(-1);
      }
    }
  }
  for (  List<TMutableNode> nodes : spNodes) {
    for (    TNode c : nodes) {
      ((TMutableNode)c).removeNode();
    }
  }
}",0.9984484096198604
125157,"/** 
 * Adds bipartitions to X. When only one individual from each species is sampled, this method adds other individuals from that species to the cluster as well, but note that these additions are done on a copy of c1 not c1 itself.
 */
private boolean addSpeciesBipartitionToX(final STITreeCluster c1){
  boolean added=false;
  STITreeCluster c1GT=GlobalMaps.taxonNameMap.getSpeciesIdMapper().getGeneClusterForSTCluster(c1);
  added|=this.addCompletedSpeciesFixedBipartionToX(c1GT,c1GT.complementaryCluster());
  return added;
}","/** 
 * Adds bipartitions to X. When only one individual from each species is sampled, this method adds other individuals from that species to the cluster as well, but note that these additions are done on a copy of c1 not c1 itself.
 */
private boolean addSpeciesBipartitionToX(final STITreeCluster stCluster){
  boolean added=false;
  STITreeCluster c1GT=GlobalMaps.taxonNameMap.getSpeciesIdMapper().getGeneClusterForSTCluster(stCluster);
  added|=this.addCompletedSpeciesFixedBipartionToX(c1GT,c1GT.complementaryCluster());
  return added;
}",0.9795158286778398
125158,"/** 
 * Main function implementing new heuristics in ASTRAL-II. At this point, we require a subsample with a single individual per species.
 * @param trees : the input trees contracted to the subsample
 * @param sis : the single-individual subsample information
 */
void addExtraBipartitionByHeuristics(Collection<Tree> contractedTrees,TaxonIdentifier tid,SimilarityMatrix sm){
  Collection<Tree> allGreedies;
  this.addExtraBipartitionByDistance();
  System.err.println(""String_Node_Str"");
  for (  Tree tree : contractedTrees) {
    tree.rerootTreeAtEdge(tid.getTaxonName(0));
    Trees.removeBinaryNodes((MutableTree)tree);
  }
  allGreedies=Utils.greedyConsensus(contractedTrees,this.GREEDY_ADDITION_THRESHOLDS,true,1,tid,true);
  int th=0;
  for (  Tree cons : allGreedies) {
    double thresh=this.GREEDY_ADDITION_THRESHOLDS[th];
    System.err.println(""String_Node_Str"" + thresh + ""String_Node_Str"");
    th=(th + 1) % this.GREEDY_ADDITION_THRESHOLDS.length;
    for (    TNode greedyNode : cons.postTraverse()) {
      if (greedyNode.isLeaf()) {
        continue;
      }
      long maxSize=this.GREEDY_ADDITION_MAX_POLYTOMY_MIN + Math.round(Math.sqrt(tid.taxonCount() * this.GREEDY_ADDITION_MAX_POLYTOMY_MULT));
      if (greedyNode.getChildCount() <= 2 || greedyNode.getChildCount() > maxSize) {
        continue;
      }
      BitSet greedyBS=(BitSet)((STITreeCluster)((STINode)greedyNode).getData()).getBitSet();
      BitSet[] childbs=new BitSet[greedyNode.getChildCount() + 1];
      int i=0;
      for (      TNode c : greedyNode.getChildren()) {
        childbs[i]=(BitSet)((STITreeCluster)((STINode)c).getData()).getBitSet();
        ;
        i++;
      }
      BitSet comp=(BitSet)greedyBS.clone();
      comp.flip(0,tid.taxonCount());
      childbs[i]=comp;
      System.err.print(""String_Node_Str"" + greedyNode.getChildCount());
      this.addSubSampledBitSetToX(this.speciesSimilarityMatrix.resolveByUPGMA(Arrays.asList(childbs),true),tid);
      int k=0;
      for (int j=0; j < this.GREEDY_ADDITION_DEFAULT_RUNS + k; j++) {
        boolean quadratic=this.SLOW || (th <= this.GREEDY_DIST_ADDITTION_LAST_THRESHOLD_INDX && j < this.GREEDY_ADDITION_DEFAULT_RUNS);
        if (this.sampleAndResolve(childbs,quadratic,sm,tid)) {
          k+=this.GREEDY_ADDITION_IMPROVEMENT_REWARD;
        }
      }
      System.err.println(""String_Node_Str"" + this.GREEDY_ADDITION_MIN_FREQ + ""String_Node_Str""+ k / this.GREEDY_ADDITION_IMPROVEMENT_REWARD + ""String_Node_Str"" + clusters.getClusterCount());
    }
  }
}","/** 
 * Main function implementing new heuristics in ASTRAL-II. At this point, we require a subsample with a single individual per species.
 * @param trees : the input trees contracted to the subsample
 * @param sis : the single-individual subsample information
 */
void addExtraBipartitionByHeuristics(Collection<Tree> contractedTrees,TaxonIdentifier tid,SimilarityMatrix sm){
  Collection<Tree> allGreedies;
  this.addExtraBipartitionByDistance();
  System.err.println(""String_Node_Str"");
  for (  Tree tree : contractedTrees) {
    tree.rerootTreeAtEdge(tid.getTaxonName(0));
    Trees.removeBinaryNodes((MutableTree)tree);
  }
  allGreedies=Utils.greedyConsensus(contractedTrees,this.GREEDY_ADDITION_THRESHOLDS,true,1,tid,true);
  int th=0;
  for (  Tree cons : allGreedies) {
    double thresh=this.GREEDY_ADDITION_THRESHOLDS[th];
    System.err.println(""String_Node_Str"" + thresh + ""String_Node_Str"");
    for (    TNode greedyNode : cons.postTraverse()) {
      if (greedyNode.isLeaf()) {
        continue;
      }
      long maxSize=this.GREEDY_ADDITION_MAX_POLYTOMY_MIN + Math.round(Math.sqrt(tid.taxonCount() * this.GREEDY_ADDITION_MAX_POLYTOMY_MULT));
      if (greedyNode.getChildCount() <= 2 || greedyNode.getChildCount() > maxSize) {
        continue;
      }
      BitSet greedyBS=(BitSet)((STITreeCluster)((STINode)greedyNode).getData()).getBitSet();
      BitSet[] childbs=new BitSet[greedyNode.getChildCount() + 1];
      int i=0;
      for (      TNode c : greedyNode.getChildren()) {
        childbs[i]=(BitSet)((STITreeCluster)((STINode)c).getData()).getBitSet();
        ;
        i++;
      }
      BitSet comp=(BitSet)greedyBS.clone();
      comp.flip(0,tid.taxonCount());
      childbs[i]=comp;
      System.err.print(""String_Node_Str"" + greedyNode.getChildCount());
      this.addSubSampledBitSetToX(this.speciesSimilarityMatrix.resolveByUPGMA(Arrays.asList(childbs),true),tid);
      int k=0;
      for (int j=0; j < this.GREEDY_ADDITION_DEFAULT_RUNS + k; j++) {
        boolean quadratic=this.SLOW || (th < this.GREEDY_DIST_ADDITTION_LAST_THRESHOLD_INDX && j < this.GREEDY_ADDITION_DEFAULT_RUNS);
        if (this.sampleAndResolve(childbs,quadratic,sm,tid)) {
          k+=this.GREEDY_ADDITION_IMPROVEMENT_REWARD;
        }
      }
      System.err.println(""String_Node_Str"" + this.GREEDY_ADDITION_MIN_FREQ + ""String_Node_Str""+ k / this.GREEDY_ADDITION_IMPROVEMENT_REWARD + ""String_Node_Str"" + clusters.getClusterCount());
    }
    th=(th + 1) % this.GREEDY_ADDITION_THRESHOLDS.length;
  }
}",0.9767903193810752
125159,"/** 
 * Computes and adds partitions from the input set (ASTRAL-I) Also, adds extra bipartitions using ASTRAL-II heuristics. Takes care of multi-individual dataset subsampling.
 */
@Override public void formSetX(AbstractInference<Tripartition> inf){
  WQInference inference=(WQInference)inf;
  int haveMissing=preProcess(inference);
  SpeciesMapper spm=GlobalMaps.taxonNameMap.getSpeciesIdMapper();
  calculateDistances();
  if (haveMissing > 0) {
    completeGeneTrees();
  }
 else {
    this.completedGeeneTrees=this.originalInompleteGeneTrees;
  }
  System.err.println(""String_Node_Str"");
  int firstRoundSampling=10;
  int secondRoundSampling=2;
  System.err.println(""String_Node_Str"" + firstRoundSampling + ""String_Node_Str"");
  ArrayList<SingleIndividualSample> firstRoundSamples=new ArrayList<SingleIndividualSample>();
  for (int r=0; r < firstRoundSampling; r++) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + r + ""String_Node_Str"");
    SingleIndividualSample taxonSample=new SingleIndividualSample(spm,this.similarityMatrix);
    firstRoundSamples.add(taxonSample);
  }
  int K=5;
  int arraySize=this.completedGeeneTrees.size();
  List<List<Tree>> allGreedies=new ArrayList<List<Tree>>(arraySize);
  int i=1;
  for (  Tree gt : this.completedGeeneTrees) {
    System.err.println(""String_Node_Str"" + i + ""String_Node_Str"");
    ArrayList<Tree> firstRoundSampleTrees=new ArrayList<Tree>();
    for (    SingleIndividualSample sample : firstRoundSamples) {
      Tree contractedTree=sample.contractTree(gt);
      firstRoundSampleTrees.add(contractedTree);
    }
    System.err.println(""String_Node_Str"");
    ArrayList<Tree> greedies=new ArrayList<Tree>();
    for (int r=0; r < secondRoundSampling; r++) {
      Collections.shuffle(firstRoundSampleTrees,GlobalMaps.random);
      List<Tree> sample=firstRoundSampleTrees.subList(0,K);
      greedies.add(Utils.greedyConsensus(sample,false,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),true));
    }
    allGreedies.add(greedies);
    i++;
  }
  ArrayList<Tree> greedyCandidates=new ArrayList<Tree>();
  for (  List<Tree> l : allGreedies) {
    greedyCandidates.add(l.get(GlobalMaps.random.nextInt(l.size())));
  }
  Tree allGenesGreedy=Utils.greedyConsensus(greedyCandidates,false,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),true);
  resolveByUPGMA((MutableTree)allGenesGreedy,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),this.speciesSimilarityMatrix);
  for (  List<Tree> l : allGreedies) {
    for (    Tree gr : l) {
      addBipartitionsFromSignleIndTreesToX(gr,allGenesGreedy,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier());
      System.err.println(""String_Node_Str"" + clusters.getClusterCount());
    }
  }
  if (inference.getAddExtra() != 0) {
    for (int l=0; l < secondRoundSampling; l++) {
      ArrayList<Tree> genes=new ArrayList<Tree>();
      for (int j=0; j < allGreedies.size(); j++) {
        genes.add(allGreedies.get(j).get(l));
      }
      System.err.println(""String_Node_Str"" + inference.getAddExtra() + ""String_Node_Str"");
      this.addExtraBipartitionByHeuristics(genes,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),this.speciesSimilarityMatrix);
      System.err.println(""String_Node_Str"" + clusters.getClusterCount());
    }
  }
}","/** 
 * Computes and adds partitions from the input set (ASTRAL-I) Also, adds extra bipartitions using ASTRAL-II heuristics. Takes care of multi-individual dataset subsampling.
 */
@Override public void formSetX(AbstractInference<Tripartition> inf){
  WQInference inference=(WQInference)inf;
  int haveMissing=preProcess(inference);
  SpeciesMapper spm=GlobalMaps.taxonNameMap.getSpeciesIdMapper();
  calculateDistances();
  if (haveMissing > 0) {
    completeGeneTrees();
  }
 else {
    this.completedGeeneTrees=this.originalInompleteGeneTrees;
  }
  System.err.println(""String_Node_Str"");
  int firstRoundSampling=200;
  int secondRoundSampling=2;
  System.err.println(""String_Node_Str"" + firstRoundSampling + ""String_Node_Str"");
  ArrayList<SingleIndividualSample> firstRoundSamples=new ArrayList<SingleIndividualSample>();
  for (int r=0; r < firstRoundSampling; r++) {
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + r + ""String_Node_Str"");
    SingleIndividualSample taxonSample=new SingleIndividualSample(spm,this.similarityMatrix);
    firstRoundSamples.add(taxonSample);
  }
  int K=100;
  int arraySize=this.completedGeeneTrees.size();
  List<List<Tree>> allGreedies=new ArrayList<List<Tree>>(arraySize);
  int i=1;
  for (  Tree gt : this.completedGeeneTrees) {
    System.err.println(""String_Node_Str"" + i + ""String_Node_Str"");
    ArrayList<Tree> firstRoundSampleTrees=new ArrayList<Tree>();
    for (    SingleIndividualSample sample : firstRoundSamples) {
      Tree contractedTree=sample.contractTree(gt);
      firstRoundSampleTrees.add(contractedTree);
    }
    System.err.println(""String_Node_Str"");
    ArrayList<Tree> greedies=new ArrayList<Tree>();
    for (int r=0; r < secondRoundSampling; r++) {
      Collections.shuffle(firstRoundSampleTrees,GlobalMaps.random);
      List<Tree> sample=firstRoundSampleTrees.subList(0,K);
      greedies.add(Utils.greedyConsensus(sample,false,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),true));
    }
    allGreedies.add(greedies);
    i++;
  }
  ArrayList<Tree> greedyCandidates=new ArrayList<Tree>();
  for (  List<Tree> l : allGreedies) {
    greedyCandidates.add(l.get(GlobalMaps.random.nextInt(l.size())));
  }
  Tree allGenesGreedy=Utils.greedyConsensus(greedyCandidates,false,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),true);
  resolveByUPGMA((MutableTree)allGenesGreedy,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),this.speciesSimilarityMatrix);
  for (  List<Tree> l : allGreedies) {
    for (    Tree gr : l) {
      addBipartitionsFromSignleIndTreesToX(gr,allGenesGreedy,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier());
      System.err.println(""String_Node_Str"" + clusters.getClusterCount());
    }
  }
  if (inference.getAddExtra() != 0) {
    for (int l=0; l < secondRoundSampling; l++) {
      ArrayList<Tree> genes=new ArrayList<Tree>();
      for (int j=0; j < allGreedies.size(); j++) {
        genes.add(allGreedies.get(j).get(l));
      }
      System.err.println(""String_Node_Str"" + inference.getAddExtra() + ""String_Node_Str"");
      this.addExtraBipartitionByHeuristics(genes,GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier(),this.speciesSimilarityMatrix);
      System.err.println(""String_Node_Str"" + clusters.getClusterCount());
    }
  }
}",0.8539459943308966
125160,"/** 
 * Given a bitset that shows one side of a bipartition this method adds the bipartition to the set X. Importantly, when the input bitset has only one (or a sbuset) of individuals belonging to a species set, the other individuals from that species are also set to one before adding the bipartition to the set X. Thus, all individuals from the same species will be on the same side of the bipartition. These additions are done on a copy of the input bitset not the instance passed in.
 * @param bs
 * @return was the cluster new?
 */
private boolean addSpeciesBitSetToX(final BitSet bs){
  STITreeCluster cluster=GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier().newCluster();
  cluster.setCluster(bs);
  return this.addSpeciesBipartitionToX(cluster);
}","/** 
 * Given a bitset that shows one side of a bipartition this method adds the bipartition to the set X. Importantly, when the input bitset has only one (or a sbuset) of individuals belonging to a species set, the other individuals from that species are also set to one before adding the bipartition to the set X. Thus, all individuals from the same species will be on the same side of the bipartition. These additions are done on a copy of the input bitset not the instance passed in.
 * @param stBitSet
 * @return was the cluster new?
 */
private boolean addSpeciesBitSetToX(final BitSet stBitSet){
  STITreeCluster cluster=GlobalMaps.taxonNameMap.getSpeciesIdMapper().getSTTaxonIdentifier().newCluster();
  cluster.setCluster(stBitSet);
  return this.addSpeciesBipartitionToX(cluster);
}",0.9808429118773946
125161,"public void addExtraBipartitionsByInput(IClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  traverseTrees(trees,false,null,this.orderedTaxonByDist != null);
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}","public void addExtraBipartitionsByInput(IClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  List<STITreeCluster> extraTreeAllCluster=new ArrayList<STITreeCluster>();
  for (  Tree tr : trees) {
    String[] gtLeaves=tr.getLeaves();
    STITreeCluster gtAll=new STITreeCluster();
    for (int i=0; i < gtLeaves.length; i++) {
      gtAll.addLeaf(GlobalMaps.taxonIdentifier.taxonId(gtLeaves[i]));
    }
    extraTreeAllCluster.add(gtAll);
  }
  traverseTrees(trees,false,null,this.orderedTaxonByDist != null,extraTreeAllCluster);
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}",0.5927552140504939
125162,"private void calculateDistances(AbstractInference<Tripartition> inference){
  Deque<BitSet> stack=new ArrayDeque<BitSet>();
  this.distMatrix=new float[n][n];
  int[][] denom=new int[n][n];
  int k=0;
  for (  Tree tree : inference.trees) {
    STITreeCluster treeallCL=treeAllClusters.get(k++);
    Integer treeall=treeallCL.getClusterSize();
    for (    TNode node : tree.postTraverse()) {
      if (node.isLeaf()) {
        BitSet tmp=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        tmp.set(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        stack.push(tmp);
      }
 else       if (node.isRoot() && node.getChildCount() == 3) {
        BitSet left=stack.pop();
        BitSet middle=stack.pop();
        BitSet right=stack.pop();
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
      }
 else {
        BitSet left=stack.pop();
        BitSet right=stack.pop();
        BitSet both=new BitSet();
        both.or(left);
        both.or(right);
        BitSet middle=new BitSet();
        middle.or(treeallCL.getBitSet());
        middle.andNot(both);
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
        stack.push(both);
      }
    }
    BitSet all=treeallCL.getBitSet();
    int c=all.cardinality() - 2;
    for (int l=all.nextSetBit(0); l >= 0; l=all.nextSetBit(l + 1)) {
      for (int r=all.nextSetBit(0); r >= 0; r=all.nextSetBit(r + 1)) {
        denom[l][r]+=c * (c - 1) / 2;
        denom[r][l]=denom[l][r];
      }
    }
  }
  for (int i=0; i < n; i++) {
    for (int j=i; j < n; j++) {
      if (denom[i][j] == 0)       distMatrix[i][j]=0;
 else       distMatrix[i][j]=distMatrix[i][j] / (denom[i][j] / 2);
      distMatrix[j][i]=distMatrix[i][j];
    }
  }
}","private void calculateDistances(AbstractInference<Tripartition> inference,List<STITreeCluster> treeAllClusters){
  Deque<BitSet> stack=new ArrayDeque<BitSet>();
  this.distMatrix=new float[n][n];
  int[][] denom=new int[n][n];
  int k=0;
  for (  Tree tree : inference.trees) {
    STITreeCluster treeallCL=treeAllClusters.get(k++);
    Integer treeall=treeallCL.getClusterSize();
    for (    TNode node : tree.postTraverse()) {
      if (node.isLeaf()) {
        BitSet tmp=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        tmp.set(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        stack.push(tmp);
      }
 else       if (node.isRoot() && node.getChildCount() == 3) {
        BitSet left=stack.pop();
        BitSet middle=stack.pop();
        BitSet right=stack.pop();
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
      }
 else {
        BitSet left=stack.pop();
        BitSet right=stack.pop();
        BitSet both=new BitSet();
        both.or(left);
        both.or(right);
        BitSet middle=new BitSet();
        middle.or(treeallCL.getBitSet());
        middle.andNot(both);
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
        stack.push(both);
      }
    }
    BitSet all=treeallCL.getBitSet();
    int c=all.cardinality() - 2;
    for (int l=all.nextSetBit(0); l >= 0; l=all.nextSetBit(l + 1)) {
      for (int r=all.nextSetBit(0); r >= 0; r=all.nextSetBit(r + 1)) {
        denom[l][r]+=c * (c - 1) / 2;
        denom[r][l]=denom[l][r];
      }
    }
  }
  for (int i=0; i < n; i++) {
    for (int j=i; j < n; j++) {
      if (denom[i][j] == 0)       distMatrix[i][j]=0;
 else       distMatrix[i][j]=distMatrix[i][j] / (denom[i][j] / 2);
      distMatrix[j][i]=distMatrix[i][j];
    }
  }
}",0.906396641145962
125163,"public void computeTreePartitions(AbstractInference<Tripartition> inference,boolean addExtra){
  int k=inference.trees.size();
  n=GlobalMaps.taxonIdentifier.taxonCount();
  int haveMissing=0;
  for (  Tree tree : inference.trees) {
    if (tree.getLeafCount() != n) {
      haveMissing++;
    }
    String[] gtLeaves=tree.getLeaves();
    STITreeCluster gtAll=new STITreeCluster();
    for (int i=0; i < gtLeaves.length; i++) {
      gtAll.addLeaf(GlobalMaps.taxonIdentifier.taxonId(gtLeaves[i]));
    }
    treeAllClusters.add(gtAll);
  }
  System.err.println(haveMissing + ""String_Node_Str"");
  if ((haveMissing > k / 20) || addExtra) {
    System.err.println(""String_Node_Str"");
    calculateDistances(inference);
  }
  if (haveMissing > k / 20) {
    this.orderedTaxonByDist=sortByDistance();
    System.err.println(""String_Node_Str"");
  }
  if (addExtra) {
    this.distSTMatrix=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    float[][] denum=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    for (int i=0; i < n; i++) {
      for (int j=i; j < n; j++) {
        int stI=spm.getSpeciesIdForTaxon(i);
        int stJ=spm.getSpeciesIdForTaxon(j);
        this.distSTMatrix[stI][stJ]+=this.distMatrix[i][j];
        this.distSTMatrix[stJ][stI]=this.distSTMatrix[stI][stJ];
        denum[stI][stJ]++;
        denum[stJ][stI]++;
      }
    }
    for (int i=0; i < spm.getSpeciesCount(); i++) {
      for (int j=0; j < spm.getSpeciesCount(); j++) {
        this.distSTMatrix[i][j]=denum[i][j] == 0 ? 0 : this.distSTMatrix[i][j] / denum[i][j];
      }
      this.distSTMatrix[i][i]=1;
    }
    System.err.println(""String_Node_Str"");
  }
  Map<Tripartition,Integer> geneTreeTripartitonCount=new HashMap<Tripartition,Integer>(k * n);
  STITreeCluster all=new STITreeCluster();
  all.getBitSet().set(0,n);
  addToClusters(all,GlobalMaps.taxonIdentifier.taxonCount());
  traverseTrees(inference.trees,true,geneTreeTripartitonCount,this.orderedTaxonByDist != null);
  this.setAlgorithm(geneTreeTripartitonCount.size(),k);
  if (this.algorithm == 2) {
    System.err.println(""String_Node_Str"");
    finalTripartitions=new Tripartition[geneTreeTripartitonCount.size()];
    finalCounts=new int[geneTreeTripartitonCount.size()];
    int i=0;
    for (    Entry<Tripartition,Integer> entry : geneTreeTripartitonCount.entrySet()) {
      finalTripartitions[i]=entry.getKey();
      finalCounts[i]=entry.getValue();
      i++;
    }
  }
 else {
    System.err.println(""String_Node_Str"");
    List<Integer> temp=new ArrayList<Integer>();
    for (    Tree tr : inference.trees) {
      for (      TNode node : tr.postTraverse()) {
        if (node.isLeaf()) {
          temp.add(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        }
 else {
          temp.add(-node.getChildCount());
        }
        if (node.isRoot()) {
          temp.add(Integer.MIN_VALUE);
        }
      }
    }
    geneTreesAsInts=temp.toArray(new Integer[]{});
  }
  long s=0;
  for (  Integer c : geneTreeTripartitonCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + k);
  System.err.println(""String_Node_Str"" + geneTreeTripartitonCount.size());
  System.err.println(""String_Node_Str"" + s);
  System.err.println(""String_Node_Str"" + clusters.getClusterCount());
  inference.weightCalculator.initializeWeightContainer(geneTreeTripartitonCount.size() * 2);
}","public void computeTreePartitions(AbstractInference<Tripartition> inference,boolean addExtra){
  int k=inference.trees.size();
  n=GlobalMaps.taxonIdentifier.taxonCount();
  int haveMissing=0;
  for (  Tree tree : inference.trees) {
    if (tree.getLeafCount() != n) {
      haveMissing++;
    }
    String[] gtLeaves=tree.getLeaves();
    STITreeCluster gtAll=new STITreeCluster();
    for (int i=0; i < gtLeaves.length; i++) {
      gtAll.addLeaf(GlobalMaps.taxonIdentifier.taxonId(gtLeaves[i]));
    }
    treeAllClusters.add(gtAll);
  }
  System.err.println(haveMissing + ""String_Node_Str"");
  if ((haveMissing > k / 20) || addExtra) {
    System.err.println(""String_Node_Str"");
    calculateDistances(inference,treeAllClusters);
  }
  if (haveMissing > k / 20) {
    this.orderedTaxonByDist=sortByDistance();
    System.err.println(""String_Node_Str"");
  }
  if (addExtra) {
    this.distSTMatrix=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    float[][] denum=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    for (int i=0; i < n; i++) {
      for (int j=i; j < n; j++) {
        int stI=spm.getSpeciesIdForTaxon(i);
        int stJ=spm.getSpeciesIdForTaxon(j);
        this.distSTMatrix[stI][stJ]+=this.distMatrix[i][j];
        this.distSTMatrix[stJ][stI]=this.distSTMatrix[stI][stJ];
        denum[stI][stJ]++;
        denum[stJ][stI]++;
      }
    }
    for (int i=0; i < spm.getSpeciesCount(); i++) {
      for (int j=0; j < spm.getSpeciesCount(); j++) {
        this.distSTMatrix[i][j]=denum[i][j] == 0 ? 0 : this.distSTMatrix[i][j] / denum[i][j];
      }
      this.distSTMatrix[i][i]=1;
    }
    System.err.println(""String_Node_Str"");
  }
  Map<Tripartition,Integer> geneTreeTripartitonCount=new HashMap<Tripartition,Integer>(k * n);
  STITreeCluster all=new STITreeCluster();
  all.getBitSet().set(0,n);
  addToClusters(all,GlobalMaps.taxonIdentifier.taxonCount());
  traverseTrees(inference.trees,true,geneTreeTripartitonCount,this.orderedTaxonByDist != null,treeAllClusters);
  this.setAlgorithm(geneTreeTripartitonCount.size(),k);
  if (this.algorithm == 2) {
    System.err.println(""String_Node_Str"");
    finalTripartitions=new Tripartition[geneTreeTripartitonCount.size()];
    finalCounts=new int[geneTreeTripartitonCount.size()];
    int i=0;
    for (    Entry<Tripartition,Integer> entry : geneTreeTripartitonCount.entrySet()) {
      finalTripartitions[i]=entry.getKey();
      finalCounts[i]=entry.getValue();
      i++;
    }
  }
 else {
    System.err.println(""String_Node_Str"");
    List<Integer> temp=new ArrayList<Integer>();
    for (    Tree tr : inference.trees) {
      for (      TNode node : tr.postTraverse()) {
        if (node.isLeaf()) {
          temp.add(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        }
 else {
          temp.add(-node.getChildCount());
        }
        if (node.isRoot()) {
          temp.add(Integer.MIN_VALUE);
        }
      }
    }
    geneTreesAsInts=temp.toArray(new Integer[]{});
  }
  long s=0;
  for (  Integer c : geneTreeTripartitonCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + k);
  System.err.println(""String_Node_Str"" + geneTreeTripartitonCount.size());
  System.err.println(""String_Node_Str"" + s);
  System.err.println(""String_Node_Str"" + clusters.getClusterCount());
  inference.weightCalculator.initializeWeightContainer(geneTreeTripartitonCount.size() * 2);
}",0.9952830188679244
125164,"void traverseTrees(List<Tree> trees,boolean addTripartition,Map<Tripartition,Integer> geneTreeTripartitonCount,boolean complete){
  System.err.println(""String_Node_Str"");
  int t=0;
  for (  Tree tr : trees) {
    Stack<STITreeCluster> stack=new Stack<STITreeCluster>();
    STITreeCluster gtAll=this.treeAllClusters.get(t++);
    BitSet gtAllBS=gtAll.getBitSet();
    int[] neighbor=null;
    if (complete) {
      neighbor=new int[GlobalMaps.taxonIdentifier.taxonCount()];
      for (int i=gtAllBS.nextClearBit(0); i < n; i=gtAllBS.nextClearBit(i + 1)) {
        for (int j=0; ; j++) {
          if (i > this.orderedTaxonByDist[i][j] || gtAllBS.get(this.orderedTaxonByDist[i][j])) {
            neighbor[i]=this.orderedTaxonByDist[i][j];
            break;
          }
          if (j > GlobalMaps.taxonIdentifier.taxonCount()) {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
    }
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster cluster=new STITreeCluster();
        Integer taxonID=GlobalMaps.taxonIdentifier.taxonId(nodeName);
        cluster.addLeaf(taxonID);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        addBipartitionToX(gtAllBS,cluster,remaining,neighbor);
        stack.add(cluster);
      }
 else {
        ArrayList<STITreeCluster> childbslist=new ArrayList<STITreeCluster>();
        BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        for (        TNode child : node.getChildren()) {
          STITreeCluster pop=stack.pop();
          childbslist.add(pop);
          bs.or(pop.getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        stack.add(cluster);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        if (addBipartitionToX(gtAllBS,cluster,remaining,neighbor)) {
        }
        if (addTripartition) {
          if (remaining.getClusterSize() != 0) {
            childbslist.add(remaining);
          }
          for (int i=0; i < childbslist.size(); i++) {
            for (int j=i + 1; j < childbslist.size(); j++) {
              for (int k=j + 1; k < childbslist.size(); k++) {
                addTripartition(childbslist.get(i),childbslist.get(j),childbslist.get(k),node,geneTreeTripartitonCount);
              }
            }
          }
        }
      }
    }
  }
}","void traverseTrees(List<Tree> trees,boolean addTripartition,Map<Tripartition,Integer> geneTreeTripartitonCount,boolean complete,List<STITreeCluster> treeCompteleClusters){
  System.err.println(""String_Node_Str"");
  int t=0;
  for (  Tree tr : trees) {
    Stack<STITreeCluster> stack=new Stack<STITreeCluster>();
    STITreeCluster gtAll=treeCompteleClusters.get(t++);
    BitSet gtAllBS=gtAll.getBitSet();
    int[] neighbor=null;
    if (complete) {
      neighbor=new int[GlobalMaps.taxonIdentifier.taxonCount()];
      for (int i=gtAllBS.nextClearBit(0); i < n; i=gtAllBS.nextClearBit(i + 1)) {
        for (int j=0; ; j++) {
          if (i > this.orderedTaxonByDist[i][j] || gtAllBS.get(this.orderedTaxonByDist[i][j])) {
            neighbor[i]=this.orderedTaxonByDist[i][j];
            break;
          }
          if (j > GlobalMaps.taxonIdentifier.taxonCount()) {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
    }
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster cluster=new STITreeCluster();
        Integer taxonID=GlobalMaps.taxonIdentifier.taxonId(nodeName);
        cluster.addLeaf(taxonID);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        addBipartitionToX(gtAllBS,cluster,remaining,neighbor);
        stack.add(cluster);
      }
 else {
        ArrayList<STITreeCluster> childbslist=new ArrayList<STITreeCluster>();
        BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        for (        TNode child : node.getChildren()) {
          STITreeCluster pop=stack.pop();
          childbslist.add(pop);
          bs.or(pop.getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        stack.add(cluster);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        if (addBipartitionToX(gtAllBS,cluster,remaining,neighbor)) {
        }
        if (addTripartition) {
          if (remaining.getClusterSize() != 0) {
            childbslist.add(remaining);
          }
          for (int i=0; i < childbslist.size(); i++) {
            for (int j=i + 1; j < childbslist.size(); j++) {
              for (int k=j + 1; k < childbslist.size(); k++) {
                addTripartition(childbslist.get(i),childbslist.get(j),childbslist.get(k),node,geneTreeTripartitonCount);
              }
            }
          }
        }
      }
    }
  }
}",0.9876923076923076
125165,"public void addExtraBipartitionsByInput(IClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  traverseTrees(trees,false,null,this.orderedTaxonByDist != null);
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}","public void addExtraBipartitionsByInput(IClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  List<STITreeCluster> extraTreeAllCluster=new ArrayList<STITreeCluster>();
  for (  Tree tr : trees) {
    String[] gtLeaves=tr.getLeaves();
    STITreeCluster gtAll=new STITreeCluster();
    for (int i=0; i < gtLeaves.length; i++) {
      gtAll.addLeaf(GlobalMaps.taxonIdentifier.taxonId(gtLeaves[i]));
    }
    extraTreeAllCluster.add(gtAll);
  }
  traverseTrees(trees,false,null,this.orderedTaxonByDist != null,extraTreeAllCluster);
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}",0.5927552140504939
125166,"private void calculateDistances(AbstractInference<Tripartition> inference){
  Deque<BitSet> stack=new ArrayDeque<BitSet>();
  this.distMatrix=new float[n][n];
  int[][] denom=new int[n][n];
  int k=0;
  for (  Tree tree : inference.trees) {
    STITreeCluster treeallCL=treeAllClusters.get(k++);
    Integer treeall=treeallCL.getClusterSize();
    for (    TNode node : tree.postTraverse()) {
      if (node.isLeaf()) {
        BitSet tmp=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        tmp.set(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        stack.push(tmp);
      }
 else       if (node.isRoot() && node.getChildCount() == 3) {
        BitSet left=stack.pop();
        BitSet middle=stack.pop();
        BitSet right=stack.pop();
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
      }
 else {
        BitSet left=stack.pop();
        BitSet right=stack.pop();
        BitSet both=new BitSet();
        both.or(left);
        both.or(right);
        BitSet middle=new BitSet();
        middle.or(treeallCL.getBitSet());
        middle.andNot(both);
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
        stack.push(both);
      }
    }
    BitSet all=treeallCL.getBitSet();
    int c=all.cardinality() - 2;
    for (int l=all.nextSetBit(0); l >= 0; l=all.nextSetBit(l + 1)) {
      for (int r=all.nextSetBit(0); r >= 0; r=all.nextSetBit(r + 1)) {
        denom[l][r]+=c * (c - 1) / 2;
        denom[r][l]=denom[l][r];
      }
    }
  }
  for (int i=0; i < n; i++) {
    for (int j=i; j < n; j++) {
      if (denom[i][j] == 0)       distMatrix[i][j]=0;
 else       distMatrix[i][j]=distMatrix[i][j] / (denom[i][j] / 2);
      distMatrix[j][i]=distMatrix[i][j];
    }
  }
}","private void calculateDistances(AbstractInference<Tripartition> inference,List<STITreeCluster> treeAllClusters){
  Deque<BitSet> stack=new ArrayDeque<BitSet>();
  this.distMatrix=new float[n][n];
  int[][] denom=new int[n][n];
  int k=0;
  for (  Tree tree : inference.trees) {
    STITreeCluster treeallCL=treeAllClusters.get(k++);
    Integer treeall=treeallCL.getClusterSize();
    for (    TNode node : tree.postTraverse()) {
      if (node.isLeaf()) {
        BitSet tmp=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        tmp.set(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        stack.push(tmp);
      }
 else       if (node.isRoot() && node.getChildCount() == 3) {
        BitSet left=stack.pop();
        BitSet middle=stack.pop();
        BitSet right=stack.pop();
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
      }
 else {
        BitSet left=stack.pop();
        BitSet right=stack.pop();
        BitSet both=new BitSet();
        both.or(left);
        both.or(right);
        BitSet middle=new BitSet();
        middle.or(treeallCL.getBitSet());
        middle.andNot(both);
        updateDistanceForTwoNodes(treeall,left,right,distMatrix);
        updateDistanceForTwoNodes(treeall,left,middle,distMatrix);
        updateDistanceForTwoNodes(treeall,middle,right,distMatrix);
        stack.push(both);
      }
    }
    BitSet all=treeallCL.getBitSet();
    int c=all.cardinality() - 2;
    for (int l=all.nextSetBit(0); l >= 0; l=all.nextSetBit(l + 1)) {
      for (int r=all.nextSetBit(0); r >= 0; r=all.nextSetBit(r + 1)) {
        denom[l][r]+=c * (c - 1) / 2;
        denom[r][l]=denom[l][r];
      }
    }
  }
  for (int i=0; i < n; i++) {
    for (int j=i; j < n; j++) {
      if (denom[i][j] == 0)       distMatrix[i][j]=0;
 else       distMatrix[i][j]=distMatrix[i][j] / (denom[i][j] / 2);
      distMatrix[j][i]=distMatrix[i][j];
    }
  }
}",0.906396641145962
125167,"public void computeTreePartitions(AbstractInference<Tripartition> inference,boolean addExtra){
  int k=inference.trees.size();
  n=GlobalMaps.taxonIdentifier.taxonCount();
  int haveMissing=0;
  for (  Tree tree : inference.trees) {
    if (tree.getLeafCount() != n) {
      haveMissing++;
    }
    String[] gtLeaves=tree.getLeaves();
    STITreeCluster gtAll=new STITreeCluster();
    for (int i=0; i < gtLeaves.length; i++) {
      gtAll.addLeaf(GlobalMaps.taxonIdentifier.taxonId(gtLeaves[i]));
    }
    treeAllClusters.add(gtAll);
  }
  System.err.println(haveMissing + ""String_Node_Str"");
  if ((haveMissing > k / 20) || addExtra) {
    System.err.println(""String_Node_Str"");
    calculateDistances(inference);
  }
  if (haveMissing > k / 20) {
    this.orderedTaxonByDist=sortByDistance();
    System.err.println(""String_Node_Str"");
  }
  if (addExtra) {
    this.distSTMatrix=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    float[][] denum=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    for (int i=0; i < n; i++) {
      for (int j=i; j < n; j++) {
        int stI=spm.getSpeciesIdForTaxon(i);
        int stJ=spm.getSpeciesIdForTaxon(j);
        this.distSTMatrix[stI][stJ]+=this.distMatrix[i][j];
        this.distSTMatrix[stJ][stI]=this.distSTMatrix[stI][stJ];
        denum[stI][stJ]++;
        denum[stJ][stI]++;
      }
    }
    for (int i=0; i < spm.getSpeciesCount(); i++) {
      for (int j=0; j < spm.getSpeciesCount(); j++) {
        this.distSTMatrix[i][j]=denum[i][j] == 0 ? 0 : this.distSTMatrix[i][j] / denum[i][j];
      }
      this.distSTMatrix[i][i]=1;
    }
    System.err.println(""String_Node_Str"");
  }
  Map<Tripartition,Integer> geneTreeTripartitonCount=new HashMap<Tripartition,Integer>(k * n);
  STITreeCluster all=new STITreeCluster();
  all.getBitSet().set(0,n);
  addToClusters(all,GlobalMaps.taxonIdentifier.taxonCount());
  traverseTrees(inference.trees,true,geneTreeTripartitonCount,this.orderedTaxonByDist != null);
  this.setAlgorithm(geneTreeTripartitonCount.size(),k);
  if (this.algorithm == 2) {
    System.err.println(""String_Node_Str"");
    finalTripartitions=new Tripartition[geneTreeTripartitonCount.size()];
    finalCounts=new int[geneTreeTripartitonCount.size()];
    int i=0;
    for (    Entry<Tripartition,Integer> entry : geneTreeTripartitonCount.entrySet()) {
      finalTripartitions[i]=entry.getKey();
      finalCounts[i]=entry.getValue();
      i++;
    }
  }
 else {
    System.err.println(""String_Node_Str"");
    List<Integer> temp=new ArrayList<Integer>();
    for (    Tree tr : inference.trees) {
      for (      TNode node : tr.postTraverse()) {
        if (node.isLeaf()) {
          temp.add(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        }
 else {
          temp.add(-node.getChildCount());
        }
        if (node.isRoot()) {
          temp.add(Integer.MIN_VALUE);
        }
      }
    }
    geneTreesAsInts=temp.toArray(new Integer[]{});
  }
  long s=0;
  for (  Integer c : geneTreeTripartitonCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + k);
  System.err.println(""String_Node_Str"" + geneTreeTripartitonCount.size());
  System.err.println(""String_Node_Str"" + s);
  System.err.println(""String_Node_Str"" + clusters.getClusterCount());
  inference.weightCalculator.initializeWeightContainer(geneTreeTripartitonCount.size() * 2);
}","public void computeTreePartitions(AbstractInference<Tripartition> inference,boolean addExtra){
  int k=inference.trees.size();
  n=GlobalMaps.taxonIdentifier.taxonCount();
  int haveMissing=0;
  for (  Tree tree : inference.trees) {
    if (tree.getLeafCount() != n) {
      haveMissing++;
    }
    String[] gtLeaves=tree.getLeaves();
    STITreeCluster gtAll=new STITreeCluster();
    for (int i=0; i < gtLeaves.length; i++) {
      gtAll.addLeaf(GlobalMaps.taxonIdentifier.taxonId(gtLeaves[i]));
    }
    treeAllClusters.add(gtAll);
  }
  System.err.println(haveMissing + ""String_Node_Str"");
  if ((haveMissing > k / 20) || addExtra) {
    System.err.println(""String_Node_Str"");
    calculateDistances(inference,treeAllClusters);
  }
  if (haveMissing > k / 20) {
    this.orderedTaxonByDist=sortByDistance();
    System.err.println(""String_Node_Str"");
  }
  if (addExtra) {
    this.distSTMatrix=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    float[][] denum=new float[spm.getSpeciesCount()][spm.getSpeciesCount()];
    for (int i=0; i < n; i++) {
      for (int j=i; j < n; j++) {
        int stI=spm.getSpeciesIdForTaxon(i);
        int stJ=spm.getSpeciesIdForTaxon(j);
        this.distSTMatrix[stI][stJ]+=this.distMatrix[i][j];
        this.distSTMatrix[stJ][stI]=this.distSTMatrix[stI][stJ];
        denum[stI][stJ]++;
        denum[stJ][stI]++;
      }
    }
    for (int i=0; i < spm.getSpeciesCount(); i++) {
      for (int j=0; j < spm.getSpeciesCount(); j++) {
        this.distSTMatrix[i][j]=denum[i][j] == 0 ? 0 : this.distSTMatrix[i][j] / denum[i][j];
      }
      this.distSTMatrix[i][i]=1;
    }
    System.err.println(""String_Node_Str"");
  }
  Map<Tripartition,Integer> geneTreeTripartitonCount=new HashMap<Tripartition,Integer>(k * n);
  STITreeCluster all=new STITreeCluster();
  all.getBitSet().set(0,n);
  addToClusters(all,GlobalMaps.taxonIdentifier.taxonCount());
  traverseTrees(inference.trees,true,geneTreeTripartitonCount,this.orderedTaxonByDist != null,treeAllClusters);
  this.setAlgorithm(geneTreeTripartitonCount.size(),k);
  if (this.algorithm == 2) {
    System.err.println(""String_Node_Str"");
    finalTripartitions=new Tripartition[geneTreeTripartitonCount.size()];
    finalCounts=new int[geneTreeTripartitonCount.size()];
    int i=0;
    for (    Entry<Tripartition,Integer> entry : geneTreeTripartitonCount.entrySet()) {
      finalTripartitions[i]=entry.getKey();
      finalCounts[i]=entry.getValue();
      i++;
    }
  }
 else {
    System.err.println(""String_Node_Str"");
    List<Integer> temp=new ArrayList<Integer>();
    for (    Tree tr : inference.trees) {
      for (      TNode node : tr.postTraverse()) {
        if (node.isLeaf()) {
          temp.add(GlobalMaps.taxonIdentifier.taxonId(node.getName()));
        }
 else {
          temp.add(-node.getChildCount());
        }
        if (node.isRoot()) {
          temp.add(Integer.MIN_VALUE);
        }
      }
    }
    geneTreesAsInts=temp.toArray(new Integer[]{});
  }
  long s=0;
  for (  Integer c : geneTreeTripartitonCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + k);
  System.err.println(""String_Node_Str"" + geneTreeTripartitonCount.size());
  System.err.println(""String_Node_Str"" + s);
  System.err.println(""String_Node_Str"" + clusters.getClusterCount());
  inference.weightCalculator.initializeWeightContainer(geneTreeTripartitonCount.size() * 2);
}",0.9952830188679244
125168,"void traverseTrees(List<Tree> trees,boolean addTripartition,Map<Tripartition,Integer> geneTreeTripartitonCount,boolean complete){
  System.err.println(""String_Node_Str"");
  int t=0;
  for (  Tree tr : trees) {
    Stack<STITreeCluster> stack=new Stack<STITreeCluster>();
    STITreeCluster gtAll=this.treeAllClusters.get(t++);
    BitSet gtAllBS=gtAll.getBitSet();
    int[] neighbor=null;
    if (complete) {
      neighbor=new int[GlobalMaps.taxonIdentifier.taxonCount()];
      for (int i=gtAllBS.nextClearBit(0); i < n; i=gtAllBS.nextClearBit(i + 1)) {
        for (int j=0; ; j++) {
          if (i > this.orderedTaxonByDist[i][j] || gtAllBS.get(this.orderedTaxonByDist[i][j])) {
            neighbor[i]=this.orderedTaxonByDist[i][j];
            break;
          }
          if (j > GlobalMaps.taxonIdentifier.taxonCount()) {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
    }
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster cluster=new STITreeCluster();
        Integer taxonID=GlobalMaps.taxonIdentifier.taxonId(nodeName);
        cluster.addLeaf(taxonID);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        addBipartitionToX(gtAllBS,cluster,remaining,neighbor);
        stack.add(cluster);
      }
 else {
        ArrayList<STITreeCluster> childbslist=new ArrayList<STITreeCluster>();
        BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        for (        TNode child : node.getChildren()) {
          STITreeCluster pop=stack.pop();
          childbslist.add(pop);
          bs.or(pop.getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        stack.add(cluster);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        if (addBipartitionToX(gtAllBS,cluster,remaining,neighbor)) {
        }
        if (addTripartition) {
          if (remaining.getClusterSize() != 0) {
            childbslist.add(remaining);
          }
          for (int i=0; i < childbslist.size(); i++) {
            for (int j=i + 1; j < childbslist.size(); j++) {
              for (int k=j + 1; k < childbslist.size(); k++) {
                addTripartition(childbslist.get(i),childbslist.get(j),childbslist.get(k),node,geneTreeTripartitonCount);
              }
            }
          }
        }
      }
    }
  }
}","void traverseTrees(List<Tree> trees,boolean addTripartition,Map<Tripartition,Integer> geneTreeTripartitonCount,boolean complete,List<STITreeCluster> treeCompteleClusters){
  System.err.println(""String_Node_Str"");
  int t=0;
  for (  Tree tr : trees) {
    Stack<STITreeCluster> stack=new Stack<STITreeCluster>();
    STITreeCluster gtAll=treeCompteleClusters.get(t++);
    BitSet gtAllBS=gtAll.getBitSet();
    int[] neighbor=null;
    if (complete) {
      neighbor=new int[GlobalMaps.taxonIdentifier.taxonCount()];
      for (int i=gtAllBS.nextClearBit(0); i < n; i=gtAllBS.nextClearBit(i + 1)) {
        for (int j=0; ; j++) {
          if (i > this.orderedTaxonByDist[i][j] || gtAllBS.get(this.orderedTaxonByDist[i][j])) {
            neighbor[i]=this.orderedTaxonByDist[i][j];
            break;
          }
          if (j > GlobalMaps.taxonIdentifier.taxonCount()) {
            throw new RuntimeException(""String_Node_Str"");
          }
        }
      }
    }
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster cluster=new STITreeCluster();
        Integer taxonID=GlobalMaps.taxonIdentifier.taxonId(nodeName);
        cluster.addLeaf(taxonID);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        addBipartitionToX(gtAllBS,cluster,remaining,neighbor);
        stack.add(cluster);
      }
 else {
        ArrayList<STITreeCluster> childbslist=new ArrayList<STITreeCluster>();
        BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
        for (        TNode child : node.getChildren()) {
          STITreeCluster pop=stack.pop();
          childbslist.add(pop);
          bs.or(pop.getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        stack.add(cluster);
        STITreeCluster remaining=cluster.complementaryCluster();
        remaining.getBitSet().and(gtAll.getBitSet());
        if (addBipartitionToX(gtAllBS,cluster,remaining,neighbor)) {
        }
        if (addTripartition) {
          if (remaining.getClusterSize() != 0) {
            childbslist.add(remaining);
          }
          for (int i=0; i < childbslist.size(); i++) {
            for (int j=i + 1; j < childbslist.size(); j++) {
              for (int k=j + 1; k < childbslist.size(); k++) {
                addTripartition(childbslist.get(i),childbslist.get(j),childbslist.get(k),node,geneTreeTripartitonCount);
              }
            }
          }
        }
      }
    }
  }
}",0.9876923076923076
125169,"@Override public int compare(Entry<STITreeCluster,Integer> o1,Entry<STITreeCluster,Integer> o2){
  int a=o2.getValue().compareTo(o1.getValue());
  if (a != 0) {
    return a;
  }
  if (o2.getKey().equals(o1)) {
    return 0;
  }
  int i=0;
  while (i >= 0) {
    int j=o1.getKey().getBitSet().nextSetBit(i);
    int jj=o2.getKey().getBitSet().nextSetBit(i);
    if (j != jj) {
      return (j > jj) ? -1 : 1;
    }
 else {
      if (j == -1) {
        break;
      }
      i=j + 1;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","@Override public int compare(Entry<STITreeCluster,Integer> o1,Entry<STITreeCluster,Integer> o2){
  int a=o2.getValue().compareTo(o1.getValue());
  if (a != 0) {
    return a;
  }
  if (o2.getKey().equals(o1.getKey())) {
    return 0;
  }
  int i=0;
  while (i >= 0) {
    int j=o1.getKey().getBitSet().nextSetBit(i);
    int jj=o2.getKey().getBitSet().nextSetBit(i);
    if (j != jj) {
      return (j > jj) ? -1 : 1;
    }
 else {
      if (j == -1) {
        break;
      }
      i=j + 1;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.9917657822506862
125170,"public static final Tree greedyConsensus(Iterable<Tree> trees){
  HashMap<STITreeCluster,Integer> count=new HashMap<STITreeCluster,Integer>();
  for (  Tree tree : trees) {
    List<STITreeCluster> bipartitionClusters=Utils.getClusters(tree);
    for (    STITreeCluster cluster : bipartitionClusters) {
      if (count.containsKey(cluster)) {
        count.put(cluster,count.get(cluster) + 1);
        continue;
      }
      STITreeCluster comp=cluster.complementaryCluster();
      if (count.containsKey(comp)) {
        count.put(comp,count.get(comp) + 1);
        continue;
      }
      count.put(cluster,1);
    }
  }
  TreeSet<Entry<STITreeCluster,Integer>> countSorted=new TreeSet<Entry<STITreeCluster,Integer>>(new Comparator<Entry<STITreeCluster,Integer>>(){
    @Override public int compare(    Entry<STITreeCluster,Integer> o1,    Entry<STITreeCluster,Integer> o2){
      int a=o2.getValue().compareTo(o1.getValue());
      if (a != 0) {
        return a;
      }
      if (o2.getKey().equals(o1)) {
        return 0;
      }
      int i=0;
      while (i >= 0) {
        int j=o1.getKey().getBitSet().nextSetBit(i);
        int jj=o2.getKey().getBitSet().nextSetBit(i);
        if (j != jj) {
          return (j > jj) ? -1 : 1;
        }
 else {
          if (j == -1) {
            break;
          }
          i=j + 1;
        }
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
);
  countSorted.addAll(count.entrySet());
  List<STITreeCluster> clusters=new ArrayList<STITreeCluster>();
  for (  Entry<STITreeCluster,Integer> entry : countSorted) {
    clusters.add(entry.getKey());
  }
  return Utils.buildTreeFromClusters(clusters);
}","public static final Tree greedyConsensus(Iterable<Tree> trees){
  HashMap<STITreeCluster,Integer> count=new HashMap<STITreeCluster,Integer>();
  for (  Tree tree : trees) {
    List<STITreeCluster> bipartitionClusters=Utils.getClusters(tree);
    for (    STITreeCluster cluster : bipartitionClusters) {
      if (count.containsKey(cluster)) {
        count.put(cluster,count.get(cluster) + 1);
        continue;
      }
      STITreeCluster comp=cluster.complementaryCluster();
      if (count.containsKey(comp)) {
        count.put(comp,count.get(comp) + 1);
        continue;
      }
      count.put(cluster,1);
    }
  }
  TreeSet<Entry<STITreeCluster,Integer>> countSorted=new TreeSet<Entry<STITreeCluster,Integer>>(new Comparator<Entry<STITreeCluster,Integer>>(){
    @Override public int compare(    Entry<STITreeCluster,Integer> o1,    Entry<STITreeCluster,Integer> o2){
      int a=o2.getValue().compareTo(o1.getValue());
      if (a != 0) {
        return a;
      }
      if (o2.getKey().equals(o1.getKey())) {
        return 0;
      }
      int i=0;
      while (i >= 0) {
        int j=o1.getKey().getBitSet().nextSetBit(i);
        int jj=o2.getKey().getBitSet().nextSetBit(i);
        if (j != jj) {
          return (j > jj) ? -1 : 1;
        }
 else {
          if (j == -1) {
            break;
          }
          i=j + 1;
        }
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
);
  countSorted.addAll(count.entrySet());
  List<STITreeCluster> clusters=new ArrayList<STITreeCluster>();
  for (  Entry<STITreeCluster,Integer> entry : countSorted) {
    clusters.add(entry.getKey());
  }
  return Utils.buildTreeFromClusters(clusters);
}",0.9973190348525468
125171,"@Override public int compare(Entry<STITreeCluster,Integer> o1,Entry<STITreeCluster,Integer> o2){
  int a=o2.getValue().compareTo(o1.getValue());
  if (a != 0) {
    return a;
  }
  if (o2.getKey().equals(o1)) {
    return 0;
  }
  int i=0;
  while (i >= 0) {
    int j=o1.getKey().getBitSet().nextSetBit(i);
    int jj=o2.getKey().getBitSet().nextSetBit(i);
    if (j != jj) {
      return (j > jj) ? -1 : 1;
    }
 else {
      if (j == -1) {
        break;
      }
      i=j + 1;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}","@Override public int compare(Entry<STITreeCluster,Integer> o1,Entry<STITreeCluster,Integer> o2){
  int a=o2.getValue().compareTo(o1.getValue());
  if (a != 0) {
    return a;
  }
  if (o2.getKey().equals(o1.getKey())) {
    return 0;
  }
  int i=0;
  while (i >= 0) {
    int j=o1.getKey().getBitSet().nextSetBit(i);
    int jj=o2.getKey().getBitSet().nextSetBit(i);
    if (j != jj) {
      return (j > jj) ? -1 : 1;
    }
 else {
      if (j == -1) {
        break;
      }
      i=j + 1;
    }
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.9917657822506862
125172,"public static final Tree greedyConsensus(Iterable<Tree> trees){
  HashMap<STITreeCluster,Integer> count=new HashMap<STITreeCluster,Integer>();
  for (  Tree tree : trees) {
    List<STITreeCluster> bipartitionClusters=Utils.getClusters(tree);
    for (    STITreeCluster cluster : bipartitionClusters) {
      if (count.containsKey(cluster)) {
        count.put(cluster,count.get(cluster) + 1);
        continue;
      }
      STITreeCluster comp=cluster.complementaryCluster();
      if (count.containsKey(comp)) {
        count.put(comp,count.get(comp) + 1);
        continue;
      }
      count.put(cluster,1);
    }
  }
  TreeSet<Entry<STITreeCluster,Integer>> countSorted=new TreeSet<Entry<STITreeCluster,Integer>>(new Comparator<Entry<STITreeCluster,Integer>>(){
    @Override public int compare(    Entry<STITreeCluster,Integer> o1,    Entry<STITreeCluster,Integer> o2){
      int a=o2.getValue().compareTo(o1.getValue());
      if (a != 0) {
        return a;
      }
      if (o2.getKey().equals(o1)) {
        return 0;
      }
      int i=0;
      while (i >= 0) {
        int j=o1.getKey().getBitSet().nextSetBit(i);
        int jj=o2.getKey().getBitSet().nextSetBit(i);
        if (j != jj) {
          return (j > jj) ? -1 : 1;
        }
 else {
          if (j == -1) {
            break;
          }
          i=j + 1;
        }
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
);
  countSorted.addAll(count.entrySet());
  List<STITreeCluster> clusters=new ArrayList<STITreeCluster>();
  for (  Entry<STITreeCluster,Integer> entry : countSorted) {
    clusters.add(entry.getKey());
  }
  return Utils.buildTreeFromClusters(clusters);
}","public static final Tree greedyConsensus(Iterable<Tree> trees){
  HashMap<STITreeCluster,Integer> count=new HashMap<STITreeCluster,Integer>();
  for (  Tree tree : trees) {
    List<STITreeCluster> bipartitionClusters=Utils.getClusters(tree);
    for (    STITreeCluster cluster : bipartitionClusters) {
      if (count.containsKey(cluster)) {
        count.put(cluster,count.get(cluster) + 1);
        continue;
      }
      STITreeCluster comp=cluster.complementaryCluster();
      if (count.containsKey(comp)) {
        count.put(comp,count.get(comp) + 1);
        continue;
      }
      count.put(cluster,1);
    }
  }
  TreeSet<Entry<STITreeCluster,Integer>> countSorted=new TreeSet<Entry<STITreeCluster,Integer>>(new Comparator<Entry<STITreeCluster,Integer>>(){
    @Override public int compare(    Entry<STITreeCluster,Integer> o1,    Entry<STITreeCluster,Integer> o2){
      int a=o2.getValue().compareTo(o1.getValue());
      if (a != 0) {
        return a;
      }
      if (o2.getKey().equals(o1.getKey())) {
        return 0;
      }
      int i=0;
      while (i >= 0) {
        int j=o1.getKey().getBitSet().nextSetBit(i);
        int jj=o2.getKey().getBitSet().nextSetBit(i);
        if (j != jj) {
          return (j > jj) ? -1 : 1;
        }
 else {
          if (j == -1) {
            break;
          }
          i=j + 1;
        }
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
);
  countSorted.addAll(count.entrySet());
  List<STITreeCluster> clusters=new ArrayList<STITreeCluster>();
  for (  Entry<STITreeCluster,Integer> entry : countSorted) {
    clusters.add(entry.getKey());
  }
  return Utils.buildTreeFromClusters(clusters);
}",0.9973190348525468
125173,"public static int getClusterCoalNum_unrooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxalist=new ArrayList();
  String[] taxa=tr.getLeaves();
  int ntaxa=taxa.length;
  for (  String leaf : taxa) {
    taxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  String leaf : cluster.getClusterLeaves()) {
    if (taxalist.contains(leaf)) {
      concluster.addLeaf(leaf);
    }
  }
  if (concluster.getClusterSize() == ntaxa) {
    return 0;
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ntaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ntaxa);
    intersect=0;
    virtualbs=new BitSet(ntaxa);
    if (node.isLeaf()) {
      int index=taxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,taxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}","public static int getClusterCoalNum_unrooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxalist=new ArrayList();
  String[] taxa=tr.getLeaves();
  int ntaxa=taxa.length;
  for (  String leaf : taxa) {
    taxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  Integer leaf : cluster) {
    if (taxalist.contains(GlobalMaps.taxonIdentifier.getTaxonName(leaf))) {
      concluster.addLeaf(leaf);
    }
  }
  if (concluster.getClusterSize() == ntaxa) {
    return 0;
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ntaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ntaxa);
    intersect=0;
    virtualbs=new BitSet(ntaxa);
    if (node.isLeaf()) {
      int index=taxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,taxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}",0.9846794023075468
125174,"public static int getClusterCoalNum_rooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxa=GlobalMaps.taxonIdentifier.getTaxonList();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      int index=taxa.indexOf(node.getName());
      BitSet bs=new BitSet();
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet();
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}","public static int getClusterCoalNum_rooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      int index=GlobalMaps.taxonIdentifier.taxonId(node.getName());
      BitSet bs=new BitSet();
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet();
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}",0.8836494105586878
125175,"public static int getClusterCoalNum_rootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxa=GlobalMaps.taxonIdentifier.getTaxonList();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      String stTaxon=(String)GlobalMaps.taxonNameMap.getTaxonName(node.getName());
      int index=taxa.indexOf(stTaxon);
      BitSet bs=new BitSet(taxa.size());
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet(taxa.size());
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((childCount <= 2) || (!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}","public static int getClusterCoalNum_rootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      String stTaxon=(String)GlobalMaps.taxonNameMap.getTaxonName(node.getName());
      int index=GlobalMaps.taxonIdentifier.taxonId(stTaxon);
      BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((childCount <= 2) || (!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}",0.7534429142603287
125176,"public static int getClusterCoalNum_unrootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List gtTaxalist=new ArrayList();
  String[] gtTaxa=tr.getLeaves();
  int ngtTaxa=gtTaxa.length;
  for (  String leaf : gtTaxa) {
    gtTaxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  TNode n : tr.getNodes()) {
    if ((!n.isLeaf()) || (!cluster.containsLeaf((String)GlobalMaps.taxonNameMap.getTaxonName(n.getName()))))     continue;
    concluster.addLeaf(n.getName());
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ngtTaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ngtTaxa);
    intersect=0;
    virtualbs=new BitSet(ngtTaxa);
    if (node.isLeaf()) {
      int index=gtTaxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,gtTaxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}","public static int getClusterCoalNum_unrootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List gtTaxalist=new ArrayList();
  String[] gtTaxa=tr.getLeaves();
  int ngtTaxa=gtTaxa.length;
  for (  String leaf : gtTaxa) {
    gtTaxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  TNode n : tr.getNodes()) {
    if ((!n.isLeaf()) || (!cluster.containsLeaf((String)GlobalMaps.taxonNameMap.getTaxonName(n.getName()))))     continue;
    concluster.addLeaf(GlobalMaps.taxonIdentifier.taxonId(n.getName()));
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ngtTaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ngtTaxa);
    intersect=0;
    virtualbs=new BitSet(ngtTaxa);
    if (node.isLeaf()) {
      int index=gtTaxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,gtTaxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}",0.9932860872808652
125177,"void addExtraBipartitionsByInput(ClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  String[] leaves=stTaxa;
  int n=leaves.length;
  for (  Tree tr : trees) {
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String treeName=node.getName();
        String nodeName=getSpeciesName(treeName);
        STITreeCluster tb=new STITreeCluster();
        tb.addLeaf(nodeName);
        nodeToSTCluster.put(node,tb);
        if (!extraTreeRooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        addToClusters(cluster,cluster.getClusterSize(),false);
        nodeToSTCluster.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,false);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}","void addExtraBipartitionsByInput(ClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  String[] leaves=stTaxa;
  int n=leaves.length;
  for (  Tree tr : trees) {
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String treeName=node.getName();
        String nodeName=getSpeciesName(treeName);
        STITreeCluster tb=new STITreeCluster();
        tb.addLeaf(GlobalMaps.taxonIdentifier.taxonId(nodeName));
        nodeToSTCluster.put(node,tb);
        if (!extraTreeRooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        addToClusters(cluster,cluster.getClusterSize(),false);
        nodeToSTCluster.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,false);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}",0.990201415351116
125178,"double computeTreeSTBipartitions(MGDInference_DP inference){
  double unweigthedConstant=0;
  double weightedConstant=0;
  int k=inference.trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  boolean duploss=(inference.optimizeDuploss == 3);
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeInvalidSTBCont=new HashMap<AbstractMap.SimpleEntry<STITreeCluster,STITreeCluster>,Integer>();
  STITreeCluster all=new STITreeCluster();
  for (int i=0; i < stTaxa.length; i++) {
    all.addLeaf(i);
  }
  addToClusters(all,leaves.length,false);
  for (int t=0; t < inference.trees.size(); t++) {
    Tree tr=inference.trees.get(t);
    STITreeCluster allInducedByGT=new STITreeCluster();
    String[] gtLeaves=tr.getLeaves();
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    treeAlls.add(allInducedByGT);
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    weightedConstant+=duploss ? 2 * (allInducedByGTSize - 1) : 0;
    unweigthedConstant+=(tr.getLeafCount() - 1);
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=getSpeciesName(node.getName());
        STITreeCluster cluster=new STITreeCluster();
        cluster.addLeaf(nodeName);
        addToClusters(cluster,1,true);
        nodeToSTCluster.put(node,cluster);
        if (!rooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(cluster,size,true);
        nodeToSTCluster.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,true);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + geneTreeSTBCount.size());
  System.err.println(""String_Node_Str"" + s);
  s=clusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size() * 2);
  if (inference.DLbdWeigth == -1) {
    inference.DLbdWeigth=(weightedConstant + 2 * k + 0.0D) / 2 * (k * n);
    System.out.println(""String_Node_Str"" + inference.DLbdWeigth);
  }
  return (unweigthedConstant + (1 - inference.DLbdWeigth) * weightedConstant);
}","double computeTreeSTBipartitions(MGDInference_DP inference){
  double unweigthedConstant=0;
  double weightedConstant=0;
  int k=inference.trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  boolean duploss=(inference.optimizeDuploss == 3);
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeInvalidSTBCont=new HashMap<AbstractMap.SimpleEntry<STITreeCluster,STITreeCluster>,Integer>();
  STITreeCluster all=new STITreeCluster();
  for (int i=0; i < stTaxa.length; i++) {
    all.addLeaf(i);
  }
  addToClusters(all,leaves.length,false);
  for (int t=0; t < inference.trees.size(); t++) {
    Tree tr=inference.trees.get(t);
    STITreeCluster allInducedByGT=new STITreeCluster();
    String[] gtLeaves=tr.getLeaves();
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      allInducedByGT.addLeaf(GlobalMaps.taxonIdentifier.taxonId(getSpeciesName(l)));
    }
    treeAlls.add(allInducedByGT);
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    weightedConstant+=duploss ? 2 * (allInducedByGTSize - 1) : 0;
    unweigthedConstant+=(tr.getLeafCount() - 1);
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=getSpeciesName(node.getName());
        STITreeCluster cluster=new STITreeCluster();
        cluster.addLeaf(GlobalMaps.taxonIdentifier.taxonId(nodeName));
        addToClusters(cluster,1,true);
        nodeToSTCluster.put(node,cluster);
        if (!rooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(cluster,size,true);
        nodeToSTCluster.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,true);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + geneTreeSTBCount.size());
  System.err.println(""String_Node_Str"" + s);
  s=clusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size() * 2);
  if (inference.DLbdWeigth == -1) {
    inference.DLbdWeigth=(weightedConstant + 2 * k + 0.0D) / 2 * (k * n);
    System.out.println(""String_Node_Str"" + inference.DLbdWeigth);
  }
  return (unweigthedConstant + (1 - inference.DLbdWeigth) * weightedConstant);
}",0.9876007439553628
125179,"public int taxonCount(){
  return idToName.size();
}","public int taxonCount(){
  return taxonCount;
}",0.7676767676767676
125180,"public Integer taxonId(String name){
  if (!nameToId.containsKey(name)) {
    nameToId.put(name,idToName.size());
    idToName.add(name);
  }
  return nameToId.get(name);
}","public Integer taxonId(String name){
  Integer a=nameToId.get(name);
  if (a == null) {
    nameToId.put(name,taxonCount);
    idToName.add(name);
    a=taxonCount;
    taxonCount++;
  }
  return a;
}",0.5161290322580645
125181,"public String toString2(){
  StringBuffer out=new StringBuffer();
  out.append(""String_Node_Str"");
  for (  String s : getClusterLeaves()) {
    out.append(s + ""String_Node_Str"");
  }
  out.delete(out.length() - 2,out.length());
  out.append(""String_Node_Str"");
  out.append(this._cluster);
  out.append(""String_Node_Str"");
  out.append(GlobalMaps.taxonIdentifier.getTaxonList());
  out.append(""String_Node_Str"");
  out.append(GlobalMaps.taxonIdentifier.taxonCount());
  return out.toString();
}","public String toString2(){
  StringBuffer out=new StringBuffer();
  out.append(""String_Node_Str"");
  for (  String s : getClusterLeaves()) {
    out.append(s + ""String_Node_Str"");
  }
  out.delete(out.length() - 2,out.length());
  out.append(""String_Node_Str"");
  out.append(this._cluster);
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(GlobalMaps.taxonIdentifier.taxonCount());
  return out.toString();
}",0.8660235798499464
125182,"public static int getClusterCoalNum_unrooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxalist=new ArrayList();
  String[] taxa=tr.getLeaves();
  int ntaxa=taxa.length;
  for (  String leaf : taxa) {
    taxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  String leaf : cluster.getClusterLeaves()) {
    if (taxalist.contains(leaf)) {
      concluster.addLeaf(leaf);
    }
  }
  if (concluster.getClusterSize() == ntaxa) {
    return 0;
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ntaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ntaxa);
    intersect=0;
    virtualbs=new BitSet(ntaxa);
    if (node.isLeaf()) {
      int index=taxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,taxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}","public static int getClusterCoalNum_unrooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxalist=new ArrayList();
  String[] taxa=tr.getLeaves();
  int ntaxa=taxa.length;
  for (  String leaf : taxa) {
    taxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  Integer leaf : cluster) {
    if (taxalist.contains(GlobalMaps.taxonIdentifier.getTaxonName(leaf))) {
      concluster.addLeaf(leaf);
    }
  }
  if (concluster.getClusterSize() == ntaxa) {
    return 0;
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ntaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ntaxa);
    intersect=0;
    virtualbs=new BitSet(ntaxa);
    if (node.isLeaf()) {
      int index=taxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,taxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}",0.9846794023075468
125183,"public static int getClusterCoalNum_rooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxa=GlobalMaps.taxonIdentifier.getTaxonList();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      int index=taxa.indexOf(node.getName());
      BitSet bs=new BitSet();
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet();
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}","public static int getClusterCoalNum_rooted(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      int index=GlobalMaps.taxonIdentifier.taxonId(node.getName());
      BitSet bs=new BitSet();
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet();
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}",0.8836494105586878
125184,"public static int getClusterCoalNum_rootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List taxa=GlobalMaps.taxonIdentifier.getTaxonList();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      String stTaxon=(String)GlobalMaps.taxonNameMap.getTaxonName(node.getName());
      int index=taxa.indexOf(stTaxon);
      BitSet bs=new BitSet(taxa.size());
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet(taxa.size());
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((childCount <= 2) || (!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}","public static int getClusterCoalNum_rootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  int count=0;
  for (  TNode node : tr.postTraverse()) {
    if (node.isLeaf()) {
      String stTaxon=(String)GlobalMaps.taxonNameMap.getTaxonName(node.getName());
      int index=GlobalMaps.taxonIdentifier.taxonId(stTaxon);
      BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
      bs.set(index);
      if (cluster.containsCluster(bs)) {
        count++;
      }
      map.put(node,bs);
    }
 else {
      BitSet bs=new BitSet(GlobalMaps.taxonIdentifier.taxonCount());
      int intersect=0;
      int childCount=node.getChildCount();
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if ((childCount <= 2) || (!cluster.containsCluster(v)))         continue;
        intersect++;
      }
      if (cluster.containsCluster(bs)) {
        count-=node.getChildCount();
        count++;
      }
 else       if (intersect > 1) {
        count-=intersect;
        count++;
      }
      map.put(node,bs);
    }
  }
  return Math.max(count - 1,0);
}",0.7534429142603287
125185,"public static int getClusterCoalNum_unrootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List gtTaxalist=new ArrayList();
  String[] gtTaxa=tr.getLeaves();
  int ngtTaxa=gtTaxa.length;
  for (  String leaf : gtTaxa) {
    gtTaxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  TNode n : tr.getNodes()) {
    if ((!n.isLeaf()) || (!cluster.containsLeaf((String)GlobalMaps.taxonNameMap.getTaxonName(n.getName()))))     continue;
    concluster.addLeaf(n.getName());
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ngtTaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ngtTaxa);
    intersect=0;
    virtualbs=new BitSet(ngtTaxa);
    if (node.isLeaf()) {
      int index=gtTaxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,gtTaxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}","public static int getClusterCoalNum_unrootedMap(Tree tr,STITreeCluster cluster){
  Map map=new HashMap();
  List gtTaxalist=new ArrayList();
  String[] gtTaxa=tr.getLeaves();
  int ngtTaxa=gtTaxa.length;
  for (  String leaf : gtTaxa) {
    gtTaxalist.add(leaf);
  }
  STITreeCluster concluster=new STITreeCluster();
  for (  TNode n : tr.getNodes()) {
    if ((!n.isLeaf()) || (!cluster.containsLeaf((String)GlobalMaps.taxonNameMap.getTaxonName(n.getName()))))     continue;
    concluster.addLeaf(GlobalMaps.taxonIdentifier.taxonId(n.getName()));
  }
  Object coveragelist=new ArrayList();
  for (int i=concluster.getBitSet().nextSetBit(0); i >= 0; i=concluster.getBitSet().nextSetBit(i + 1)) {
    BitSet bs=new BitSet(ngtTaxa);
    ((BitSet)bs).set(i);
    ((List)coveragelist).add(bs);
  }
  int intersect;
  BitSet virtualbs;
  for (Object tn=tr.postTraverse().iterator(); ((Iterator)tn).hasNext(); ) {
    TNode node=(TNode)((Iterator)tn).next();
    if (((List)coveragelist).size() <= 1) {
      break;
    }
    BitSet bs=new BitSet(ngtTaxa);
    intersect=0;
    virtualbs=new BitSet(ngtTaxa);
    if (node.isLeaf()) {
      int index=gtTaxalist.indexOf(node.getName());
      bs.set(index);
      map.put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet v=(BitSet)map.get(child);
        bs.or(v);
        if (concluster.containsCluster(v)) {
          intersect++;
          virtualbs.or(v);
        }
      }
      if ((concluster.containsCluster(bs)) || (intersect > 1)) {
        if (concluster.containsCluster(bs)) {
          virtualbs=bs;
        }
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)virtualbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(virtualbs);
      }
      map.put(node,bs);
    }
    if (!node.isRoot()) {
      BitSet complementbs=(BitSet)bs.clone();
      complementbs.flip(0,gtTaxa.length);
      if (intersect > 0) {
        complementbs.or(virtualbs);
      }
      if (concluster.containsCluster(complementbs)) {
        for (int i=0; i < ((List)coveragelist).size(); i++) {
          BitSet exbs=(BitSet)((List)coveragelist).get(i);
          BitSet temp=(BitSet)complementbs.clone();
          temp.and(exbs);
          if (temp.equals(exbs)) {
            ((List)coveragelist).remove(i);
            i--;
          }
        }
        ((List)coveragelist).add(complementbs);
        break;
      }
    }
  }
  return Math.max(0,((List)coveragelist).size() - 1);
}",0.9932860872808652
125186,"void addExtraBipartitionsByInput(ClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  String[] leaves=stTaxa;
  int n=leaves.length;
  for (  Tree tr : trees) {
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String treeName=node.getName();
        String nodeName=getSpeciesName(treeName);
        STITreeCluster tb=new STITreeCluster();
        tb.addLeaf(nodeName);
        nodeToSTCluster.put(node,tb);
        if (!extraTreeRooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        addToClusters(cluster,cluster.getClusterSize(),false);
        nodeToSTCluster.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,false);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}","void addExtraBipartitionsByInput(ClusterCollection extraClusters,List<Tree> trees,boolean extraTreeRooted){
  String[] leaves=stTaxa;
  int n=leaves.length;
  for (  Tree tr : trees) {
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String treeName=node.getName();
        String nodeName=getSpeciesName(treeName);
        STITreeCluster tb=new STITreeCluster();
        tb.addLeaf(GlobalMaps.taxonIdentifier.taxonId(nodeName));
        nodeToSTCluster.put(node,tb);
        if (!extraTreeRooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        addToClusters(cluster,cluster.getClusterSize(),false);
        nodeToSTCluster.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,false);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=extraClusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
}",0.990201415351116
125187,"double computeTreeSTBipartitions(MGDInference_DP inference){
  double unweigthedConstant=0;
  double weightedConstant=0;
  int k=inference.trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  boolean duploss=(inference.optimizeDuploss == 3);
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeInvalidSTBCont=new HashMap<AbstractMap.SimpleEntry<STITreeCluster,STITreeCluster>,Integer>();
  STITreeCluster all=new STITreeCluster();
  for (int i=0; i < stTaxa.length; i++) {
    all.addLeaf(i);
  }
  addToClusters(all,leaves.length,false);
  for (int t=0; t < inference.trees.size(); t++) {
    Tree tr=inference.trees.get(t);
    STITreeCluster allInducedByGT=new STITreeCluster();
    String[] gtLeaves=tr.getLeaves();
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    treeAlls.add(allInducedByGT);
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    weightedConstant+=duploss ? 2 * (allInducedByGTSize - 1) : 0;
    unweigthedConstant+=(tr.getLeafCount() - 1);
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=getSpeciesName(node.getName());
        STITreeCluster cluster=new STITreeCluster();
        cluster.addLeaf(nodeName);
        addToClusters(cluster,1,true);
        nodeToSTCluster.put(node,cluster);
        if (!rooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(cluster,size,true);
        nodeToSTCluster.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,true);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + geneTreeSTBCount.size());
  System.err.println(""String_Node_Str"" + s);
  s=clusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size() * 2);
  if (inference.DLbdWeigth == -1) {
    inference.DLbdWeigth=(weightedConstant + 2 * k + 0.0D) / 2 * (k * n);
    System.out.println(""String_Node_Str"" + inference.DLbdWeigth);
  }
  return (unweigthedConstant + (1 - inference.DLbdWeigth) * weightedConstant);
}","double computeTreeSTBipartitions(MGDInference_DP inference){
  double unweigthedConstant=0;
  double weightedConstant=0;
  int k=inference.trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  boolean duploss=(inference.optimizeDuploss == 3);
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeInvalidSTBCont=new HashMap<AbstractMap.SimpleEntry<STITreeCluster,STITreeCluster>,Integer>();
  STITreeCluster all=new STITreeCluster();
  for (int i=0; i < stTaxa.length; i++) {
    all.addLeaf(i);
  }
  addToClusters(all,leaves.length,false);
  for (int t=0; t < inference.trees.size(); t++) {
    Tree tr=inference.trees.get(t);
    STITreeCluster allInducedByGT=new STITreeCluster();
    String[] gtLeaves=tr.getLeaves();
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      allInducedByGT.addLeaf(GlobalMaps.taxonIdentifier.taxonId(getSpeciesName(l)));
    }
    treeAlls.add(allInducedByGT);
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    weightedConstant+=duploss ? 2 * (allInducedByGTSize - 1) : 0;
    unweigthedConstant+=(tr.getLeafCount() - 1);
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (    TNode node : tr.postTraverse()) {
      if (node.isLeaf()) {
        String nodeName=getSpeciesName(node.getName());
        STITreeCluster cluster=new STITreeCluster();
        cluster.addLeaf(GlobalMaps.taxonIdentifier.taxonId(nodeName));
        addToClusters(cluster,1,true);
        nodeToSTCluster.put(node,cluster);
        if (!rooted) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (        TNode child : node.getChildren()) {
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getBitSet());
        }
        STITreeCluster cluster=new STITreeCluster();
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(cluster,size,true);
        nodeToSTCluster.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingSTB(l_cluster,r_cluster,cluster,node,true);
        }
 else {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + geneTreeSTBCount.size());
  System.err.println(""String_Node_Str"" + s);
  s=clusters.getClusterCount();
  System.err.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size() * 2);
  if (inference.DLbdWeigth == -1) {
    inference.DLbdWeigth=(weightedConstant + 2 * k + 0.0D) / 2 * (k * n);
    System.out.println(""String_Node_Str"" + inference.DLbdWeigth);
  }
  return (unweigthedConstant + (1 - inference.DLbdWeigth) * weightedConstant);
}",0.9876007439553628
125188,"public int taxonCount(){
  return idToName.size();
}","public int taxonCount(){
  return taxonCount;
}",0.7676767676767676
125189,"public Integer taxonId(String name){
  if (!nameToId.containsKey(name)) {
    nameToId.put(name,idToName.size());
    idToName.add(name);
  }
  return nameToId.get(name);
}","public Integer taxonId(String name){
  Integer a=nameToId.get(name);
  if (a == null) {
    nameToId.put(name,taxonCount);
    idToName.add(name);
    a=taxonCount;
    taxonCount++;
  }
  return a;
}",0.5161290322580645
125190,"public String toString2(){
  StringBuffer out=new StringBuffer();
  out.append(""String_Node_Str"");
  for (  String s : getClusterLeaves()) {
    out.append(s + ""String_Node_Str"");
  }
  out.delete(out.length() - 2,out.length());
  out.append(""String_Node_Str"");
  out.append(this._cluster);
  out.append(""String_Node_Str"");
  out.append(GlobalMaps.taxonIdentifier.getTaxonList());
  out.append(""String_Node_Str"");
  out.append(GlobalMaps.taxonIdentifier.taxonCount());
  return out.toString();
}","public String toString2(){
  StringBuffer out=new StringBuffer();
  out.append(""String_Node_Str"");
  for (  String s : getClusterLeaves()) {
    out.append(s + ""String_Node_Str"");
  }
  out.delete(out.length() - 2,out.length());
  out.append(""String_Node_Str"");
  out.append(this._cluster);
  out.append(""String_Node_Str"");
  out.append(""String_Node_Str"");
  out.append(GlobalMaps.taxonIdentifier.taxonCount());
  return out.toString();
}",0.8660235798499464
125191,"private Integer calculateDLCost(List<Integer> El,Vertex smallV,Vertex bigv){
  Integer e=0;
  List<Tree> trees=inference.trees;
  TaxonNameMap taxonNameMap=inference.taxonNameMap;
  if (inference.HomomorphicDL) {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      if (smallV.getCluster().isDisjoint(treeAll) || bigv.getCluster().isDisjoint(treeAll)) {
        continue;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=El.get(k);
    }
  }
 else {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      int extraTerms=0;
      boolean pDisJoint=smallV.getCluster().isDisjoint(treeAll);
      boolean qDisJoint=bigv.getCluster().isDisjoint(treeAll);
      if (pDisJoint && qDisJoint) {
        extraTerms=0;
      }
 else       if (!pDisJoint && !pDisJoint) {
        extraTerms=2;
      }
 else {
        extraTerms=1;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=(El.get(k) + extraTerms);
    }
  }
  return e;
}","private Integer calculateDLCost(List<Integer> El,Vertex smallV,Vertex bigv){
  Integer e=0;
  List<Tree> trees=inference.trees;
  TaxonNameMap taxonNameMap=inference.taxonNameMap;
  if (inference.HomomorphicDL) {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      if (smallV.getCluster().isDisjoint(treeAll) || bigv.getCluster().isDisjoint(treeAll)) {
        continue;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=El.get(k);
    }
  }
 else {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      int extraTerms=0;
      boolean pDisJoint=smallV.getCluster().isDisjoint(treeAll);
      boolean qDisJoint=bigv.getCluster().isDisjoint(treeAll);
      if (pDisJoint && qDisJoint) {
        extraTerms=0;
      }
 else       if (!pDisJoint && !qDisJoint) {
        extraTerms=2;
      }
 else {
        extraTerms=1;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=(El.get(k) + extraTerms);
    }
  }
  return e;
}",0.9993815708101422
125192,"private Integer calculateDLCost(List<Integer> El,Vertex smallV,Vertex bigv){
  Integer e=0;
  List<Tree> trees=inference.trees;
  TaxonNameMap taxonNameMap=inference.taxonNameMap;
  if (inference.HomomorphicDL) {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      if (smallV.getCluster().isDisjoint(treeAll) || bigv.getCluster().isDisjoint(treeAll)) {
        continue;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=El.get(k);
    }
  }
 else {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      int extraTerms=0;
      boolean pDisJoint=smallV.getCluster().isDisjoint(treeAll);
      boolean qDisJoint=bigv.getCluster().isDisjoint(treeAll);
      if (pDisJoint && qDisJoint) {
        extraTerms=0;
      }
 else       if (!pDisJoint && !pDisJoint) {
        extraTerms=2;
      }
 else {
        extraTerms=1;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=(El.get(k) + extraTerms);
    }
  }
  return e;
}","private Integer calculateDLCost(List<Integer> El,Vertex smallV,Vertex bigv){
  Integer e=0;
  List<Tree> trees=inference.trees;
  TaxonNameMap taxonNameMap=inference.taxonNameMap;
  if (inference.HomomorphicDL) {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      if (smallV.getCluster().isDisjoint(treeAll) || bigv.getCluster().isDisjoint(treeAll)) {
        continue;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=El.get(k);
    }
  }
 else {
    for (int k=0; k < trees.size(); k++) {
      Tree tr=trees.get(k);
      STITreeCluster treeAll=inference.counter.treeAlls.get(k);
      int extraTerms=0;
      boolean pDisJoint=smallV.getCluster().isDisjoint(treeAll);
      boolean qDisJoint=bigv.getCluster().isDisjoint(treeAll);
      if (pDisJoint && qDisJoint) {
        extraTerms=0;
      }
 else       if (!pDisJoint && !qDisJoint) {
        extraTerms=2;
      }
 else {
        extraTerms=1;
      }
      if (El.get(k) == null) {
        if (taxonNameMap == null) {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster()));
        }
 else {
          El.set(k,DeepCoalescencesCounter.getClusterCoalNum_rooted(tr,v.getCluster(),taxonNameMap));
        }
      }
      e+=(El.get(k) + extraTerms);
    }
  }
  return e;
}",0.9993815708101422
125193,"int computeTreeSTBipartitions(List<Tree> trees){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeRootSTBs=new HashMap<STBipartition,Integer>(k * n);
  clusterToSTBs=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(all,leaves.length);
  for (  Tree tr : trees) {
    STITreeCluster allInducedByGT=new STITreeCluster(stTaxa);
    String[] gtLeaves=tr.getLeaves();
    STITreeCluster gtAllCluster=new STITreeCluster(gtLeaves);
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      gtAllCluster.addLeaf(l);
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    Map<TNode,STITreeCluster> nodeToGTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.addLeaf(nodeName);
        nodeName=getSpeciesName(nodeName);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.addLeaf(nodeName);
        addToClusters(cluster,1);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (!rooted) {
          tryAddingGeneSTBs(cluster,treeComplementary(gtCluster,leaves),null,node,allInducedByGTSize);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        BitSet gbs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getCluster());
          gbs.or(nodeToGTCluster.get(child).getCluster());
        }
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.setCluster(gbs);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(cluster,size);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingGeneSTBs(l_cluster,r_cluster,cluster,node,allInducedByGTSize);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(gtCluster,leaves);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              tryAddingGeneSTBs(l_cluster,r_cluster,cluster,node,allInducedByGTSize);
              tryAddingGeneSTBs(r_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
              tryAddingGeneSTBs(l_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
              tryAddingGeneSTBs(lAndr_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            tryAddingGeneSTBs(l_cluster,r_cluster,null,node,allInducedByGTSize);
            tryAddingGeneSTBs(r_cluster,m_cluster,null,node,allInducedByGTSize);
            tryAddingGeneSTBs(l_cluster,m_cluster,null,node,allInducedByGTSize);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + geneTreeSTBCount.size());
  System.err.println(""String_Node_Str"" + s);
  s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size());
  return sigmaN;
}","int computeTreeSTBipartitions(List<Tree> trees,boolean duploss){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeRootSTBs=new HashMap<STBipartition,Integer>(k * n);
  clusterToSTBs=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(all,leaves.length);
  for (  Tree tr : trees) {
    STITreeCluster allInducedByGT=new STITreeCluster(stTaxa);
    String[] gtLeaves=tr.getLeaves();
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    sigmaN+=duploss ? (tr.getLeafCount() + 2 * allInducedByGTSize - 3) : (tr.getLeafCount() - 1);
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    Map<TNode,STITreeCluster> nodeToGTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.addLeaf(nodeName);
        nodeName=getSpeciesName(nodeName);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.addLeaf(nodeName);
        addToClusters(cluster,1);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (!rooted) {
          tryAddingGeneSTBs(cluster,treeComplementary(gtCluster,leaves),null,node,allInducedByGTSize);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        BitSet gbs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getCluster());
          gbs.or(nodeToGTCluster.get(child).getCluster());
        }
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.setCluster(gbs);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(cluster,size);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingGeneSTBs(l_cluster,r_cluster,cluster,node,allInducedByGTSize);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(gtCluster,leaves);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              tryAddingGeneSTBs(l_cluster,r_cluster,cluster,node,allInducedByGTSize);
              tryAddingGeneSTBs(r_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
              tryAddingGeneSTBs(l_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
              tryAddingGeneSTBs(lAndr_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            tryAddingGeneSTBs(l_cluster,r_cluster,null,node,allInducedByGTSize);
            tryAddingGeneSTBs(r_cluster,m_cluster,null,node,allInducedByGTSize);
            tryAddingGeneSTBs(l_cluster,m_cluster,null,node,allInducedByGTSize);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + geneTreeSTBCount.size());
  System.err.println(""String_Node_Str"" + s);
  s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size());
  return sigmaN;
}",0.9830541871921182
125194,"public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonNameMap != null && taxonNameMap.taxonMap != null) {
    Map<String,String> taxonMap=taxonNameMap.taxonMap;
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else   if (taxonNameMap != null && taxonNameMap.taxonMap == null) {
    Set<String> taxalist=new HashSet<String>();
    Set<String> genelist=new HashSet<String>();
    for (    Tree tr : trees) {
      String[] leaves=tr.getLeaves();
      for (int i=0; i < leaves.length; i++) {
        String leaf=leaves[i];
        genelist.add(leaf);
        taxalist.add(taxonNameMap.getTaxonName(leaf));
      }
    }
    stTaxa=new String[taxalist.size()];
    gtTaxa=new String[genelist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    index=0;
    for (    String gene : genelist) {
      gtTaxa[(index++)]=gene;
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonNameMap == null && false) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.err.println(""String_Node_Str"" + stTaxa.length);
  System.err.println(""String_Node_Str"" + Arrays.toString(stTaxa));
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted,taxonNameMap,clusters);
  int sigmaN=counter.computeTreeSTBipartitions(trees);
  if (extraTrees != null) {
    counter.addExtraBipartitionsByInput(clusters,extraTrees,extrarooted);
  }
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,extraTrees);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=(optimizeDuploss == 3) ? sigmaN + 2 * (stTaxa.length - 1) * trees.size() : sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonNameMap);
  if (taxonNameMap == null && rooted && extraTrees == null && false) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}","public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonNameMap != null && taxonNameMap.taxonMap != null) {
    Map<String,String> taxonMap=taxonNameMap.taxonMap;
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else   if (taxonNameMap != null && taxonNameMap.taxonMap == null) {
    Set<String> taxalist=new HashSet<String>();
    Set<String> genelist=new HashSet<String>();
    for (    Tree tr : trees) {
      String[] leaves=tr.getLeaves();
      for (int i=0; i < leaves.length; i++) {
        String leaf=leaves[i];
        genelist.add(leaf);
        taxalist.add(taxonNameMap.getTaxonName(leaf));
      }
    }
    stTaxa=new String[taxalist.size()];
    gtTaxa=new String[genelist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    index=0;
    for (    String gene : genelist) {
      gtTaxa[(index++)]=gene;
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonNameMap == null && false) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.err.println(""String_Node_Str"" + stTaxa.length);
  System.err.println(""String_Node_Str"" + Arrays.toString(stTaxa));
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted,taxonNameMap,clusters);
  int sigmaN=counter.computeTreeSTBipartitions(trees,optimizeDuploss == 3);
  if (extraTrees != null) {
    counter.addExtraBipartitionsByInput(clusters,extraTrees,extrarooted);
  }
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,extraTrees);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonNameMap);
  if (taxonNameMap == null && rooted && extraTrees == null && false) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}",0.9859196245233206
125195,"int calculateMissingWeight(){
  System.err.print(""String_Node_Str"" + biggerSTB);
  Integer count=geneTreeSTBCount.get(biggerSTB);
  count=count != null ? count : 0;
  int weight=count;
  for (int j=biggerSTB.c.getClusterSize() - 1; j > 1; j--) {
    Set<STBipartition> smallerSTBs=geneTreeSTBBySize.get(j);
    for (    STBipartition smallerSTB : smallerSTBs) {
      if (smallerSTB.isDominatedBy(biggerSTB)) {
        weight+=geneTreeSTBCount.get(smallerSTB);
      }
    }
  }
  System.err.print(""String_Node_Str"" + weight);
  if (!rooted) {
    for (    STBipartition rootSTB : geneTreeRootSTBs.keySet()) {
      int c=geneTreeRootSTBs.get(rootSTB);
      STBipartition inducedSTB=biggerSTB.getInducedSTB(rootSTB.c);
      if (inducedSTB.equals(rootSTB)) {
        weight-=2 * c;
        System.err.print(""String_Node_Str"" + rootSTB + ""String_Node_Str""+ c+ ""String_Node_Str""+ weight);
        if (inducedSTB.cluster1.getClusterSize() != 1 && inducedSTB.cluster2.getClusterSize() != 1) {
          weight-=2 * c;
          System.err.print(""String_Node_Str"" + weight);
        }
      }
    }
  }
  System.err.println();
  weights.put(biggerSTB,weight);
  return weight;
}","int calculateMissingWeight(){
  Integer count=geneTreeSTBCount.get(biggerSTB);
  count=count != null ? count : 0;
  int weight=count;
  for (int j=biggerSTB.c.getClusterSize() - 1; j > 1; j--) {
    Set<STBipartition> smallerSTBs=geneTreeSTBBySize.get(j);
    for (    STBipartition smallerSTB : smallerSTBs) {
      if (smallerSTB.isDominatedBy(biggerSTB)) {
        weight+=geneTreeSTBCount.get(smallerSTB);
      }
    }
  }
  if (!rooted) {
    for (    STBipartition rootSTB : geneTreeRootSTBs.keySet()) {
      int c=geneTreeRootSTBs.get(rootSTB);
      STBipartition inducedSTB=biggerSTB.getInducedSTB(rootSTB.c);
      if (inducedSTB.equals(rootSTB)) {
        weight-=2 * c;
        if (inducedSTB.cluster1.getClusterSize() != 1 && inducedSTB.cluster2.getClusterSize() != 1) {
          weight-=2 * c;
        }
      }
    }
  }
  weights.put(biggerSTB,weight);
  return weight;
}",0.6337209302325582
125196,"int computeTreeSTBipartitions(List<Tree> trees,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeRootSTBs=new HashMap<STBipartition,Integer>(k * n);
  clusterToSTBs=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    HashSet<STBipartition> addedSoFar=new HashSet<STBipartition>();
    STITreeCluster allInducedByGT=new STITreeCluster(stTaxa);
    String[] gtLeaves=tr.getLeaves();
    STITreeCluster gtAllCluster=new STITreeCluster(gtLeaves);
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      gtAllCluster.addLeaf(l);
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    System.err.println(""String_Node_Str"" + gtAllCluster);
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    Map<TNode,STITreeCluster> nodeToGTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.addLeaf(nodeName);
        nodeName=getSpeciesName(nodeName);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.addLeaf(nodeName);
        addToClusters(clusters,cluster,1);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (!rooted) {
          tryAddingGeneSTBs(clusters,cluster,treeComplementary(gtCluster,leaves),null,node,addedSoFar,allInducedByGTSize);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        BitSet gbs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getCluster());
          gbs.or(nodeToGTCluster.get(child).getCluster());
        }
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.setCluster(gbs);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,addedSoFar,allInducedByGTSize);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(gtCluster,leaves);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,r_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,l_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,lAndr_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            tryAddingGeneSTBs(clusters,l_cluster,r_cluster,null,node,addedSoFar,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,r_cluster,m_cluster,null,node,addedSoFar,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,l_cluster,m_cluster,null,node,addedSoFar,allInducedByGTSize);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  System.err.println(""String_Node_Str"" + geneTreeSTBCount);
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + s);
  s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + clusters.size());
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size());
  return sigmaN;
}","int computeTreeSTBipartitions(List<Tree> trees,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeRootSTBs=new HashMap<STBipartition,Integer>(k * n);
  clusterToSTBs=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    HashSet<STBipartition> addedSoFar=new HashSet<STBipartition>();
    STITreeCluster allInducedByGT=new STITreeCluster(stTaxa);
    String[] gtLeaves=tr.getLeaves();
    STITreeCluster gtAllCluster=new STITreeCluster(gtLeaves);
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      gtAllCluster.addLeaf(l);
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    Map<TNode,STITreeCluster> nodeToGTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.addLeaf(nodeName);
        nodeName=getSpeciesName(nodeName);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.addLeaf(nodeName);
        addToClusters(clusters,cluster,1);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (!rooted) {
          tryAddingGeneSTBs(clusters,cluster,treeComplementary(gtCluster,leaves),null,node,addedSoFar,allInducedByGTSize);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        BitSet gbs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getCluster());
          gbs.or(nodeToGTCluster.get(child).getCluster());
        }
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.setCluster(gbs);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,addedSoFar,allInducedByGTSize);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(gtCluster,leaves);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,r_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,l_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,lAndr_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            tryAddingGeneSTBs(clusters,l_cluster,r_cluster,null,node,addedSoFar,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,r_cluster,m_cluster,null,node,addedSoFar,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,l_cluster,m_cluster,null,node,addedSoFar,allInducedByGTSize);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + s);
  s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + clusters.size());
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size());
  return sigmaN;
}",0.96757457846952
125197,"public static void main(String[] args){
  if ((args == null) || args.length == 0 || (args[0].equals(""String_Node_Str"")) || (args.length < 1)) {
    printUsage();
    return;
  }
  boolean optimizeDuploss=false;
  boolean rooted=true;
  boolean fast=false;
  boolean extrarooted=true;
  Map<String,String> taxonMap=null;
  String rep=null;
  String pattern=null;
  List<Tree> trees=null;
  List<Tree> extraTrees=null;
  String output=null;
  double bootstrap=1.0D;
  double time=-1.0D;
  boolean unresolved=false;
  long startTime=System.currentTimeMillis();
  String line;
  BufferedReader treeBufferReader=null;
  BufferedReader extraTreebuffer=null;
  try {
    List<String[]> options=getOptions(args);
    for (    String[] option : options) {
      if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        treeBufferReader=new BufferedReader(new FileReader(option[1]));
        trees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        extraTreebuffer=new BufferedReader(new FileReader(option[1]));
        extraTrees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) && (option.length != 3)) {
          printUsage();
          return;
        }
        if (option.length == 2) {
          BufferedReader br=new BufferedReader(new FileReader(option[1]));
          taxonMap=new HashMap<String,String>();
          while ((line=br.readLine()) != null) {
            String[] mapString=line.trim().split(""String_Node_Str"");
            for (            String s : mapString) {
              String species=s.substring(0,s.indexOf(""String_Node_Str"")).trim();
              s=s.substring(s.indexOf(""String_Node_Str"") + 1);
              String[] alleles=s.split(""String_Node_Str"");
              for (              String allele : alleles) {
                allele=allele.trim();
                if (taxonMap.containsKey(allele)) {
                  System.err.println(""String_Node_Str"");
                  System.err.println(""String_Node_Str"");
                  System.exit(-1);
                }
 else {
                  taxonMap.put(allele,species);
                }
              }
            }
          }
          br.close();
        }
 else {
          pattern=option[1];
          rep=option[2];
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        output=option[1];
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          bootstrap=Double.parseDouble(option[1]);
          if ((bootstrap <= 1.0D) && (bootstrap > 0.0D))           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        unresolved=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1)) {
          printUsage();
          return;
        }
        fast=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        rooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        extrarooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) || (unresolved)) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          time=Double.parseDouble(option[1]);
          if (time > 0.0D)           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
        optimizeDuploss=true;
      }
 else {
        printUsage();
        return;
      }
    }
    if (treeBufferReader == null) {
      System.err.println(""String_Node_Str"");
      printUsage();
      return;
    }
    System.err.println(""String_Node_Str"" + (rooted ? ""String_Node_Str"" : ""String_Node_Str""));
    int l=0;
    try {
      while ((line=treeBufferReader.readLine()) != null) {
        l++;
        Set<String> previousTreeTaxa=new HashSet<String>();
        if (line.length() > 0) {
          NewickReader nr=new NewickReader(new StringReader(line));
          if (rooted) {
            STITree gt=new STITree(true);
            nr.readTree(gt);
            if (previousTreeTaxa.isEmpty()) {
              previousTreeTaxa.addAll(Arrays.asList(gt.getLeaves()));
            }
 else {
              if (!previousTreeTaxa.containsAll(Arrays.asList(gt.getLeaves()))) {
                throw new RuntimeException(""String_Node_Str"" + gt.getLeaves() + ""String_Node_Str""+ previousTreeTaxa);
              }
            }
            trees.add(gt);
          }
 else {
            Tree tr=nr.readTree();
            trees.add(tr);
          }
        }
      }
      treeBufferReader.close();
    }
 catch (    ParseException e) {
      treeBufferReader.close();
      throw new RuntimeException(""String_Node_Str"" + l,e);
    }
    if (extraTreebuffer != null) {
      while ((line=extraTreebuffer.readLine()) != null) {
        if (line.length() > 0) {
          NewickReader nr=new NewickReader(new StringReader(line));
          if (extrarooted) {
            STITree gt=new STITree(true);
            nr.readTree(gt);
            extraTrees.add(gt);
          }
 else {
            Tree tr=nr.readTree();
            extraTrees.add(tr);
          }
        }
      }
      extraTreebuffer.close();
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
catch (  ParseException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
  if (trees.size() == 0) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  startTime=System.currentTimeMillis();
  MGDInference_DP inference;
  if (rep != null) {
    inference=new MGDInference_DP(trees,extraTrees,pattern,rep);
  }
 else   if (taxonMap != null) {
    inference=new MGDInference_DP(trees,extraTrees,taxonMap);
  }
 else {
    inference=new MGDInference_DP(trees,extraTrees);
  }
  inference.optimizeDuploss=optimizeDuploss ? 3 : 1;
  inference.rooted=rooted;
  inference.fast=fast;
  inference.extrarooted=extrarooted;
  List<Solution> solutions=inference.inferSpeciesTree();
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  if ((output == null) && (_print)) {
    for (    Solution s : solutions)     System.out.println(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ (optimizeDuploss ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
 else   try {
    FileWriter fw=new FileWriter(output);
    for (    Solution s : solutions) {
      if (_print) {
        fw.write(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
 else {
        fw.write(s._st.toString() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
    }
    fw.close();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
  }
}","public static void main(String[] args){
  if ((args == null) || args.length == 0 || (args[0].equals(""String_Node_Str"")) || (args.length < 1)) {
    printUsage();
    return;
  }
  boolean optimizeDuploss=false;
  boolean rooted=true;
  boolean fast=false;
  boolean extrarooted=true;
  Map<String,String> taxonMap=null;
  String rep=null;
  String pattern=null;
  List<Tree> trees=null;
  List<Tree> extraTrees=null;
  String output=null;
  double bootstrap=1.0D;
  double time=-1.0D;
  boolean unresolved=false;
  long startTime=System.currentTimeMillis();
  String line;
  BufferedReader treeBufferReader=null;
  BufferedReader extraTreebuffer=null;
  try {
    List<String[]> options=getOptions(args);
    for (    String[] option : options) {
      if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        treeBufferReader=new BufferedReader(new FileReader(option[1]));
        trees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        extraTreebuffer=new BufferedReader(new FileReader(option[1]));
        extraTrees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) && (option.length != 3)) {
          printUsage();
          return;
        }
        if (option.length == 2) {
          BufferedReader br=new BufferedReader(new FileReader(option[1]));
          taxonMap=new HashMap<String,String>();
          while ((line=br.readLine()) != null) {
            String[] mapString=line.trim().split(""String_Node_Str"");
            for (            String s : mapString) {
              String species=s.substring(0,s.indexOf(""String_Node_Str"")).trim();
              s=s.substring(s.indexOf(""String_Node_Str"") + 1);
              String[] alleles=s.split(""String_Node_Str"");
              for (              String allele : alleles) {
                allele=allele.trim();
                if (taxonMap.containsKey(allele)) {
                  System.err.println(""String_Node_Str"");
                  System.err.println(""String_Node_Str"");
                  System.exit(-1);
                }
 else {
                  taxonMap.put(allele,species);
                }
              }
            }
          }
          br.close();
        }
 else {
          pattern=option[1];
          rep=option[2];
          if (rep.equals(""String_Node_Str"")) {
            rep=""String_Node_Str"";
          }
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        output=option[1];
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          bootstrap=Double.parseDouble(option[1]);
          if ((bootstrap <= 1.0D) && (bootstrap > 0.0D))           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        unresolved=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1)) {
          printUsage();
          return;
        }
        fast=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        rooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        extrarooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) || (unresolved)) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          time=Double.parseDouble(option[1]);
          if (time > 0.0D)           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
        optimizeDuploss=true;
      }
 else {
        printUsage();
        return;
      }
    }
    if (treeBufferReader == null) {
      System.err.println(""String_Node_Str"");
      printUsage();
      return;
    }
    System.err.println(""String_Node_Str"" + (rooted ? ""String_Node_Str"" : ""String_Node_Str""));
    int l=0;
    try {
      while ((line=treeBufferReader.readLine()) != null) {
        l++;
        Set<String> previousTreeTaxa=new HashSet<String>();
        if (line.length() > 0) {
          NewickReader nr=new NewickReader(new StringReader(line));
          if (rooted) {
            STITree gt=new STITree(true);
            nr.readTree(gt);
            if (previousTreeTaxa.isEmpty()) {
              previousTreeTaxa.addAll(Arrays.asList(gt.getLeaves()));
            }
 else {
              if (!previousTreeTaxa.containsAll(Arrays.asList(gt.getLeaves()))) {
                throw new RuntimeException(""String_Node_Str"" + gt.getLeaves() + ""String_Node_Str""+ previousTreeTaxa);
              }
            }
            trees.add(gt);
          }
 else {
            Tree tr=nr.readTree();
            trees.add(tr);
          }
        }
      }
      treeBufferReader.close();
    }
 catch (    ParseException e) {
      treeBufferReader.close();
      throw new RuntimeException(""String_Node_Str"" + l,e);
    }
    if (extraTreebuffer != null) {
      while ((line=extraTreebuffer.readLine()) != null) {
        if (line.length() > 0) {
          NewickReader nr=new NewickReader(new StringReader(line));
          if (extrarooted) {
            STITree gt=new STITree(true);
            nr.readTree(gt);
            extraTrees.add(gt);
          }
 else {
            Tree tr=nr.readTree();
            extraTrees.add(tr);
          }
        }
      }
      extraTreebuffer.close();
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
catch (  ParseException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
  if (trees.size() == 0) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  startTime=System.currentTimeMillis();
  MGDInference_DP inference;
  if (rep != null) {
    inference=new MGDInference_DP(trees,extraTrees,pattern,rep);
  }
 else   if (taxonMap != null) {
    inference=new MGDInference_DP(trees,extraTrees,taxonMap);
  }
 else {
    inference=new MGDInference_DP(trees,extraTrees);
  }
  inference.optimizeDuploss=optimizeDuploss ? 3 : 1;
  inference.rooted=rooted;
  inference.fast=fast;
  inference.extrarooted=extrarooted;
  List<Solution> solutions=inference.inferSpeciesTree();
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  if ((output == null) && (_print)) {
    for (    Solution s : solutions)     System.out.println(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ (optimizeDuploss ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
 else   try {
    FileWriter fw=new FileWriter(output);
    for (    Solution s : solutions) {
      if (_print) {
        fw.write(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
 else {
        fw.write(s._st.toString() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
    }
    fw.close();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
  }
}",0.994703628577868
125198,"private List<Solution> findTreesByDP(String[] stTaxa,DuplicationWeightCounter counter,List<Tree> trees,TaxonNameMap taxonNameMap){
  List<Solution> solutions=new ArrayList<Solution>();
  clusterToVertex=new HashMap<STITreeCluster,Vertex>(sigmaNs);
  for (  Set<Vertex> vs : clusters.values()) {
    for (    Vertex vertex : vs) {
      vertex._max_score=-1;
      clusterToVertex.put(vertex._cluster,vertex);
    }
  }
  Vertex all=(Vertex)clusters.get(Integer.valueOf(stTaxa.length)).toArray()[0];
  System.err.println(""String_Node_Str"" + sigmaNs);
  System.err.println(""String_Node_Str"" + all._cluster.getClusterSize());
  try {
    ComputeMinCostTask allTask=new ComputeMinCostTask(this,all);
    ForkJoinPool pool=new ForkJoinPool(1);
    pool.invoke(allTask);
    Integer v=all._max_score;
    if (v == -2) {
      throw new CannotResolveException(all._cluster.toString());
    }
  }
 catch (  CannotResolveException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"",e);
  }
  if (_print) {
    System.err.println(""String_Node_Str"" + counter.weights);
  }
  List minClusters=new LinkedList();
  List coals=new LinkedList();
  Stack minVertices=new Stack();
  if (all._min_rc != null) {
    minVertices.push(all._min_rc);
  }
  if (all._min_lc != null) {
    minVertices.push(all._min_lc);
  }
  if (all._subcl != null) {
    for (    Vertex v : all._subcl) {
      minVertices.push(v);
    }
  }
  while (!minVertices.isEmpty()) {
    Vertex pe=(Vertex)minVertices.pop();
    minClusters.add(pe._cluster);
    if (pe._min_rc != null) {
      minVertices.push(pe._min_rc);
    }
    if (pe._min_lc != null) {
      minVertices.push(pe._min_lc);
    }
    if (pe._min_lc != null && pe._min_rc != null) {
      coals.add(pe._c);
    }
 else {
      coals.add(0);
    }
    if (pe._subcl != null) {
      for (      Vertex v : pe._subcl) {
        minVertices.push(v);
      }
    }
  }
  Solution sol=new Solution();
  if ((minClusters == null) || (minClusters.isEmpty())) {
    System.err.println(""String_Node_Str"");
    Object tr=new STITree();
    for (    String s : stTaxa) {
      ((MutableTree)tr).getRoot().createChild(s);
    }
    sol._st=((Tree)tr);
  }
 else {
    sol._st=buildTreeFromClusters(minClusters);
  }
  System.err.println(""String_Node_Str"" + sol._st);
  System.err.println(""String_Node_Str"" + coals);
  Object map=new HashMap();
  for (  TNode node : sol._st.postTraverse()) {
    BitSet bs=new BitSet(stTaxa.length);
    if (node.isLeaf()) {
      for (int i=0; i < stTaxa.length; i++) {
        if (node.getName().equals(stTaxa[i])) {
          bs.set(i);
          break;
        }
      }
      ((Map)map).put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet childCluster=(BitSet)((Map)map).get(child);
        bs.or(childCluster);
      }
      ((Map)map).put(node,bs);
    }
    STITreeCluster c=new STITreeCluster(stTaxa);
    c.setCluster(bs);
    if (c.getClusterSize() == stTaxa.length) {
      ((STINode)node).setData(Integer.valueOf(0));
    }
 else {
      int pos=minClusters.indexOf(c);
      ((STINode)node).setData((Integer)coals.get(pos));
    }
  }
  sol._totalCoals=all._min_cost;
  System.out.println(""String_Node_Str"" + all._min_cost);
  solutions.add(sol);
  return (List<Solution>)(List<Solution>)solutions;
}","private List<Solution> findTreesByDP(String[] stTaxa,DuplicationWeightCounter counter,List<Tree> trees,TaxonNameMap taxonNameMap){
  List<Solution> solutions=new ArrayList<Solution>();
  clusterToVertex=new HashMap<STITreeCluster,Vertex>(sigmaNs);
  for (  Set<Vertex> vs : clusters.values()) {
    for (    Vertex vertex : vs) {
      vertex._max_score=-1;
      clusterToVertex.put(vertex._cluster,vertex);
    }
  }
  Vertex all=(Vertex)clusters.get(Integer.valueOf(stTaxa.length)).toArray()[0];
  System.err.println(""String_Node_Str"" + sigmaNs);
  System.err.println(""String_Node_Str"" + all._cluster.getClusterSize());
  try {
    ComputeMinCostTask allTask=new ComputeMinCostTask(this,all);
    ForkJoinPool pool=new ForkJoinPool(1);
    pool.invoke(allTask);
    Integer v=all._max_score;
    if (v == -2) {
      throw new CannotResolveException(all._cluster.toString());
    }
  }
 catch (  CannotResolveException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"",e);
  }
  if (_print) {
  }
  List minClusters=new LinkedList();
  List coals=new LinkedList();
  Stack minVertices=new Stack();
  if (all._min_rc != null) {
    minVertices.push(all._min_rc);
  }
  if (all._min_lc != null) {
    minVertices.push(all._min_lc);
  }
  if (all._subcl != null) {
    for (    Vertex v : all._subcl) {
      minVertices.push(v);
    }
  }
  while (!minVertices.isEmpty()) {
    Vertex pe=(Vertex)minVertices.pop();
    minClusters.add(pe._cluster);
    if (pe._min_rc != null) {
      minVertices.push(pe._min_rc);
    }
    if (pe._min_lc != null) {
      minVertices.push(pe._min_lc);
    }
    if (pe._min_lc != null && pe._min_rc != null) {
      coals.add(pe._c);
    }
 else {
      coals.add(0);
    }
    if (pe._subcl != null) {
      for (      Vertex v : pe._subcl) {
        minVertices.push(v);
      }
    }
  }
  Solution sol=new Solution();
  if ((minClusters == null) || (minClusters.isEmpty())) {
    System.err.println(""String_Node_Str"");
    Object tr=new STITree();
    for (    String s : stTaxa) {
      ((MutableTree)tr).getRoot().createChild(s);
    }
    sol._st=((Tree)tr);
  }
 else {
    sol._st=buildTreeFromClusters(minClusters);
  }
  Object map=new HashMap();
  for (  TNode node : sol._st.postTraverse()) {
    BitSet bs=new BitSet(stTaxa.length);
    if (node.isLeaf()) {
      for (int i=0; i < stTaxa.length; i++) {
        if (node.getName().equals(stTaxa[i])) {
          bs.set(i);
          break;
        }
      }
      ((Map)map).put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet childCluster=(BitSet)((Map)map).get(child);
        bs.or(childCluster);
      }
      ((Map)map).put(node,bs);
    }
    STITreeCluster c=new STITreeCluster(stTaxa);
    c.setCluster(bs);
    if (c.getClusterSize() == stTaxa.length) {
      ((STINode)node).setData(Integer.valueOf(0));
    }
 else {
      int pos=minClusters.indexOf(c);
      ((STINode)node).setData((Integer)coals.get(pos));
    }
  }
  sol._totalCoals=all._min_cost;
  System.out.println(""String_Node_Str"" + all._min_cost);
  solutions.add(sol);
  return (List<Solution>)(List<Solution>)solutions;
}",0.975234579295493
125199,"public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonMap != null) {
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonMap == null) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.out.println(""String_Node_Str"" + stTaxa.length);
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted);
  int sigmaN=counter.computeTreeSTBipartitions(trees,taxonMap,clusters);
  counter.addExtraBipartitionsByInput(clusters,extraTrees);
  counter.calculateWeightsByLCA(extraTrees,trees);
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,taxonMap);
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=optimizeDuploss ? sigmaN + 2 * (stTaxa.length - 1) * trees.size() : sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonMap);
  if (taxonMap == null && rooted && extraTrees == null) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}","public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonMap != null) {
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonMap == null) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.out.println(""String_Node_Str"" + stTaxa.length);
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted);
  int sigmaN=counter.computeTreeSTBipartitions(trees,taxonMap,clusters);
  if (extraTrees != null) {
    counter.addExtraBipartitionsByInput(clusters,extraTrees);
    counter.calculateWeightsByLCA(extraTrees,trees);
  }
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,taxonMap);
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=optimizeDuploss ? sigmaN + 2 * (stTaxa.length - 1) * trees.size() : sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonMap);
  if (taxonMap == null && rooted && extraTrees == null) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}",0.9930286599535244
125200,"void addExtraBipartitionsByInput(Map<Integer,Set<Vertex>> clusters,List<Tree> trees,Map<String,String> taxonMap,boolean extraTreeRooted){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  STITreeCluster all=clusters.get(n).iterator().next()._cluster;
  for (  Tree tr : trees) {
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.get(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        map.put(node,tb);
        if (!extraTreeRooted) {
          addSTBToX(clusters,tb,tb.complementaryCluster(),all);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        map.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTBToX(clusters,l_cluster,r_cluster,cluster);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=cluster.complementaryCluster();
            STITreeCluster lAndr_cluster=cluster;
            addSTBToX(clusters,l_cluster,r_cluster,cluster);
            addSTBToX(clusters,r_cluster,allMinuslAndr_cluster,l_cluster.complementaryCluster());
            addSTBToX(clusters,l_cluster,allMinuslAndr_cluster,r_cluster.complementaryCluster());
            addSTBToX(clusters,lAndr_cluster,allMinuslAndr_cluster,all);
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTBToX(clusters,l_cluster,r_cluster,m_cluster.complementaryCluster());
            addSTBToX(clusters,r_cluster,m_cluster,l_cluster.complementaryCluster());
            addSTBToX(clusters,l_cluster,m_cluster,r_cluster.complementaryCluster());
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
}","void addExtraBipartitionsByInput(Map<Integer,Set<Vertex>> clusters,List<Tree> trees,Map<String,String> taxonMap,boolean extraTreeRooted){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  STITreeCluster all=clusters.get(n).iterator().next()._cluster;
  for (  Tree tr : trees) {
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.get(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        map.put(node,tb);
        if (!extraTreeRooted) {
          addSTBToX(clusters,tb,tb.complementaryCluster(),all);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        map.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTBToX(clusters,l_cluster,r_cluster,cluster);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=cluster.complementaryCluster();
            STITreeCluster lAndr_cluster=cluster;
            addSTBToX(clusters,l_cluster,r_cluster,cluster);
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              addSTBToX(clusters,r_cluster,allMinuslAndr_cluster,null);
              addSTBToX(clusters,l_cluster,allMinuslAndr_cluster,null);
              addSTBToX(clusters,lAndr_cluster,allMinuslAndr_cluster,all);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTBToX(clusters,l_cluster,r_cluster,null);
            addSTBToX(clusters,r_cluster,m_cluster,null);
            addSTBToX(clusters,l_cluster,m_cluster,null);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
}",0.9233023937469468
125201,"private void addSTB(Map<Integer,Set<Vertex>> clusters,STITreeCluster l_cluster,STITreeCluster r_cluster,STITreeCluster cluster,TNode node){
  int size=cluster.getClusterSize();
  if (l_cluster.isDisjoint(r_cluster)) {
    STBipartition stb=new STBipartition(l_cluster,r_cluster,cluster);
    geneTreeSTBBySize.get(size).add(stb);
    ((STINode)node).setData(stb);
    addSTBToX(clusters,stb);
    STBCountInGeneTrees.put(stb,STBCountInGeneTrees.containsKey(stb) ? STBCountInGeneTrees.get(stb) + 1 : 1);
  }
 else {
    BitSet and=(BitSet)l_cluster.getCluster().clone();
    and.and(r_cluster.getCluster());
    BitSet l_Minus_r=(BitSet)and.clone();
    l_Minus_r.xor(l_cluster.getCluster());
    STITreeCluster lmr=new STITreeCluster(stTaxa);
    lmr.setCluster(l_Minus_r);
    BitSet r_Minus_l=(BitSet)and.clone();
    r_Minus_l.xor(r_cluster.getCluster());
    STITreeCluster rml=new STITreeCluster(stTaxa);
    rml.setCluster(r_Minus_l);
    if (!rml.getCluster().isEmpty()) {
      addToClusters(clusters,rml,rml.getClusterSize());
      addSTBToX(clusters,new STBipartition(l_cluster,rml,cluster));
    }
    if (!lmr.getCluster().isEmpty()) {
      addToClusters(clusters,lmr,lmr.getClusterSize());
      addSTBToX(clusters,new STBipartition(lmr,r_cluster,cluster));
    }
  }
}","private void addSTB(Map<Integer,Set<Vertex>> clusters,STITreeCluster l_cluster,STITreeCluster r_cluster,STITreeCluster cluster,TNode node){
  if (cluster == null) {
    cluster=new STITreeCluster(l_cluster);
    cluster.getCluster().or(r_cluster.getCluster());
  }
  int size=cluster.getClusterSize();
  if (l_cluster.isDisjoint(r_cluster)) {
    STBipartition stb=new STBipartition(l_cluster,r_cluster,cluster);
    geneTreeSTBBySize.get(size).add(stb);
    ((STINode)node).setData(stb);
    addSTBToX(clusters,stb);
    STBCountInGeneTrees.put(stb,STBCountInGeneTrees.containsKey(stb) ? STBCountInGeneTrees.get(stb) + 1 : 1);
  }
 else {
    BitSet and=(BitSet)l_cluster.getCluster().clone();
    and.and(r_cluster.getCluster());
    BitSet l_Minus_r=(BitSet)and.clone();
    l_Minus_r.xor(l_cluster.getCluster());
    STITreeCluster lmr=new STITreeCluster(stTaxa);
    lmr.setCluster(l_Minus_r);
    BitSet r_Minus_l=(BitSet)and.clone();
    r_Minus_l.xor(r_cluster.getCluster());
    STITreeCluster rml=new STITreeCluster(stTaxa);
    rml.setCluster(r_Minus_l);
    if (!rml.getCluster().isEmpty()) {
      addToClusters(clusters,rml,rml.getClusterSize());
      addSTBToX(clusters,new STBipartition(l_cluster,rml,cluster));
    }
    if (!lmr.getCluster().isEmpty()) {
      addToClusters(clusters,lmr,lmr.getClusterSize());
      addSTBToX(clusters,new STBipartition(lmr,r_cluster,cluster));
    }
  }
}",0.9535833642777573
125202,"@Override public String toString(){
  return cluster1.toString() + ""String_Node_Str"" + cluster2.toString();
}","@Override public String toString(){
  return cluster1.toString() + ""String_Node_Str"" + cluster2.toString()+ ""String_Node_Str""+ c+ ""String_Node_Str"";
}",0.8416988416988417
125203,"int computeTreeSTBipartitions(List<Tree> trees,Map<String,String> taxonMap,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  STBCountInGeneTrees=new HashMap<STBipartition,Integer>(k * n);
  X=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.get(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        addToClusters(clusters,tb,1);
        map.put(node,tb);
        if (!rooted) {
          addSTB(clusters,tb,tb.complementaryCluster(),all,node);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        map.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTB(clusters,l_cluster,r_cluster,cluster,node);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=cluster.complementaryCluster();
            STITreeCluster lAndr_cluster=cluster;
            addSTB(clusters,l_cluster,r_cluster,cluster,node);
            addSTB(clusters,r_cluster,allMinuslAndr_cluster,l_cluster.complementaryCluster(),node);
            addSTB(clusters,l_cluster,allMinuslAndr_cluster,r_cluster.complementaryCluster(),node);
            addSTB(clusters,lAndr_cluster,allMinuslAndr_cluster,all,node);
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTB(clusters,l_cluster,r_cluster,m_cluster.complementaryCluster(),node);
            addSTB(clusters,r_cluster,m_cluster,l_cluster.complementaryCluster(),node);
            addSTB(clusters,l_cluster,m_cluster,r_cluster.complementaryCluster(),node);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + STBCountInGeneTrees.keySet().size());
  int s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.out.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(STBCountInGeneTrees.size());
  return sigmaN;
}","int computeTreeSTBipartitions(List<Tree> trees,Map<String,String> taxonMap,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  STBCountInGeneTrees=new HashMap<STBipartition,Integer>(k * n);
  X=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.get(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        addToClusters(clusters,tb,1);
        map.put(node,tb);
        if (!rooted) {
          addSTB(clusters,tb,tb.complementaryCluster(),all,node);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        map.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTB(clusters,l_cluster,r_cluster,cluster,node);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=cluster.complementaryCluster();
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              addSTB(clusters,l_cluster,r_cluster,cluster,node);
              addSTB(clusters,r_cluster,allMinuslAndr_cluster,null,node);
              addSTB(clusters,l_cluster,allMinuslAndr_cluster,null,node);
              addSTB(clusters,lAndr_cluster,allMinuslAndr_cluster,all,node);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTB(clusters,l_cluster,r_cluster,null,node);
            addSTB(clusters,r_cluster,m_cluster,null,node);
            addSTB(clusters,l_cluster,m_cluster,null,node);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + STBCountInGeneTrees.keySet().size());
  int s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.out.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(STBCountInGeneTrees.size());
  return sigmaN;
}",0.933265280081664
125204,"private int computeMinCost(Vertex v) throws CannotResolveException {
  if (v._max_score != -1) {
    return v._max_score - maxEL;
  }
  if (optimizeDuploss) {
    if (v._el_num == -1) {
      if (taxonMap == null) {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,rooted);
      }
 else {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,taxonMap,rooted);
      }
    }
  }
 else {
    v._el_num=0;
  }
{
    int clusterSize=v._cluster.getClusterSize();
    if (clusterSize <= 1) {
      v._min_cost=0;
      v._max_score=maxEL - v._el_num;
      v._min_lc=(v._min_rc=null);
      return v._max_score - maxEL;
    }
  }
  Set<STBipartition> clusterBiPartitions=counter.getClusterBiPartitions(v._cluster);
  if (clusterBiPartitions == null) {
    if (v._cluster.getClusterSize() <= 2) {
      STITreeCluster c1=new STITreeCluster(v._cluster.getTaxa());
      c1.addLeaf(v._cluster.getClusterLeaves()[0]);
      STITreeCluster c2=new STITreeCluster(v._cluster.getTaxa());
      for (int i=1; i < v._cluster.getClusterSize(); i++) {
        c2.addLeaf(v._cluster.getClusterLeaves()[i]);
      }
      if (clusterToVertex.containsKey(c2)) {
        STBipartition stb=new STBipartition(c1,c2,v._cluster);
        clusterBiPartitions=new HashSet<STBipartition>(1);
        clusterBiPartitions.add(stb);
        System.err.println(""String_Node_Str"" + stb);
      }
    }
  }
  if (clusterBiPartitions == null) {
    System.err.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
    throw new CannotResolveException(v._cluster.toString());
  }
  for (  STBipartition stb : clusterBiPartitions) {
    System.out.println(stb);
    Vertex lv=clusterToVertex.get(stb.cluster1);
    Vertex rv=clusterToVertex.get(stb.cluster2);
    try {
      int lscore=computeMinCost(lv);
      int rscore=computeMinCost(rv);
      int w=counter.getBiPartitionDPWeight(lv._cluster,rv._cluster,v._cluster);
      int z=optimizeDuploss ? 3 : 1;
      int c=z * w - v._el_num;
      if ((v._max_score != -1) && (lscore + rscore + c+ maxEL <= v._max_score)) {
        continue;
      }
      v._max_score=(lscore + rscore + c) + maxEL;
      v._min_cost=sigmaNs - (c + lv._max_score + rv._max_score - 2 * maxEL);
      v._min_lc=lv;
      v._min_rc=rv;
      v._c=c;
    }
 catch (    CannotResolveException c) {
      continue;
    }
  }
  if (v._min_lc == null) {
    System.out.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
    throw new CannotResolveException(v._cluster.toString());
  }
  return v._max_score - maxEL;
}","private int computeMinCost(Vertex v) throws CannotResolveException {
  if (v._max_score != -1) {
    return v._max_score - maxEL;
  }
  if (optimizeDuploss) {
    if (v._el_num == -1) {
      if (taxonMap == null) {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,rooted);
      }
 else {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,taxonMap,rooted);
      }
    }
  }
 else {
    v._el_num=0;
  }
{
    int clusterSize=v._cluster.getClusterSize();
    if (clusterSize <= 1) {
      v._min_cost=0;
      v._max_score=maxEL - v._el_num;
      v._min_lc=(v._min_rc=null);
      return v._max_score - maxEL;
    }
  }
  Set<STBipartition> clusterBiPartitions=counter.getClusterBiPartitions(v._cluster);
  if (clusterBiPartitions == null) {
    if (v._cluster.getClusterSize() <= 2) {
      STITreeCluster c1=new STITreeCluster(v._cluster.getTaxa());
      c1.addLeaf(v._cluster.getClusterLeaves()[0]);
      STITreeCluster c2=new STITreeCluster(v._cluster.getTaxa());
      for (int i=1; i < v._cluster.getClusterSize(); i++) {
        c2.addLeaf(v._cluster.getClusterLeaves()[i]);
      }
      if (clusterToVertex.containsKey(c2)) {
        STBipartition stb=new STBipartition(c1,c2,v._cluster);
        clusterBiPartitions=new HashSet<STBipartition>(1);
        clusterBiPartitions.add(stb);
        System.err.println(""String_Node_Str"" + stb);
      }
    }
  }
  if (clusterBiPartitions == null) {
    System.err.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
    throw new CannotResolveException(v._cluster.toString());
  }
  for (  STBipartition stb : clusterBiPartitions) {
    Vertex lv=clusterToVertex.get(stb.cluster1);
    Vertex rv=clusterToVertex.get(stb.cluster2);
    try {
      int lscore=computeMinCost(lv);
      int rscore=computeMinCost(rv);
      int w=counter.getBiPartitionDPWeight(lv._cluster,rv._cluster,v._cluster);
      int z=optimizeDuploss ? 3 : 1;
      int c=z * w - v._el_num;
      if ((v._max_score != -1) && (lscore + rscore + c+ maxEL <= v._max_score)) {
        continue;
      }
      v._max_score=(lscore + rscore + c) + maxEL;
      v._min_cost=sigmaNs - (c + lv._max_score + rv._max_score - 2 * maxEL);
      v._min_lc=lv;
      v._min_rc=rv;
      v._c=c;
    }
 catch (    CannotResolveException c) {
      System.err.println(""String_Node_Str"" + c.getMessage());
    }
  }
  if (v._min_lc == null) {
    System.out.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
    throw new CannotResolveException(v._cluster.toString());
  }
  return v._max_score - maxEL;
}",0.9827749384819232
125205,"protected static void printUsage(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println();
}","protected static void printUsage(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println();
}",0.9046511627906976
125206,"void addExtraBipartitionsByInput(Map<Integer,Set<Vertex>> clusters,List<Tree> trees,TaxonNameMap taxonMap,boolean extraTreeRooted){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  STITreeCluster all=clusters.get(n).iterator().next()._cluster;
  for (  Tree tr : trees) {
    String[] treeLeaves=tr.getLeaves();
    STITreeCluster treeAll=new STITreeCluster(leaves);
    for (int i=0; i < treeLeaves.length; i++) {
      treeAll.addLeaf(treeLeaves[i]);
    }
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.getTaxonName(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        map.put(node,tb);
        if (!extraTreeRooted) {
          addSTBToX(clusters,tb,treeComplementary(treeAll,tb),null,node);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        map.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTBToX(clusters,l_cluster,r_cluster,cluster,node);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(treeAll,cluster);
            STITreeCluster lAndr_cluster=cluster;
            addSTBToX(clusters,l_cluster,r_cluster,cluster,node);
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              addSTBToX(clusters,r_cluster,allMinuslAndr_cluster,null,node);
              addSTBToX(clusters,l_cluster,allMinuslAndr_cluster,null,node);
              addSTBToX(clusters,lAndr_cluster,allMinuslAndr_cluster,all,node);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTBToX(clusters,l_cluster,r_cluster,null,node);
            addSTBToX(clusters,r_cluster,m_cluster,null,node);
            addSTBToX(clusters,l_cluster,m_cluster,null,node);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  int s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.out.println(""String_Node_Str"" + s);
  System.out.println(""String_Node_Str"" + STBCountInGeneTrees.size());
}","void addExtraBipartitionsByInput(Map<Integer,Set<Vertex>> clusters,List<Tree> trees,TaxonNameMap taxonMap,boolean extraTreeRooted){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  STITreeCluster all=clusters.get(n).iterator().next()._cluster;
  for (  Tree tr : trees) {
    String[] treeLeaves=tr.getLeaves();
    STITreeCluster treeAll=new STITreeCluster(leaves);
    for (int i=0; i < treeLeaves.length; i++) {
      treeAll.addLeaf(treeLeaves[i]);
    }
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.getTaxonName(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        map.put(node,tb);
        if (!extraTreeRooted) {
          addSTBToX(clusters,tb,treeComplementary(treeAll,tb),null,node);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        map.put(node,cluster);
        if (extraTreeRooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTBToX(clusters,l_cluster,r_cluster,cluster,node);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(treeAll,cluster);
            STITreeCluster lAndr_cluster=cluster;
            addSTBToX(clusters,l_cluster,r_cluster,cluster,node);
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              addSTBToX(clusters,r_cluster,allMinuslAndr_cluster,null,node);
              addSTBToX(clusters,l_cluster,allMinuslAndr_cluster,null,node);
              addSTBToX(clusters,lAndr_cluster,allMinuslAndr_cluster,all,node);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTBToX(clusters,l_cluster,r_cluster,null,node);
            addSTBToX(clusters,r_cluster,m_cluster,null,node);
            addSTBToX(clusters,l_cluster,m_cluster,null,node);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  int s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + s);
  System.err.println(""String_Node_Str"" + STBCountInGeneTrees.size());
}",0.998280309544282
125207,"int computeTreeSTBipartitions(List<Tree> trees,TaxonNameMap taxonMap,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  STBCountInGeneTrees=new HashMap<STBipartition,Integer>(k * n);
  X=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    String[] treeLeaves=tr.getLeaves();
    STITreeCluster treeAll=new STITreeCluster(leaves);
    for (int i=0; i < treeLeaves.length; i++) {
      treeAll.addLeaf(treeLeaves[i]);
    }
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.getTaxonName(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        addToClusters(clusters,tb,1);
        map.put(node,tb);
        if (!rooted) {
          addSTB(clusters,tb,treeComplementary(treeAll,tb),null,node);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        map.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTB(clusters,l_cluster,r_cluster,cluster,node);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(treeAll,cluster);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              addSTB(clusters,l_cluster,r_cluster,cluster,node);
              addSTB(clusters,r_cluster,allMinuslAndr_cluster,null,node);
              addSTB(clusters,l_cluster,allMinuslAndr_cluster,null,node);
              addSTB(clusters,lAndr_cluster,allMinuslAndr_cluster,all,node);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTB(clusters,l_cluster,r_cluster,null,node);
            addSTB(clusters,r_cluster,m_cluster,null,node);
            addSTB(clusters,l_cluster,m_cluster,null,node);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + STBCountInGeneTrees.keySet().size());
  int s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.out.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(STBCountInGeneTrees.size());
  return sigmaN;
}","int computeTreeSTBipartitions(List<Tree> trees,TaxonNameMap taxonMap,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  STBCountInGeneTrees=new HashMap<STBipartition,Integer>(k * n);
  X=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    String[] treeLeaves=tr.getLeaves();
    STITreeCluster treeAll=new STITreeCluster(leaves);
    for (int i=0; i < treeLeaves.length; i++) {
      treeAll.addLeaf(treeLeaves[i]);
    }
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> map=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        if (taxonMap != null) {
          nodeName=taxonMap.getTaxonName(nodeName);
        }
        STITreeCluster tb=new STITreeCluster(leaves);
        tb.addLeaf(nodeName);
        addToClusters(clusters,tb,1);
        map.put(node,tb);
        if (!rooted) {
          addSTB(clusters,tb,treeComplementary(treeAll,tb),null,node);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=map.get(child);
          bs.or(map.get(child).getCluster());
        }
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        map.put(node,cluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          addSTB(clusters,l_cluster,r_cluster,cluster,node);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(treeAll,cluster);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              addSTB(clusters,l_cluster,r_cluster,cluster,node);
              addSTB(clusters,r_cluster,allMinuslAndr_cluster,null,node);
              addSTB(clusters,l_cluster,allMinuslAndr_cluster,null,node);
              addSTB(clusters,lAndr_cluster,allMinuslAndr_cluster,all,node);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            addSTB(clusters,l_cluster,r_cluster,null,node);
            addSTB(clusters,r_cluster,m_cluster,null,node);
            addSTB(clusters,l_cluster,m_cluster,null,node);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  System.err.println(""String_Node_Str"" + STBCountInGeneTrees.keySet().size());
  int s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + s);
  weights=new HashMap<STBipartition,Integer>(STBCountInGeneTrees.size());
  return sigmaN;
}",0.9985330073349632
125208,"private int computeMinCost(Vertex v) throws CannotResolveException {
  if (v._max_score != -1) {
    return v._max_score - maxEL;
  }
  if (optimizeDuploss) {
    if (v._el_num == -1) {
      if (taxonNameMap == null) {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,rooted);
      }
 else {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,taxonNameMap,rooted);
      }
    }
  }
 else {
    v._el_num=0;
  }
  int clusterSize=v._cluster.getClusterSize();
{
    if (clusterSize <= 1) {
      v._min_cost=0;
      v._max_score=maxEL - v._el_num;
      v._min_lc=(v._min_rc=null);
      return v._max_score - maxEL;
    }
  }
  Set<STBipartition> clusterBiPartitions=counter.getClusterBiPartitions(v._cluster);
  if (fast) {
    if (clusterBiPartitions == null) {
      if (v._cluster.getClusterSize() <= 3) {
        for (int j=0; j < v._cluster.getClusterSize(); j++) {
          STITreeCluster c1=new STITreeCluster(v._cluster.getTaxa());
          c1.addLeaf(v._cluster.getClusterLeaves()[j]);
          STITreeCluster c2=new STITreeCluster(v._cluster.getTaxa());
          for (int i=0; i < v._cluster.getClusterSize(); i++) {
            if (i != j) {
              c2.addLeaf(v._cluster.getClusterLeaves()[i]);
            }
          }
          if (clusterToVertex.containsKey(c2)) {
            STBipartition stb=new STBipartition(c1,c2,v._cluster);
            if (clusterBiPartitions == null)             clusterBiPartitions=new HashSet<STBipartition>(3);
            clusterBiPartitions.add(stb);
            System.err.println(""String_Node_Str"" + stb);
          }
        }
      }
    }
    if (clusterBiPartitions == null) {
      System.err.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
      throw new CannotResolveException(v._cluster.toString());
    }
    for (    STBipartition stb : clusterBiPartitions) {
      Vertex lv=clusterToVertex.get(stb.cluster1);
      Vertex rv=clusterToVertex.get(stb.cluster2);
      try {
        int lscore=computeMinCost(lv);
        int rscore=computeMinCost(rv);
        int w=counter.getBiPartitionDPWeight(lv._cluster,rv._cluster,v._cluster);
        int z=optimizeDuploss ? 3 : 1;
        int c=z * w - v._el_num;
        if ((v._max_score != -1) && (lscore + rscore + c+ maxEL <= v._max_score)) {
          continue;
        }
        v._max_score=(lscore + rscore + c) + maxEL;
        v._min_cost=sigmaNs - (c + lv._max_score + rv._max_score - 2 * maxEL);
        v._min_lc=lv;
        v._min_rc=rv;
        v._c=c;
      }
 catch (      CannotResolveException c) {
        System.err.println(""String_Node_Str"" + c.getMessage());
      }
    }
  }
 else {
    for (int i=1; i <= (clusterSize / 2); i++) {
      Set<Vertex> leftList=clusters.get(i);
      if (leftList != null) {
        for (        Vertex lv : leftList) {
          if (v._cluster.containsCluster(lv._cluster)) {
            Set<Vertex> rightList=clusters.get(clusterSize - i);
            if (rightList != null) {
              for (              Vertex rv : rightList) {
                if (lv._cluster.isDisjoint(rv._cluster) && v._cluster.containsCluster(rv._cluster)) {
                  int lscore=computeMinCost(lv);
                  int rscore=computeMinCost(rv);
                  int w=counter.getBiPartitionDPWeight(lv._cluster,rv._cluster,v._cluster);
                  int z=optimizeDuploss ? 3 : 1;
                  int c=z * w - v._el_num;
                  if ((v._max_score != -1) && (lscore + rscore + c+ maxEL <= v._max_score)) {
                    continue;
                  }
                  v._max_score=(lscore + rscore + c) + maxEL;
                  v._min_cost=sigmaNs - (c + lv._max_score + rv._max_score - 2 * maxEL);
                  v._min_lc=lv;
                  v._min_rc=rv;
                  v._c=c;
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v._min_lc == null) {
    System.out.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
    throw new CannotResolveException(v._cluster.toString());
  }
  return v._max_score - maxEL;
}","private int computeMinCost(Vertex v) throws CannotResolveException {
  if (v._max_score != -1) {
    return v._max_score - maxEL;
  }
  if (optimizeDuploss) {
    if (v._el_num == -1) {
      if (taxonNameMap == null) {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,rooted);
      }
 else {
        v._el_num=DeepCoalescencesCounter.getClusterCoalNum(trees,v._cluster,taxonNameMap,rooted);
      }
    }
  }
 else {
    v._el_num=0;
  }
  int clusterSize=v._cluster.getClusterSize();
{
    if (clusterSize <= 1) {
      v._min_cost=0;
      v._max_score=maxEL - v._el_num;
      v._min_lc=(v._min_rc=null);
      return v._max_score - maxEL;
    }
  }
  Set<STBipartition> clusterBiPartitions=counter.getClusterBiPartitions(v._cluster);
  if (fast) {
    if (clusterBiPartitions == null) {
      if (v._cluster.getClusterSize() <= 3) {
        for (int j=0; j < v._cluster.getClusterSize(); j++) {
          STITreeCluster c1=new STITreeCluster(v._cluster.getTaxa());
          c1.addLeaf(v._cluster.getClusterLeaves()[j]);
          STITreeCluster c2=new STITreeCluster(v._cluster.getTaxa());
          for (int i=0; i < v._cluster.getClusterSize(); i++) {
            if (i != j) {
              c2.addLeaf(v._cluster.getClusterLeaves()[i]);
            }
          }
          if (clusterToVertex.containsKey(c2)) {
            STBipartition stb=new STBipartition(c1,c2,v._cluster);
            if (clusterBiPartitions == null)             clusterBiPartitions=new HashSet<STBipartition>(3);
            clusterBiPartitions.add(stb);
            System.err.println(""String_Node_Str"" + stb);
          }
        }
      }
    }
    if (clusterBiPartitions == null) {
      System.err.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
      throw new CannotResolveException(v._cluster.toString());
    }
    for (    STBipartition stb : clusterBiPartitions) {
      Vertex lv=clusterToVertex.get(stb.cluster1);
      Vertex rv=clusterToVertex.get(stb.cluster2);
      try {
        int lscore=computeMinCost(lv);
        int rscore=computeMinCost(rv);
        int w=counter.getBiPartitionDPWeight(lv._cluster,rv._cluster,v._cluster);
        int z=optimizeDuploss ? 3 : 1;
        int c=z * w - v._el_num;
        if ((v._max_score != -1) && (lscore + rscore + c+ maxEL <= v._max_score)) {
          continue;
        }
        v._max_score=(lscore + rscore + c) + maxEL;
        v._min_cost=sigmaNs - (c + lv._max_score + rv._max_score - 2 * maxEL);
        v._min_lc=lv;
        v._min_rc=rv;
        v._c=c;
      }
 catch (      CannotResolveException c) {
        System.err.println(""String_Node_Str"" + c.getMessage());
      }
    }
  }
 else {
    for (int i=1; i <= (clusterSize / 2); i++) {
      Set<Vertex> leftList=clusters.get(i);
      if (leftList != null) {
        for (        Vertex lv : leftList) {
          if (v._cluster.containsCluster(lv._cluster)) {
            Set<Vertex> rightList=clusters.get(clusterSize - i);
            if (rightList != null) {
              for (              Vertex rv : rightList) {
                if (lv._cluster.isDisjoint(rv._cluster) && v._cluster.containsCluster(rv._cluster)) {
                  int lscore=computeMinCost(lv);
                  int rscore=computeMinCost(rv);
                  int w=counter.getBiPartitionDPWeight(lv._cluster,rv._cluster,v._cluster);
                  int z=optimizeDuploss ? 3 : 1;
                  int c=z * w - v._el_num;
                  if ((v._max_score != -1) && (lscore + rscore + c+ maxEL <= v._max_score)) {
                    continue;
                  }
                  v._max_score=(lscore + rscore + c) + maxEL;
                  v._min_cost=sigmaNs - (c + lv._max_score + rv._max_score - 2 * maxEL);
                  v._min_lc=lv;
                  v._min_rc=rv;
                  v._c=c;
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v._min_lc == null) {
    System.err.println(""String_Node_Str"" + v._cluster.getClusterSize() + ""String_Node_Str""+ v._cluster);
    throw new CannotResolveException(v._cluster.toString());
  }
  return v._max_score - maxEL;
}",0.9992887624466572
125209,"public static void main(String[] args){
  if ((args == null) || args.length == 0 || (args[0].equals(""String_Node_Str"")) || (args.length < 1)) {
    printUsage();
    return;
  }
  Map<String,String> taxonMap=null;
  String rep=null;
  String pattern=null;
  List<Tree> trees=null;
  List<Tree> extraTrees=null;
  String output=null;
  double bootstrap=1.0D;
  double time=-1.0D;
  boolean unresolved=false;
  long startTime=System.currentTimeMillis();
  String line;
  BufferedReader treeBufferReader=null;
  BufferedReader extraTreebuffer=null;
  try {
    List<String[]> options=getOptions(args);
    for (    String[] option : options) {
      if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        treeBufferReader=new BufferedReader(new FileReader(option[1]));
        trees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        extraTreebuffer=new BufferedReader(new FileReader(option[1]));
        extraTrees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) && (option.length != 3)) {
          printUsage();
          return;
        }
        if (option.length == 2) {
          BufferedReader br=new BufferedReader(new FileReader(option[1]));
          taxonMap=new HashMap<String,String>();
          while ((line=br.readLine()) != null) {
            String[] mapString=line.trim().split(""String_Node_Str"");
            for (            String s : mapString) {
              String species=s.substring(0,s.indexOf(""String_Node_Str"")).trim();
              s=s.substring(s.indexOf(""String_Node_Str"") + 1);
              String[] alleles=s.split(""String_Node_Str"");
              for (              String allele : alleles) {
                allele=allele.trim();
                if (taxonMap.containsKey(allele)) {
                  System.err.println(""String_Node_Str"");
                  System.err.println(""String_Node_Str"");
                  System.exit(-1);
                }
 else {
                  taxonMap.put(allele,species);
                }
              }
            }
          }
          br.close();
        }
 else {
          pattern=option[1];
          rep=option[2];
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        output=option[1];
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          bootstrap=Double.parseDouble(option[1]);
          if ((bootstrap <= 1.0D) && (bootstrap > 0.0D))           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        unresolved=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1)) {
          printUsage();
          return;
        }
        fast=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        rooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        extrarooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) || (unresolved)) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          time=Double.parseDouble(option[1]);
          if (time > 0.0D)           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
        optimizeDuploss=true;
      }
 else {
        printUsage();
        return;
      }
    }
    if (treeBufferReader == null) {
      System.err.println(""String_Node_Str"");
      printUsage();
      return;
    }
    System.out.println(""String_Node_Str"" + (rooted ? ""String_Node_Str"" : ""String_Node_Str""));
    while ((line=treeBufferReader.readLine()) != null) {
      Set<String> previousTreeTaxa=new HashSet<String>();
      if (line.length() > 0) {
        NewickReader nr=new NewickReader(new StringReader(line));
        if (rooted) {
          STITree gt=new STITree(true);
          nr.readTree(gt);
          if (previousTreeTaxa.isEmpty()) {
            previousTreeTaxa.addAll(Arrays.asList(gt.getLeaves()));
          }
 else {
            if (!previousTreeTaxa.containsAll(Arrays.asList(gt.getLeaves()))) {
              throw new RuntimeException(""String_Node_Str"" + gt.getLeaves() + ""String_Node_Str""+ previousTreeTaxa);
            }
          }
          trees.add(gt);
        }
 else {
          Tree tr=nr.readTree();
          trees.add(tr);
        }
      }
    }
    treeBufferReader.close();
    if (extraTreebuffer != null) {
      while ((line=extraTreebuffer.readLine()) != null) {
        if (line.length() > 0) {
          NewickReader nr=new NewickReader(new StringReader(line));
          if (extrarooted) {
            STITree gt=new STITree(true);
            nr.readTree(gt);
            extraTrees.add(gt);
          }
 else {
            Tree tr=nr.readTree();
            extraTrees.add(tr);
          }
        }
      }
      extraTreebuffer.close();
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
catch (  ParseException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
  if (trees.size() == 0) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  startTime=System.currentTimeMillis();
  MGDInference_DP inference;
  if (rep != null) {
    inference=new MGDInference_DP(trees,extraTrees,pattern,rep);
  }
 else   if (taxonMap != null) {
    inference=new MGDInference_DP(trees,extraTrees,taxonMap);
  }
 else {
    inference=new MGDInference_DP(trees,extraTrees);
  }
  List<Solution> solutions=inference.inferSpeciesTree();
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  if ((output == null) && (_print)) {
    for (    Solution s : solutions)     System.out.println(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ (optimizeDuploss ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
 else   try {
    FileWriter fw=new FileWriter(output);
    for (    Solution s : solutions) {
      if (_print) {
        fw.write(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
 else {
        fw.write(s._st.toString() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
    }
    fw.close();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
  }
}","public static void main(String[] args){
  if ((args == null) || args.length == 0 || (args[0].equals(""String_Node_Str"")) || (args.length < 1)) {
    printUsage();
    return;
  }
  Map<String,String> taxonMap=null;
  String rep=null;
  String pattern=null;
  List<Tree> trees=null;
  List<Tree> extraTrees=null;
  String output=null;
  double bootstrap=1.0D;
  double time=-1.0D;
  boolean unresolved=false;
  long startTime=System.currentTimeMillis();
  String line;
  BufferedReader treeBufferReader=null;
  BufferedReader extraTreebuffer=null;
  try {
    List<String[]> options=getOptions(args);
    for (    String[] option : options) {
      if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        treeBufferReader=new BufferedReader(new FileReader(option[1]));
        trees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        extraTreebuffer=new BufferedReader(new FileReader(option[1]));
        extraTrees=new ArrayList();
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) && (option.length != 3)) {
          printUsage();
          return;
        }
        if (option.length == 2) {
          BufferedReader br=new BufferedReader(new FileReader(option[1]));
          taxonMap=new HashMap<String,String>();
          while ((line=br.readLine()) != null) {
            String[] mapString=line.trim().split(""String_Node_Str"");
            for (            String s : mapString) {
              String species=s.substring(0,s.indexOf(""String_Node_Str"")).trim();
              s=s.substring(s.indexOf(""String_Node_Str"") + 1);
              String[] alleles=s.split(""String_Node_Str"");
              for (              String allele : alleles) {
                allele=allele.trim();
                if (taxonMap.containsKey(allele)) {
                  System.err.println(""String_Node_Str"");
                  System.err.println(""String_Node_Str"");
                  System.exit(-1);
                }
 else {
                  taxonMap.put(allele,species);
                }
              }
            }
          }
          br.close();
        }
 else {
          pattern=option[1];
          rep=option[2];
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 2) {
          printUsage();
          return;
        }
        output=option[1];
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length > 2) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          bootstrap=Double.parseDouble(option[1]);
          if ((bootstrap <= 1.0D) && (bootstrap > 0.0D))           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        unresolved=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1)) {
          printUsage();
          return;
        }
        fast=true;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        rooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 1) || (time != -1.0D)) {
          printUsage();
          return;
        }
        extrarooted=false;
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if ((option.length != 2) || (unresolved)) {
          printUsage();
          return;
        }
        if (option.length != 2)         continue;
        try {
          time=Double.parseDouble(option[1]);
          if (time > 0.0D)           continue;
          printUsage();
        }
 catch (        NumberFormatException e) {
          System.err.println(""String_Node_Str"");
          printUsage();
          return;
        }
      }
 else       if (option[0].equals(""String_Node_Str"")) {
        if (option.length != 1) {
          printUsage();
          return;
        }
        optimizeDuploss=true;
      }
 else {
        printUsage();
        return;
      }
    }
    if (treeBufferReader == null) {
      System.err.println(""String_Node_Str"");
      printUsage();
      return;
    }
    System.err.println(""String_Node_Str"" + (rooted ? ""String_Node_Str"" : ""String_Node_Str""));
    int l=0;
    try {
      while ((line=treeBufferReader.readLine()) != null) {
        l++;
        Set<String> previousTreeTaxa=new HashSet<String>();
        if (line.length() > 0) {
          NewickReader nr=new NewickReader(new StringReader(line));
          if (rooted) {
            STITree gt=new STITree(true);
            nr.readTree(gt);
            if (previousTreeTaxa.isEmpty()) {
              previousTreeTaxa.addAll(Arrays.asList(gt.getLeaves()));
            }
 else {
              if (!previousTreeTaxa.containsAll(Arrays.asList(gt.getLeaves()))) {
                throw new RuntimeException(""String_Node_Str"" + gt.getLeaves() + ""String_Node_Str""+ previousTreeTaxa);
              }
            }
            trees.add(gt);
          }
 else {
            Tree tr=nr.readTree();
            trees.add(tr);
          }
        }
      }
      treeBufferReader.close();
    }
 catch (    ParseException e) {
      treeBufferReader.close();
      throw new RuntimeException(""String_Node_Str"" + l,e);
    }
    if (extraTreebuffer != null) {
      while ((line=extraTreebuffer.readLine()) != null) {
        if (line.length() > 0) {
          NewickReader nr=new NewickReader(new StringReader(line));
          if (extrarooted) {
            STITree gt=new STITree(true);
            nr.readTree(gt);
            extraTrees.add(gt);
          }
 else {
            Tree tr=nr.readTree();
            extraTrees.add(tr);
          }
        }
      }
      extraTreebuffer.close();
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
catch (  ParseException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
    return;
  }
  if (trees.size() == 0) {
    System.err.println(""String_Node_Str"");
    return;
  }
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  startTime=System.currentTimeMillis();
  MGDInference_DP inference;
  if (rep != null) {
    inference=new MGDInference_DP(trees,extraTrees,pattern,rep);
  }
 else   if (taxonMap != null) {
    inference=new MGDInference_DP(trees,extraTrees,taxonMap);
  }
 else {
    inference=new MGDInference_DP(trees,extraTrees);
  }
  List<Solution> solutions=inference.inferSpeciesTree();
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  if ((output == null) && (_print)) {
    for (    Solution s : solutions)     System.out.println(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ (optimizeDuploss ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
 else   try {
    FileWriter fw=new FileWriter(output);
    for (    Solution s : solutions) {
      if (_print) {
        fw.write(s._st.toStringWD() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
 else {
        fw.write(s._st.toString() + ""String_Node_Str"" + s._totalCoals+ ""String_Node_Str"");
      }
    }
    fw.close();
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
    System.err.println(e.getMessage());
    e.printStackTrace();
  }
}",0.9827108042721424
125210,"public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonNameMap != null && taxonNameMap.taxonMap != null) {
    Map<String,String> taxonMap=taxonNameMap.taxonMap;
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else   if (taxonNameMap != null && taxonNameMap.taxonMap == null) {
    Set<String> taxalist=new HashSet<String>();
    Set<String> genelist=new HashSet<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        genelist.add(node.getName());
        taxalist.add(taxonNameMap.getTaxonName(node.getName()));
      }
    }
    stTaxa=new String[taxalist.size()];
    gtTaxa=new String[genelist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    index=0;
    for (    String gene : genelist) {
      gtTaxa[(index++)]=gene;
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonNameMap == null && false) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.out.println(""String_Node_Str"" + stTaxa.length);
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted);
  int sigmaN=counter.computeTreeSTBipartitions(trees,taxonNameMap,clusters);
  if (extraTrees != null) {
    counter.addExtraBipartitionsByInput(clusters,extraTrees,taxonNameMap,extrarooted);
  }
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,extraTrees,taxonNameMap);
  if (_print) {
    System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=optimizeDuploss ? sigmaN + 2 * (stTaxa.length - 1) * trees.size() : sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonNameMap);
  if (taxonNameMap == null && rooted && extraTrees == null && false) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}","public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonNameMap != null && taxonNameMap.taxonMap != null) {
    Map<String,String> taxonMap=taxonNameMap.taxonMap;
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else   if (taxonNameMap != null && taxonNameMap.taxonMap == null) {
    Set<String> taxalist=new HashSet<String>();
    Set<String> genelist=new HashSet<String>();
    for (    Tree tr : trees) {
      String[] leaves=tr.getLeaves();
      for (int i=0; i < leaves.length; i++) {
        String leaf=leaves[i];
        genelist.add(leaf);
        taxalist.add(taxonNameMap.getTaxonName(leaf));
      }
    }
    stTaxa=new String[taxalist.size()];
    gtTaxa=new String[genelist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    index=0;
    for (    String gene : genelist) {
      gtTaxa[(index++)]=gene;
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonNameMap == null && false) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.err.println(""String_Node_Str"" + stTaxa.length);
  System.err.println(""String_Node_Str"" + Arrays.toString(stTaxa));
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted);
  int sigmaN=counter.computeTreeSTBipartitions(trees,taxonNameMap,clusters);
  if (extraTrees != null) {
    counter.addExtraBipartitionsByInput(clusters,extraTrees,taxonNameMap,extrarooted);
  }
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,extraTrees,taxonNameMap);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=optimizeDuploss ? sigmaN + 2 * (stTaxa.length - 1) * trees.size() : sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonNameMap);
  if (taxonNameMap == null && rooted && extraTrees == null && false) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}",0.8848360052948963
125211,"public String getTaxonName(String geneName){
  if (pattern != null) {
    return geneName.replaceAll(pattern,rep);
  }
 else {
    return taxonMap.get(geneName);
  }
}","public String getTaxonName(String geneName){
  if (geneName == null || ""String_Node_Str"".equals(geneName)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  if (pattern != null) {
    String s=geneName.replaceAll(pattern,rep);
    return s;
  }
 else {
    return taxonMap.get(geneName);
  }
}",0.6823027718550106
125212,"private List<Solution> findTreesByDP(String[] stTaxa,DuplicationWeightCounter counter,List<Tree> trees,TaxonNameMap taxonNameMap){
  List<Solution> solutions=new ArrayList<Solution>();
  clusterToVertex=new HashMap<STITreeCluster,Vertex>(sigmaNs);
  for (  Set<Vertex> vs : clusters.values()) {
    for (    Vertex vertex : vs) {
      vertex._max_score=-1;
      clusterToVertex.put(vertex._cluster,vertex);
    }
  }
  Vertex all=(Vertex)clusters.get(Integer.valueOf(stTaxa.length)).toArray()[0];
  System.out.println(""String_Node_Str"" + sigmaNs);
  System.out.println(""String_Node_Str"" + all._cluster.getClusterSize());
  try {
    computeMinCost(all);
  }
 catch (  CannotResolveException e) {
    e.printStackTrace();
  }
  List minClusters=new LinkedList();
  List coals=new LinkedList();
  Stack minVertices=new Stack();
  if (all._min_rc != null) {
    minVertices.push(all._min_rc);
  }
  if (all._min_lc != null) {
    minVertices.push(all._min_lc);
  }
  if (all._subcl != null) {
    for (    Vertex v : all._subcl) {
      minVertices.push(v);
    }
  }
  while (!minVertices.isEmpty()) {
    Vertex pe=(Vertex)minVertices.pop();
    minClusters.add(pe._cluster);
    if (pe._min_rc != null) {
      minVertices.push(pe._min_rc);
    }
    if (pe._min_lc != null) {
      minVertices.push(pe._min_lc);
    }
    if (pe._min_lc != null && pe._min_rc != null) {
      coals.add(pe._c);
    }
 else {
      coals.add(0);
    }
    if (pe._subcl != null) {
      for (      Vertex v : pe._subcl) {
        minVertices.push(v);
      }
    }
  }
  Solution sol=new Solution();
  if ((minClusters == null) || (minClusters.isEmpty())) {
    Object tr=new STITree();
    for (    String s : stTaxa) {
      ((MutableTree)tr).getRoot().createChild(s);
    }
    sol._st=((Tree)tr);
  }
 else {
    sol._st=buildTreeFromClusters(minClusters);
  }
  Object map=new HashMap();
  for (  TNode node : sol._st.postTraverse()) {
    BitSet bs=new BitSet();
    if (node.isLeaf()) {
      for (int i=0; i < stTaxa.length; i++) {
        if (node.getName().equals(stTaxa[i])) {
          bs.set(i);
          break;
        }
      }
      ((Map)map).put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet childCluster=(BitSet)((Map)map).get(child);
        bs.or(childCluster);
      }
      ((Map)map).put(node,bs);
    }
    STITreeCluster c=new STITreeCluster(stTaxa);
    c.setCluster(bs);
    if (c.getClusterSize() == stTaxa.length) {
      ((STINode)node).setData(Integer.valueOf(0));
    }
 else {
      int pos=minClusters.indexOf(c);
      ((STINode)node).setData((Integer)coals.get(pos));
    }
  }
  sol._totalCoals=all._min_cost;
  System.out.println(""String_Node_Str"" + all._min_cost);
  solutions.add(sol);
  return (List<Solution>)(List<Solution>)solutions;
}","private List<Solution> findTreesByDP(String[] stTaxa,DuplicationWeightCounter counter,List<Tree> trees,TaxonNameMap taxonNameMap){
  List<Solution> solutions=new ArrayList<Solution>();
  clusterToVertex=new HashMap<STITreeCluster,Vertex>(sigmaNs);
  for (  Set<Vertex> vs : clusters.values()) {
    for (    Vertex vertex : vs) {
      vertex._max_score=-1;
      clusterToVertex.put(vertex._cluster,vertex);
    }
  }
  Vertex all=(Vertex)clusters.get(Integer.valueOf(stTaxa.length)).toArray()[0];
  System.err.println(""String_Node_Str"" + sigmaNs);
  System.err.println(""String_Node_Str"" + all._cluster.getClusterSize());
  try {
    computeMinCost(all);
  }
 catch (  CannotResolveException e) {
    e.printStackTrace();
  }
  List minClusters=new LinkedList();
  List coals=new LinkedList();
  Stack minVertices=new Stack();
  if (all._min_rc != null) {
    minVertices.push(all._min_rc);
  }
  if (all._min_lc != null) {
    minVertices.push(all._min_lc);
  }
  if (all._subcl != null) {
    for (    Vertex v : all._subcl) {
      minVertices.push(v);
    }
  }
  while (!minVertices.isEmpty()) {
    Vertex pe=(Vertex)minVertices.pop();
    minClusters.add(pe._cluster);
    if (pe._min_rc != null) {
      minVertices.push(pe._min_rc);
    }
    if (pe._min_lc != null) {
      minVertices.push(pe._min_lc);
    }
    if (pe._min_lc != null && pe._min_rc != null) {
      coals.add(pe._c);
    }
 else {
      coals.add(0);
    }
    if (pe._subcl != null) {
      for (      Vertex v : pe._subcl) {
        minVertices.push(v);
      }
    }
  }
  Solution sol=new Solution();
  if ((minClusters == null) || (minClusters.isEmpty())) {
    Object tr=new STITree();
    for (    String s : stTaxa) {
      ((MutableTree)tr).getRoot().createChild(s);
    }
    sol._st=((Tree)tr);
  }
 else {
    sol._st=buildTreeFromClusters(minClusters);
  }
  Object map=new HashMap();
  for (  TNode node : sol._st.postTraverse()) {
    BitSet bs=new BitSet();
    if (node.isLeaf()) {
      for (int i=0; i < stTaxa.length; i++) {
        if (node.getName().equals(stTaxa[i])) {
          bs.set(i);
          break;
        }
      }
      ((Map)map).put(node,bs);
    }
 else {
      for (      TNode child : node.getChildren()) {
        BitSet childCluster=(BitSet)((Map)map).get(child);
        bs.or(childCluster);
      }
      ((Map)map).put(node,bs);
    }
    STITreeCluster c=new STITreeCluster(stTaxa);
    c.setCluster(bs);
    if (c.getClusterSize() == stTaxa.length) {
      ((STINode)node).setData(Integer.valueOf(0));
    }
 else {
      int pos=minClusters.indexOf(c);
      ((STINode)node).setData((Integer)coals.get(pos));
    }
  }
  sol._totalCoals=all._min_cost;
  System.out.println(""String_Node_Str"" + all._min_cost);
  solutions.add(sol);
  return (List<Solution>)(List<Solution>)solutions;
}",0.9978662873399716
125213,"private void tryAddingGeneSTBs(Map<Integer,Set<Vertex>> clusters,STITreeCluster l_cluster,STITreeCluster r_cluster,STITreeCluster cluster,TNode node,HashSet<STBipartition> addedSoFar,int allInducedByGTSize){
  if (cluster == null) {
    cluster=new STITreeCluster(l_cluster);
    cluster.getCluster().or(r_cluster.getCluster());
  }
  int size=cluster.getClusterSize();
  if (l_cluster.isDisjoint(r_cluster)) {
    STBipartition stb=new STBipartition(l_cluster,r_cluster,cluster);
    if (addedSoFar.contains(stb)) {
      return;
    }
 else {
      addedSoFar.add(stb);
    }
    geneTreeSTBBySize.get(size).add(stb);
    ((STINode)node).setData(stb);
    addSTBToX(clusters,stb);
    geneTreeSTBCount.put(stb,geneTreeSTBCount.containsKey(stb) ? geneTreeSTBCount.get(stb) + 1 : 1);
    if (size == allInducedByGTSize) {
      if (!geneTreeRootSTBs.containsKey(stb)) {
        geneTreeRootSTBs.put(stb,1);
      }
 else {
        geneTreeRootSTBs.put(stb,geneTreeRootSTBs.get(stb) + 1);
      }
    }
  }
 else {
    BitSet and=(BitSet)l_cluster.getCluster().clone();
    and.and(r_cluster.getCluster());
    BitSet l_Minus_r=(BitSet)and.clone();
    l_Minus_r.xor(l_cluster.getCluster());
    STITreeCluster lmr=new STITreeCluster(stTaxa);
    lmr.setCluster(l_Minus_r);
    BitSet r_Minus_l=(BitSet)and.clone();
    r_Minus_l.xor(r_cluster.getCluster());
    STITreeCluster rml=new STITreeCluster(stTaxa);
    rml.setCluster(r_Minus_l);
    if (!rml.getCluster().isEmpty()) {
      addToClusters(clusters,rml,rml.getClusterSize());
      addSTBToX(clusters,new STBipartition(l_cluster,rml,cluster));
    }
    if (!lmr.getCluster().isEmpty()) {
      addToClusters(clusters,lmr,lmr.getClusterSize());
      addSTBToX(clusters,new STBipartition(lmr,r_cluster,cluster));
    }
  }
}","private void tryAddingGeneSTBs(Map<Integer,Set<Vertex>> clusters,STITreeCluster l_cluster,STITreeCluster r_cluster,STITreeCluster cluster,TNode node,int allInducedByGTSize){
  if (cluster == null) {
    cluster=new STITreeCluster(l_cluster);
    cluster.getCluster().or(r_cluster.getCluster());
  }
  int size=cluster.getClusterSize();
  if (l_cluster.isDisjoint(r_cluster)) {
    STBipartition stb=new STBipartition(l_cluster,r_cluster,cluster);
    geneTreeSTBBySize.get(size).add(stb);
    ((STINode)node).setData(stb);
    addSTBToX(clusters,stb);
    geneTreeSTBCount.put(stb,geneTreeSTBCount.containsKey(stb) ? geneTreeSTBCount.get(stb) + 1 : 1);
    if (size == allInducedByGTSize) {
      if (!geneTreeRootSTBs.containsKey(stb)) {
        geneTreeRootSTBs.put(stb,1);
      }
 else {
        geneTreeRootSTBs.put(stb,geneTreeRootSTBs.get(stb) + 1);
      }
    }
  }
 else {
    BitSet and=(BitSet)l_cluster.getCluster().clone();
    and.and(r_cluster.getCluster());
    BitSet l_Minus_r=(BitSet)and.clone();
    l_Minus_r.xor(l_cluster.getCluster());
    STITreeCluster lmr=new STITreeCluster(stTaxa);
    lmr.setCluster(l_Minus_r);
    BitSet r_Minus_l=(BitSet)and.clone();
    r_Minus_l.xor(r_cluster.getCluster());
    STITreeCluster rml=new STITreeCluster(stTaxa);
    rml.setCluster(r_Minus_l);
    if (!rml.getCluster().isEmpty()) {
      addToClusters(clusters,rml,rml.getClusterSize());
      addSTBToX(clusters,new STBipartition(l_cluster,rml,cluster));
    }
    if (!lmr.getCluster().isEmpty()) {
      addToClusters(clusters,lmr,lmr.getClusterSize());
      addSTBToX(clusters,new STBipartition(lmr,r_cluster,cluster));
    }
  }
}",0.961863173216885
125214,"int computeTreeSTBipartitions(List<Tree> trees,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeRootSTBs=new HashMap<STBipartition,Integer>(k * n);
  clusterToSTBs=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    HashSet<STBipartition> addedSoFar=new HashSet<STBipartition>();
    STITreeCluster allInducedByGT=new STITreeCluster(stTaxa);
    String[] gtLeaves=tr.getLeaves();
    STITreeCluster gtAllCluster=new STITreeCluster(gtLeaves);
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      gtAllCluster.addLeaf(l);
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    Map<TNode,STITreeCluster> nodeToGTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.addLeaf(nodeName);
        nodeName=getSpeciesName(nodeName);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.addLeaf(nodeName);
        addToClusters(clusters,cluster,1);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (!rooted) {
          tryAddingGeneSTBs(clusters,cluster,treeComplementary(gtCluster,leaves),null,node,addedSoFar,allInducedByGTSize);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        BitSet gbs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getCluster());
          gbs.or(nodeToGTCluster.get(child).getCluster());
        }
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.setCluster(gbs);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,addedSoFar,allInducedByGTSize);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(gtCluster,leaves);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,r_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,l_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,lAndr_cluster,allMinuslAndr_cluster,null,node,addedSoFar,allInducedByGTSize);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            tryAddingGeneSTBs(clusters,l_cluster,r_cluster,null,node,addedSoFar,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,r_cluster,m_cluster,null,node,addedSoFar,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,l_cluster,m_cluster,null,node,addedSoFar,allInducedByGTSize);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + s);
  s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + clusters.size());
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size());
  return sigmaN;
}","int computeTreeSTBipartitions(List<Tree> trees,Map<Integer,Set<Vertex>> clusters){
  int sigmaN=0;
  int k=trees.size();
  String[] leaves=stTaxa;
  int n=leaves.length;
  geneTreeSTBBySize=new ArrayList<Set<STBipartition>>(leaves.length);
  for (int i=0; i <= leaves.length; i++) {
    geneTreeSTBBySize.add(new HashSet<STBipartition>());
    clusters.put(i,new HashSet<Vertex>());
  }
  geneTreeSTBCount=new HashMap<STBipartition,Integer>(k * n);
  geneTreeRootSTBs=new HashMap<STBipartition,Integer>(k * n);
  clusterToSTBs=new HashMap<STITreeCluster,Set<STBipartition>>(k * n);
  STITreeCluster all=new STITreeCluster(stTaxa);
  String as[];
  int j=(as=stTaxa).length;
  for (int i=0; i < j; i++) {
    String t=as[i];
    all.addLeaf(t);
  }
  addToClusters(clusters,all,leaves.length);
  for (  Tree tr : trees) {
    STITreeCluster allInducedByGT=new STITreeCluster(stTaxa);
    String[] gtLeaves=tr.getLeaves();
    STITreeCluster gtAllCluster=new STITreeCluster(gtLeaves);
    for (int i=0; i < gtLeaves.length; i++) {
      String l=gtLeaves[i];
      gtAllCluster.addLeaf(l);
      allInducedByGT.addLeaf(getSpeciesName(l));
    }
    int allInducedByGTSize=allInducedByGT.getClusterSize();
    sigmaN+=tr.getLeafCount() - 1;
    Map<TNode,STITreeCluster> nodeToSTCluster=new HashMap<TNode,STITreeCluster>(n);
    Map<TNode,STITreeCluster> nodeToGTCluster=new HashMap<TNode,STITreeCluster>(n);
    for (Iterator<TNode> nodeIt=tr.postTraverse().iterator(); nodeIt.hasNext(); ) {
      TNode node=nodeIt.next();
      if (node.isLeaf()) {
        String nodeName=node.getName();
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.addLeaf(nodeName);
        nodeName=getSpeciesName(nodeName);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.addLeaf(nodeName);
        addToClusters(clusters,cluster,1);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (!rooted) {
          tryAddingGeneSTBs(clusters,cluster,treeComplementary(gtCluster,leaves),null,node,allInducedByGTSize);
        }
      }
 else {
        int childCount=node.getChildCount();
        STITreeCluster childbslist[]=new STITreeCluster[childCount];
        BitSet bs=new BitSet(leaves.length);
        BitSet gbs=new BitSet(leaves.length);
        int index=0;
        for (Iterator iterator3=node.getChildren().iterator(); iterator3.hasNext(); ) {
          TNode child=(TNode)iterator3.next();
          childbslist[index++]=nodeToSTCluster.get(child);
          bs.or(nodeToSTCluster.get(child).getCluster());
          gbs.or(nodeToGTCluster.get(child).getCluster());
        }
        STITreeCluster gtCluster=new STITreeCluster(gtLeaves);
        gtCluster.setCluster(gbs);
        STITreeCluster cluster=new STITreeCluster(leaves);
        cluster.setCluster((BitSet)bs.clone());
        int size=cluster.getClusterSize();
        addToClusters(clusters,cluster,size);
        nodeToSTCluster.put(node,cluster);
        nodeToGTCluster.put(node,gtCluster);
        if (rooted) {
          if (index > 2) {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
          STITreeCluster l_cluster=childbslist[0];
          STITreeCluster r_cluster=childbslist[1];
          tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,allInducedByGTSize);
        }
 else {
          if (childCount == 2) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster r_cluster=childbslist[1];
            STITreeCluster allMinuslAndr_cluster=treeComplementary(gtCluster,leaves);
            STITreeCluster lAndr_cluster=cluster;
            if (allMinuslAndr_cluster.getClusterSize() != 0) {
              tryAddingGeneSTBs(clusters,l_cluster,r_cluster,cluster,node,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,r_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,l_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
              tryAddingGeneSTBs(clusters,lAndr_cluster,allMinuslAndr_cluster,null,node,allInducedByGTSize);
            }
          }
 else           if (childCount == 3 && node.isRoot()) {
            STITreeCluster l_cluster=childbslist[0];
            STITreeCluster m_cluster=childbslist[1];
            STITreeCluster r_cluster=childbslist[2];
            tryAddingGeneSTBs(clusters,l_cluster,r_cluster,null,node,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,r_cluster,m_cluster,null,node,allInducedByGTSize);
            tryAddingGeneSTBs(clusters,l_cluster,m_cluster,null,node,allInducedByGTSize);
          }
 else {
            throw new RuntimeException(""String_Node_Str"" + tr + ""String_Node_Str""+ node);
          }
        }
      }
    }
  }
  int s=0;
  for (  Integer c : geneTreeSTBCount.values()) {
    s+=c;
  }
  System.err.println(""String_Node_Str"" + s);
  s=0;
  for (  Integer c : clusters.keySet()) {
    s+=clusters.get(c).size();
  }
  System.err.println(""String_Node_Str"" + clusters.size());
  weights=new HashMap<STBipartition,Integer>(geneTreeSTBCount.size());
  return sigmaN;
}",0.9841088590731754
125215,"public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonNameMap != null && taxonNameMap.taxonMap != null) {
    Map<String,String> taxonMap=taxonNameMap.taxonMap;
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else   if (taxonNameMap != null && taxonNameMap.taxonMap == null) {
    Set<String> taxalist=new HashSet<String>();
    Set<String> genelist=new HashSet<String>();
    for (    Tree tr : trees) {
      String[] leaves=tr.getLeaves();
      for (int i=0; i < leaves.length; i++) {
        String leaf=leaves[i];
        genelist.add(leaf);
        taxalist.add(taxonNameMap.getTaxonName(leaf));
      }
    }
    stTaxa=new String[taxalist.size()];
    gtTaxa=new String[genelist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    index=0;
    for (    String gene : genelist) {
      gtTaxa[(index++)]=gene;
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonNameMap == null && false) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.err.println(""String_Node_Str"" + stTaxa.length);
  System.err.println(""String_Node_Str"" + Arrays.toString(stTaxa));
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted,taxonNameMap);
  int sigmaN=counter.computeTreeSTBipartitions(trees,clusters);
  if (extraTrees != null) {
    counter.addExtraBipartitionsByInput(clusters,extraTrees,extrarooted);
  }
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,extraTrees);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=optimizeDuploss == 3 ? sigmaN + 2 * (stTaxa.length - 1) * trees.size() : sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonNameMap);
  if (taxonNameMap == null && rooted && extraTrees == null && false) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}","public List<Solution> inferSpeciesTree(){
  long startTime=System.currentTimeMillis();
  String[] gtTaxa;
  String[] stTaxa;
  Collapse.CollapseDescriptor cd=null;
  if ((trees == null) || (trees.size() == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (taxonNameMap != null && taxonNameMap.taxonMap != null) {
    Map<String,String> taxonMap=taxonNameMap.taxonMap;
    String error=Trees.checkMapping(trees,taxonMap);
    if (error != null) {
      throw new RuntimeException(""String_Node_Str"" + error + ""String_Node_Str"");
    }
    List temp1=new LinkedList();
    List temp2=new LinkedList();
    for (    String s : taxonMap.keySet()) {
      temp1.add(s);
      if (!((List)temp2).contains(taxonMap.get(s))) {
        ((List)temp2).add((String)taxonMap.get(s));
      }
    }
    gtTaxa=new String[temp1.size()];
    stTaxa=new String[temp2.size()];
    for (int i=0; i < gtTaxa.length; i++) {
      gtTaxa[i]=((String)temp1.get(i));
    }
    for (int i=0; i < stTaxa.length; i++) {
      stTaxa[i]=((String)((List)temp2).get(i));
    }
  }
 else   if (taxonNameMap != null && taxonNameMap.taxonMap == null) {
    Set<String> taxalist=new HashSet<String>();
    Set<String> genelist=new HashSet<String>();
    for (    Tree tr : trees) {
      String[] leaves=tr.getLeaves();
      for (int i=0; i < leaves.length; i++) {
        String leaf=leaves[i];
        genelist.add(leaf);
        taxalist.add(taxonNameMap.getTaxonName(leaf));
      }
    }
    stTaxa=new String[taxalist.size()];
    gtTaxa=new String[genelist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    index=0;
    for (    String gene : genelist) {
      gtTaxa[(index++)]=gene;
    }
  }
 else {
    cd=null;
    if (rooted & extraTrees == null & taxonNameMap == null && false) {
      cd=doCollapse(trees);
    }
    List<String> taxalist=new ArrayList<String>();
    for (    Tree tr : trees) {
      for (      TNode node : tr.postTraverse()) {
        if ((node.isLeaf()) && (!taxalist.contains(node.getName()))) {
          taxalist.add(node.getName());
        }
      }
    }
    stTaxa=new String[taxalist.size()];
    int index=0;
    for (    String taxon : taxalist) {
      stTaxa[(index++)]=taxon;
    }
    gtTaxa=stTaxa;
  }
  System.err.println(""String_Node_Str"" + stTaxa.length);
  System.err.println(""String_Node_Str"" + Arrays.toString(stTaxa));
  clusters=new HashMap<Integer,Set<Vertex>>(stTaxa.length);
  List<Solution> solutions;
  counter=new DuplicationWeightCounter(gtTaxa,stTaxa,rooted,taxonNameMap);
  int sigmaN=counter.computeTreeSTBipartitions(trees,clusters);
  if (extraTrees != null) {
    counter.addExtraBipartitionsByInput(clusters,extraTrees,extrarooted);
  }
  counter.addExtraBipartitionsByHeuristics(clusters);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  counter.preCalculateWeights(trees,extraTrees);
  if (_print) {
    System.err.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000.0D + ""String_Node_Str"");
  }
  sigmaNs=(optimizeDuploss == 3) ? sigmaN + 2 * (stTaxa.length - 1) * trees.size() : sigmaN;
  solutions=findTreesByDP(stTaxa,counter,trees,taxonNameMap);
  if (taxonNameMap == null && rooted && extraTrees == null && false) {
    restoreCollapse(solutions,cd);
  }
  return (List<Solution>)solutions;
}",0.9997088791848616
125216,"@Override public ModuleNeeded clone(){
  ModuleNeeded cloned=new ModuleNeeded(context,moduleName,informationMsg,mrRequired,installURL,requiredIf,mavenUri);
  cloned.bundleName=bundleName;
  cloned.bundleVersion=bundleVersion;
  cloned.context=context;
  cloned.dynamic=dynamic;
  cloned.excludeDependencies=cloned.excludeDependencies;
  if (extraAttributes != null && !extraAttributes.isEmpty()) {
    cloned.extraAttributes=new HashMap<>(extraAttributes);
  }
  cloned.id=id;
  cloned.informationMsg=informationMsg;
  cloned.installStatus=installStatus;
  if (installURL != null && !installURL.isEmpty()) {
    cloned.installURL=new ArrayList<>(installURL);
  }
  cloned.isShow=isShow;
  cloned.libManagerService=libManagerService;
  cloned.mavenUri=mavenUri;
  cloned.mavenUriFromConfiguration=mavenUriFromConfiguration;
  cloned.moduleLocaion=moduleLocaion;
  cloned.moduleName=moduleName;
  cloned.mrRequired=mrRequired;
  cloned.required=required;
  cloned.requiredIf=requiredIf;
  cloned.status=status;
  return cloned;
}","@Override public ModuleNeeded clone(){
  ModuleNeeded cloned=new ModuleNeeded(context,moduleName,informationMsg,mrRequired,installURL,requiredIf,mavenUri);
  cloned.bundleName=bundleName;
  cloned.bundleVersion=bundleVersion;
  cloned.context=context;
  cloned.dynamic=dynamic;
  cloned.excludeDependencies=excludeDependencies;
  if (extraAttributes != null && !extraAttributes.isEmpty()) {
    cloned.extraAttributes=new HashMap<>(extraAttributes);
  }
  cloned.id=id;
  cloned.informationMsg=informationMsg;
  cloned.installStatus=installStatus;
  if (installURL != null && !installURL.isEmpty()) {
    cloned.installURL=new ArrayList<>(installURL);
  }
  cloned.isShow=isShow;
  cloned.libManagerService=libManagerService;
  cloned.mavenUri=mavenUri;
  cloned.mavenUriFromConfiguration=mavenUriFromConfiguration;
  cloned.moduleLocaion=moduleLocaion;
  cloned.moduleName=moduleName;
  cloned.mrRequired=mrRequired;
  cloned.required=required;
  cloned.requiredIf=requiredIf;
  cloned.status=status;
  return cloned;
}",0.9965803615046408
125217,"public void syncAllPomsWithoutProgress(IProgressMonitor monitor) throws Exception {
  IRunProcessService runProcessService=getRunProcessService();
  List<IRepositoryViewObject> objects=new ArrayList<>();
  if (runProcessService != null) {
    for (    ERepositoryObjectType type : ERepositoryObjectType.getAllTypesOfProcess2()) {
      objects.addAll(ProxyRepositoryFactory.getInstance().getAll(type,true,true));
    }
  }
  BuildCacheManager.getInstance().clearAllCaches();
  int size=3 + (objects == null ? 0 : objects.size());
  monitor.setTaskName(""String_Node_Str"");
  monitor.beginTask(""String_Node_Str"",size);
  monitor.subTask(""String_Node_Str"");
  updateCodeProjects(monitor,true);
  monitor.worked(1);
  if (monitor.isCanceled()) {
    return;
  }
  List<String> modules=new ArrayList<>();
  if (objects != null) {
    IFilterService filterService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IFilterService.class)) {
      filterService=(IFilterService)GlobalServiceRegister.getDefault().getService(IFilterService.class);
    }
    String pomFilter=PomIdsHelper.getPomFilter();
    List<ERepositoryObjectType> allJobletTypes=ERepositoryObjectType.getAllTypesOfJoblet();
    for (    IRepositoryViewObject object : objects) {
      if (filterService != null) {
        if (!allJobletTypes.contains(object.getRepositoryObjectType()) && !filterService.isFilterAccepted(object.getProperty().getItem(),pomFilter)) {
          continue;
        }
      }
      if (object.getProperty() != null && object.getProperty().getItem() != null) {
        Item item=object.getProperty().getItem();
        if (ProjectManager.getInstance().isInCurrentMainProject(item)) {
          monitor.subTask(""String_Node_Str"" + item.getProperty().getLabel() + ""String_Node_Str""+ item.getProperty().getVersion());
          runProcessService.generatePom(item);
          IFile pomFile=getItemPomFolder(item.getProperty()).getFile(TalendMavenConstants.POM_FILE_NAME);
          if (pomFile.exists()) {
            modules.add(getModulePath(pomFile));
          }
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled()) {
        return;
      }
    }
  }
  monitor.subTask(""String_Node_Str"");
  collectModules(modules);
  createRootPom(modules,true,monitor);
  monitor.worked(1);
  monitor.subTask(""String_Node_Str"");
  installRootPom(true);
  monitor.worked(1);
  if (monitor.isCanceled()) {
    return;
  }
  monitor.done();
}","public void syncAllPomsWithoutProgress(IProgressMonitor monitor) throws Exception {
  IRunProcessService runProcessService=getRunProcessService();
  List<IRepositoryViewObject> objects=new ArrayList<>();
  if (runProcessService != null) {
    for (    ERepositoryObjectType type : ERepositoryObjectType.getAllTypesOfProcess2()) {
      objects.addAll(ProxyRepositoryFactory.getInstance().getAll(type,true,true));
    }
  }
  BuildCacheManager.getInstance().clearAllCaches();
  int size=3 + (objects == null ? 0 : objects.size());
  monitor.setTaskName(""String_Node_Str"");
  monitor.beginTask(""String_Node_Str"",size);
  monitor.subTask(""String_Node_Str"");
  createRootPom(null,true,monitor);
  installRootPom(true);
  monitor.worked(1);
  if (monitor.isCanceled()) {
    return;
  }
  monitor.subTask(""String_Node_Str"");
  updateCodeProjects(monitor,true);
  monitor.worked(1);
  if (monitor.isCanceled()) {
    return;
  }
  List<String> modules=new ArrayList<>();
  if (objects != null) {
    IFilterService filterService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IFilterService.class)) {
      filterService=(IFilterService)GlobalServiceRegister.getDefault().getService(IFilterService.class);
    }
    String pomFilter=PomIdsHelper.getPomFilter();
    List<ERepositoryObjectType> allJobletTypes=ERepositoryObjectType.getAllTypesOfJoblet();
    for (    IRepositoryViewObject object : objects) {
      if (filterService != null) {
        if (!allJobletTypes.contains(object.getRepositoryObjectType()) && !filterService.isFilterAccepted(object.getProperty().getItem(),pomFilter)) {
          continue;
        }
      }
      if (object.getProperty() != null && object.getProperty().getItem() != null) {
        Item item=object.getProperty().getItem();
        if (ProjectManager.getInstance().isInCurrentMainProject(item)) {
          monitor.subTask(""String_Node_Str"" + item.getProperty().getLabel() + ""String_Node_Str""+ item.getProperty().getVersion());
          runProcessService.generatePom(item);
          IFile pomFile=getItemPomFolder(item.getProperty()).getFile(TalendMavenConstants.POM_FILE_NAME);
          if (pomFile.exists()) {
            modules.add(getModulePath(pomFile));
          }
        }
      }
      monitor.worked(1);
      if (monitor.isCanceled()) {
        return;
      }
    }
  }
  monitor.subTask(""String_Node_Str"");
  collectModules(modules);
  createRootPom(modules,true,monitor);
  installRootPom(true);
  monitor.worked(1);
  if (monitor.isCanceled()) {
    return;
  }
  monitor.done();
}",0.9457518946948544
125218,"private File getInstalledFileFromLocalRepo(String groupId,String artifactId,String version,String packaging) throws IOException {
  String projectMvnUrl=MavenUrlHelper.generateMvnUrl(groupId,artifactId,version,packaging,null);
  String projectLocalMavenUri=projectMvnUrl.replace(""String_Node_Str"",""String_Node_Str"" + MavenConstants.LOCAL_RESOLUTION_URL + ""String_Node_Str"");
  File installedFile=null;
  try {
    Thread.sleep(3000);
    installedFile=TalendMavenResolver.getMavenResolver().resolve(projectLocalMavenUri);
  }
 catch (  IOException e) {
    try {
      Thread.sleep(3000);
      installedFile=TalendMavenResolver.getMavenResolver().resolve(projectLocalMavenUri);
    }
 catch (    InterruptedException e1) {
    }
catch (    IOException e1) {
      throw e1;
    }
  }
catch (  InterruptedException e) {
  }
  return installedFile;
}","private File getInstalledFileFromLocalRepo(String groupId,String artifactId,String version,String packaging) throws IOException {
  String projectMvnUrl=MavenUrlHelper.generateMvnUrl(groupId,artifactId,version,packaging,null);
  String projectLocalMavenUri=projectMvnUrl.replace(""String_Node_Str"",""String_Node_Str"" + MavenConstants.LOCAL_RESOLUTION_URL + ""String_Node_Str"");
  File installedFile=TalendMavenResolver.getMavenResolver().resolve(projectLocalMavenUri);
  return installedFile;
}",0.6373134328358209
125219,"private void addModulesToCache(Set<String> mavenUristoSearch,List<MavenArtifact> searchResults,Map<String,ModuleToInstall> theCache){
  for (  MavenArtifact artifact : searchResults) {
    String artifactId=artifact.getArtifactId();
    String packageName=artifact.getType();
    if (packageName == null) {
      packageName=MavenConstants.TYPE_JAR;
    }
    String version=artifact.getVersion();
    String description=artifact.getDescription();
    String license=artifact.getLicense();
    String license_url=artifact.getLicenseUrl();
    String url=null;
    if (artifact.getUrl() != null && !""String_Node_Str"".equals(artifact.getUrl())) {
      url=artifact.getUrl();
    }
    ModuleToInstall m=new ModuleToInstall();
    String mvnUri=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifactId,version,packageName,artifact.getClassifier());
    m.setMavenUri(mvnUri);
    List<ModuleNeeded> list=contextMap.get(mvnUri);
    for (    ModuleNeeded module : list) {
      if (mvnUri.equals(module.getMavenUri())) {
        m.setName(module.getModuleName());
      }
    }
    if (m.getName() == null) {
      if (MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId()) || StringUtils.isEmpty(version)) {
        m.setName(artifactId + ""String_Node_Str"" + packageName);
      }
 else {
        m.setName(artifactId + ""String_Node_Str"" + version+ ""String_Node_Str""+ packageName);
      }
    }
    m.setLicenseType(license);
    m.setLicenseUrl(license_url);
    m.setDescription(description);
    m.setUrl_description(url);
    m.setUrl_download(url);
    if (StringUtils.isEmpty(artifact.getType()) || MavenConstants.PACKAGING_POM.equals(artifact.getType())) {
      m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
    }
    if (theCache == localCache) {
      m.setFromCustomNexus(true);
    }
    theCache.put(mvnUri,m);
  }
}","private void addModulesToCache(Set<String> mavenUristoSearch,List<MavenArtifact> searchResults,Map<String,ModuleToInstall> theCache){
  for (  MavenArtifact artifact : searchResults) {
    String artifactId=artifact.getArtifactId();
    String packageName=artifact.getType();
    if (packageName == null) {
      packageName=MavenConstants.TYPE_JAR;
    }
    String version=artifact.getVersion();
    String description=artifact.getDescription();
    String license=artifact.getLicense();
    String license_url=artifact.getLicenseUrl();
    String url=null;
    if (artifact.getUrl() != null && !""String_Node_Str"".equals(artifact.getUrl())) {
      url=artifact.getUrl();
    }
    ModuleToInstall m=new ModuleToInstall();
    String mvnUri=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifactId,version,packageName,artifact.getClassifier());
    m.setMavenUri(mvnUri);
    List<ModuleNeeded> list=contextMap.get(mvnUri);
    if (list != null) {
      for (      ModuleNeeded module : list) {
        if (mvnUri.equals(module.getMavenUri())) {
          m.setName(module.getModuleName());
        }
      }
    }
    if (m.getName() == null) {
      if (MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId()) || StringUtils.isEmpty(version)) {
        m.setName(artifactId + ""String_Node_Str"" + packageName);
      }
 else {
        m.setName(artifactId + ""String_Node_Str"" + version+ ""String_Node_Str""+ packageName);
      }
    }
    m.setLicenseType(license);
    m.setLicenseUrl(license_url);
    m.setDescription(description);
    m.setUrl_description(url);
    m.setUrl_download(url);
    if (StringUtils.isEmpty(artifact.getType()) || MavenConstants.PACKAGING_POM.equals(artifact.getType())) {
      m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
    }
    if (theCache == localCache) {
      m.setFromCustomNexus(true);
    }
    theCache.put(mvnUri,m);
  }
}",0.9679315873864244
125220,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  coreService.createStatsLogAndImplicitParamter(ProjectManager.getInstance().getCurrentProject());
  IRunProcessService runProcessService=getRunProcessService();
  if (runProcessService != null) {
    runProcessService.initializeRootPoms(monitor);
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  coreService.createStatsLogAndImplicitParamter(ProjectManager.getInstance().getCurrentProject());
}",0.7320490367775832
125221,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      isCancelled=false;
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      project.setReferenceProjectProvider(null);
      getRepositoryContext().setProject(null);
      initEmfProjectContent();
      if (getEmfProjectContent(project.getTechnicalLabel()) != null) {
        project.setEmfProject(getEmfProjectContent(project.getTechnicalLabel()));
      }
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      ReferenceProjectProvider.clearTacReferenceList();
      ReferenceProjectProblemManager.getInstance().clearAll();
      this.repositoryFactoryFromProvider.beforeLogon(project);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      checkReferenceProjectsProblems(project);
      if (isCancelled) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        coreService.syncLibraries(currentMonitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,true,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getLogonRecords().clear();
      this.repositoryFactoryFromProvider.logOnProject(project);
      ProjectManager.getInstance().getLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      fireRepositoryPropertyChange(ERepositoryActionName.PROJECT_PREFERENCES_RELOAD.getName(),null,null);
      IRunProcessService runProcessService=getRunProcessService();
      if (runProcessService != null) {
        runProcessService.initMavenJavaProject(monitor,project);
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,false,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        String specifiedVersion=null;
        String currentVersion=JavaUtils.getProjectJavaVersion();
        String newVersion=null;
        if (CommonUIPlugin.isFullyHeadless()) {
          specifiedVersion=JavaHomeUtil.getSpecifiedJavaVersion();
        }
        if (specifiedVersion == null) {
          newVersion=currentVersion != null ? currentVersion : JavaUtils.DEFAULT_VERSION;
        }
 else {
          newVersion=specifiedVersion;
        }
        JavaUtils.updateProjectJavaVersion(newVersion);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null && coreService != null) {
        coreService.syncLog4jSettings(null);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      try {
        URL url=MetadataTalendType.getProjectForderURLOfMappingsFile();
        if (url != null) {
          System.setProperty(""String_Node_Str"",url.toString());
        }
      }
 catch (      SystemException e) {
      }
      if (runProcessService != null) {
        runProcessService.initializeRootPoms(monitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITaCoKitService.class)) {
        ITaCoKitService tacokitService=(ITaCoKitService)GlobalServiceRegister.getDefault().getService(ITaCoKitService.class);
        try {
          tacokitService.checkMigration(monitor);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon(monitor);
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  BusinessException e) {
    logOffProject();
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      isCancelled=false;
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      project.setReferenceProjectProvider(null);
      getRepositoryContext().setProject(null);
      initEmfProjectContent();
      if (getEmfProjectContent(project.getTechnicalLabel()) != null) {
        project.setEmfProject(getEmfProjectContent(project.getTechnicalLabel()));
      }
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      ReferenceProjectProvider.clearTacReferenceList();
      ReferenceProjectProblemManager.getInstance().clearAll();
      this.repositoryFactoryFromProvider.beforeLogon(project);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      checkReferenceProjectsProblems(project);
      if (isCancelled) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        coreService.syncLibraries(currentMonitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,true,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getLogonRecords().clear();
      this.repositoryFactoryFromProvider.logOnProject(project);
      ProjectManager.getInstance().getLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      fireRepositoryPropertyChange(ERepositoryActionName.PROJECT_PREFERENCES_RELOAD.getName(),null,null);
      IRunProcessService runProcessService=getRunProcessService();
      if (runProcessService != null) {
        runProcessService.initMavenJavaProject(monitor,project);
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,false,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      boolean isCommandLineLocalRefProject=false;
      CommandLineContext commandLineContext=(CommandLineContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.COMMANDLINE_CONTEXT_KEY);
      if (commandLineContext != null && commandLineContext.isLogonRefProject()) {
        isCommandLineLocalRefProject=true;
      }
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        String specifiedVersion=null;
        String currentVersion=JavaUtils.getProjectJavaVersion();
        String newVersion=null;
        if (CommonUIPlugin.isFullyHeadless()) {
          specifiedVersion=JavaHomeUtil.getSpecifiedJavaVersion();
        }
        if (specifiedVersion == null) {
          newVersion=currentVersion != null ? currentVersion : JavaUtils.DEFAULT_VERSION;
        }
 else {
          newVersion=specifiedVersion;
        }
        JavaUtils.updateProjectJavaVersion(newVersion);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        if (!isCommandLineLocalRefProject) {
          try {
            coreService.syncAllRoutines();
            coreService.syncAllBeans();
          }
 catch (          SystemException e1) {
          }
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null && coreService != null) {
        coreService.syncLog4jSettings(null);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      try {
        URL url=MetadataTalendType.getProjectForderURLOfMappingsFile();
        if (url != null) {
          System.setProperty(""String_Node_Str"",url.toString());
        }
      }
 catch (      SystemException e) {
      }
      if (runProcessService != null && !isCommandLineLocalRefProject) {
        runProcessService.initializeRootPoms(monitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITaCoKitService.class)) {
        ITaCoKitService tacokitService=(ITaCoKitService)GlobalServiceRegister.getDefault().getService(ITaCoKitService.class);
        try {
          tacokitService.checkMigration(monitor);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon(monitor);
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  BusinessException e) {
    logOffProject();
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.975891677675033
125222,"protected IFile getRoutineFile(RoutineItem routineItem,boolean currentProject) throws SystemException {
  Project project;
  if (currentProject) {
    project=ProjectManager.getInstance().getCurrentProject();
  }
 else {
    String projectTechName=ProjectManager.getInstance().getProject(routineItem).getTechnicalLabel();
    project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
  }
  ITalendProcessJavaProject talendProcessJavaProject=getRunProcessService().getTalendCodeJavaProject(ERepositoryObjectType.getItemType(routineItem),project);
  if (talendProcessJavaProject == null) {
    return null;
  }
  IFolder routineFolder=talendProcessJavaProject.getSrcSubFolder(null,routineItem.getPackageType());
  IFile file=routineFolder.getFile(routineItem.getProperty().getLabel() + JavaUtils.JAVA_EXTENSION);
  return file;
}","protected IFile getRoutineFile(RoutineItem routineItem,boolean currentProject) throws SystemException {
  String projectTechName;
  if (currentProject) {
    projectTechName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
  }
 else {
    projectTechName=ProjectManager.getInstance().getProject(routineItem).getTechnicalLabel();
  }
  ITalendProcessJavaProject talendProcessJavaProject=getRunProcessService().getTalendCodeJavaProject(ERepositoryObjectType.getItemType(routineItem),projectTechName);
  if (talendProcessJavaProject == null) {
    return null;
  }
  IFolder routineFolder=talendProcessJavaProject.getSrcSubFolder(null,routineItem.getPackageType());
  IFile file=routineFolder.getFile(routineItem.getProperty().getLabel() + JavaUtils.JAVA_EXTENSION);
  return file;
}",0.716183574879227
125223,"@Override public void syncAllBeansForLogOn() throws SystemException {
  for (  RoutineItem beanItem : getBeans(needSyncRefProject())) {
    syncRoutine(beanItem,true,true,true);
  }
}","@Override public void syncAllBeansForLogOn() throws SystemException {
  for (  RoutineItem beanItem : getBeans(true)) {
    syncRoutine(beanItem,true,true,true);
  }
}",0.9371428571428572
125224,"ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,Project project);","ITalendProcessJavaProject getTalendCodeJavaProject(ERepositoryObjectType type,String projectTechName);",0.9035532994923858
125225,"private static void build(ERepositoryObjectType codeType,boolean install,IProgressMonitor monitor) throws Exception {
  ITalendProcessJavaProject codeProject=getCodesProject(codeType);
  codeProject.buildModules(monitor,null,null);
  if (install) {
    Map<String,Object> argumentsMap=new HashMap<>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
    codeProject.buildModules(monitor,null,argumentsMap);
    BuildCacheManager.getInstance().updateCodeLastBuildDate(codeType);
  }
}","private static void build(ERepositoryObjectType codeType,boolean install,IProgressMonitor monitor) throws Exception {
  ITalendProcessJavaProject codeProject=getCodesProject(codeType);
  codeProject.buildWholeCodeProject();
  if (install) {
    Map<String,Object> argumentsMap=new HashMap<>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
    codeProject.buildModules(monitor,null,argumentsMap);
    BuildCacheManager.getInstance().updateCodeLastBuildDate(codeType);
  }
}",0.9661290322580646
125226,"public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  windowsScriptAdditionValue.append(this.getWindowsScriptAddition());
  unixScriptAdditionValue.append(this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString().trim(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  org.talend.core.model.general.Project project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    ProjectPreferenceManager preferenceManager=new ProjectPreferenceManager(project,""String_Node_Str"",false);
    mainProjectBranch=preferenceManager.getValue(RepositoryConstants.PROJECT_BRANCH_ID);
    if (mainProjectBranch == null) {
      mainProjectBranch=""String_Node_Str"";
    }
  }
  jobInfoContent=StringUtils.replace(jobInfoContent,""String_Node_Str"",mainProjectBranch);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}","public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  if (StringUtils.isNotEmpty(this.getWindowsScriptAddition())) {
    windowsScriptAdditionValue.append(this.getWindowsScriptAddition());
  }
  if (StringUtils.isNotEmpty(this.getWindowsScriptAddition())) {
    unixScriptAdditionValue.append(this.getUnixScriptAddition());
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString().trim(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  org.talend.core.model.general.Project project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    ProjectPreferenceManager preferenceManager=new ProjectPreferenceManager(project,""String_Node_Str"",false);
    mainProjectBranch=preferenceManager.getValue(RepositoryConstants.PROJECT_BRANCH_ID);
    if (mainProjectBranch == null) {
      mainProjectBranch=""String_Node_Str"";
    }
  }
  jobInfoContent=StringUtils.replace(jobInfoContent,""String_Node_Str"",mainProjectBranch);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}",0.990228013029316
125227,"private static void generatePigudfInfor(JobInfo jobInfo,ProcessItem selectedProcessItem,IProcess currentProcess,IProcessor processor,Set<ModuleNeeded> neededLibraries) throws ProcessorException {
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  Set<String> pigudfNeededWithSubjobPerJob=LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  String pigModuleName=null;
  if (selectedProcessItem != null && !pigudfNeededWithSubjobPerJob.isEmpty()) {
    CorePlugin.getDefault().getRunProcessService().updateLibraries(neededModules,currentProcess);
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    pigModuleName=service.exportPigudf(processor,selectedProcessItem.getProperty(),exportConfig);
  }
  Set<ModuleNeeded> test=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  if (test != null && pigModuleName != null) {
    test.add(new ModuleNeeded(null,pigModuleName,null,true));
  }
}","private static void generatePigudfInfor(JobInfo jobInfo,ProcessItem selectedProcessItem,IProcess currentProcess,IProcessor processor) throws ProcessorException {
  Set<ModuleNeeded> neededModules=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  Set<String> pigudfNeededWithSubjobPerJob=LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  String pigModuleName=null;
  if (selectedProcessItem != null && !pigudfNeededWithSubjobPerJob.isEmpty()) {
    CorePlugin.getDefault().getRunProcessService().updateLibraries(neededModules,currentProcess);
    IRepositoryService service=CorePlugin.getDefault().getRepositoryService();
    pigModuleName=service.exportPigudf(processor,selectedProcessItem.getProperty(),exportConfig);
  }
  Set<ModuleNeeded> test=LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion());
  if (test != null && pigModuleName != null) {
    test.add(new ModuleNeeded(null,pigModuleName,null,true));
  }
}",0.3103139013452914
125228,"private Set<ModuleNeeded> getAllModuleNeededWithTestCase() throws PersistenceException {
  Set<ModuleNeeded> neededLibraries=new HashSet<>();
  boolean needTestCase=false;
  List<ProcessItem> testContainers=null;
  ProcessItem item=null;
  if (processor.getProperty() != null && processor.getProperty().getItem() instanceof ProcessItem) {
    item=(ProcessItem)processor.getProperty().getItem();
  }
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (item != null) {
      boolean isTestCase=testContainerService.isTestContainerItem(item);
      boolean isLatestJob=false;
      if (isTestCase) {
        item=(ProcessItem)testContainerService.getParentJobItem(item);
      }
 else {
        IRepositoryViewObject object=ProxyRepositoryFactory.getInstance().getLastVersion(item.getProperty().getId());
        if (object != null && VersionUtils.compareTo(item.getProperty().getVersion(),object.getVersion()) == 0) {
          isLatestJob=true;
        }
      }
      if (isTestCase || isLatestJob) {
        testContainers=testContainerService.getAllTestContainers(item);
        getAllLatestTestContainers(testContainers);
        if (testContainers != null && !testContainers.isEmpty()) {
          needTestCase=true;
        }
      }
    }
  }
  Collection<ModuleNeeded> modulesNeeded=LastGenerationInfo.getInstance().getModulesNeededPerJob(processor.getProcess().getId(),processor.getProcess().getVersion());
  if (modulesNeeded.isEmpty()) {
    modulesNeeded=processor.getNeededModules(TalendProcessOptionConstants.MODULES_WITH_JOBLET);
  }
  neededLibraries.addAll(modulesNeeded);
  if (needTestCase) {
    for (    ProcessItem testcaseItem : testContainers) {
      IProcess testcaseProcess=getDesignerCoreService().getProcessFromProcessItem(testcaseItem);
      neededLibraries.addAll(testcaseProcess.getNeededModules(TalendProcessOptionConstants.MODULES_DEFAULT));
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
      ILibraryManagerService repositoryBundleService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
      repositoryBundleService.installModules(neededLibraries,null);
    }
  }
  return neededLibraries;
}","private Set<ModuleNeeded> getAllModuleNeededWithTestCase() throws PersistenceException {
  Set<ModuleNeeded> neededLibraries=new HashSet<>();
  Collection<ModuleNeeded> modulesNeeded=LastGenerationInfo.getInstance().getModulesNeededPerJob(processor.getProcess().getId(),processor.getProcess().getVersion());
  if (modulesNeeded.isEmpty()) {
    modulesNeeded=processor.getNeededModules(TalendProcessOptionConstants.MODULES_WITH_JOBLET);
  }
  neededLibraries.addAll(modulesNeeded);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testcontainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    Set<ModuleNeeded> testcaseModules=null;
    if (processor.getProperty() != null && processor.getProperty().getItem() instanceof ProcessItem) {
      ProcessItem item=(ProcessItem)processor.getProperty().getItem();
      testcaseModules=testcontainerService.getAllJobTestcaseModules(item);
      neededLibraries.addAll(testcaseModules);
      if (testcaseModules != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
          ILibraryManagerService repositoryBundleService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
          repositoryBundleService.installModules(neededLibraries,null);
        }
      }
    }
  }
  return neededLibraries;
}",0.4160638563232726
125229,"protected void addDependencies(Model model){
  try {
    getProcessorDependenciesManager().updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    String projectTechName=ProjectManager.getInstance().getProject(getJobProcessor().getProperty()).getTechnicalLabel();
    String codeVersion=PomIdsHelper.getCodesVersion(projectTechName);
    String routinesGroupId=PomIdsHelper.getCodesGroupId(projectTechName,TalendMavenConstants.DEFAULT_CODE);
    String routinesArtifactId=TalendMavenConstants.DEFAULT_ROUTINES_ARTIFACT_ID;
    Dependency routinesDependency=PomUtil.createDependency(routinesGroupId,routinesArtifactId,codeVersion,null);
    dependencies.add(routinesDependency);
    if (ProcessUtils.isRequiredPigUDFs(jobProcessor.getProcess())) {
      String pigudfsGroupId=PomIdsHelper.getCodesGroupId(projectTechName,TalendMavenConstants.DEFAULT_PIGUDF);
      String pigudfsArtifactId=TalendMavenConstants.DEFAULT_PIGUDFS_ARTIFACT_ID;
      Dependency pigudfsDependency=PomUtil.createDependency(pigudfsGroupId,pigudfsArtifactId,codeVersion,null);
      dependencies.add(pigudfsDependency);
    }
    if (ProcessUtils.isRequiredBeans(jobProcessor.getProcess())) {
      String beansGroupId=PomIdsHelper.getCodesGroupId(projectTechName,TalendMavenConstants.DEFAULT_BEAN);
      String beansArtifactId=TalendMavenConstants.DEFAULT_BEANS_ARTIFACT_ID;
      Dependency beansDependency=PomUtil.createDependency(beansGroupId,beansArtifactId,codeVersion,null);
      dependencies.add(beansDependency);
    }
    addChildrenDependencies(dependencies);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}","protected void addDependencies(Model model){
  try {
    getProcessorDependenciesManager().updateDependencies(null,model);
    final List<Dependency> dependencies=model.getDependencies();
    addCodesDependencies(dependencies);
    addChildrenDependencies(dependencies);
  }
 catch (  ProcessorException e) {
    ExceptionHandler.process(e);
  }
}",0.3146401985111662
125230,"public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  if (StringUtils.isNotEmpty(this.getWindowsScriptAddition())) {
    windowsScriptAdditionValue.append(this.getWindowsScriptAddition());
  }
  if (StringUtils.isNotEmpty(this.getWindowsScriptAddition())) {
    unixScriptAdditionValue.append(this.getUnixScriptAddition());
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString().trim(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  org.talend.core.model.general.Project project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    ProjectPreferenceManager preferenceManager=new ProjectPreferenceManager(project,""String_Node_Str"",false);
    mainProjectBranch=preferenceManager.getValue(RepositoryConstants.PROJECT_BRANCH_ID);
    if (mainProjectBranch == null) {
      mainProjectBranch=""String_Node_Str"";
    }
  }
  jobInfoContent=StringUtils.replace(jobInfoContent,""String_Node_Str"",mainProjectBranch);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}","public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  if (StringUtils.isNotEmpty(this.getWindowsScriptAddition())) {
    windowsScriptAdditionValue.append(this.getWindowsScriptAddition());
  }
  if (StringUtils.isNotEmpty(this.getUnixScriptAddition())) {
    unixScriptAdditionValue.append(this.getUnixScriptAddition());
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString().trim(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  org.talend.core.model.general.Project project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    ProjectPreferenceManager preferenceManager=new ProjectPreferenceManager(project,""String_Node_Str"",false);
    mainProjectBranch=preferenceManager.getValue(RepositoryConstants.PROJECT_BRANCH_ID);
    if (mainProjectBranch == null) {
      mainProjectBranch=""String_Node_Str"";
    }
  }
  jobInfoContent=StringUtils.replace(jobInfoContent,""String_Node_Str"",mainProjectBranch);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}",0.9992898185809284
125231,"public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  addScriptAddition(windowsScriptAdditionValue,this.getWindowsScriptAddition());
  addScriptAddition(unixScriptAdditionValue,this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString().trim(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  org.talend.core.model.general.Project project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    ProjectPreferenceManager preferenceManager=new ProjectPreferenceManager(project,""String_Node_Str"",false);
    mainProjectBranch=preferenceManager.getValue(RepositoryConstants.PROJECT_BRANCH_ID);
    if (mainProjectBranch == null) {
      mainProjectBranch=""String_Node_Str"";
    }
  }
  jobInfoContent=StringUtils.replace(jobInfoContent,""String_Node_Str"",mainProjectBranch);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}","public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  windowsScriptAdditionValue.append(this.getWindowsScriptAddition());
  unixScriptAdditionValue.append(this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString().trim(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  String projectTechName=ProjectManager.getInstance().getProject(property).getTechnicalLabel();
  org.talend.core.model.general.Project project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    ProjectPreferenceManager preferenceManager=new ProjectPreferenceManager(project,""String_Node_Str"",false);
    mainProjectBranch=preferenceManager.getValue(RepositoryConstants.PROJECT_BRANCH_ID);
    if (mainProjectBranch == null) {
      mainProjectBranch=""String_Node_Str"";
    }
  }
  jobInfoContent=StringUtils.replace(jobInfoContent,""String_Node_Str"",mainProjectBranch);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}",0.9964543663821404
125232,"/** 
 * Constructor.
 * @param compositeParent used to initialize <code>Table</code>.
 */
public TableViewerCreatorNotModifiable(Composite compositeParent){
  super();
  this.compositeParent=compositeParent;
  this.emptyZoneColor=compositeParent.getDisplay().getSystemColor(SWT.COLOR_WHITE);
}","/** 
 * Constructor.
 * @param compositeParent used to initialize <code>Table</code>.
 */
public TableViewerCreatorNotModifiable(Composite compositeParent){
  super();
  this.compositeParent=compositeParent;
  this.emptyZoneColor=compositeParent.getDisplay().getSystemColor(SWT.COLOR_WHITE);
  initLazyLoad();
}",0.9701986754966888
125233,"public void setLazyLoad(boolean lazyLoad){
  if (!Boolean.getBoolean(""String_Node_Str"")) {
    this.lazyLoad=lazyLoad;
  }
}","public void setLazyLoad(boolean lazyLoad){
  if (isLazyLoadingDisabled()) {
    this.lazyLoad=false;
  }
 else {
    this.lazyLoad=lazyLoad;
  }
}",0.6888888888888889
125234,public String getPlatformURLFromIndex(String mavenURI);,public String getPlatformURLFromIndex(String jarName);,0.8990825688073395
125235,"public String getMavenUri(){
  return getMavenUri(true);
}","/** 
 * Get the maven URI with priority:custom URI ,URI from configuration, generated by default
 * @return
 */
public String getMavenUri(){
  if (getCustomMavenUri() != null) {
    return getCustomMavenUri();
  }
  mavenUri=initURI();
  return mavenUri;
}",0.2738853503184713
125236,"public String getModuleLocaion(){
  if (this.moduleLocaion == null) {
    if (moduleLocaionFromConfiguration != null && moduleLocaionFromConfiguration.startsWith(""String_Node_Str"")) {
      moduleLocaion=moduleLocaionFromConfiguration;
    }
 else {
      boolean checkCustomURI=false;
      moduleLocaion=libManagerService.getPlatformURLFromIndex(getMavenUri(checkCustomURI));
    }
    if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
      ModuleStatusProvider.resetStatus(getMavenUri());
    }
  }
  return moduleLocaion;
}","public String getModuleLocaion(){
  if (this.moduleLocaion == null) {
    moduleLocaion=libManagerService.getPlatformURLFromIndex(moduleName);
    if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
      ModuleStatusProvider.resetStatus(getMavenUri());
    }
  }
  return moduleLocaion;
}",0.6153846153846154
125237,"@Override public ModuleNeeded clone(){
  ModuleNeeded cloned=new ModuleNeeded(context,moduleName,informationMsg,mrRequired,installURL,requiredIf,mavenUri);
  cloned.bundleName=bundleName;
  cloned.bundleVersion=bundleVersion;
  cloned.context=context;
  cloned.dynamic=dynamic;
  cloned.excludeDependencies=cloned.excludeDependencies;
  if (extraAttributes != null && !extraAttributes.isEmpty()) {
    cloned.extraAttributes=new HashMap<>(extraAttributes);
  }
  cloned.id=id;
  cloned.informationMsg=informationMsg;
  cloned.installStatus=installStatus;
  if (installURL != null && !installURL.isEmpty()) {
    cloned.installURL=new ArrayList<>(installURL);
  }
  cloned.isShow=isShow;
  cloned.libManagerService=libManagerService;
  cloned.mavenUri=mavenUri;
  cloned.mavenUriFromConfiguration=mavenUriFromConfiguration;
  cloned.moduleLocaionFromConfiguration=moduleLocaionFromConfiguration;
  cloned.moduleName=moduleName;
  cloned.mrRequired=mrRequired;
  cloned.required=required;
  cloned.requiredIf=requiredIf;
  cloned.status=status;
  return cloned;
}","@Override public ModuleNeeded clone(){
  ModuleNeeded cloned=new ModuleNeeded(context,moduleName,informationMsg,mrRequired,installURL,requiredIf,mavenUri);
  cloned.bundleName=bundleName;
  cloned.bundleVersion=bundleVersion;
  cloned.context=context;
  cloned.dynamic=dynamic;
  cloned.excludeDependencies=cloned.excludeDependencies;
  if (extraAttributes != null && !extraAttributes.isEmpty()) {
    cloned.extraAttributes=new HashMap<>(extraAttributes);
  }
  cloned.id=id;
  cloned.informationMsg=informationMsg;
  cloned.installStatus=installStatus;
  if (installURL != null && !installURL.isEmpty()) {
    cloned.installURL=new ArrayList<>(installURL);
  }
  cloned.isShow=isShow;
  cloned.libManagerService=libManagerService;
  cloned.mavenUri=mavenUri;
  cloned.mavenUriFromConfiguration=mavenUriFromConfiguration;
  cloned.moduleLocaion=moduleLocaion;
  cloned.moduleName=moduleName;
  cloned.mrRequired=mrRequired;
  cloned.required=required;
  cloned.requiredIf=requiredIf;
  cloned.status=status;
  return cloned;
}",0.9837164750957854
125238,"public void setModuleLocaion(String moduleLocaion){
  if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
    ModuleStatusProvider.resetStatus(getMavenUri());
  }
  this.moduleLocaionFromConfiguration=moduleLocaion;
}","public void setModuleLocaion(String moduleLocaion){
  if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
    ModuleStatusProvider.resetStatus(getMavenUri());
  }
  this.moduleLocaion=moduleLocaion;
}",0.9689213893967094
125239,"public static Set<String> getAllModuleNamesFromIndex(){
  Set<String> moduleNames=new HashSet<String>();
  moduleNames.addAll(LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().keySet());
  for (  String platformURL : LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath().values()) {
    try {
      File file=new File(platformURL);
      moduleNames.add(file.getName());
    }
 catch (    Exception e) {
      continue;
    }
  }
  return moduleNames;
}","public static Set<String> getAllModuleNamesFromIndex(){
  Set<String> moduleNames=new HashSet<String>();
  moduleNames.addAll(LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().keySet());
  moduleNames.addAll(LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath().keySet());
  return moduleNames;
}",0.5634458672875436
125240,public String getPlatformURLFromIndex(String jarName);,public String getPlatformURLFromIndex(String mavenURI);,0.8990825688073395
125241,"/** 
 * Get the maven URI with priority:custom URI ,URI from configuration, generated by default
 * @return
 */
public String getMavenUri(){
  if (getCustomMavenUri() != null) {
    return getCustomMavenUri();
  }
  mavenUri=initURI();
  return mavenUri;
}","public String getMavenUri(){
  return getMavenUri(true);
}",0.3439490445859872
125242,"public String getModuleLocaion(){
  if (this.moduleLocaion == null) {
    moduleLocaion=libManagerService.getPlatformURLFromIndex(moduleName);
    if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
      ModuleStatusProvider.resetStatus(getMavenUri());
    }
  }
  return moduleLocaion;
}","public String getModuleLocaion(){
  if (this.moduleLocaion == null) {
    if (moduleLocaionFromConfiguration != null && moduleLocaionFromConfiguration.startsWith(""String_Node_Str"")) {
      moduleLocaion=moduleLocaionFromConfiguration;
    }
 else {
      boolean checkCustomURI=false;
      moduleLocaion=libManagerService.getPlatformURLFromIndex(getMavenUri(checkCustomURI));
    }
    if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
      ModuleStatusProvider.resetStatus(getMavenUri());
    }
  }
  return moduleLocaion;
}",0.6385669125395153
125243,"@Override public ModuleNeeded clone(){
  ModuleNeeded cloned=new ModuleNeeded(context,moduleName,informationMsg,mrRequired,installURL,requiredIf,mavenUri);
  cloned.bundleName=bundleName;
  cloned.bundleVersion=bundleVersion;
  cloned.context=context;
  cloned.dynamic=dynamic;
  cloned.excludeDependencies=cloned.excludeDependencies;
  if (extraAttributes != null && !extraAttributes.isEmpty()) {
    cloned.extraAttributes=new HashMap<>(extraAttributes);
  }
  cloned.id=id;
  cloned.informationMsg=informationMsg;
  cloned.installStatus=installStatus;
  if (installURL != null && !installURL.isEmpty()) {
    cloned.installURL=new ArrayList<>(installURL);
  }
  cloned.isShow=isShow;
  cloned.libManagerService=libManagerService;
  cloned.mavenUri=mavenUri;
  cloned.mavenUriFromConfiguration=mavenUriFromConfiguration;
  cloned.moduleLocaion=moduleLocaion;
  cloned.moduleName=moduleName;
  cloned.mrRequired=mrRequired;
  cloned.required=required;
  cloned.requiredIf=requiredIf;
  cloned.status=status;
  return cloned;
}","@Override public ModuleNeeded clone(){
  ModuleNeeded cloned=new ModuleNeeded(context,moduleName,informationMsg,mrRequired,installURL,requiredIf,mavenUri);
  cloned.bundleName=bundleName;
  cloned.bundleVersion=bundleVersion;
  cloned.context=context;
  cloned.dynamic=dynamic;
  cloned.excludeDependencies=cloned.excludeDependencies;
  if (extraAttributes != null && !extraAttributes.isEmpty()) {
    cloned.extraAttributes=new HashMap<>(extraAttributes);
  }
  cloned.id=id;
  cloned.informationMsg=informationMsg;
  cloned.installStatus=installStatus;
  if (installURL != null && !installURL.isEmpty()) {
    cloned.installURL=new ArrayList<>(installURL);
  }
  cloned.isShow=isShow;
  cloned.libManagerService=libManagerService;
  cloned.mavenUri=mavenUri;
  cloned.mavenUriFromConfiguration=mavenUriFromConfiguration;
  cloned.moduleLocaionFromConfiguration=moduleLocaionFromConfiguration;
  cloned.moduleName=moduleName;
  cloned.mrRequired=mrRequired;
  cloned.required=required;
  cloned.requiredIf=requiredIf;
  cloned.status=status;
  return cloned;
}",0.9837164750957854
125244,"public void setModuleLocaion(String moduleLocaion){
  if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
    ModuleStatusProvider.resetStatus(getMavenUri());
  }
  this.moduleLocaion=moduleLocaion;
}","public void setModuleLocaion(String moduleLocaion){
  if (moduleLocaion != null && ELibraryInstallStatus.NOT_INSTALLED == ModuleStatusProvider.getStatus(getMavenUri())) {
    ModuleStatusProvider.resetStatus(getMavenUri());
  }
  this.moduleLocaionFromConfiguration=moduleLocaion;
}",0.9689213893967094
125245,"public static Set<String> getAllModuleNamesFromIndex(){
  Set<String> moduleNames=new HashSet<String>();
  moduleNames.addAll(LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().keySet());
  moduleNames.addAll(LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath().keySet());
  return moduleNames;
}","public static Set<String> getAllModuleNamesFromIndex(){
  Set<String> moduleNames=new HashSet<String>();
  moduleNames.addAll(LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().keySet());
  for (  String platformURL : LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath().values()) {
    try {
      File file=new File(platformURL);
      moduleNames.add(file.getName());
    }
 catch (    Exception e) {
      continue;
    }
  }
  return moduleNames;
}",0.7427240977881258
125246,"/** 
 * Constructor.
 * @param compositeParent used to initialize <code>Table</code>.
 */
public TableViewerCreatorNotModifiable(Composite compositeParent){
  super();
  this.compositeParent=compositeParent;
  this.emptyZoneColor=compositeParent.getDisplay().getSystemColor(SWT.COLOR_WHITE);
  initLazyLoad();
}","/** 
 * Constructor.
 * @param compositeParent used to initialize <code>Table</code>.
 */
public TableViewerCreatorNotModifiable(Composite compositeParent){
  super();
  this.compositeParent=compositeParent;
  this.emptyZoneColor=compositeParent.getDisplay().getSystemColor(SWT.COLOR_WHITE);
}",0.9701986754966888
125247,"private boolean isLazyLoadingDisabled(){
  return Boolean.getBoolean(""String_Node_Str"");
}","public static boolean isLazyLoadingDisabled(){
  return Boolean.getBoolean(""String_Node_Str"");
}",0.935483870967742
125248,"/** 
 * .
 * @param newTableViewerCreator
 */
protected void setTableViewerCreatorOptions(TableViewerCreator<B> newTableViewerCreator){
  newTableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  newTableViewerCreator.setColumnsResizableByDefault(true);
  newTableViewerCreator.setBorderVisible(true);
  newTableViewerCreator.setFirstColumnMasked(true);
  newTableViewerCreator.setFirstVisibleColumnIsSelection(false);
  newTableViewerCreator.setCheckboxInFirstColumn(false);
  newTableViewerCreator.setBgColorForEmptyArea(getParentComposite().getDisplay().getSystemColor(SWT.COLOR_WHITE));
}","/** 
 * .
 * @param newTableViewerCreator
 */
protected void setTableViewerCreatorOptions(TableViewerCreator<B> newTableViewerCreator){
  newTableViewerCreator.setLayoutMode(LAYOUT_MODE.CONTINUOUS);
  newTableViewerCreator.setColumnsResizableByDefault(true);
  newTableViewerCreator.setBorderVisible(true);
  newTableViewerCreator.setFirstColumnMasked(true);
  newTableViewerCreator.setLazyLoad(TableViewerCreator.getRecommandLazyLoad());
  newTableViewerCreator.setFirstVisibleColumnIsSelection(false);
  newTableViewerCreator.setCheckboxInFirstColumn(false);
  newTableViewerCreator.setBgColorForEmptyArea(getParentComposite().getDisplay().getSystemColor(SWT.COLOR_WHITE));
}",0.9372056514913658
125249,"/** 
 * copy the current item's drools file from 'workspace/metadata/survivorship' to '.Java/src/resources'
 * @param processItem
 */
private static void copyDQDroolsToSrc(ProcessItem processItem){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQItemService.class)) {
    ITDQItemService tdqItemService=(ITDQItemService)GlobalServiceRegister.getDefault().getService(ITDQItemService.class);
    if (tdqItemService == null) {
      return;
    }
    try {
      ExportFileResource resouece=new ExportFileResource();
      BuildExportManager.getInstance().exportDependencies(resouece,processItem);
      if (resouece.getAllResources().isEmpty()) {
        return;
      }
      final Iterator<String> relativepath=resouece.getRelativePathList().iterator();
      String pathStr=""String_Node_Str"";
      IRunProcessService runProcessService=CorePlugin.getDefault().getRunProcessService();
      ITalendProcessJavaProject talendProcessJavaProject=runProcessService.getTalendJobJavaProject(processItem.getProperty());
      IFolder targetFolder=talendProcessJavaProject.getExternalResourcesFolder();
      if (targetFolder.exists()) {
        IFolder survFolder=targetFolder.getFolder(new Path(pathStr));
        if (survFolder.exists()) {
          survFolder.delete(true,null);
        }
        while (relativepath.hasNext()) {
          String relativePath=relativepath.next();
          Set<URL> sources=resouece.getResourcesByRelativePath(relativePath);
          for (          URL sourceUrl : sources) {
            File currentResource=new File(org.talend.commons.utils.io.FilesUtils.getFileRealPath(sourceUrl.getPath()));
            if (currentResource.exists()) {
              FilesUtils.copyDirectory(currentResource,new File(targetFolder.getLocation().toPortableString() + File.separator + pathStr));
            }
          }
        }
      }
    }
 catch (    Exception exc) {
      log.error(exc);
    }
  }
}","/** 
 * copy the current item's drools file from 'workspace/metadata/survivorship' to '.Java/src/resources'
 * @param processItem
 */
private static void copyDQDroolsToSrc(ProcessItem processItem){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQItemService.class)) {
    ITDQItemService tdqItemService=(ITDQItemService)GlobalServiceRegister.getDefault().getService(ITDQItemService.class);
    if (tdqItemService == null) {
      return;
    }
    try {
      ExportFileResource resouece=new ExportFileResource();
      BuildExportManager.getInstance().exportDependencies(resouece,processItem);
      if (resouece.getAllResources().isEmpty()) {
        return;
      }
      final Iterator<String> relativepath=resouece.getRelativePathList().iterator();
      String pathStr=""String_Node_Str"";
      IRunProcessService runProcessService=CorePlugin.getDefault().getRunProcessService();
      ITalendProcessJavaProject talendProcessJavaProject=runProcessService.getTalendJobJavaProject(processItem.getProperty());
      IFolder targetFolder=talendProcessJavaProject.getResourcesFolder();
      if (targetFolder.exists()) {
        IFolder survFolder=targetFolder.getFolder(new Path(pathStr));
        if (survFolder.exists()) {
          survFolder.delete(true,null);
        }
        while (relativepath.hasNext()) {
          String relativePath=relativepath.next();
          Set<URL> sources=resouece.getResourcesByRelativePath(relativePath);
          for (          URL sourceUrl : sources) {
            File currentResource=new File(org.talend.commons.utils.io.FilesUtils.getFileRealPath(sourceUrl.getPath()));
            if (currentResource.exists()) {
              FilesUtils.copyDirectory(currentResource,new File(targetFolder.getLocation().toPortableString() + File.separator + pathStr));
            }
          }
        }
      }
    }
 catch (    Exception exc) {
      log.error(exc);
    }
  }
}",0.9979328165374676
125250,"private void addModulesToCache(List<MavenArtifact> searchResults,Map<String,ModuleToInstall> theCache){
  for (  MavenArtifact artifact : searchResults) {
    String artifactId=artifact.getArtifactId();
    String packageName=artifact.getType();
    if (packageName == null) {
      packageName=MavenConstants.TYPE_JAR;
    }
    String version=artifact.getVersion();
    String description=artifact.getDescription();
    String license=artifact.getLicense();
    String license_url=artifact.getLicenseUrl();
    String url=null;
    if (artifact.getUrl() != null && !""String_Node_Str"".equals(artifact.getUrl())) {
      url=artifact.getUrl();
    }
    ModuleToInstall m=new ModuleToInstall();
    m.setName(artifactId + ""String_Node_Str"" + packageName);
    String mvnUri=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifactId,version,packageName,artifact.getClassifier());
    m.setMavenUri(mvnUri);
    m.setLicenseType(license);
    m.setLicenseUrl(license_url);
    m.setDescription(description);
    m.setUrl_description(url);
    m.setUrl_download(url);
    if (MavenConstants.PACKAGING_POM.equals(artifact.getType())) {
      m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
    }
    if (theCache == localCache) {
      m.setFromCustomNexus(true);
    }
    theCache.put(mvnUri,m);
  }
}","private void addModulesToCache(List<MavenArtifact> searchResults,Map<String,ModuleToInstall> theCache){
  for (  MavenArtifact artifact : searchResults) {
    String artifactId=artifact.getArtifactId();
    String packageName=artifact.getType();
    if (packageName == null) {
      packageName=MavenConstants.TYPE_JAR;
    }
    String version=artifact.getVersion();
    String description=artifact.getDescription();
    String license=artifact.getLicense();
    String license_url=artifact.getLicenseUrl();
    String url=null;
    if (artifact.getUrl() != null && !""String_Node_Str"".equals(artifact.getUrl())) {
      url=artifact.getUrl();
    }
    ModuleToInstall m=new ModuleToInstall();
    m.setName(artifactId + ""String_Node_Str"" + packageName);
    String mvnUri=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifactId,version,packageName,artifact.getClassifier());
    m.setMavenUri(mvnUri);
    m.setLicenseType(license);
    m.setLicenseUrl(license_url);
    m.setDescription(description);
    m.setUrl_description(url);
    m.setUrl_download(url);
    if (StringUtils.isEmpty(artifact.getType()) || MavenConstants.PACKAGING_POM.equals(artifact.getType())) {
      m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
    }
    if (theCache == localCache) {
      m.setFromCustomNexus(true);
    }
    theCache.put(mvnUri,m);
  }
}",0.9838163342115168
125251,"private static Set<JobInfo> getAllJobInfo(ProcessType ptype,JobInfo parentJobInfo,Set<JobInfo> jobInfos,boolean firstChildOnly){
  if (ptype == null) {
    return jobInfos;
  }
  EList<NodeType> nodes=ptype.getNode();
  String jobletPaletteType=null;
  String frameWork=ptype.getFramework();
  if (frameWork == null) {
    jobletPaletteType=ComponentCategory.CATEGORY_4_DI.getName();
  }
 else   if (frameWork.equals(HadoopConstants.FRAMEWORK_SPARK)) {
    jobletPaletteType=ComponentCategory.CATEGORY_4_SPARK.getName();
  }
 else   if (frameWork.equals(HadoopConstants.FRAMEWORK_SPARK_STREAMING)) {
    jobletPaletteType=ComponentCategory.CATEGORY_4_SPARKSTREAMING.getName();
  }
  for (  NodeType node : nodes) {
    boolean activate=true;
    for (    Object o : node.getElementParameter()) {
      ElementParameterType param=(ElementParameterType)o;
      if (""String_Node_Str"".equals(param.getName())) {
        activate=""String_Node_Str"".equals(param.getValue());
        break;
      }
    }
    if (!activate) {
      continue;
    }
    boolean isCTalendJob=""String_Node_Str"".equalsIgnoreCase(node.getComponentName());
    boolean isRoutelet=isRouteletNode(node);
    if (""String_Node_Str"".equalsIgnoreCase(node.getComponentName()) || isCTalendJob || isRoutelet) {
      String jobIds=getParameterValue(node.getElementParameter(),isCTalendJob ? ""String_Node_Str"" : ""String_Node_Str"" + (isRoutelet ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
      String jobContext=getParameterValue(node.getElementParameter(),isCTalendJob ? ""String_Node_Str"" : ""String_Node_Str"" + (isRoutelet ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
      String jobVersion=getParameterValue(node.getElementParameter(),isCTalendJob ? ""String_Node_Str"" : ""String_Node_Str"" + (isRoutelet ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
      String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
      for (      String jobId : jobsArr) {
        if (StringUtils.isNotEmpty(jobId)) {
          ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,jobVersion);
          if (processItem != null) {
            JobInfo jobInfo=new JobInfo(processItem,jobContext);
            if (!jobInfos.contains(jobInfo)) {
              jobInfos.add(jobInfo);
              jobInfo.setFatherJobInfo(parentJobInfo);
              if (!firstChildOnly) {
                getAllJobInfo(processItem.getProcess(),jobInfo,jobInfos,firstChildOnly);
              }
            }
          }
        }
      }
    }
 else {
      if (jobletPaletteType != null && PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null) {
          IComponent jobletComponent=service.getJobletComponent(node,jobletPaletteType);
          ProcessType jobletProcess=service.getJobletProcess(jobletComponent);
          if (jobletComponent != null) {
            if (!firstChildOnly) {
              getAllJobInfo(jobletProcess,parentJobInfo,jobInfos,firstChildOnly);
            }
 else {
              Property property=service.getJobletComponentItem(jobletComponent);
              JobInfo jobInfo=new JobInfo(property,jobletProcess.getDefaultContext());
              if (!jobInfos.contains(jobInfo)) {
                jobInfos.add(jobInfo);
                jobInfo.setFatherJobInfo(parentJobInfo);
              }
            }
          }
        }
      }
    }
  }
  if (!parentJobInfo.isTestContainer() && !parentJobInfo.isJoblet() && GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      List<ProcessItem> testsItems=testContainerService.getTestContainersByVersion(parentJobInfo.getProcessItem());
      for (      ProcessItem testItem : testsItems) {
        ProcessType testProcess=testContainerService.getTestContainerProcess(testItem);
        if (testItem.getProcess() == null) {
          testItem.setProcess(testProcess);
        }
        if (testProcess == null) {
          log.warn(Messages.getString(""String_Node_Str""));
          continue;
        }
        JobInfo jobInfo=new JobInfo(testItem,testProcess.getDefaultContext());
        jobInfo.setTestContainer(true);
        jobInfos.add(jobInfo);
        jobInfo.setFatherJobInfo(parentJobInfo);
      }
    }
  }
  return jobInfos;
}","private static Set<JobInfo> getAllJobInfo(ProcessType ptype,JobInfo parentJobInfo,Set<JobInfo> jobInfos,boolean firstChildOnly){
  if (ptype == null) {
    return jobInfos;
  }
  EList<NodeType> nodes=ptype.getNode();
  String jobletPaletteType=null;
  String frameWork=ptype.getFramework();
  if (frameWork == null) {
    jobletPaletteType=ComponentCategory.CATEGORY_4_DI.getName();
  }
 else   if (frameWork.equals(HadoopConstants.FRAMEWORK_SPARK)) {
    jobletPaletteType=ComponentCategory.CATEGORY_4_SPARK.getName();
  }
 else   if (frameWork.equals(HadoopConstants.FRAMEWORK_SPARK_STREAMING)) {
    jobletPaletteType=ComponentCategory.CATEGORY_4_SPARKSTREAMING.getName();
  }
  for (  NodeType node : nodes) {
    boolean activate=true;
    for (    Object o : node.getElementParameter()) {
      ElementParameterType param=(ElementParameterType)o;
      if (""String_Node_Str"".equals(param.getName())) {
        activate=""String_Node_Str"".equals(param.getValue());
        break;
      }
    }
    if (!activate) {
      continue;
    }
    boolean isCTalendJob=""String_Node_Str"".equalsIgnoreCase(node.getComponentName());
    boolean isRoutelet=isRouteletNode(node);
    if (""String_Node_Str"".equalsIgnoreCase(node.getComponentName()) || isCTalendJob || isRoutelet) {
      String jobIds=getParameterValue(node.getElementParameter(),isCTalendJob ? ""String_Node_Str"" : ""String_Node_Str"" + (isRoutelet ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
      String jobContext=getParameterValue(node.getElementParameter(),isCTalendJob ? ""String_Node_Str"" : ""String_Node_Str"" + (isRoutelet ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
      String jobVersion=getParameterValue(node.getElementParameter(),isCTalendJob ? ""String_Node_Str"" : ""String_Node_Str"" + (isRoutelet ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
      String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
      for (      String jobId : jobsArr) {
        if (StringUtils.isNotEmpty(jobId)) {
          ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,jobVersion);
          if (processItem != null) {
            JobInfo jobInfo=new JobInfo(processItem,jobContext);
            if (!jobInfos.contains(jobInfo)) {
              jobInfos.add(jobInfo);
              jobInfo.setFatherJobInfo(parentJobInfo);
              if (!firstChildOnly) {
                getAllJobInfo(processItem.getProcess(),jobInfo,jobInfos,firstChildOnly);
              }
            }
          }
        }
      }
    }
 else {
      if (jobletPaletteType != null && PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null) {
          IComponent jobletComponent=service.getJobletComponent(node,jobletPaletteType);
          ProcessType jobletProcess=service.getJobletProcess(jobletComponent);
          if (jobletComponent != null) {
            if (!firstChildOnly) {
              getAllJobInfo(jobletProcess,parentJobInfo,jobInfos,firstChildOnly);
            }
 else {
              Project project=null;
              String componentName=node.getComponentName();
              String[] array=componentName.split(""String_Node_Str"");
              if (array.length == 2) {
                String projectTechName=array[0];
                project=ProjectManager.getInstance().getProjectFromProjectTechLabel(projectTechName);
              }
 else {
                project=ProjectManager.getInstance().getCurrentProject();
              }
              Property property=service.getJobletComponentItem(jobletComponent);
              Project currentProject=ProjectManager.getInstance().getCurrentProject();
              if (project != null && !project.getTechnicalLabel().equals(currentProject.getTechnicalLabel())) {
                try {
                  property=ProxyRepositoryFactory.getInstance().getSpecificVersion(project,property.getId(),property.getVersion(),true).getProperty();
                }
 catch (                PersistenceException e) {
                  ExceptionHandler.process(e);
                }
              }
              JobInfo jobInfo=new JobInfo(property,jobletProcess.getDefaultContext());
              if (!jobInfos.contains(jobInfo)) {
                jobInfos.add(jobInfo);
                jobInfo.setFatherJobInfo(parentJobInfo);
              }
            }
          }
        }
      }
    }
  }
  if (!parentJobInfo.isTestContainer() && !parentJobInfo.isJoblet() && GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      List<ProcessItem> testsItems=testContainerService.getTestContainersByVersion(parentJobInfo.getProcessItem());
      for (      ProcessItem testItem : testsItems) {
        ProcessType testProcess=testContainerService.getTestContainerProcess(testItem);
        if (testItem.getProcess() == null) {
          testItem.setProcess(testProcess);
        }
        if (testProcess == null) {
          log.warn(Messages.getString(""String_Node_Str""));
          continue;
        }
        JobInfo jobInfo=new JobInfo(testItem,testProcess.getDefaultContext());
        jobInfo.setTestContainer(true);
        jobInfos.add(jobInfo);
        jobInfo.setFatherJobInfo(parentJobInfo);
      }
    }
  }
  return jobInfos;
}",0.9006648416112631
125252,"public static void addToParentModules(IFile pomFile,Property property) throws Exception {
  if (property != null) {
    List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(property.getId(),property.getVersion(),RelationshipItemBuilder.JOB_RELATION);
    for (    Relation relation : relations) {
      if (RelationshipItemBuilder.SERVICES_RELATION.equals(relation.getType())) {
        return;
      }
    }
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IFilterService.class)) {
    IFilterService filterService=(IFilterService)GlobalServiceRegister.getDefault().getService(IFilterService.class);
    if (property != null && !filterService.isFilterAccepted(property.getItem(),PomIdsHelper.getPomFilter())) {
      return;
    }
  }
  IFile parentPom=getParentModulePomFile(pomFile);
  if (parentPom != null) {
    IPath relativePath=pomFile.getParent().getLocation().makeRelativeTo(parentPom.getParent().getLocation());
    Model model=MavenPlugin.getMaven().readModel(parentPom.getContents());
    List<String> modules=model.getModules();
    if (modules == null) {
      modules=new ArrayList<>();
      model.setModules(modules);
    }
    if (!modules.contains(relativePath.toPortableString())) {
      modules.add(relativePath.toPortableString());
      PomUtil.savePom(null,model,parentPom);
    }
  }
}","public static void addToParentModules(IFile pomFile,Property property) throws Exception {
  if (property != null) {
    List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(property.getId(),property.getVersion(),RelationshipItemBuilder.JOB_RELATION);
    for (    Relation relation : relations) {
      if (RelationshipItemBuilder.SERVICES_RELATION.equals(relation.getType())) {
        return;
      }
    }
  }
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IFilterService.class)) {
    IFilterService filterService=(IFilterService)GlobalServiceRegister.getDefault().getService(IFilterService.class);
    if (property != null && !filterService.isFilterAccepted(property.getItem(),PomIdsHelper.getPomFilter())) {
      return;
    }
  }
  IFile parentPom=getParentModulePomFile(pomFile);
  if (parentPom != null) {
    if (!parentPom.isSynchronized(IResource.DEPTH_ZERO)) {
      parentPom.refreshLocal(IResource.DEPTH_ZERO,null);
    }
    IPath relativePath=pomFile.getParent().getLocation().makeRelativeTo(parentPom.getParent().getLocation());
    Model model=MavenPlugin.getMaven().readModel(parentPom.getContents());
    List<String> modules=model.getModules();
    if (modules == null) {
      modules=new ArrayList<>();
      model.setModules(modules);
    }
    if (!modules.contains(relativePath.toPortableString())) {
      modules.add(relativePath.toPortableString());
      PomUtil.savePom(null,model,parentPom);
    }
  }
}",0.956981664315938
125253,"public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  addScriptAddition(windowsScriptAdditionValue,this.getWindowsScriptAddition());
  addScriptAddition(unixScriptAdditionValue,this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}","public void generateTemplates(boolean overwrite) throws Exception {
  IProcessor processor=getJobProcessor();
  if (processor == null) {
    return;
  }
  ITalendProcessJavaProject codeProject=getJobProcessor().getTalendJavaProject();
  if (codeProject == null) {
    return;
  }
  Property property=codeProject.getPropery();
  if (property == null) {
    return;
  }
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=processor.getContext().getName();
  }
  String jobClass=JavaResourcesHelper.getJobClassPackageName(property.getItem()) + ""String_Node_Str"" + property.getLabel();
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  addScriptAddition(windowsScriptAdditionValue,this.getWindowsScriptAddition());
  addScriptAddition(unixScriptAdditionValue,this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (!contextParamType.getType().equals(""String_Node_Str"")) {
          value=StringEscapeUtils.escapeJava(value);
        }
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=log4jLevel;
      if (!log4jLevel.startsWith(TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL)) {
        log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      }
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=processor.getJVMArgs();
  StringBuilder jvmArgsStr=new StringBuilder();
  StringBuilder jvmArgsStrPs1=new StringBuilder();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg + ""String_Node_Str"");
      jvmArgsStrPs1.append(""String_Node_Str"" + arg + ""String_Node_Str"");
    }
  }
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  batContent=StringUtils.replaceEach(batContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getWindowsClasspath(),jobClass,windowsScriptAdditionValue.toString()});
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  shContent=StringUtils.replaceEach(shContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStr.toString().trim(),getUnixClasspath(),jobClass,unixScriptAdditionValue.toString()});
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  psContent=StringUtils.replaceEach(psContent,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},new String[]{jvmArgsStrPs1.toString().trim(),getWindowsClasspathForPs1(),jobClass,windowsScriptAdditionValue.toString()});
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}",0.9984562228920092
125254,"public void installPom(IFile pomFile,boolean current) throws Exception {
  Model model=MavenPlugin.getMaven().readModel(pomFile.getLocation().toFile());
  if (!isPomInstalled(model.getGroupId(),model.getArtifactId(),model.getVersion())) {
    MavenPomCommandLauncher launcher=new MavenPomCommandLauncher(pomFile,TalendMavenConstants.GOAL_INSTALL);
    if (current) {
      Map<String,Object> argumentsMap=new HashMap<>();
      argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
      launcher.setArgumentsMap(argumentsMap);
    }
    launcher.execute(new NullProgressMonitor());
  }
}","public void installPom(IFile pomFile,boolean current) throws Exception {
  if (!pomFile.exists()) {
    return;
  }
  Model model=MavenPlugin.getMaven().readModel(pomFile.getLocation().toFile());
  if (!isPomInstalled(model.getGroupId(),model.getArtifactId(),model.getVersion())) {
    MavenPomCommandLauncher launcher=new MavenPomCommandLauncher(pomFile,TalendMavenConstants.GOAL_INSTALL);
    if (current) {
      Map<String,Object> argumentsMap=new HashMap<>();
      argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
      launcher.setArgumentsMap(argumentsMap);
    }
    launcher.execute(new NullProgressMonitor());
  }
}",0.9666408068269976
125255,"private Set<Relation> getItemsJobRelatedTo(Map<Relation,Set<Relation>> itemsRelations,String itemId,String version,String relationType){
  Relation itemToTest=new Relation();
  Set<Relation> jobRelations=new HashSet<Relation>();
  itemToTest.setId(itemId);
  itemToTest.setType(relationType);
  itemToTest.setVersion(version);
  if (!itemsRelations.containsKey(itemToTest)) {
    try {
      Item item=proxyRepositoryFactory.getLastVersion(itemId).getProperty().getItem();
      addOrUpdateItem(item,false);
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage());
    }
  }
  if (itemsRelations.containsKey(itemToTest)) {
    Set<Relation> relations=itemsRelations.get(itemToTest);
    for (    Relation relatedItem : relations) {
      if (relatedItem.getType().equals(relationType)) {
        jobRelations.add(relatedItem);
      }
    }
    return jobRelations;
  }
  return jobRelations;
}","private Set<Relation> getItemsJobRelatedTo(Map<Relation,Set<Relation>> itemsRelations,String itemId,String version,String relationType,String relationTypeTofind){
  Relation itemToTest=new Relation();
  Set<Relation> jobRelations=new HashSet<Relation>();
  itemToTest.setId(itemId);
  itemToTest.setType(relationType);
  itemToTest.setVersion(version);
  if (!itemsRelations.containsKey(itemToTest)) {
    try {
      Item item=proxyRepositoryFactory.getLastVersion(itemId).getProperty().getItem();
      addOrUpdateItem(item,false);
    }
 catch (    PersistenceException e) {
      log.error(e.getMessage());
    }
  }
  if (itemsRelations.containsKey(itemToTest)) {
    Set<Relation> relations=itemsRelations.get(itemToTest);
    for (    Relation relatedItem : relations) {
      if (relatedItem.getType().equals(relationTypeTofind)) {
        jobRelations.add(relatedItem);
      }
    }
    return jobRelations;
  }
  return jobRelations;
}",0.9827956989247312
125256,"/** 
 * @deprecated use {@link IRunProcessService#getTalendJobJavaProject(Property)} instead
 */
ITalendProcessJavaProject getTalendProcessJavaProject();","/** 
 * @deprecated use {@link IRunProcessService#getTalendJobJavaProject(Property)} instead
 */
@Deprecated ITalendProcessJavaProject getTalendProcessJavaProject();",0.9622641509433962
125257,"/** 
 * DOC ycbai Comment method ""initializeSystemLibs"".
 */
public void initializeSystemLibs(){
  if (!initialized) {
    ILibraryManagerService libManagerService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
      libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    }
    for (    IConfigurationElement current : configurationElements) {
      String bundleName=current.getContributor().getName();
      Bundle bundle=Platform.getBundle(bundleName);
      Enumeration entryPaths=bundle.getEntryPaths(LIB_FOLDER);
      if (entryPaths == null) {
        continue;
      }
      while (entryPaths.hasMoreElements()) {
        Object entryPath=entryPaths.nextElement();
        if (entryPath != null && entryPath instanceof String) {
          String path=(String)entryPath;
          if (path.endsWith(FileExtensions.JAR_FILE_SUFFIX)) {
            URL entry=bundle.getEntry(path);
            if (entry != null && libManagerService != null) {
              try {
                URL fileUrl=FileLocator.toFileURL(entry);
                libManagerService.deploy(fileUrl.toURI());
              }
 catch (              Exception e) {
                log.warn(""String_Node_Str"" + bundleName + path);
                continue;
              }
            }
          }
        }
      }
      if (PluginChecker.isSVNProviderPluginLoaded()) {
        ISVNProviderServiceInCoreRuntime svnService=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
        if (svnService != null && svnService.isSvnLibSetupOnTAC()) {
          svnService.syncLibs(null);
        }
      }
    }
    initialized=true;
  }
}","/** 
 * DOC ycbai Comment method ""initializeSystemLibs"".
 */
public void initializeSystemLibs(){
  if (!initialized) {
    ILibraryManagerService libManagerService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
      libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    }
    for (    IConfigurationElement current : configurationElements) {
      String bundleName=current.getContributor().getName();
      Bundle bundle=Platform.getBundle(bundleName);
      Enumeration entryPaths=bundle.getEntryPaths(LIB_FOLDER);
      if (entryPaths == null) {
        continue;
      }
      while (entryPaths.hasMoreElements()) {
        Object entryPath=entryPaths.nextElement();
        if (entryPath != null && entryPath instanceof String) {
          String path=(String)entryPath;
          if (path.endsWith(FileExtensions.JAR_FILE_SUFFIX)) {
            URL entry=bundle.getEntry(path);
            if (entry != null && libManagerService != null) {
              try {
                URL fileUrl=FileLocator.toFileURL(entry);
                libManagerService.deploy(fileUrl.toURI());
              }
 catch (              Exception e) {
                log.warn(""String_Node_Str"" + bundleName + path);
                continue;
              }
            }
          }
        }
      }
    }
    initialized=true;
  }
}",0.878470080197409
125258,"@Override public void run(final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),libsNeedDeploy.size());
  try {
    for (    URI jar : libsNeedDeploy) {
      monitor.subTask(jar.toURL().getPath());
      librairesService.deploy(jar,monitor);
      monitor.worked(1);
    }
    if (PluginChecker.isSVNProviderPluginLoaded()) {
      ISVNProviderServiceInCoreRuntime svnService=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
      if (svnService != null && svnService.isSvnLibSetupOnTAC()) {
        svnService.syncLibs(null);
      }
    }
  }
 catch (  MalformedURLException e) {
  }
 finally {
    monitor.done();
  }
}","@Override public void run(final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),libsNeedDeploy.size());
  try {
    for (    URI jar : libsNeedDeploy) {
      monitor.subTask(jar.toURL().getPath());
      librairesService.deploy(jar,monitor);
      monitor.worked(1);
    }
  }
 catch (  MalformedURLException e) {
  }
 finally {
    monitor.done();
  }
}",0.7249190938511327
125259,"private void doDeployLibs(){
  if (libsNeedDeploy.size() == 0) {
    return;
  }
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),libsNeedDeploy.size());
      try {
        for (        URI jar : libsNeedDeploy) {
          monitor.subTask(jar.toURL().getPath());
          librairesService.deploy(jar,monitor);
          monitor.worked(1);
        }
        if (PluginChecker.isSVNProviderPluginLoaded()) {
          ISVNProviderServiceInCoreRuntime svnService=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
          if (svnService != null && svnService.isSvnLibSetupOnTAC()) {
            svnService.syncLibs(null);
          }
        }
      }
 catch (      MalformedURLException e) {
      }
 finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private void doDeployLibs(){
  if (libsNeedDeploy.size() == 0) {
    return;
  }
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),libsNeedDeploy.size());
      try {
        for (        URI jar : libsNeedDeploy) {
          monitor.subTask(jar.toURL().getPath());
          librairesService.deploy(jar,monitor);
          monitor.worked(1);
        }
      }
 catch (      MalformedURLException e) {
      }
 finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.8348457350272233
125260,"/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<ModuleNeeded> filteredRequiredJars=new ArrayList<ModuleNeeded>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    boolean installed=false;
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      try {
        if (module.getStatus() == ELibraryInstallStatus.INSTALLED && module.getDeployStatus() == ELibraryInstallStatus.NOT_DEPLOYED) {
          List<ModuleNeeded> allModuleNeeded=ModulesNeededProvider.getModulesNeededForName(moduleName);
          for (          ModuleNeeded sameModule : allModuleNeeded) {
            String moduleLocation=sameModule.getModuleLocaion();
            if (sameModule.getStatus() == ELibraryInstallStatus.INSTALLED && moduleLocation != null && !moduleLocation.isEmpty()) {
              URI uri=new URI(moduleLocation);
              URL url=FileLocator.toFileURL(uri.toURL());
              if (""String_Node_Str"".equals(url.getProtocol())) {
                libraryManagerService.deploy(URIUtil.toURI(url),module.getMavenUri());
                installed=true;
              }
              break;
            }
          }
          if (PluginChecker.isSVNProviderPluginLoaded()) {
            ISVNProviderServiceInCoreRuntime svnService=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
            if (svnService != null && svnService.isSvnLibSetupOnTAC()) {
              svnService.syncLibs(null);
            }
          }
        }
 else {
          final boolean retrieve=libraryManagerService.retrieve(module,null,false);
          installed=retrieve;
        }
      }
 catch (      URISyntaxException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
    }
    if (!installed && !new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      filteredRequiredJars.add(module);
    }
  }
  if (!filteredRequiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        dialog.showDialog(true,filteredRequiredJars);
      }
    }
);
  }
}","/** 
 * look for all the required modules for a given bundle, and let the user decide to download it. this method is blocked until the dialog box is closed.
 * @param jarMissingEvent, must never be null
 */
protected void showMissingModuleDialog(final JarMissingEvent jarMissingEvent){
  if (allModulesNeededExtensionsForPlugin == null) {
    this.allModulesNeededExtensionsForPlugin=ModulesNeededProvider.getAllModulesNeededExtensionsForPlugin();
  }
  List<ModuleNeeded> requiredModulesForBundle=ModulesNeededProvider.filterRequiredModulesForBundle(jarMissingEvent.getBundleSymbolicName(),allModulesNeededExtensionsForPlugin);
  final List<ModuleNeeded> filteredRequiredJars=new ArrayList<ModuleNeeded>(requiredModulesForBundle.size());
  for (  ModuleNeeded module : requiredModulesForBundle) {
    String moduleName=module.getModuleName();
    boolean installed=false;
    if (!new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      try {
        if (module.getStatus() == ELibraryInstallStatus.INSTALLED && module.getDeployStatus() == ELibraryInstallStatus.NOT_DEPLOYED) {
          List<ModuleNeeded> allModuleNeeded=ModulesNeededProvider.getModulesNeededForName(moduleName);
          for (          ModuleNeeded sameModule : allModuleNeeded) {
            String moduleLocation=sameModule.getModuleLocaion();
            if (sameModule.getStatus() == ELibraryInstallStatus.INSTALLED && moduleLocation != null && !moduleLocation.isEmpty()) {
              URI uri=new URI(moduleLocation);
              URL url=FileLocator.toFileURL(uri.toURL());
              if (""String_Node_Str"".equals(url.getProtocol())) {
                libraryManagerService.deploy(URIUtil.toURI(url),module.getMavenUri());
                installed=true;
              }
              break;
            }
          }
        }
 else {
          final boolean retrieve=libraryManagerService.retrieve(module,null,false);
          installed=retrieve;
        }
      }
 catch (      URISyntaxException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
catch (      IOException e) {
        log.warn(""String_Node_Str"" + moduleName,e);
      }
    }
    if (!installed && !new File(jarMissingEvent.getExpectedLibFolder(),moduleName).exists()) {
      filteredRequiredJars.add(module);
    }
  }
  if (!filteredRequiredJars.isEmpty()) {
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        ExternalModulesInstallDialogWithProgress dialog=new ExternalModulesInstallDialogWithProgress(DisplayUtils.getDefaultShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),SWT.APPLICATION_MODAL);
        dialog.showDialog(true,filteredRequiredJars);
      }
    }
);
  }
}",0.9359454855195912
125261,"public IStatus shareLibs(Job job,IProgressMonitor monitor){
  Map<ModuleNeeded,File> filesToShare=null;
  IStatus status=Status.OK_STATUS;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  ISVNProviderServiceInCoreRuntime service=null;
  boolean shareToSvn=false;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ISVNProviderServiceInCoreRuntime.class)) {
    service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
    shareToSvn=service.isSvnLibSetupOnTAC() && factory.getRepositoryContext() != null && !factory.getRepositoryContext().isOffline();
  }
  if (shareToSvn) {
    service.syncLibs(monitor);
    setJobName(job,Messages.getString(""String_Node_Str"",TYPE_SVN));
    int shareLimit=5;
    int limit=shareLimit;
    filesToShare=getFilesToShare(monitor);
    if (filesToShare == null) {
      return Status.CANCEL_STATUS;
    }
    SubMonitor mainSubMonitor=SubMonitor.convert(monitor,filesToShare.size());
    Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
    int index=0;
    while (iterator.hasNext()) {
      if (monitor.isCanceled()) {
        return Status.CANCEL_STATUS;
      }
      List<String> jars=new ArrayList<String>();
      String jarName=""String_Node_Str"";
      while (index < limit && index < filesToShare.size()) {
        ModuleNeeded next=iterator.next();
        File file=filesToShare.get(next);
        String installLocation=getStorageDirectory().getAbsolutePath();
        File target=new File(installLocation,next.getModuleName());
        if (!target.exists()) {
          try {
            MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(next.getMavenUri());
            if (artifact != null) {
              shareToRepository(file,artifact);
            }
            FilesUtils.copyFile(file,target);
            jars.add(target.getAbsolutePath());
            jarName+=next.getModuleName();
            if (index < limit - 1) {
              jarName+=""String_Node_Str"";
            }
          }
 catch (          Exception e) {
            continue;
          }
        }
        index++;
      }
      limit+=shareLimit;
      try {
        if (jars.size() > 0) {
          mainSubMonitor.setTaskName(Messages.getString(""String_Node_Str"",jarName));
          service.deployNewJar(jars);
        }
        mainSubMonitor.worked(limit);
      }
 catch (      Exception e) {
        ExceptionHandler.process(new Exception(""String_Node_Str"" + jarName + ""String_Node_Str"",e));
        status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,""String_Node_Str"" + jarName + ""String_Node_Str"",e);
        continue;
      }
    }
  }
 else {
    try {
      int searchLimit=50;
      setJobName(job,Messages.getString(""String_Node_Str"",TYPE_NEXUS));
      final List<MavenArtifact> searchResults=new ArrayList<MavenArtifact>();
      NexusServerBean customNexusServer=TalendLibsServerManager.getInstance().getCustomNexusServer();
      IRepositoryArtifactHandler customerRepHandler=RepositoryArtifactHandlerManager.getRepositoryHandler(customNexusServer);
      if (customerRepHandler != null) {
        filesToShare=getFilesToShare(monitor);
        if (filesToShare == null) {
          return Status.CANCEL_STATUS;
        }
        SubMonitor mainSubMonitor=SubMonitor.convert(monitor,filesToShare.size());
        Set<String> groupIds=new HashSet<String>();
        for (        ModuleNeeded module : filesToShare.keySet()) {
          if (module.getMavenUri() != null) {
            MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(module.getMavenUri());
            if (parseMvnUrl != null) {
              groupIds.add(parseMvnUrl.getGroupId());
            }
          }
        }
        for (        String groupId : groupIds) {
          searchResults.addAll(customerRepHandler.search(groupId,null,null,true,true));
        }
        int limit=searchLimit;
        int shareIndex=0;
        Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
        while (iterator.hasNext()) {
          if (monitor.isCanceled()) {
            return Status.CANCEL_STATUS;
          }
          shareIndex++;
          if (shareIndex == limit) {
            limit+=searchLimit;
          }
          ModuleNeeded next=iterator.next();
          File file=filesToShare.get(next);
          String name=file.getName();
          MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(next.getMavenUri());
          if (artifact == null) {
            continue;
          }
          boolean eixst=false;
          String groupId=artifact.getGroupId();
          String artifactId=artifact.getArtifactId();
          String version=artifact.getVersion();
          for (          MavenArtifact remoteAtifact : searchResults) {
            String rGroup=remoteAtifact.getGroupId();
            String rArtifact=remoteAtifact.getArtifactId();
            String rVersion=remoteAtifact.getVersion();
            if (groupId != null && artifactId != null && version != null && groupId.equals(rGroup) && artifactId.equals(rArtifact) && version.equals(rVersion)) {
              eixst=true;
              break;
            }
          }
          if (eixst) {
            continue;
          }
          mainSubMonitor.setTaskName(Messages.getString(""String_Node_Str"",name));
          try {
            shareToRepository(file,artifact);
            mainSubMonitor.worked(1);
          }
 catch (          Exception e) {
            continue;
          }
        }
      }
    }
 catch (    Exception e) {
      status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,""String_Node_Str"",e);
    }
  }
  return status;
}","public IStatus shareLibs(Job job,IProgressMonitor monitor){
  Map<ModuleNeeded,File> filesToShare=null;
  IStatus status=Status.OK_STATUS;
  try {
    int searchLimit=50;
    setJobName(job,Messages.getString(""String_Node_Str"",TYPE_NEXUS));
    final List<MavenArtifact> searchResults=new ArrayList<MavenArtifact>();
    NexusServerBean customNexusServer=TalendLibsServerManager.getInstance().getCustomNexusServer();
    IRepositoryArtifactHandler customerRepHandler=RepositoryArtifactHandlerManager.getRepositoryHandler(customNexusServer);
    if (customerRepHandler != null) {
      filesToShare=getFilesToShare(monitor);
      if (filesToShare == null) {
        return Status.CANCEL_STATUS;
      }
      SubMonitor mainSubMonitor=SubMonitor.convert(monitor,filesToShare.size());
      Set<String> groupIds=new HashSet<String>();
      for (      ModuleNeeded module : filesToShare.keySet()) {
        if (module.getMavenUri() != null) {
          MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(module.getMavenUri());
          if (parseMvnUrl != null) {
            groupIds.add(parseMvnUrl.getGroupId());
          }
        }
      }
      for (      String groupId : groupIds) {
        searchResults.addAll(customerRepHandler.search(groupId,null,null,true,true));
      }
      int limit=searchLimit;
      int shareIndex=0;
      Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
      while (iterator.hasNext()) {
        if (monitor.isCanceled()) {
          return Status.CANCEL_STATUS;
        }
        shareIndex++;
        if (shareIndex == limit) {
          limit+=searchLimit;
        }
        ModuleNeeded next=iterator.next();
        File file=filesToShare.get(next);
        String name=file.getName();
        MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(next.getMavenUri());
        if (artifact == null) {
          continue;
        }
        boolean eixst=false;
        String groupId=artifact.getGroupId();
        String artifactId=artifact.getArtifactId();
        String version=artifact.getVersion();
        for (        MavenArtifact remoteAtifact : searchResults) {
          String rGroup=remoteAtifact.getGroupId();
          String rArtifact=remoteAtifact.getArtifactId();
          String rVersion=remoteAtifact.getVersion();
          if (groupId != null && artifactId != null && version != null && groupId.equals(rGroup) && artifactId.equals(rArtifact) && version.equals(rVersion)) {
            eixst=true;
            break;
          }
        }
        if (eixst) {
          continue;
        }
        mainSubMonitor.setTaskName(Messages.getString(""String_Node_Str"",name));
        try {
          shareToRepository(file,artifact);
          mainSubMonitor.worked(1);
        }
 catch (        Exception e) {
          continue;
        }
      }
    }
  }
 catch (  Exception e) {
    status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,""String_Node_Str"",e);
  }
  return status;
}",0.6691193377787997
125262,"private void refreshLocal(final String names[]){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  final String projectLabel=currentProject.getTechnicalLabel();
  try {
    for (    String name : names) {
      String jarPath=localLibraryManager.getJarPath(name);
      if (jarPath != null) {
        File source=new File(jarPath);
        if (source.exists()) {
          synJavaLibs(source);
        }
      }
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
  if (PluginChecker.isSVNProviderPluginLoaded()) {
    ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
    if (service != null) {
      File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
      boolean localConnectionProvider=true;
      IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      if (proxyRepositoryFactory != null) {
        try {
          localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
        }
 catch (        PersistenceException e) {
        }
      }
      if (!localConnectionProvider && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())&& !getRepositoryContext().isOffline()) {
        List<String> jars=new ArrayList<String>();
        for (        String name : names) {
          jars.add(libFile.getAbsolutePath() + File.separatorChar + name);
        }
        service.deployNewJar(jars);
        return;
      }
    }
  }
}","private void refreshLocal(final String names[]){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  try {
    for (    String name : names) {
      String jarPath=localLibraryManager.getJarPath(name);
      if (jarPath != null) {
        File source=new File(jarPath);
        if (source.exists()) {
          synJavaLibs(source);
        }
      }
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
}",0.4364508393285372
125263,"/** 
 * DOC nrousseau Comment method ""resolveJar"".
 * @param jarNeeded
 * @param jarFile
 * @param customNexusServer
 * @param uri
 * @return
 * @throws Exception
 * @throws IOException
 */
@Override public File resolveJar(final NexusServerBean customNexusServer,String uri) throws Exception, IOException {
  File resolvedFile=null;
  NexusDownloader nexusDownloader=new NexusDownloader();
  nexusDownloader.setTalendlibServer(customNexusServer);
  nexusDownloader.download(new URL(null,uri,new Handler()),null);
  resolvedFile=TalendMavenResolver.resolve(uri);
  if (resolvedFile != null) {
    ModuleStatusProvider.putStatus(uri,ELibraryInstallStatus.INSTALLED);
    ModuleStatusProvider.putDeployStatus(uri,ELibraryInstallStatus.DEPLOYED);
    mavenJarInstalled.put(uri,resolvedFile.getAbsolutePath());
  }
  updateLastResolveDate(uri);
  if (resolvedFile != null) {
    try {
      String pomPath=resolvedFile.getParent();
      String name=resolvedFile.getName();
      int indexOf=name.lastIndexOf(""String_Node_Str"");
      if (indexOf != -1) {
        pomPath=pomPath + ""String_Node_Str"" + name.substring(0,indexOf)+ ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
 else {
        pomPath=pomPath + name + ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
      File pomFile=new File(pomPath);
      if (!pomFile.exists()) {
        MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(uri);
        File generatedPom=new File(PomUtil.generatePom(parseMvnUrl));
        FilesUtils.copyFile(generatedPom,pomFile);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return resolvedFile;
}","/** 
 * DOC nrousseau Comment method ""resolveJar"".
 * @param jarNeeded
 * @param jarFile
 * @param customNexusServer
 * @param uri
 * @return
 * @throws Exception
 * @throws IOException
 */
@Override public File resolveJar(final NexusServerBean customNexusServer,String uri) throws Exception, IOException {
  File resolvedFile=TalendMavenResolver.resolve(uri);
  if (resolvedFile != null) {
    ModuleStatusProvider.putStatus(uri,ELibraryInstallStatus.INSTALLED);
    ModuleStatusProvider.putDeployStatus(uri,ELibraryInstallStatus.DEPLOYED);
    mavenJarInstalled.put(uri,resolvedFile.getAbsolutePath());
  }
  updateLastResolveDate(uri);
  if (resolvedFile != null) {
    try {
      String pomPath=resolvedFile.getParent();
      String name=resolvedFile.getName();
      int indexOf=name.lastIndexOf(""String_Node_Str"");
      if (indexOf != -1) {
        pomPath=pomPath + ""String_Node_Str"" + name.substring(0,indexOf)+ ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
 else {
        pomPath=pomPath + name + ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
      File pomFile=new File(pomPath);
      if (!pomFile.exists()) {
        MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(uri);
        File generatedPom=new File(PomUtil.generatePom(parseMvnUrl));
        FilesUtils.copyFile(generatedPom,pomFile);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return resolvedFile;
}",0.9349725008087998
125264,"@Override public void updateMavenResolver(Dictionary<String,String> props){
  if (props == null) {
    props=new Hashtable<String,String>();
  }
  String repositories=null;
  String custom_server=serverBean.getServer();
  String custom_user=serverBean.getUserName();
  String custom_pass=serverBean.getPassword();
  String release_rep=serverBean.getRepositoryId();
  String snapshot_rep=serverBean.getSnapshotRepId();
  if (custom_server.endsWith(NexusConstants.SLASH)) {
    custom_server=custom_server.substring(0,custom_server.length() - 1);
  }
  if (custom_user != null && !""String_Node_Str"".equals(custom_user)) {
    String[] split=custom_server.split(""String_Node_Str"");
    custom_server=split[0] + ""String_Node_Str"" + custom_user+ ""String_Node_Str""+ custom_pass+ ""String_Node_Str""+ split[1]+ getRepositoryPrefixPath();
  }
 else {
    custom_server=custom_server + getRepositoryPrefixPath();
  }
  if (release_rep != null) {
    String releaseUrl=custom_server + release_rep + ""String_Node_Str""+ release_rep;
    repositories=releaseUrl;
  }
  if (snapshot_rep != null) {
    String snapshotUrl=custom_server + snapshot_rep + ""String_Node_Str""+ snapshot_rep+ NexusConstants.SNAPSHOTS;
    if (repositories != null) {
      repositories=repositories + ""String_Node_Str"" + snapshotUrl;
    }
 else {
      repositories=snapshotUrl;
    }
  }
  if (repositories != null) {
    props.put(PAX_PID + '.' + PROPERTY_REPOSITORIES,repositories);
  }
  props.put(""String_Node_Str"",""String_Node_Str"");
  try {
    TalendMavenResolver.updateMavenResolver(props);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","@Override public void updateMavenResolver(Dictionary<String,String> props){
  if (props == null) {
    props=new Hashtable<String,String>();
  }
  String repositories=null;
  String custom_server=serverBean.getServer();
  String custom_user=serverBean.getUserName();
  String custom_pass=serverBean.getPassword();
  String release_rep=serverBean.getRepositoryId();
  String snapshot_rep=serverBean.getSnapshotRepId();
  if (custom_server.endsWith(NexusConstants.SLASH)) {
    custom_server=custom_server.substring(0,custom_server.length() - 1);
  }
  if (custom_user != null && !""String_Node_Str"".equals(custom_user)) {
    String[] split=custom_server.split(""String_Node_Str"");
    custom_server=split[0] + ""String_Node_Str"" + custom_user+ ""String_Node_Str""+ custom_pass+ ""String_Node_Str""+ split[1]+ getRepositoryPrefixPath();
  }
 else {
    custom_server=custom_server + getRepositoryPrefixPath();
  }
  if (release_rep != null) {
    String releaseUrl=custom_server + release_rep + ""String_Node_Str""+ release_rep;
    repositories=releaseUrl;
  }
  if (snapshot_rep != null) {
    String snapshotUrl=custom_server + snapshot_rep + ""String_Node_Str""+ snapshot_rep+ NexusConstants.SNAPSHOTS;
    if (repositories != null) {
      repositories=repositories + ""String_Node_Str"" + snapshotUrl;
    }
 else {
      repositories=snapshotUrl;
    }
  }
  if (repositories != null) {
    props.put(PAX_PID + '.' + PROPERTY_REPOSITORIES,repositories);
  }
  props.put(""String_Node_Str"",""String_Node_Str"");
  props.put(""String_Node_Str"",""String_Node_Str"");
  try {
    TalendMavenResolver.updateMavenResolver(props);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.9850388988629564
125265,"public org.talend.core.model.properties.Project getProject(Project project,EObject object){
  if (object != null) {
    if (object instanceof org.talend.core.model.properties.Project) {
      return (org.talend.core.model.properties.Project)object;
    }
    if (object instanceof Property) {
      return getProject(project,((Property)object).getItem());
    }
    if (object instanceof Item) {
      if (((Item)object).getParent() == null) {
        Item jobItem=getTestCaseParentItem((Item)object);
        if (jobItem != null) {
          return getProject(project,jobItem.getParent());
        }
      }
      return getProject(project,((Item)object).getParent());
    }
  }
  if (project != null) {
    return project.getEmfProject();
  }
  return null;
}","public org.talend.core.model.properties.Project getProject(Project project,EObject object){
  if (object != null) {
    if (object instanceof org.talend.core.model.properties.Project) {
      return (org.talend.core.model.properties.Project)object;
    }
    if (object instanceof Property) {
      return getProject(project,((Property)object).getItem());
    }
    if (object instanceof Item) {
      return getProject(project,((Item)object).getParent());
    }
  }
  if (project != null) {
    return project.getEmfProject();
  }
  return null;
}",0.7043544690603514
125266,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  SubMonitor subMonitor=SubMonitor.convert(monitor,1);
  SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
  currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
  coreService.syncLibraries(currentMonitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException(""String_Node_Str"");
  }
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceDescription description=workspace.getDescription();
  description.setAutoBuilding(false);
  try {
    workspace.setDescription(description);
  }
 catch (  CoreException e) {
  }
  coreService.createStatsLogAndImplicitParamter(ProjectManager.getInstance().getCurrentProject());
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException(""String_Node_Str"");
  }
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException(""String_Node_Str"");
  }
  TimeMeasure.end(""String_Node_Str"");
  TimeMeasure.display=false;
  TimeMeasure.displaySteps=false;
  TimeMeasure.measureActive=false;
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  SubMonitor subMonitor=SubMonitor.convert(monitor,1);
  SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
  currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
  coreService.syncLibraries(currentMonitor);
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException(""String_Node_Str"");
  }
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceDescription description=workspace.getDescription();
  description.setAutoBuilding(false);
  try {
    workspace.setDescription(description);
  }
 catch (  CoreException e) {
  }
  coreService.createStatsLogAndImplicitParamter(ProjectManager.getInstance().getCurrentProject());
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException(""String_Node_Str"");
  }
  if (monitor != null && monitor.isCanceled()) {
    throw new OperationCanceledException(""String_Node_Str"");
  }
  IRunProcessService runProcessService=getRunProcessService();
  if (runProcessService != null) {
    runProcessService.initializeRootPoms();
  }
  TimeMeasure.end(""String_Node_Str"");
  TimeMeasure.display=false;
  TimeMeasure.displaySteps=false;
  TimeMeasure.measureActive=false;
}",0.9517195767195769
125267,"public static void updateCodeProjects(IProgressMonitor monitor){
  RepositoryWorkUnit workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      updateCodeProject(monitor,ERepositoryObjectType.ROUTINES);
      if (ProcessUtils.isRequiredPigUDFs(null)) {
        updateCodeProject(monitor,ERepositoryObjectType.PIG_UDF);
      }
      if (ProcessUtils.isRequiredBeans(null)) {
        updateCodeProject(monitor,ERepositoryObjectType.valueOf(""String_Node_Str""));
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}","public static void updateCodeProjects(IProgressMonitor monitor,boolean forceBuild){
  RepositoryWorkUnit workUnit=new RepositoryWorkUnit<Object>(""String_Node_Str""){
    @Override protected void run(){
      updateCodeProject(monitor,ERepositoryObjectType.ROUTINES,forceBuild);
      if (ProcessUtils.isRequiredPigUDFs(null)) {
        updateCodeProject(monitor,ERepositoryObjectType.PIG_UDF,forceBuild);
      }
      if (ProcessUtils.isRequiredBeans(null)) {
        updateCodeProject(monitor,ERepositoryObjectType.valueOf(""String_Node_Str""),forceBuild);
      }
    }
  }
;
  workUnit.setAvoidUnloadResources(true);
  ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(workUnit);
}",0.9611360239162928
125268,"private static void updateCodeProject(IProgressMonitor monitor,ERepositoryObjectType codeType){
  try {
    ITalendProcessJavaProject codeProject=getCodesProject(codeType);
    updateCodeProjectPom(monitor,codeType,codeProject.getProjectPom());
    buildAndInstallCodesProject(monitor,codeType);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private static void updateCodeProject(IProgressMonitor monitor,ERepositoryObjectType codeType,boolean forceBuild){
  try {
    ITalendProcessJavaProject codeProject=getCodesProject(codeType);
    updateCodeProjectPom(monitor,codeType,codeProject.getProjectPom());
    buildAndInstallCodesProject(monitor,codeType,true,forceBuild);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.9540078843626808
125269,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      project.setReferenceProjectProvider(null);
      initEmfProjectContent();
      project.setEmfProject(getEmfProjectContent(project.getTechnicalLabel()));
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      ReferenceProjectProvider.clearTacReferenceList();
      ReferenceProjectProblemManager.getInstance().clearAll();
      this.repositoryFactoryFromProvider.beforeLogon(project);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      checkReferenceProjectsProblems(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,true,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getLogonRecords().clear();
      this.repositoryFactoryFromProvider.logOnProject(project);
      ProjectManager.getInstance().getLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      fireRepositoryPropertyChange(ERepositoryActionName.PROJECT_PREFERENCES_RELOAD.getName(),null,null);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,false,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      getRunProcessService().initMavenJavaProject(monitor,project);
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        String specifiedVersion=null;
        String currentVersion=JavaUtils.getProjectJavaVersion();
        String newVersion=null;
        if (CommonUIPlugin.isFullyHeadless()) {
          specifiedVersion=JavaHomeUtil.getSpecifiedJavaVersion();
        }
        if (specifiedVersion == null) {
          newVersion=currentVersion != null ? currentVersion : JavaUtils.DEFAULT_VERSION;
        }
 else {
          newVersion=specifiedVersion;
        }
        JavaUtils.updateProjectJavaVersion(newVersion);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null) {
        coreService.syncLog4jSettings(null);
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon(monitor);
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  BusinessException e) {
    logOffProject();
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      project.setReferenceProjectProvider(null);
      initEmfProjectContent();
      project.setEmfProject(getEmfProjectContent(project.getTechnicalLabel()));
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      ReferenceProjectProvider.clearTacReferenceList();
      ReferenceProjectProblemManager.getInstance().clearAll();
      this.repositoryFactoryFromProvider.beforeLogon(project);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      ProjectManager.getInstance().getUpdatedRemoteHandlerRecords().clear();
      checkReferenceProjectsProblems(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,true,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getLogonRecords().clear();
      this.repositoryFactoryFromProvider.logOnProject(project);
      ProjectManager.getInstance().getLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      fireRepositoryPropertyChange(ERepositoryActionName.PROJECT_PREFERENCES_RELOAD.getName(),null,null);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,false,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      IRunProcessService runProcessService=getRunProcessService();
      if (runProcessService != null) {
        runProcessService.initMavenJavaProject(monitor,project);
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        String specifiedVersion=null;
        String currentVersion=JavaUtils.getProjectJavaVersion();
        String newVersion=null;
        if (CommonUIPlugin.isFullyHeadless()) {
          specifiedVersion=JavaHomeUtil.getSpecifiedJavaVersion();
        }
        if (specifiedVersion == null) {
          newVersion=currentVersion != null ? currentVersion : JavaUtils.DEFAULT_VERSION;
        }
 else {
          newVersion=specifiedVersion;
        }
        JavaUtils.updateProjectJavaVersion(newVersion);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null && coreService != null) {
        coreService.syncLog4jSettings(null);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      if (runProcessService != null) {
        runProcessService.initializeRootPoms();
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon(monitor);
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  BusinessException e) {
    logOffProject();
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.9790534270184276
125270,"public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  if (!CommonsPlugin.isHeadless()) {
    ProjectRepositoryNode root=ProjectRepositoryNode.getInstance();
    if (root != null) {
      root.setEnableDisposed(true);
      root.dispose();
    }
  }
  getRunProcessService().deleteEclipseProjects();
  ReferenceProjectProvider.clearTacReferenceList();
  ReferenceProjectProblemManager.getInstance().clearAll();
  fullLogonFinished=false;
}","public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  if (!CommonsPlugin.isHeadless()) {
    ProjectRepositoryNode root=ProjectRepositoryNode.getInstance();
    if (root != null) {
      root.setEnableDisposed(true);
      root.dispose();
    }
  }
  IRunProcessService runProcessService=getRunProcessService();
  if (runProcessService != null) {
    runProcessService.deleteEclipseProjects();
  }
  ReferenceProjectProvider.clearTacReferenceList();
  ReferenceProjectProblemManager.getInstance().clearAll();
  fullLogonFinished=false;
}",0.8938656280428432
125271,"public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType,boolean install,boolean forceBuild) throws Exception {
  if (!CommonsPlugin.isHeadless()) {
    Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          build(codeType,install,forceBuild,monitor);
          return org.eclipse.core.runtime.Status.OK_STATUS;
        }
 catch (        Exception e) {
          return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
        }
      }
    }
;
    job.setUser(false);
    job.setPriority(Job.INTERACTIVE);
    job.schedule();
  }
 else {
synchronized (codeType) {
      build(codeType,install,forceBuild,monitor);
    }
  }
}","public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType,boolean install,boolean forceBuild) throws Exception {
  if (forceBuild || !BuildCacheManager.getInstance().isCodesBuild(codeType)) {
    if (!CommonsPlugin.isHeadless()) {
      Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
        @Override protected IStatus run(        IProgressMonitor monitor){
          try {
            build(codeType,install,forceBuild,monitor);
            return org.eclipse.core.runtime.Status.OK_STATUS;
          }
 catch (          Exception e) {
            return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
          }
        }
      }
;
      job.setUser(false);
      job.setPriority(Job.INTERACTIVE);
      job.schedule();
    }
 else {
synchronized (codeType) {
        build(codeType,install,forceBuild,monitor);
      }
    }
  }
}",0.930390492359932
125272,"public static void changeClasspath(IProgressMonitor monitor,IProject p){
  try {
    if (!p.hasNature(JavaCore.NATURE_ID)) {
      JavaUtils.addJavaNature(p,monitor);
    }
    IJavaProject javaProject=JavaCore.create(p);
    IClasspathEntry[] rawClasspathEntries=javaProject.getRawClasspath();
    List<IClasspathEntry> list=new LinkedList<>();
    ClasspathAttribute attribute=new ClasspathAttribute(""String_Node_Str"",Boolean.TRUE.toString());
    for (    ProjectSystemFolder psf : MavenSystemFolders.ALL_DIRS) {
      IFolder resources=p.getFolder(psf.getPath());
      if (resources.exists()) {
        IFolder output=p.getFolder(psf.getOutputPath());
        IClasspathEntry newEntry=JavaCore.newSourceEntry(resources.getFullPath(),new IPath[0],new IPath[0],output.getFullPath(),new IClasspathAttribute[]{attribute});
        list.add(newEntry);
      }
    }
    IPath defaultJREContainerPath=JavaRuntime.newDefaultJREContainerPath();
    IClasspathEntry newEntry=JavaCore.newContainerEntry(defaultJREContainerPath,new IAccessRule[]{},new IClasspathAttribute[]{attribute},false);
    list.add(newEntry);
    newEntry=JavaCore.newContainerEntry(new Path(""String_Node_Str""),newEntry.getAccessRules(),new IClasspathAttribute[]{attribute},newEntry.isExported());
    list.add(newEntry);
    if (!Arrays.equals(rawClasspathEntries,list.toArray(new IClasspathEntry[]{}))) {
      rawClasspathEntries=list.toArray(new IClasspathEntry[]{});
      javaProject.setRawClasspath(rawClasspathEntries,monitor);
      javaProject.setOutputLocation(p.getFolder(MavenSystemFolders.JAVA.getOutputPath()).getFullPath(),monitor);
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}","public static void changeClasspath(IProgressMonitor monitor,IProject p){
  try {
    if (!p.hasNature(JavaCore.NATURE_ID)) {
      JavaUtils.addJavaNature(p,monitor);
    }
    IJavaProject javaProject=JavaCore.create(p);
    IClasspathEntry[] rawClasspathEntries=javaProject.getRawClasspath();
    List<IClasspathEntry> list=new LinkedList<>();
    ClasspathAttribute attribute=new ClasspathAttribute(""String_Node_Str"",Boolean.TRUE.toString());
    for (    ProjectSystemFolder psf : MavenSystemFolders.ALL_DIRS) {
      IFolder resources=p.getFolder(psf.getPath());
      if (resources.exists()) {
        IFolder output=p.getFolder(psf.getOutputPath());
        IClasspathEntry newEntry=JavaCore.newSourceEntry(resources.getFullPath(),new IPath[0],new IPath[0],output.getFullPath(),new IClasspathAttribute[]{attribute});
        list.add(newEntry);
      }
    }
    IPath defaultJREContainerPath=JavaRuntime.newDefaultJREContainerPath();
    IClasspathEntry newEntry=JavaCore.newContainerEntry(defaultJREContainerPath,new IAccessRule[]{},new IClasspathAttribute[]{attribute},false);
    list.add(newEntry);
    newEntry=JavaCore.newContainerEntry(new Path(""String_Node_Str""),newEntry.getAccessRules(),new IClasspathAttribute[]{attribute},newEntry.isExported());
    list.add(newEntry);
    if (!Arrays.equals(rawClasspathEntries,list.toArray(new IClasspathEntry[]{})) || !p.getFile(""String_Node_Str"").exists()) {
      rawClasspathEntries=list.toArray(new IClasspathEntry[]{});
      javaProject.setRawClasspath(rawClasspathEntries,monitor);
      javaProject.setOutputLocation(p.getFolder(MavenSystemFolders.JAVA.getOutputPath()).getFullPath(),monitor);
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
  }
}",0.9877551020408164
125273,"public IFolder getDeploymentsFolder(){
  return getProjectPomsFolder().getFolder(DIR_AGGREGATORS);
}","@Deprecated public IFolder getDeploymentsFolder(){
  return getProjectPomsFolder().getFolder(DIR_AGGREGATORS);
}",0.9433962264150944
125274,"/** 
 * sync the bat/sh/jobInfo to resources template folder.
 */
public void syncTemplates(boolean overwrite) throws Exception {
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(codeProject.getPropery());
  String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
  String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
  String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
  String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
  MavenTemplateManager.saveContent(shFile,shContent,overwrite);
  MavenTemplateManager.saveContent(batFile,batContent,overwrite);
  MavenTemplateManager.saveContent(psFile,psContent,overwrite);
  MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
}","/** 
 * sync the bat/sh/jobInfo to resources template folder.
 */
public void syncTemplates(boolean overwrite) throws Exception {
  IFolder templateFolder=codeProject.getTemplatesFolder();
  IFile shFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_SH_TEMPLATE_FILE_NAME);
  IFile batFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_BAT_TEMPLATE_FILE_NAME);
  IFile psFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_RUN_PS_TEMPLATE_FILE_NAME);
  IFile infoFile=templateFolder.getFile(IProjectSettingTemplateConstants.JOB_INFO_TEMPLATE_FILE_NAME);
  Property property=codeProject.getPropery();
  if (property != null) {
    final Map<String,Object> templateParameters=PomUtil.getTemplateParameters(property);
    String shContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_SH,templateParameters);
    String batContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_BAT,templateParameters);
    String psContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_PS,templateParameters);
    String jobInfoContent=MavenTemplateManager.getProjectSettingValue(IProjectSettingPreferenceConstants.TEMPLATE_JOB_INFO,templateParameters);
    MavenTemplateManager.saveContent(shFile,shContent,overwrite);
    MavenTemplateManager.saveContent(batFile,batContent,overwrite);
    MavenTemplateManager.saveContent(psFile,psContent,overwrite);
    MavenTemplateManager.saveContent(infoFile,jobInfoContent,overwrite);
  }
}",0.9599483204134368
125275,"public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType,boolean install) throws Exception {
  Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        if (!BuildCacheManager.getInstance().isCodesBuild(codeType)) {
          ITalendProcessJavaProject codeProject=getCodesProject(codeType);
          codeProject.buildModules(monitor,null,null);
          if (install) {
            Map<String,Object> argumentsMap=new HashMap<>();
            argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
            argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
            codeProject.buildModules(monitor,null,argumentsMap);
            BuildCacheManager.getInstance().updateCodeLastBuildDate(codeType);
          }
        }
        return org.eclipse.core.runtime.Status.OK_STATUS;
      }
 catch (      Exception e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
      }
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.INTERACTIVE);
  if (!CommonsPlugin.isHeadless()) {
    job.schedule();
  }
 else {
    job.join();
  }
}","public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType,boolean install,boolean forceBuild) throws Exception {
  if (!CommonsPlugin.isHeadless()) {
    Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          build(codeType,install,forceBuild,monitor);
          return org.eclipse.core.runtime.Status.OK_STATUS;
        }
 catch (        Exception e) {
          return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
        }
      }
    }
;
    job.setUser(false);
    job.setPriority(Job.INTERACTIVE);
    job.schedule();
  }
 else {
synchronized (codeType) {
      build(codeType,install,forceBuild,monitor);
    }
  }
}",0.5634066448291998
125276,"public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType) throws Exception {
  if (!BuildCacheManager.getInstance().isCodesBuild(codeType)) {
    Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          ITalendProcessJavaProject codeProject=getCodesProject(codeType);
          codeProject.buildModules(new NullProgressMonitor(),null,null);
          Map<String,Object> argumentsMap=new HashMap<>();
          argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
          argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
          codeProject.buildModules(new NullProgressMonitor(),null,argumentsMap);
          BuildCacheManager.getInstance().updateCodeLastBuildDate(codeType);
          return org.eclipse.core.runtime.Status.OK_STATUS;
        }
 catch (        Exception e) {
          return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
        }
      }
    }
;
    job.setUser(false);
    job.setPriority(Job.INTERACTIVE);
    job.schedule();
  }
}","public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType,boolean install) throws Exception {
  Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        if (!BuildCacheManager.getInstance().isCodesBuild(codeType)) {
          ITalendProcessJavaProject codeProject=getCodesProject(codeType);
          codeProject.buildModules(monitor,null,null);
          if (install) {
            Map<String,Object> argumentsMap=new HashMap<>();
            argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
            argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
            codeProject.buildModules(monitor,null,argumentsMap);
            BuildCacheManager.getInstance().updateCodeLastBuildDate(codeType);
          }
        }
        return org.eclipse.core.runtime.Status.OK_STATUS;
      }
 catch (      Exception e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
      }
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.INTERACTIVE);
  if (!CommonsPlugin.isHeadless()) {
    job.schedule();
  }
 else {
    job.join();
  }
}",0.8571428571428571
125277,"@Override public void run(){
  String message=""String_Node_Str"";
  Set<String> installedModule=job.getInstalledModule();
  if (!installedModule.isEmpty()) {
    message=Messages.getString(""String_Node_Str"",data.getName());
    ImportExternalJarAction.cleanupLib(installedModule);
  }
 else {
    message=Messages.getString(""String_Node_Str"",data.getName());
    ;
    button.setEnabled(true);
  }
  MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
  if (enabledButtonCount.get() == 0) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (service != null) {
        service.refreshComponentView();
      }
    }
  }
}","@Override public void run(){
  String message=""String_Node_Str"";
  Set<String> installedModule=job.getInstalledModule();
  if (!installedModule.isEmpty()) {
    message=Messages.getString(""String_Node_Str"",data.getName());
    ImportExternalJarAction.cleanupLib(installedModule);
  }
 else {
    message=Messages.getString(""String_Node_Str"",data.getName());
    ;
    button.setEnabled(true);
  }
  MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
  if (enabledButtonCount.get() == 0) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
      IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
      if (service != null) {
        service.refreshComponentView();
      }
    }
  }
  ILibrariesService librariesService=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
  librariesService.checkLibraries();
}",0.9106659447753112
125278,"/** 
 * called when the user clicked on a indivual download button.
 * @param button, to make it disabled or enabled
 * @param enabledButtonCount, if 0 means that the last button has been clicked. This needs to maintained whenenabeling or disabeling the button
 * @param data, the data to install
 */
protected void launchIndividualDownload(final AtomicInteger enabledButtonCount,final ModuleToInstall data,final Button button){
  button.setEnabled(false);
  enabledButtonCount.decrementAndGet();
  final DownloadModuleJob job=new DownloadModuleJob(Collections.singletonList(data));
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          String message=""String_Node_Str"";
          Set<String> installedModule=job.getInstalledModule();
          if (!installedModule.isEmpty()) {
            message=Messages.getString(""String_Node_Str"",data.getName());
            ImportExternalJarAction.cleanupLib(installedModule);
          }
 else {
            message=Messages.getString(""String_Node_Str"",data.getName());
            ;
            button.setEnabled(true);
          }
          MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
          if (enabledButtonCount.get() == 0) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              if (service != null) {
                service.refreshComponentView();
              }
            }
          }
        }
      }
);
    }
  }
);
  job.setUser(true);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  if (enabledButtonCount.get() == 0) {
    close();
  }
}","/** 
 * called when the user clicked on a indivual download button.
 * @param button, to make it disabled or enabled
 * @param enabledButtonCount, if 0 means that the last button has been clicked. This needs to maintained whenenabeling or disabeling the button
 * @param data, the data to install
 */
protected void launchIndividualDownload(final AtomicInteger enabledButtonCount,final ModuleToInstall data,final Button button){
  button.setEnabled(false);
  enabledButtonCount.decrementAndGet();
  final DownloadModuleJob job=new DownloadModuleJob(Collections.singletonList(data));
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          String message=""String_Node_Str"";
          Set<String> installedModule=job.getInstalledModule();
          if (!installedModule.isEmpty()) {
            message=Messages.getString(""String_Node_Str"",data.getName());
            ImportExternalJarAction.cleanupLib(installedModule);
          }
 else {
            message=Messages.getString(""String_Node_Str"",data.getName());
            ;
            button.setEnabled(true);
          }
          MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
          if (enabledButtonCount.get() == 0) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              if (service != null) {
                service.refreshComponentView();
              }
            }
          }
          ILibrariesService librariesService=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
          librariesService.checkLibraries();
        }
      }
);
    }
  }
);
  job.setUser(true);
  job.setPriority(Job.INTERACTIVE);
  job.schedule();
  if (enabledButtonCount.get() == 0) {
    close();
  }
}",0.9548064918851435
125279,"@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      Set<String> installedModule=job.getInstalledModule();
      if (!installedModule.isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ImportExternalJarAction.cleanupLib(installedModule);
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
        button.setEnabled(true);
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
      if (enabledButtonCount.get() == 0) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          if (service != null) {
            service.refreshComponentView();
          }
        }
      }
    }
  }
);
}","@Override public void done(IJobChangeEvent event){
  Display.getDefault().asyncExec(new Runnable(){
    @Override public void run(){
      String message=""String_Node_Str"";
      Set<String> installedModule=job.getInstalledModule();
      if (!installedModule.isEmpty()) {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ImportExternalJarAction.cleanupLib(installedModule);
      }
 else {
        message=Messages.getString(""String_Node_Str"",data.getName());
        ;
        button.setEnabled(true);
      }
      MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),message);
      if (enabledButtonCount.get() == 0) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
          IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
          if (service != null) {
            service.refreshComponentView();
          }
        }
      }
      ILibrariesService librariesService=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
      librariesService.checkLibraries();
    }
  }
);
}",0.9228023203926818
125280,"private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean canDownload;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || (LibManagerUiPlugin.getDefault().getPreferenceStore().contains(module.getLicenseType()) && LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType()));
        boolean hasRepositoryUrl=false;
        String moduleMvnUri=module.getMavenUri();
        MavenArtifact mavenArtifact=MavenUrlHelper.parseMvnUrl(moduleMvnUri,false);
        if (mavenArtifact != null) {
          String repositoryUrl=mavenArtifact.getRepositoryUrl();
          hasRepositoryUrl=StringUtils.isNotEmpty(repositoryUrl);
        }
        canDownload=isLicenseAccepted | hasRepositoryUrl;
        if (!canDownload) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            if (ELibraryInstallStatus.INSTALLED == ModuleStatusProvider.getStatus(mvnUri)) {
              continue;
            }
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
          }
        }
 else {
          if (ELibraryInstallStatus.INSTALLED == ModuleStatusProvider.getStatus(module.getMavenUri())) {
            continue;
          }
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
        }
        installedModules.add(module.getName());
      }
 catch (      Exception e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(new Exception(""String_Node_Str"" + module.getName() + ""String_Node_Str"",e));
        continue;
      }
      canDownload=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
    ILibrariesService librariesService=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
    librariesService.checkLibraries();
  }
}","private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean canDownload;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || (LibManagerUiPlugin.getDefault().getPreferenceStore().contains(module.getLicenseType()) && LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType()));
        boolean hasRepositoryUrl=false;
        String moduleMvnUri=module.getMavenUri();
        MavenArtifact mavenArtifact=MavenUrlHelper.parseMvnUrl(moduleMvnUri,false);
        if (mavenArtifact != null) {
          String repositoryUrl=mavenArtifact.getRepositoryUrl();
          hasRepositoryUrl=StringUtils.isNotEmpty(repositoryUrl);
        }
        canDownload=isLicenseAccepted | hasRepositoryUrl;
        if (!canDownload) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            if (ELibraryInstallStatus.INSTALLED == ModuleStatusProvider.getStatus(mvnUri)) {
              continue;
            }
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
          }
        }
 else {
          if (ELibraryInstallStatus.INSTALLED == ModuleStatusProvider.getStatus(module.getMavenUri())) {
            continue;
          }
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
        }
        installedModules.add(module.getName());
      }
 catch (      Exception e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(new Exception(""String_Node_Str"" + module.getName() + ""String_Node_Str"",e));
        continue;
      }
      canDownload=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (checkLibraries) {
    ILibrariesService librariesService=(ILibrariesService)GlobalServiceRegister.getDefault().getService(ILibrariesService.class);
    librariesService.checkLibraries();
  }
}",0.994408945686901
125281,"/** 
 * DOC sgandon DownloadModuleRunnable constructor comment.
 * @param shell, never null, used to ask the user to accept the licenses
 * @param toDownload
 */
public DownloadModuleRunnable(List<ModuleToInstall> toDownload){
  this.toDownload=toDownload;
  downloadFailed=new HashSet<String>();
  installedModules=new HashSet<String>();
}","public DownloadModuleRunnable(List<ModuleToInstall> toDownload,boolean checkLibraries){
  this(toDownload);
  this.checkLibraries=checkLibraries;
}",0.406570841889117
125282,"/** 
 * DOC sgandon DownloadModuleRunnableWithLicenseDialog constructor comment.
 */
public DownloadModuleRunnableWithLicenseDialog(List<ModuleToInstall> toDownload,Shell shell){
  super(toDownload);
  this.shell=shell;
}","/** 
 * DOC sgandon DownloadModuleRunnableWithLicenseDialog constructor comment.
 */
public DownloadModuleRunnableWithLicenseDialog(List<ModuleToInstall> toDownload,Shell shell){
  super(toDownload,false);
  this.shell=shell;
}",0.9866071428571428
125283,"public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType) throws Exception {
  if (!BuildCacheManager.getInstance().isCodesBuild(codeType)) {
    ITalendProcessJavaProject codeProject=getCodesProject(codeType);
    codeProject.buildModules(new NullProgressMonitor(),null,null);
    Map<String,Object> argumentsMap=new HashMap<>();
    argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
    argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
    codeProject.buildModules(new NullProgressMonitor(),null,argumentsMap);
    BuildCacheManager.getInstance().updateCodeLastBuildDate(codeType);
  }
}","public static void buildAndInstallCodesProject(IProgressMonitor monitor,ERepositoryObjectType codeType) throws Exception {
  if (!BuildCacheManager.getInstance().isCodesBuild(codeType)) {
    Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          ITalendProcessJavaProject codeProject=getCodesProject(codeType);
          codeProject.buildModules(new NullProgressMonitor(),null,null);
          Map<String,Object> argumentsMap=new HashMap<>();
          argumentsMap.put(TalendProcessArgumentConstant.ARG_GOAL,TalendMavenConstants.GOAL_INSTALL);
          argumentsMap.put(TalendProcessArgumentConstant.ARG_PROGRAM_ARGUMENTS,""String_Node_Str"");
          codeProject.buildModules(new NullProgressMonitor(),null,argumentsMap);
          BuildCacheManager.getInstance().updateCodeLastBuildDate(codeType);
          return org.eclipse.core.runtime.Status.OK_STATUS;
        }
 catch (        Exception e) {
          return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
        }
      }
    }
;
    job.setUser(false);
    job.setPriority(Job.INTERACTIVE);
    job.schedule();
  }
}",0.7353846153846154
125284,"private static void updateCodeProject(IProgressMonitor monitor,ERepositoryObjectType codeType){
  try {
    ITalendProcessJavaProject codeProject=getCodesProject(codeType);
    updateCodeProjectPom(monitor,codeType,codeProject.getProjectPom());
    Job job=new Job(""String_Node_Str"" + codeType.getLabel()){
      @Override protected IStatus run(      IProgressMonitor monitor){
        try {
          buildAndInstallCodesProject(monitor,codeType);
          return org.eclipse.core.runtime.Status.OK_STATUS;
        }
 catch (        Exception e) {
          return new org.eclipse.core.runtime.Status(IStatus.ERROR,DesignerMavenPlugin.PLUGIN_ID,1,e.getMessage(),e);
        }
      }
    }
;
    job.setUser(false);
    job.setPriority(Job.INTERACTIVE);
    job.schedule();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","private static void updateCodeProject(IProgressMonitor monitor,ERepositoryObjectType codeType){
  try {
    ITalendProcessJavaProject codeProject=getCodesProject(codeType);
    updateCodeProjectPom(monitor,codeType,codeProject.getProjectPom());
    buildAndInstallCodesProject(monitor,codeType);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.6019900497512438
125285,"private static IFile getParentModulePomFile(IFile pomFile){
  IFile parentPom=null;
  if (pomFile == null || pomFile.getParent() == null || pomFile.getParent().getParent() == null) {
    return null;
  }
  if (pomFile.getParent().getName().equals(TalendMavenConstants.PROJECT_NAME)) {
    return null;
  }
  IContainer parentPomFolder=pomFile.getParent();
  int nb=10;
  while (parentPomFolder != null && !parentPomFolder.getName().equals(RepositoryConstants.POMS_DIRECTORY)) {
    parentPomFolder=parentPomFolder.getParent();
    nb--;
    if (nb < 0) {
      return null;
    }
  }
  if (parentPomFolder != null) {
    try {
      for (      IResource file : parentPomFolder.members()) {
        if (file.getName().equals(TalendMavenConstants.POM_FILE_NAME)) {
          parentPom=(IFile)file;
          break;
        }
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  return parentPom;
}","private static IFile getParentModulePomFile(IFile pomFile){
  IFile parentPom=null;
  if (pomFile == null || pomFile.getParent() == null || pomFile.getParent().getParent() == null) {
    return null;
  }
  if (pomFile.getParent().getName().equals(TalendMavenConstants.PROJECT_NAME)) {
    return null;
  }
  IContainer parentPomFolder=pomFile.getParent();
  int nb=10;
  while (parentPomFolder != null && !parentPomFolder.getName().equals(RepositoryConstants.POMS_DIRECTORY)) {
    parentPomFolder=parentPomFolder.getParent();
    nb--;
    if (nb < 0) {
      return null;
    }
  }
  if (parentPomFolder != null) {
    if (!parentPomFolder.exists()) {
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
        IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
        runProcessService.initMavenJavaProject(new NullProgressMonitor(),ProjectManager.getInstance().getCurrentProject());
      }
    }
    try {
      for (      IResource file : parentPomFolder.members()) {
        if (file.getName().equals(TalendMavenConstants.POM_FILE_NAME)) {
          parentPom=(IFile)file;
          break;
        }
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
  return parentPom;
}",0.821098901098901
125286,"private Set<ModuleNeeded> getAllModuleNeededWithTestCase() throws PersistenceException {
  Set<ModuleNeeded> neededLibraries;
  boolean hasTestCase=false;
  List<ProcessItem> testContainers=null;
  ProcessItem item=null;
  if (processor.getProperty() != null && processor.getProperty().getItem() instanceof ProcessItem) {
    item=(ProcessItem)processor.getProperty().getItem();
  }
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (item != null) {
      boolean isTestCase=testContainerService.isTestContainerItem(item);
      if (isTestCase) {
        item=(ProcessItem)testContainerService.getParentJobItem(item);
      }
      testContainers=testContainerService.getAllTestContainers(item);
      if (testContainers != null && !testContainers.isEmpty()) {
        hasTestCase=true;
      }
    }
  }
  if (hasTestCase) {
    neededLibraries=new HashSet<>();
    IProcess jobProcess=getDesignerCoreService().getProcessFromProcessItem(item);
    neededLibraries.addAll(jobProcess.getNeededModules(false));
    for (    ProcessItem testcaseItem : testContainers) {
      IProcess testcaseProcess=getDesignerCoreService().getProcessFromProcessItem(testcaseItem);
      neededLibraries.addAll(testcaseProcess.getNeededModules(false));
    }
  }
 else {
    neededLibraries=processor.getNeededModules();
  }
  return neededLibraries;
}","private Set<ModuleNeeded> getAllModuleNeededWithTestCase() throws PersistenceException {
  Set<ModuleNeeded> neededLibraries;
  boolean hasTestCase=false;
  List<ProcessItem> testContainers=null;
  ProcessItem item=null;
  if (processor.getProperty() != null && processor.getProperty().getItem() instanceof ProcessItem) {
    item=(ProcessItem)processor.getProperty().getItem();
  }
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (item != null) {
      boolean isTestCase=testContainerService.isTestContainerItem(item);
      if (isTestCase) {
        item=(ProcessItem)testContainerService.getParentJobItem(item);
      }
      testContainers=testContainerService.getAllTestContainers(item);
      if (testContainers != null && !testContainers.isEmpty()) {
        hasTestCase=true;
      }
    }
  }
  if (hasTestCase) {
    neededLibraries=new HashSet<>();
    IProcess jobProcess=getDesignerCoreService().getProcessFromProcessItem(item);
    neededLibraries.addAll(jobProcess.getNeededModules(false));
    for (    ProcessItem testcaseItem : testContainers) {
      IProcess testcaseProcess=getDesignerCoreService().getProcessFromProcessItem(testcaseItem);
      neededLibraries.addAll(testcaseProcess.getNeededModules(false));
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerService.class)) {
      ILibraryManagerService repositoryBundleService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
      repositoryBundleService.installModules(neededLibraries,null);
    }
  }
 else {
    neededLibraries=processor.getNeededModules();
  }
  return neededLibraries;
}",0.9075869937250428
125287,"public String getRepositoryURI(boolean isRelease){
  if (StringUtils.isEmpty(this.server)) {
    return null;
  }
  IRepositoryArtifactHandler repositoryHandler=RepositoryArtifactHandlerManager.getRepositoryHandler(this);
  if (repositoryHandler != null) {
    return repositoryHandler.getRepositoryURL(isRelease);
  }
 else {
    String repId=""String_Node_Str"";
    if (isRelease) {
      repId=repositoryId;
    }
 else {
      repId=snapshotRepId;
    }
    String repositoryBaseURI=this.server;
    if (repositoryBaseURI.endsWith(NexusConstants.SLASH)) {
      repositoryBaseURI=repositoryBaseURI.substring(0,repositoryBaseURI.length() - 1);
    }
    repositoryBaseURI+=NexusConstants.CONTENT_REPOSITORIES;
    repositoryBaseURI+=repId + NexusConstants.SLASH;
    return repositoryBaseURI;
  }
}","public String getRepositoryURI(boolean isRelease){
  if (StringUtils.isEmpty(this.server)) {
    return null;
  }
  if (isAbsoluteURL()) {
    return this.server;
  }
  IRepositoryArtifactHandler repositoryHandler=RepositoryArtifactHandlerManager.getRepositoryHandler(this);
  if (repositoryHandler != null) {
    return repositoryHandler.getRepositoryURL(isRelease);
  }
 else {
    String repId=""String_Node_Str"";
    if (isRelease) {
      repId=repositoryId;
    }
 else {
      repId=snapshotRepId;
    }
    String repositoryBaseURI=this.server;
    if (repositoryBaseURI.endsWith(NexusConstants.SLASH)) {
      repositoryBaseURI=repositoryBaseURI.substring(0,repositoryBaseURI.length() - 1);
    }
    repositoryBaseURI+=NexusConstants.CONTENT_REPOSITORIES;
    if (StringUtils.isNotBlank(repId)) {
      repositoryBaseURI+=repId + NexusConstants.SLASH;
    }
 else     if (!repositoryBaseURI.endsWith(NexusConstants.SLASH)) {
      repositoryBaseURI+=NexusConstants.SLASH;
    }
    return repositoryBaseURI;
  }
}",0.8682766190998902
125288,"@Override public void download(URL componentUrl,File destination,IProgressMonitor progressMonitor) throws Exception {
  File resolved=null;
  boolean downloadFromCustomNexus=toInstall.isFromCustomNexus();
  String mvnUri=componentUrl.toExternalForm();
  MavenArtifact mArtifact=MavenUrlHelper.parseMvnUrl(mvnUri,false);
  if (mArtifact != null) {
    String repositoryUrl=mArtifact.getRepositoryUrl();
    if (StringUtils.isNotEmpty(repositoryUrl)) {
      final NexusServerBean customNexusServer=new NexusServerBean(false);
      customNexusServer.setServer(repositoryUrl);
      String username=mArtifact.getUsername();
      String password=mArtifact.getPassword();
      if (StringUtils.isNotEmpty(username)) {
        customNexusServer.setUserName(username);
        customNexusServer.setPassword(password);
      }
      String resolvedMvnUri=MavenUrlHelper.generateMvnUrl(mArtifact.getGroupId(),mArtifact.getArtifactId(),mArtifact.getVersion(),mArtifact.getType(),mArtifact.getClassifier());
      progressMonitor.subTask(""String_Node_Str"" + toInstall.getName() + ""String_Node_Str""+ resolvedMvnUri+ ""String_Node_Str""+ customNexusServer.getServer());
      ILibraryManagerService libManager=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
      String decryptedMvnUri=MavenUrlHelper.generateMvnUrl(mArtifact);
      resolved=libManager.resolveJar(customNexusServer,decryptedMvnUri);
      if (resolved != null && resolved.exists()) {
        return;
      }
    }
  }
  if (downloadFromCustomNexus) {
    TalendLibsServerManager manager=TalendLibsServerManager.getInstance();
    final NexusServerBean customNexusServer=manager.getCustomNexusServer();
    if (customNexusServer != null) {
      progressMonitor.subTask(""String_Node_Str"" + toInstall.getName() + ""String_Node_Str""+ mvnUri+ ""String_Node_Str""+ customNexusServer.getServer());
      ILibraryManagerService libManager=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
      resolved=libManager.resolveJar(customNexusServer,mvnUri);
    }
  }
  if (resolved != null && resolved.exists()) {
    return;
  }
  super.download(componentUrl,destination,progressMonitor);
}","@Override public void download(URL componentUrl,File destination,IProgressMonitor progressMonitor) throws Exception {
  File resolved=null;
  boolean downloadFromCustomNexus=toInstall.isFromCustomNexus();
  String mvnUri=componentUrl.toExternalForm();
  MavenArtifact mArtifact=MavenUrlHelper.parseMvnUrl(mvnUri,false);
  if (mArtifact != null) {
    String repositoryUrl=mArtifact.getRepositoryUrl();
    if (StringUtils.isNotEmpty(repositoryUrl)) {
      final NexusServerBean customNexusServer=new NexusServerBean(false);
      customNexusServer.setServer(repositoryUrl);
      customNexusServer.setAbsoluteURL(true);
      String username=mArtifact.getUsername();
      String password=mArtifact.getPassword();
      if (StringUtils.isNotEmpty(username)) {
        customNexusServer.setUserName(username);
        customNexusServer.setPassword(password);
      }
      String resolvedMvnUri=MavenUrlHelper.generateMvnUrl(mArtifact.getGroupId(),mArtifact.getArtifactId(),mArtifact.getVersion(),mArtifact.getType(),mArtifact.getClassifier());
      progressMonitor.subTask(""String_Node_Str"" + toInstall.getName() + ""String_Node_Str""+ resolvedMvnUri+ ""String_Node_Str""+ customNexusServer.getServer());
      ILibraryManagerService libManager=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
      String decryptedMvnUri=MavenUrlHelper.generateMvnUrl(mArtifact);
      resolved=libManager.resolveJar(customNexusServer,decryptedMvnUri);
      if (resolved != null && resolved.exists()) {
        return;
      }
    }
  }
  if (downloadFromCustomNexus) {
    TalendLibsServerManager manager=TalendLibsServerManager.getInstance();
    final NexusServerBean customNexusServer=manager.getCustomNexusServer();
    if (customNexusServer != null) {
      progressMonitor.subTask(""String_Node_Str"" + toInstall.getName() + ""String_Node_Str""+ mvnUri+ ""String_Node_Str""+ customNexusServer.getServer());
      ILibraryManagerService libManager=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
      resolved=libManager.resolveJar(customNexusServer,mvnUri);
    }
  }
  if (resolved != null && resolved.exists()) {
    return;
  }
  super.download(componentUrl,destination,progressMonitor);
}",0.9898230088495577
125289,"@Override public String getRepositoryURL(boolean isRelease){
  String repositoryId=""String_Node_Str"";
  if (isRelease) {
    repositoryId=serverBean.getRepositoryId();
  }
 else {
    repositoryId=serverBean.getSnapshotRepId();
  }
  String repositoryBaseURI=serverBean.getServer();
  if (repositoryBaseURI.endsWith(NexusConstants.SLASH)) {
    repositoryBaseURI=repositoryBaseURI.substring(0,repositoryBaseURI.length() - 1);
  }
  repositoryBaseURI+=getRepositoryPrefixPath();
  repositoryBaseURI+=repositoryId + NexusConstants.SLASH;
  return repositoryBaseURI;
}","@Override public String getRepositoryURL(boolean isRelease){
  String repositoryId=""String_Node_Str"";
  if (isRelease) {
    repositoryId=serverBean.getRepositoryId();
  }
 else {
    repositoryId=serverBean.getSnapshotRepId();
  }
  String repositoryBaseURI=serverBean.getServer();
  if (repositoryBaseURI.endsWith(NexusConstants.SLASH)) {
    repositoryBaseURI=repositoryBaseURI.substring(0,repositoryBaseURI.length() - 1);
  }
  repositoryBaseURI+=getRepositoryPrefixPath();
  if (StringUtils.isNotBlank(repositoryId)) {
    repositoryBaseURI+=repositoryId + NexusConstants.SLASH;
  }
 else   if (!repositoryBaseURI.endsWith(NexusConstants.SLASH)) {
    repositoryBaseURI+=NexusConstants.SLASH;
  }
  return repositoryBaseURI;
}",0.8333333333333334
125290,"@Override protected HttpResponse execute(IProgressMonitor monitor,DefaultHttpClient httpClient,URI targetURI) throws Exception {
  HttpGet httpGet=new HttpGet(targetURI);
  HttpResponse response=httpClient.execute(httpGet);
  if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
    HttpEntity entity=response.getEntity();
    InputStream inputStream=entity.getContent();
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    try {
      bis=new BufferedInputStream(inputStream);
      bos=new BufferedOutputStream(new FileOutputStream(downloadedFile));
      long contentLength=entity.getContentLength();
      fireDownloadStart(new Long(contentLength).intValue());
      long refreshInterval=1000;
      if (contentLength < BUFFER_SIZE * 10) {
        refreshInterval=contentLength / 200;
      }
      int bytesDownloaded=0;
      byte[] buf=new byte[BUFFER_SIZE];
      int bytesRead=-1;
      long startTime=new Date().getTime();
      int byteReadInloop=0;
      while ((bytesRead=bis.read(buf)) != -1) {
        bos.write(buf,0,bytesRead);
        long currentTime=new Date().getTime();
        byteReadInloop=byteReadInloop + bytesRead;
        if (currentTime - startTime > refreshInterval) {
          startTime=currentTime;
          fireDownloadProgress(byteReadInloop);
          byteReadInloop=0;
        }
        bytesDownloaded+=bytesRead;
        if (isCancel()) {
          return response;
        }
      }
      bos.flush();
      if (bytesDownloaded == contentLength) {
        MavenArtifactsHandler deployer=new MavenArtifactsHandler();
        deployer.install(downloadedFile.getAbsolutePath(),mavenUri,nexusServer.isOfficial());
        if (PluginChecker.isSVNProviderPluginLoaded()) {
          File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
          ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
          if (service != null && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())) {
            File target=new File(libFile.getAbsolutePath(),downloadedFile.getName());
            FilesUtils.copyFile(downloadedFile,target);
            boolean localConnectionProvider=true;
            IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            if (proxyRepositoryFactory != null) {
              try {
                localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
              }
 catch (              PersistenceException e) {
              }
            }
            if (!localConnectionProvider && !getRepositoryContext().isOffline()) {
              List jars=new ArrayList();
              jars.add(target.getAbsolutePath());
              service.deployNewJar(jars);
            }
          }
        }
      }
      fireDownloadComplete();
    }
  finally {
      if (bis != null) {
        bis.close();
      }
      if (bos != null) {
        bos.close();
      }
      if (tempFolder != null) {
        FilesUtils.deleteFile(tempFolder,true);
      }
    }
  }
  return response;
}","@Override protected HttpResponse execute(IProgressMonitor monitor,DefaultHttpClient httpClient,URI targetURI) throws Exception {
  HttpGet httpGet=new HttpGet(targetURI);
  HttpResponse response=httpClient.execute(httpGet);
  if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
    HttpEntity entity=response.getEntity();
    InputStream inputStream=entity.getContent();
    BufferedInputStream bis=null;
    BufferedOutputStream bos=null;
    try {
      bis=new BufferedInputStream(inputStream);
      bos=new BufferedOutputStream(new FileOutputStream(downloadedFile));
      long contentLength=entity.getContentLength();
      fireDownloadStart(new Long(contentLength).intValue());
      long refreshInterval=1000;
      if (contentLength < BUFFER_SIZE * 10) {
        refreshInterval=contentLength / 200;
      }
      int bytesDownloaded=0;
      byte[] buf=new byte[BUFFER_SIZE];
      int bytesRead=-1;
      long startTime=new Date().getTime();
      int byteReadInloop=0;
      while ((bytesRead=bis.read(buf)) != -1) {
        bos.write(buf,0,bytesRead);
        long currentTime=new Date().getTime();
        byteReadInloop=byteReadInloop + bytesRead;
        if (currentTime - startTime > refreshInterval) {
          startTime=currentTime;
          fireDownloadProgress(byteReadInloop);
          byteReadInloop=0;
        }
        bytesDownloaded+=bytesRead;
        if (isCancel()) {
          return response;
        }
      }
      bos.flush();
      if (bytesDownloaded == contentLength) {
        MavenArtifactsHandler deployer=new MavenArtifactsHandler();
        deployer.install(downloadedFile.getAbsolutePath(),mavenUri,nServer.isOfficial());
        if (PluginChecker.isSVNProviderPluginLoaded()) {
          File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
          ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
          if (service != null && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())) {
            File target=new File(libFile.getAbsolutePath(),downloadedFile.getName());
            FilesUtils.copyFile(downloadedFile,target);
            boolean localConnectionProvider=true;
            IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            if (proxyRepositoryFactory != null) {
              try {
                localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
              }
 catch (              PersistenceException e) {
              }
            }
            if (!localConnectionProvider && !getRepositoryContext().isOffline()) {
              List jars=new ArrayList();
              jars.add(target.getAbsolutePath());
              service.deployNewJar(jars);
            }
          }
        }
      }
      fireDownloadComplete();
    }
  finally {
      if (bis != null) {
        bis.close();
      }
      if (bos != null) {
        bos.close();
      }
      if (tempFolder != null) {
        FilesUtils.deleteFile(tempFolder,true);
      }
    }
  }
  return response;
}",0.999379267535692
125291,"@Override public void download(URL url,File desc) throws Exception {
  String mavenUri=url.toExternalForm();
  MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mavenUri);
  if (parseMvnUrl != null) {
    String tempPath=getTmpFolderPath();
    File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    createTempFile.delete();
    File tempFolder=new File(tempPath + File.separator + createTempFile.getName());
    if (tempFolder.exists()) {
      tempFolder.delete();
    }
    tempFolder.mkdirs();
    String name=parseMvnUrl.getArtifactId();
    String type=parseMvnUrl.getType();
    if (type == null || ""String_Node_Str"".equals(type)) {
      type=MavenConstants.PACKAGING_JAR;
    }
    name=name + ""String_Node_Str"" + type;
    File downloadedFile=new File(tempFolder,name);
    NullProgressMonitor monitor=new NullProgressMonitor();
    new HttpClientTransport(nexusServer.getRepositoryURI(),nexusServer.getUserName(),nexusServer.getPassword()){
      @Override protected HttpResponse execute(      IProgressMonitor monitor,      DefaultHttpClient httpClient,      URI targetURI) throws Exception {
        HttpGet httpGet=new HttpGet(targetURI);
        HttpResponse response=httpClient.execute(httpGet);
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
          HttpEntity entity=response.getEntity();
          InputStream inputStream=entity.getContent();
          BufferedInputStream bis=null;
          BufferedOutputStream bos=null;
          try {
            bis=new BufferedInputStream(inputStream);
            bos=new BufferedOutputStream(new FileOutputStream(downloadedFile));
            long contentLength=entity.getContentLength();
            fireDownloadStart(new Long(contentLength).intValue());
            long refreshInterval=1000;
            if (contentLength < BUFFER_SIZE * 10) {
              refreshInterval=contentLength / 200;
            }
            int bytesDownloaded=0;
            byte[] buf=new byte[BUFFER_SIZE];
            int bytesRead=-1;
            long startTime=new Date().getTime();
            int byteReadInloop=0;
            while ((bytesRead=bis.read(buf)) != -1) {
              bos.write(buf,0,bytesRead);
              long currentTime=new Date().getTime();
              byteReadInloop=byteReadInloop + bytesRead;
              if (currentTime - startTime > refreshInterval) {
                startTime=currentTime;
                fireDownloadProgress(byteReadInloop);
                byteReadInloop=0;
              }
              bytesDownloaded+=bytesRead;
              if (isCancel()) {
                return response;
              }
            }
            bos.flush();
            if (bytesDownloaded == contentLength) {
              MavenArtifactsHandler deployer=new MavenArtifactsHandler();
              deployer.install(downloadedFile.getAbsolutePath(),mavenUri,nexusServer.isOfficial());
              if (PluginChecker.isSVNProviderPluginLoaded()) {
                File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
                ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
                if (service != null && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())) {
                  File target=new File(libFile.getAbsolutePath(),downloadedFile.getName());
                  FilesUtils.copyFile(downloadedFile,target);
                  boolean localConnectionProvider=true;
                  IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                  if (proxyRepositoryFactory != null) {
                    try {
                      localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
                    }
 catch (                    PersistenceException e) {
                    }
                  }
                  if (!localConnectionProvider && !getRepositoryContext().isOffline()) {
                    List jars=new ArrayList();
                    jars.add(target.getAbsolutePath());
                    service.deployNewJar(jars);
                  }
                }
              }
            }
            fireDownloadComplete();
          }
  finally {
            if (bis != null) {
              bis.close();
            }
            if (bos != null) {
              bos.close();
            }
            if (tempFolder != null) {
              FilesUtils.deleteFile(tempFolder,true);
            }
          }
        }
        return response;
      }
    }
.doRequest(monitor,parseMvnUrl);
  }
}","@Override public void download(URL url,File desc) throws Exception {
  String mavenUri=url.toExternalForm();
  MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mavenUri);
  if (parseMvnUrl != null) {
    String tempPath=getTmpFolderPath();
    File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    createTempFile.delete();
    File tempFolder=new File(tempPath + File.separator + createTempFile.getName());
    if (tempFolder.exists()) {
      tempFolder.delete();
    }
    tempFolder.mkdirs();
    String name=parseMvnUrl.getArtifactId();
    String type=parseMvnUrl.getType();
    if (type == null || ""String_Node_Str"".equals(type)) {
      type=MavenConstants.PACKAGING_JAR;
    }
    name=name + ""String_Node_Str"" + type;
    File downloadedFile=new File(tempFolder,name);
    NullProgressMonitor monitor=new NullProgressMonitor();
    NexusServerBean nServer=getNexusServer();
    new HttpClientTransport(nServer.getRepositoryURI(),nServer.getUserName(),nServer.getPassword()){
      @Override protected HttpResponse execute(      IProgressMonitor monitor,      DefaultHttpClient httpClient,      URI targetURI) throws Exception {
        HttpGet httpGet=new HttpGet(targetURI);
        HttpResponse response=httpClient.execute(httpGet);
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
          HttpEntity entity=response.getEntity();
          InputStream inputStream=entity.getContent();
          BufferedInputStream bis=null;
          BufferedOutputStream bos=null;
          try {
            bis=new BufferedInputStream(inputStream);
            bos=new BufferedOutputStream(new FileOutputStream(downloadedFile));
            long contentLength=entity.getContentLength();
            fireDownloadStart(new Long(contentLength).intValue());
            long refreshInterval=1000;
            if (contentLength < BUFFER_SIZE * 10) {
              refreshInterval=contentLength / 200;
            }
            int bytesDownloaded=0;
            byte[] buf=new byte[BUFFER_SIZE];
            int bytesRead=-1;
            long startTime=new Date().getTime();
            int byteReadInloop=0;
            while ((bytesRead=bis.read(buf)) != -1) {
              bos.write(buf,0,bytesRead);
              long currentTime=new Date().getTime();
              byteReadInloop=byteReadInloop + bytesRead;
              if (currentTime - startTime > refreshInterval) {
                startTime=currentTime;
                fireDownloadProgress(byteReadInloop);
                byteReadInloop=0;
              }
              bytesDownloaded+=bytesRead;
              if (isCancel()) {
                return response;
              }
            }
            bos.flush();
            if (bytesDownloaded == contentLength) {
              MavenArtifactsHandler deployer=new MavenArtifactsHandler();
              deployer.install(downloadedFile.getAbsolutePath(),mavenUri,nServer.isOfficial());
              if (PluginChecker.isSVNProviderPluginLoaded()) {
                File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
                ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
                if (service != null && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())) {
                  File target=new File(libFile.getAbsolutePath(),downloadedFile.getName());
                  FilesUtils.copyFile(downloadedFile,target);
                  boolean localConnectionProvider=true;
                  IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                  if (proxyRepositoryFactory != null) {
                    try {
                      localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
                    }
 catch (                    PersistenceException e) {
                    }
                  }
                  if (!localConnectionProvider && !getRepositoryContext().isOffline()) {
                    List jars=new ArrayList();
                    jars.add(target.getAbsolutePath());
                    service.deployNewJar(jars);
                  }
                }
              }
            }
            fireDownloadComplete();
          }
  finally {
            if (bis != null) {
              bis.close();
            }
            if (bos != null) {
              bos.close();
            }
            if (tempFolder != null) {
              FilesUtils.deleteFile(tempFolder,true);
            }
          }
        }
        return response;
      }
    }
.doRequest(monitor,parseMvnUrl);
  }
}",0.993476430976431
125292,"/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  StringBuilder result=new StringBuilder();
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=getFakeRightQuotes(original,leftQuotes);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=getFakeRightQuotes(original,fakeRightQuotes);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result.append(original.substring(leftPrev,leftQuotes));
    }
    if (leftQuotes < rightQuotes) {
      int current=leftQuotes;
      while (rightQuotes + 1 - current > 120) {
        int Offset=120;
        while (original.charAt(current + Offset - 1) == '\\') {
          Offset--;
        }
        result.append(original.substring(current,current + Offset).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
        current+=Offset;
        Offset=120;
      }
      result.append(original.substring(current,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=getFakeRightQuotes(original,leftQuotes);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=getFakeRightQuotes(original,fakeRightQuotes);
    }
  }
  result.append(original.substring(leftPrev));
  return result.toString();
}","/** 
 * DOC liuwu Comment method ""replaceMEMO_SQL"". aim: to resolve TDI-7487
 * @param original
 * @return
 */
public static String replaceCRLFInMEMO_SQL(String original){
  if (original == null || original.trim().length() == 0) {
    return original;
  }
  StringBuilder result=new StringBuilder();
  int leftQuotes=original.indexOf(""String_Node_Str"");
  int rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
  int fakeRightQuotes=getFakeRightQuotes(original,leftQuotes);
  while (rightQuotes == fakeRightQuotes + 1) {
    rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    fakeRightQuotes=getFakeRightQuotes(original,fakeRightQuotes);
  }
  int leftPrev=0;
  while (leftQuotes >= 0 && rightQuotes > leftQuotes) {
    if (leftQuotes > leftPrev) {
      result.append(original.substring(leftPrev,leftQuotes));
    }
    if (leftQuotes < rightQuotes) {
      int current=leftQuotes;
      int Offset=120;
      int count=0;
      while (rightQuotes + 1 - current > 120) {
        while (original.charAt(current + Offset - 1) == '\\') {
          Offset--;
        }
        if (count > 500) {
          result.append(original.substring(current,current + Offset).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
          count=0;
        }
 else {
          result.append(original.substring(current,current + Offset).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"");
        }
        current+=Offset;
        Offset=120;
        count++;
      }
      result.append(original.substring(current,rightQuotes + 1).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
    leftQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
    leftPrev=rightQuotes + 1;
    rightQuotes=original.indexOf(""String_Node_Str"",leftQuotes + 1);
    fakeRightQuotes=getFakeRightQuotes(original,leftQuotes);
    while (rightQuotes == fakeRightQuotes + 1) {
      rightQuotes=original.indexOf(""String_Node_Str"",rightQuotes + 1);
      fakeRightQuotes=getFakeRightQuotes(original,fakeRightQuotes);
    }
  }
  result.append(original.substring(leftPrev));
  return result.toString();
}",0.902559286217422
125293,"public void clearCurrentCache(){
  currentCache.clear();
  currentmodules.clear();
  subjobProjects.clear();
  aggregatorPomsHelper=new AggregatorPomsHelper();
}","public void clearCurrentCache(){
  currentCache.clear();
  currentmodules.clear();
  subjobProjects.clear();
  subjobMavenProjects.clear();
  aggregatorPomsHelper=new AggregatorPomsHelper();
}",0.9121813031161472
125294,"public void removeCache(Property property){
  currentCache.remove(getKey(property));
  currentmodules.remove(getModulePath(property));
  subjobProjects.remove(getTalendJobJavaProject(property));
}","public void removeCache(Property property){
  currentCache.remove(getKey(property));
  currentmodules.remove(getModulePath(property));
  ITalendProcessJavaProject subjobProject=getTalendJobJavaProject(property);
  subjobProjects.remove(subjobProject);
  if (MavenProjectUtils.hasMavenNature(subjobProject.getProject())) {
    subjobMavenProjects.remove(subjobProject);
  }
}",0.6
125295,"public void putCache(Property property){
  currentCache.put(getKey(property),generateCacheInfo(property));
  currentmodules.add(getModulePath(property));
  subjobProjects.add(getTalendJobJavaProject(property));
}","public void putCache(Property property){
  currentCache.put(getKey(property),generateCacheInfo(property));
  currentmodules.add(getModulePath(property));
  ITalendProcessJavaProject subjobProject=getTalendJobJavaProject(property);
  subjobProjects.add(subjobProject);
  if (MavenProjectUtils.hasMavenNature(subjobProject.getProject())) {
    subjobMavenProjects.add(subjobProject);
  }
}",0.5509181969949917
125296,"public InputStream readProjectSettingStream(String projectSettingTemplateKey,Map<String,Object> parameters) throws Exception {
  ProjectPreferenceManager projectPreferenceManager=getProjectPreferenceManager(parameters);
  if (projectPreferenceManager == null || projectSettingTemplateKey == null) {
    throw new NullPointerException();
  }
  if (projectSettingTemplateKey.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String value=projectPreferenceManager.getValue(projectSettingTemplateKey);
  if (value == null || value.length() == 0) {
    throw new Exception(""String_Node_Str"" + projectSettingTemplateKey + ""String_Node_Str""+ projectPreferenceManager.getQualifier());
  }
  return new ByteArrayInputStream(value.getBytes(TalendMavenConstants.DEFAULT_ENCODING));
}","public InputStream readProjectSettingStream(String projectSettingTemplateKey,Map<String,Object> parameters) throws Exception {
  ProjectPreferenceManager projectPreferenceManager=getProjectPreferenceManager(parameters);
  if (projectPreferenceManager == null || projectSettingTemplateKey == null) {
    throw new NullPointerException();
  }
  if (projectSettingTemplateKey.length() == 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String value=projectPreferenceManager.getValue(projectSettingTemplateKey);
  if (value == null || value.length() == 0) {
    if (parameters.containsKey(MavenTemplateManager.KEY_PROJECT_NAME)) {
      projectPreferenceManager=getProjectPreferenceManager();
      if (projectPreferenceManager == null || projectSettingTemplateKey == null) {
        throw new NullPointerException();
      }
      if (projectSettingTemplateKey.length() == 0) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      value=projectPreferenceManager.getValue(projectSettingTemplateKey);
    }
    if (value == null || value.length() == 0) {
      throw new Exception(""String_Node_Str"" + projectSettingTemplateKey + ""String_Node_Str""+ projectPreferenceManager.getQualifier());
    }
  }
  return new ByteArrayInputStream(value.getBytes(TalendMavenConstants.DEFAULT_ENCODING));
}",0.7471910112359551
125297,"public ModuleNeeded(String context,String moduleName,String informationMsg,boolean required,List<String> installURL,String requiredIf,String mavenUrl){
  super();
  this.context=context;
  setModuleName(moduleName);
  this.informationMsg=informationMsg;
  this.required=required;
  this.installURL=installURL;
  this.requiredIf=requiredIf;
  setMavenUri(mavenUrl);
}","public ModuleNeeded(String context,String moduleName,String informationMsg,boolean required,List<String> installURL,String requiredIf,String mavenUrl){
  super();
  this.context=context;
  this.informationMsg=informationMsg;
  this.required=required;
  this.installURL=installURL;
  this.requiredIf=requiredIf;
  String name=moduleName;
  String uri=mavenUrl;
  if (moduleName != null) {
    MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(moduleName);
    if (artifact != null) {
      name=artifact.getFileName();
      if (mavenUrl == null) {
        uri=moduleName;
      }
    }
  }
  if (mavenUrl != null && moduleName == null) {
    MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(mavenUrl);
    if (artifact != null) {
      name=artifact.getFileName();
    }
  }
  setModuleName(name);
  setMavenUri(uri);
}",0.5295109612141653
125298,"public void setModuleName(String moduleName){
  if (moduleName != null) {
    this.moduleName=MavenUrlHelper.generateModuleNameByMavenURI(moduleName);
    if (this.moduleName != null) {
      this.mavenUri=moduleName;
    }
 else {
      String mn=moduleName.replace(QUOTATION_MARK,""String_Node_Str"").replace(SINGLE_QUOTE,""String_Node_Str"");
      if (mn.indexOf(""String_Node_Str"") != -1 || mn.indexOf(""String_Node_Str"") != -1) {
        mn=new Path(mn).lastSegment();
      }
      this.moduleName=mn;
    }
  }
 else {
    this.moduleName=moduleName;
  }
}","public void setModuleName(String moduleName){
  if (moduleName != null) {
    String mn=moduleName.replace(QUOTATION_MARK,""String_Node_Str"").replace(SINGLE_QUOTE,""String_Node_Str"");
    if (mn.indexOf(""String_Node_Str"") != -1 || mn.indexOf(""String_Node_Str"") != -1) {
      mn=new Path(mn).lastSegment();
    }
    this.moduleName=mn;
  }
 else {
    this.moduleName=moduleName;
  }
}",0.7303609341825902
125299,"@Test public void testSetModuleName(){
  String moduleValue=""String_Node_Str"";
  ModuleNeeded moduleNeeded=new ModuleNeeded(null,moduleValue,null,true);
  moduleNeeded.setModuleName(moduleValue);
  Assert.assertEquals(moduleValue,moduleNeeded.getModuleName());
  moduleValue=""String_Node_Str"";
  moduleNeeded.setModuleName(moduleValue);
  Assert.assertEquals(""String_Node_Str"",moduleNeeded.getModuleName());
  moduleValue=""String_Node_Str"";
  moduleNeeded.setModuleName(moduleValue);
  Assert.assertEquals(""String_Node_Str"",moduleNeeded.getModuleName());
  moduleValue=""String_Node_Str"";
  moduleNeeded.setModuleName(moduleValue);
  Assert.assertEquals(""String_Node_Str"",moduleNeeded.getModuleName());
  moduleValue=""String_Node_Str"";
  moduleNeeded.setModuleName(moduleValue);
  Assert.assertEquals(""String_Node_Str"",moduleNeeded.getModuleName());
}","@Test public void testSetModuleName(){
  String moduleValue=""String_Node_Str"";
  ModuleNeeded moduleNeeded=new ModuleNeeded(null,moduleValue,null,true);
  moduleNeeded.setModuleName(moduleValue);
  Assert.assertEquals(moduleValue,moduleNeeded.getModuleName());
  moduleValue=""String_Node_Str"";
  moduleNeeded.setModuleName(moduleValue);
  Assert.assertEquals(""String_Node_Str"",moduleNeeded.getModuleName());
}",0.6497220015885623
125300,"private static int search(HttpURLConnection urlConnection,Document document,List<MavenArtifact> artifacts) throws Exception {
  List<Node> list=document.selectNodes(""String_Node_Str"");
  for (  Node arNode : list) {
    MavenArtifact artifact=new MavenArtifact();
    artifacts.add(artifact);
    artifact.setGroupId(arNode.selectSingleNode(""String_Node_Str"").getText());
    artifact.setArtifactId(arNode.selectSingleNode(""String_Node_Str"").getText());
    artifact.setVersion(arNode.selectSingleNode(""String_Node_Str"").getText());
    Node descNode=arNode.selectSingleNode(""String_Node_Str"");
    if (descNode != null) {
      artifact.setDescription(descNode.getText());
    }
    Node urlNode=arNode.selectSingleNode(""String_Node_Str"");
    if (urlNode != null) {
      artifact.setUrl(urlNode.getText());
    }
    Node licenseNode=arNode.selectSingleNode(""String_Node_Str"");
    if (licenseNode != null) {
      artifact.setLicense(licenseNode.getText());
    }
    Node licenseUrlNode=arNode.selectSingleNode(""String_Node_Str"");
    if (licenseUrlNode != null) {
      artifact.setLicenseUrl(licenseUrlNode.getText());
    }
    List<Node> artLinks=arNode.selectNodes(""String_Node_Str"");
    for (    Node link : artLinks) {
      Node extensionElement=link.selectSingleNode(""String_Node_Str"");
      String extension=null;
      String classifier=null;
      if (extensionElement != null) {
        if (""String_Node_Str"".equals(extensionElement.getText())) {
          continue;
        }
        extension=extensionElement.getText();
      }
      Node classifierElement=link.selectSingleNode(""String_Node_Str"");
      if (classifierElement != null) {
        classifier=classifierElement.getText();
      }
      artifact.setType(extension);
      artifact.setClassifier(classifier);
    }
  }
  return list.size();
}","private static void search(String nexusUrl,final String userName,final String password,String repositoryId,String groupIdToSearch,String artifactId,String versionToSearch,int searchCount,List<MavenArtifact> artifacts) throws Exception {
  int totalCount=0;
  String service=NexusConstants.SERVICES_SEARCH + getSearchQuery(repositoryId,groupIdToSearch,artifactId,versionToSearch,0,searchCount);
  URI requestURI=getSearchURI(nexusUrl,service);
  Document document=downloadDocument(requestURI,userName,password);
  if (document != null) {
    Node countNode=document.selectSingleNode(""String_Node_Str"");
    if (countNode != null) {
      try {
        totalCount=Integer.parseInt(countNode.getText());
      }
 catch (      NumberFormatException e) {
        totalCount=0;
      }
    }
    int searchDone=readDocument(document,artifacts);
    while (searchDone < totalCount) {
      service=NexusConstants.SERVICES_SEARCH + getSearchQuery(repositoryId,groupIdToSearch,artifactId,versionToSearch,searchDone,searchCount);
      requestURI=getSearchURI(nexusUrl,service);
      document=downloadDocument(requestURI,userName,password);
      searchDone=searchDone + readDocument(document,artifacts);
    }
  }
}",0.038892551087673
125301,"public static String resolveSha1(String nexusUrl,final String userName,final String password,String repositoryId,String groupId,String artifactId,String version,String type) throws Exception {
  HttpURLConnection urlConnection=null;
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (StringUtils.isNotEmpty(userName)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(userName,password.toCharArray());
      }
    }
);
  }
  try {
    String service=NexusConstants.SERVICES_RESOLVE + ""String_Node_Str"" + artifactId+ ""String_Node_Str""+ groupId+ ""String_Node_Str""+ repositoryId+ ""String_Node_Str""+ version+ ""String_Node_Str""+ type;
    urlConnection=getHttpURLConnection(nexusUrl,service,userName,password);
    SAXReader saxReader=new SAXReader();
    InputStream inputStream=urlConnection.getInputStream();
    Document document=saxReader.read(inputStream);
    Node sha1Node=document.selectSingleNode(""String_Node_Str"");
    String sha1=null;
    if (sha1Node != null) {
      sha1=sha1Node.getText();
    }
    return sha1;
  }
 catch (  FileNotFoundException e) {
    return null;
  }
 finally {
    Authenticator.setDefault(defaultAuthenticator);
    if (null != urlConnection) {
      urlConnection.disconnect();
    }
  }
}","public static String resolveSha1(String nexusUrl,final String userName,final String password,String repositoryId,String groupId,String artifactId,String version,String type) throws Exception {
  final String[] toReturn={null};
  String service=NexusConstants.SERVICES_RESOLVE + ""String_Node_Str"" + artifactId+ ""String_Node_Str""+ groupId+ ""String_Node_Str""+ repositoryId+ ""String_Node_Str""+ version+ ""String_Node_Str""+ type;
  final URI requestURI=getSearchURI(nexusUrl,service);
  NullProgressMonitor monitor=new NullProgressMonitor();
  new HttpClientTransport(nexusUrl,userName,password){
    @Override protected HttpResponse execute(    IProgressMonitor monitor,    DefaultHttpClient httpClient,    URI targetURI) throws Exception {
      HttpGet httpGet=new HttpGet(requestURI);
      httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,getTimeout());
      HttpResponse response=httpClient.execute(httpGet);
      if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
        HttpEntity entity=response.getEntity();
        InputStream inputStream=entity.getContent();
        SAXReader saxReader=new SAXReader();
        Document document=saxReader.read(inputStream);
        if (document != null) {
          Node sha1Node=document.selectSingleNode(""String_Node_Str"");
          String sha1=null;
          if (sha1Node != null) {
            sha1=sha1Node.getText();
            toReturn[0]=sha1;
          }
        }
      }
      return response;
    }
  }
.doRequest(monitor,requestURI);
  return toReturn[0];
}",0.3336724313326551
125302,"public static boolean checkConnectionStatus(String nexusURL,final String username,final String password){
  if (StringUtils.isEmpty(nexusURL)) {
    return false;
  }
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (StringUtils.isNotEmpty(username)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(username,password.toCharArray());
      }
    }
);
  }
  int status=-1;
  try {
    URL url=new URL(nexusURL);
    HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
    if (urlConnection instanceof HttpsURLConnection) {
      String userDir=Platform.getInstallLocation().getURL().getPath();
      final SSLSocketFactory socketFactory=SSLUtils.getSSLContext(userDir).getSocketFactory();
      HttpsURLConnection httpsConnection=(HttpsURLConnection)urlConnection;
      httpsConnection.setSSLSocketFactory(socketFactory);
      httpsConnection.setHostnameVerifier(new HostnameVerifier(){
        @Override public boolean verify(        String arg0,        SSLSession arg1){
          return true;
        }
      }
);
    }
    int timeout=getTimeout();
    urlConnection.setConnectTimeout(timeout);
    urlConnection.setReadTimeout(timeout);
    status=urlConnection.getResponseCode();
    if (status == CONNECTION_OK) {
      return true;
    }
  }
 catch (  Exception e) {
    if (CommonsPlugin.isDebugMode()) {
      ExceptionHandler.process(e);
    }
  }
 finally {
    Authenticator.setDefault(defaultAuthenticator);
  }
  return false;
}","public static boolean checkConnectionStatus(String nexusURL,String username,String password){
  if (StringUtils.isEmpty(nexusURL)) {
    return false;
  }
  final boolean status[]={false};
  try {
    NullProgressMonitor monitor=new NullProgressMonitor();
    new HttpClientTransport(nexusURL,username,password){
      @Override protected HttpResponse execute(      IProgressMonitor monitor,      DefaultHttpClient httpClient,      URI targetURI) throws Exception {
        httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,getTimeout());
        HttpHead httpHead=new HttpHead(targetURI);
        HttpResponse response=httpClient.execute(httpHead);
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
          status[0]=true;
        }
        return response;
      }
    }
.doRequest(monitor,new URI(nexusURL));
  }
 catch (  Exception e) {
    status[0]=false;
  }
  return status[0];
}",0.2158161277756135
125303,"@Override public void download(URL url,File desc) throws Exception {
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  File tempFolder=null;
  try {
    TalendLibsServerManager manager=TalendLibsServerManager.getInstance();
    final NexusServerBean talendlibServer=manager.getTalentArtifactServer();
    String mavenUri=url.toExternalForm();
    MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mavenUri);
    if (parseMvnUrl != null) {
      String reletivePath=PomUtil.getArtifactPath(parseMvnUrl);
      String tempPath=getTmpFolderPath();
      File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
      createTempFile.delete();
      tempFolder=new File(tempPath + File.separator + createTempFile.getName());
      if (tempFolder.exists()) {
        tempFolder.delete();
      }
      tempFolder.mkdirs();
      String name=parseMvnUrl.getArtifactId();
      String type=parseMvnUrl.getType();
      if (type == null || ""String_Node_Str"".equals(type)) {
        type=MavenConstants.PACKAGING_JAR;
      }
      name=name + ""String_Node_Str"" + type;
      File downloadedFile=new File(tempFolder,name);
      HttpURLConnection connection=getHttpURLConnection(talendlibServer.getServer(),talendlibServer.getRepositoryId(),reletivePath,talendlibServer.getUserName(),talendlibServer.getPassword());
      InputStream inputStream=connection.getInputStream();
      bis=new BufferedInputStream(inputStream);
      bos=new BufferedOutputStream(new FileOutputStream(downloadedFile));
      int contentLength=connection.getContentLength();
      fireDownloadStart(contentLength);
      int refreshInterval=1000;
      if (contentLength < BUFFER_SIZE * 10) {
        refreshInterval=contentLength / 200;
      }
      int bytesDownloaded=0;
      byte[] buf=new byte[BUFFER_SIZE];
      int bytesRead=-1;
      long startTime=new Date().getTime();
      int byteReadInloop=0;
      while ((bytesRead=bis.read(buf)) != -1) {
        bos.write(buf,0,bytesRead);
        long currentTime=new Date().getTime();
        byteReadInloop=byteReadInloop + bytesRead;
        if (currentTime - startTime > refreshInterval) {
          startTime=currentTime;
          fireDownloadProgress(byteReadInloop);
          byteReadInloop=0;
        }
        bytesDownloaded+=bytesRead;
        if (isCancel()) {
          return;
        }
      }
      bos.flush();
      if (bytesDownloaded == contentLength) {
        MavenArtifactsHandler deployer=new MavenArtifactsHandler();
        deployer.install(downloadedFile.getAbsolutePath(),mavenUri);
        if (PluginChecker.isSVNProviderPluginLoaded()) {
          File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
          ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
          if (service != null && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())) {
            File target=new File(libFile.getAbsolutePath(),downloadedFile.getName());
            FilesUtils.copyFile(downloadedFile,target);
            boolean localConnectionProvider=true;
            IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            if (proxyRepositoryFactory != null) {
              try {
                localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
              }
 catch (              PersistenceException e) {
              }
            }
            if (!localConnectionProvider && !getRepositoryContext().isOffline()) {
              List jars=new ArrayList();
              jars.add(target.getAbsolutePath());
              service.deployNewJar(jars);
            }
          }
        }
      }
    }
    fireDownloadComplete();
  }
  finally {
    if (bis != null) {
      bis.close();
    }
    if (bos != null) {
      bos.close();
    }
    if (tempFolder != null) {
      FilesUtils.deleteFile(tempFolder,true);
    }
  }
}","@Override public void download(URL url,File desc) throws Exception {
  TalendLibsServerManager manager=TalendLibsServerManager.getInstance();
  final NexusServerBean talendlibServer=manager.getTalentArtifactServer();
  String mavenUri=url.toExternalForm();
  MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mavenUri);
  if (parseMvnUrl != null) {
    String tempPath=getTmpFolderPath();
    File createTempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
    createTempFile.delete();
    File tempFolder=new File(tempPath + File.separator + createTempFile.getName());
    if (tempFolder.exists()) {
      tempFolder.delete();
    }
    tempFolder.mkdirs();
    String name=parseMvnUrl.getArtifactId();
    String type=parseMvnUrl.getType();
    if (type == null || ""String_Node_Str"".equals(type)) {
      type=MavenConstants.PACKAGING_JAR;
    }
    name=name + ""String_Node_Str"" + type;
    File downloadedFile=new File(tempFolder,name);
    NullProgressMonitor monitor=new NullProgressMonitor();
    new HttpClientTransport(talendlibServer.getRepositoryURI(),talendlibServer.getUserName(),talendlibServer.getPassword()){
      @Override protected HttpResponse execute(      IProgressMonitor monitor,      DefaultHttpClient httpClient,      URI targetURI) throws Exception {
        HttpGet httpGet=new HttpGet(targetURI);
        HttpResponse response=httpClient.execute(httpGet);
        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
          HttpEntity entity=response.getEntity();
          InputStream inputStream=entity.getContent();
          BufferedInputStream bis=null;
          BufferedOutputStream bos=null;
          try {
            bis=new BufferedInputStream(inputStream);
            bos=new BufferedOutputStream(new FileOutputStream(downloadedFile));
            long contentLength=entity.getContentLength();
            fireDownloadStart(new Long(contentLength).intValue());
            long refreshInterval=1000;
            if (contentLength < BUFFER_SIZE * 10) {
              refreshInterval=contentLength / 200;
            }
            int bytesDownloaded=0;
            byte[] buf=new byte[BUFFER_SIZE];
            int bytesRead=-1;
            long startTime=new Date().getTime();
            int byteReadInloop=0;
            while ((bytesRead=bis.read(buf)) != -1) {
              bos.write(buf,0,bytesRead);
              long currentTime=new Date().getTime();
              byteReadInloop=byteReadInloop + bytesRead;
              if (currentTime - startTime > refreshInterval) {
                startTime=currentTime;
                fireDownloadProgress(byteReadInloop);
                byteReadInloop=0;
              }
              bytesDownloaded+=bytesRead;
              if (isCancel()) {
                return response;
              }
            }
            bos.flush();
            if (bytesDownloaded == contentLength) {
              MavenArtifactsHandler deployer=new MavenArtifactsHandler();
              deployer.install(downloadedFile.getAbsolutePath(),mavenUri);
              if (PluginChecker.isSVNProviderPluginLoaded()) {
                File libFile=new File(LibrariesManagerUtils.getLibrariesPath(ECodeLanguage.JAVA));
                ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
                if (service != null && service.isSvnLibSetupOnTAC() && service.isInSvn(libFile.getAbsolutePath())) {
                  File target=new File(libFile.getAbsolutePath(),downloadedFile.getName());
                  FilesUtils.copyFile(downloadedFile,target);
                  boolean localConnectionProvider=true;
                  IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                  if (proxyRepositoryFactory != null) {
                    try {
                      localConnectionProvider=proxyRepositoryFactory.isLocalConnectionProvider();
                    }
 catch (                    PersistenceException e) {
                    }
                  }
                  if (!localConnectionProvider && !getRepositoryContext().isOffline()) {
                    List jars=new ArrayList();
                    jars.add(target.getAbsolutePath());
                    service.deployNewJar(jars);
                  }
                }
              }
            }
            fireDownloadComplete();
          }
  finally {
            if (bis != null) {
              bis.close();
            }
            if (bos != null) {
              bos.close();
            }
            if (tempFolder != null) {
              FilesUtils.deleteFile(tempFolder,true);
            }
          }
        }
        return response;
      }
    }
.doRequest(monitor,parseMvnUrl);
  }
}",0.7394318944307761
125304,"protected Set<P2ExtraFeature> retrieveComponentsFromIndex(IProgressMonitor monitor,ComponentNexusP2ExtraFeature defaultFeature) throws Exception {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  NexusComponentsTransport transport=new NexusComponentsTransport(defaultFeature.getNexusURL(),defaultFeature.getNexusUser(),defaultFeature.getNexusPass());
  if (transport.isAvailable()) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    final Document doc=transport.downloadXMLDocument(monitor,defaultFeature.getIndexArtifact());
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    final Set<P2ExtraFeature> p2Features=createFeatures(defaultFeature,doc);
    return p2Features;
  }
  return Collections.emptySet();
}","protected Set<P2ExtraFeature> retrieveComponentsFromIndex(IProgressMonitor monitor,ComponentNexusP2ExtraFeature defaultFeature) throws Exception {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  if (monitor.isCanceled()) {
    throw new OperationCanceledException();
  }
  NexusComponentsTransport transport=new NexusComponentsTransport(defaultFeature.getNexusURL(),defaultFeature.getNexusUser(),defaultFeature.getNexusPass());
  if (transport.isAvailable(monitor,defaultFeature.getIndexArtifact())) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    final Document doc=transport.downloadXMLDocument(monitor,defaultFeature.getIndexArtifact());
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    final Set<P2ExtraFeature> p2Features=createFeatures(defaultFeature,doc);
    return p2Features;
  }
  return Collections.emptySet();
}",0.9773855488141202
125305,"public List<ProjectReference> getProjectReferenceList(){
  List<ProjectReference> projectReferenceList=new ArrayList<ProjectReference>();
  if (!isLocal()) {
    if (referenceProjectProvider == null) {
      referenceProjectProvider=new ReferenceProjectProvider(project);
      try {
        referenceProjectProvider.initSettings();
      }
 catch (      BusinessException|PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    try {
      projectReferenceList.addAll(referenceProjectProvider.getProjectReference());
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return projectReferenceList;
}","public List<ProjectReference> getProjectReferenceList(boolean isIgnoreProjectNotExist){
  List<ProjectReference> projectReferenceList=new ArrayList<ProjectReference>();
  if (!isLocal()) {
    if (referenceProjectProvider == null) {
      referenceProjectProvider=new ReferenceProjectProvider(project);
      try {
        referenceProjectProvider.initSettings();
      }
 catch (      BusinessException|PersistenceException e) {
        if (!isIgnoreProjectNotExist) {
          ExceptionHandler.process(e);
        }
      }
    }
    try {
      projectReferenceList.addAll(referenceProjectProvider.getProjectReference());
    }
 catch (    PersistenceException e) {
      ExceptionHandler.process(e);
    }
  }
  return projectReferenceList;
}",0.9411764705882352
125306,"/** 
 * DOC wchen Comment method ""initURI"".
 * @return
 */
private String initURI(){
  if (mavenUri == null) {
    if (StringUtils.isEmpty(mavenUriFromConfiguration)) {
      String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
      if (mvnUrisFromIndex != null) {
        final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
        String maxVerstion=null;
        for (        String mvnUri : split) {
          if (maxVerstion == null) {
            maxVerstion=mvnUri;
          }
 else {
            MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
            MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
            if (lastArtifact != null && currentArtifact != null) {
              String lastV=lastArtifact.getVersion();
              lastV=lastV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
              String currentV=currentArtifact.getVersion();
              currentV=currentV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
              if (!lastV.equals(currentV)) {
                Version lastVersion=new Version(lastV);
                Version currentVersion=new Version(currentV);
                if (currentVersion.compareTo(lastVersion) > 0) {
                  maxVerstion=mvnUri;
                }
              }
            }
          }
        }
        mavenUri=MavenUrlHelper.addTypeForMavenUri(maxVerstion,getModuleName());
      }
 else {
        mavenUri=MavenUrlHelper.generateMvnUrlForJarName(getModuleName(),true,true);
      }
    }
 else {
      mavenUri=mavenUriFromConfiguration;
    }
  }
  return mavenUri;
}","/** 
 * DOC wchen Comment method ""initURI"".
 * @return
 */
private String initURI(){
  if (mavenUri == null) {
    if (StringUtils.isEmpty(mavenUriFromConfiguration)) {
      String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
      if (mvnUrisFromIndex != null) {
        final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
        String maxVerstion=null;
        for (        String mvnUri : split) {
          if (maxVerstion == null) {
            maxVerstion=mvnUri;
          }
 else {
            MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
            MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
            if (lastArtifact != null && currentArtifact != null) {
              String lastV=lastArtifact.getVersion();
              String currentV=currentArtifact.getVersion();
              if (!lastV.equals(currentV)) {
                Version lastVersion=getVerstion(lastArtifact);
                Version currentVersion=getVerstion(currentArtifact);
                if (currentVersion.compareTo(lastVersion) > 0) {
                  maxVerstion=mvnUri;
                }
              }
            }
          }
        }
        mavenUri=MavenUrlHelper.addTypeForMavenUri(maxVerstion,getModuleName());
      }
 else {
        mavenUri=MavenUrlHelper.generateMvnUrlForJarName(getModuleName(),true,true);
      }
    }
 else {
      mavenUri=mavenUriFromConfiguration;
    }
  }
  return mavenUri;
}",0.8369017632241813
125307,"private static DynamicClassLoader createCustomClassLoader(String index,Set<String> libraries){
  DynamicClassLoader classLoader=new DynamicClassLoader();
  loadLibraries(classLoader,libraries.toArray(new String[0]),true);
  classLoadersMap.put(index,classLoader);
  return classLoader;
}","private static DynamicClassLoader createCustomClassLoader(String index,Set<String> libraries){
  DynamicClassLoader classLoader=new DynamicClassLoader();
  loadLibraries(classLoader,libraries.toArray(new String[0]),true);
  getClassLoaderMap().put(index,classLoader);
  return classLoader;
}",0.9515570934256056
125308,"private static synchronized DynamicClassLoader findLoader(String index,ClassLoader parentLoader,boolean showDownloadIfNotExist){
  IConfigurationElement current=findIndex(index);
  if (current != null) {
    String parentKey=current.getAttribute(PARENT_ATTR);
    ClassLoader parentClassLoader=null;
    if (StringUtils.isNotEmpty(parentKey)) {
      parentClassLoader=getClassLoader(parentKey,showDownloadIfNotExist);
    }
    if (parentClassLoader == null) {
      parentClassLoader=parentLoader;
    }
    DynamicClassLoader classLoader=null;
    if (parentClassLoader == null) {
      classLoader=new DynamicClassLoader();
    }
 else {
      classLoader=new DynamicClassLoader(parentClassLoader);
    }
    boolean putInCache=true;
    String[] librariesArray=getLibs(current);
    if (librariesArray.length > 0) {
      putInCache=loadLibraries(classLoader,librariesArray,showDownloadIfNotExist);
    }
    if (putInCache) {
      classLoadersMap.put(index,classLoader);
    }
    return classLoader;
  }
  return null;
}","private static synchronized DynamicClassLoader findLoader(String index,ClassLoader parentLoader,boolean showDownloadIfNotExist){
  IConfigurationElement current=findIndex(index);
  if (current != null) {
    String parentKey=current.getAttribute(PARENT_ATTR);
    ClassLoader parentClassLoader=null;
    if (StringUtils.isNotEmpty(parentKey)) {
      parentClassLoader=getClassLoader(parentKey,showDownloadIfNotExist);
    }
    if (parentClassLoader == null) {
      parentClassLoader=parentLoader;
    }
    DynamicClassLoader classLoader=null;
    if (parentClassLoader == null) {
      classLoader=new DynamicClassLoader();
    }
 else {
      classLoader=new DynamicClassLoader(parentClassLoader);
    }
    boolean putInCache=true;
    String[] librariesArray=getLibs(current);
    if (librariesArray.length > 0) {
      putInCache=loadLibraries(classLoader,librariesArray,showDownloadIfNotExist);
    }
    if (putInCache) {
      getClassLoaderMap().put(index,classLoader);
    }
    return classLoader;
  }
  return null;
}",0.9864077669902912
125309,"private static boolean isCacheChanged(){
  if (configurationElements == null) {
    return true;
  }
  if (configurationElements != null) {
    for (    IConfigurationElement configElement : configurationElements) {
      if (!configElement.isValid()) {
        return true;
      }
    }
  }
  return false;
}","private static boolean isCacheChanged(){
  if (classLoadersMap == null) {
    return true;
  }
  if (configurationElements == null) {
    return true;
  }
  if (configurationElements != null) {
    for (    IConfigurationElement configElement : configurationElements) {
      if (!configElement.isValid()) {
        return true;
      }
    }
  }
  return false;
}",0.9198813056379822
125310,"/** 
 * DOC sgandon Comment method ""createUnavailableModuleToInstall"".
 * @param unavailableModuleName
 * @param contextMap, may be null
 * @return
 */
private ModuleToInstall createUnavailableModuleToInstall(String mvnUri,Map<String,List<ModuleNeeded>> contextMap){
  ModuleToInstall m=new ModuleToInstall();
  m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
  m.setMavenUri(mvnUri);
  setContext(m,mvnUri,contextMap);
  String name=null;
  String type=null;
  if (StringUtils.isNotEmpty(mvnUri)) {
    MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mvnUri);
    String repoUrl=parseMvnUrl.getRepositoryUrl();
    if (StringUtils.isNotEmpty(repoUrl)) {
      type=parseMvnUrl.getType();
      if (type == null) {
        type=MavenConstants.TYPE_JAR;
      }
      m.resolveDistribution(type);
    }
  }
  if (contextMap != null) {
    final List<ModuleNeeded> neededModules=contextMap.get(mvnUri);
    name=neededModules.get(0).getModuleName();
    m.setName(name);
    m.setDescription(getFirstDescription(neededModules));
  }
  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str""+ mvnUri+ ""String_Node_Str"");
  if (CommonsPlugin.isDebugMode()) {
    appendToLogFile(mvnUri + ""String_Node_Str"");
  }
  return m;
}","/** 
 * DOC sgandon Comment method ""createUnavailableModuleToInstall"".
 * @param unavailableModuleName
 * @param contextMap, may be null
 * @return
 */
private ModuleToInstall createUnavailableModuleToInstall(String mvnUri,Map<String,List<ModuleNeeded>> contextMap){
  ModuleToInstall m=new ModuleToInstall();
  m.setMavenUri(mvnUri);
  setContext(m,mvnUri,contextMap);
  String name=null;
  boolean downloadManual=true;
  if (StringUtils.isNotEmpty(mvnUri)) {
    MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mvnUri);
    String repoUrl=parseMvnUrl.getRepositoryUrl();
    if (StringUtils.isNotEmpty(repoUrl)) {
      downloadManual=false;
    }
  }
  if (downloadManual) {
    m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
  }
  if (contextMap != null) {
    final List<ModuleNeeded> neededModules=contextMap.get(mvnUri);
    name=neededModules.get(0).getModuleName();
    m.setName(name);
    m.setDescription(getFirstDescription(neededModules));
  }
  ExceptionHandler.log(""String_Node_Str"" + name + ""String_Node_Str""+ mvnUri+ ""String_Node_Str"");
  if (CommonsPlugin.isDebugMode()) {
    appendToLogFile(mvnUri + ""String_Node_Str"");
  }
  return m;
}",0.6583541147132169
125311,"private void addModulesToCache(List<MavenArtifact> searchResults,Map<String,ModuleToInstall> theCache){
  for (  MavenArtifact artifact : searchResults) {
    String artifactId=artifact.getArtifactId();
    String packageName=artifact.getType();
    if (packageName == null) {
      packageName=MavenConstants.TYPE_JAR;
    }
    String version=artifact.getVersion();
    String description=artifact.getDescription();
    String license=artifact.getLicense();
    String license_url=artifact.getLicenseUrl();
    String packaging=artifact.getType();
    String url=null;
    if (artifact.getUrl() != null && !""String_Node_Str"".equals(artifact.getUrl())) {
      url=artifact.getUrl();
    }
    ModuleToInstall m=new ModuleToInstall();
    m.setName(artifactId + ""String_Node_Str"" + packageName);
    String mvnUri=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifactId,version,packaging,artifact.getClassifier());
    m.setMavenUri(mvnUri);
    m.setLicenseType(license);
    m.setLicenseUrl(license_url);
    m.setDescription(description);
    m.setUrl_description(url);
    m.setUrl_download(url);
    String artifactType=artifact.getType();
    m.resolveDistribution(artifactType);
    if (theCache == localCache) {
      m.setFromCustomNexus(true);
    }
    theCache.put(mvnUri,m);
  }
}","private void addModulesToCache(List<MavenArtifact> searchResults,Map<String,ModuleToInstall> theCache){
  for (  MavenArtifact artifact : searchResults) {
    String artifactId=artifact.getArtifactId();
    String packageName=artifact.getType();
    if (packageName == null) {
      packageName=MavenConstants.TYPE_JAR;
    }
    String version=artifact.getVersion();
    String description=artifact.getDescription();
    String license=artifact.getLicense();
    String license_url=artifact.getLicenseUrl();
    String url=null;
    if (artifact.getUrl() != null && !""String_Node_Str"".equals(artifact.getUrl())) {
      url=artifact.getUrl();
    }
    ModuleToInstall m=new ModuleToInstall();
    m.setName(artifactId + ""String_Node_Str"" + packageName);
    String mvnUri=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifactId,version,packageName,artifact.getClassifier());
    m.setMavenUri(mvnUri);
    m.setLicenseType(license);
    m.setLicenseUrl(license_url);
    m.setDescription(description);
    m.setUrl_description(url);
    m.setUrl_download(url);
    if (StringUtils.isEmpty(artifact.getType()) || MavenConstants.PACKAGING_POM.equals(artifact.getType())) {
      m.setDistribution(MavenConstants.DOWNLOAD_MANUAL);
    }
    if (theCache == localCache) {
      m.setFromCustomNexus(true);
    }
    theCache.put(mvnUri,m);
  }
}",0.9196529611467372
125312,"public static String addTypeForMavenUri(String uri,String moduleName){
  MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(uri,false);
  if (parseMvnUrl != null && parseMvnUrl.getType() == null) {
    if (moduleName != null && moduleName.lastIndexOf(""String_Node_Str"") != -1) {
      parseMvnUrl.setType(moduleName.substring(moduleName.lastIndexOf(""String_Node_Str"") + 1,moduleName.length()));
    }
 else {
      parseMvnUrl.setType(MavenConstants.TYPE_JAR);
    }
    uri=MavenUrlHelper.generateMvnUrl(parseMvnUrl.getGroupId(),parseMvnUrl.getArtifactId(),parseMvnUrl.getVersion(),parseMvnUrl.getType(),parseMvnUrl.getClassifier());
  }
  return uri;
}","public static String addTypeForMavenUri(String uri,String moduleName){
  MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(uri,false);
  if (parseMvnUrl != null && parseMvnUrl.getType() == null) {
    if (moduleName != null && moduleName.lastIndexOf(""String_Node_Str"") != -1) {
      parseMvnUrl.setType(moduleName.substring(moduleName.lastIndexOf(""String_Node_Str"") + 1,moduleName.length()));
    }
 else {
      parseMvnUrl.setType(MavenConstants.TYPE_JAR);
    }
    uri=MavenUrlHelper.generateMvnUrl(parseMvnUrl.getRepositoryUrl(),parseMvnUrl.getGroupId(),parseMvnUrl.getArtifactId(),parseMvnUrl.getVersion(),parseMvnUrl.getType(),parseMvnUrl.getClassifier());
  }
  return uri;
}",0.9769173492181684
125313,public List<? extends INodeReturn> createReturns();,public List<? extends INodeReturn> createReturns(INode node);,0.9107142857142856
125314,"@Override public void drawBackground(GC gc){
  if (gc == null) {
    return;
  }
  List<LinkDescriptor<Item,D1,Tree,D2>> links=linksManager.getLinks();
  int lstSize=links.size();
  if (xStartBezierLink == null || xStartBezierLink < 10) {
    xStartBezierLink=findXRightStartBezierLink(source.getItems(),0);
  }
  Point sourceToCommonPoint=display.map(source,getBgDrawableComposite(),new Point(0,0));
  int treeItemHeight=source.getItemHeight();
  Rectangle tableBounds=source.getBounds();
  if (WindowSystem.isGTK()) {
    gc.setAdvanced(false);
  }
 else {
    gc.fillRectangle(sourceToCommonPoint.x,sourceToCommonPoint.y,tableBounds.width - source.getBorderWidth(),tableBounds.height - source.getBorderWidth());
    if (backgroundRefresher.isAntialiasAllowed()) {
      gc.setAntialias(SWT.ON);
    }
 else {
      gc.setAntialias(SWT.OFF);
    }
  }
  Point pointStartStraight=new Point(0,0);
  Point pointEndStraight=new Point(0,0);
  for (int i=0; i < lstSize; i++) {
    LinkDescriptor<Item,D1,Tree,D2> link=links.get(i);
    Tree tree=link.getExtremity2().getGraphicalObject();
    Point tableToCommonPoint=display.map(tree,getBgDrawableComposite(),new Point(0,0));
    IDrawableLink drawableLink=link.getStyleLink().getDrawableLink();
    if (drawableLink == null) {
      drawableLink=getDefaultStyleLink().getDrawableLink();
    }
    drawableLink.getStyle().apply(gc);
    IExtremityLink<Item,D1> extremity1=link.getExtremity1();
    IExtremityLink<Tree,D2> extremity2=link.getExtremity2();
    dataToTableItemCache.clear();
    TableItem tableItem=dataToTableItemCache.getTableItem(extremity1.getDataItem());
    Rectangle tableItemBounds=tableItem.getBounds();
    int yStraight=sourceToCommonPoint.y + treeItemHeight / 2 + tableItemBounds.y;
    pointStartStraight.x=sourceToCommonPoint.x + tableItemBounds.x + tableItemBounds.width;
    pointStartStraight.y=yStraight;
    pointEndStraight.x=sourceToCommonPoint.x + xStartBezierLink;
    pointEndStraight.y=yStraight;
    TreeItem treeItem=getFirstVisibleTreeItemOfPath(extremity2.getDataItem());
    Rectangle treeItemBounds;
    if (treeItem != null) {
      treeItemBounds=treeItem.getBounds();
    }
 else {
      treeItemBounds=new Rectangle(0,0,0,0);
    }
    Rectangle treeBounds=tree.getBounds();
    int pointY=treeItemBounds.y + tree.getItemHeight() / 2 + tree.getBorderWidth();
    if (tree.getHeaderVisible()) {
      pointY+=tree.getHeaderHeight();
    }
    Point pointEndCentralCurve=null;
    pointEndCentralCurve=backgroundRefresher.convertPointToCommonParentOrigin(new Point(treeBounds.x - 10,pointY),tree);
    Point point=display.map(source,getBgDrawableComposite(),new Point(0,0));
    Point offset=getOffset();
    int yStartStraight=pointStartStraight.y + offset.y;
    boolean isStartOutOfView=false;
    boolean isEndOutOfView=false;
    if (yStraight < point.y || yStraight > point.y + tableBounds.height) {
      isStartOutOfView=true;
    }
 else {
    }
    if (pointEndCentralCurve.y < tableToCommonPoint.y) {
      pointEndCentralCurve.y=tableToCommonPoint.y;
      isEndOutOfView=true;
    }
    if (pointEndCentralCurve.y > tableToCommonPoint.y + treeBounds.height) {
      pointEndCentralCurve.y=tableToCommonPoint.y + treeBounds.height - 2 * tree.getBorderWidth();
      isEndOutOfView=true;
    }
    if (!(isStartOutOfView && isEndOutOfView)) {
      boolean lineStyleDot=isStartOutOfView || isEndOutOfView;
      if ((treeItem != null && treeItem.getData() == extremity2.getDataItem()) && !lineStyleDot) {
        gc.setLineStyle(SWT.LINE_SOLID);
      }
 else {
        gc.setLineStyle(SWT.LINE_DOT);
      }
      gc.drawLine(pointStartStraight.x + offset.x,yStartStraight,pointEndStraight.x + offset.x,yStartStraight);
      if (WindowSystem.isGTK()) {
        pointStartStraight.x+=-15;
      }
      pointEndStraight.x+=offset.x;
      pointEndStraight.y+=offset.y;
      pointEndCentralCurve.x+=offset.x - 6;
      pointEndCentralCurve.y+=offset.y;
      if (Platform.OS_LINUX.equals(Platform.getOS())) {
        pointEndCentralCurve.y=pointEndCentralCurve.y - tableItem.getBounds().height;
      }
      drawableLink.setPoint1(pointEndStraight);
      drawableLink.setPoint2(pointEndCentralCurve);
      drawableLink.draw(gc);
    }
  }
}","@Override public void drawBackground(GC gc){
  if (gc == null) {
    return;
  }
  List<LinkDescriptor<Item,D1,Tree,D2>> links=linksManager.getLinks();
  int lstSize=links.size();
  if (xStartBezierLink == null || xStartBezierLink < 10) {
    xStartBezierLink=findXRightStartBezierLink(source.getItems(),0);
  }
  Point sourceToCommonPoint=display.map(source,getBgDrawableComposite(),new Point(0,0));
  int treeItemHeight=source.getItemHeight();
  Rectangle tableBounds=source.getBounds();
  if (WindowSystem.isGTK()) {
    gc.setAdvanced(false);
  }
 else {
    gc.fillRectangle(sourceToCommonPoint.x,sourceToCommonPoint.y,tableBounds.width - source.getBorderWidth(),tableBounds.height - source.getBorderWidth());
    if (backgroundRefresher.isAntialiasAllowed()) {
      gc.setAntialias(SWT.ON);
    }
 else {
      gc.setAntialias(SWT.OFF);
    }
  }
  Point pointStartStraight=new Point(0,0);
  Point pointEndStraight=new Point(0,0);
  for (int i=0; i < lstSize; i++) {
    LinkDescriptor<Item,D1,Tree,D2> link=links.get(i);
    Tree tree=link.getExtremity2().getGraphicalObject();
    Point tableToCommonPoint=display.map(tree,getBgDrawableComposite(),new Point(0,0));
    IDrawableLink drawableLink=link.getStyleLink().getDrawableLink();
    if (drawableLink == null) {
      drawableLink=getDefaultStyleLink().getDrawableLink();
    }
    drawableLink.getStyle().apply(gc);
    IExtremityLink<Item,D1> extremity1=link.getExtremity1();
    IExtremityLink<Tree,D2> extremity2=link.getExtremity2();
    dataToTableItemCache.clear();
    TableItem tableItem=dataToTableItemCache.getTableItem(extremity1.getDataItem());
    Rectangle tableItemBounds=tableItem.getBounds();
    int yStraight=sourceToCommonPoint.y + treeItemHeight / 2 + tableItemBounds.y;
    pointEndStraight.x=sourceToCommonPoint.x + xStartBezierLink;
    if (Platform.OS_MACOSX.equals(Platform.getOS())) {
      pointStartStraight.x=sourceToCommonPoint.x + tableItem.getParent().getBounds().width;
      pointEndStraight.x=pointStartStraight.x;
    }
 else {
      pointStartStraight.x=sourceToCommonPoint.x + tableItemBounds.x + tableItemBounds.width;
    }
    pointStartStraight.y=yStraight;
    pointEndStraight.y=yStraight;
    TreeItem treeItem=getFirstVisibleTreeItemOfPath(extremity2.getDataItem());
    Rectangle treeItemBounds;
    if (treeItem != null) {
      treeItemBounds=treeItem.getBounds();
    }
 else {
      treeItemBounds=new Rectangle(0,0,0,0);
    }
    Rectangle treeBounds=tree.getBounds();
    int pointY=treeItemBounds.y + tree.getItemHeight() / 2 + tree.getBorderWidth();
    if (tree.getHeaderVisible()) {
      pointY+=tree.getHeaderHeight();
    }
    Point pointEndCentralCurve=null;
    pointEndCentralCurve=backgroundRefresher.convertPointToCommonParentOrigin(new Point(treeBounds.x - 10,pointY),tree);
    Point point=display.map(source,getBgDrawableComposite(),new Point(0,0));
    Point offset=getOffset();
    int yStartStraight=pointStartStraight.y + offset.y;
    boolean isStartOutOfView=false;
    boolean isEndOutOfView=false;
    if (yStraight < point.y || yStraight > point.y + tableBounds.height) {
      isStartOutOfView=true;
    }
 else {
    }
    if (pointEndCentralCurve.y < tableToCommonPoint.y) {
      pointEndCentralCurve.y=tableToCommonPoint.y;
      isEndOutOfView=true;
    }
    if (pointEndCentralCurve.y > tableToCommonPoint.y + treeBounds.height) {
      pointEndCentralCurve.y=tableToCommonPoint.y + treeBounds.height - 2 * tree.getBorderWidth();
      isEndOutOfView=true;
    }
    if (!(isStartOutOfView && isEndOutOfView)) {
      boolean lineStyleDot=isStartOutOfView || isEndOutOfView;
      if ((treeItem != null && treeItem.getData() == extremity2.getDataItem()) && !lineStyleDot) {
        gc.setLineStyle(SWT.LINE_SOLID);
      }
 else {
        gc.setLineStyle(SWT.LINE_DOT);
      }
      gc.drawLine(pointStartStraight.x + offset.x,yStartStraight,pointEndStraight.x + offset.x,yStartStraight);
      if (WindowSystem.isGTK()) {
        pointStartStraight.x+=-15;
      }
      pointEndStraight.x+=offset.x;
      pointEndStraight.y+=offset.y;
      pointEndCentralCurve.x+=offset.x - 6;
      pointEndCentralCurve.y+=offset.y;
      if (Platform.OS_LINUX.equals(Platform.getOS())) {
        pointEndCentralCurve.y=pointEndCentralCurve.y - tableItem.getBounds().height;
      }
      if (Platform.OS_MACOSX.equals(Platform.getOS())) {
        pointEndCentralCurve.y=pointEndCentralCurve.y + tableItem.getBounds(0).height;
      }
      drawableLink.setPoint1(pointEndStraight);
      drawableLink.setPoint2(pointEndCentralCurve);
      drawableLink.draw(gc);
    }
  }
}",0.9359494812810104
125315,"private ERepositoryObjectType getRepositoryType(IRepositoryNode node){
  IRepositoryNode testNode=node;
  while (testNode != null) {
    ERepositoryObjectType repObjType=testNode.getContentType();
    if (repObjType != null) {
      return repObjType;
    }
    testNode=testNode.getParent();
    if (testNode instanceof ProjectRepositoryNode) {
      break;
    }
  }
  return null;
}","public ERepositoryObjectType getRepositoryType(IRepositoryNode node){
  IRepositoryNode testNode=node;
  while (testNode != null) {
    ERepositoryObjectType repObjType=testNode.getContentType();
    if (repObjType != null) {
      return repObjType;
    }
    testNode=testNode.getParent();
    if (testNode instanceof ProjectRepositoryNode) {
      break;
    }
  }
  return null;
}",0.9856957087126138
125316,"@Override public RepositoryNode getRootRepositoryNode(ERepositoryObjectType type,boolean tryInit){
  RepositoryNode rootTypeNode=null;
  if (type != null) {
    String typeName=type.name();
    if (repositoryNodeMap.containsKey(typeName)) {
      rootTypeNode=repositoryNodeMap.get(typeName);
      if (tryInit) {
        initNode(rootTypeNode);
      }
    }
  }
  return rootTypeNode;
}","public RepositoryNode getRootRepositoryNode(IRepositoryNode repNode,boolean tryInit){
  RepositoryNode rootRepoNode=null;
  ERepositoryObjectType repObjType=getRepositoryType(repNode);
  if (repObjType != null) {
    rootRepoNode=getRootRepositoryNode(repObjType,tryInit);
  }
  return rootRepoNode;
}",0.3831640058055152
125317,"private void openMDMTableWizard(final MDMConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  boolean skipStep=!creation;
  CreateConceptWizard conceptWizard=new CreateConceptWizard(PlatformUI.getWorkbench(),creation,getExistingNames(),node,item,metadataTable,readOnly);
  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),conceptWizard);
  wizardDialog.setBlockOnOpen(true);
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  if (wizardDialog.open() == wizardDialog.OK) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.expand(node,true);
    }
    refresh(node);
  }
}","private void openMDMTableWizard(final MDMConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  boolean skipStep=!creation;
  CreateConceptWizard conceptWizard=new CreateConceptWizard(PlatformUI.getWorkbench(),creation,getExistingNames(),node,item,metadataTable,readOnly);
  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell(),conceptWizard);
  wizardDialog.setBlockOnOpen(true);
  wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  wizardDialog.create();
  if (wizardDialog.open() == wizardDialog.OK) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.expand(node,true);
    }
    refresh(node);
  }
 else {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      RepositoryNode rootNode=ProjectRepositoryNode.getInstance().getRootRepositoryNode(node,false);
      if (rootNode != null) {
        rootNode.getChildren().clear();
        rootNode.setInitialized(false);
        viewPart.refresh(rootNode);
      }
    }
  }
}",0.8173636844891476
125318,"/** 
 * DOC mhelleboid Comment method ""handleWizard"".
 * @param node
 * @param wizardDialog
 */
protected void handleWizard(RepositoryNode node,WizardDialog wizardDialog,boolean notSetSize){
  if (!notSetSize) {
    wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  }
  wizardDialog.create();
  if (wizardDialog.open() == wizardDialog.OK) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.expand(node,true);
    }
    refresh(node);
  }
}","/** 
 * DOC mhelleboid Comment method ""handleWizard"".
 * @param node
 * @param wizardDialog
 */
protected void handleWizard(RepositoryNode node,WizardDialog wizardDialog,boolean notSetSize){
  if (!notSetSize) {
    wizardDialog.setPageSize(WIZARD_WIDTH,WIZARD_HEIGHT);
  }
  wizardDialog.create();
  if (wizardDialog.open() == wizardDialog.OK) {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      viewPart.expand(node,true);
    }
    refresh(node);
  }
 else {
    IRepositoryView viewPart=getViewPart();
    if (viewPart != null) {
      RepositoryNode rootNode=ProjectRepositoryNode.getInstance().getRootRepositoryNode(node,false);
      if (rootNode != null) {
        rootNode.getChildren().clear();
        rootNode.setInitialized(false);
        viewPart.refresh(rootNode);
      }
    }
  }
}",0.7368421052631579
125319,"/** 
 * ftang Comment method ""collectionGeneratedDocumentation"".
 * @param exportFileResource
 * @param jobVersion
 * @param targetPath
 * @throws MalformedURLException
 */
private void collectGeneratedDocumentation(ExportFileResource exportFileResource,String targetPath,String[] jobVersion) throws MalformedURLException {
  Item item=exportFileResource.getItem();
  String jobName=item.getProperty().getLabel();
  String jobPath=item.getProperty().getItem().getState().getPath();
  String subFolder=null;
  if (ERepositoryObjectType.GENERATED != null && targetPath.endsWith(new Path(ERepositoryObjectType.GENERATED.getFolder()).lastSegment().toLowerCase())) {
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType != null) {
      subFolder=new Path(itemType.getFolder()).lastSegment().toLowerCase();
    }
 else {
      if (item instanceof JobDocumentationItem && ERepositoryObjectType.JOB_DOC != null) {
        subFolder=new Path(ERepositoryObjectType.JOB_DOC.getFolder()).lastSegment().toLowerCase();
      }
 else       if (item instanceof JobletDocumentationItem && ERepositoryObjectType.JOBLET_DOC != null) {
        subFolder=new Path(ERepositoryObjectType.JOBLET_DOC.getFolder()).lastSegment().toLowerCase();
      }
 else {
        subFolder=""String_Node_Str"";
      }
    }
    targetPath=targetPath + IPath.SEPARATOR + subFolder;
  }
  targetPath=targetPath + IPath.SEPARATOR + jobPath+ IPath.SEPARATOR+ jobName;
  String version=""String_Node_Str"";
  if (jobVersion != null && jobVersion.length == 1) {
    version=jobVersion[0];
  }
 else {
    version=item.getProperty().getVersion();
  }
  targetPath=targetPath + ""String_Node_Str"" + version;
  List<URL> resultFiles=new ArrayList<URL>(5);
  List<URL> picList=new ArrayList<URL>(5);
  File file=new File(targetPath);
  if (file.exists()) {
    File[] listFiles=file.listFiles();
    for (    File file2 : listFiles) {
      if (!(file2.exists())) {
        continue;
      }
      if (file2.isFile()) {
        resultFiles.add(file2.toURL());
      }
 else       if (file2.isDirectory() && file2.getName().equals(IHTMLDocConstants.PIC_FOLDER_NAME)) {
        for (        File tempFile : file2.listFiles()) {
          if (tempFile.exists() && tempFile.isFile()) {
            picList.add(tempFile.toURL());
          }
        }
      }
    }
    exportFileResource.addResources(resultFiles);
    exportFileResource.addResources(IHTMLDocConstants.PIC_FOLDER_NAME,picList);
  }
}","/** 
 * ftang Comment method ""collectionGeneratedDocumentation"".
 * @param exportFileResource
 * @param jobVersion
 * @param targetPath
 * @throws MalformedURLException
 */
private void collectGeneratedDocumentation(ExportFileResource exportFileResource,String targetPath,String[] jobVersion) throws MalformedURLException {
  Item item=exportFileResource.getItem();
  String jobName=item.getProperty().getLabel();
  String jobPath=item.getProperty().getItem().getState().getPath();
  String subFolder=null;
  if (ERepositoryObjectType.GENERATED != null && targetPath.endsWith(new Path(ERepositoryObjectType.GENERATED.getFolder()).lastSegment().toLowerCase())) {
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType != null) {
      subFolder=new Path(itemType.getFolder()).lastSegment().toLowerCase();
    }
    targetPath=targetPath + IPath.SEPARATOR + subFolder;
  }
  targetPath=targetPath + IPath.SEPARATOR + jobPath+ IPath.SEPARATOR+ jobName;
  String version=""String_Node_Str"";
  if (jobVersion != null && jobVersion.length == 1) {
    version=jobVersion[0];
  }
 else {
    version=item.getProperty().getVersion();
  }
  targetPath=targetPath + ""String_Node_Str"" + version;
  List<URL> resultFiles=new ArrayList<URL>(5);
  List<URL> picList=new ArrayList<URL>(5);
  File file=new File(targetPath);
  if (file.exists()) {
    File[] listFiles=file.listFiles();
    for (    File file2 : listFiles) {
      if (!(file2.exists())) {
        continue;
      }
      if (file2.isFile()) {
        resultFiles.add(file2.toURL());
      }
 else       if (file2.isDirectory() && file2.getName().equals(IHTMLDocConstants.PIC_FOLDER_NAME)) {
        for (        File tempFile : file2.listFiles()) {
          if (tempFile.exists() && tempFile.isFile()) {
            picList.add(tempFile.toURL());
          }
        }
      }
    }
    exportFileResource.addResources(resultFiles);
    exportFileResource.addResources(IHTMLDocConstants.PIC_FOLDER_NAME,picList);
  }
}",0.8935886019590383
125320,"@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (hasLockedItems(type,path)) {
    throw new PersistenceException(Messages.getString(""String_Node_Str""));
  }
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}","@Override public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (hasLockedItems(type,path)) {
    throw new PersistenceException(Messages.getString(""String_Node_Str""));
  }
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDocumentationService.class)) {
    IDocumentationService service=(IDocumentationService)GlobalServiceRegister.getDefault().getService(IDocumentationService.class);
    IGenerateAllDocumentation docGenerator=service.getDocGeneratorByProcessType(type);
    if (docGenerator != null) {
      fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,new Object[]{label,type});
    }
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}",0.5313700384122919
125321,public Set<IComponent> getComponents();,"/** 
 * Only use it if you want to modify(add/remove) the list! and don't forget to use synchronize block!!<br/> Use readComponents() if you only want to iterate/read the list.
 */
public Set<IComponent> getComponents();",0.3011583011583011
125322,"private static void initializeHiddenComponents(){
  RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext == null) {
    return;
  }
  Project project=repositoryContext.getProject();
  if (project == null) {
    return;
  }
  org.talend.core.model.properties.Project emfProject=project.getEmfProject();
  if (emfProject == null) {
    return;
  }
  hiddenComponents=new HashMap<String,Map<String,Set<String>>>();
  EList list=emfProject.getComponentsSettings();
  for (  IComponent component : ComponentsFactoryProvider.getInstance().getComponents()) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    if (!hiddenComponents.containsKey(component.getPaletteType())) {
      hiddenComponents.put(component.getPaletteType(),new HashMap<String,Set<String>>());
    }
    if (!component.isVisibleInComponentDefinition()) {
      hiddenComponents.get(component.getPaletteType()).put(component.getName(),new HashSet<String>());
      for (      String family : component.getOriginalFamilyName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
        hiddenComponents.get(component.getPaletteType()).get(component.getName()).add(family);
      }
    }
  }
  for (  Object oSetting : list) {
    ComponentSetting setting=(ComponentSetting)oSetting;
    String paletteType;
    String componentName;
    if (setting.getName().contains(""String_Node_Str"")) {
      String[] splitted=setting.getName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      paletteType=splitted[0];
      componentName=splitted[1];
    }
 else {
      paletteType=ComponentCategory.CATEGORY_4_DI.getName();
      componentName=setting.getName();
    }
    if (!hiddenComponents.containsKey(paletteType)) {
      hiddenComponents.put(paletteType,new HashMap<String,Set<String>>());
    }
    if (setting.isHidden()) {
      if (!hiddenComponents.get(paletteType).containsKey(componentName)) {
        hiddenComponents.get(paletteType).put(componentName,new HashSet<String>());
      }
      for (      String family : setting.getFamily().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
        hiddenComponents.get(paletteType).get(componentName).add(family);
      }
    }
 else {
      if (hiddenComponents.get(paletteType).containsKey(componentName)) {
        for (        String family : setting.getFamily().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
          hiddenComponents.get(paletteType).get(componentName).remove(family);
        }
        if (hiddenComponents.get(paletteType).get(componentName).isEmpty()) {
          hiddenComponents.get(paletteType).remove(componentName);
        }
      }
    }
  }
  displayedFamilies=new HashMap<String,Set<String>>();
  for (  IComponent component : ComponentsFactoryProvider.getInstance().getComponents()) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    if (!displayedFamilies.containsKey(component.getPaletteType())) {
      displayedFamilies.put(component.getPaletteType(),new HashSet<String>());
    }
    for (    String family : component.getOriginalFamilyName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
      if (isComponentVisible(component,null)) {
        displayedFamilies.get(component.getPaletteType()).add(family);
      }
    }
  }
}","private static void initializeHiddenComponents(){
  RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext == null) {
    return;
  }
  Project project=repositoryContext.getProject();
  if (project == null) {
    return;
  }
  org.talend.core.model.properties.Project emfProject=project.getEmfProject();
  if (emfProject == null) {
    return;
  }
  hiddenComponents=new HashMap<String,Map<String,Set<String>>>();
  EList list=emfProject.getComponentsSettings();
  Collection<IComponent> componentList=ComponentsFactoryProvider.getInstance().readComponents();
  for (  IComponent component : componentList) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    if (!hiddenComponents.containsKey(component.getPaletteType())) {
      hiddenComponents.put(component.getPaletteType(),new HashMap<String,Set<String>>());
    }
    if (!component.isVisibleInComponentDefinition()) {
      hiddenComponents.get(component.getPaletteType()).put(component.getName(),new HashSet<String>());
      for (      String family : component.getOriginalFamilyName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
        hiddenComponents.get(component.getPaletteType()).get(component.getName()).add(family);
      }
    }
  }
  for (  Object oSetting : list) {
    ComponentSetting setting=(ComponentSetting)oSetting;
    String paletteType;
    String componentName;
    if (setting.getName().contains(""String_Node_Str"")) {
      String[] splitted=setting.getName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX);
      paletteType=splitted[0];
      componentName=splitted[1];
    }
 else {
      paletteType=ComponentCategory.CATEGORY_4_DI.getName();
      componentName=setting.getName();
    }
    if (!hiddenComponents.containsKey(paletteType)) {
      hiddenComponents.put(paletteType,new HashMap<String,Set<String>>());
    }
    if (setting.isHidden()) {
      if (!hiddenComponents.get(paletteType).containsKey(componentName)) {
        hiddenComponents.get(paletteType).put(componentName,new HashSet<String>());
      }
      for (      String family : setting.getFamily().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
        hiddenComponents.get(paletteType).get(componentName).add(family);
      }
    }
 else {
      if (hiddenComponents.get(paletteType).containsKey(componentName)) {
        for (        String family : setting.getFamily().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
          hiddenComponents.get(paletteType).get(componentName).remove(family);
        }
        if (hiddenComponents.get(paletteType).get(componentName).isEmpty()) {
          hiddenComponents.get(paletteType).remove(componentName);
        }
      }
    }
  }
  displayedFamilies=new HashMap<String,Set<String>>();
  for (  IComponent component : componentList) {
    if (component.isTechnical() || component.getComponentType() == EComponentType.JOBLET) {
      continue;
    }
    if (!displayedFamilies.containsKey(component.getPaletteType())) {
      displayedFamilies.put(component.getPaletteType(),new HashSet<String>());
    }
    for (    String family : component.getOriginalFamilyName().split(ComponentsFactoryProvider.FAMILY_SEPARATOR_REGEX)) {
      if (isComponentVisible(component,null)) {
        displayedFamilies.get(component.getPaletteType()).add(family);
      }
    }
  }
}",0.9667095299328476
125323,"public static void removeComponentImage(String name){
  if (name != null && !name.equals(""String_Node_Str"")) {
    for (    IComponent component : ComponentsFactoryProvider.getInstance().getComponents()) {
      if (name.equals(component.getName())) {
        String md5Desc16=MD5.getMD5(component.getIcon16().getImageData().data);
        Image image=componentCachedImages.get(md5Desc16);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc16);
        String md5Desc24=MD5.getMD5(component.getIcon24().getImageData().data);
        image=componentCachedImages.get(md5Desc24);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc24);
        String md5Desc32=MD5.getMD5(component.getIcon32().getImageData().data);
        image=componentCachedImages.get(md5Desc32);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc32);
      }
    }
  }
}","public static void removeComponentImage(String name){
  if (name != null && !name.equals(""String_Node_Str"")) {
    for (    IComponent component : ComponentsFactoryProvider.getInstance().readComponents()) {
      if (name.equals(component.getName())) {
        String md5Desc16=MD5.getMD5(component.getIcon16().getImageData().data);
        Image image=componentCachedImages.get(md5Desc16);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc16);
        String md5Desc24=MD5.getMD5(component.getIcon24().getImageData().data);
        image=componentCachedImages.get(md5Desc24);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc24);
        String md5Desc32=MD5.getMD5(component.getIcon32().getImageData().data);
        image=componentCachedImages.get(md5Desc32);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc32);
      }
    }
  }
}",0.9967816091954024
125324,"public void init(IWorkbenchWindow window){
}","@Override public void init(IWorkbenchWindow window){
}",0.8979591836734694
125325,"public void selectionChanged(IAction action,ISelection selection){
}","@Override public void selectionChanged(IAction action,ISelection selection){
}",0.9315068493150684
125326,"public void run(IAction action){
  run();
}","@Override public void run(IAction action){
  run();
}",0.8958333333333334
125327,"public void dispose(){
}","@Override public void dispose(){
}",0.8275862068965517
125328,"private static List<ModuleNeeded> getModulesNeededForComponents(){
  initCache();
  if (isCreated) {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    ComponentsCache cache=ComponentManager.getComponentCache();
    EMap<String,EList<ComponentInfo>> map=cache.getComponentEntryMap();
    Set<String> set=map.keySet();
    Iterator it=set.iterator();
    Map<String,Boolean> bundlesAvailable=new HashMap<String,Boolean>();
    while (it.hasNext()) {
      String key=(String)it.next();
      EList<ComponentInfo> value=map.get(key);
      for (      ComponentInfo info : value) {
        Boolean available=bundlesAvailable.get(info.getSourceBundleName());
        if (available == null) {
          available=Platform.getBundle(info.getSourceBundleName()) != null;
          bundlesAvailable.put(info.getSourceBundleName(),available);
        }
        if (!available) {
          continue;
        }
        EList emfImportList=info.getImportType();
        for (int i=0; i < emfImportList.size(); i++) {
          IMPORTType importType=(IMPORTType)emfImportList.get(i);
          collectModuleNeeded(key,importType,importNeedsList);
        }
      }
    }
    return importNeedsList;
  }
 else {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IComponentsFactory compFac=service.getComponentsFactory();
      Set<IComponent> componentList=compFac.getComponents();
      for (      IComponent comp : componentList.toArray(new IComponent[0])) {
        importNeedsList.addAll(comp.getModulesNeeded());
      }
    }
    return importNeedsList;
  }
}","private static List<ModuleNeeded> getModulesNeededForComponents(){
  initCache();
  if (isCreated) {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    ComponentsCache cache=ComponentManager.getComponentCache();
    EMap<String,EList<ComponentInfo>> map=cache.getComponentEntryMap();
    Set<String> set=map.keySet();
    Iterator it=set.iterator();
    Map<String,Boolean> bundlesAvailable=new HashMap<String,Boolean>();
    while (it.hasNext()) {
      String key=(String)it.next();
      EList<ComponentInfo> value=map.get(key);
      for (      ComponentInfo info : value) {
        Boolean available=bundlesAvailable.get(info.getSourceBundleName());
        if (available == null) {
          available=Platform.getBundle(info.getSourceBundleName()) != null;
          bundlesAvailable.put(info.getSourceBundleName(),available);
        }
        if (!available) {
          continue;
        }
        EList emfImportList=info.getImportType();
        for (int i=0; i < emfImportList.size(); i++) {
          IMPORTType importType=(IMPORTType)emfImportList.get(i);
          collectModuleNeeded(key,importType,importNeedsList);
        }
      }
    }
    return importNeedsList;
  }
 else {
    List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
      IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
      IComponentsFactory compFac=service.getComponentsFactory();
      for (      IComponent comp : compFac.readComponents()) {
        importNeedsList.addAll(comp.getModulesNeeded());
      }
    }
    return importNeedsList;
  }
}",0.9008148356279854
125329,"@Override public void deployComponentAndExtensionLibs(IProgressMonitor... monitorWrap){
  Set<String> libsWithoutUri=new HashSet<String>();
  Map<String,String> libsToRelativePath=new HashMap<String,String>();
  Map<String,String> libsToMavenUri=new HashMap<String,String>();
  List<ModuleNeeded> modules=new ArrayList<ModuleNeeded>();
  Set<String> duplicateLocationJar=new HashSet<String>();
  Set<String> duplicateMavenUri=new HashSet<String>();
  IComponentsService service=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  }
  if (service != null) {
    for (    IComponent component : service.getComponentsFactory().getComponents()) {
      try {
        modules.addAll(component.getModulesNeeded());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        continue;
      }
    }
  }
  deployIndex(modules,libsWithoutUri,libsToRelativePath,duplicateLocationJar,libsToMavenUri,duplicateMavenUri,monitorWrap);
  if (CommonsPlugin.isDebugMode()) {
    if (!duplicateLocationJar.isEmpty()) {
      warnDuplicated(modules,duplicateLocationJar,""String_Node_Str"");
    }
    if (!duplicateMavenUri.isEmpty()) {
      warnDuplicated(modules,duplicateMavenUri,""String_Node_Str"");
    }
  }
  deployMavenIndex(libsToMavenUri,monitorWrap);
  if (platfromUriFromExtensions.isEmpty() || mavenUriFromExtensions.isEmpty()) {
    deployExtensionIndex();
  }
  deploy(platfromUriFromExtensions,monitorWrap);
  deployMavenIndex(mavenUriFromExtensions,monitorWrap);
  if (service != null) {
    deployLibForComponentProviders(service,libsWithoutUri,libsToRelativePath);
  }
  deploy(libsToRelativePath,monitorWrap);
}","@Override public void deployComponentAndExtensionLibs(IProgressMonitor... monitorWrap){
  Set<String> libsWithoutUri=new HashSet<String>();
  Map<String,String> libsToRelativePath=new HashMap<String,String>();
  Map<String,String> libsToMavenUri=new HashMap<String,String>();
  List<ModuleNeeded> modules=new ArrayList<ModuleNeeded>();
  Set<String> duplicateLocationJar=new HashSet<String>();
  Set<String> duplicateMavenUri=new HashSet<String>();
  IComponentsService service=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IComponentsService.class)) {
    service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  }
  if (service != null) {
    for (    IComponent component : service.getComponentsFactory().readComponents()) {
      try {
        modules.addAll(component.getModulesNeeded());
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
        continue;
      }
    }
  }
  deployIndex(modules,libsWithoutUri,libsToRelativePath,duplicateLocationJar,libsToMavenUri,duplicateMavenUri,monitorWrap);
  if (CommonsPlugin.isDebugMode()) {
    if (!duplicateLocationJar.isEmpty()) {
      warnDuplicated(modules,duplicateLocationJar,""String_Node_Str"");
    }
    if (!duplicateMavenUri.isEmpty()) {
      warnDuplicated(modules,duplicateMavenUri,""String_Node_Str"");
    }
  }
  deployMavenIndex(libsToMavenUri,monitorWrap);
  if (platfromUriFromExtensions.isEmpty() || mavenUriFromExtensions.isEmpty()) {
    deployExtensionIndex();
  }
  deploy(platfromUriFromExtensions,monitorWrap);
  deployMavenIndex(mavenUriFromExtensions,monitorWrap);
  if (service != null) {
    deployLibForComponentProviders(service,libsWithoutUri,libsToRelativePath);
  }
  deploy(libsToRelativePath,monitorWrap);
}",0.9980386662930792
125330,"@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof ExampleDemoConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Set<IComponent> components=service.getComponentsFactory().getComponents();
  for (  IComponent component : components) {
    if (""String_Node_Str"".equals(component.getName())) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}","@Override public List<IComponent> filterNeededComponents(Item item,RepositoryNode seletetedNode,ERepositoryObjectType type){
  List<IComponent> neededComponents=new ArrayList<IComponent>();
  if (!(item instanceof ExampleDemoConnectionItem)) {
    return neededComponents;
  }
  IComponentsService service=(IComponentsService)GlobalServiceRegister.getDefault().getService(IComponentsService.class);
  Collection<IComponent> components=service.getComponentsFactory().readComponents();
  for (  IComponent component : components) {
    if (""String_Node_Str"".equals(component.getName())) {
      neededComponents.add(component);
    }
  }
  return neededComponents;
}",0.9848484848484848
125331,"@Test public void test_installFromFolder_updatesite_file() throws Exception {
  if (!CommonsPlugin.isDebugMode() && Platform.inDevelopmentMode()) {
    return;
  }
  final File testDataFile=BundleFileUtil.getBundleFile(this.getClass(),P2InstallerTest.TEST_COMP_MYJIRA);
  Assert.assertNotNull(testDataFile);
  Assert.assertTrue(testDataFile.exists());
  ComponentIndexBean index=new ComponentIndexManager().create(testDataFile);
  Assert.assertNotNull(index);
  final File target=new File(tmpFolder,testDataFile.getName());
  FilesUtils.copyFile(testDataFile,target);
  final File installedFolder=new File(tmpFolder,""String_Node_Str"");
  try {
    LocalComponentsInstallComponent installComp=new LocalComponentsInstallComponentTestClass(){
      @Override protected ComponentP2ExtraFeature createComponentFeature(      File f){
        return new ComponentP2ExtraFeature(f){
          @Override public IStatus install(          IProgressMonitor progress,          List<URI> allRepoUris) throws P2ExtraFeatureException {
            useLegacyP2Install=false;
            return super.install(progress,allRepoUris);
          }
          @Override protected void moveToSharedFolder(          File installedComponentFolder,          File compFile) throws IOException {
            super.moveToSharedFolder(installedFolder,compFile);
          }
        }
;
      }
    }
;
    installComp.installFromFolder(tmpFolder);
    final List<File> failedComponents=installComp.getFailedComponents();
    Assert.assertNotNull(failedComponents);
    Assert.assertTrue(failedComponents.isEmpty());
    Assert.assertTrue(installedFolder.exists());
    File installedCompFile=new File(installedFolder,testDataFile.getName());
    Assert.assertTrue(installedCompFile.exists());
    Assert.assertFalse(target.exists());
    Assert.assertEquals(testDataFile.getName(),installedCompFile.getName());
    final long originalChecksumAlder32=FilesUtils.getChecksumAlder32(testDataFile);
    final long checksumAlder32=FilesUtils.getChecksumAlder32(installedCompFile);
    Assert.assertEquals(originalChecksumAlder32,checksumAlder32);
    Bundle bundle=Platform.getBundle(index.getBundleId());
    Assert.assertNotNull(""String_Node_Str"",bundle);
  }
  finally {
    Bundle bundle=Platform.getBundle(index.getBundleId());
    if (bundle != null) {
      if (bundle.getState() == Bundle.ACTIVE) {
        bundle.stop();
      }
      bundle.uninstall();
    }
  }
}","@Test public void test_installFromFolder_updatesite_file() throws Exception {
  if (!CommonsPlugin.isDebugMode() && Platform.inDevelopmentMode()) {
    return;
  }
  final File testDataFile=BundleFileUtil.getBundleFile(this.getClass(),P2InstallerTest.TEST_COMP_MYJIRA);
  Assert.assertNotNull(testDataFile);
  Assert.assertTrue(testDataFile.exists());
  ComponentIndexBean index=new ComponentIndexManager().create(testDataFile);
  Assert.assertNotNull(index);
  final File target=new File(tmpFolder,testDataFile.getName());
  FilesUtils.copyFile(testDataFile,target);
  final File installedFolder=new File(tmpFolder,""String_Node_Str"");
  try {
    LocalComponentsInstallComponent installComp=new LocalComponentsInstallComponentTestClass(){
      @Override protected ComponentP2ExtraFeature createComponentFeature(      File f){
        return new ComponentP2ExtraFeature(f){
          @Override public IStatus install(          IProgressMonitor progress,          List<URI> allRepoUris) throws P2ExtraFeatureException {
            useLegacyP2Install=false;
            return super.install(progress,allRepoUris);
          }
          @Override protected void syncComponentsToLocalNexus(          IProgressMonitor progress,          File installedCompFile){
            File sharedCompFile=new File(installedFolder,installedCompFile.getName());
            try {
              FilesUtils.copyFile(installedCompFile,sharedCompFile);
            }
 catch (            IOException e) {
            }
            boolean deleted=installedCompFile.delete();
            if (!deleted) {
              installedCompFile.deleteOnExit();
            }
          }
        }
;
      }
    }
;
    installComp.installFromFolder(tmpFolder);
    final List<File> failedComponents=installComp.getFailedComponents();
    Assert.assertNotNull(failedComponents);
    Assert.assertTrue(failedComponents.isEmpty());
    Assert.assertTrue(installedFolder.exists());
    File installedCompFile=new File(installedFolder,testDataFile.getName());
    Assert.assertTrue(installedCompFile.exists());
    Assert.assertFalse(target.exists());
    Assert.assertEquals(testDataFile.getName(),installedCompFile.getName());
    final long originalChecksumAlder32=FilesUtils.getChecksumAlder32(testDataFile);
    final long checksumAlder32=FilesUtils.getChecksumAlder32(installedCompFile);
    Assert.assertEquals(originalChecksumAlder32,checksumAlder32);
    Bundle bundle=Platform.getBundle(index.getBundleId());
    Assert.assertNotNull(""String_Node_Str"",bundle);
  }
  finally {
    Bundle bundle=Platform.getBundle(index.getBundleId());
    if (bundle != null) {
      if (bundle.getState() == Bundle.ACTIVE) {
        bundle.stop();
      }
      bundle.uninstall();
    }
  }
}",0.8917148362235068
125332,"@Override protected void addFields(){
  Group group=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),100);
  Composite compositeFileLocation=Form.startNewDimensionnedGridLayout(group,3,WIDTH_GRIDDATA_PIXEL,100);
  GridData gridDataFileLocation=new GridData(GridData.FILL_HORIZONTAL);
  gridDataFileLocation.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  group.setLayoutData(gridDataFileLocation);
  String[] xmlExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  fileFieldXml=new LabelledFileField(compositeFileLocation,Messages.getString(""String_Node_Str""),xmlExtensions);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileLocation,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,1,true,SWT.NONE);
  Composite limitation=new Composite(compositeFileLocation,SWT.NONE);
  limitation.setLayout(new GridLayout(2,false));
  Label labelLimitation=new Label(limitation,SWT.LEFT);
  labelLimitation.setText(Messages.getString(""String_Node_Str""));
  final Text commonNodesLimitation=new Text(limitation,SWT.BORDER);
  GridData gd=new GridData(18,12);
  commonNodesLimitation.setLayoutData(gd);
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
  labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),commonNodesLimitation.getText()));
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
        labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),commonNodesLimitation.getText()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
        labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),str));
      }
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
        valid=treePopulator.populateTree(tempXmlXsdPath,treeNode);
      }
 else {
        valid=treePopulator.populateTree(fileFieldXml.getText(),treeNode);
      }
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
      labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),commonNodesLimitation.getText()));
    }
  }
);
  group=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),220);
  Composite compositeFileViewer=Form.startNewDimensionnedGridLayout(group,1,WIDTH_GRIDDATA_PIXEL,220);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  availableXmlTree=new Tree(compositeFileViewer,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.VIRTUAL);
  availableXmlTree.setLayoutData(gridData);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
  addUtilsButtonListeners();
}","@Override protected void addFields(){
  Group group=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),100);
  Composite compositeFileLocation=Form.startNewDimensionnedGridLayout(group,3,WIDTH_GRIDDATA_PIXEL,100);
  GridData gridDataFileLocation=new GridData(GridData.FILL_HORIZONTAL);
  gridDataFileLocation.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  group.setLayoutData(gridDataFileLocation);
  String[] xmlExtensions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  fileFieldXml=new LabelledFileField(compositeFileLocation,Messages.getString(""String_Node_Str""),xmlExtensions);
  EMetadataEncoding[] values=EMetadataEncoding.values();
  String[] encodingData=new String[values.length];
  for (int j=0; j < values.length; j++) {
    encodingData[j]=values[j].getName();
  }
  encodingCombo=new LabelledCombo(compositeFileLocation,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),encodingData,1,true,SWT.NONE);
  Composite limitation=new Composite(compositeFileLocation,SWT.NONE);
  limitation.setLayout(new GridLayout(2,false));
  Label labelLimitation=new Label(limitation,SWT.LEFT);
  labelLimitation.setText(Messages.getString(""String_Node_Str""));
  final Text commonNodesLimitation=new Text(limitation,SWT.BORDER);
  GridData gd=new GridData(GridData.VERTICAL_ALIGN_FILL);
  gd.widthHint=18;
  commonNodesLimitation.setLayoutData(gd);
  commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
  labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),commonNodesLimitation.getText()));
  commonNodesLimitation.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      String str=commonNodesLimitation.getText();
      if ((!str.matches(""String_Node_Str"")) || (Integer.valueOf(str) < 0)) {
        commonNodesLimitation.setText(String.valueOf(treePopulator.getLimit()));
        labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),commonNodesLimitation.getText()));
      }
 else {
        treePopulator.setLimit(Integer.valueOf(str));
        labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),str));
      }
      if (tempXmlXsdPath != null && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
        valid=treePopulator.populateTree(tempXmlXsdPath,treeNode);
      }
 else {
        valid=treePopulator.populateTree(fileFieldXml.getText(),treeNode);
      }
      checkFieldsValue();
    }
  }
);
  commonNodesLimitation.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      commonNodesLimitation.setText(String.valueOf(TreePopulator.getLimit()));
      labelLimitation.setToolTipText(MessageFormat.format(Messages.getString(""String_Node_Str""),commonNodesLimitation.getText()));
    }
  }
);
  group=Form.createGroup(this,1,Messages.getString(""String_Node_Str""),220);
  Composite compositeFileViewer=Form.startNewDimensionnedGridLayout(group,1,WIDTH_GRIDDATA_PIXEL,220);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.minimumWidth=WIDTH_GRIDDATA_PIXEL;
  availableXmlTree=new Tree(compositeFileViewer,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.VIRTUAL);
  availableXmlTree.setLayoutData(gridData);
  if (!isInWizard()) {
    Composite compositeBottomButton=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
    cancelButton=new UtilsButton(compositeBottomButton,Messages.getString(""String_Node_Str""),WIDTH_BUTTON_PIXEL,HEIGHT_BUTTON_PIXEL);
  }
  addUtilsButtonListeners();
}",0.9931637954607602
125333,"/** 
 * Iterates over a folder files (not recursive) and delete those for which the filename matches the condition given in the   {@link Function}
 * @param folder the folder in which to delete the files
 * @param func a {@link Function} that will be used to filter on the files to delete, according to their name
 */
public static void deleteFiles(File folder,Function<String,Boolean> func){
  if (folder != null && func != null) {
    if (folder.exists()) {
      FilenameFilter filter=new FilenameFilter(){
        @Override public boolean accept(        File _dir,        String name){
          return func.apply(name);
        }
      }
;
      List<File> filesToRemove=getAllFilesFromFolder(folder,filter);
      for (      File fileToRemove : filesToRemove) {
        fileToRemove.delete();
      }
    }
  }
}","/** 
 * Iterates over a folder files (not recursive) and delete those for which the filename matches the condition given in the   {@link Function}
 * @param folder the folder in which to delete the files
 * @param func a {@link Function} that will be used to filter on the files to delete, according to their name
 */
public static void deleteFiles(final File folder,final Function<String,Boolean> func){
  if (folder != null && func != null) {
    if (folder.exists()) {
      FilenameFilter filter=new FilenameFilter(){
        @Override public boolean accept(        File _dir,        String name){
          return func.apply(name);
        }
      }
;
      List<File> filesToRemove=getAllFilesFromFolder(folder,filter);
      for (      File fileToRemove : filesToRemove) {
        fileToRemove.delete();
      }
    }
  }
}",0.9927184466019418
125334,"@Override public boolean isRelation(IEditorInput editorInput,String repoNodeId){
  RepositoryNode relationNode=getRelationNode(editorInput);
  if (relationNode != null && repoNodeId != null && repoNodeId.equals(relationNode.getId())) {
    return true;
  }
  return false;
}","@Override public boolean isRelation(IEditorInput editorInput,String repoNodeId,String version){
  RepositoryNode relationNode=getRelationNode(editorInput);
  boolean isRelation=false;
  if (relationNode != null && repoNodeId != null && repoNodeId.equals(relationNode.getId())) {
    isRelation=true;
    if (version != null && relationNode.getObject() != null) {
      isRelation=isRelation && version.equals(relationNode.getObject().getVersion());
    }
  }
  return isRelation;
}",0.6728476821192053
125335,"@Override public boolean isRelation(IEditorInput editorInput,String repoNodeId){
  if (repoNodeId != null && isValidEditorInput(editorInput)) {
    Item item=((IRepositoryEditorInput)editorInput).getItem();
    if (item != null) {
      return repoNodeId.equals(item.getProperty().getId());
    }
  }
  return false;
}","@Override public boolean isRelation(IEditorInput editorInput,String repoNodeId,String version){
  boolean isRelation=false;
  if (repoNodeId != null && isValidEditorInput(editorInput)) {
    Item item=((IRepositoryEditorInput)editorInput).getItem();
    if (item != null) {
      isRelation=repoNodeId.equals(item.getProperty().getId());
      if (version != null) {
        isRelation=isRelation && version.equals(item.getProperty().getVersion());
      }
    }
  }
  return isRelation;
}",0.7410161090458488
125336,"boolean isRelation(IEditorInput editorInput,String repoNodeId);","boolean isRelation(IEditorInput editorInput,String repoNodeId,String version);",0.8936170212765957
125337,public void reloadJobletProcess(INode node);,"public void reloadJobletProcess(INode node,boolean forceReload);",0.8148148148148148
125338,"public boolean performFinish(){
  final List<ImportItem> checkedItemRecords=getCheckedElements();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  ImportItem itemRecord : checkedItemRecords) {
    Item item=itemRecord.getProperty().getItem();
    if (item.getState().isLocked()) {
      try {
        factory.unlock(item);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
catch (      LoginException e) {
        ExceptionHandler.process(e);
      }
    }
    ERepositoryStatus status=factory.getStatus(item);
    if (status != null && status == ERepositoryStatus.LOCK_BY_USER) {
      try {
        factory.unlock(item);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
catch (      LoginException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  final boolean overwrite=overwriteButton.getSelection();
  try {
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IPath destinationPath=null;
        Object firstElement=getSelection().getFirstElement();
        if (firstElement != null && firstElement instanceof RepositoryNode) {
          final RepositoryNode rNode=(RepositoryNode)firstElement;
          if (rNode.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
            destinationPath=RepositoryNodeUtilities.getPath(rNode);
            ERepositoryObjectType contentType=rNode.getContentType();
            if (contentType.isResouce()) {
              IPath typePath=new Path(contentType.getFolder());
              if (!typePath.isPrefixOf(destinationPath)) {
                destinationPath=typePath.append(destinationPath);
              }
            }
          }
        }
        importManager.importItemRecords(monitor,resManager,checkedItemRecords,overwrite,nodesBuilder.getAllImportItemRecords(),destinationPath);
      }
    }
;
    new ProgressMonitorDialog(getShell()).run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (resManager != null) {
      resManager.closeResource();
    }
    final List<String> errors=new ArrayList<String>();
    for (    ImportItem itemRecord : checkedItemRecords) {
      errors.addAll(itemRecord.getErrors());
    }
    errors.addAll(ImportCacheHelper.getInstance().getImportErrors());
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        if (!errors.isEmpty()) {
          ShowErrorsDuringImportItemsDialog dialog=new ShowErrorsDuringImportItemsDialog(Display.getCurrent().getActiveShell(),errors);
          dialog.open();
          ImportCacheHelper.getInstance().getImportErrors().clear();
        }
      }
    }
);
    checkedItemRecords.clear();
    nodesBuilder.clear();
  }
  return true;
}","public boolean performFinish(){
  final List<ImportItem> checkedItemRecords=getCheckedElements();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  ImportItem itemRecord : checkedItemRecords) {
    Item item=itemRecord.getProperty().getItem();
    if (item.getState().isLocked()) {
      try {
        factory.unlock(item);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
catch (      LoginException e) {
        ExceptionHandler.process(e);
      }
    }
    ERepositoryStatus status=factory.getStatus(item);
    if (status != null && status == ERepositoryStatus.LOCK_BY_USER) {
      try {
        factory.unlock(item);
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
catch (      LoginException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  final boolean overwrite=overwriteButton.getSelection();
  try {
    IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        IPath destinationPath=null;
        Object firstElement=getSelection().getFirstElement();
        if (firstElement != null && firstElement instanceof RepositoryNode) {
          final RepositoryNode rNode=(RepositoryNode)firstElement;
          if (rNode.getType() == IRepositoryNode.ENodeType.SIMPLE_FOLDER) {
            destinationPath=RepositoryNodeUtilities.getPath(rNode);
            ERepositoryObjectType contentType=rNode.getContentType();
            if (contentType.isResouce()) {
              IPath typePath=new Path(contentType.getFolder());
              if (!typePath.isPrefixOf(destinationPath)) {
                destinationPath=typePath.append(destinationPath);
              }
            }
          }
        }
        importManager.importItemRecords(monitor,resManager,checkedItemRecords,overwrite,nodesBuilder.getAllImportItemRecords(),destinationPath);
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            IWorkbenchWindow activeWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
            if (activeWorkbenchWindow != null && activeWorkbenchWindow.getActivePage() != null) {
              IEditorPart activeEditor=activeWorkbenchWindow.getActivePage().getActiveEditor();
              if (activeEditor instanceof IMultiPageTalendEditor) {
                IMultiPageTalendEditor multiPageTEditor=(IMultiPageTalendEditor)activeEditor;
                multiPageTEditor.changePaletteComponentHandler();
                ComponentPaletteUtilities.updateFromRepositoryType(ERepositoryObjectType.getItemType(((IMultiPageTalendEditor)activeEditor).getProcess().getProperty().getItem()));
              }
            }
          }
        }
);
      }
    }
;
    new ProgressMonitorDialog(getShell()).run(true,true,iRunnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    if (resManager != null) {
      resManager.closeResource();
    }
    final List<String> errors=new ArrayList<String>();
    for (    ImportItem itemRecord : checkedItemRecords) {
      errors.addAll(itemRecord.getErrors());
    }
    errors.addAll(ImportCacheHelper.getInstance().getImportErrors());
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        if (!errors.isEmpty()) {
          ShowErrorsDuringImportItemsDialog dialog=new ShowErrorsDuringImportItemsDialog(Display.getCurrent().getActiveShell(),errors);
          dialog.open();
          ImportCacheHelper.getInstance().getImportErrors().clear();
        }
      }
    }
);
    checkedItemRecords.clear();
    nodesBuilder.clear();
  }
  return true;
}",0.7129179555162763
125339,"@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          try {
            if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
              IRepositoryViewObject object=itemRecord.getExistingItemWithSameName();
              if (object != null) {
                if (ProjectManager.getInstance().isInCurrentMainProject(object.getProperty())) {
                  id=object.getId();
                }
              }
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e,Priority.WARN);
          }
          if (id == null) {
            id=EcoreUtil.generateUUID();
          }
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        String oldId=itemRecord.getProperty().getId();
        itemRecord.getProperty().setId(id);
        try {
          changeIdManager.mapOldId2NewId(oldId,id);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      service.loadComponentsFromProviders();
    }
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  ImportCacheHelper.getInstance().checkDeletedItems();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      if (Platform.inDebugMode()) {
        ExceptionHandler.process(e);
      }
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  if (!checkedFolders.isEmpty()) {
    for (    EmptyFolderImportItem folder : checkedFolders) {
      boolean exist=false;
      ERepositoryObjectType repositoryType=folder.getRepositoryType();
      IPath path=folder.getPath();
      if (destinationPath != null) {
        IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
        path=desPath.append(folder.getPath());
      }
      String label=folder.getLabel();
      FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
      if (getFolderItem != null) {
        for (        Object obj : getFolderItem.getChildren()) {
          if (obj instanceof FolderItem) {
            FolderItem existFolder=(FolderItem)obj;
            if (label.equals(existFolder.getProperty().getLabel())) {
              exist=true;
              break;
            }
          }
        }
      }
      if (!exist) {
        try {
          factory.createFolder(repositoryType,path,label);
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
  try {
    changeIdManager.changeIds();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  unloadImportItems(allImportItemRecords);
}","@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          try {
            if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
              IRepositoryViewObject object=itemRecord.getExistingItemWithSameName();
              if (object != null) {
                if (ProjectManager.getInstance().isInCurrentMainProject(object.getProperty())) {
                  id=object.getId();
                }
              }
            }
          }
 catch (          Exception e) {
            ExceptionHandler.process(e,Priority.WARN);
          }
          if (id == null) {
            id=EcoreUtil.generateUUID();
          }
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        String oldId=itemRecord.getProperty().getId();
        itemRecord.getProperty().setId(id);
        try {
          changeIdManager.mapOldId2NewId(oldId,id);
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  ImportCacheHelper.getInstance().checkDeletedItems();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      if (Platform.inDebugMode()) {
        ExceptionHandler.process(e);
      }
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  if (!checkedFolders.isEmpty()) {
    for (    EmptyFolderImportItem folder : checkedFolders) {
      boolean exist=false;
      ERepositoryObjectType repositoryType=folder.getRepositoryType();
      IPath path=folder.getPath();
      if (destinationPath != null) {
        IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
        path=desPath.append(folder.getPath());
      }
      String label=folder.getLabel();
      FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
      if (getFolderItem != null) {
        for (        Object obj : getFolderItem.getChildren()) {
          if (obj instanceof FolderItem) {
            FolderItem existFolder=(FolderItem)obj;
            if (label.equals(existFolder.getProperty().getLabel())) {
              exist=true;
              break;
            }
          }
        }
      }
      if (!exist) {
        try {
          factory.createFolder(repositoryType,path,label);
        }
 catch (        PersistenceException e) {
          ExceptionHandler.process(e);
        }
      }
    }
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
  try {
    changeIdManager.changeIds();
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  unloadImportItems(allImportItemRecords);
}",0.9725457570715474
125340,"private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  boolean hasJoblet=false;
  boolean reloadJoblet=false;
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      continue;
    }
    if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
      hasJoblet=true;
    }
    if (hasJoblet) {
      if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
        reloadJoblet=true;
        if (PluginChecker.isJobLetPluginLoaded()) {
          IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          if (jobletService != null) {
            jobletService.loadComponentsFromProviders();
          }
        }
      }
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
  if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
}","private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  boolean hasJoblet=false;
  boolean jobletReloaded=false;
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      continue;
    }
    if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
      hasJoblet=true;
    }
    if (hasJoblet && !jobletReloaded) {
      if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
        jobletReloaded=true;
        if (PluginChecker.isJobLetPluginLoaded()) {
          IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          if (jobletService != null) {
            jobletService.loadComponentsFromProviders();
          }
        }
      }
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
  if (hasJoblet && !jobletReloaded && PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
}",0.9899745623223104
125341,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  changeIdManager.clear();
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
 else {
      changeIdManager.add(importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty() && checkedFolders.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    try {
                      if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                        IRepositoryViewObject object=itemRecord.getExistingItemWithSameName();
                        if (object != null) {
                          if (ProjectManager.getInstance().isInCurrentMainProject(object.getProperty())) {
                            id=object.getId();
                          }
                        }
                      }
                    }
 catch (                    Exception e) {
                      ExceptionHandler.process(e,Priority.WARN);
                    }
                    if (id == null) {
                      id=EcoreUtil.generateUUID();
                    }
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  String oldId=itemRecord.getProperty().getId();
                  itemRecord.getProperty().setId(id);
                  try {
                    changeIdManager.mapOldId2NewId(oldId,id);
                  }
 catch (                  Exception e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
            try {
              changeIdManager.changeIds();
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            unloadImportItems(allImportItemRecords);
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  changeIdManager.clear();
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
 else {
      changeIdManager.add(importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty() && checkedFolders.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    try {
                      if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                        IRepositoryViewObject object=itemRecord.getExistingItemWithSameName();
                        if (object != null) {
                          if (ProjectManager.getInstance().isInCurrentMainProject(object.getProperty())) {
                            id=object.getId();
                          }
                        }
                      }
                    }
 catch (                    Exception e) {
                      ExceptionHandler.process(e,Priority.WARN);
                    }
                    if (id == null) {
                      id=EcoreUtil.generateUUID();
                    }
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  String oldId=itemRecord.getProperty().getId();
                  itemRecord.getProperty().setId(id);
                  try {
                    changeIdManager.mapOldId2NewId(oldId,id);
                  }
 catch (                  Exception e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
            try {
              changeIdManager.changeIds();
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            unloadImportItems(allImportItemRecords);
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean jobletReloaded=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
                hasJoblet=true;
              }
              if (hasJoblet && !jobletReloaded) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
                  jobletReloaded=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !jobletReloaded && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9853409815168898
125342,"@Override public void activateEditor(IWorkbenchPage aPage,IStructuredSelection aSelection){
  Object firstElement=aSelection.getFirstElement();
  if (firstElement == null || !(firstElement instanceof RepositoryNode)) {
    return;
  }
  RepositoryNode repNode=(RepositoryNode)firstElement;
  IRepositoryViewObject object=repNode.getObject();
  if (object == null) {
    return;
  }
  final String repId=object.getId();
  if (repId == null) {
    return;
  }
  IEditorReference[] editorReferences=aPage.getEditorReferences();
  if (editorReferences == null) {
    return;
  }
  for (  IEditorReference er : editorReferences) {
    try {
      IEditorInput editorInput=er.getEditorInput();
      if (isRelation(editorInput,repId)) {
        IEditorPart editor=null;
        if ((editor=aPage.findEditor(editorInput)) != null) {
          aPage.bringToTop(editor);
        }
        break;
      }
    }
 catch (    PartInitException e) {
      ExceptionHandler.process(e);
    }
  }
}","@Override public void activateEditor(IWorkbenchPage aPage,IStructuredSelection aSelection){
  Object firstElement=aSelection.getFirstElement();
  if (firstElement == null || !(firstElement instanceof RepositoryNode)) {
    return;
  }
  RepositoryNode repNode=(RepositoryNode)firstElement;
  IRepositoryViewObject object=repNode.getObject();
  if (object == null) {
    return;
  }
  final String repId=object.getId();
  final String version=object.getVersion();
  if (repId == null || version == null) {
    return;
  }
  IEditorReference[] editorReferences=aPage.getEditorReferences();
  if (editorReferences == null) {
    return;
  }
  for (  IEditorReference er : editorReferences) {
    try {
      IEditorInput editorInput=er.getEditorInput();
      if (isRelation(editorInput,repId,version)) {
        IEditorPart editor=null;
        if ((editor=aPage.findEditor(editorInput)) != null) {
          aPage.bringToTop(editor);
        }
        break;
      }
    }
 catch (    PartInitException e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9562653562653562
125343,"protected boolean isRelation(IEditorInput editorInput,String repoNodeId){
  IRepoViewLinker[] allRepoViewLinkers=getRepoViewLinkerReader().getAllRepoViewLinkers();
  for (  IRepoViewLinker linker : allRepoViewLinkers) {
    if (linker.isRelation(editorInput,repoNodeId)) {
      return true;
    }
  }
  return false;
}","protected boolean isRelation(IEditorInput editorInput,String repoNodeId,String version){
  IRepoViewLinker[] allRepoViewLinkers=getRepoViewLinkerReader().getAllRepoViewLinkers();
  for (  IRepoViewLinker linker : allRepoViewLinkers) {
    if (linker.isRelation(editorInput,repoNodeId,version)) {
      return true;
    }
  }
  return false;
}",0.9652042360060514
125344,"protected TdTable mockTable4ReturnColumns4reCreateConnection() throws Exception {
  TdTable tdTable=mock(TdTable.class);
  when(tdTable.getName()).thenReturn(""String_Node_Str"");
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource resource=resourceSet.createResource(URI.createFileURI(""String_Node_Str""));
  if (resource != null) {
    resource.getContents().add(tdTable);
  }
  return tdTable;
}","protected TdTable mockTable4ReturnColumns4reCreateConnection() throws Exception {
  TdTable tdTable=mock(TdTable.class);
  when(tdTable.getName()).thenReturn(""String_Node_Str"");
  ResourceSet resourceSet=new ResourceSetImpl();
  Resource resource=resourceSet.createResource(URI.createFileURI(""String_Node_Str""));
  if (resource != null) {
    resource.getContents().add(tdTable);
  }
  when(tdTable.getFeature()).thenReturn(new BasicEList<Feature>());
  return tdTable;
}",0.9221967963386728
125345,"@Test(expected=FileNotFoundException.class) public void test_downloadFile_siteFile_notExisted() throws Exception {
  try {
    RemoteComponentsTransportTestClass transport=new RemoteComponentsTransportTestClass(tmpFolder);
    final URI uri=URI.create(""String_Node_Str"");
    transport.downloadFile(null,uri,""String_Node_Str"");
  }
 catch (  UnknownHostException e) {
  }
}","@Test public void test_downloadFile_siteFile_notExisted() throws Exception {
  try {
    RemoteComponentsTransportTestClass transport=new RemoteComponentsTransportTestClass(tmpFolder);
    final URI uri=URI.create(""String_Node_Str"");
    transport.downloadFile(null,uri,""String_Node_Str"");
    Assert.assertTrue(""String_Node_Str"",false);
  }
 catch (  UnknownHostException e) {
  }
catch (  FileNotFoundException e) {
    Assert.assertTrue(""String_Node_Str"",true);
  }
}",0.7947805456702254
125346,"protected void evaluateName(String name){
  if (name == null || name.length() == 0 || StringUtils.trimToNull(name) == null) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"") || !Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),name)|| name.trim().contains(""String_Node_Str"")|| name.trim().contains(""String_Node_Str"")|| name.trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(name)) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (getProperty() != null && nameStatus.getSeverity() == IStatus.OK) {
    getProperty().setLabel(getPropertyLabel(StringUtils.trimToNull(name)));
    getProperty().setDisplayName(StringUtils.trimToNull(name));
    getProperty().setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateName(String name){
  if (name == null || name.length() == 0 || StringUtils.trimToNull(name) == null) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"") || !Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),name)|| name.trim().contains(""String_Node_Str"")|| name.trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(name)) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (getProperty() != null && nameStatus.getSeverity() == IStatus.OK) {
    getProperty().setLabel(getPropertyLabel(StringUtils.trimToNull(name)));
    getProperty().setDisplayName(StringUtils.trimToNull(name));
    getProperty().setModificationDate(new Date());
  }
  updatePageStatus();
}",0.9867591424968474
125347,"/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(DiSchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(DiSchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (DiSchemaConstants.TALEND6_IS_READ_ONLY.equals(additionalTag)) {
      builder.prop(DiSchemaConstants.TALEND6_IS_READ_ONLY,tv.getValue());
    }
 else     if (tv.getValue() != null) {
      builder.prop(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}","/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(DiSchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(DiSchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (DiSchemaConstants.TALEND6_IS_READ_ONLY.equals(additionalTag)) {
      builder.prop(DiSchemaConstants.TALEND6_IS_READ_ONLY,tv.getValue());
    }
 else     if (tv.getValue() != null) {
      builder.prop(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getSourceType() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}",0.9989161849710982
125348,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroUtils.isSameType(nonnullable,AvroUtils._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_NO_LOGICAL_TYPE,""String_Node_Str"");
    col.getTaggedValue().add(tv);
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._int())) {
    if (LogicalTypes.fromSchemaIgnoreInvalid(nonnullable) == LogicalTypes.date()) {
      col.setTalendType(JavaTypesManager.DATE.getId());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_DATE,""String_Node_Str"");
      col.getTaggedValue().add(tv);
    }
 else {
      col.setTalendType(JavaTypesManager.INTEGER.getId());
    }
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._long())) {
    if (LogicalTypes.fromSchemaIgnoreInvalid(nonnullable) == LogicalTypes.timestampMillis()) {
      col.setTalendType(JavaTypesManager.DATE.getId());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_TIMESTAMP,""String_Node_Str"");
      col.getTaggedValue().add(tv);
    }
 else {
      col.setTalendType(JavaTypesManager.LONG.getId());
    }
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
 else   if (nonnullable.getProp(SchemaConstants.JAVA_CLASS_FLAG) != null) {
    col.setTalendType(JavaTypesManager.OBJECT.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_CUSTOM))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_CUSTOM,prop);
    col.getTaggedValue().add(tv);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value >= 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value >= 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value >= 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SCALE))) {
    Long value=Long.parseLong(prop);
    col.setScale(value >= 0 ? value : -1);
  }
 else {
    col.setScale(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  LogicalType logicalType=LogicalTypes.fromSchemaIgnoreInvalid(nonnullable);
  if (AvroUtils.isSameType(nonnullable,AvroUtils._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_NO_LOGICAL_TYPE,""String_Node_Str"");
    col.getTaggedValue().add(tv);
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._int())) {
    if (logicalType == LogicalTypes.date()) {
      col.setTalendType(JavaTypesManager.DATE.getId());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_DATE,""String_Node_Str"");
      col.getTaggedValue().add(tv);
    }
 else {
      col.setTalendType(JavaTypesManager.INTEGER.getId());
    }
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._long())) {
    if (logicalType == LogicalTypes.timestampMillis()) {
      col.setTalendType(JavaTypesManager.DATE.getId());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_TIMESTAMP,""String_Node_Str"");
      col.getTaggedValue().add(tv);
    }
 else {
      col.setTalendType(JavaTypesManager.LONG.getId());
    }
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
 else   if (nonnullable.getProp(SchemaConstants.JAVA_CLASS_FLAG) != null) {
    col.setTalendType(JavaTypesManager.OBJECT.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_CUSTOM))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_CUSTOM,prop);
    col.getTaggedValue().add(tv);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value >= 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value >= 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value >= 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SCALE))) {
    Long value=Long.parseLong(prop);
    col.setScale(value >= 0 ? value : -1);
  }
 else {
    col.setScale(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (logicalType != null) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_LOGICAL_TYPE,logicalType.getName());
    col.getTaggedValue().add(tv);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}",0.970161847050702
125349,"/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  Object defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  Schema type=null;
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    type=AvroUtils._long();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Long.parseLong(defaultValue.toString());
  }
 else   if (JavaTypesManager.INTEGER.getId().equals(tt)) {
    type=AvroUtils._int();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.SHORT.getId().equals(tt)) {
    type=AvroUtils._short();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE.getId().equals(tt)) {
    type=AvroUtils._byte();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    type=AvroUtils._double();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Double.parseDouble(defaultValue.toString());
  }
 else   if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    type=AvroUtils._float();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Float.parseFloat(defaultValue.toString());
  }
 else   if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    type=AvroUtils._decimal();
  }
 else   if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    type=AvroUtils._boolean();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Boolean.parseBoolean(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    type=AvroUtils._bytes();
  }
 else   if (JavaTypesManager.DATE.getId().equals(tt)) {
    if (matchTag(in,DiSchemaConstants.TALEND6_COLUMN_DATE_DATE)) {
      type=AvroUtils._logicalDate();
    }
 else     if (matchTag(in,DiSchemaConstants.TALEND6_COLUMN_DATE_TIMESTAMP)) {
      type=AvroUtils._logicalTimestamp();
    }
 else {
      type=AvroUtils._date();
    }
  }
 else   if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (""String_Node_Str"".equals(tt) || JavaTypesManager.OBJECT.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
  }
  if (type == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + tt);
  }
  type=in.isNullable() ? AvroUtils.wrapAsNullable(type) : type;
  return defaultValue == null ? fb.type(type).noDefault() : fb.type(type).withDefault(defaultValue);
}","/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  Object defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  Schema type=null;
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    type=AvroUtils._long();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Long.parseLong(defaultValue.toString());
  }
 else   if (JavaTypesManager.INTEGER.getId().equals(tt)) {
    type=AvroUtils._int();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.SHORT.getId().equals(tt)) {
    type=AvroUtils._short();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE.getId().equals(tt)) {
    type=AvroUtils._byte();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    type=AvroUtils._double();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Double.parseDouble(defaultValue.toString());
  }
 else   if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    type=AvroUtils._float();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Float.parseFloat(defaultValue.toString());
  }
 else   if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    type=AvroUtils._decimal();
  }
 else   if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    type=AvroUtils._boolean();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Boolean.parseBoolean(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    type=AvroUtils._bytes();
  }
 else   if (JavaTypesManager.DATE.getId().equals(tt)) {
    if (matchTag(in,DiSchemaConstants.TALEND6_COLUMN_DATE_DATE)) {
      type=AvroUtils._logicalDate();
    }
 else     if (matchTag(in,DiSchemaConstants.TALEND6_COLUMN_DATE_TIMESTAMP)) {
      type=AvroUtils._logicalTimestamp();
    }
 else {
      type=AvroUtils._date();
    }
  }
 else   if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (""String_Node_Str"".equals(tt) || JavaTypesManager.OBJECT.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
  }
  Schema logicalTypeSchema=getLogicalTypeSchema(in);
  if (logicalTypeSchema != null) {
    type=logicalTypeSchema;
  }
  if (type == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + tt);
  }
  type=in.isNullable() ? AvroUtils.wrapAsNullable(type) : type;
  return defaultValue == null ? fb.type(type).noDefault() : fb.type(type).withDefault(defaultValue);
}",0.9817351598173516
125350,"private static Schema copyDynamicColumnProperties(Schema schema,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  Map<String,String> props=new HashMap<String,String>();
  if (in.getId() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_COLUMN_ID,in.getId());
  }
  if (in.getComment() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_COLUMN_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME,in.getLabel());
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    if (DiSchemaConstants.TALEND6_IS_READ_ONLY.equals(tv.getTag())) {
      schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_IS_READ_ONLY,tv.getValue());
    }
 else {
      String additionalTag=tv.getTag();
      if (tv.getValue() != null) {
        schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
      }
    }
  }
  if (in.isKey()) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getScale() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_SCALE,String.valueOf(in.getScale()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return schema;
}","private static Schema copyDynamicColumnProperties(Schema schema,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  Map<String,String> props=new HashMap<String,String>();
  if (in.getId() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_COLUMN_ID,in.getId());
  }
  if (in.getComment() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_COLUMN_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME,in.getLabel());
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    if (DiSchemaConstants.TALEND6_IS_READ_ONLY.equals(tv.getTag())) {
      schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_IS_READ_ONLY,tv.getValue());
    }
 else {
      String additionalTag=tv.getTag();
      if (tv.getValue() != null) {
        schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_DYNAMIC_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
      }
    }
  }
  if (in.isKey()) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getSourceType() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getScale() >= 0) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_SCALE,String.valueOf(in.getScale()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    schema=AvroUtils.setProperty(schema,DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return schema;
}",0.9990278677900194
125351,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      this.repositoryFactoryFromProvider.beforeLogon(project);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,true,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getLogonRecords().clear();
      this.repositoryFactoryFromProvider.logOnProject(project);
      ProjectManager.getInstance().getLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,false,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        String specifiedVersion=null;
        String currentVersion=JavaUtils.getProjectJavaVersion();
        String newVersion=null;
        if (CommonUIPlugin.isFullyHeadless()) {
          specifiedVersion=JavaHomeUtil.getSpecifiedJavaVersion();
        }
        if (specifiedVersion == null) {
          newVersion=currentVersion != null ? currentVersion : JavaUtils.DEFAULT_VERSION;
        }
 else {
          newVersion=specifiedVersion;
        }
        JavaUtils.updateProjectJavaVersion(newVersion);
        coreService.deleteAllJobs(false);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        if (CommonsPlugin.isHeadless()) {
          deleteAllRoutinesAndBeans();
        }
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null) {
        coreService.syncLog4jSettings();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (CommonUIPlugin.isFullyHeadless()) {
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        coreService.syncLibraries(currentMonitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.createStatsLogAndImplicitParamter(project);
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.synchronizeMapptingXML();
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon(monitor);
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      this.repositoryFactoryFromProvider.beforeLogon(project);
      ProjectManager.getInstance().getBeforeLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,true,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getLogonRecords().clear();
      this.repositoryFactoryFromProvider.logOnProject(project);
      ProjectManager.getInstance().getLogonRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ProjectManager.getInstance().getMigrationRecords().clear();
      executeMigrations(project,false,currentMonitor);
      ProjectManager.getInstance().getMigrationRecords().clear();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        String specifiedVersion=null;
        String currentVersion=JavaUtils.getProjectJavaVersion(true);
        String newVersion=null;
        if (CommonUIPlugin.isFullyHeadless()) {
          specifiedVersion=JavaHomeUtil.getSpecifiedJavaVersion();
        }
        if (specifiedVersion == null) {
          newVersion=currentVersion != null ? currentVersion : JavaUtils.DEFAULT_VERSION;
        }
 else {
          newVersion=specifiedVersion;
        }
        JavaUtils.updateProjectJavaVersion(newVersion);
        coreService.deleteAllJobs(false);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        if (CommonsPlugin.isHeadless()) {
          deleteAllRoutinesAndBeans();
        }
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null) {
        coreService.syncLog4jSettings();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (CommonUIPlugin.isFullyHeadless()) {
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        coreService.syncLibraries(currentMonitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.createStatsLogAndImplicitParamter(project);
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.synchronizeMapptingXML();
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon(monitor);
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.9997367728349564
125352,"public static String getProjectJavaVersion(){
  String javaVersion=CoreRuntimePlugin.getInstance().getProjectPreferenceManager().getValue(PROJECT_JAVA_VERSION_KEY);
  if (javaVersion != null && javaVersion.trim().equals(""String_Node_Str"")) {
    javaVersion=null;
  }
  return javaVersion;
}","public static String getProjectJavaVersion(boolean reload){
  String javaVersion=CoreRuntimePlugin.getInstance().getProjectPreferenceManager(reload).getValue(PROJECT_JAVA_VERSION_KEY);
  if (javaVersion != null && javaVersion.trim().equals(""String_Node_Str"")) {
    javaVersion=null;
  }
  return javaVersion;
}",0.9667774086378738
125353,"public ProjectPreferenceManager getProjectPreferenceManager(){
  if (projectPreferenceManager == null) {
    projectPreferenceManager=new ProjectPreferenceManager(PLUGIN_ID);
  }
  return projectPreferenceManager;
}","public ProjectPreferenceManager getProjectPreferenceManager(boolean reload){
  if (projectPreferenceManager == null || reload) {
    projectPreferenceManager=new ProjectPreferenceManager(PLUGIN_ID);
  }
  return projectPreferenceManager;
}",0.947136563876652
125354,"public void downloadFile(IProgressMonitor monitor,MavenArtifact artifact,File target) throws Exception {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  if (artifact == null) {
    return;
  }
  final String reletivePath=PomUtil.getArtifactPath(artifact);
  if (reletivePath == null) {
    return;
  }
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  boolean success=false;
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  HttpURLConnection httpURLConnection=null;
  try {
    if (StringUtils.isNotEmpty(nexusUser)) {
      Authenticator.setDefault(new Authenticator(){
        @Override protected PasswordAuthentication getPasswordAuthentication(){
          return new PasswordAuthentication(nexusUser,nexusPass);
        }
      }
);
    }
    httpURLConnection=NexusServerUtils.getHttpURLConnection(nexusURL,reletivePath,nexusUser,new String(nexusPass));
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    InputStream inputStream=httpURLConnection.getInputStream();
    bis=new BufferedInputStream(inputStream);
    bos=new BufferedOutputStream(new FileOutputStream(target));
    byte[] buf=new byte[BUFFER_SIZE];
    int bytesRead=-1;
    while ((bytesRead=bis.read(buf)) != -1) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      bos.write(buf,0,bytesRead);
    }
    bos.flush();
    success=true;
  }
  finally {
    if (bis != null) {
      try {
        bis.close();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (bos != null) {
      try {
        bos.close();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (httpURLConnection != null) {
      httpURLConnection.disconnect();
    }
    if (!success && target.exists() && target.isFile()) {
      target.delete();
    }
    Authenticator.setDefault(defaultAuthenticator);
  }
}","public void downloadFile(IProgressMonitor monitor,MavenArtifact artifact,File target) throws Exception {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  if (artifact == null) {
    return;
  }
  final String reletivePath=PomUtil.getArtifactPath(artifact);
  if (reletivePath == null) {
    return;
  }
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  boolean success=false;
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  HttpURLConnection httpURLConnection=null;
  try {
    setAuthenticator();
    httpURLConnection=NexusServerUtils.getHttpURLConnection(getNexusURL(),reletivePath,getNexusUser(),getNexusPassStr());
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    InputStream inputStream=httpURLConnection.getInputStream();
    bis=new BufferedInputStream(inputStream);
    bos=new BufferedOutputStream(new FileOutputStream(target));
    byte[] buf=new byte[BUFFER_SIZE];
    int bytesRead=-1;
    while ((bytesRead=bis.read(buf)) != -1) {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      bos.write(buf,0,bytesRead);
    }
    bos.flush();
    success=true;
  }
  finally {
    if (bis != null) {
      try {
        bis.close();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (bos != null) {
      try {
        bos.close();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (httpURLConnection != null) {
      httpURLConnection.disconnect();
    }
    if (!success && target.exists() && target.isFile()) {
      target.delete();
    }
    Authenticator.setDefault(defaultAuthenticator);
  }
}",0.9195095948827292
125355,"public boolean isAvailable(){
  if (nexusURL == null || nexusURL.isEmpty()) {
    return false;
  }
  return NexusServerUtils.checkConnectionStatus(nexusURL,nexusUser,new String(nexusPass));
}","public boolean isAvailable(){
  if (getNexusURL() == null || getNexusURL().isEmpty()) {
    return false;
  }
  return NexusServerUtils.checkConnectionStatus(getNexusURL(),getNexusUser(),getNexusPassStr());
}",0.815
125356,"@Override protected PasswordAuthentication getPasswordAuthentication(){
  return new PasswordAuthentication(nexusUser,nexusPass);
}","@Override protected PasswordAuthentication getPasswordAuthentication(){
  final String nexusPassStr=getNexusPassStr();
  return new PasswordAuthentication(getNexusUser(),nexusPassStr != null ? nexusPassStr.toCharArray() : new char[0]);
}",0.5217391304347826
125357,"public Document downloadXMLDocument(IProgressMonitor monitor,MavenArtifact artifact) throws Exception {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  if (artifact == null) {
    return null;
  }
  final String reletivePath=PomUtil.getArtifactPath(artifact);
  if (reletivePath == null) {
    return null;
  }
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  BufferedInputStream bis=null;
  HttpURLConnection httpURLConnection=null;
  try {
    if (StringUtils.isNotEmpty(nexusUser)) {
      Authenticator.setDefault(new Authenticator(){
        @Override protected PasswordAuthentication getPasswordAuthentication(){
          return new PasswordAuthentication(nexusUser,nexusPass);
        }
      }
);
    }
    httpURLConnection=NexusServerUtils.getHttpURLConnection(nexusURL,reletivePath,nexusUser,new String(nexusPass));
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    InputStream inputStream=httpURLConnection.getInputStream();
    bis=new BufferedInputStream(inputStream);
    SAXReader saxReader=new SAXReader();
    Document document=saxReader.read(bis);
    return document;
  }
  finally {
    if (bis != null) {
      try {
        bis.close();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (httpURLConnection != null) {
      httpURLConnection.disconnect();
    }
    Authenticator.setDefault(defaultAuthenticator);
  }
}","public Document downloadXMLDocument(IProgressMonitor monitor,MavenArtifact artifact) throws Exception {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  if (artifact == null) {
    return null;
  }
  final String reletivePath=PomUtil.getArtifactPath(artifact);
  if (reletivePath == null) {
    return null;
  }
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  BufferedInputStream bis=null;
  HttpURLConnection httpURLConnection=null;
  try {
    setAuthenticator();
    httpURLConnection=NexusServerUtils.getHttpURLConnection(getNexusURL(),reletivePath,getNexusUser(),getNexusPassStr());
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    InputStream inputStream=httpURLConnection.getInputStream();
    bis=new BufferedInputStream(inputStream);
    SAXReader saxReader=new SAXReader();
    Document document=saxReader.read(bis);
    return document;
  }
  finally {
    if (bis != null) {
      try {
        bis.close();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
    if (httpURLConnection != null) {
      httpURLConnection.disconnect();
    }
    Authenticator.setDefault(defaultAuthenticator);
  }
}",0.8892961876832844
125358,"@Override public void logOnProject(Project project) throws PersistenceException, LoginException {
  if (getRepositoryContext().getUser().getLogin() == null) {
    throw new LoginException(Messages.getString(""String_Node_Str""));
  }
  if (project.getEmfProject().eResource() == null) {
    IProject iProject=ResourceUtils.getProject(getRepositoryContext().getProject());
    project.setEmfProject(xmiResourceManager.loadProject(iProject));
  }
  super.logOnProject(project);
  if (!doesLoggedUserExist()) {
    createUser(project);
  }
  IProject project2=ResourceUtils.getProject(project);
  createFolders(project2,project.getEmfProject());
  synchronizeRoutines(project2);
  synchronizeSqlpatterns(project2);
  synchronizeFolders(project2,project.getEmfProject());
  changeRoutinesPackage(project);
  saveProject(project);
}","@Override public void logOnProject(Project project) throws PersistenceException, LoginException {
  if (getRepositoryContext().getUser().getLogin() == null) {
    throw new LoginException(Messages.getString(""String_Node_Str""));
  }
  if (project.getEmfProject().eResource() == null) {
    IProject iProject=ResourceUtils.getProject(getRepositoryContext().getProject());
    project.setEmfProject(xmiResourceManager.loadProject(iProject));
  }
  super.logOnProject(project);
  if (!doesLoggedUserExist() && project.isMainProject()) {
    createUser(project);
  }
  IProject project2=ResourceUtils.getProject(project);
  createFolders(project2,project.getEmfProject());
  synchronizeRoutines(project2);
  synchronizeSqlpatterns(project2);
  synchronizeFolders(project2,project.getEmfProject());
  changeRoutinesPackage(project);
  saveProject(project);
}",0.9838998211091234
125359,"/** 
 * @param string : Passes the strings you want to search.
 * @param start : Must be an integer. The position in the string where you want to start counting.
 * @param length : Must be an integer greater than 0. The number of characters you want SUBSTR to return
 * @return {example} SUBSTR(""This is a test."",1,5) #his i
 */
public static String SUBSTR(String string,int start,Integer length){
  if (string == null) {
    return null;
  }
  if (start > string.length()) {
    return ""String_Node_Str"";
  }
  if (start > 0) {
    start--;
  }
 else   if (start < 0) {
    start=string.length() + start;
    if (start < 0) {
      start=0;
    }
  }
  String result;
  if (length == null || (length + start) > string.length()) {
    result=string.substring(start);
  }
 else   if (length <= 0) {
    return ""String_Node_Str"";
  }
 else {
    result=string.substring(start,length + start);
  }
  return result;
}","/** 
 * @param string : Passes the strings you want to search.
 * @param start : Must be an integer. The position in the string where you want to start counting.
 * @param length : Must be an integer greater than 0. The number of characters you want SUBSTR to return
 * @return {example} SUBSTR(""This is a test."",1,5) #his i
 */
public static String SUBSTR(String string,int start,Integer length){
  if (isVacant(string)) {
    return null;
  }
  if (start > string.length()) {
    return ""String_Node_Str"";
  }
  if (start > 0) {
    start--;
  }
 else   if (start < 0) {
    start=string.length() + start;
    if (start < 0) {
      start=0;
    }
  }
  String result;
  if (length == null || (length + start) > string.length()) {
    result=string.substring(start);
  }
 else   if (length <= 0) {
    return ""String_Node_Str"";
  }
 else {
    result=string.substring(start,length + start);
  }
  return result;
}",0.9835886214442012
125360,"private static String dateFormatConvert(String format){
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return format;
}","private static String dateFormatConvert(String format){
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  format=format.replaceAll(""String_Node_Str"",""String_Node_Str"");
  return format;
}",0.9699491447064262
125361,"/** 
 * @param date  Passes the values you want to change
 * @param format A format string specifying the portion of the date value you want to change.For example, 'mm'.
 * @param amount An integer value specifying the amount of years, months, days, hours, and so on by which you want to change the date value.
 * @return Date  NULL if a null value is passed as an argument to the function.
 * @throws ParseException {example} ADD_TO_DATE(new Date(1464576463231l), ""HH"",2) #Mon May 30 12:47:43 CST 2016
 */
public static Date ADD_TO_DATE(Date date,String format,int amount) throws ParseException {
  if (date == null || format == null) {
    return null;
  }
  if (format != null) {
    format=dateFormatADD_TO_DATE(format);
  }
  Long time=date.getTime();
  Calendar calender=Calendar.getInstance();
  calender.setTime(date);
switch (format) {
case ""String_Node_Str"":
    calender.add(Calendar.YEAR,amount);
  time=calender.getTimeInMillis();
break;
case ""String_Node_Str"":
calender.add(Calendar.MONTH,amount);
time=calender.getTimeInMillis();
break;
case ""String_Node_Str"":
time+=(long)amount * (long)86400000;
break;
case ""String_Node_Str"":
time+=(long)amount * (long)3600000;
break;
case ""String_Node_Str"":
time+=(long)amount * (long)60000;
break;
case ""String_Node_Str"":
time+=(long)amount * (long)1000;
break;
case ""String_Node_Str"":
time+=amount;
break;
case ""String_Node_Str"":
time+=amount / 1000;
break;
case ""String_Node_Str"":
time+=amount / 1000000;
break;
default :
throw new ParseException(""String_Node_Str"",0);
}
return new Date(time);
}","/** 
 * @param date  Passes the values you want to change
 * @param format A format string specifying the portion of the date value you want to change.For example, 'mm'.
 * @param amount An integer value specifying the amount of years, months, days, hours, and so on by which you want to change the date value.
 * @return Date  NULL if a null value is passed as an argument to the function.
 * @throws ParseException {example} ADD_TO_DATE(new Date(1464576463231l), ""HH"",2) #Mon May 30 12:47:43 CST 2016
 */
public static Date ADD_TO_DATE(Date date,String format,int amount) throws ParseException {
  if (date == null || StringHandling.isVacant(format)) {
    return null;
  }
  if (format != null) {
    format=dateFormatADD_TO_DATE(format);
  }
  Long time=date.getTime();
  Calendar calender=Calendar.getInstance();
  calender.setTime(date);
switch (format) {
case ""String_Node_Str"":
    calender.add(Calendar.YEAR,amount);
  time=calender.getTimeInMillis();
break;
case ""String_Node_Str"":
calender.add(Calendar.MONTH,amount);
time=calender.getTimeInMillis();
break;
case ""String_Node_Str"":
time+=(long)amount * (long)86400000;
break;
case ""String_Node_Str"":
time+=(long)amount * (long)3600000;
break;
case ""String_Node_Str"":
time+=(long)amount * (long)60000;
break;
case ""String_Node_Str"":
time+=(long)amount * (long)1000;
break;
case ""String_Node_Str"":
time+=amount;
break;
case ""String_Node_Str"":
time+=amount / 1000;
break;
case ""String_Node_Str"":
time+=amount / 1000000;
break;
default :
throw new ParseException(""String_Node_Str"",0);
}
return new Date(time);
}",0.9855722988137224
125362,"@Override protected void checkAndSetParameters(IProcess2 process2){
  IContextManager contextManager=process2.getContextManager();
  if (contextManager instanceof JobContextManager) {
    JobContextManager jobContextManager=(JobContextManager)contextManager;
    jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
    jobContextManager.setNewParametersMap(getNewParametersMap());
    Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
    if (checkAddContextGroup && repositoryAddGroupContext.isEmpty() && parameter instanceof ContextItem) {
      List<IContext> addContextGroupList=new ArrayList<IContext>();
      List<IContext> jobContexts=process2.getContextManager().getListContext();
      List<ContextType> repositoryContexts=((ContextItem)parameter).getContext();
      String repositoryId=((ContextItem)parameter).getProperty().getId();
      for (      ContextType repoContext : repositoryContexts) {
        boolean found=false;
        for (        IContext jobContext : jobContexts) {
          if (jobContext.getName().equals(repoContext.getName())) {
            found=true;
          }
        }
        if (!found) {
          IContext jobContext=new JobContext(repoContext.getName());
          List<ContextParameterType> repoParams=repoContext.getContextParameter();
          for (          ContextParameterType repoParam : repoParams) {
            IContextParameter jobParam=new JobContextParameter();
            jobParam.setName(repoParam.getName());
            jobParam.setContext(jobContext);
            jobParam.setComment(repoParam.getComment());
            jobParam.setPrompt(repoParam.getPrompt());
            jobParam.setSource(repositoryId);
            jobParam.setType(repoParam.getType());
            jobParam.setValue(repoParam.getValue());
            jobContext.getContextParameterList().add(jobParam);
          }
          addContextGroupList.add(jobContext);
        }
      }
      repositoryAddGroupContext.put((ContextItem)parameter,addContextGroupList);
    }
    List<IContext> listIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryAddGroupContext.keySet()) {
      List<IContext> list=repositoryAddGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        JobContext newJobContext=new JobContext(context.getName());
        List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
        for (int j=0; j < context.getContextParameterList().size(); j++) {
          IContextParameter param=context.getContextParameterList().get(j);
          IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
          if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
            IContextParameter clone=param.clone();
            clone.setContext(newJobContext);
            existedParameters.add(clone);
          }
        }
        if (!existedParameters.isEmpty()) {
          newJobContext.setContextParameterList(existedParameters);
          listIContext.add(newJobContext);
        }
      }
    }
    jobContextManager.setAddGroupContext(listIContext);
    jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
    Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
    List<IContext> removeListIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryRemoveGroupContext.keySet()) {
      List<IContext> list=repositoryRemoveGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        if (!removeListIContext.contains(context)) {
          removeListIContext.add(context);
        }
      }
    }
    jobContextManager.setRemoveGroupContext(removeListIContext);
    jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
    Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
    jobContextManager.setRenameGroupContext(getRenameContextGroup());
    jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
  }
  IUpdateManager updateManager=process2.getUpdateManager();
  if (updateManager instanceof AbstractUpdateManager) {
    AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
    if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
      manager.setSchemaRenamedMap(getSchemaRenamedMap());
    }
    if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
      manager.setColumnRenamedMap(getColumnRenamedMap());
    }
    if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
      manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
    }
    manager.setFromRepository(true);
    if (isAddColumn) {
      manager.setAddColumn(true);
      isAddColumn=false;
    }
  }
  for (  INode node : process2.getGraphicalNodes()) {
    if (node.getElementName().startsWith(""String_Node_Str"") && parameter instanceof Item) {
      String id=((Item)parameter).getProperty().getId();
      IElementParameter repoProperty=node.getElementParameter(""String_Node_Str"");
      if (repoProperty != null) {
        repoProperty.setValue(id);
      }
    }
  }
}","@Override protected void checkAndSetParameters(IProcess2 process2){
  IContextManager contextManager=process2.getContextManager();
  if (contextManager instanceof JobContextManager) {
    JobContextManager jobContextManager=(JobContextManager)contextManager;
    jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
    jobContextManager.setNewParametersMap(getNewParametersMap());
    Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
    if (checkAddContextGroup && repositoryAddGroupContext.isEmpty() && parameter instanceof ContextItem) {
      List<IContext> addContextGroupList=new ArrayList<IContext>();
      List<IContext> jobContexts=process2.getContextManager().getListContext();
      List<ContextType> repositoryContexts=((ContextItem)parameter).getContext();
      String repositoryId=((ContextItem)parameter).getProperty().getId();
      for (      ContextType repoContext : repositoryContexts) {
        boolean found=false;
        for (        IContext jobContext : jobContexts) {
          if (jobContext.getName().equals(repoContext.getName())) {
            found=true;
          }
        }
        if (!found) {
          IContext jobContext=new JobContext(repoContext.getName());
          List<ContextParameterType> repoParams=repoContext.getContextParameter();
          for (          ContextParameterType repoParam : repoParams) {
            IContextParameter jobParam=new JobContextParameter();
            jobParam.setName(repoParam.getName());
            jobParam.setContext(jobContext);
            jobParam.setComment(repoParam.getComment());
            jobParam.setPrompt(repoParam.getPrompt());
            jobParam.setSource(repositoryId);
            jobParam.setType(repoParam.getType());
            jobParam.setValue(repoParam.getValue());
            jobContext.getContextParameterList().add(jobParam);
          }
          addContextGroupList.add(jobContext);
        }
      }
      repositoryAddGroupContext.put((ContextItem)parameter,addContextGroupList);
    }
    List<IContext> listIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryAddGroupContext.keySet()) {
      List<IContext> list=repositoryAddGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        JobContext newJobContext=new JobContext(context.getName());
        List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
        for (int j=0; j < context.getContextParameterList().size(); j++) {
          IContextParameter param=context.getContextParameterList().get(j);
          IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
          if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
            IContextParameter clone=param.clone();
            clone.setContext(newJobContext);
            existedParameters.add(clone);
          }
        }
        if (!existedParameters.isEmpty()) {
          newJobContext.setContextParameterList(existedParameters);
          listIContext.add(newJobContext);
        }
      }
    }
    jobContextManager.setAddGroupContext(listIContext);
    jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
    Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
    List<IContext> removeListIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryRemoveGroupContext.keySet()) {
      List<IContext> list=repositoryRemoveGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        if (!removeListIContext.contains(context)) {
          removeListIContext.add(context);
        }
      }
    }
    jobContextManager.setRemoveGroupContext(removeListIContext);
    jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
    Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
    jobContextManager.setRenameGroupContext(getRenameContextGroup());
    jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
  }
  IUpdateManager updateManager=process2.getUpdateManager();
  if (updateManager instanceof AbstractUpdateManager) {
    AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
    if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
      manager.setSchemaRenamedMap(getSchemaRenamedMap());
    }
    if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
      manager.setColumnRenamedMap(getColumnRenamedMap());
    }
    if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
      manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
    }
    manager.setFromRepository(true);
    if (isAddColumn) {
      manager.setAddColumn(true);
      isAddColumn=false;
    }
  }
  for (  INode node : process2.getGraphicalNodes()) {
    if (node.getComponent().getName().startsWith(""String_Node_Str"") && parameter instanceof Item) {
      String id=((Item)parameter).getProperty().getId();
      IElementParameter repoProperty=node.getElementParameter(""String_Node_Str"");
      if (repoProperty != null) {
        repoProperty.setValue(id);
      }
    }
  }
}",0.9982094897045658
125363,"/** 
 * ggu Comment method ""checkJobItemsForUpdate"".
 * @param types - need update types of jobs.
 * @param sourceIdMap - map old source id to new one.
 * @param sourceItem - modified repository item.
 * @return
 */
private List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types,final boolean onlySimpleShow) throws InterruptedException {
  if (types == null || types.isEmpty()) {
    return null;
  }
  RepositoryUpdateManagerHelper helper=new RepositoryUpdateManagerHelper(){
    @Override protected boolean enableCheckItem(){
      return parameter != null && relations != null && !onlyOpeningJob;
    }
    @Override protected List<Relation> getRelations(){
      return relations;
    }
    @Override protected List<UpdateResult> getOtherUpdateResults(    IProgressMonitor parentMonitor,    List<IProcess2> openedProcessList,    Set<IUpdateItemType> types){
      List<UpdateResult> resultList=new ArrayList<UpdateResult>();
      if (isDetectAndUpdate) {
        resultList=updateAllProcess(parentMonitor,resultList,openedProcessList,types,false);
      }
      if (!onlyOpeningJob) {
        List<UpdateResult> templateSetUpdate=checkSettingInJobTemplateWizard();
        if (templateSetUpdate != null) {
          resultList.addAll(templateSetUpdate);
        }
      }
      return resultList;
    }
    @Override protected void checkAndSetParameters(    IProcess2 process2){
      IContextManager contextManager=process2.getContextManager();
      if (contextManager instanceof JobContextManager) {
        JobContextManager jobContextManager=(JobContextManager)contextManager;
        jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
        jobContextManager.setNewParametersMap(getNewParametersMap());
        Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
        if (checkAddContextGroup && repositoryAddGroupContext.isEmpty() && parameter instanceof ContextItem) {
          List<IContext> addContextGroupList=new ArrayList<IContext>();
          List<IContext> jobContexts=process2.getContextManager().getListContext();
          List<ContextType> repositoryContexts=((ContextItem)parameter).getContext();
          String repositoryId=((ContextItem)parameter).getProperty().getId();
          for (          ContextType repoContext : repositoryContexts) {
            boolean found=false;
            for (            IContext jobContext : jobContexts) {
              if (jobContext.getName().equals(repoContext.getName())) {
                found=true;
              }
            }
            if (!found) {
              IContext jobContext=new JobContext(repoContext.getName());
              List<ContextParameterType> repoParams=repoContext.getContextParameter();
              for (              ContextParameterType repoParam : repoParams) {
                IContextParameter jobParam=new JobContextParameter();
                jobParam.setName(repoParam.getName());
                jobParam.setContext(jobContext);
                jobParam.setComment(repoParam.getComment());
                jobParam.setPrompt(repoParam.getPrompt());
                jobParam.setSource(repositoryId);
                jobParam.setType(repoParam.getType());
                jobParam.setValue(repoParam.getValue());
                jobContext.getContextParameterList().add(jobParam);
              }
              addContextGroupList.add(jobContext);
            }
          }
          repositoryAddGroupContext.put((ContextItem)parameter,addContextGroupList);
        }
        List<IContext> listIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryAddGroupContext.keySet()) {
          List<IContext> list=repositoryAddGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            JobContext newJobContext=new JobContext(context.getName());
            List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
            for (int j=0; j < context.getContextParameterList().size(); j++) {
              IContextParameter param=context.getContextParameterList().get(j);
              IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
              if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
                IContextParameter clone=param.clone();
                clone.setContext(newJobContext);
                existedParameters.add(clone);
              }
            }
            if (!existedParameters.isEmpty()) {
              newJobContext.setContextParameterList(existedParameters);
              listIContext.add(newJobContext);
            }
          }
        }
        jobContextManager.setAddGroupContext(listIContext);
        jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
        Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
        List<IContext> removeListIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryRemoveGroupContext.keySet()) {
          List<IContext> list=repositoryRemoveGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            if (!removeListIContext.contains(context)) {
              removeListIContext.add(context);
            }
          }
        }
        jobContextManager.setRemoveGroupContext(removeListIContext);
        jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
        Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
        jobContextManager.setRenameGroupContext(getRenameContextGroup());
        jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
      }
      IUpdateManager updateManager=process2.getUpdateManager();
      if (updateManager instanceof AbstractUpdateManager) {
        AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
        if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
          manager.setSchemaRenamedMap(getSchemaRenamedMap());
        }
        if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
          manager.setColumnRenamedMap(getColumnRenamedMap());
        }
        if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
          manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
        }
        manager.setFromRepository(true);
        if (isAddColumn) {
          manager.setAddColumn(true);
          isAddColumn=false;
        }
      }
      for (      INode node : process2.getGraphicalNodes()) {
        if (node.getElementName().startsWith(""String_Node_Str"") && parameter instanceof Item) {
          String id=((Item)parameter).getProperty().getId();
          IElementParameter repoProperty=node.getElementParameter(""String_Node_Str"");
          if (repoProperty != null) {
            repoProperty.setValue(id);
          }
        }
      }
    }
  }
;
  return helper.checkJobItemsForUpdate(parentMonitor,types);
}","/** 
 * ggu Comment method ""checkJobItemsForUpdate"".
 * @param types - need update types of jobs.
 * @param sourceIdMap - map old source id to new one.
 * @param sourceItem - modified repository item.
 * @return
 */
private List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types,final boolean onlySimpleShow) throws InterruptedException {
  if (types == null || types.isEmpty()) {
    return null;
  }
  RepositoryUpdateManagerHelper helper=new RepositoryUpdateManagerHelper(){
    @Override protected boolean enableCheckItem(){
      return parameter != null && relations != null && !onlyOpeningJob;
    }
    @Override protected List<Relation> getRelations(){
      return relations;
    }
    @Override protected List<UpdateResult> getOtherUpdateResults(    IProgressMonitor parentMonitor,    List<IProcess2> openedProcessList,    Set<IUpdateItemType> types){
      List<UpdateResult> resultList=new ArrayList<UpdateResult>();
      if (isDetectAndUpdate) {
        resultList=updateAllProcess(parentMonitor,resultList,openedProcessList,types,false);
      }
      if (!onlyOpeningJob) {
        List<UpdateResult> templateSetUpdate=checkSettingInJobTemplateWizard();
        if (templateSetUpdate != null) {
          resultList.addAll(templateSetUpdate);
        }
      }
      return resultList;
    }
    @Override protected void checkAndSetParameters(    IProcess2 process2){
      IContextManager contextManager=process2.getContextManager();
      if (contextManager instanceof JobContextManager) {
        JobContextManager jobContextManager=(JobContextManager)contextManager;
        jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
        jobContextManager.setNewParametersMap(getNewParametersMap());
        Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
        if (checkAddContextGroup && repositoryAddGroupContext.isEmpty() && parameter instanceof ContextItem) {
          List<IContext> addContextGroupList=new ArrayList<IContext>();
          List<IContext> jobContexts=process2.getContextManager().getListContext();
          List<ContextType> repositoryContexts=((ContextItem)parameter).getContext();
          String repositoryId=((ContextItem)parameter).getProperty().getId();
          for (          ContextType repoContext : repositoryContexts) {
            boolean found=false;
            for (            IContext jobContext : jobContexts) {
              if (jobContext.getName().equals(repoContext.getName())) {
                found=true;
              }
            }
            if (!found) {
              IContext jobContext=new JobContext(repoContext.getName());
              List<ContextParameterType> repoParams=repoContext.getContextParameter();
              for (              ContextParameterType repoParam : repoParams) {
                IContextParameter jobParam=new JobContextParameter();
                jobParam.setName(repoParam.getName());
                jobParam.setContext(jobContext);
                jobParam.setComment(repoParam.getComment());
                jobParam.setPrompt(repoParam.getPrompt());
                jobParam.setSource(repositoryId);
                jobParam.setType(repoParam.getType());
                jobParam.setValue(repoParam.getValue());
                jobContext.getContextParameterList().add(jobParam);
              }
              addContextGroupList.add(jobContext);
            }
          }
          repositoryAddGroupContext.put((ContextItem)parameter,addContextGroupList);
        }
        List<IContext> listIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryAddGroupContext.keySet()) {
          List<IContext> list=repositoryAddGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            JobContext newJobContext=new JobContext(context.getName());
            List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
            for (int j=0; j < context.getContextParameterList().size(); j++) {
              IContextParameter param=context.getContextParameterList().get(j);
              IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
              if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
                IContextParameter clone=param.clone();
                clone.setContext(newJobContext);
                existedParameters.add(clone);
              }
            }
            if (!existedParameters.isEmpty()) {
              newJobContext.setContextParameterList(existedParameters);
              listIContext.add(newJobContext);
            }
          }
        }
        jobContextManager.setAddGroupContext(listIContext);
        jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
        Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
        List<IContext> removeListIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryRemoveGroupContext.keySet()) {
          List<IContext> list=repositoryRemoveGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            if (!removeListIContext.contains(context)) {
              removeListIContext.add(context);
            }
          }
        }
        jobContextManager.setRemoveGroupContext(removeListIContext);
        jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
        Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
        jobContextManager.setRenameGroupContext(getRenameContextGroup());
        jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
      }
      IUpdateManager updateManager=process2.getUpdateManager();
      if (updateManager instanceof AbstractUpdateManager) {
        AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
        if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
          manager.setSchemaRenamedMap(getSchemaRenamedMap());
        }
        if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
          manager.setColumnRenamedMap(getColumnRenamedMap());
        }
        if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
          manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
        }
        manager.setFromRepository(true);
        if (isAddColumn) {
          manager.setAddColumn(true);
          isAddColumn=false;
        }
      }
      for (      INode node : process2.getGraphicalNodes()) {
        if (node.getComponent().getName().startsWith(""String_Node_Str"") && parameter instanceof Item) {
          String id=((Item)parameter).getProperty().getId();
          IElementParameter repoProperty=node.getElementParameter(""String_Node_Str"");
          if (repoProperty != null) {
            repoProperty.setValue(id);
          }
        }
      }
    }
  }
;
  return helper.checkJobItemsForUpdate(parentMonitor,types);
}",0.9986627440492112
125364,"/** 
 * item with same name.
 */
protected boolean isSameName(ImportItem importItem,IRepositoryViewObject repObject){
  final Property property=importItem.getProperty();
  String currentLabel=null;
  if (repObject instanceof RepositoryViewObject) {
    RepositoryViewObject object=(RepositoryViewObject)repObject;
    currentLabel=object.getTechnicalLabel();
  }
 else {
    currentLabel=repObject.getLabel();
  }
  if ((property.getLabel() != null && property.getLabel().equalsIgnoreCase(currentLabel))) {
    ERepositoryObjectType importType=importItem.getRepositoryType();
    ERepositoryObjectType repType=repObject.getRepositoryObjectType();
    if (importType != null && importType.equals(repType) && importType.isAllowMultiName()) {
      String importPath=importItem.getProperty().getItem().getState().getPath();
      String repPath=repObject.getPath();
      if (importPath == null && repPath == null || importPath != null && importPath.equals(repPath)) {
        return true;
      }
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * item with same name.
 */
protected boolean isSameName(ImportItem importItem,IRepositoryViewObject repObject){
  final Property property=importItem.getProperty();
  String currentLabel=null;
  if (repObject instanceof RepositoryViewObject) {
    RepositoryViewObject object=(RepositoryViewObject)repObject;
    currentLabel=object.getTechnicalLabel();
  }
 else {
    currentLabel=repObject.getLabel();
  }
  boolean isSameLabel=property.getLabel().equalsIgnoreCase(currentLabel);
  boolean nameIsOK=WorkspaceUtils.checkNameIsOK(property.getLabel());
  if (!nameIsOK && !isSameLabel) {
    isSameLabel=getPropertyLabel(property.getLabel()).equalsIgnoreCase(currentLabel);
  }
  if ((property.getLabel() != null && isSameLabel)) {
    ERepositoryObjectType importType=importItem.getRepositoryType();
    ERepositoryObjectType repType=repObject.getRepositoryObjectType();
    if (importType != null && importType.equals(repType) && importType.isAllowMultiName()) {
      String importPath=importItem.getProperty().getItem().getState().getPath();
      String repPath=repObject.getPath();
      if (importPath == null && repPath == null || importPath != null && importPath.equals(repPath)) {
        return true;
      }
      return false;
    }
    return true;
  }
  return false;
}",0.8637137989778535
125365,"private void setPomForHDLight(IProgressMonitor monitor){
  if (ProcessUtils.jarNeedToContainsContext()) {
    try {
      Model model=MODEL_MANAGER.readMavenModel(getPomFile());
      List<Plugin> plugins=new ArrayList<Plugin>(model.getBuild().getPlugins());
      out:       for (      Plugin plugin : plugins) {
        if (plugin.getArtifactId().equals(""String_Node_Str"")) {
          List<PluginExecution> pluginExecutions=plugin.getExecutions();
          for (          PluginExecution pluginExecution : pluginExecutions) {
            if (pluginExecution.getId().equals(""String_Node_Str"")) {
              Object object=pluginExecution.getConfiguration();
              if (object instanceof Xpp3Dom) {
                Xpp3Dom configNode=(Xpp3Dom)object;
                Xpp3Dom includesNode=configNode.getChild(""String_Node_Str"");
                Xpp3Dom includeNode=new Xpp3Dom(""String_Node_Str"");
                includeNode.setValue(""String_Node_Str"");
                includesNode.addChild(includeNode);
                model.getBuild().setPlugins(plugins);
                PomUtil.savePom(monitor,model,getPomFile());
                break out;
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}","private void setPomForHDLight(IProgressMonitor monitor){
  if (ProcessUtils.jarNeedsToContainContext()) {
    try {
      Model model=MODEL_MANAGER.readMavenModel(getPomFile());
      List<Plugin> plugins=new ArrayList<Plugin>(model.getBuild().getPlugins());
      out:       for (      Plugin plugin : plugins) {
        if (plugin.getArtifactId().equals(""String_Node_Str"")) {
          List<PluginExecution> pluginExecutions=plugin.getExecutions();
          for (          PluginExecution pluginExecution : pluginExecutions) {
            if (pluginExecution.getId().equals(""String_Node_Str"")) {
              Object object=pluginExecution.getConfiguration();
              if (object instanceof Xpp3Dom) {
                Xpp3Dom configNode=(Xpp3Dom)object;
                Xpp3Dom includesNode=configNode.getChild(""String_Node_Str"");
                Xpp3Dom includeNode=new Xpp3Dom(""String_Node_Str"");
                includeNode.setValue(""String_Node_Str"");
                includesNode.addChild(includeNode);
                model.getBuild().setPlugins(plugins);
                PomUtil.savePom(monitor,model,getPomFile());
                break out;
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.9992289899768696
125366,"protected boolean checkCompilationError(IFile codeFile,MigrateItemInfo itemInfo) throws Exception {
  boolean hasCompilationError=false;
  if (codeFile != null && codeFile.exists()) {
    IMarker[] markers=codeFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_ONE);
    for (    IMarker marker : markers) {
      Integer lineNr=(Integer)marker.getAttribute(IMarker.LINE_NUMBER);
      String message=(String)marker.getAttribute(IMarker.MESSAGE);
      Integer severity=(Integer)marker.getAttribute(IMarker.SEVERITY);
      if (severity == IMarker.SEVERITY_ERROR) {
        String errorMessage=message + ""String_Node_Str"" + lineNr;
        Problem problem=new Problem();
        problem.setCategory(ProblemCategory.COMPILATION_ERROR);
        problem.setProblem(errorMessage);
        itemInfo.getProblems().add(problem);
        hasCompilationError=true;
      }
    }
  }
 else {
    throw new Exception(""String_Node_Str"" + codeFile);
  }
  return hasCompilationError;
}","protected boolean checkCompilationError(IFile codeFile,MigrateItemInfo itemInfo) throws Exception {
  boolean hasCompilationError=false;
  if (codeFile != null && codeFile.exists()) {
    IMarker[] markers=codeFile.findMarkers(IMarker.PROBLEM,true,IResource.DEPTH_ONE);
    for (    IMarker marker : markers) {
      Integer lineNr=(Integer)marker.getAttribute(IMarker.LINE_NUMBER);
      String message=(String)marker.getAttribute(IMarker.MESSAGE);
      Integer severity=(Integer)marker.getAttribute(IMarker.SEVERITY);
      if (severity == IMarker.SEVERITY_ERROR) {
        String errorMessage=message + ""String_Node_Str"" + lineNr;
        Problem problem=new Problem();
        problem.setCategory(ProblemCategory.COMPILATION_ERROR);
        problem.setProblem(errorMessage);
        itemInfo.getProblems().add(problem);
        hasCompilationError=true;
      }
    }
  }
 else {
    Problem problem=new Problem();
    problem.setCategory(ProblemCategory.COMPILATION_ERROR);
    problem.setProblem(""String_Node_Str"" + codeFile);
    itemInfo.getProblems().add(problem);
    hasCompilationError=true;
  }
  return hasCompilationError;
}",0.9059101654846335
125367,"/** 
 * Get Object by special column index
 * @param set
 * @param columnIndex
 * @return
 * @throws SQLException
 * @throws IOException
 */
public static Object getBigObject(ResultSet set,int columnIndex) throws SQLException {
  Object object=null;
  try {
    object=set.getObject(columnIndex);
    if (object != null && object instanceof Clob) {
      Reader is=((Clob)object).getCharacterStream();
      BufferedReader br=new BufferedReader(is);
      String str=br.readLine();
      StringBuffer sb=new StringBuffer();
      while (str != null) {
        sb.append(str);
        str=br.readLine();
      }
      return sb.toString();
    }
  }
 catch (  SQLException e) {
    if (NULLDATE.equals(set.getString(columnIndex))) {
      object=null;
    }
 else {
      throw e;
    }
  }
catch (  IOException e) {
    object=null;
  }
  return object;
}","/** 
 * Get Object by special column index
 * @param set
 * @param columnIndex
 * @return
 * @throws SQLException
 * @throws IOException
 */
public static Object getBigObject(ResultSet set,String columnName) throws SQLException {
  Object object=null;
  try {
    object=set.getObject(columnName);
    if (object != null && object instanceof Clob) {
      Reader is=((Clob)object).getCharacterStream();
      BufferedReader br=new BufferedReader(is);
      String str=br.readLine();
      StringBuffer sb=new StringBuffer();
      while (str != null) {
        sb.append(str);
        str=br.readLine();
      }
      return sb.toString();
    }
  }
 catch (  SQLException e) {
    if (NULLDATE.equals(set.getString(columnName))) {
      object=null;
    }
 else {
      throw e;
    }
  }
catch (  IOException e) {
    object=null;
  }
  return object;
}",0.9707602339181286
125368,"@Override public Item copy(Item originalItem,IPath path,String newItemLabel) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=null;
    if (newItemLabel == null) {
      boolean changeLabelWithCopyPrefix=true;
      newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    }
 else {
      newItem=copyFromResource(createResource,newItemLabel);
    }
    copyIcon(originalItem,newItem);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    if (originalItem.eClass() == PropertiesPackage.Literals.PROCESS_ITEM || originalItem.eClass() == PropertiesPackage.Literals.JOBLET_PROCESS_ITEM) {
      xmiResourceManager.copyScreenshotFile(originalItem,newItem);
    }
 else {
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        handler.copyScreenShotFile(originalItem,newItem);
      }
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","@Override public Item copy(Item originalItem,IPath path,String newItemLabel) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    HashMap<String,Object> options=new HashMap<String,Object>(2);
    options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    resource.save(out,options);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=null;
    if (newItemLabel == null) {
      boolean changeLabelWithCopyPrefix=true;
      newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    }
 else {
      newItem=copyFromResource(createResource,newItemLabel);
    }
    copyIcon(originalItem,newItem);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    if (originalItem.eClass() == PropertiesPackage.Literals.PROCESS_ITEM || originalItem.eClass() == PropertiesPackage.Literals.JOBLET_PROCESS_ITEM) {
      xmiResourceManager.copyScreenshotFile(originalItem,newItem);
    }
 else {
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        handler.copyScreenShotFile(originalItem,newItem);
      }
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9516503951650396
125369,"public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  try {
    MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(iMetadataConnection);
    temConnection=(DatabaseConnection)dbInstance.fillUIConnParams(iMetadataConnection,temConnection);
    sqlConn=MetadataConnectionUtils.createConnection(iMetadataConnection).getObject();
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
      temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
    }
    if (((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID() != null) {
      temConnection.setSID(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getSID());
    }
    String dbType=iMetadataConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
      }
 else {
        dbMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
      }
      dbInstance.fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
      dbInstance.fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    MetadataConnectionUtils.closeDerbyDriver();
  }
}","public static void fillCatalogAndSchemas(IMetadataConnection iMetadataConnection,DatabaseConnection temConnection) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  java.sql.Connection sqlConn=null;
  try {
    MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(iMetadataConnection);
    temConnection=(DatabaseConnection)dbInstance.fillUIConnParams(iMetadataConnection,temConnection);
    sqlConn=MetadataConnectionUtils.createConnection(iMetadataConnection).getObject();
    if (!temConnection.isContextMode() && ((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema() != null) {
      temConnection.setUiSchema(((DatabaseConnection)iMetadataConnection.getCurrentConnection()).getUiSchema());
    }
    String dbType=iMetadataConnection.getDbType();
    if (sqlConn != null) {
      DatabaseMetaData dbMetaData=null;
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
        dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(iMetadataConnection);
      }
 else {
        dbMetaData=ExtractMetaDataUtils.getInstance().getDatabaseMetaData(sqlConn,dbType,false,iMetadataConnection.getDatabase());
      }
      dbInstance.fillCatalogs(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,true));
      dbInstance.fillSchemas(temConnection,dbMetaData,iMetadataConnection,MetadataConnectionUtils.getPackageFilter(temConnection,dbMetaData,false));
    }
  }
 catch (  SQLException e) {
    throw e;
  }
 finally {
    if (sqlConn != null) {
      ConnectionUtils.closeConnection(sqlConn);
    }
    MetadataConnectionUtils.closeDerbyDriver();
  }
}",0.9349503858875412
125370,"@SuppressWarnings(""String_Node_Str"") public Object getValue(Object bean,String idColumn){
  TableViewerCreatorColumn column=tableViewerCreator.getColumn(idColumn);
  ModifiedObjectInfo modifiedObjectInfo=this.tableViewerCreator.getModifiedObjectInfo();
  modifiedObjectInfo.setCurrentModifiedBean(bean);
  modifiedObjectInfo.setCurrentModifiedColumn(column);
  modifiedObjectInfo.setCurrentModifiedIndex(this.tableViewerCreator.getInputList().indexOf(bean));
  Object returnValue=null;
  if (column.getColumnCellModifier() != null) {
    returnValue=column.getColumnCellModifier().getValue(bean);
  }
  if (returnValue == null) {
    Object value=AccessorUtils.get(bean,column);
    if (column.getCellEditorValueAdapter() != null) {
      returnValue=column.getCellEditorValueAdapter().getCellEditorTypedValue(column.getCellEditor(),value);
    }
 else {
      returnValue=value;
    }
    if (returnValue == null && column.getDefaultInternalValue() != null) {
      returnValue=column.getDefaultInternalValue();
    }
    modifiedObjectInfo.setOriginalPropertyBeanValue(returnValue);
    modifiedObjectInfo.setPreviousPropertyBeanValue(returnValue);
  }
  return returnValue;
}","@SuppressWarnings(""String_Node_Str"") public Object getValue(Object bean,String idColumn){
  TableViewerCreatorColumnNotModifiable column=tableViewerCreator.getColumn(idColumn);
  ModifiedObjectInfo modifiedObjectInfo=this.tableViewerCreator.getModifiedObjectInfo();
  modifiedObjectInfo.setCurrentModifiedBean(bean);
  modifiedObjectInfo.setCurrentModifiedColumn(column);
  modifiedObjectInfo.setCurrentModifiedIndex(this.tableViewerCreator.getInputList().indexOf(bean));
  Object returnValue=null;
  if (column.getColumnCellModifier() != null) {
    returnValue=column.getColumnCellModifier().getValue(bean);
  }
  if (returnValue == null) {
    Object value=AccessorUtils.get(bean,column);
    if (column.getCellEditorValueAdapter() != null) {
      returnValue=column.getCellEditorValueAdapter().getCellEditorTypedValue(column.getCellEditor(),value);
    }
 else {
      returnValue=value;
    }
    if (returnValue == null && column.getDefaultInternalValue() != null) {
      returnValue=column.getDefaultInternalValue();
    }
    modifiedObjectInfo.setOriginalPropertyBeanValue(returnValue);
    modifiedObjectInfo.setPreviousPropertyBeanValue(returnValue);
  }
  return returnValue;
}",0.9945124525116082
125371,"@SuppressWarnings(""String_Node_Str"") public void modify(Object tableItem,String idColumn,Object value){
  if (((TableItem)tableItem).isDisposed()) {
    log.warn(Messages.getString(""String_Node_Str""),new Exception());
    return;
  }
  Object bean=((TableItem)tableItem).getData();
  TableViewerCreatorColumn column=tableViewerCreator.getColumn(idColumn);
  boolean modifiedByColumnCellModifier=false;
  if (column.getColumnCellModifier() != null) {
    modifiedByColumnCellModifier=column.getColumnCellModifier().modify(bean,value);
  }
  if (!modifiedByColumnCellModifier && column.getBeanPropertyAccessors() != null) {
    Object typedValue=null;
    if (column.getCellEditorValueAdapter() != null) {
      typedValue=column.getCellEditorValueAdapter().getOriginalTypedValue(column.getCellEditor(),value);
    }
 else {
      typedValue=value;
    }
    if (typedValue == null && column.getDefaultInternalValue() != null) {
      typedValue=column.getDefaultInternalValue();
    }
    Object previousValue=AccessorUtils.get(bean,column);
    boolean needCommand=true;
    if (column.getCellEditor() != null && column.getCellEditor().getControl() != null) {
      needCommand=column.getCellEditor().getControl().isEnabled();
    }
    tableViewerCreator.setBeanValue(column,bean,typedValue,needCommand);
    fireCellEditorApplied((TableItem)tableItem,bean,column,value,previousValue,typedValue);
  }
  ModifiedObjectInfo modifiedObjectInfo=this.tableViewerCreator.getModifiedObjectInfo();
  modifiedObjectInfo.setPreviousModifiedBean(bean);
  modifiedObjectInfo.setPreviousModifiedIndex(modifiedObjectInfo.getCurrentModifiedIndex());
  modifiedObjectInfo.setCurrentModifiedBean(null);
  modifiedObjectInfo.setPreviousModifiedColumn(modifiedObjectInfo.getCurrentModifiedColumn());
  modifiedObjectInfo.setCurrentModifiedColumn(null);
  modifiedObjectInfo.setOriginalPropertyBeanValue(null);
}","@SuppressWarnings(""String_Node_Str"") public void modify(Object tableItem,String idColumn,Object value){
  if (((TableItem)tableItem).isDisposed()) {
    log.warn(Messages.getString(""String_Node_Str""),new Exception());
    return;
  }
  Object bean=((TableItem)tableItem).getData();
  TableViewerCreatorColumn column=tableViewerCreator.getModifiableColumn(idColumn);
  boolean modifiedByColumnCellModifier=false;
  if (column.getColumnCellModifier() != null) {
    modifiedByColumnCellModifier=column.getColumnCellModifier().modify(bean,value);
  }
  if (!modifiedByColumnCellModifier && column.getBeanPropertyAccessors() != null) {
    Object typedValue=null;
    if (column.getCellEditorValueAdapter() != null) {
      typedValue=column.getCellEditorValueAdapter().getOriginalTypedValue(column.getCellEditor(),value);
    }
 else {
      typedValue=value;
    }
    if (typedValue == null && column.getDefaultInternalValue() != null) {
      typedValue=column.getDefaultInternalValue();
    }
    Object previousValue=AccessorUtils.get(bean,column);
    boolean needCommand=true;
    if (column.getCellEditor() != null && column.getCellEditor().getControl() != null) {
      needCommand=column.getCellEditor().getControl().isEnabled();
    }
    tableViewerCreator.setBeanValue(column,bean,typedValue,needCommand);
    fireCellEditorApplied((TableItem)tableItem,bean,column,value,previousValue,typedValue);
  }
  ModifiedObjectInfo modifiedObjectInfo=this.tableViewerCreator.getModifiedObjectInfo();
  modifiedObjectInfo.setPreviousModifiedBean(bean);
  modifiedObjectInfo.setPreviousModifiedIndex(modifiedObjectInfo.getCurrentModifiedIndex());
  modifiedObjectInfo.setCurrentModifiedBean(null);
  modifiedObjectInfo.setPreviousModifiedColumn(modifiedObjectInfo.getCurrentModifiedColumn());
  modifiedObjectInfo.setCurrentModifiedColumn(null);
  modifiedObjectInfo.setOriginalPropertyBeanValue(null);
}",0.9973656480505796
125372,"/** 
 * DOC amaumont Comment method ""fireCellEditorApplied"".
 * @param tableItem
 * @param bean
 * @param idColumn
 * @param cellEditorAppliedValue
 * @param newValue
 */
private void fireCellEditorApplied(TableItem tableItem,Object bean,TableViewerCreatorColumn column,Object cellEditorAppliedValue,Object previousValue,Object newValue){
  TableCellValueModifiedEvent event=new TableCellValueModifiedEvent(tableItem,bean,column,cellEditorAppliedValue,newValue);
  final Object[] listenerArray=cellEditorAppliedListeners.getListeners();
  for (  Object element : listenerArray) {
    ((ITableCellValueModifiedListener)element).cellValueModified(event);
  }
  if (column.getCellEditorAppliedListener() != null) {
    column.getCellEditorAppliedListener().cellValueModified(event);
  }
}","/** 
 * DOC amaumont Comment method ""fireCellEditorApplied"".
 * @param tableItem
 * @param bean
 * @param idColumn
 * @param cellEditorAppliedValue
 * @param newValue
 */
private void fireCellEditorApplied(TableItem tableItem,Object bean,TableViewerCreatorColumnNotModifiable column,Object cellEditorAppliedValue,Object previousValue,Object newValue){
  TableCellValueModifiedEvent event=new TableCellValueModifiedEvent(tableItem,bean,column,cellEditorAppliedValue,newValue);
  final Object[] listenerArray=cellEditorAppliedListeners.getListeners();
  for (  Object element : listenerArray) {
    ((ITableCellValueModifiedListener)element).cellValueModified(event);
  }
  if (column.getCellEditorAppliedListener() != null) {
    column.getCellEditorAppliedListener().cellValueModified(event);
  }
}",0.9917877447883764
125373,"public boolean canModify(Object bean,String idColumn){
  TableViewerCreatorColumn column=tableViewerCreator.getColumn(idColumn);
  if (column.getColumnCellModifier() != null) {
    return column.getColumnCellModifier().canModify(bean);
  }
  return tableViewerCreator.getColumn(idColumn).isModifiable();
}","public boolean canModify(Object bean,String idColumn){
  TableViewerCreatorColumn column=tableViewerCreator.getModifiableColumn(idColumn);
  if (column != null && column.getColumnCellModifier() != null) {
    return column.getColumnCellModifier().canModify(bean);
  }
  return tableViewerCreator.getColumn(idColumn).isModifiable();
}",0.8808777429467085
125374,public Item getParentJobItem(Item item) throws PersistenceException ;,Item getParentJobItem(Item item) throws PersistenceException ;,0.9465648854961832
125375,"@SuppressWarnings(""String_Node_Str"") public void modify(Object tableItem,String idColumn,Object value){
  if (((TableItem)tableItem).isDisposed()) {
    log.warn(Messages.getString(""String_Node_Str""),new Exception());
    return;
  }
  Object bean=((TableItem)tableItem).getData();
  TableViewerCreatorColumn column=tableViewerCreator.getModifiableColumn(idColumn);
  boolean modifiedByColumnCellModifier=false;
  if (column.getColumnCellModifier() != null) {
    modifiedByColumnCellModifier=column.getColumnCellModifier().modify(bean,value);
  }
  if (!modifiedByColumnCellModifier && column.getBeanPropertyAccessors() != null) {
    Object typedValue=null;
    if (column.getCellEditorValueAdapter() != null) {
      typedValue=column.getCellEditorValueAdapter().getOriginalTypedValue(column.getCellEditor(),value);
    }
 else {
      typedValue=value;
    }
    if (typedValue == null && column.getDefaultInternalValue() != null) {
      typedValue=column.getDefaultInternalValue();
    }
    Object previousValue=AccessorUtils.get(bean,column);
    boolean needCommand=true;
    if (column.getCellEditor() != null && column.getCellEditor().getControl() != null) {
      needCommand=column.getCellEditor().getControl().isEnabled();
    }
    tableViewerCreator.setBeanValue(column,bean,typedValue,needCommand);
    fireCellEditorApplied((TableItem)tableItem,bean,column,value,previousValue,typedValue);
  }
  ModifiedObjectInfo modifiedObjectInfo=this.tableViewerCreator.getModifiedObjectInfo();
  modifiedObjectInfo.setPreviousModifiedBean(bean);
  modifiedObjectInfo.setPreviousModifiedIndex(modifiedObjectInfo.getCurrentModifiedIndex());
  modifiedObjectInfo.setCurrentModifiedBean(null);
  modifiedObjectInfo.setPreviousModifiedColumn(modifiedObjectInfo.getCurrentModifiedColumn());
  modifiedObjectInfo.setCurrentModifiedColumn(null);
  modifiedObjectInfo.setOriginalPropertyBeanValue(null);
}","@SuppressWarnings(""String_Node_Str"") public void modify(Object tableItem,String idColumn,Object value){
  if (((TableItem)tableItem).isDisposed()) {
    log.warn(Messages.getString(""String_Node_Str""),new Exception());
    return;
  }
  Object bean=((TableItem)tableItem).getData();
  TableViewerCreatorColumn column=tableViewerCreator.getModifiableColumn(idColumn);
  if (column == null) {
    return;
  }
  boolean modifiedByColumnCellModifier=false;
  if (column.getColumnCellModifier() != null) {
    modifiedByColumnCellModifier=column.getColumnCellModifier().modify(bean,value);
  }
  if (!modifiedByColumnCellModifier && column.getBeanPropertyAccessors() != null) {
    Object typedValue=null;
    if (column.getCellEditorValueAdapter() != null) {
      typedValue=column.getCellEditorValueAdapter().getOriginalTypedValue(column.getCellEditor(),value);
    }
 else {
      typedValue=value;
    }
    if (typedValue == null && column.getDefaultInternalValue() != null) {
      typedValue=column.getDefaultInternalValue();
    }
    Object previousValue=AccessorUtils.get(bean,column);
    boolean needCommand=true;
    if (column.getCellEditor() != null && column.getCellEditor().getControl() != null) {
      needCommand=column.getCellEditor().getControl().isEnabled();
    }
    tableViewerCreator.setBeanValue(column,bean,typedValue,needCommand);
    fireCellEditorApplied((TableItem)tableItem,bean,column,value,previousValue,typedValue);
  }
  ModifiedObjectInfo modifiedObjectInfo=this.tableViewerCreator.getModifiedObjectInfo();
  modifiedObjectInfo.setPreviousModifiedBean(bean);
  modifiedObjectInfo.setPreviousModifiedIndex(modifiedObjectInfo.getCurrentModifiedIndex());
  modifiedObjectInfo.setCurrentModifiedBean(null);
  modifiedObjectInfo.setPreviousModifiedColumn(modifiedObjectInfo.getCurrentModifiedColumn());
  modifiedObjectInfo.setCurrentModifiedColumn(null);
  modifiedObjectInfo.setOriginalPropertyBeanValue(null);
}",0.9895995839833592
125376,"protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check && !columns.next()) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
      columns.beforeFirst();
    }
    EDatabaseTypeName eDatabaseType=EDatabaseTypeName.getTypeFromDisplayName(databaseType);
    boolean isOracleProduct=false;
    if (eDatabaseType != null) {
      isOracleProduct=""String_Node_Str"".equalsIgnoreCase(eDatabaseType.getProduct());
    }
    boolean isUseAllSynonyms=extractMeta.isUseAllSynonyms();
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=extractMeta.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        final ICoreService coreService=getCoreService();
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (isUseAllSynonyms) {
          typeName=""String_Node_Str"";
        }
        String dbType=extractMeta.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        if (EDatabaseTypeName.INFORMIX.getDisplayName().equals(metadataConnection.getDbType())) {
          String tn=MetadataConnectionUtils.getColumnTypeName(dbMetaData.getConnection(),fetchTableName,columnIndex);
          if (tn != null) {
            dbType=tn;
          }
        }
        dbType=dbType.toUpperCase().trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize=new Integer(0);
        Integer intMetaDataInfo=new Integer(0);
        if (isOracleProduct && isUseAllSynonyms) {
          setLengthAndPrecision(metadataColumn,columns,dbType);
          columnSize=(int)metadataColumn.getLength();
          intMetaDataInfo=(int)metadataColumn.getPrecision();
        }
 else {
          columnSize=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
          metadataColumn.setLength(columnSize);
          intMetaDataInfo=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
        }
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=""String_Node_Str"";
        String commentInfo=""String_Node_Str"";
        if (isOracleProduct && isUseAllSynonyms) {
          metadataColumn.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
          String defaultSelectedDbType=mappingTypeRetriever.getDefaultSelectedDbType(talendType);
          metadataColumn.setSourceType(defaultSelectedDbType);
        }
 else {
          metadataColumn.setNullable(extractMeta.getBooleanMetaDataInfo(columns,""String_Node_Str""));
          stringMetaDataInfo=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
          commentInfo=extractMeta.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
          if (commentInfo != null && commentInfo.length() > 0) {
            commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
          }
        }
        metadataColumn.setComment(commentInfo);
        if (isOracleProduct && isUseAllSynonyms) {
          metadataColumn.setName(label2);
        }
 else {
          addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
          checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        }
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        extractMeta.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    Status status=new Status(IStatus.ERROR,""String_Node_Str"",0,""String_Node_Str"",e);
    ErrorDialog errorDialog=new ErrorDialog(null,""String_Node_Str"",null,status,IStatus.ERROR);
    errorDialog.open();
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}","protected List<TdColumn> extractColumns(DatabaseMetaData dbMetaData,IMetadataConnection metadataConnection,String databaseType,String catalogName,String schemaName,String tableName){
  MappingTypeRetriever mappingTypeRetriever=null;
  columnIndex=0;
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  List<String> columnLabels=new ArrayList<String>();
  Map<String,String> primaryKeys=new HashMap<String,String>();
  ResultSet columns=null;
  Statement stmt=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataConnection.getDbType());
    if (isAccess) {
      primaryKeys=retrievePrimaryKeys(dbMetaData,null,null,tableName);
    }
 else {
      primaryKeys=retrievePrimaryKeys(dbMetaData,catalogName,schemaName,tableName);
    }
    synchroViewStructure(catalogName,schemaName,tableName);
    columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,tableName);
    if (MetadataConnectionUtils.isMysql(dbMetaData)) {
      boolean check=!Pattern.matches(""String_Node_Str"",tableName);
      if (check && !columns.next()) {
        columns=getColumnsResultSet(dbMetaData,catalogName,schemaName,TalendQuoteUtils.addQuotes(tableName,TalendQuoteUtils.ANTI_QUOTE));
      }
      columns.beforeFirst();
    }
    EDatabaseTypeName eDatabaseType=EDatabaseTypeName.getTypeFromDisplayName(databaseType);
    boolean isOracleProduct=false;
    if (eDatabaseType != null) {
      isOracleProduct=""String_Node_Str"".equalsIgnoreCase(eDatabaseType.getProduct());
    }
    boolean isUseAllSynonyms=extractMeta.isUseAllSynonyms();
    IRepositoryService repositoryService=CoreRuntimePlugin.getInstance().getRepositoryService();
    while (columns.next()) {
      Boolean b=false;
      String fetchTableName=extractMeta.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tableName) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        TdColumn metadataColumn=RelationalFactory.eINSTANCE.createTdColumn();
        String label=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",null);
        label=ManagementTextUtils.filterSpecialChar(label);
        String sub=""String_Node_Str"";
        String sub2=""String_Node_Str"";
        String label2=label;
        if (label != null && label.length() > 0 && label.startsWith(""String_Node_Str"")) {
          sub=label.substring(1);
          if (sub != null && sub.length() > 0) {
            sub2=sub.substring(1);
          }
        }
        final ICoreService coreService=getCoreService();
        if (coreService != null && (coreService.isKeyword(label) || coreService.isKeyword(sub) || coreService.isKeyword(sub2))) {
          label=""String_Node_Str"" + label;
          b=true;
        }
        label=MetadataToolHelper.validateColumnName(label,columnIndex,columnLabels);
        metadataColumn.setLabel(label);
        metadataColumn.setOriginalField(label2);
        columnIndex++;
        if (primaryKeys != null && !primaryKeys.isEmpty() && primaryKeys.get(metadataColumn.getOriginalField()) != null) {
          metadataColumn.setKey(true);
        }
 else {
          metadataColumn.setKey(false);
        }
        String typeName=""String_Node_Str"";
        if (isUseAllSynonyms) {
          typeName=""String_Node_Str"";
        }
        String dbType=extractMeta.getStringMetaDataInfo(columns,typeName,null).toUpperCase();
        if (EDatabaseTypeName.INFORMIX.getDisplayName().equals(metadataConnection.getDbType())) {
          String tn=MetadataConnectionUtils.getColumnTypeName(dbMetaData.getConnection(),fetchTableName,columnIndex);
          if (tn != null) {
            dbType=tn;
          }
        }
        dbType=dbType.toUpperCase().trim();
        dbType=ManagementTextUtils.filterSpecialChar(dbType);
        dbType=handleDBtype(dbType);
        metadataColumn.setSourceType(dbType);
        Integer columnSize=new Integer(0);
        Integer intMetaDataInfo=new Integer(0);
        if (isOracleProduct && isUseAllSynonyms) {
          setLengthAndPrecision(metadataColumn,columns,dbType);
          columnSize=(int)metadataColumn.getLength();
          intMetaDataInfo=(int)metadataColumn.getPrecision();
        }
 else {
          columnSize=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
          metadataColumn.setLength(columnSize);
          intMetaDataInfo=extractMeta.getIntMetaDataInfo(columns,""String_Node_Str"");
        }
        String talendType=null;
        if (metadataConnection.getMapping() != null) {
          mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(metadataConnection.getMapping());
        }
        talendType=mappingTypeRetriever.getDefaultSelectedTalendType(dbType,columnSize,intMetaDataInfo);
        talendType=ManagementTextUtils.filterSpecialChar(talendType);
        if (talendType == null) {
          if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
            talendType=JavaTypesManager.getDefaultJavaType().getId();
            log.warn(Messages.getString(""String_Node_Str"",dbType));
          }
        }
 else {
        }
        metadataColumn.setTalendType(talendType);
        String stringMetaDataInfo=""String_Node_Str"";
        String commentInfo=""String_Node_Str"";
        if (isOracleProduct && isUseAllSynonyms) {
          metadataColumn.setNullable(""String_Node_Str"".equals(columns.getString(GetColumn.NULLABLE.name())));
          String defaultSelectedDbType=mappingTypeRetriever.getDefaultSelectedDbType(talendType);
          metadataColumn.setSourceType(defaultSelectedDbType);
        }
 else {
          metadataColumn.setNullable(extractMeta.getBooleanMetaDataInfo(columns,""String_Node_Str""));
          stringMetaDataInfo=extractMeta.getStringMetaDataInfo(columns,""String_Node_Str"",dbMetaData);
          commentInfo=extractMeta.getStringMetaDataInfo(columns,ExtractManager.REMARKS,null);
          if (commentInfo != null && commentInfo.length() > 0) {
            commentInfo=ManagementTextUtils.filterSpecialChar(commentInfo);
          }
        }
        metadataColumn.setComment(commentInfo);
        if (isOracleProduct && isUseAllSynonyms) {
          metadataColumn.setName(label2);
        }
 else {
          addColumnAttributes(metadataConnection,columns,metadataColumn,label,label2,dbType,columnSize,intMetaDataInfo,commentInfo);
          checkPrecision(metadataColumn,tableName,dbType,intMetaDataInfo);
        }
        if (stringMetaDataInfo != null && stringMetaDataInfo.length() > 0 && stringMetaDataInfo.charAt(0) == 0x0) {
          stringMetaDataInfo=""String_Node_Str"";
        }
        stringMetaDataInfo=ManagementTextUtils.filterSpecialChar(stringMetaDataInfo);
        metadataColumn.setDefaultValue(stringMetaDataInfo);
        extractMeta.handleDefaultValue(metadataColumn,dbMetaData);
        checkTypeForTimestamp(metadataConnection,metadataColumn,dbType);
        metadataColumns.add(metadataColumn);
        columnLabels.add(metadataColumn.getLabel());
      }
    }
    checkComments(metadataConnection,tableName,metadataColumns);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    Status status=new Status(IStatus.ERROR,""String_Node_Str"",0,""String_Node_Str"",e);
    ErrorDialog errorDialog=new ErrorDialog(null,""String_Node_Str"",null,status,IStatus.ERROR);
    errorDialog.open();
    throw new RuntimeException(e);
  }
 finally {
    try {
      if (columns != null) {
        columns.close();
      }
      if (stmt != null) {
        stmt.close();
      }
    }
 catch (    SQLException e) {
      log.error(e.toString());
    }
  }
  return metadataColumns;
}",0.9961230292065132
125377,"@Override public void afterLogon(){
}","@Override public void afterLogon(IProgressMonitor monitor){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
    IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
    try {
      runProcessService.getTalendProcessJavaProject().cleanMavenFiles(monitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
}",0.1343012704174228
125378,public void afterLogon();,public void afterLogon(IProgressMonitor monitor);,0.6756756756756757
125379,"@Override public void dispose(){
  boolean doDispose=isEnableDisposed();
  if (doDispose) {
    this.project=null;
    this.recBinNode=null;
  }
  if (refProject != null) {
    for (    IRepositoryNode refP : refProject.getChildren()) {
      if (refP instanceof IProjectRepositoryNode) {
        if (refP instanceof RepositoryNode) {
          ((RepositoryNode)refP).setEnableDisposed(doDispose);
        }
        refP.dispose();
      }
    }
  }
  for (  DynaEnum<? extends DynaEnum<?>> de : ERepositoryObjectType.values()) {
    if (de instanceof ERepositoryObjectType) {
      RepositoryNode rootRepositoryNode=getRootRepositoryNode((ERepositoryObjectType)de);
      if (rootRepositoryNode != null && !rootRepositoryNode.isDisposed()) {
        rootRepositoryNode.setEnableDisposed(doDispose);
        rootRepositoryNode.dispose();
      }
    }
  }
  if (this.repositoryNodeMap != null) {
    for (    String type : this.repositoryNodeMap.keySet()) {
      RepositoryNode repositoryNode=this.repositoryNodeMap.get(type);
      if (repositoryNode != null && !repositoryNode.isDisposed()) {
        repositoryNode.setEnableDisposed(doDispose);
        repositoryNode.dispose();
      }
    }
    if (doDispose) {
      this.repositoryNodeMap.clear();
    }
  }
  if (doDispose && this.nodeAndProject != null) {
    nodeAndProject.clear();
  }
  if (doDispose) {
    final Field[] declaredFields=this.getClass().getDeclaredFields();
    for (    Field f : declaredFields) {
      f.setAccessible(true);
      try {
        final Object object=f.get(this);
        if (object == defaultProjRepoNode) {
          continue;
        }
        if (object instanceof RepositoryNode) {
          f.set(this,null);
        }
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
    }
  }
  super.dispose();
}","@Override public void dispose(){
  boolean doDispose=isEnableDisposed();
  if (doDispose) {
    this.project=null;
    this.recBinNode=null;
  }
  if (refProject != null) {
    for (    IRepositoryNode refP : refProject.getChildren()) {
      if (refP instanceof IProjectRepositoryNode) {
        if (refP instanceof RepositoryNode) {
          ((RepositoryNode)refP).setEnableDisposed(doDispose);
        }
        refP.dispose();
      }
    }
  }
  for (  DynaEnum<? extends DynaEnum<?>> de : ERepositoryObjectType.values()) {
    if (de instanceof ERepositoryObjectType) {
      RepositoryNode rootRepositoryNode=getRootRepositoryNode((ERepositoryObjectType)de);
      if (rootRepositoryNode != null && !rootRepositoryNode.isDisposed()) {
        rootRepositoryNode.setEnableDisposed(doDispose);
        rootRepositoryNode.dispose();
      }
    }
  }
  if (this.repositoryNodeMap != null) {
    for (    String type : this.repositoryNodeMap.keySet()) {
      RepositoryNode repositoryNode=this.repositoryNodeMap.get(type);
      if (repositoryNode != null && !repositoryNode.isDisposed()) {
        repositoryNode.setEnableDisposed(doDispose);
        repositoryNode.dispose();
      }
    }
    if (doDispose) {
      this.repositoryNodeMap.clear();
    }
  }
  if (doDispose && this.nodeAndProject != null) {
    nodeAndProject.clear();
  }
  if (doDispose) {
    final Field[] declaredFields=this.getClass().getDeclaredFields();
    for (    Field f : declaredFields) {
      f.setAccessible(true);
      try {
        final Object object=f.get(this);
        if (object == defaultProjRepoNode) {
          continue;
        }
        if (object == dummyProjRepoNode) {
          continue;
        }
        if (object instanceof RepositoryNode) {
          f.set(this,null);
        }
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
    }
  }
  super.dispose();
}",0.9807540205641972
125380,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
          IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
          try {
            runProcessService.deleteAllJobs(false);
            runProcessService.getTalendProcessJavaProject().cleanMavenFiles(monitor);
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
          }
 catch (          Exception e) {
            ExceptionHandler.process(e);
          }
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        if (CommonsPlugin.isHeadless()) {
          deleteAllRoutinesAndBeans();
        }
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null) {
        coreService.syncLog4jSettings();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (CommonUIPlugin.isFullyHeadless()) {
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        coreService.syncLibraries(currentMonitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.createStatsLogAndImplicitParamter(project);
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.synchronizeMapptingXML();
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon();
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      if (description.isAutoBuilding()) {
        description.setAutoBuilding(false);
        try {
          workspace.setDescription(description);
        }
 catch (        CoreException e) {
        }
      }
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      checkProjectCompatibility(project);
      if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
        IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
        if (mavenUIService != null) {
          mavenUIService.updateMavenResolver(true);
        }
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      ICoreUIService coreUiService=null;
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreUIService.class)) {
        coreUiService=(ICoreUIService)GlobalServiceRegister.getDefault().getService(ICoreUIService.class);
      }
      if (coreUiService != null) {
        coreUiService.componentsReset();
      }
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      ICoreService coreService=getCoreService();
      if (coreService != null) {
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        coreService.deleteAllJobs(false);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (workspace instanceof Workspace) {
          ((Workspace)workspace).getFileSystemManager().getHistoryStore().clean(currentMonitor);
        }
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        if (CommonsPlugin.isHeadless()) {
          deleteAllRoutinesAndBeans();
        }
        try {
          coreService.syncAllRoutines();
          coreService.syncAllBeans();
        }
 catch (        SystemException e1) {
        }
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      if (coreUiService != null && PluginChecker.isRulesPluginLoaded()) {
        coreUiService.syncAllRules();
      }
      if (monitor != null && monitor.isCanceled()) {
        throw new OperationCanceledException(""String_Node_Str"");
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (coreUiService != null) {
        coreService.syncLog4jSettings();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (CommonUIPlugin.isFullyHeadless()) {
        currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
        currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
        coreService.syncLibraries(currentMonitor);
        TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.createStatsLogAndImplicitParamter(project);
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
        coreService.synchronizeMapptingXML();
        if (monitor != null && monitor.isCanceled()) {
          throw new OperationCanceledException(""String_Node_Str"");
        }
      }
      if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
        ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
        if (tdqRepositoryService != null) {
          tdqRepositoryService.initProxyRepository();
        }
      }
      fullLogonFinished=true;
      this.repositoryFactoryFromProvider.afterLogon(monitor);
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.9564324482910372
125381,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ATreeNode other=(ATreeNode)obj;
  if (this.dataType == null) {
    if (other.dataType != null) {
      return false;
    }
  }
 else   if (!this.dataType.equals(other.dataType)) {
    return false;
  }
  if (this.originalDataType == null) {
    if (other.originalDataType != null) {
      return false;
    }
  }
 else   if (!this.originalDataType.equals(other.originalDataType)) {
    return false;
  }
  if (this.type != other.type) {
    return false;
  }
  if (this.value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!this.value.equals(other.value)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  return true;
}","public boolean equals(Object obj,int depth){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ATreeNode other=(ATreeNode)obj;
  if (this.dataType == null) {
    if (other.dataType != null) {
      return false;
    }
  }
 else   if (!this.dataType.equals(other.dataType)) {
    return false;
  }
  if (this.originalDataType == null) {
    if (other.originalDataType != null) {
      return false;
    }
  }
 else   if (!this.originalDataType.equals(other.originalDataType)) {
    return false;
  }
  if (this.type != other.type) {
    return false;
  }
  if (this.value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!this.value.equals(other.value)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else {
    if (depth > 50) {
      return true;
    }
    if (!this.parent.equals(other.parent,depth + 1)) {
      return false;
    }
  }
  return true;
}",0.91434165442976
125382,"public static void copyFolder(File source,File target,boolean emptyTargetBeforeCopy,final FileFilter sourceFolderFilter,final FileFilter sourceFileFilter,boolean copyFolder) throws IOException {
  if (!target.exists()) {
    target.mkdirs();
  }
  if (emptyTargetBeforeCopy) {
    emptyFolder(target);
  }
  FileFilter folderFilter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.isDirectory() && (sourceFolderFilter == null || sourceFolderFilter.accept(pathname));
    }
  }
;
  FileFilter fileFilter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return !pathname.isDirectory() && (sourceFileFilter == null || sourceFileFilter.accept(pathname));
    }
  }
;
  for (  File current : source.listFiles(folderFilter)) {
    if (copyFolder) {
      File newFolder=new File(target,current.getName());
      newFolder.mkdir();
      copyFolder(current,newFolder,emptyTargetBeforeCopy,sourceFolderFilter,sourceFileFilter,copyFolder);
    }
 else {
      copyFolder(current,target,emptyTargetBeforeCopy,sourceFolderFilter,sourceFileFilter,copyFolder);
    }
  }
  for (  File current : source.listFiles(fileFilter)) {
    File out=new File(target,current.getName());
    copyFile(current,out);
  }
}","public static void copyFolder(File source,File target,boolean emptyTargetBeforeCopy,final FileFilter sourceFolderFilter,final FileFilter sourceFileFilter,boolean copyFolder) throws IOException {
  if (!target.exists()) {
    target.mkdirs();
  }
  if (emptyTargetBeforeCopy) {
    emptyFolder(target);
  }
  FileFilter folderFilter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return pathname.isDirectory() && (sourceFolderFilter == null || sourceFolderFilter.accept(pathname));
    }
  }
;
  FileFilter fileFilter=new FileFilter(){
    @Override public boolean accept(    File pathname){
      return !pathname.isDirectory() && (sourceFileFilter == null || sourceFileFilter.accept(pathname));
    }
  }
;
  File[] folders=source.listFiles(folderFilter);
  if (folders != null) {
    for (    File current : folders) {
      if (copyFolder) {
        File newFolder=new File(target,current.getName());
        newFolder.mkdir();
        copyFolder(current,newFolder,emptyTargetBeforeCopy,sourceFolderFilter,sourceFileFilter,copyFolder);
      }
 else {
        copyFolder(current,target,emptyTargetBeforeCopy,sourceFolderFilter,sourceFileFilter,copyFolder);
      }
    }
  }
  File[] files=source.listFiles(fileFilter);
  if (files != null) {
    for (    File current : files) {
      File out=new File(target,current.getName());
      copyFile(current,out);
    }
  }
}",0.8992537313432836
125383,"@Override public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isAllowMultipleName=(type == ERepositoryObjectType.SQLPATTERNS || type == ERepositoryObjectType.METADATA_FILE_XML);
  String path=""String_Node_Str"";
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if (name.equalsIgnoreCase(current.getProperty().getLabel()) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isAllowMultipleName || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean isNameAvailable(Project project,Item item,String name,List<IRepositoryViewObject>... givenList) throws PersistenceException {
  if (name == null) {
    name=item.getProperty().getLabel();
  }
  if (item instanceof FolderItem) {
    FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
    return !folderHelper.pathExists((FolderItem)item,name);
  }
  ERepositoryObjectType type=ERepositoryObjectType.getItemType(item);
  if (type == ERepositoryObjectType.METADATA_CON_TABLE) {
    return false;
  }
  boolean isAllowMultipleName=(type == ERepositoryObjectType.SQLPATTERNS || type == ERepositoryObjectType.METADATA_FILE_XML);
  String path=""String_Node_Str"";
  if (item.getState() != null) {
    path=item.getState().getPath();
  }
  List<IRepositoryViewObject> list;
  if (givenList.length == 0) {
    list=getAll(project,type,true,false);
  }
 else {
    list=givenList[0];
  }
  for (  IRepositoryViewObject current : list) {
    if ((name.equalsIgnoreCase(current.getProperty().getLabel()) || name.equalsIgnoreCase(current.getProperty().getDisplayName())) && item.getProperty().getId() != current.getProperty().getId()) {
      if (!isAllowMultipleName || current.getProperty().getItem().getState().getPath().equals(path)) {
        return false;
      }
    }
  }
  return true;
}",0.974041069352964
125384,"protected void evaluateName(String name){
  if (name == null || name.length() == 0) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.startsWith(""String_Node_Str"") || !Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),name) || name.trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(name)) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (getProperty() != null && nameStatus.getSeverity() == IStatus.OK) {
    getProperty().setLabel(getPropertyLabel(StringUtils.trimToNull(name)));
    getProperty().setDisplayName(StringUtils.trimToNull(name));
    getProperty().setModificationDate(new Date());
  }
  updatePageStatus();
}","protected void evaluateName(String name){
  if (name == null || name.length() == 0 || StringUtils.trimToNull(name) == null) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"") || !Pattern.matches(RepositoryConstants.getPattern(getRepositoryObjectType()),name)|| name.trim().contains(""String_Node_Str"")|| name.trim().contains(""String_Node_Str"")) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (isKeywords(name) || ""String_Node_Str"".equalsIgnoreCase(name)) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (name.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
  }
 else   if (nameModifiedByUser) {
    if (retrieveNameFinished) {
      if (!isValid(name)) {
        nameStatus=createStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
      }
 else {
        nameStatus=createOkStatus();
      }
    }
 else {
      nameStatus=createStatus(IStatus.ERROR,""String_Node_Str"");
    }
  }
 else {
    nameStatus=createOkStatus();
  }
  if (getProperty() != null && nameStatus.getSeverity() == IStatus.OK) {
    getProperty().setLabel(getPropertyLabel(StringUtils.trimToNull(name)));
    getProperty().setDisplayName(StringUtils.trimToNull(name));
    getProperty().setModificationDate(new Date());
  }
  updatePageStatus();
}",0.9598140152773164
125385,"@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (object instanceof MetadataTableRepositoryObject) {
        MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
        if (table instanceof SAPBWTable) {
          SAPBWTable bwTable=(SAPBWTable)table;
          if (SAPBWTableHelper.TYPE_INFOOBJECT.equals(bwTable.getModelType())) {
            String innerType=bwTable.getInnerIOType();
            if (innerType != null && !innerType.equals(SAPBWTableHelper.IO_INNERTYPE_BASIC)) {
              label=label + ""String_Node_Str"" + innerType+ ""String_Node_Str"";
            }
          }
        }
      }
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}","@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    object.getProperty();
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (object instanceof MetadataTableRepositoryObject) {
        MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
        if (table instanceof SAPBWTable) {
          SAPBWTable bwTable=(SAPBWTable)table;
          if (SAPBWTableHelper.TYPE_INFOOBJECT.equals(bwTable.getModelType())) {
            String innerType=bwTable.getInnerIOType();
            if (innerType != null && !innerType.equals(SAPBWTableHelper.IO_INNERTYPE_BASIC)) {
              label=label + ""String_Node_Str"" + innerType+ ""String_Node_Str"";
            }
          }
        }
      }
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}",0.9961854460093896
125386,"protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
        lastVersion=selectedImportItem.getExistingItemWithSameName();
      }
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            String importingLabel=selectedImportItem.getProperty().getLabel();
            String existLabel=lastVersionBackup.getProperty().getLabel();
            boolean isDeleteOnRemote=isNeedDeleteOnRemote(importingLabel,existLabel);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion(),isDeleteOnRemote);
                }
              }
            }
;
            if (isDeleteOnRemote) {
              repositoryWorkUnit.setForceTransaction(true);
            }
 else {
              repositoryWorkUnit.setForceTransaction(false);
            }
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(selectedImportItem.getItemName() + ""String_Node_Str"" + e.getMessage()+ ""String_Node_Str""+ path);
      logError(e);
    }
  }
}","protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
        lastVersion=selectedImportItem.getExistingItemWithSameName();
      }
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            String importingLabel=selectedImportItem.getProperty().getLabel();
            String existLabel=lastVersionBackup.getProperty().getLabel();
            final boolean isDeleteOnRemote=isNeedDeleteOnRemote(importingLabel,existLabel);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion(),isDeleteOnRemote);
                }
              }
            }
;
            if (isDeleteOnRemote) {
              repositoryWorkUnit.setForceTransaction(true);
            }
 else {
              repositoryWorkUnit.setForceTransaction(false);
            }
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(selectedImportItem.getItemName() + ""String_Node_Str"" + e.getMessage()+ ""String_Node_Str""+ path);
      logError(e);
    }
  }
}",0.9995089212637092
125387,"/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return PASS_COVER + PASS_COVER;
  }
  if (ContextParameterUtils.containContextVariables(password)) {
    return password;
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}","/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return PASS_COVER + PASS_COVER;
  }
  if (ContextParameterUtils.containContextVariables(password)) {
    return password;
  }
  if (!TalendQuoteUtils.isCommonString(password)) {
    return password;
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}",0.9261744966442952
125388,"public void checkInit(Boolean lastVersion,Boolean readonly,boolean load) throws PersistenceException {
  if (loadedProcess instanceof ILastVersionChecker) {
    ((ILastVersionChecker)loadedProcess).setLastVersion(lastVersion);
  }
  if (load) {
    loadProcess();
  }
 else {
    saveProcessBefore();
    saveProcess(null,null,true);
  }
  if (readonly == null) {
    checkReadOnly();
  }
 else {
    setReadOnly(readonly);
  }
}","public void checkInit(Boolean lastVersion,Boolean readonly,boolean load) throws PersistenceException {
  if (loadedProcess instanceof ILastVersionChecker) {
    ((ILastVersionChecker)loadedProcess).setLastVersion(lastVersion);
  }
  if (load) {
    loadProcess();
  }
 else {
    saveProcessBefore();
    saveProcess(null,null,true);
  }
  if (readonly == null) {
    readonly=checkReadOnly();
    setReadOnly(readonly);
  }
 else {
    setReadOnly(readonly);
  }
}",0.930648769574944
125389,"public void setLazyLoad(boolean lazyLoad){
  this.lazyLoad=lazyLoad;
}","public void setLazyLoad(boolean lazyLoad){
  if (!Boolean.getBoolean(""String_Node_Str"")) {
    this.lazyLoad=lazyLoad;
  }
}",0.7216494845360825
125390,"protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          if (!getTable().isDisposed()) {
            getTable().forceFocus();
          }
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
  if ((this.getTable().getStyle() & SWT.VIRTUAL) != 0) {
    getTable().addPaintListener(new PaintListener(){
      @Override public void paintControl(      PaintEvent event){
        if (tableEditorManager != null) {
          tableEditorManager.paintVisibleAreaEditor(event);
        }
      }
    }
);
  }
}","protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          if (!getTable().isDisposed()) {
            getTable().forceFocus();
          }
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
  if (isLazyLoad()) {
    getTable().addPaintListener(new PaintListener(){
      @Override public void paintControl(      PaintEvent event){
        if (tableEditorManager != null) {
          tableEditorManager.paintVisibleAreaEditor(event);
        }
      }
    }
);
  }
}",0.9925597180524736
125391,"/** 
 * This method is used to generate query for a DQ rule + component params.
 * @param dbType (value = SupportDBUrlType.dbkey)
 * @param catalog
 * @param schema
 * @param table
 * @param metadataTable
 * @param ruleParam
 * @param isInvalidRowsComponent
 * @param whereClause
 */
public String getQueryByRule(IElementParameter ruleParam,IElementParameter dbType,IElementParameter catalog,IElementParameter schema,IElementParameter table,IMetadataTable metadataTable,boolean isInvalidRowsComponent,IElementParameter whereClause);","/** 
 * This method is used to generate query for a DQ rule + component params.
 * @param dbType (value = SupportDBUrlType.dbkey)
 * @param dbName
 * @param schema
 * @param table
 * @param metadataTable
 * @param ruleParam
 * @param isInvalidRowsComponent
 * @param whereClause
 * @Deprecated please use{@link ITDQRuleService#getQueryByRule(IElementParameter,IElementParameter,String,String,String,IMetadataTable,boolean,String)}instead of it else maybe exist a context issue
 */
@Deprecated public String getQueryByRule(IElementParameter ruleParam,IElementParameter dbType,IElementParameter dbName,IElementParameter schema,IElementParameter table,IMetadataTable metadataTable,boolean isInvalidRowsComponent,IElementParameter whereClause);",0.8066037735849056
125392,"@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  ArrayList<String> DBColumnsExisted=getDBColumnsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      if (copy.getOriginalDbColumnName() != null && !StringUtils.isEmpty(copy.getOriginalDbColumnName())) {
        String nextGeneratedDbColumnName=validateColumnName(copy.getOriginalDbColumnName(),DBColumnsExisted);
        copy.setOriginalDbColumnName(nextGeneratedDbColumnName);
      }
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}","@Override public List createPastableBeansList(ExtendedTableModel extendedTable,List copiedObjectsList){
  ArrayList addItemList=new ArrayList();
  ArrayList list=new ArrayList();
  ArrayList<String> labelsExisted=getLabelsExisted(extendedTable);
  ArrayList<String> DBColumnsExisted=getDBColumnsExisted(extendedTable);
  for (  Object current : copiedObjectsList) {
    if (current instanceof IMetadataColumn) {
      IMetadataColumn copy=((IMetadataColumn)current).clone();
      copy.setUsefulColumn(true);
      String nextGeneratedColumnName=((MetadataTableEditor)extendedTable).getNextGeneratedColumnName(copy.getLabel());
      if (labelsExisted.contains(nextGeneratedColumnName)) {
        nextGeneratedColumnName=validateColumnName(nextGeneratedColumnName,labelsExisted);
      }
      labelsExisted.add(nextGeneratedColumnName);
      copy.setLabel(nextGeneratedColumnName);
      if (copy.getOriginalDbColumnName() != null && !StringUtils.isEmpty(copy.getOriginalDbColumnName())) {
        String nextGeneratedDbColumnName=validateColumnName(copy.getOriginalDbColumnName(),DBColumnsExisted);
        copy.setOriginalDbColumnName(nextGeneratedDbColumnName);
      }
      addItemList.add(copy);
    }
 else     if (current instanceof MetadataColumn) {
      MetadataTableEditor tableEditor=(MetadataTableEditor)extendedTable;
      MetadataColumn metadataColumn=(MetadataColumn)current;
      String nextGeneratedColumnName=metadataColumn.getLabel();
      String tempNewColumnName=""String_Node_Str"";
      boolean iMetaColumnUnique=false;
      boolean metaColumnUnique=false;
      while (iMetaColumnUnique == false || metaColumnUnique == false) {
        nextGeneratedColumnName=tableEditor.getNextGeneratedColumnName(nextGeneratedColumnName,null);
        iMetaColumnUnique=true;
        metaColumnUnique=false;
        if (list.size() == 0)         metaColumnUnique=true;
 else {
          tempNewColumnName=this.getUniqueString(list,nextGeneratedColumnName);
          if (tempNewColumnName.equals(nextGeneratedColumnName))           metaColumnUnique=true;
 else {
            metaColumnUnique=false;
            nextGeneratedColumnName=tempNewColumnName;
          }
        }
      }
      MetadataColumn newColumnCopy=new ConnectionFactoryImpl().copy(metadataColumn,nextGeneratedColumnName);
      IMetadataColumn copy=(ConvertionHelper.convertToIMetaDataColumn(newColumnCopy)).clone();
      copy.setLabel(nextGeneratedColumnName);
      addItemList.add(copy);
      list.add(nextGeneratedColumnName);
    }
  }
  return addItemList;
}",0.9932991722506898
125393,"public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (ERepositoryObjectType.getAllTypesOfProcess().contains(type) || type == ERepositoryObjectType.JOBLET) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.PIG_UDF || ""String_Node_Str"".equals(type.getType())) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}","public static String getPattern(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.FOLDER) {
    return FOLDER_PATTERN;
  }
 else   if (ERepositoryObjectType.getAllTypesOfProcess().contains(type) || type == ERepositoryObjectType.JOBLET || type == ERepositoryObjectType.JOB_SCRIPT) {
    return CODE_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.ROUTINES || type == ERepositoryObjectType.PIG_UDF || ""String_Node_Str"".equals(type.getType())) {
    return ROUTINES_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT || type == ERepositoryObjectType.TDQ_DATA_PROFILING || type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT || type == ERepositoryObjectType.TDQ_REPORT_ELEMENT || type == ERepositoryObjectType.TDQ_LIBRARIES || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT || type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT || type == ERepositoryObjectType.TDQ_RULES || type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT) {
    return TDQ_ALL_ITEM_PATTERN;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS || type == ERepositoryObjectType.METADATA_FILE_DELIMITED || type == ERepositoryObjectType.METADATA_FILE_POSITIONAL || type == ERepositoryObjectType.METADATA_FILE_REGEXP || type == ERepositoryObjectType.METADATA_FILE_XML || type == ERepositoryObjectType.METADATA_FILE_EXCEL || type == ERepositoryObjectType.METADATA_FILE_LDIF || type == ERepositoryObjectType.METADATA_LDAP_SCHEMA || type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA || type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA || type == ERepositoryObjectType.METADATA_MDMCONNECTION || type == ERepositoryObjectType.METADATA_FILE_HL7 || type == ERepositoryObjectType.METADATA_FILE_RULES || type == ERepositoryObjectType.METADATA_FILE_EBCDIC || type == ERepositoryObjectType.METADATA_WSDL_SCHEMA || type == ERepositoryObjectType.METADATA_VALIDATION_RULES || type == ERepositoryObjectType.METADATA_FILE_FTP || type == ERepositoryObjectType.METADATA_EDIFACT) {
    return METADATA_NAME_PATTERN;
  }
 else   if (type != null && ""String_Node_Str"".equals(type.getType())) {
    return SERVICES_NAME_PATTERN;
  }
 else   if (type != null && type.getType() != null && type.getType().startsWith(""String_Node_Str"")) {
    return MDM_ITEM_PATTERN;
  }
 else {
    return TDQ_ALL_ITEM_PATTERN;
  }
}",0.9910786699107867
125394,"public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException ;","public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin,boolean isDeleteOnRemote) throws PersistenceException ;",0.9258160237388724
125395,"@Override public void forceDeleteObjectPhysical(IRepositoryViewObject objToDelete,String version) throws PersistenceException {
  this.repositoryFactoryFromProvider.deleteObjectPhysical(projectManager.getCurrentProject(),objToDelete,version);
  String str[]=new String[]{objToDelete.toString(),getRepositoryContext().getUser().toString()};
  log.info(Messages.getString(""String_Node_Str"",str));
}","@Override public void forceDeleteObjectPhysical(IRepositoryViewObject objToDelete,String version,boolean isDeleteOnRemote) throws PersistenceException {
  this.repositoryFactoryFromProvider.deleteObjectPhysical(projectManager.getCurrentProject(),objToDelete,version,isDeleteOnRemote);
  String str[]=new String[]{objToDelete.toString(),getRepositoryContext().getUser().toString()};
  log.info(Messages.getString(""String_Node_Str"",str));
}",0.9496402877697842
125396,"public void forceDeleteObjectPhysical(IRepositoryViewObject objToDelete,String version) throws PersistenceException ;","public void forceDeleteObjectPhysical(IRepositoryViewObject objToDelete,String version,boolean isDeleteOnRemote) throws PersistenceException ;",0.9034749034749034
125397,"protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
        lastVersion=selectedImportItem.getExistingItemWithSameName();
      }
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
                }
              }
            }
;
            repositoryWorkUnit.setForceTransaction(true);
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(selectedImportItem.getItemName() + ""String_Node_Str"" + e.getMessage()+ ""String_Node_Str""+ path);
      logError(e);
    }
  }
}","protected void doImportItem(IProgressMonitor monitor,ResourcesManager resManager,ImportItem selectedImportItem,boolean overwrite,IPath destinationPath,Set<String> overwriteDeletedItems,Set<String> idDeletedBeforeImport){
  final Item item=selectedImportItem.getItem();
  if (item != null) {
    final ProxyRepositoryFactory repFactory=ProxyRepositoryFactory.getInstance();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    IPath path=checkAndCreatePath(selectedImportItem,destinationPath);
    try {
      Item tmpItem=item;
      String id=selectedImportItem.getProperty().getId();
      IRepositoryViewObject lastVersion=selectedImportItem.getExistingItemWithSameId();
      if (selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
        lastVersion=selectedImportItem.getExistingItemWithSameName();
      }
      if (lastVersion != null && overwrite && !selectedImportItem.isLocked() && (selectedImportItem.getState() == State.ID_EXISTED || selectedImportItem.getState() == State.NAME_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED || selectedImportItem.getState() == State.NAME_AND_ID_EXISTED_BOTH) && !ImportCacheHelper.getInstance().getDeletedItems().contains(id)) {
        if (overwriteDeletedItems != null && !overwriteDeletedItems.contains(id)) {
          ERepositoryStatus status=repFactory.getStatus(lastVersion);
          if (status == ERepositoryStatus.DELETED) {
            repFactory.restoreObject(lastVersion,path);
          }
          overwriteDeletedItems.add(id);
        }
        if (selectedImportItem.getState().equals(ImportItem.State.NAME_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
          final IRepositoryViewObject lastVersionBackup=lastVersion;
          if (idDeletedBeforeImport != null && !idDeletedBeforeImport.contains(id)) {
            final List<IRepositoryViewObject> allVersionToDelete=repFactory.getAllVersion(ProjectManager.getInstance().getCurrentProject(),lastVersionBackup.getId(),false);
            String importingLabel=selectedImportItem.getProperty().getLabel();
            String existLabel=lastVersionBackup.getProperty().getLabel();
            boolean isDeleteOnRemote=isNeedDeleteOnRemote(importingLabel,existLabel);
            RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
              @Override public void run() throws PersistenceException {
                for (                IRepositoryViewObject currentVersion : allVersionToDelete) {
                  repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion(),isDeleteOnRemote);
                }
              }
            }
;
            if (isDeleteOnRemote) {
              repositoryWorkUnit.setForceTransaction(true);
            }
 else {
              repositoryWorkUnit.setForceTransaction(false);
            }
            repositoryWorkUnit.setRefreshRepository(false);
            ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
            idDeletedBeforeImport.add(id);
          }
        }
        lastVersion=null;
      }
      User author=selectedImportItem.getProperty().getAuthor();
      if (author != null) {
        if (!repFactory.setAuthorByLogin(tmpItem,author.getLogin())) {
          tmpItem.getProperty().setAuthor(null);
        }
      }
      beforeCreatingItem(selectedImportItem);
      final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
      if (lastVersion == null || selectedImportItem.getState().equals(ImportItem.State.ID_EXISTED) || selectedImportItem.getState().equals(ImportItem.State.NAME_AND_ID_EXISTED_BOTH)) {
        repFactory.create(tmpItem,path,true);
        afterCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else       if (VersionUtils.compareTo(lastVersion.getProperty().getVersion(),tmpItem.getProperty().getVersion()) < 0) {
        repFactory.forceCreate(tmpItem,path);
        afterForceCreatedItem(resManager,selectedImportItem);
        selectedImportItem.setImported(true);
      }
 else {
        PersistenceException e=new PersistenceException(Messages.getString(""String_Node_Str"",tmpItem.getProperty()));
        selectedImportItem.addError(e.getMessage());
        logError(e);
      }
      if (selectedImportItem.isImported()) {
        selectedImportItem.setImportPath(path.toPortableString());
        selectedImportItem.setRepositoryType(itemType);
        selectedImportItem.setItemId(selectedImportItem.getProperty().getId());
        selectedImportItem.setItemVersion(selectedImportItem.getProperty().getVersion());
        repObjectcache.addToCache(tmpItem);
      }
      if (tmpItem.getState() != null && itemType != null) {
        final Set<String> folders=ImportCacheHelper.getInstance().getRestoreFolder().getFolders(itemType);
        if (folders != null) {
          for (          String folderPath : folders) {
            if (folderPath != null && folderPath.equals(path.toString())) {
              FolderItem folderItem=repFactory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),itemType,path);
              if (folderItem != null) {
                folderItem.getState().setDeleted(false);
                while (!(folderItem.getParent() instanceof Project)) {
                  folderItem=(FolderItem)folderItem.getParent();
                  if (folderItem.getType() == FolderType.SYSTEM_FOLDER_LITERAL) {
                    break;
                  }
                  folderItem.getState().setDeleted(false);
                }
              }
              break;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      selectedImportItem.addError(selectedImportItem.getItemName() + ""String_Node_Str"" + e.getMessage()+ ""String_Node_Str""+ path);
      logError(e);
    }
  }
}",0.9669232721427968
125398,"@Override public void run() throws PersistenceException {
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion());
  }
}","@Override public void run() throws PersistenceException {
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    repFactory.forceDeleteObjectPhysical(lastVersionBackup,currentVersion.getVersion(),isDeleteOnRemote);
  }
}",0.9631236442516268
125399,"/** 
 * Used only for emf related files since this one will update the resourceset.
 * @param resource
 * @throws PersistenceException
 */
protected void deleteResource(Resource resource) throws PersistenceException {
  xmiResourceManager.deleteResource(resource);
}","/** 
 * Used only for emf related files since this one will update the resourceset.
 * @param resource
 * @throws PersistenceException
 */
protected void deleteResource(Resource resource,boolean isDeleteOnRemote) throws PersistenceException {
  xmiResourceManager.deleteResource(resource);
}",0.9551166965888688
125400,"@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (""String_Node_Str"".equals(version)) {
    version=null;
  }
  List<IRepositoryViewObject> allVersionToDelete=getAllVersion(project,objToDelete.getId(),false);
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    String currentVersionValue=currentVersion.getVersion();
    if (version == null || currentVersionValue.equals(version)) {
      if (currentVersion.getRepositoryObjectType() == ERepositoryObjectType.PROCESS || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.JOBLET || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.SPARK_JOBLET || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.SPARK_STREAMING_JOBLET) {
        if (coreSerivce.isAlreadyBuilt(project)) {
          if (currentVersion.getProperty() != null) {
            coreSerivce.removeItemRelations(currentVersion.getProperty().getItem());
          }
        }
      }
      Property currentProperty=currentVersion.getProperty();
      Item currentItem=currentProperty.getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      currentItem.setParent(null);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(currentProperty);
      for (      Resource resource : affectedResources) {
        deleteResource(resource);
      }
      EList<EObject> eCrossReferences=currentItem.eCrossReferences();
      if (eCrossReferences != null) {
        Iterator<EObject> i=eCrossReferences.iterator();
        while (i.hasNext()) {
          EObject object=i.next();
          if (object != null) {
            Resource currentResource=object.eResource();
            if (currentResource == null) {
              if (object.eIsProxy()) {
                URI uri=((InternalEObject)object).eProxyURI().trimFragment();
                ResourceUtils.deleteFile(URIHelper.getFile(uri));
              }
            }
          }
        }
      }
    }
  }
  if (!allVersionToDelete.isEmpty()) {
    RecycleBinManager.getInstance().removeFromRecycleBin(project,allVersionToDelete.get(0).getProperty().getItem());
  }
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}","@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin,boolean isDeleteOnRemote) throws PersistenceException {
  if (""String_Node_Str"".equals(version)) {
    version=null;
  }
  List<IRepositoryViewObject> allVersionToDelete=getAllVersion(project,objToDelete.getId(),false);
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    String currentVersionValue=currentVersion.getVersion();
    if (version == null || currentVersionValue.equals(version)) {
      if (currentVersion.getRepositoryObjectType() == ERepositoryObjectType.PROCESS || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.JOBLET || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.SPARK_JOBLET || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.SPARK_STREAMING_JOBLET) {
        if (coreSerivce.isAlreadyBuilt(project)) {
          if (currentVersion.getProperty() != null) {
            coreSerivce.removeItemRelations(currentVersion.getProperty().getItem());
          }
        }
      }
      Property currentProperty=currentVersion.getProperty();
      Item currentItem=currentProperty.getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      currentItem.setParent(null);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(currentProperty);
      for (      Resource resource : affectedResources) {
        deleteResource(resource,isDeleteOnRemote);
      }
      EList<EObject> eCrossReferences=currentItem.eCrossReferences();
      if (eCrossReferences != null) {
        Iterator<EObject> i=eCrossReferences.iterator();
        while (i.hasNext()) {
          EObject object=i.next();
          if (object != null) {
            Resource currentResource=object.eResource();
            if (currentResource == null) {
              if (object.eIsProxy()) {
                URI uri=((InternalEObject)object).eProxyURI().trimFragment();
                ResourceUtils.deleteFile(URIHelper.getFile(uri));
              }
            }
          }
        }
      }
    }
  }
  if (!allVersionToDelete.isEmpty()) {
    RecycleBinManager.getInstance().removeFromRecycleBin(project,allVersionToDelete.get(0).getProperty().getItem());
  }
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}",0.9913651315789472
125401,"protected void testGetSerializableRoutine(LocalRepositoryFactory repositoryFactory,String path) throws PersistenceException, CoreException {
  Object fullFolder;
  List<IRepositoryViewObject> serializableFromFolder;
  IRepositoryViewObject rvo;
  RoutineItem rItem=createTempRoutineItem(repositoryFactory,path);
  String routineId=rItem.getProperty().getId();
  fullFolder=getFullFolder(repositoryFactory,sampleProject,ERepositoryObjectType.ROUTINES,""String_Node_Str"");
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  rvo=serializableFromFolder.get(0);
  String content=new String(((RoutineItem)(rvo.getProperty().getItem())).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  repositoryFactory.deleteObjectLogical(sampleProject,rvo);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  content=new String(((RoutineItem)(serializableFromFolder.get(0).getProperty().getItem())).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,false,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
  repositoryFactory.deleteObjectPhysical(sampleProject,rvo);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
}","protected void testGetSerializableRoutine(LocalRepositoryFactory repositoryFactory,String path) throws PersistenceException, CoreException {
  Object fullFolder;
  List<IRepositoryViewObject> serializableFromFolder;
  IRepositoryViewObject rvo;
  RoutineItem rItem=createTempRoutineItem(repositoryFactory,path);
  String routineId=rItem.getProperty().getId();
  fullFolder=getFullFolder(repositoryFactory,sampleProject,ERepositoryObjectType.ROUTINES,""String_Node_Str"");
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  rvo=serializableFromFolder.get(0);
  String content=new String(((RoutineItem)(rvo.getProperty().getItem())).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  repositoryFactory.deleteObjectLogical(sampleProject,rvo);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  content=new String(((RoutineItem)(serializableFromFolder.get(0).getProperty().getItem())).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,false,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
  repositoryFactory.deleteObjectPhysical(sampleProject,rvo,false);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,routineId,ERepositoryObjectType.ROUTINES,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
}",0.998467824310521
125402,"protected void testGetSerializableProcess(LocalRepositoryFactory repositoryFactory,String path) throws PersistenceException, CoreException {
  ProcessItem pItem=createTempProcessItem(repositoryFactory,path);
  String jobId=pItem.getProperty().getId();
  Object fullFolder=getFullFolder(repositoryFactory,sampleProject,ERepositoryObjectType.PROCESS,path);
  List<IRepositoryViewObject> serializableFromFolder=repositoryFactory.getSerializableFromFolder(ProjectManager.getInstance().getCurrentProject(),fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  IRepositoryViewObject rvo=serializableFromFolder.get(0);
  assertTrue(((NodeType)((ProcessItem)(serializableFromFolder.get(0).getProperty().getItem())).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  repositoryFactory.deleteObjectLogical(sampleProject,rvo);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  assertTrue(((NodeType)((ProcessItem)(serializableFromFolder.get(0).getProperty().getItem())).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,false,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
  repositoryFactory.deleteObjectPhysical(sampleProject,rvo);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
}","protected void testGetSerializableProcess(LocalRepositoryFactory repositoryFactory,String path) throws PersistenceException, CoreException {
  ProcessItem pItem=createTempProcessItem(repositoryFactory,path);
  String jobId=pItem.getProperty().getId();
  Object fullFolder=getFullFolder(repositoryFactory,sampleProject,ERepositoryObjectType.PROCESS,path);
  List<IRepositoryViewObject> serializableFromFolder=repositoryFactory.getSerializableFromFolder(ProjectManager.getInstance().getCurrentProject(),fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  IRepositoryViewObject rvo=serializableFromFolder.get(0);
  assertTrue(((NodeType)((ProcessItem)(serializableFromFolder.get(0).getProperty().getItem())).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  repositoryFactory.deleteObjectLogical(sampleProject,rvo);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 1);
  assertTrue(((NodeType)((ProcessItem)(serializableFromFolder.get(0).getProperty().getItem())).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,false,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
  repositoryFactory.deleteObjectPhysical(sampleProject,rvo,false);
  serializableFromFolder=repositoryFactory.getSerializableFromFolder(sampleProject,fullFolder,jobId,ERepositoryObjectType.PROCESS,true,true,true,false);
  assertNotNull(serializableFromFolder);
  assertTrue(serializableFromFolder.size() == 0);
}",0.9984464008285864
125403,"private void testProcesspropagateFileName(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(factory,path);
  String processId=processItem.getProperty().getId();
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentName(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  factory.unloadUnlockedResources();
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  assertTrue(((NodeType)(processItem).getProcess().getNode().get(0)).getComponentName().equals(""String_Node_Str""));
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,processId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    assertTrue(((NodeType)((ProcessItem)object.getProperty().getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  objects=factory.getAllVersion(sampleProject,processId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    assertTrue(((NodeType)((ProcessItem)object.getProperty().getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setVersion(""String_Node_Str"");
  processItem.getProperty().setLabel(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,processId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    assertTrue(((NodeType)((ProcessItem)object.getProperty().getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,processId));
}","private void testProcesspropagateFileName(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(factory,path);
  String processId=processItem.getProperty().getId();
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentName(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  factory.unloadUnlockedResources();
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  assertTrue(((NodeType)(processItem).getProcess().getNode().get(0)).getComponentName().equals(""String_Node_Str""));
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,processId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    assertTrue(((NodeType)((ProcessItem)object.getProperty().getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  objects=factory.getAllVersion(sampleProject,processId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    assertTrue(((NodeType)((ProcessItem)object.getProperty().getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setVersion(""String_Node_Str"");
  processItem.getProperty().setLabel(""String_Node_Str"");
  ((NodeType)processItem.getProcess().getNode().get(0)).setComponentVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem);
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,processId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    assertTrue(((NodeType)((ProcessItem)object.getProperty().getItem()).getProcess().getNode().get(0)).getComponentVersion().equals(object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,processId),false);
}",0.9995429616087752
125404,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#moveObject(org.talend.core.model.general.Project)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testMoveObject() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(repositoryFactory,""String_Node_Str"");
  String processId=processItem.getProperty().getId();
  List<IRepositoryViewObject> objects=repositoryFactory.getAllVersion(sampleProject,processId,true);
  final Folder createFolder=repositoryFactory.createFolder(sampleProject,ERepositoryObjectType.PROCESS,new Path(""String_Node_Str""),""String_Node_Str"");
  assertNotNull(createFolder);
  IPath ip=new Path(createFolder.getLabel());
  assertNotNull(objects.get(0));
  repositoryFactory.moveObject(objects.get(0),ip);
  IProject project=ResourceUtils.getProject(sampleProject);
  checkMoveObjectFileExists(project,ERepositoryObjectType.PROCESS,createFolder.getLabel(),processItem.getProperty().getLabel(),processItem.getProperty().getVersion());
  Property property=repositoryFactory.getUptodateProperty(sampleProject,processItem.getProperty());
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property));
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#moveObject(org.talend.core.model.general.Project)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testMoveObject() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(repositoryFactory,""String_Node_Str"");
  String processId=processItem.getProperty().getId();
  List<IRepositoryViewObject> objects=repositoryFactory.getAllVersion(sampleProject,processId,true);
  final Folder createFolder=repositoryFactory.createFolder(sampleProject,ERepositoryObjectType.PROCESS,new Path(""String_Node_Str""),""String_Node_Str"");
  assertNotNull(createFolder);
  IPath ip=new Path(createFolder.getLabel());
  assertNotNull(objects.get(0));
  repositoryFactory.moveObject(objects.get(0),ip);
  IProject project=ResourceUtils.getProject(sampleProject);
  checkMoveObjectFileExists(project,ERepositoryObjectType.PROCESS,createFolder.getLabel(),processItem.getProperty().getLabel(),processItem.getProperty().getVersion());
  Property property=repositoryFactory.getUptodateProperty(sampleProject,processItem.getProperty());
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property),false);
}",0.9977843426883308
125405,"private void testRoutinepropagateFileName2(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  RoutineItem routineItem=createTempRoutineItem(factory,path);
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  String routineId=routineItem.getProperty().getId();
  routineItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,routineId,false);
  assertTrue(objects.size() == 2);
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  assertTrue(objects.size() == 3);
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  assertTrue(objects.size() == 4);
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,routineId));
}","private void testRoutinepropagateFileName2(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  RoutineItem routineItem=createTempRoutineItem(factory,path);
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  String routineId=routineItem.getProperty().getId();
  routineItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,routineId,false);
  assertTrue(objects.size() == 2);
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  assertTrue(objects.size() == 3);
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,routineItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  assertTrue(objects.size() == 4);
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,routineId),false);
}",0.999269717624148
125406,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#createFolder(org.talend.core.model.general.Project)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testMoveFolder() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(repositoryFactory,""String_Node_Str"");
  String processId=processItem.getProperty().getId();
  List<IRepositoryViewObject> objects=repositoryFactory.getAllVersion(sampleProject,processId,""String_Node_Str"",ERepositoryObjectType.PROCESS);
  if (objects.isEmpty()) {
    return;
  }
  final Folder createTargetFolder=repositoryFactory.createFolder(sampleProject,ERepositoryObjectType.PROCESS,new Path(""String_Node_Str""),""String_Node_Str"");
  assertNotNull(createTargetFolder);
  IPath sourcePath=new Path(""String_Node_Str"");
  IPath targetPath=new Path(createTargetFolder.getLabel());
  assertNotNull(objects.get(0));
  repositoryFactory.moveFolder(ERepositoryObjectType.PROCESS,sourcePath,targetPath);
  IProject project=ResourceUtils.getProject(sampleProject);
  checkMoveObjectFileExists(project,ERepositoryObjectType.PROCESS,createTargetFolder.getLabel() + ""String_Node_Str"" + ""String_Node_Str"",processItem.getProperty().getLabel(),processItem.getProperty().getVersion());
  Property property=repositoryFactory.getUptodateProperty(sampleProject,processItem.getProperty());
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property));
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#createFolder(org.talend.core.model.general.Project)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testMoveFolder() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(repositoryFactory,""String_Node_Str"");
  String processId=processItem.getProperty().getId();
  List<IRepositoryViewObject> objects=repositoryFactory.getAllVersion(sampleProject,processId,""String_Node_Str"",ERepositoryObjectType.PROCESS);
  if (objects.isEmpty()) {
    return;
  }
  final Folder createTargetFolder=repositoryFactory.createFolder(sampleProject,ERepositoryObjectType.PROCESS,new Path(""String_Node_Str""),""String_Node_Str"");
  assertNotNull(createTargetFolder);
  IPath sourcePath=new Path(""String_Node_Str"");
  IPath targetPath=new Path(createTargetFolder.getLabel());
  assertNotNull(objects.get(0));
  repositoryFactory.moveFolder(ERepositoryObjectType.PROCESS,sourcePath,targetPath);
  IProject project=ResourceUtils.getProject(sampleProject);
  checkMoveObjectFileExists(project,ERepositoryObjectType.PROCESS,createTargetFolder.getLabel() + ""String_Node_Str"" + ""String_Node_Str"",processItem.getProperty().getLabel(),processItem.getProperty().getVersion());
  Property property=repositoryFactory.getUptodateProperty(sampleProject,processItem.getProperty());
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property),false);
}",0.9981203007518796
125407,"private void testRoutinepropagateFileName(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  RoutineItem routineItem=createTempRoutineItem(factory,path);
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  String routineId=routineItem.getProperty().getId();
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  factory.unloadUnlockedResources();
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  String content=new String(routineItem.getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,routineId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    content=new String(((RoutineItem)object.getProperty().getItem()).getContent().getInnerContent());
    assertTrue(content.equals(""String_Node_Str"" + object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    content=new String(((RoutineItem)object.getProperty().getItem()).getContent().getInnerContent());
    assertTrue(content.equals(""String_Node_Str"" + object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getProperty().setLabel(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    content=new String(((RoutineItem)object.getProperty().getItem()).getContent().getInnerContent());
    assertTrue(content.equals(""String_Node_Str"" + object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,routineId));
}","private void testRoutinepropagateFileName(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  RoutineItem routineItem=createTempRoutineItem(factory,path);
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  String routineId=routineItem.getProperty().getId();
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  factory.unloadUnlockedResources();
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  String content=new String(routineItem.getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,routineId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    content=new String(((RoutineItem)object.getProperty().getItem()).getContent().getInnerContent());
    assertTrue(content.equals(""String_Node_Str"" + object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    content=new String(((RoutineItem)object.getProperty().getItem()).getContent().getInnerContent());
    assertTrue(content.equals(""String_Node_Str"" + object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  routineItem=(RoutineItem)factory.getLastVersion(sampleProject,routineId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
  assertNotNull(routineItem.getParent());
  assertTrue(routineItem.getParent().equals(folderItem));
  routineItem.getProperty().setVersion(""String_Node_Str"");
  routineItem.getProperty().setLabel(""String_Node_Str"");
  routineItem.getContent().setInnerContent(""String_Node_Str"".getBytes());
  factory.save(sampleProject,routineItem);
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.ROUTINES,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,routineId,false);
  for (  IRepositoryViewObject object : objects) {
    assertTrue(object instanceof RepositoryObject);
    content=new String(((RoutineItem)object.getProperty().getItem()).getContent().getInnerContent());
    assertTrue(content.equals(""String_Node_Str"" + object.getProperty().getVersion()));
    folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.ROUTINES,new Path(path));
    assertNotNull(object.getProperty().getItem().getParent());
    assertTrue(object.getProperty().getItem().getParent().equals(folderItem));
  }
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,routineId),false);
}",0.9995114802149488
125408,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#unloadUnlockedResources()}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testUnloadUnlockedResources() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setStatusCode(""String_Node_Str"");
  property.setLabel(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  Property property2=PropertiesFactory.eINSTANCE.createProperty();
  property2.setAuthor(sampleProject.getAuthor());
  property2.setVersion(VersionUtils.DEFAULT_VERSION);
  property2.setStatusCode(""String_Node_Str"");
  property2.setLabel(""String_Node_Str"");
  final String nextId2=repositoryFactory.getNextId();
  property2.setId(nextId2);
  ProcessItem processItem2=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem2.setProperty(property2);
  ProcessType process2=TalendFileFactory.eINSTANCE.createProcessType();
  processItem2.setProcess(process2);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  repositoryFactory.create(sampleProject,processItem2,new Path(""String_Node_Str""),false);
  ProcessItem pItem=createTempProcessItem(repositoryFactory,""String_Node_Str"");
  RoutineItem rItem=createTempRoutineItem(repositoryFactory,""String_Node_Str"");
  assertNotNull(processItem.eResource());
  assertNotNull(processItem2.eResource());
  assertNotNull(pItem.eResource());
  assertNotNull(rItem.eResource());
  FolderItem parent=(FolderItem)pItem.getParent();
  ProxyRepositoryFactory.getInstance().setFullLogonFinished(true);
  repositoryFactory.unloadUnlockedResources();
  assertNull(processItem.eResource());
  assertNull(processItem2.eResource());
  assertNull(pItem.eResource());
  assertNull(rItem.eResource());
  assertNull(pItem.getParent());
  assertTrue(!parent.getChildren().contains(pItem));
  IRepositoryViewObject object1=repositoryFactory.getLastVersion(sampleProject,pItem.getProperty().getId());
  Property prop1=object1.getProperty();
  pItem=(ProcessItem)prop1.getItem();
  IRepositoryViewObject object2=repositoryFactory.getLastVersion(sampleProject,rItem.getProperty().getId());
  Property prop2=object2.getProperty();
  rItem=(RoutineItem)prop2.getItem();
  assertNotNull(pItem.eResource());
  assertNotNull(rItem.eResource());
  assertTrue(((NodeType)(pItem).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  String content=new String((rItem).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  pItem.getState().setDeleted(true);
  repositoryFactory.unloadUnlockedResources();
  assertNotNull(pItem.getParent());
  assertTrue(((FolderItem)pItem.getParent()).getChildren().contains(pItem));
  pItem=(ProcessItem)repositoryFactory.getLastVersion(sampleProject,pItem.getProperty().getId()).getProperty().getItem();
  pItem.getState().setDeleted(false);
  pItem.getState().setLocked(true);
  repositoryFactory.unloadUnlockedResources();
  assertNotNull(pItem.getParent());
  assertTrue(((FolderItem)pItem.getParent()).getChildren().contains(pItem));
  assertNotNull(pItem.eResource());
  property=repositoryFactory.getUptodateProperty(sampleProject,property);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property));
  property2=repositoryFactory.getUptodateProperty(sampleProject,property2);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property2));
  prop1=repositoryFactory.getUptodateProperty(sampleProject,prop1);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(prop1));
  prop2=repositoryFactory.getUptodateProperty(sampleProject,prop2);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(prop2));
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#unloadUnlockedResources()}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testUnloadUnlockedResources() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setStatusCode(""String_Node_Str"");
  property.setLabel(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  Property property2=PropertiesFactory.eINSTANCE.createProperty();
  property2.setAuthor(sampleProject.getAuthor());
  property2.setVersion(VersionUtils.DEFAULT_VERSION);
  property2.setStatusCode(""String_Node_Str"");
  property2.setLabel(""String_Node_Str"");
  final String nextId2=repositoryFactory.getNextId();
  property2.setId(nextId2);
  ProcessItem processItem2=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem2.setProperty(property2);
  ProcessType process2=TalendFileFactory.eINSTANCE.createProcessType();
  processItem2.setProcess(process2);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  repositoryFactory.create(sampleProject,processItem2,new Path(""String_Node_Str""),false);
  ProcessItem pItem=createTempProcessItem(repositoryFactory,""String_Node_Str"");
  RoutineItem rItem=createTempRoutineItem(repositoryFactory,""String_Node_Str"");
  assertNotNull(processItem.eResource());
  assertNotNull(processItem2.eResource());
  assertNotNull(pItem.eResource());
  assertNotNull(rItem.eResource());
  FolderItem parent=(FolderItem)pItem.getParent();
  ProxyRepositoryFactory.getInstance().setFullLogonFinished(true);
  repositoryFactory.unloadUnlockedResources();
  assertNull(processItem.eResource());
  assertNull(processItem2.eResource());
  assertNull(pItem.eResource());
  assertNull(rItem.eResource());
  assertNull(pItem.getParent());
  assertTrue(!parent.getChildren().contains(pItem));
  IRepositoryViewObject object1=repositoryFactory.getLastVersion(sampleProject,pItem.getProperty().getId());
  Property prop1=object1.getProperty();
  pItem=(ProcessItem)prop1.getItem();
  IRepositoryViewObject object2=repositoryFactory.getLastVersion(sampleProject,rItem.getProperty().getId());
  Property prop2=object2.getProperty();
  rItem=(RoutineItem)prop2.getItem();
  assertNotNull(pItem.eResource());
  assertNotNull(rItem.eResource());
  assertTrue(((NodeType)(pItem).getProcess().getNode().get(0)).getComponentVersion().equals(""String_Node_Str""));
  String content=new String((rItem).getContent().getInnerContent());
  assertTrue(content.equals(""String_Node_Str""));
  pItem.getState().setDeleted(true);
  repositoryFactory.unloadUnlockedResources();
  assertNotNull(pItem.getParent());
  assertTrue(((FolderItem)pItem.getParent()).getChildren().contains(pItem));
  pItem=(ProcessItem)repositoryFactory.getLastVersion(sampleProject,pItem.getProperty().getId()).getProperty().getItem();
  pItem.getState().setDeleted(false);
  pItem.getState().setLocked(true);
  repositoryFactory.unloadUnlockedResources();
  assertNotNull(pItem.getParent());
  assertTrue(((FolderItem)pItem.getParent()).getChildren().contains(pItem));
  assertNotNull(pItem.eResource());
  property=repositoryFactory.getUptodateProperty(sampleProject,property);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property),false);
  property2=repositoryFactory.getUptodateProperty(sampleProject,property2);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property2),false);
  prop1=repositoryFactory.getUptodateProperty(sampleProject,prop1);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(prop1),false);
  prop2=repositoryFactory.getUptodateProperty(sampleProject,prop2);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(prop2),false);
}",0.9972014925373134
125409,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#create(org.talend.core.model.general.Project,org.talend.core.model.properties.Item,org.eclipse.core.runtime.IPath,boolean[])}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testCreate() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  property.setStatusCode(""String_Node_Str"");
  property.setId(repositoryFactory.getNextId());
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  assertNull(processItem.eResource());
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  assertNotNull(processItem.eResource());
  IProject project=ResourceUtils.getProject(sampleProject.getTechnicalLabel());
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property));
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#create(org.talend.core.model.general.Project,org.talend.core.model.properties.Item,org.eclipse.core.runtime.IPath,boolean[])}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testCreate() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  property.setStatusCode(""String_Node_Str"");
  property.setId(repositoryFactory.getNextId());
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  assertNull(processItem.eResource());
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  assertNotNull(processItem.eResource());
  IProject project=ResourceUtils.getProject(sampleProject.getTechnicalLabel());
  checkFileExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property),false);
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
}",0.9981354878806712
125410,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#unloadResources(org.talend.core.model.properties.Property)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testUnloadResourcesProperty() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setStatusCode(""String_Node_Str"");
  property.setLabel(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  Property property2=PropertiesFactory.eINSTANCE.createProperty();
  property2.setAuthor(sampleProject.getAuthor());
  property2.setVersion(VersionUtils.DEFAULT_VERSION);
  property2.setStatusCode(""String_Node_Str"");
  property2.setLabel(""String_Node_Str"");
  final String nextId2=repositoryFactory.getNextId();
  property2.setId(nextId2);
  ProcessItem processItem2=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem2.setProperty(property2);
  ProcessType process2=TalendFileFactory.eINSTANCE.createProcessType();
  processItem2.setProcess(process2);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  repositoryFactory.create(sampleProject,processItem2,new Path(""String_Node_Str""),false);
  assertNotNull(processItem.eResource());
  assertNotNull(processItem2.eResource());
  repositoryFactory.unloadResources(property2);
  assertNotNull(processItem.eResource());
  assertNull(processItem2.eResource());
  property=repositoryFactory.getUptodateProperty(sampleProject,property);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property));
  property2=repositoryFactory.getUptodateProperty(sampleProject,property2);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property2));
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#unloadResources(org.talend.core.model.properties.Property)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testUnloadResourcesProperty() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setStatusCode(""String_Node_Str"");
  property.setLabel(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  Property property2=PropertiesFactory.eINSTANCE.createProperty();
  property2.setAuthor(sampleProject.getAuthor());
  property2.setVersion(VersionUtils.DEFAULT_VERSION);
  property2.setStatusCode(""String_Node_Str"");
  property2.setLabel(""String_Node_Str"");
  final String nextId2=repositoryFactory.getNextId();
  property2.setId(nextId2);
  ProcessItem processItem2=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem2.setProperty(property2);
  ProcessType process2=TalendFileFactory.eINSTANCE.createProcessType();
  processItem2.setProcess(process2);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  repositoryFactory.create(sampleProject,processItem2,new Path(""String_Node_Str""),false);
  assertNotNull(processItem.eResource());
  assertNotNull(processItem2.eResource());
  repositoryFactory.unloadResources(property2);
  assertNotNull(processItem.eResource());
  assertNull(processItem2.eResource());
  property=repositoryFactory.getUptodateProperty(sampleProject,property);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property),false);
  property2=repositoryFactory.getUptodateProperty(sampleProject,property2);
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property2),false);
}",0.997327394209354
125411,"private void testProcesspropagateFileName2(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(factory,path);
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  String processId=processItem.getProperty().getId();
  processItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,processId,false);
  assertTrue(objects.size() == 2);
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  objects=factory.getAllVersion(sampleProject,processId,false);
  assertTrue(objects.size() == 3);
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setVersion(""String_Node_Str"");
  processItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,processId,false);
  assertTrue(objects.size() == 4);
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,processId));
}","private void testProcesspropagateFileName2(LocalRepositoryFactory factory,String path) throws PersistenceException {
  IProject project=ResourceUtils.getProject(sampleProject);
  ProcessItem processItem=createTempProcessItem(factory,path);
  FolderItem folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  String processId=processItem.getProperty().getId();
  processItem.getProperty().setLabel(""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  List<IRepositoryViewObject> objects=factory.getAllVersion(sampleProject,processId,false);
  assertTrue(objects.size() == 2);
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  processItem.getProperty().setVersion(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  factory.unloadUnlockedResources();
  objects=factory.getAllVersion(sampleProject,processId,false);
  assertTrue(objects.size() == 3);
  processItem=(ProcessItem)factory.getLastVersion(sampleProject,processId).getProperty().getItem();
  folderItem=factory.getFolderItem(sampleProject,ERepositoryObjectType.PROCESS,new Path(path));
  assertNotNull(processItem.getParent());
  assertTrue(processItem.getParent().equals(folderItem));
  processItem.getProperty().setVersion(""String_Node_Str"");
  processItem.getProperty().setLabel(""String_Node_Str"");
  factory.save(sampleProject,processItem.getProperty());
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  checkFileNotExists(project,ERepositoryObjectType.PROCESS,path,""String_Node_Str"",""String_Node_Str"");
  objects=factory.getAllVersion(sampleProject,processId,false);
  assertTrue(objects.size() == 4);
  factory.deleteObjectPhysical(sampleProject,factory.getLastVersion(sampleProject,processId),false);
}",0.9992723744845986
125412,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#getAll(org.talend.core.model.general.Project,org.talend.core.model.repository.ERepositoryObjectType,boolean,boolean)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testGetAll() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setStatusCode(""String_Node_Str"");
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  final List<IRepositoryViewObject> all=repositoryFactory.getAll(sampleProject,ERepositoryObjectType.PROCESS,true,true);
  assertNotNull(all);
  assertTrue(!all.isEmpty());
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property));
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#getAll(org.talend.core.model.general.Project,org.talend.core.model.repository.ERepositoryObjectType,boolean,boolean)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testGetAll() throws PersistenceException, CoreException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setStatusCode(""String_Node_Str"");
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  final List<IRepositoryViewObject> all=repositoryFactory.getAll(sampleProject,ERepositoryObjectType.PROCESS,true,true);
  assertNotNull(all);
  assertTrue(!all.isEmpty());
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property),false);
}",0.9978479196556672
125413,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#getUptodateProperty(org.talend.core.model.general.Project,org.talend.core.model.properties.Property)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testGetUptodateProperty() throws PersistenceException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  property.setStatusCode(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  assertEquals(property.getDisplayName(),""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  final Property uptodateProperty=repositoryFactory.getUptodateProperty(sampleProject,property);
  assertNotNull(uptodateProperty);
  assertNotNull(uptodateProperty.eResource());
  assertEquals(uptodateProperty.getDisplayName(),""String_Node_Str"");
  repositoryFactory.unloadUnlockedResources();
  final Property uptodateProperty2=repositoryFactory.getUptodateProperty(sampleProject,property);
  assertNotNull(uptodateProperty2);
  assertNotNull(uptodateProperty2.eResource());
  assertEquals(uptodateProperty2.getDisplayName(),""String_Node_Str"");
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(uptodateProperty));
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#getUptodateProperty(org.talend.core.model.general.Project,org.talend.core.model.properties.Property)}.
 * @throws CoreException
 * @throws PersistenceException
 * @throws LoginException
 */
@Test public void testGetUptodateProperty() throws PersistenceException, LoginException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  property.setStatusCode(""String_Node_Str"");
  final String nextId=repositoryFactory.getNextId();
  property.setId(nextId);
  ProcessItem processItem=PropertiesFactory.eINSTANCE.createProcessItem();
  processItem.setProperty(property);
  ProcessType process=TalendFileFactory.eINSTANCE.createProcessType();
  processItem.setProcess(process);
  repositoryFactory.create(sampleProject,processItem,new Path(""String_Node_Str""),false);
  assertEquals(property.getDisplayName(),""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  final Property uptodateProperty=repositoryFactory.getUptodateProperty(sampleProject,property);
  assertNotNull(uptodateProperty);
  assertNotNull(uptodateProperty.eResource());
  assertEquals(uptodateProperty.getDisplayName(),""String_Node_Str"");
  repositoryFactory.unloadUnlockedResources();
  final Property uptodateProperty2=repositoryFactory.getUptodateProperty(sampleProject,property);
  assertNotNull(uptodateProperty2);
  assertNotNull(uptodateProperty2.eResource());
  assertEquals(uptodateProperty2.getDisplayName(),""String_Node_Str"");
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(uptodateProperty),false);
}",0.998391420911528
125414,"/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#deleteObjectPhysical(org.talend.core.model.general.Project,org.talend.core.model.repository.IRepositoryViewObject)}.
 * @throws PersistenceException
 * @throws IOException
 * @throws BusinessException
 */
@Test public void testDeleteObjectPhysical() throws PersistenceException, IOException, BusinessException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  property.setStatusCode(""String_Node_Str"");
  property.setId(repositoryFactory.getNextId());
  DatabaseConnectionItem conItem=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  conItem.setProperty(property);
  DatabaseConnection dbcon=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  conItem.setConnection(dbcon);
  assertNull(conItem.eResource());
  repositoryFactory.create(sampleProject,conItem,new Path(""String_Node_Str""),false);
  assertNotNull(conItem.eResource());
  IProject project=ResourceUtils.getProject(sampleProject.getTechnicalLabel());
  checkFileExists(project,ERepositoryObjectType.METADATA_CONNECTIONS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
  IFile fileItem=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ VersionUtils.DEFAULT_VERSION+ ""String_Node_Str""));
  URI uri=URI.createPlatformResourceURI(fileItem.getFullPath().toString(),false);
  Resource resource=repositoryFactory.xmiResourceManager.resourceSet.getResource(uri,false);
  resource.unload();
  File file=new File(fileItem.getLocationURI());
  FileWriter fw=new FileWriter(file);
  fw.write(""String_Node_Str"");
  fw.close();
  Resource resource2;
  try {
    resource2=repositoryFactory.xmiResourceManager.resourceSet.getResource(uri,true);
    repositoryFactory.xmiResourceManager.resourceSet.getResources().add(resource2);
  }
 catch (  Exception e) {
    resource2=null;
  }
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property));
  checkFileNotExists(project,ERepositoryObjectType.METADATA_CONNECTIONS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
}","/** 
 * Test method for  {@link org.talend.repository.localprovider.model.LocalRepositoryFactory#deleteObjectPhysical(org.talend.core.model.general.Project,org.talend.core.model.repository.IRepositoryViewObject)}.
 * @throws PersistenceException
 * @throws IOException
 * @throws BusinessException
 */
@Test public void testDeleteObjectPhysical() throws PersistenceException, IOException, BusinessException {
  repositoryFactory.logOnProject(sampleProject);
  Property property=PropertiesFactory.eINSTANCE.createProperty();
  property.setAuthor(sampleProject.getAuthor());
  property.setVersion(VersionUtils.DEFAULT_VERSION);
  property.setLabel(""String_Node_Str"");
  property.setDisplayName(""String_Node_Str"");
  property.setStatusCode(""String_Node_Str"");
  property.setId(repositoryFactory.getNextId());
  DatabaseConnectionItem conItem=PropertiesFactory.eINSTANCE.createDatabaseConnectionItem();
  conItem.setProperty(property);
  DatabaseConnection dbcon=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  conItem.setConnection(dbcon);
  assertNull(conItem.eResource());
  repositoryFactory.create(sampleProject,conItem,new Path(""String_Node_Str""),false);
  assertNotNull(conItem.eResource());
  IProject project=ResourceUtils.getProject(sampleProject.getTechnicalLabel());
  checkFileExists(project,ERepositoryObjectType.METADATA_CONNECTIONS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
  IFile fileItem=project.getFile(new Path(ERepositoryObjectType.getFolderName(ERepositoryObjectType.METADATA_CONNECTIONS) + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ VersionUtils.DEFAULT_VERSION+ ""String_Node_Str""));
  URI uri=URI.createPlatformResourceURI(fileItem.getFullPath().toString(),false);
  Resource resource=repositoryFactory.xmiResourceManager.resourceSet.getResource(uri,false);
  resource.unload();
  File file=new File(fileItem.getLocationURI());
  FileWriter fw=new FileWriter(file);
  fw.write(""String_Node_Str"");
  fw.close();
  Resource resource2;
  try {
    resource2=repositoryFactory.xmiResourceManager.resourceSet.getResource(uri,true);
    repositoryFactory.xmiResourceManager.resourceSet.getResources().add(resource2);
  }
 catch (  Exception e) {
    resource2=null;
  }
  repositoryFactory.deleteObjectPhysical(sampleProject,new RepositoryObject(property),false);
  checkFileNotExists(project,ERepositoryObjectType.METADATA_CONNECTIONS,""String_Node_Str"",""String_Node_Str"",VersionUtils.DEFAULT_VERSION);
}",0.9987834549878344
125415,"protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          if (!getTable().isDisposed()) {
            getTable().forceFocus();
          }
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
  getTable().addPaintListener(new PaintListener(){
    public void paintControl(    PaintEvent event){
      if (tableEditorManager != null) {
        tableEditorManager.paintVisibleAreaEditor(event);
      }
    }
  }
);
}","protected void addListeners(){
  if (useCustomItemColoring) {
    addEraseItemListener();
  }
  final MouseListener mouseListener=new MouseListener(){
    @Override public void mouseDoubleClick(    MouseEvent e){
    }
    @Override public void mouseDown(    MouseEvent mouseEvent){
      controlClicked=mouseEvent.getSource();
    }
    @Override public void mouseUp(    MouseEvent e){
    }
  }
;
  final TraverseListener traverseListenerForControls=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor((Control)e.getSource());
      }
 else       if (key == SWT.TRAVERSE_RETURN) {
        keyPressed=key;
        if (getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
          editOtherEditor(null);
        }
 else {
          forceTableFocus();
        }
      }
 else       if (key == SWT.TRAVERSE_ESCAPE) {
        forceTableFocus();
      }
 else {
      }
    }
    /** 
 * DOC amaumont Comment method ""forceTableFocus"".
 */
    private void forceTableFocus(){
      new AsynchronousThreading(10,false,getTable().getDisplay(),new Runnable(){
        @Override public void run(){
          if (!getTable().isDisposed()) {
            getTable().forceFocus();
          }
        }
      }
).start();
    }
  }
;
  final TraverseListener traverseListenerForTable=new TraverseListener(){
    @Override public void keyTraversed(    TraverseEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.detail;
      if (key == SWT.TRAVERSE_TAB_NEXT || key == SWT.TRAVERSE_TAB_PREVIOUS) {
        keyPressed=key;
        e.doit=false;
        editOtherEditor(null);
      }
 else       if (key == SWT.TRAVERSE_RETURN && getTable().getSelectionIndex() != -1 && getTable().isFocusControl()) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
  }
;
  getTable().addTraverseListener(traverseListenerForTable);
  final KeyListener keyListenerForTable=new KeyListener(){
    @Override public void keyPressed(    KeyEvent e){
      if (!keyboardManagementForCellEdition) {
        return;
      }
      int key=e.keyCode;
      if (key == SWT.F2) {
        keyPressed=key;
        editOtherEditor(null);
      }
    }
    @Override public void keyReleased(    KeyEvent e){
    }
  }
;
  getTable().addKeyListener(keyListenerForTable);
  getTable().addDisposeListener(new DisposeListener(){
    @Override public void widgetDisposed(    DisposeEvent e){
      if (tableEditorManager != null) {
        tableEditorManager.release();
      }
    }
  }
);
  if (tableEditorManager != null) {
    tableEditorManager.addListener(new ITableEditorManagerListener(){
      @Override public void notifyEvent(      TableEditorManagerEvent event){
        Control editor=event.getTableEditor().getEditor();
        if (event.getEventType() == EVENT_TYPE.CONTROL_CREATED) {
          editor.addMouseListener(mouseListener);
          editor.addTraverseListener(traverseListenerForControls);
        }
      }
    }
);
  }
  for (  TableViewerCreatorColumnNotModifiable column : columns) {
    CellEditor cellEditor=column.getCellEditor();
    if (cellEditor != null && cellEditor.getControl() != null) {
      addTraverseListenerRecursivly(cellEditor.getControl(),traverseListenerForControls);
    }
  }
  if ((this.getTable().getStyle() & SWT.VIRTUAL) != 0) {
    getTable().addPaintListener(new PaintListener(){
      @Override public void paintControl(      PaintEvent event){
        if (tableEditorManager != null) {
          tableEditorManager.paintVisibleAreaEditor(event);
        }
      }
    }
);
  }
}",0.984360625574977
125416,"public void paintControl(PaintEvent event){
  if (tableEditorManager != null) {
    tableEditorManager.paintVisibleAreaEditor(event);
  }
}","@Override public void paintControl(PaintEvent event){
  if (tableEditorManager != null) {
    tableEditorManager.paintVisibleAreaEditor(event);
  }
}",0.9652777777777778
125417,"/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override protected void handleDispose(    DisposeEvent event){
      if (this.isCellEditorActive()) {
        CellEditor[] cellEditors=this.getCellEditors();
        for (int i=0; i < cellEditors.length; i++) {
          CellEditor cellEditor=cellEditors[i];
          if (cellEditor != null && cellEditor.isActivated() && cellEditor instanceof IShowInvisibleCellEditorMethods) {
            ((IShowInvisibleCellEditorMethods)cellEditor).fireApplyEditorValue();
          }
        }
      }
      super.handleDispose(event);
    }
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorControls();
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void hookControl(    Control control){
      super.hookControl(control);
      table.addListener(SWT.SetData,new Listener(){
        @Override public void handleEvent(        Event event){
          TableItem item=(TableItem)event.item;
          int index=table.indexOf(item);
          if (index == -1) {
            return;
          }
          B element=getInputList().get(index);
          associate(element,item);
          updateItem(item,element);
          refreshTableEditorColumn(index);
        }
      }
);
    }
  }
;
  setTablePreferences();
  return table;
}","/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override protected void handleDispose(    DisposeEvent event){
      if (this.isCellEditorActive()) {
        CellEditor[] cellEditors=this.getCellEditors();
        for (        CellEditor cellEditor : cellEditors) {
          if (cellEditor != null && cellEditor.isActivated() && cellEditor instanceof IShowInvisibleCellEditorMethods) {
            ((IShowInvisibleCellEditorMethods)cellEditor).fireApplyEditorValue();
          }
        }
      }
      super.handleDispose(event);
    }
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorControls();
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void hookControl(    Control control){
      super.hookControl(control);
      table.addListener(SWT.SetData,new Listener(){
        @Override public void handleEvent(        Event event){
          TableItem item=(TableItem)event.item;
          int index=table.indexOf(item);
          if (index == -1) {
            return;
          }
          B element=getInputList().get(index);
          associate(element,item);
          updateItem(item,element);
          refreshTableEditorColumn(index);
        }
      }
);
    }
  }
;
  setTablePreferences();
  return table;
}",0.980335558361898
125418,"@Override protected void handleDispose(DisposeEvent event){
  if (this.isCellEditorActive()) {
    CellEditor[] cellEditors=this.getCellEditors();
    for (int i=0; i < cellEditors.length; i++) {
      CellEditor cellEditor=cellEditors[i];
      if (cellEditor != null && cellEditor.isActivated() && cellEditor instanceof IShowInvisibleCellEditorMethods) {
        ((IShowInvisibleCellEditorMethods)cellEditor).fireApplyEditorValue();
      }
    }
  }
  super.handleDispose(event);
}","@Override protected void handleDispose(DisposeEvent event){
  if (this.isCellEditorActive()) {
    CellEditor[] cellEditors=this.getCellEditors();
    for (    CellEditor cellEditor : cellEditors) {
      if (cellEditor != null && cellEditor.isActivated() && cellEditor instanceof IShowInvisibleCellEditorMethods) {
        ((IShowInvisibleCellEditorMethods)cellEditor).fireApplyEditorValue();
      }
    }
  }
  super.handleDispose(event);
}",0.8716289104638619
125419,"/** 
 * DOC zshen Comment method ""isComeFromRefrenceProject"".
 * @return
 */
public static boolean isComeFromRefrenceProject(Connection dataProvider){
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext == null) {
    return false;
  }
  Project project=repositoryContext.getProject();
  if (project == null) {
    return false;
  }
  boolean isLocal=project.getEmfProject().isLocal();
  boolean isReference=project.getEmfProject().isReference();
  if (isLocal || isReference) {
    return false;
  }
  EList<ProjectReferenceImpl> referencedProjects=project.getEmfProject().getReferencedProjects();
  if (referencedProjects.size() > 0) {
    String currentResourceProjectName=dataProvider.eResource().getURI().segment(1);
    for (    ProjectReferenceImpl projectRef : referencedProjects) {
      String label=projectRef.getReferencedProject().getLabel();
      if (StringUtils.equalsIgnoreCase(currentResourceProjectName,label)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * DOC zshen Comment method ""isComeFromRefrenceProject"".
 * @return
 */
public static boolean isComeFromRefrenceProject(Connection dataProvider){
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (repositoryContext == null) {
    return false;
  }
  Project project=repositoryContext.getProject();
  if (project == null) {
    return false;
  }
  boolean isLocal=project.getEmfProject().isLocal();
  boolean isReference=project.getEmfProject().isReference();
  if (isLocal || isReference) {
    return false;
  }
  EList<ProjectReferenceImpl> referencedProjects=project.getEmfProject().getReferencedProjects();
  if (referencedProjects.size() > 0) {
    String currentResourceProjectName=dataProvider.eResource().getURI().segment(1);
    boolean isFromReferenceProject=iteration2FindReferenceProject(referencedProjects,currentResourceProjectName);
    if (isFromReferenceProject) {
      return true;
    }
  }
  return false;
}",0.8155251141552512
125420,"public void unloadResources(Property property){
  for (  Resource resource : getAffectedResources(property)) {
    if (resource != null) {
      resource.unload();
      getResourceSet().getResources().remove(resource);
    }
  }
}","public void unloadResources(ResourceSet resourceSet,Property property){
  for (  Resource resource : getAffectedResources(resourceSet,property)) {
    if (resource != null) {
      resource.unload();
      resourceSet.getResources().remove(resource);
    }
  }
}",0.8722109533468559
125421,"public Resource getItemResource(Item item,boolean forceLoad){
  if (item == null)   return null;
  URI itemResourceURI=null;
  if (item.getFileExtension() != null) {
    itemResourceURI=getItemResourceURI(getItemURI(item),item.getFileExtension());
  }
 else   if (item instanceof TDQItem) {
    IPath fileName=new Path(((TDQItem)item).getFilename());
    itemResourceURI=getItemResourceURI(getItemURI(item),fileName.getFileExtension());
  }
 else {
    itemResourceURI=getItemResourceURI(getItemURI(item));
  }
  Resource itemResource=getResourceSet().getResource(itemResourceURI,false);
  if (forceLoad && itemResource == null) {
    if (item instanceof FileItem) {
      itemResource=new ByteArrayResource(itemResourceURI);
      getResourceSet().getResources().add(itemResource);
    }
    itemResource=getResourceSet().getResource(itemResourceURI,true);
  }
  return itemResource;
}","public Resource getItemResource(ResourceSet resourceSet,Item item,boolean forceLoad){
  if (item == null) {
    return null;
  }
  URI itemResourceURI=null;
  if (item.getFileExtension() != null) {
    itemResourceURI=getItemResourceURI(getItemURI(item),item.getFileExtension());
  }
 else   if (item instanceof TDQItem) {
    IPath fileName=new Path(((TDQItem)item).getFilename());
    itemResourceURI=getItemResourceURI(getItemURI(item),fileName.getFileExtension());
  }
 else {
    itemResourceURI=getItemResourceURI(getItemURI(item));
  }
  Resource itemResource=resourceSet.getResource(itemResourceURI,false);
  if (forceLoad && itemResource == null) {
    if (item instanceof FileItem) {
      itemResource=new ByteArrayResource(itemResourceURI);
      resourceSet.getResources().add(itemResource);
    }
    itemResource=resourceSet.getResource(itemResourceURI,true);
  }
  return itemResource;
}",0.9547233091112354
125422,"public List<Resource> getAffectedResources(Property property){
  List<Resource> resources=new ArrayList<Resource>();
  List<Resource> allRes=resourceSet.getResources();
synchronized (allRes) {
    Iterator<EObject> i=property.getItem().eCrossReferences().iterator();
    while (i.hasNext()) {
      EObject object=i.next();
      Resource currentResource=object.eResource();
      if (currentResource == null) {
        continue;
      }
      if (!resources.contains(currentResource)) {
        if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
          continue;
        }
        if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
          resources.add(currentResource);
        }
        if (!getResourceSet().getResources().contains(currentResource)) {
          getResourceSet().getResources().add(currentResource);
        }
      }
      if (object instanceof ReferenceFileItem) {
        ReferenceFileItem fi=(ReferenceFileItem)object;
        try {
          ByteArray ba=fi.getContent();
          if (ba != null) {
            Resource fiResource=ba.eResource();
            if (fiResource != null) {
              resources.add(fiResource);
            }
          }
        }
 catch (        Exception e) {
          final Resource referenceFileResource=getReferenceFileResource(property.getItem().eResource(),fi,true);
          if (referenceFileResource != null) {
            resources.add(referenceFileResource);
          }
        }
      }
    }
    i=property.getItem().eAllContents();
    while (i.hasNext()) {
      EObject object=i.next();
      Iterator<EObject> j=object.eCrossReferences().iterator();
      while (j.hasNext()) {
        EObject childEObject=j.next();
        Resource currentResource=childEObject.eResource();
        if (currentResource == null) {
          continue;
        }
        if (!resources.contains(currentResource)) {
          if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
            continue;
          }
          if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
            resources.add(currentResource);
          }
        }
        if (!getResourceSet().getResources().contains(currentResource)) {
          getResourceSet().getResources().add(currentResource);
        }
      }
    }
    boolean isTestContainer=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        isTestContainer=testContainerService.isTestContainerItem(property.getItem());
      }
    }
    if (property.getItem() instanceof ProcessItem || property.getItem() instanceof JobletProcessItem || isTestContainer) {
      if (property.eResource() != null) {
        Resource screenshotResource=getScreenshotResource(property.getItem());
        if (screenshotResource != null) {
          resources.add(screenshotResource);
        }
      }
    }
  }
  return resources;
}","public List<Resource> getAffectedResources(ResourceSet resourceSet,Property property){
  List<Resource> resources=new ArrayList<Resource>();
  List<Resource> allRes=resourceSet.getResources();
synchronized (allRes) {
    Iterator<EObject> i=property.getItem().eCrossReferences().iterator();
    while (i.hasNext()) {
      EObject object=i.next();
      Resource currentResource=object.eResource();
      if (currentResource == null) {
        continue;
      }
      if (!resources.contains(currentResource)) {
        if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
          continue;
        }
        if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
          resources.add(currentResource);
        }
        if (!resourceSet.getResources().contains(currentResource)) {
          resourceSet.getResources().add(currentResource);
        }
      }
      if (object instanceof ReferenceFileItem) {
        ReferenceFileItem fi=(ReferenceFileItem)object;
        try {
          ByteArray ba=fi.getContent();
          if (ba != null) {
            Resource fiResource=ba.eResource();
            if (fiResource != null) {
              resources.add(fiResource);
            }
          }
        }
 catch (        Exception e) {
          final Resource referenceFileResource=getReferenceFileResource(property.getItem().eResource(),fi,true);
          if (referenceFileResource != null) {
            resources.add(referenceFileResource);
          }
        }
      }
    }
    i=property.getItem().eAllContents();
    while (i.hasNext()) {
      EObject object=i.next();
      Iterator<EObject> j=object.eCrossReferences().iterator();
      while (j.hasNext()) {
        EObject childEObject=j.next();
        Resource currentResource=childEObject.eResource();
        if (currentResource == null) {
          continue;
        }
        if (!resources.contains(currentResource)) {
          if (object instanceof org.eclipse.gmf.runtime.notation.impl.DiagramImpl) {
            continue;
          }
          if (!currentResource.getURI().lastSegment().equals(getProjectFilename())) {
            resources.add(currentResource);
          }
        }
        if (!resourceSet.getResources().contains(currentResource)) {
          resourceSet.getResources().add(currentResource);
        }
      }
    }
    boolean isTestContainer=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        isTestContainer=testContainerService.isTestContainerItem(property.getItem());
      }
    }
    if (property.getItem() instanceof ProcessItem || property.getItem() instanceof JobletProcessItem || isTestContainer) {
      if (property.eResource() != null) {
        Resource screenshotResource=getScreenshotResource(resourceSet,property.getItem(),false,false);
        if (screenshotResource != null) {
          resources.add(screenshotResource);
        }
      }
    }
  }
  return resources;
}",0.9881546134663342
125423,"public Resource getScreenshotResource(Item item,boolean createIfNotExist,boolean forceReload){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    List<Resource> resources=new ArrayList<Resource>(getResourceSet().getResources());
    if (forceReload) {
      for (      Resource res : resources) {
        if (res != null) {
          if (itemResourceURI.toString().equals(res.getURI().toString())) {
            res.unload();
            getResourceSet().getResources().remove(res);
            break;
          }
        }
      }
    }
    try {
      itemResource=getResourceSet().getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=getResourceSet().createResource(itemResourceURI);
  }
  return itemResource;
}","public Resource getScreenshotResource(ResourceSet resourceSet,Item item,boolean createIfNotExist,boolean forceReload){
  URI itemResourceURI=null;
  itemResourceURI=getScreenshotResourceURI(getItemURI(item));
  boolean fileExist=false;
  if (itemResourceURI.isFile()) {
    fileExist=new File(itemResourceURI.toFileString()).exists();
  }
 else {
    IPath path=URIHelper.convert(itemResourceURI);
    if (path != null) {
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(path);
      if (file.exists()) {
        fileExist=true;
      }
    }
 else {
      fileExist=false;
    }
  }
  Resource itemResource=null;
  if (fileExist) {
    List<Resource> resources=new ArrayList<Resource>(getResourceSet().getResources());
    if (forceReload) {
      for (      Resource res : resources) {
        if (res != null) {
          if (itemResourceURI.toString().equals(res.getURI().toString())) {
            res.unload();
            getResourceSet().getResources().remove(res);
            break;
          }
        }
      }
    }
    try {
      itemResource=getResourceSet().getResource(itemResourceURI,true);
    }
 catch (    Exception e) {
      itemResource=null;
    }
  }
  if (itemResource == null && createIfNotExist) {
    itemResource=getResourceSet().createResource(itemResourceURI);
  }
  return itemResource;
}",0.9909638554216867
125424,"/** 
 * If the context group or context parameter have existed, just update the attributes. If not existed, will create new one. If not existed any more, will be removed.
 */
@Override public void saveToEmf(EList contextTypeList){
  if (contextTypeList == null) {
    return;
  }
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  EList newcontextTypeList=new BasicEList();
  for (int i=0; i < listContext.size(); i++) {
    IContext context=listContext.get(i);
    String contextGroupName=renameGroupContext.get(context);
    if (contextGroupName == null) {
      contextGroupName=context.getName();
    }
    ContextType contextType=findContextType(contextTypeList,contextGroupName);
    if (contextType == null) {
      contextType=TalendFileFactory.eINSTANCE.createContextType();
    }
    contextType.setName(context.getName());
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    newcontextTypeList.add(contextType);
    EList contextTypeParamList=contextType.getContextParameter();
    List<IContextParameter> contextParameterList=context.getContextParameterList();
    EList newContextTypeParamList=new BasicEList();
    if (contextParameterList != null) {
      for (int j=0; j < contextParameterList.size(); j++) {
        IContextParameter contextParam=contextParameterList.get(j);
        String contexParameterName=nameMap.get(contextParam.getName());
        if (contexParameterName == null) {
          contexParameterName=contextParam.getName();
        }
        ContextParameterType contextParamType=findContextParameterType(contextTypeParamList,contexParameterName);
        if (contextParamType == null) {
          contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
        }
        newContextTypeParamList.add(contextParamType);
        contextParamType.setName(contextParam.getName());
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        contextParamType.setRawValue(contextParam.getValue());
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          Item item=ContextUtils.getRepositoryContextItemById(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
        }
      }
      contextTypeParamList.clear();
      contextTypeParamList.addAll(newContextTypeParamList);
    }
  }
  contextTypeList.clear();
  contextTypeList.addAll(newcontextTypeList);
}","/** 
 * If the context group or context parameter have existed, just update the attributes. If not existed, will create new one. If not existed any more, will be removed.
 */
@Override public void saveToEmf(EList contextTypeList){
  if (contextTypeList == null) {
    return;
  }
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  EList newcontextTypeList=new BasicEList();
  for (int i=0; i < listContext.size(); i++) {
    IContext context=listContext.get(i);
    String contextGroupName=renameGroupContext.get(context);
    if (contextGroupName == null) {
      contextGroupName=context.getName();
    }
    ContextType contextType=findContextType(contextTypeList,contextGroupName);
    if (contextType == null) {
      contextType=TalendFileFactory.eINSTANCE.createContextType();
    }
    contextType.setName(context.getName());
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    newcontextTypeList.add(contextType);
    EList contextTypeParamList=contextType.getContextParameter();
    List<IContextParameter> contextParameterList=context.getContextParameterList();
    EList newContextTypeParamList=new BasicEList();
    if (contextParameterList != null) {
      for (int j=0; j < contextParameterList.size(); j++) {
        IContextParameter contextParam=contextParameterList.get(j);
        String contexParameterName=nameMap.get(contextParam.getName());
        if (contexParameterName == null) {
          contexParameterName=contextParam.getName();
        }
        ContextParameterType contextParamType=findContextParameterType(contextTypeParamList,contexParameterName);
        if (contextParamType == null) {
          contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
        }
        newContextTypeParamList.add(contextParamType);
        contextParamType.setName(contextParam.getName());
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        contextParamType.setRawValue(contextParam.getValue());
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          Item item=ContextUtils.getRepositoryContextItemById(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
 else {
            String contextId=contextParam.getSource();
            if (!IContextParameter.BUILT_IN.equals(contextId)) {
              contextParamType.setRepositoryContextId(contextId);
            }
          }
        }
      }
      contextTypeParamList.clear();
      contextTypeParamList.addAll(newContextTypeParamList);
    }
  }
  contextTypeList.clear();
  contextTypeList.addAll(newcontextTypeList);
}",0.9600580973129992
125425,"private Set<Relation> getItemsHaveRelationWith(Map<Relation,Set<Relation>> itemsRelations,String itemId){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (id != null) {
        Relation tmpRelatedItem=null;
        if (id.indexOf(""String_Node_Str"") != -1) {
          try {
            tmpRelatedItem=(Relation)relatedItem.clone();
            tmpRelatedItem.setId(id.split(""String_Node_Str"")[0]);
          }
 catch (          CloneNotSupportedException e) {
            log.error(e);
          }
        }
 else {
          tmpRelatedItem=relatedItem;
        }
        if (tmpRelatedItem != null && itemId.equals(id)) {
          relations.add(baseItem);
          break;
        }
      }
    }
  }
  return relations;
}","/** 
 * DOC cmeng Comment method ""getItemsHaveRelationWith"".
 * @param itemsRelations
 * @param itemId
 * @param version if null, then won't check
 * @return
 */
private Set<Relation> getItemsHaveRelationWith(Map<Relation,Set<Relation>> itemsRelations,String itemId,String version){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (id != null) {
        Relation tmpRelatedItem=null;
        if (id.indexOf(""String_Node_Str"") != -1) {
          try {
            tmpRelatedItem=(Relation)relatedItem.clone();
            tmpRelatedItem.setId(id.split(""String_Node_Str"")[0]);
          }
 catch (          CloneNotSupportedException e) {
            log.error(e);
          }
        }
 else {
          tmpRelatedItem=relatedItem;
        }
        if (tmpRelatedItem != null && itemId.equals(id)) {
          boolean isEqual=true;
          if (version != null) {
            String curVersion=tmpRelatedItem.getVersion();
            if (!LATEST_VERSION.equals(version) && LATEST_VERSION.equals(curVersion)) {
              try {
                IRepositoryViewObject latest=getProxyRepositoryFactory().getLastVersion(getAimProject(),id);
                if (latest != null) {
                  curVersion=latest.getVersion();
                }
              }
 catch (              PersistenceException e) {
                ExceptionHandler.process(e);
              }
            }
            if (version.equals(curVersion)) {
              isEqual=true;
            }
 else {
              isEqual=false;
            }
          }
          if (isEqual) {
            relations.add(baseItem);
            break;
          }
        }
      }
    }
  }
  return relations;
}",0.6380502000727537
125426,"private Set<Relation> getItemsHaveRelationWithJob(Map<Relation,Set<Relation>> itemsRelations,String itemId,String version){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (relatedItem.getType().equals(JOB_RELATION) && itemId.equals(id)) {
        if (""String_Node_Str"".equals(relatedItem.getVersion())) {
          try {
            IRepositoryViewObject latest=getProxyRepositoryFactory().getLastVersion(id);
            if (!latest.getVersion().equals(version)) {
              continue;
            }
          }
 catch (          PersistenceException e) {
            continue;
          }
        }
 else         if (!relatedItem.getVersion().equals(version)) {
          continue;
        }
        relations.add(baseItem);
        break;
      }
    }
  }
  return relations;
}","private Set<Relation> getItemsHaveRelationWithJob(Map<Relation,Set<Relation>> itemsRelations,String itemId,String version){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (relatedItem.getType().equals(JOB_RELATION) && itemId.equals(id)) {
        if (""String_Node_Str"".equals(relatedItem.getVersion())) {
          try {
            IRepositoryViewObject latest=getProxyRepositoryFactory().getLastVersion(getAimProject(),id);
            if (!latest.getVersion().equals(version)) {
              continue;
            }
          }
 catch (          PersistenceException e) {
            continue;
          }
        }
 else         if (!relatedItem.getVersion().equals(version)) {
          continue;
        }
        relations.add(baseItem);
        break;
      }
    }
  }
  return relations;
}",0.9917184265010353
125427,"private static RelationshipItemBuilder createInstance(IProxyRepositoryFactory repositoryFactory,Project project){
  RelationshipItemBuilder instance=new RelationshipItemBuilder();
  instance.setAimProject(project);
  instance.setProxyRepositoryFactory(repositoryFactory);
  return instance;
}","public static RelationshipItemBuilder createInstance(IProxyRepositoryFactory repositoryFactory,Project project){
  RelationshipItemBuilder instance=new RelationshipItemBuilder();
  instance.setAimProject(project);
  instance.setProxyRepositoryFactory(repositoryFactory);
  return instance;
}",0.981132075471698
125428,"private void buildIndex(Map<Relation,Set<Relation>> itemRelations,Project project,IProgressMonitor monitor){
  modified=true;
  if (!project.getEmfProject().getItemsRelations().isEmpty()) {
    loadRelations(itemRelations,project);
    if (loaded) {
      return;
    }
  }
  IProxyRepositoryFactory factory=getProxyRepositoryFactory();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  try {
    for (    ERepositoryObjectType curTyp : getTypes()) {
      if (curTyp != null) {
        list.addAll(factory.getAll(curTyp,true,true));
      }
    }
    monitor.beginTask(Messages.getString(""String_Node_Str""),list.size());
    if (list.isEmpty()) {
      return;
    }
    for (    IRepositoryViewObject object : list) {
      Item item=object.getProperty().getItem();
      monitor.subTask(Messages.getString(""String_Node_Str"") + item.getProperty().getLabel());
      addOrUpdateItem(item,true);
      monitor.worked(1);
      if (monitor.isCanceled()) {
        return;
      }
    }
    saveRelations();
    monitor.done();
    loaded=true;
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}","private void buildIndex(Map<Relation,Set<Relation>> itemRelations,Project project,IProgressMonitor monitor){
  modified=true;
  if (!project.getEmfProject().getItemsRelations().isEmpty()) {
    loadRelations(itemRelations,project);
    if (loaded) {
      return;
    }
  }
  IProxyRepositoryFactory factory=getProxyRepositoryFactory();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  try {
    for (    ERepositoryObjectType curTyp : getTypes()) {
      if (curTyp != null) {
        list.addAll(factory.getAll(project,curTyp,true,true));
      }
    }
    monitor.beginTask(Messages.getString(""String_Node_Str""),list.size());
    if (list.isEmpty()) {
      return;
    }
    for (    IRepositoryViewObject object : list) {
      Item item=object.getProperty().getItem();
      monitor.subTask(Messages.getString(""String_Node_Str"") + item.getProperty().getLabel());
      addOrUpdateItem(item,true);
      monitor.worked(1);
      if (monitor.isCanceled()) {
        return;
      }
    }
    saveRelations();
    monitor.done();
    loaded=true;
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}",0.9965277777777778
125429,"@Override public void executeMigrationTasksForImport(Project project,Item item,List<MigrationTask> migrationTasksToApply,final IProgressMonitor monitor) throws Exception {
  if (item == null || migrationTasksToApply == null) {
    return;
  }
  String itemName=item.getProperty().getLabel();
  List<IProjectMigrationTask> toExecute=new ArrayList<IProjectMigrationTask>();
  for (  MigrationTask task : migrationTasksToApply) {
    IProjectMigrationTask projectTask=GetTasksHelper.getInstance().getProjectTask(task.getId());
    if (projectTask == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (!projectTask.isDeprecated()) {
      toExecute.add(projectTask);
    }
  }
  sortMigrationTasks(toExecute);
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IProjectMigrationTask task : toExecute) {
    monitor.subTask(Messages.getString(""String_Node_Str"",task.getName(),itemName));
    try {
      if ((item.getProperty().eResource() == null || item.eResource() == null)) {
        Property updatedProperty=factory.reload(item.getProperty());
        item=updatedProperty.getItem();
      }
      if (item != null) {
        ExecutionResult executionResult=task.execute(project,item);
        if (executionResult == ExecutionResult.FAILURE) {
          log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()));
        }
      }
    }
 catch (    Exception e) {
      log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()),e);
      try {
        factory.deleteObjectPhysical(new RepositoryObject(item.getProperty()));
        break;
      }
 catch (      PersistenceException e1) {
        log.error(Messages.getString(""String_Node_Str"",itemName));
      }
    }
  }
  try {
    ICodeGeneratorService service=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer routineSynchronizer=service.createJavaRoutineSynchronizer();
    if (item != null && item instanceof RoutineItem) {
      RoutineUtils.changeRoutinesPackage(item);
      RoutineItem routineItem=(RoutineItem)item;
      routineSynchronizer.forceSyncRoutine(routineItem);
      routineSynchronizer.syncRoutine(routineItem,true);
      routineSynchronizer.getFile(routineItem);
    }
    if (item.getProperty().eResource() != null) {
      factory.unloadResources(item.getProperty());
      if (item.getParent() != null && item.getParent() instanceof FolderItem) {
        ((FolderItem)item.getParent()).getChildren().remove(item);
        item.setParent(null);
      }
    }
  }
 catch (  Exception e) {
    throw e;
  }
}","@Override public void executeMigrationTasksForImport(Project project,Item item,List<MigrationTask> migrationTasksToApply,final IProgressMonitor monitor) throws Exception {
  if (item == null || migrationTasksToApply == null) {
    return;
  }
  String itemName=item.getProperty().getLabel();
  List<IProjectMigrationTask> toExecute=new ArrayList<IProjectMigrationTask>();
  for (  MigrationTask task : migrationTasksToApply) {
    IProjectMigrationTask projectTask=GetTasksHelper.getInstance().getProjectTask(task.getId());
    if (projectTask == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (!projectTask.isDeprecated()) {
      toExecute.add(projectTask);
    }
  }
  sortMigrationTasks(toExecute);
  ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IProjectMigrationTask task : toExecute) {
    monitor.subTask(Messages.getString(""String_Node_Str"",task.getName(),itemName));
    try {
      if ((item.getProperty().eResource() == null || item.eResource() == null)) {
        Property updatedProperty=factory.reload(item.getProperty());
        item=updatedProperty.getItem();
      }
      if (item != null) {
        ExecutionResult executionResult=task.execute(project,item);
        if (executionResult == ExecutionResult.FAILURE) {
          log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()));
        }
      }
    }
 catch (    Exception e) {
      log.warn(Messages.getString(""String_Node_Str"",itemName,task.getName()),e);
      try {
        factory.deleteObjectPhysical(new RepositoryObject(item.getProperty()));
        break;
      }
 catch (      PersistenceException e1) {
        log.error(Messages.getString(""String_Node_Str"",itemName));
      }
    }
  }
  try {
    ICodeGeneratorService service=(ICodeGeneratorService)GlobalServiceRegister.getDefault().getService(ICodeGeneratorService.class);
    ITalendSynchronizer routineSynchronizer=service.createJavaRoutineSynchronizer();
    if (item != null && item instanceof RoutineItem) {
      RoutineUtils.changeRoutinesPackage(item);
      RoutineItem routineItem=(RoutineItem)item;
      routineSynchronizer.forceSyncRoutine(routineItem);
      routineSynchronizer.syncRoutine(routineItem,true);
      routineSynchronizer.getFile(routineItem);
    }
  }
 catch (  Exception e) {
    throw e;
  }
}",0.9419021090330284
125430,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty() && checkedFolders.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    try {
                      if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                        IRepositoryViewObject object=itemRecord.getExistingItemWithSameName();
                        if (object != null) {
                          if (ProjectManager.getInstance().isInCurrentMainProject(object.getProperty())) {
                            id=object.getId();
                          }
                        }
                      }
                    }
 catch (                    Exception e) {
                      ExceptionHandler.process(e,Priority.WARN);
                    }
                    if (id == null) {
                      id=EcoreUtil.generateUUID();
                    }
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  String oldId=itemRecord.getProperty().getId();
                  itemRecord.getProperty().setId(id);
                  try {
                    changeIdManager.mapOldId2NewId(oldId,id);
                  }
 catch (                  Exception e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
            try {
              changeIdManager.changeIds();
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            unloadImportItems(allImportItemRecords);
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  changeIdManager.clear();
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
 else {
      changeIdManager.add(importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty() && checkedFolders.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED || itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    try {
                      if (overwrite && itemRecord.getState() == State.NAME_AND_ID_EXISTED_BOTH) {
                        IRepositoryViewObject object=itemRecord.getExistingItemWithSameName();
                        if (object != null) {
                          if (ProjectManager.getInstance().isInCurrentMainProject(object.getProperty())) {
                            id=object.getId();
                          }
                        }
                      }
                    }
 catch (                    Exception e) {
                      ExceptionHandler.process(e,Priority.WARN);
                    }
                    if (id == null) {
                      id=EcoreUtil.generateUUID();
                    }
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  String oldId=itemRecord.getProperty().getId();
                  itemRecord.getProperty().setId(id);
                  try {
                    changeIdManager.mapOldId2NewId(oldId,id);
                  }
 catch (                  Exception e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
            try {
              changeIdManager.changeIds();
            }
 catch (            Exception e) {
              ExceptionHandler.process(e);
            }
            unloadImportItems(allImportItemRecords);
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9970251375873864
125431,"public List<ImportItem> populateImportingItems(ResourcesManager resManager,boolean overwrite,IProgressMonitor progressMonitor,boolean enableProductChecking,boolean needCheck) throws Exception {
  IProgressMonitor monitor=progressMonitor;
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  try {
    prePopulate(monitor,resManager);
    ImportCacheHelper.getInstance().beforePopulateItems();
    if (resManager == null) {
      return Collections.emptyList();
    }
    Set<IPath> resPaths=resManager.getPaths();
    monitor.beginTask(Messages.getString(""String_Node_Str""),resPaths.size());
    List<ImportItem> items=new ArrayList<ImportItem>();
    List<IPath> resourcesPathsList=new ArrayList<IPath>(resPaths);
    Collections.sort(resourcesPathsList,new Comparator<IPath>(){
      @Override public int compare(      IPath o1,      IPath o2){
        return o1.toPortableString().compareTo(o2.toPortableString());
      }
    }
);
    List<IPath> doneList=new ArrayList<IPath>();
    ImportHandlerHelper importHandlerHelper=createImportHandlerHelper();
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      if (!importHandlerHelper.validResourcePath(path)) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,enableProductChecking);
        if (importHandler != null) {
          ImportItem importItem=null;
          if (needCheck) {
            importItem=importHandler.createImportItem(progressMonitor,resManager,path,overwrite,items);
          }
 else {
            importItem=importHandler.generateImportItem(progressMonitor,resManager,path,overwrite,items);
          }
          if (importItem != null && !items.contains(importItem)) {
            items.add(importItem);
            doneList.add(path);
          }
        }
        monitor.worked(1);
      }
    }
    resourcesPathsList.removeAll(doneList);
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      ImportItem importItem=importHandlerHelper.computeImportItem(monitor,resManager,path,overwrite);
      if (importItem != null) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,importItem,enableProductChecking,needCheck);
        if (importHandler != null) {
          if (importHandler instanceof ImportBasicHandler) {
            ImportBasicHandler importBasicHandler=(ImportBasicHandler)importHandler;
            if (needCheck) {
              if (importBasicHandler.checkItem(resManager,importItem,overwrite)) {
                importBasicHandler.checkAndSetProject(resManager,importItem);
                changeIdManager.add(importItem);
              }
            }
 else {
              importBasicHandler.resolveItem(resManager,importItem);
            }
          }
        }
 else {
          importItem=null;
        }
      }
      if (importItem != null && !items.contains(importItem)) {
        items.add(importItem);
      }
      monitor.worked(1);
    }
    List<IPath> emptyFolders=resManager.getEmptyFolders();
    if (!emptyFolders.isEmpty()) {
      DynaEnum<? extends DynaEnum<?>>[] values=ERepositoryObjectType.values();
      ERepositoryObjectType folderType=null;
      for (      IPath folder : emptyFolders) {
        if (folder.segmentCount() < 1) {
          continue;
        }
        IPath folderPathToCheck=folder.removeFirstSegments(1);
        String generatedPath=ERepositoryObjectType.DOCUMENTATION.getFolder() + ""String_Node_Str"" + RepositoryConstants.DOCUMENTATION_GENERATED_PATH;
        if (folderPathToCheck.removeTrailingSeparator().toPortableString().startsWith(generatedPath)) {
          continue;
        }
        for (        DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
          ERepositoryObjectType objectType=(ERepositoryObjectType)type;
          String[] products=objectType.getProducts();
          boolean isDI=false;
          for (          String product : products) {
            if (ERepositoryObjectType.PROD_DI.equals(product)) {
              isDI=true;
              break;
            }
          }
          if (isDI && objectType.isResouce()) {
            if (folderPathToCheck.toPortableString().startsWith(objectType.getFolder() + ""String_Node_Str"")) {
              folderType=objectType;
              ERepositoryObjectType fromChildrenType=getTypeFromChildren(objectType.getChildrenTypesArray(),folderPathToCheck.toPortableString());
              if (fromChildrenType != null) {
                folderType=fromChildrenType;
              }
              if (folderType == ERepositoryObjectType.SQLPATTERNS && folderPathToCheck.removeTrailingSeparator().toPortableString().endsWith(RepositoryConstants.USER_DEFINED) || folderType == ERepositoryObjectType.TEST_CONTAINER) {
                folderType=null;
              }
              if (folderPathToCheck.removeTrailingSeparator().toPortableString().equals(objectType.getFolder())) {
                folderType=null;
              }
              break;
            }
          }
        }
        if (folderType != null) {
          IPath typePath=new Path(folderType.getFolder());
          IPath folderPath=folder.removeFirstSegments(1 + typePath.segmentCount()).removeLastSegments(1).removeTrailingSeparator();
          String folderLabel=folder.lastSegment();
          EmptyFolderImportItem folderItem=new EmptyFolderImportItem(folderPath);
          folderItem.setRepositoryType(folderType);
          folderItem.setLabel(folderLabel);
          Project project=PropertiesFactory.eINSTANCE.createProject();
          project.setTechnicalLabel(folder.segment(0));
          project.setLabel(folder.segment(0));
          folderItem.setItemProject(project);
          Property property=PropertiesFactory.eINSTANCE.createProperty();
          property.setId(ProxyRepositoryFactory.getInstance().getNextId());
          FolderItem createFolderItem=PropertiesFactory.eINSTANCE.createFolderItem();
          ItemState createStatus=PropertiesFactory.eINSTANCE.createItemState();
          property.setItem(createFolderItem);
          createStatus.setPath(folderPath.toPortableString());
          createFolderItem.setState(createStatus);
          items.add(folderItem);
          folderItem.setProperty(property);
          folderType=null;
        }
      }
    }
    postPopulate(monitor,resManager,items.toArray(new ImportItem[0]));
    return items;
  }
  finally {
    ImportCacheHelper.getInstance().afterPopulateItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public List<ImportItem> populateImportingItems(ResourcesManager resManager,boolean overwrite,IProgressMonitor progressMonitor,boolean enableProductChecking,boolean needCheck) throws Exception {
  IProgressMonitor monitor=progressMonitor;
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  try {
    prePopulate(monitor,resManager);
    ImportCacheHelper.getInstance().beforePopulateItems();
    if (resManager == null) {
      return Collections.emptyList();
    }
    Set<IPath> resPaths=resManager.getPaths();
    monitor.beginTask(Messages.getString(""String_Node_Str""),resPaths.size());
    List<ImportItem> items=new ArrayList<ImportItem>();
    List<IPath> resourcesPathsList=new ArrayList<IPath>(resPaths);
    Collections.sort(resourcesPathsList,new Comparator<IPath>(){
      @Override public int compare(      IPath o1,      IPath o2){
        return o1.toPortableString().compareTo(o2.toPortableString());
      }
    }
);
    List<IPath> doneList=new ArrayList<IPath>();
    ImportHandlerHelper importHandlerHelper=createImportHandlerHelper();
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      if (!importHandlerHelper.validResourcePath(path)) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,enableProductChecking);
        if (importHandler != null) {
          ImportItem importItem=null;
          if (needCheck) {
            importItem=importHandler.createImportItem(progressMonitor,resManager,path,overwrite,items);
          }
 else {
            importItem=importHandler.generateImportItem(progressMonitor,resManager,path,overwrite,items);
          }
          if (importItem != null && !items.contains(importItem)) {
            items.add(importItem);
            doneList.add(path);
          }
        }
        monitor.worked(1);
      }
    }
    resourcesPathsList.removeAll(doneList);
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      ImportItem importItem=importHandlerHelper.computeImportItem(monitor,resManager,path,overwrite);
      if (importItem != null) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,importItem,enableProductChecking,needCheck);
        if (importHandler != null) {
          if (importHandler instanceof ImportBasicHandler) {
            ImportBasicHandler importBasicHandler=(ImportBasicHandler)importHandler;
            if (needCheck) {
              if (importBasicHandler.checkItem(resManager,importItem,overwrite)) {
                importBasicHandler.checkAndSetProject(resManager,importItem);
              }
            }
 else {
              importBasicHandler.resolveItem(resManager,importItem);
            }
          }
        }
 else {
          importItem=null;
        }
      }
      if (importItem != null && !items.contains(importItem)) {
        items.add(importItem);
      }
      monitor.worked(1);
    }
    List<IPath> emptyFolders=resManager.getEmptyFolders();
    if (!emptyFolders.isEmpty()) {
      DynaEnum<? extends DynaEnum<?>>[] values=ERepositoryObjectType.values();
      ERepositoryObjectType folderType=null;
      for (      IPath folder : emptyFolders) {
        if (folder.segmentCount() < 1) {
          continue;
        }
        IPath folderPathToCheck=folder.removeFirstSegments(1);
        String generatedPath=ERepositoryObjectType.DOCUMENTATION.getFolder() + ""String_Node_Str"" + RepositoryConstants.DOCUMENTATION_GENERATED_PATH;
        if (folderPathToCheck.removeTrailingSeparator().toPortableString().startsWith(generatedPath)) {
          continue;
        }
        for (        DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
          ERepositoryObjectType objectType=(ERepositoryObjectType)type;
          String[] products=objectType.getProducts();
          boolean isDI=false;
          for (          String product : products) {
            if (ERepositoryObjectType.PROD_DI.equals(product)) {
              isDI=true;
              break;
            }
          }
          if (isDI && objectType.isResouce()) {
            if (folderPathToCheck.toPortableString().startsWith(objectType.getFolder() + ""String_Node_Str"")) {
              folderType=objectType;
              ERepositoryObjectType fromChildrenType=getTypeFromChildren(objectType.getChildrenTypesArray(),folderPathToCheck.toPortableString());
              if (fromChildrenType != null) {
                folderType=fromChildrenType;
              }
              if (folderType == ERepositoryObjectType.SQLPATTERNS && folderPathToCheck.removeTrailingSeparator().toPortableString().endsWith(RepositoryConstants.USER_DEFINED) || folderType == ERepositoryObjectType.TEST_CONTAINER) {
                folderType=null;
              }
              if (folderPathToCheck.removeTrailingSeparator().toPortableString().equals(objectType.getFolder())) {
                folderType=null;
              }
              break;
            }
          }
        }
        if (folderType != null) {
          IPath typePath=new Path(folderType.getFolder());
          IPath folderPath=folder.removeFirstSegments(1 + typePath.segmentCount()).removeLastSegments(1).removeTrailingSeparator();
          String folderLabel=folder.lastSegment();
          EmptyFolderImportItem folderItem=new EmptyFolderImportItem(folderPath);
          folderItem.setRepositoryType(folderType);
          folderItem.setLabel(folderLabel);
          Project project=PropertiesFactory.eINSTANCE.createProject();
          project.setTechnicalLabel(folder.segment(0));
          project.setLabel(folder.segment(0));
          folderItem.setItemProject(project);
          Property property=PropertiesFactory.eINSTANCE.createProperty();
          property.setId(ProxyRepositoryFactory.getInstance().getNextId());
          FolderItem createFolderItem=PropertiesFactory.eINSTANCE.createFolderItem();
          ItemState createStatus=PropertiesFactory.eINSTANCE.createItemState();
          property.setItem(createFolderItem);
          createStatus.setPath(folderPath.toPortableString());
          createFolderItem.setState(createStatus);
          items.add(folderItem);
          folderItem.setProperty(property);
          folderType=null;
        }
      }
    }
    postPopulate(monitor,resManager,items.toArray(new ImportItem[0]));
    return items;
  }
  finally {
    ImportCacheHelper.getInstance().afterPopulateItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9964689774446926
125432,"public static void mergeJSON(JSONObject source,JSONObject target) throws JSONException {
  Iterator<String> keys=source.keys();
  while (keys.hasNext()) {
    String key=keys.next();
    Object o=source.get(key);
    if (target.has(key)) {
      if (o instanceof Integer) {
        int nbSource=source.getInt(key);
        int nbTarget=target.getInt(key);
        target.put(key,nbSource + nbTarget);
      }
 else       if (o instanceof JSONObject) {
        JSONObject objectSource=(JSONObject)o;
        JSONObject objectTarget=target.getJSONObject(key);
        mergeJSON(objectSource,objectTarget);
      }
 else       if (o instanceof JSONArray) {
        JSONArray sourceArray=(JSONArray)o;
        JSONArray targetArray=target.getJSONArray(key);
        Set<Object> data=new HashSet<>();
        for (int i=0; i < sourceArray.length(); i++) {
          data.add(sourceArray.get(i));
        }
        for (int i=0; i < targetArray.length(); i++) {
          data.add(targetArray.get(i));
        }
        targetArray=new JSONArray();
        for (        Object obj : data) {
          targetArray.put(obj);
        }
        target.put(key,targetArray);
      }
 else {
        target.put(key,o);
      }
    }
 else {
      target.put(key,o);
    }
  }
}","public static JSONObject mergeJSON(JSONObject source,JSONObject target) throws JSONException {
  Iterator<String> keys=source.keys();
  while (keys.hasNext()) {
    String key=keys.next();
    Object o=source.get(key);
    if (target.has(key)) {
      if (o instanceof Integer) {
        int nbSource=source.getInt(key);
        int nbTarget=target.getInt(key);
        target.put(key,nbSource + nbTarget);
      }
 else       if (o instanceof JSONObject) {
        JSONObject objectSource=(JSONObject)o;
        JSONObject objectTarget=target.getJSONObject(key);
        mergeJSON(objectSource,objectTarget);
      }
 else       if (o instanceof JSONArray) {
        JSONArray sourceArray=(JSONArray)o;
        JSONArray targetArray=target.getJSONArray(key);
        Set<Object> data=new HashSet<>();
        for (int i=0; i < sourceArray.length(); i++) {
          data.add(sourceArray.get(i));
        }
        for (int i=0; i < targetArray.length(); i++) {
          data.add(targetArray.get(i));
        }
        targetArray=new JSONArray();
        Map<String,List<JSONObject>> objectMap=new HashMap<String,List<JSONObject>>();
        for (        Object obj : data) {
          if ((obj instanceof JSONObject) && ((JSONObject)obj).get(""String_Node_Str"") != null) {
            List<JSONObject> dataList=new ArrayList<JSONObject>();
            String componentName=(String)((JSONObject)obj).get(""String_Node_Str"");
            if (objectMap.containsKey(componentName)) {
              dataList=objectMap.get(componentName);
              dataList.add((JSONObject)obj);
            }
 else {
              dataList.add((JSONObject)obj);
              objectMap.put(componentName,dataList);
            }
          }
 else {
            targetArray.put(obj);
          }
        }
        target.put(key,targetArray);
        for (        String objKey : objectMap.keySet()) {
          List<JSONObject> dataList=objectMap.get(objKey);
          if (dataList.size() > 1) {
            JSONObject targetObj=dataList.get(0);
            for (int i=1; i < dataList.size(); i++) {
              JSONObject obj=dataList.get(i);
              targetObj=mergeJSON((JSONObject)obj,targetObj);
            }
            targetArray.put(targetObj);
            target.put(key,targetArray);
          }
 else {
            for (            Object obj : dataList) {
              targetArray.put(obj);
            }
            target.put(key,targetArray);
          }
        }
      }
 else {
        target.put(key,o);
      }
    }
 else {
      target.put(key,o);
    }
  }
  return target;
}",0.616381544841887
125433,"public boolean getMergeRefProject(){
  IPreferenceStore preferenceStore=RepositoryManager.getRepositoryPreferenceStore();
  return preferenceStore.getBoolean(IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT);
}","public boolean getMergeRefProject(){
  IPreferenceStore preferenceStore=RepositoryManager.getRepositoryPreferenceStore();
  if (!preferenceStore.contains(IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT)) {
    return false;
  }
  return preferenceStore.getBoolean(IRepositoryPrefConstants.MERGE_REFERENCE_PROJECT);
}",0.6717267552182163
125434,"public Set<InstalledUnit> installPatchFile(File updatesiteZip,boolean keepChangeConfigIni) throws Exception {
  if (updatesiteZip != null && updatesiteZip.exists() && updatesiteZip.isFile()) {
    final File tmpFolder=org.talend.utils.files.FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
    try {
      FilesUtils.unzip(updatesiteZip.getAbsolutePath(),tmpFolder.getAbsolutePath());
      final File[] updateFiles=UpdatesHelper.findUpdateFiles(tmpFolder);
      Set<InstalledUnit> installed=new HashSet<InstalledUnit>();
      if (updateFiles != null && updateFiles.length > 1) {
        for (        File f : updateFiles) {
          installed.addAll(installPatchFolder(f,keepChangeConfigIni));
        }
      }
      return installed;
    }
  finally {
      FilesUtils.deleteFolder(tmpFolder,true);
    }
  }
  return Collections.emptySet();
}","public Set<InstalledUnit> installPatchFile(File updatesiteZip,boolean keepChangeConfigIni) throws Exception {
  if (updatesiteZip != null && updatesiteZip.exists() && updatesiteZip.isFile() && updatesiteZip.getName().endsWith(FileExtensions.ZIP_FILE_SUFFIX)) {
    final File tmpFolder=org.talend.utils.files.FileUtils.createTmpFolder(""String_Node_Str"",""String_Node_Str"");
    try {
      FilesUtils.unzip(updatesiteZip.getAbsolutePath(),tmpFolder.getAbsolutePath());
      final File[] updateFiles=UpdatesHelper.findUpdateFiles(tmpFolder);
      Set<InstalledUnit> installed=new HashSet<InstalledUnit>();
      if (updateFiles != null && updateFiles.length > 0) {
        for (        File f : updateFiles) {
          if (f.isDirectory()) {
            installed.addAll(installPatchFolder(f,keepChangeConfigIni));
          }
        }
      }
      return installed;
    }
  finally {
      FilesUtils.deleteFolder(tmpFolder,true);
    }
  }
  return Collections.emptySet();
}",0.9365165491047206
125435,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  Timer timer=Timer.getTimer(""String_Node_Str"");
  timer.start();
  if (needInitialize) {
    monitorWrap=new EventLoopProgressMonitor(monitor);
    try {
      final ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      factory.initialize();
    }
 catch (    Exception e) {
      throw new InvocationTargetException(e);
    }
  }
  try {
    ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
  viewer.refresh();
  viewer.setSelection(new TreeSelection());
  expandTreeRootIfOnlyOneRoot();
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
  timer.stop();
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  Timer timer=Timer.getTimer(""String_Node_Str"");
  timer.start();
  if (needInitialize) {
    monitorWrap=new EventLoopProgressMonitor(monitor);
    try {
      final ProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      factory.initialize();
    }
 catch (    Exception e) {
      throw new InvocationTargetException(e);
    }
  }
  try {
    ResourcesPlugin.getWorkspace().getRoot().refreshLocal(IResource.DEPTH_INFINITE,monitor);
  }
 catch (  CoreException e) {
    throw new InvocationTargetException(e);
  }
  viewer.setSelection(new TreeSelection());
  viewer.refresh();
  expandTreeRootIfOnlyOneRoot();
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
  timer.stop();
}",0.9576923076923076
125436,"/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    List<IRepositoryNode> childrens=new ArrayList<>();
    Widget repWidget=this.findItem(node);
    if (repWidget != null) {
      Item[] childrenItem=this.getChildren(repWidget);
      if (childrenItem != null) {
        for (        Item childItem : childrenItem) {
          RepositoryNode repNode=this.getRepositoryNode(childItem);
          if (repNode != null) {
            childrens.add(repNode);
          }
        }
      }
    }
 else {
      ITreeContentProvider contentProvider=(ITreeContentProvider)getContentProvider();
      Object[] childrensObject=contentProvider.getElements(node);
      for (      Object o : childrensObject) {
        if (o instanceof IRepositoryNode) {
          childrens.add((IRepositoryNode)o);
        }
      }
    }
    IRepositoryNode childNode=findItemNode(id,childrens);
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    List<IRepositoryNode> childrens=new ArrayList<>();
    Widget repWidget=this.findItem(node);
    if (repWidget != null && !repWidget.isDisposed()) {
      Item[] childrenItem=this.getChildren(repWidget);
      if (childrenItem != null) {
        for (        Item childItem : childrenItem) {
          RepositoryNode repNode=this.getRepositoryNode(childItem);
          if (repNode != null) {
            childrens.add(repNode);
          }
        }
      }
    }
 else {
      ITreeContentProvider contentProvider=(ITreeContentProvider)getContentProvider();
      Object[] childrensObject=contentProvider.getElements(node);
      for (      Object o : childrensObject) {
        if (o instanceof IRepositoryNode) {
          childrens.add((IRepositoryNode)o);
        }
      }
    }
    IRepositoryNode childNode=findItemNode(id,childrens);
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}",0.9884861407249468
125437,"/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorControls();
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void hookControl(    Control control){
      super.hookControl(control);
      table.addListener(SWT.SetData,new Listener(){
        @Override public void handleEvent(        Event event){
          TableItem item=(TableItem)event.item;
          int index=table.indexOf(item);
          if (index == -1) {
            return;
          }
          B element=getInputList().get(index);
          associate(element,item);
          updateItem(item,element);
          refreshTableEditorColumn(index);
        }
      }
);
    }
  }
;
  setTablePreferences();
  return table;
}","/** 
 * Instantiate the <code>Table</code> with the <code>compositeParent</code> as parent, with pre-configured styles and options.
 * @return
 */
public Table createTable(){
  if (this.table != null) {
    this.table.dispose();
  }
  this.table=new Table(compositeParent,checkTableStyles());
  tableViewer=new TableViewer(table){
    @Override protected void handleDispose(    DisposeEvent event){
      if (this.isCellEditorActive()) {
        CellEditor[] cellEditors=this.getCellEditors();
        for (int i=0; i < cellEditors.length; i++) {
          CellEditor cellEditor=cellEditors[i];
          if (cellEditor != null && cellEditor.isActivated() && cellEditor instanceof IShowInvisibleCellEditorMethods) {
            ((IShowInvisibleCellEditorMethods)cellEditor).fireApplyEditorValue();
          }
        }
      }
      super.handleDispose(event);
    }
    @Override public void add(    Object element){
      super.add(element);
    }
    @Override public void add(    Object[] elements){
      super.add(elements);
    }
    @Override public void insert(    Object element,    int position){
      super.insert(element,position);
    }
    @Override public void remove(    Object[] elements){
      super.remove(elements);
    }
    @Override public void replace(    Object element,    int index){
      super.replace(element,index);
      refreshTableEditorControls();
    }
    @Override public void refresh(){
      super.refresh();
    }
    @Override public void refresh(    boolean updateLabels){
      super.refresh(updateLabels);
    }
    @Override public void refresh(    Object element,    boolean updateLabels){
      super.refresh(element,updateLabels);
      refreshTableEditorControls();
    }
    @Override public void refresh(    Object element){
      if (table.isDisposed()) {
        return;
      }
      for (      TableItem item : table.getItems()) {
        if (item.isDisposed()) {
          return;
        }
      }
      super.refresh(element);
    }
    @Override protected void triggerEditorActivationEvent(    ColumnViewerEditorActivationEvent event){
      if (editorActivate) {
        super.triggerEditorActivationEvent(event);
      }
    }
    @Override protected void hookControl(    Control control){
      super.hookControl(control);
      table.addListener(SWT.SetData,new Listener(){
        @Override public void handleEvent(        Event event){
          TableItem item=(TableItem)event.item;
          int index=table.indexOf(item);
          if (index == -1) {
            return;
          }
          B element=getInputList().get(index);
          associate(element,item);
          updateItem(item,element);
          refreshTableEditorColumn(index);
        }
      }
);
    }
  }
;
  setTablePreferences();
  return table;
}",0.893600158510006
125438,"private static void collectConnVariablesOfAdditionalTable(Set<String> varList,ConnectionItem connectionItem){
  Connection currentConnection=connectionItem.getConnection();
  if (currentConnection instanceof SAPConnection) {
    SAPConnection sapConn=(SAPConnection)currentConnection;
    for (    AdditionalConnectionProperty sapProperty : sapConn.getAdditionalProperties()) {
      varList.add(sapProperty.getPropertyName());
    }
  }
 else   if (currentConnection instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)currentConnection;
    List<Map<String,Object>> hadoopPropertiesList=DBConnectionContextUtils.getHiveOrHbaseHadoopProperties(dbConn);
    if (!hadoopPropertiesList.isEmpty()) {
      for (      Map<String,Object> propertyMap : hadoopPropertiesList) {
        varList.add((String)propertyMap.get(""String_Node_Str""));
      }
    }
    List<Map<String,Object>> hiveJdbcPropertiesList=DBConnectionContextUtils.getHiveJdbcProperties(dbConn);
    if (!hiveJdbcPropertiesList.isEmpty()) {
      for (      Map<String,Object> propertyMap : hiveJdbcPropertiesList) {
        varList.add((String)propertyMap.get(""String_Node_Str""));
      }
    }
  }
 else {
    Set<String> additionPropertyList=ExtendedNodeConnectionContextUtils.getAdditionalPropertiesVariablesForExistContext(currentConnection);
    Iterator<String> it=additionPropertyList.iterator();
    while (it.hasNext()) {
      String additionalConProperty=it.next();
      varList.add(additionalConProperty);
    }
  }
}","private static void collectConnVariablesOfAdditionalTable(Set<String> varList,ConnectionItem connectionItem){
  Connection currentConnection=connectionItem.getConnection();
  INOSQLService service=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(INOSQLService.class)) {
    service=(INOSQLService)GlobalServiceRegister.getDefault().getService(INOSQLService.class);
  }
  if (service.isUseReplicaSet(currentConnection)) {
    String replicaSets=service.getMongoDBReplicaSets(currentConnection);
    try {
      JSONArray jsa=new JSONArray(replicaSets);
      for (int i=0; i < jsa.length(); i++) {
        int paramNum=i + 1;
        String hostParamName=ExtendedNodeConnectionContextUtils.getReplicaParamName(EHadoopParamName.ReplicaHost,paramNum);
        String portParamName=ExtendedNodeConnectionContextUtils.getReplicaParamName(EHadoopParamName.ReplicaPort,paramNum);
        varList.add(hostParamName);
        varList.add(portParamName);
      }
      if (varList.contains(EHadoopParamName.ReplicaSets.name())) {
        varList.remove(EHadoopParamName.ReplicaSets.name());
      }
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (currentConnection instanceof SAPConnection) {
    SAPConnection sapConn=(SAPConnection)currentConnection;
    for (    AdditionalConnectionProperty sapProperty : sapConn.getAdditionalProperties()) {
      varList.add(sapProperty.getPropertyName());
    }
  }
 else   if (currentConnection instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)currentConnection;
    List<Map<String,Object>> hadoopPropertiesList=DBConnectionContextUtils.getHiveOrHbaseHadoopProperties(dbConn);
    if (!hadoopPropertiesList.isEmpty()) {
      for (      Map<String,Object> propertyMap : hadoopPropertiesList) {
        varList.add((String)propertyMap.get(""String_Node_Str""));
      }
    }
    List<Map<String,Object>> hiveJdbcPropertiesList=DBConnectionContextUtils.getHiveJdbcProperties(dbConn);
    if (!hiveJdbcPropertiesList.isEmpty()) {
      for (      Map<String,Object> propertyMap : hiveJdbcPropertiesList) {
        varList.add((String)propertyMap.get(""String_Node_Str""));
      }
    }
  }
 else {
    Set<String> additionPropertyList=ExtendedNodeConnectionContextUtils.getAdditionalPropertiesVariablesForExistContext(currentConnection);
    Iterator<String> it=additionPropertyList.iterator();
    while (it.hasNext()) {
      String additionalConProperty=it.next();
      varList.add(additionalConProperty);
    }
  }
}",0.7488943488943489
125439,"protected String getCorrectVariableName(ContextItem contextItem,String originalVariableName,EHadoopParamName noSqlParam){
  Set<String> contextVarNames=ContextUtils.getContextVarNames(contextItem);
  if (contextVarNames != null && !contextVarNames.contains(originalVariableName)) {
    for (    String varName : contextVarNames) {
      if (varName.endsWith(noSqlParam.name())) {
        return varName;
      }
    }
  }
  return originalVariableName;
}","protected String getCorrectVariableName(ContextItem contextItem,String originalVariableName,String noSqlParam){
  Set<String> contextVarNames=ContextUtils.getContextVarNames(contextItem);
  if (contextVarNames != null && !contextVarNames.contains(originalVariableName)) {
    for (    String varName : contextVarNames) {
      if (varName.endsWith(noSqlParam)) {
        return varName;
      }
    }
  }
  return originalVariableName;
}",0.9674523007856342
125440,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroUtils.isSameType(nonnullable,AvroUtils._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
 else   if (nonnullable.getProp(SchemaConstants.JAVA_CLASS_FLAG) != null) {
    col.setTalendType(JavaTypesManager.OBJECT.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_CUSTOM))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_CUSTOM,prop);
    col.getTaggedValue().add(tv);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value >= 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value >= 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value >= 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SCALE))) {
    Long value=Long.parseLong(prop);
    col.setScale(value >= 0 ? value : -1);
  }
 else {
    col.setScale(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroUtils.isSameType(nonnullable,AvroUtils._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_NO_LOGICAL_TYPE,""String_Node_Str"");
    col.getTaggedValue().add(tv);
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._int())) {
    if (LogicalTypes.fromSchema(nonnullable) == LogicalTypes.date()) {
      col.setTalendType(JavaTypesManager.DATE.getId());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_DATE,""String_Node_Str"");
      col.getTaggedValue().add(tv);
    }
 else {
      col.setTalendType(JavaTypesManager.INTEGER.getId());
    }
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._long())) {
    if (LogicalTypes.fromSchema(nonnullable) == LogicalTypes.timestampMillis()) {
      col.setTalendType(JavaTypesManager.DATE.getId());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_DATE_TIMESTAMP,""String_Node_Str"");
      col.getTaggedValue().add(tv);
    }
 else {
      col.setTalendType(JavaTypesManager.LONG.getId());
    }
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroUtils.isSameType(nonnullable,AvroUtils._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
 else   if (nonnullable.getProp(SchemaConstants.JAVA_CLASS_FLAG) != null) {
    col.setTalendType(JavaTypesManager.OBJECT.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(DiSchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_CUSTOM))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(DiSchemaConstants.TALEND6_COLUMN_CUSTOM,prop);
    col.getTaggedValue().add(tv);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value >= 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value >= 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value >= 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_SCALE))) {
    Long value=Long.parseLong(prop);
    col.setScale(value >= 0 ? value : -1);
  }
 else {
    col.setScale(-1);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(DiSchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}",0.934099808381238
125441,"/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  BaseFieldTypeBuilder<Schema> ftb=in.isNullable() ? fb.type().nullable() : fb.type();
  Object defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  Schema type=null;
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    type=AvroUtils._long();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Long.parseLong(defaultValue.toString());
  }
 else   if (JavaTypesManager.INTEGER.getId().equals(tt)) {
    type=AvroUtils._int();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.SHORT.getId().equals(tt)) {
    type=AvroUtils._short();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE.getId().equals(tt)) {
    type=AvroUtils._byte();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    type=AvroUtils._double();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Double.parseDouble(defaultValue.toString());
  }
 else   if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    type=AvroUtils._float();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Float.parseFloat(defaultValue.toString());
  }
 else   if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    type=AvroUtils._decimal();
  }
 else   if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    type=AvroUtils._boolean();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Boolean.parseBoolean(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    type=AvroUtils._bytes();
  }
 else   if (JavaTypesManager.DATE.getId().equals(tt)) {
    type=AvroUtils._date();
  }
 else   if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (""String_Node_Str"".equals(tt) || JavaTypesManager.OBJECT.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
  }
  if (type == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + tt);
  }
  type=in.isNullable() ? AvroUtils.wrapAsNullable(type) : type;
  return defaultValue == null ? fb.type(type).noDefault() : fb.type(type).withDefault(defaultValue);
}","/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  Object defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  Schema type=null;
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    type=AvroUtils._long();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Long.parseLong(defaultValue.toString());
  }
 else   if (JavaTypesManager.INTEGER.getId().equals(tt)) {
    type=AvroUtils._int();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.SHORT.getId().equals(tt)) {
    type=AvroUtils._short();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE.getId().equals(tt)) {
    type=AvroUtils._byte();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    type=AvroUtils._double();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Double.parseDouble(defaultValue.toString());
  }
 else   if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    type=AvroUtils._float();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Float.parseFloat(defaultValue.toString());
  }
 else   if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    type=AvroUtils._decimal();
  }
 else   if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    type=AvroUtils._boolean();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Boolean.parseBoolean(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    type=AvroUtils._bytes();
  }
 else   if (JavaTypesManager.DATE.getId().equals(tt)) {
    if (matchTag(in,DiSchemaConstants.TALEND6_COLUMN_DATE_DATE)) {
      type=AvroUtils._logicalDate();
    }
 else     if (matchTag(in,DiSchemaConstants.TALEND6_COLUMN_DATE_TIMESTAMP)) {
      type=AvroUtils._logicalTimestamp();
    }
 else {
      type=AvroUtils._date();
    }
  }
 else   if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (""String_Node_Str"".equals(tt) || JavaTypesManager.OBJECT.getId().equals(tt)) {
    type=AvroUtils._string();
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
  }
  if (type == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + tt);
  }
  type=in.isNullable() ? AvroUtils.wrapAsNullable(type) : type;
  return defaultValue == null ? fb.type(type).noDefault() : fb.type(type).withDefault(defaultValue);
}",0.9457438345266508
125442,"@Override protected Object openDialogBox(Control cellEditorWindow){
  String schemaToEdit=(String)this.getValue();
  String oldValue=schemaToEdit;
  boolean metaReadonly=false;
  final List<IMetadataTable> metadatas=node.getMetadataList();
  IMetadataTable tableToEdit=null;
  if (schemaToEdit == null || ""String_Node_Str"".equals(schemaToEdit)) {
    SAPConnectionItem sapItem=getSAPRepositoryItem();
    if (sapItem != null) {
      boolean readonly=node.getProcess().isReadOnly();
      if (node.getJobletNode() != null) {
        readonly=node.isReadOnly();
      }
      SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,sapItem,EProcessType.CREATE,schemaToEdit,readonly);
      if (choiceDialog.open() == Window.OK) {
        if (choiceDialog.getSelctionType() == ESelectionCategory.REPOSITORY) {
          org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
          if (selectedMetadataTable != null) {
            final IMetadataTable metaTable=ConvertionHelper.convert(selectedMetadataTable);
            int index=0;
            if (getTableViewer() != null) {
              index=getTableViewer().getTable().getSelectionIndex();
            }
            SAPFunctionUnit functionUnit=null;
            if (selectedMetadataTable.eContainer() instanceof SAPFunctionUnit) {
              functionUnit=(SAPFunctionUnit)selectedMetadataTable.eContainer();
            }
            if (""String_Node_Str"".equals(node.getComponent().getName())) {
              node.getMetadataFromConnector(schemaToEdit);
              executeCommand(new RepositoryChangeMetadataForSAPBapi(node,functionUnit,metaTable,null,index));
            }
 else {
              executeCommand(new RepositoryChangeMetadataForSAPCommand(node,ISAPConstant.TABLE_SCHEMAS,metaTable.getLabel(),metaTable,index));
            }
            if (getTableViewer() != null) {
              getTableViewer().refresh(true);
            }
            return selectedMetadataTable.getLabel();
          }
          return null;
        }
 else {
        }
      }
 else {
        this.setValue(oldValue);
        return oldValue;
      }
    }
    EbcdicConnectionItem repositoryItem=getRepositoryItem();
    if (repositoryItem != null) {
      SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,repositoryItem,EProcessType.CREATE,schemaToEdit,node.getProcess().isReadOnly());
      if (choiceDialog.open() == Window.OK) {
        if (choiceDialog.getSelctionType() == ESelectionCategory.REPOSITORY) {
          org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
          if (selectedMetadataTable != null) {
            final IMetadataTable metaTable=ConvertionHelper.convert(selectedMetadataTable);
            int index=0;
            if (getTableViewer() != null) {
              index=getTableViewer().getTable().getSelectionIndex();
            }
            SAPFunctionUnit functionUnit=null;
            if (selectedMetadataTable.eContainer() instanceof SAPFunctionUnit) {
              functionUnit=(SAPFunctionUnit)selectedMetadataTable.eContainer();
            }
            if (""String_Node_Str"".equals(node.getComponent().getName())) {
              executeCommand(new RepositoryChangeMetadataForSAPBapi(node,functionUnit,tableToEdit,metaTable));
            }
 else {
              executeCommand(new RepositoryChangeMetadataForEBCDICCommand(node,IEbcdicConstant.TABLE_SCHEMAS,metaTable.getLabel(),metaTable,index));
            }
            if (getTableViewer() != null) {
              getTableViewer().refresh(true);
            }
            return selectedMetadataTable.getLabel();
          }
          return null;
        }
 else {
        }
      }
 else {
        return null;
      }
    }
    InputDialog dialogInput=new InputDialog(cellEditorWindow.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",new IInputValidator(){
      @Override public String isValid(      String newText){
        if (""String_Node_Str"".equals(newText.trim())) {
          return Messages.getString(""String_Node_Str"");
        }
        if (MetadataToolHelper.getMetadataTableFromNodeTableName(node,newText) != null || !node.getProcess().checkValidConnectionName(newText)) {
          return Messages.getString(""String_Node_Str"");
        }
        return null;
      }
    }
);
    if (dialogInput.open() == InputDialog.OK) {
      Object newPropValue=dialogInput.getValue();
      if (!isRulesComponent(node)) {
        node.getProcess().addUniqueConnectionName(dialogInput.getValue());
        final MetadataTable table=new MetadataTable();
        table.setLabel(dialogInput.getValue());
        table.setTableName(dialogInput.getValue());
        tableToEdit=table;
        metadatas.add(table);
        executeCommand(new Command(){
          @Override public void execute(){
            if (getTableViewer() != null) {
              Table tTable=getTableViewer().getTable();
              Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
              if (data instanceof Map) {
                final Map<String,Object> valueMap=(Map<String,Object>)data;
                Object code=valueMap.get(IEbcdicConstant.FIELD_CODE);
                if (code == null || ""String_Node_Str"".equals(code)) {
                  valueMap.put(IEbcdicConstant.FIELD_CODE,table.getTableName());
                  valueMap.put(IEbcdicConstant.FIELD_SCHEMA,table.getTableName());
                }
              }
              getTableViewer().refresh();
            }
          }
        }
);
      }
 else {
        INode inputNode=null, outputNode=null;
        IMetadataTable originalInputTable=null, originalCurrentOutTable=null, finalOutTable=null, finalInputTable=null;
        MetadataDialog metaDialog=null;
        int index=getTableViewer().getTable().getSelectionIndex();
        if (node.getIncomingConnections().size() > 0) {
          if (node.getOutgoingConnections().size() > 0) {
            outputNode=node.getOutgoingConnections().get(0).getTarget();
          }
          originalInputTable=node.getIncomingConnections().get(0).getMetadataTable();
          inputNode=node.getIncomingConnections().get(0).getSource();
          if (outputNode == null) {
            outputNode=node;
          }
          List<IMetadataColumn> listColumns=new ArrayList<IMetadataColumn>();
          originalCurrentOutTable=new MetadataTable();
          originalCurrentOutTable.setListColumns(listColumns);
          metaDialog=new MetadataDialog(new Shell(),originalInputTable,inputNode,originalCurrentOutTable,outputNode,tableEditorView.getTableViewerCreator().getCommandStack());
          if (metaDialog.open() == Window.OK) {
            finalInputTable=metaDialog.getInputMetaData().clone();
            finalOutTable=metaDialog.getOutputMetaData().clone();
            ChangeRuleMetadataCommand changeRuleMetadataCommand=new ChangeRuleMetadataCommand(node,""String_Node_Str"",newPropValue,finalOutTable,index);
            executeCommand(changeRuleMetadataCommand);
            if (getTableViewer() != null) {
              getTableViewer().refresh();
            }
          }
        }
 else {
          node.getProcess().addUniqueConnectionName(dialogInput.getValue());
          final MetadataTable table=new MetadataTable();
          table.setLabel(dialogInput.getValue());
          table.setTableName(dialogInput.getValue());
          tableToEdit=table;
          metadatas.add(table);
          executeCommand(new Command(){
            @Override public void execute(){
              if (getTableViewer() != null) {
                Table tTable=getTableViewer().getTable();
                Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
                if (data instanceof Map) {
                  final Map<String,Object> valueMap=(Map<String,Object>)data;
                  Object code=valueMap.get(IEbcdicConstant.FIELD_CODE);
                  if (code == null || ""String_Node_Str"".equals(code)) {
                    valueMap.put(IEbcdicConstant.FIELD_CODE,table.getTableName());
                    valueMap.put(IEbcdicConstant.FIELD_SCHEMA,table.getTableName());
                  }
                }
                getTableViewer().refresh();
              }
            }
          }
);
        }
      }
    }
  }
 else {
    if (isSAPNode(node) && getTableViewer() != null) {
      Table tTable=getTableViewer().getTable();
      Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
      if (data instanceof Map) {
        final Map<String,Object> valueMap=(Map<String,Object>)data;
        Object code=valueMap.get(IEbcdicConstant.FIELD_SCHEMA);
        tableToEdit=MetadataToolHelper.getMetadataTableFromNodeTableName(node,code.toString());
      }
    }
 else {
      tableToEdit=MetadataToolHelper.getMetadataTableFromNodeTableName(node,schemaToEdit);
    }
    if (getTableViewer() != null && tableToEdit != null && isEBCDICNode(node)) {
      Table tTable=getTableViewer().getTable();
      Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
      if (data instanceof Map) {
        final Map<String,Object> valueMap=(Map<String,Object>)data;
        final String key=IEbcdicConstant.FIELD_SCHEMA + IEbcdicConstant.REF_TYPE;
        Object repositoyType=valueMap.get(key);
        EbcdicConnectionItem repositoryItem=getRepositoryItem();
        EProcessType processType=EProcessType.BUILTIN;
        if (repositoryItem != null) {
          if (repositoyType != null && IEbcdicConstant.REF_ATTR_REPOSITORY.equals(repositoyType)) {
            processType=EProcessType.REPOSITORY;
          }
        }
        SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,repositoryItem,processType,schemaToEdit,node.getProcess().isReadOnly());
        if (choiceDialog.open() == Window.OK) {
          ESelectionCategory selctionType=choiceDialog.getSelctionType();
switch (selctionType) {
case SHOW_SCHEMA:
            if (processType == EProcessType.REPOSITORY) {
              metaReadonly=true;
            }
          break;
case REPOSITORY:
        final org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
      if (selectedMetadataTable != null) {
        String newSchema=selectedMetadataTable.getLabel();
        if (!schemaToEdit.equals(newSchema) || processType == EProcessType.BUILTIN) {
          RepositoryChangeMetadataForEBCDICCommand cmd=new RepositoryChangeMetadataForEBCDICCommand(node,IEbcdicConstant.TABLE_SCHEMAS,newSchema,schemaToEdit,ConvertionHelper.convert(selectedMetadataTable),tableToEdit,tTable.getSelectionIndex());
          executeCommand(cmd);
          if (getTableViewer() != null) {
            getTableViewer().refresh();
          }
        }
        return newSchema;
      }
 else {
      }
case BUILDIN:
    executeCommand(new Command(){
      @Override public void execute(){
        valueMap.remove(key);
        if (getTableViewer() != null) {
          getTableViewer().refresh();
        }
      }
    }
);
  return schemaToEdit;
default :
}
}
 else {
return null;
}
}
}
if (getTableViewer() != null && tableToEdit != null && isSAPNode(node)) {
Table tTable=getTableViewer().getTable();
Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
if (data instanceof Map) {
final Map<String,Object> valueMap=(Map<String,Object>)data;
final String key=ISAPConstant.FIELD_SCHEMA + ISAPConstant.REF_TYPE;
Object repositoyType=valueMap.get(key);
SAPConnectionItem repositoryItem=getSAPRepositoryItem();
EProcessType processType=EProcessType.BUILTIN;
if (repositoryItem != null) {
if (repositoyType != null && ISAPConstant.REF_ATTR_REPOSITORY.equals(repositoyType)) {
processType=EProcessType.REPOSITORY;
}
}
Object type=valueMap.get(ISAPConstant.TYPE);
if (type != null && type.toString().equals(TABLE)) {
SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,repositoryItem,processType,schemaToEdit,node.getProcess().isReadOnly());
if (choiceDialog.open() == Window.OK) {
ESelectionCategory selctionType=choiceDialog.getSelctionType();
switch (selctionType) {
case SHOW_SCHEMA:
  if (processType == EProcessType.REPOSITORY) {
    metaReadonly=true;
  }
break;
case REPOSITORY:
final org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
if (selectedMetadataTable != null) {
String newSchema=selectedMetadataTable.getLabel();
if (!schemaToEdit.equals(newSchema) || processType == EProcessType.BUILTIN) {
RepositoryChangeMetadataForSAPCommand cmd=new RepositoryChangeMetadataForSAPCommand(node,ISAPConstant.TABLE_SCHEMAS,newSchema,schemaToEdit,ConvertionHelper.convert(selectedMetadataTable),tableToEdit,tTable.getSelectionIndex());
executeCommand(cmd);
if (getTableViewer() != null) {
  getTableViewer().refresh();
}
}
return newSchema;
}
 else {
}
case BUILDIN:
executeCommand(new Command(){
@Override public void execute(){
valueMap.remove(key);
if (getTableViewer() != null) {
getTableViewer().refresh();
}
}
}
);
return schemaToEdit;
default :
}
}
 else {
return null;
}
}
 else {
if (processType == EProcessType.REPOSITORY) {
metaReadonly=true;
}
}
}
}
}
Table tTable=getTableViewer().getTable();
boolean hasParentRow=false;
Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
Object type=null;
Object parent_row=null;
if (data instanceof Map) {
final Map<String,Object> valueMap=(Map<String,Object>)data;
if (valueMap.containsKey(PARENT_ROW)) {
hasParentRow=true;
}
final String key=ISAPConstant.TYPE;
type=valueMap.get(key);
parent_row=valueMap.get(PARENT_ROW);
if (isSAPNode(node) && type instanceof Integer) {
type=SINGLE;
valueMap.remove(key);
valueMap.put(key,SINGLE);
}
}
final boolean hasParentRowForExe=hasParentRow;
if (tableToEdit != null) {
if (isHL7OutputNode(node) && node.getIncomingConnections().size() > 0) {
copyHL7OutputMetadata(node,tableToEdit);
}
 else if (isSAPNode(node) && type != null && type.toString().equals(TABLE) && node.getIncomingConnections().size() > 0 && hasParentRow && (parent_row != null && !parent_row.equals(""String_Node_Str"") && !(parent_row instanceof Integer))) {
copySAPOutputMetadata(node,tableToEdit);
}
 else {
MetadataDialog dialog=new MetadataDialog(cellEditorWindow.getShell(),tableToEdit.clone(),node,null);
dialog.setSingleAndStruct(false);
dialog.setInputReadOnly(metaReadonly);
dialog.setOutputReadOnly(metaReadonly);
if (isSAPNode(node) && type != null && (type.equals(SINGLE) || type.equals(STRUCTURE)) && hasParentRow) {
dialog.setSingleAndStruct(true);
}
final IMetadataTable oldTable=tableToEdit;
if (dialog.open() == MetadataDialog.OK) {
final IMetadataTable newTable=dialog.getOutputMetaData();
if (!oldTable.sameMetadataAs(newTable,IMetadataColumn.OPTIONS_NONE)) {
executeCommand(new Command(){
@Override public void execute(){
oldTable.getListUsedColumns().clear();
oldTable.getListUnusedColumns().clear();
oldTable.setListColumns(newTable.getListColumns(true));
List<IMetadataColumn> columns=newTable.getListColumns(true);
if (node instanceof IGraphicalNode) {
IGraphicalNode gNode=(IGraphicalNode)node;
gNode.checkAndRefreshNode();
}
if (isSAPNode(node) && hasParentRowForExe) {
oldTable.getAdditionalProperties().put(ISINPUT,TRUE);
}
if (getTableViewer() != null) {
getTableViewer().refresh();
}
}
}
);
}
 else {
if (isSAPNode(node) && hasParentRowForExe) {
oldTable.getAdditionalProperties().put(ISINPUT,TRUE);
}
}
}
 else {
if (isSAPNode(node) && hasParentRowForExe) {
oldTable.getAdditionalProperties().put(ISINPUT,TRUE);
}
}
}
return schemaToEdit;
}
 else {
return ""String_Node_Str"";
}
}","@Override protected Object openDialogBox(Control cellEditorWindow){
  String schemaToEdit=(String)this.getValue();
  String oldValue=schemaToEdit;
  boolean metaReadonly=false;
  final List<IMetadataTable> metadatas=node.getMetadataList();
  IMetadataTable tableToEdit=null;
  if (schemaToEdit == null || ""String_Node_Str"".equals(schemaToEdit)) {
    SAPConnectionItem sapItem=getSAPRepositoryItem();
    if (sapItem != null) {
      boolean readonly=node.getProcess().isReadOnly();
      if (node.getJobletNode() != null) {
        readonly=node.isReadOnly();
      }
      SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,sapItem,EProcessType.CREATE,schemaToEdit,readonly);
      if (choiceDialog.open() == Window.OK) {
        if (choiceDialog.getSelctionType() == ESelectionCategory.REPOSITORY) {
          org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
          if (selectedMetadataTable != null) {
            final IMetadataTable metaTable=ConvertionHelper.convert(selectedMetadataTable);
            int index=0;
            if (getTableViewer() != null) {
              index=getTableViewer().getTable().getSelectionIndex();
            }
            SAPFunctionUnit functionUnit=null;
            if (selectedMetadataTable.eContainer() instanceof SAPFunctionUnit) {
              functionUnit=(SAPFunctionUnit)selectedMetadataTable.eContainer();
            }
            if (""String_Node_Str"".equals(node.getComponent().getName())) {
              node.getMetadataFromConnector(schemaToEdit);
              executeCommand(new RepositoryChangeMetadataForSAPBapi(node,functionUnit,metaTable,null,index));
            }
 else {
              executeCommand(new RepositoryChangeMetadataForSAPCommand(node,ISAPConstant.TABLE_SCHEMAS,metaTable.getLabel(),metaTable,index));
            }
            if (getTableViewer() != null) {
              getTableViewer().refresh(true);
            }
            return selectedMetadataTable.getLabel();
          }
          return null;
        }
 else {
        }
      }
 else {
        this.setValue(oldValue);
        return oldValue;
      }
    }
    EbcdicConnectionItem repositoryItem=getRepositoryItem();
    if (repositoryItem != null) {
      SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,repositoryItem,EProcessType.CREATE,schemaToEdit,node.getProcess().isReadOnly());
      if (choiceDialog.open() == Window.OK) {
        if (choiceDialog.getSelctionType() == ESelectionCategory.REPOSITORY) {
          org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
          if (selectedMetadataTable != null) {
            final IMetadataTable metaTable=ConvertionHelper.convert(selectedMetadataTable);
            int index=0;
            if (getTableViewer() != null) {
              index=getTableViewer().getTable().getSelectionIndex();
            }
            SAPFunctionUnit functionUnit=null;
            if (selectedMetadataTable.eContainer() instanceof SAPFunctionUnit) {
              functionUnit=(SAPFunctionUnit)selectedMetadataTable.eContainer();
            }
            if (""String_Node_Str"".equals(node.getComponent().getName())) {
              executeCommand(new RepositoryChangeMetadataForSAPBapi(node,functionUnit,tableToEdit,metaTable));
            }
 else {
              executeCommand(new RepositoryChangeMetadataForEBCDICCommand(node,IEbcdicConstant.TABLE_SCHEMAS,metaTable.getLabel(),metaTable,index));
            }
            if (getTableViewer() != null) {
              getTableViewer().refresh(true);
            }
            return selectedMetadataTable.getLabel();
          }
          return null;
        }
 else {
        }
      }
 else {
        return null;
      }
    }
    InputDialog dialogInput=new InputDialog(cellEditorWindow.getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),""String_Node_Str"",new IInputValidator(){
      @Override public String isValid(      String newText){
        if (""String_Node_Str"".equals(newText.trim())) {
          return Messages.getString(""String_Node_Str"");
        }
        if (MetadataToolHelper.getMetadataTableFromNodeTableName(node,newText) != null || !node.getProcess().checkValidConnectionName(newText)) {
          return Messages.getString(""String_Node_Str"");
        }
        return null;
      }
    }
);
    if (dialogInput.open() == InputDialog.OK) {
      Object newPropValue=dialogInput.getValue();
      if (!isRulesComponent(node)) {
        node.getProcess().addUniqueConnectionName(dialogInput.getValue());
        final MetadataTable table=new MetadataTable();
        table.setLabel(dialogInput.getValue());
        table.setTableName(dialogInput.getValue());
        tableToEdit=table;
        metadatas.add(table);
        executeCommand(new Command(){
          @Override public void execute(){
            if (getTableViewer() != null) {
              Table tTable=getTableViewer().getTable();
              Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
              if (data instanceof Map) {
                final Map<String,Object> valueMap=(Map<String,Object>)data;
                Object code=valueMap.get(IEbcdicConstant.FIELD_CODE);
                if (code == null || ""String_Node_Str"".equals(code)) {
                  valueMap.put(IEbcdicConstant.FIELD_CODE,table.getTableName());
                  valueMap.put(IEbcdicConstant.FIELD_SCHEMA,table.getTableName());
                }
              }
              getTableViewer().refresh();
            }
          }
        }
);
      }
 else {
        INode inputNode=null, outputNode=null;
        IMetadataTable originalInputTable=null, originalCurrentOutTable=null, finalOutTable=null, finalInputTable=null;
        MetadataDialog metaDialog=null;
        int index=getTableViewer().getTable().getSelectionIndex();
        if (node.getIncomingConnections().size() > 0) {
          if (node.getOutgoingConnections().size() > 0) {
            outputNode=node.getOutgoingConnections().get(0).getTarget();
          }
          originalInputTable=node.getIncomingConnections().get(0).getMetadataTable();
          inputNode=node.getIncomingConnections().get(0).getSource();
          if (outputNode == null) {
            outputNode=node;
          }
          List<IMetadataColumn> listColumns=new ArrayList<IMetadataColumn>();
          originalCurrentOutTable=new MetadataTable();
          originalCurrentOutTable.setListColumns(listColumns);
          metaDialog=new MetadataDialog(new Shell(),originalInputTable,inputNode,originalCurrentOutTable,outputNode,tableEditorView.getTableViewerCreator().getCommandStack());
          if (metaDialog.open() == Window.OK) {
            finalInputTable=metaDialog.getInputMetaData().clone();
            finalOutTable=metaDialog.getOutputMetaData().clone();
            ChangeRuleMetadataCommand changeRuleMetadataCommand=new ChangeRuleMetadataCommand(node,""String_Node_Str"",newPropValue,finalOutTable,index);
            executeCommand(changeRuleMetadataCommand);
            if (getTableViewer() != null) {
              getTableViewer().refresh();
            }
          }
        }
 else {
          node.getProcess().addUniqueConnectionName(dialogInput.getValue());
          final MetadataTable table=new MetadataTable();
          table.setLabel(dialogInput.getValue());
          table.setTableName(dialogInput.getValue());
          tableToEdit=table;
          metadatas.add(table);
          executeCommand(new Command(){
            @Override public void execute(){
              if (getTableViewer() != null) {
                Table tTable=getTableViewer().getTable();
                Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
                if (data instanceof Map) {
                  final Map<String,Object> valueMap=(Map<String,Object>)data;
                  Object code=valueMap.get(IEbcdicConstant.FIELD_CODE);
                  if (code == null || ""String_Node_Str"".equals(code)) {
                    valueMap.put(IEbcdicConstant.FIELD_CODE,table.getTableName());
                    valueMap.put(IEbcdicConstant.FIELD_SCHEMA,table.getTableName());
                  }
                }
                getTableViewer().refresh();
              }
            }
          }
);
        }
      }
    }
  }
 else {
    if (isSAPNode(node) && getTableViewer() != null) {
      Table tTable=getTableViewer().getTable();
      Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
      if (data instanceof Map) {
        final Map<String,Object> valueMap=(Map<String,Object>)data;
        Object code=valueMap.get(IEbcdicConstant.FIELD_SCHEMA);
        tableToEdit=MetadataToolHelper.getMetadataTableFromNodeTableName(node,code.toString());
      }
    }
 else {
      tableToEdit=MetadataToolHelper.getMetadataTableFromNodeTableName(node,schemaToEdit);
    }
    if (getTableViewer() != null && tableToEdit != null && isEBCDICNode(node)) {
      Table tTable=getTableViewer().getTable();
      Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
      if (data instanceof Map) {
        final Map<String,Object> valueMap=(Map<String,Object>)data;
        final String key=IEbcdicConstant.FIELD_SCHEMA + IEbcdicConstant.REF_TYPE;
        Object repositoyType=valueMap.get(key);
        EbcdicConnectionItem repositoryItem=getRepositoryItem();
        EProcessType processType=EProcessType.BUILTIN;
        if (repositoryItem != null) {
          if (repositoyType != null && IEbcdicConstant.REF_ATTR_REPOSITORY.equals(repositoyType)) {
            processType=EProcessType.REPOSITORY;
          }
        }
        SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,repositoryItem,processType,schemaToEdit,node.getProcess().isReadOnly());
        if (choiceDialog.open() == Window.OK) {
          ESelectionCategory selctionType=choiceDialog.getSelctionType();
switch (selctionType) {
case SHOW_SCHEMA:
            if (processType == EProcessType.REPOSITORY) {
              metaReadonly=true;
            }
          break;
case REPOSITORY:
        final org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
      if (selectedMetadataTable != null) {
        String newSchema=selectedMetadataTable.getLabel();
        if (!schemaToEdit.equals(newSchema) || processType == EProcessType.BUILTIN) {
          RepositoryChangeMetadataForEBCDICCommand cmd=new RepositoryChangeMetadataForEBCDICCommand(node,IEbcdicConstant.TABLE_SCHEMAS,newSchema,schemaToEdit,ConvertionHelper.convert(selectedMetadataTable),tableToEdit,tTable.getSelectionIndex());
          executeCommand(cmd);
          if (getTableViewer() != null) {
            getTableViewer().refresh();
          }
        }
        return newSchema;
      }
 else {
      }
case BUILDIN:
    executeCommand(new Command(){
      @Override public void execute(){
        valueMap.remove(key);
        if (getTableViewer() != null) {
          getTableViewer().refresh();
        }
      }
    }
);
  return schemaToEdit;
default :
}
}
 else {
return null;
}
}
}
if (getTableViewer() != null && tableToEdit != null && isSAPNode(node)) {
Table tTable=getTableViewer().getTable();
Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
if (data instanceof Map) {
final Map<String,Object> valueMap=(Map<String,Object>)data;
final String key=ISAPConstant.FIELD_SCHEMA + ISAPConstant.REF_TYPE;
Object repositoyType=valueMap.get(key);
SAPConnectionItem repositoryItem=getSAPRepositoryItem();
EProcessType processType=EProcessType.BUILTIN;
if (repositoryItem != null) {
if (repositoyType != null && ISAPConstant.REF_ATTR_REPOSITORY.equals(repositoyType)) {
processType=EProcessType.REPOSITORY;
}
}
Object type=valueMap.get(ISAPConstant.TYPE);
if (type != null && type.toString().equals(TABLE)) {
SchemaOperationChoiceDialog choiceDialog=new SchemaOperationChoiceDialog(cellEditorWindow.getShell(),node,repositoryItem,processType,schemaToEdit,node.getProcess().isReadOnly());
if (choiceDialog.open() == Window.OK) {
ESelectionCategory selctionType=choiceDialog.getSelctionType();
switch (selctionType) {
case SHOW_SCHEMA:
  if (processType == EProcessType.REPOSITORY) {
    metaReadonly=true;
  }
break;
case REPOSITORY:
final org.talend.core.model.metadata.builder.connection.MetadataTable selectedMetadataTable=choiceDialog.getSelectedMetadataTable();
if (selectedMetadataTable != null) {
String newSchema=selectedMetadataTable.getLabel();
if (!schemaToEdit.equals(newSchema) || processType == EProcessType.BUILTIN) {
RepositoryChangeMetadataForSAPCommand cmd=new RepositoryChangeMetadataForSAPCommand(node,ISAPConstant.TABLE_SCHEMAS,newSchema,schemaToEdit,ConvertionHelper.convert(selectedMetadataTable),tableToEdit,tTable.getSelectionIndex());
executeCommand(cmd);
if (getTableViewer() != null) {
  getTableViewer().refresh();
}
}
return newSchema;
}
 else {
}
case BUILDIN:
executeCommand(new Command(){
@Override public void execute(){
valueMap.remove(key);
if (getTableViewer() != null) {
getTableViewer().refresh();
}
}
}
);
return schemaToEdit;
default :
}
}
 else {
return null;
}
}
 else {
if (processType == EProcessType.REPOSITORY) {
metaReadonly=true;
}
}
}
}
}
Table tTable=getTableViewer().getTable();
boolean hasParentRow=false;
Object data=tTable.getItem(tTable.getSelectionIndex()).getData();
Object type=null;
Object parent_row=null;
if (data instanceof Map) {
final Map<String,Object> valueMap=(Map<String,Object>)data;
if (valueMap.containsKey(PARENT_ROW)) {
hasParentRow=true;
}
final String key=ISAPConstant.TYPE;
type=valueMap.get(key);
parent_row=valueMap.get(PARENT_ROW);
if (isSAPNode(node) && type instanceof Integer) {
type=SINGLE;
valueMap.remove(key);
valueMap.put(key,SINGLE);
}
}
final boolean hasParentRowForExe=hasParentRow;
if (tableToEdit != null) {
if (isHL7OutputNode(node) && node.getIncomingConnections().size() > 0) {
copyHL7OutputMetadata(node,tableToEdit);
}
 else if (isSAPNode(node) && type != null && type.toString().equals(TABLE) && node.getIncomingConnections().size() > 0 && hasParentRow && (parent_row != null && !parent_row.equals(""String_Node_Str"") && !(parent_row instanceof Integer))) {
copySAPOutputMetadata(node,tableToEdit);
}
 else {
MetadataDialog dialog=new MetadataDialog(cellEditorWindow.getShell(),tableToEdit.clone(),node,null);
dialog.setInputReadOnly(metaReadonly);
dialog.setOutputReadOnly(metaReadonly);
if (isSAPNode(node) && type != null && (type.equals(SINGLE) || type.equals(STRUCTURE)) && hasParentRow) {
MetadataDialog.setSingleAndStruct(true);
}
final IMetadataTable oldTable=tableToEdit;
if (dialog.open() == MetadataDialog.OK) {
final IMetadataTable newTable=dialog.getOutputMetaData();
if (!oldTable.sameMetadataAs(newTable,IMetadataColumn.OPTIONS_NONE)) {
executeCommand(new Command(){
@Override public void execute(){
oldTable.getListUsedColumns().clear();
oldTable.getListUnusedColumns().clear();
oldTable.setListColumns(newTable.getListColumns(true));
List<IMetadataColumn> columns=newTable.getListColumns(true);
if (node instanceof IGraphicalNode) {
IGraphicalNode gNode=(IGraphicalNode)node;
gNode.checkAndRefreshNode();
}
if (isSAPNode(node) && hasParentRowForExe) {
oldTable.getAdditionalProperties().put(ISINPUT,TRUE);
}
if (getTableViewer() != null) {
getTableViewer().refresh();
}
}
}
);
}
 else {
if (isSAPNode(node) && hasParentRowForExe) {
oldTable.getAdditionalProperties().put(ISINPUT,TRUE);
}
}
}
 else {
if (isSAPNode(node) && hasParentRowForExe) {
oldTable.getAdditionalProperties().put(ISINPUT,TRUE);
}
}
}
return schemaToEdit;
}
 else {
return ""String_Node_Str"";
}
}",0.9986194779116466
125443,"/** 
 * Sets the isSingle.
 * @param isSingle the isSingle to set
 */
public void setSingleAndStruct(boolean isSingle){
  this.isSingleAndStruct=isSingle;
}","public static void setSingleAndStruct(boolean isSingle){
  isSingleAndStruct=isSingle;
}",0.6639344262295082
125444,"public void setProperty(String key,String value,String comment){
  this.commentMap.put(key,comment);
  keys.add(key);
  this.setProperty(key,value);
}","@Override public synchronized Object setProperty(String key,String value){
  this.commentMap.put(key,""String_Node_Str"");
  keys.add(key);
  return super.setProperty(key,value);
}",0.7804878048780488
125445,"@SuppressWarnings(""String_Node_Str"") public String toSerialized() throws JSONException {
  JSONObject functionObj=new JSONObject();
  functionObj.put(NAME,getName());
  JSONArray parametersArr=new JSONArray();
  List<Parameter> params=getParameters();
  for (  Parameter param : params) {
    JSONObject parameterObj=new JSONObject();
    parameterObj.put(PARAMETER_NAME,param.getName());
    parameterObj.put(PARAMETER_VALUE,param.getValue());
    parametersArr.put(parameterObj);
  }
  functionObj.put(PARAMETERS,parametersArr);
  return functionObj.toString();
}","@SuppressWarnings(""String_Node_Str"") public String toSerialized() throws JSONException {
  JSONObject functionObj=new JSONObject();
  functionObj.put(PARAMETER_CLASS_NAME,getClassName() == null ? ""String_Node_Str"" : getClassName());
  functionObj.put(NAME,getName());
  JSONArray parametersArr=new JSONArray();
  List<Parameter> params=getParameters();
  for (  Parameter param : params) {
    JSONObject parameterObj=new JSONObject();
    parameterObj.put(PARAMETER_NAME,param.getName());
    parameterObj.put(PARAMETER_VALUE,param.getValue());
    parametersArr.put(parameterObj);
  }
  functionObj.put(PARAMETERS,parametersArr);
  return functionObj.toString();
}",0.9179528838342812
125446,"private void deleteAllRoutinesAndBeans(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
    IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
    ITalendProcessJavaProject project=runProcessService.getTalendProcessJavaProject();
    IFolder src=project.getSrcFolder();
    try {
      IResource[] childrenResources=src.members();
      for (      IResource child : childrenResources) {
        Object folderName=child.getName();
        if (""String_Node_Str"".equals(folderName) || ""String_Node_Str"".equals(folderName) || ""String_Node_Str"".equals(folderName)) {
          child.delete(true,null);
        }
      }
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
}","private void deleteAllRoutinesAndBeans(){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
    IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
    ITalendProcessJavaProject project=runProcessService.getTalendProcessJavaProject();
    if (project != null) {
      IFolder src=project.getSrcFolder();
      try {
        IResource[] childrenResources=src.members();
        for (        IResource child : childrenResources) {
          Object folderName=child.getName();
          if (""String_Node_Str"".equals(folderName) || ""String_Node_Str"".equals(folderName) || ""String_Node_Str"".equals(folderName)) {
            child.delete(true,null);
          }
        }
      }
 catch (      CoreException e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.9583088667058132
125447,"private IImportItemsHandler findValidImportHandler(ImportItem importItem,boolean enableProductChecking,boolean checkBuiltIn){
  for (  IImportItemsHandler handler : getImportHandlers()) {
    handler.setEnableProductChecking(enableProductChecking);
    boolean isValid=handler.valid(importItem);
    if (!isValid && !checkBuiltIn) {
      isValid=handler.isValidSystemItem(importItem);
      if (isValid) {
        importItem.setSystemItem(true);
      }
    }
    if (isValid) {
      importItem.setImportHandler(handler);
      return handler;
    }
  }
  return null;
}","private IImportItemsHandler findValidImportHandler(ResourcesManager resManager,IPath path,ImportItem importItem,boolean enableProductChecking,boolean checkBuiltIn){
  for (  IImportItemsHandler handler : getImportHandlers()) {
    handler.setEnableProductChecking(enableProductChecking);
    boolean isValid=handler.valid(importItem) && handler.valid(resManager,path);
    if (!isValid && !checkBuiltIn) {
      isValid=handler.isValidSystemItem(importItem);
      if (isValid) {
        importItem.setSystemItem(true);
      }
    }
    if (isValid) {
      importItem.setImportHandler(handler);
      return handler;
    }
  }
  return null;
}",0.9104354971240756
125448,"public List<ImportItem> populateImportingItems(ResourcesManager resManager,boolean overwrite,IProgressMonitor progressMonitor,boolean enableProductChecking,boolean needCheck) throws Exception {
  IProgressMonitor monitor=progressMonitor;
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  try {
    prePopulate(monitor,resManager);
    ImportCacheHelper.getInstance().beforePopulateItems();
    if (resManager == null) {
      return Collections.emptyList();
    }
    Set<IPath> resPaths=resManager.getPaths();
    monitor.beginTask(Messages.getString(""String_Node_Str""),resPaths.size());
    List<ImportItem> items=new ArrayList<ImportItem>();
    List<IPath> resourcesPathsList=new ArrayList<IPath>(resPaths);
    Collections.sort(resourcesPathsList,new Comparator<IPath>(){
      @Override public int compare(      IPath o1,      IPath o2){
        return o1.toPortableString().compareTo(o2.toPortableString());
      }
    }
);
    List<IPath> doneList=new ArrayList<IPath>();
    ImportHandlerHelper importHandlerHelper=createImportHandlerHelper();
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      if (!importHandlerHelper.validResourcePath(path)) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,enableProductChecking);
        if (importHandler != null) {
          ImportItem importItem=null;
          if (needCheck) {
            importItem=importHandler.createImportItem(progressMonitor,resManager,path,overwrite,items);
          }
 else {
            importItem=importHandler.generateImportItem(progressMonitor,resManager,path,overwrite,items);
          }
          if (importItem != null && !items.contains(importItem)) {
            items.add(importItem);
            doneList.add(path);
          }
        }
        monitor.worked(1);
      }
    }
    resourcesPathsList.removeAll(doneList);
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      ImportItem importItem=importHandlerHelper.computeImportItem(monitor,resManager,path,overwrite);
      if (importItem != null) {
        IImportItemsHandler importHandler=findValidImportHandler(importItem,enableProductChecking,needCheck);
        if (importHandler != null) {
          if (importHandler instanceof ImportBasicHandler) {
            ImportBasicHandler importBasicHandler=(ImportBasicHandler)importHandler;
            if (needCheck) {
              if (importBasicHandler.checkItem(resManager,importItem,overwrite)) {
                importBasicHandler.checkAndSetProject(resManager,importItem);
                changeIdManager.add(importItem);
              }
            }
 else {
              importBasicHandler.resolveItem(resManager,importItem);
            }
          }
        }
 else {
          importItem=null;
        }
      }
      if (importItem != null && !items.contains(importItem)) {
        items.add(importItem);
      }
      monitor.worked(1);
    }
    List<IPath> emptyFolders=resManager.getEmptyFolders();
    if (!emptyFolders.isEmpty()) {
      DynaEnum<? extends DynaEnum<?>>[] values=ERepositoryObjectType.values();
      ERepositoryObjectType folderType=null;
      for (      IPath folder : emptyFolders) {
        if (folder.segmentCount() < 1) {
          continue;
        }
        IPath folderPathToCheck=folder.removeFirstSegments(1);
        String generatedPath=ERepositoryObjectType.DOCUMENTATION.getFolder() + ""String_Node_Str"" + RepositoryConstants.DOCUMENTATION_GENERATED_PATH;
        if (folderPathToCheck.removeTrailingSeparator().toPortableString().startsWith(generatedPath)) {
          continue;
        }
        for (        DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
          ERepositoryObjectType objectType=(ERepositoryObjectType)type;
          String[] products=objectType.getProducts();
          boolean isDI=false;
          for (          String product : products) {
            if (ERepositoryObjectType.PROD_DI.equals(product)) {
              isDI=true;
              break;
            }
          }
          if (isDI && objectType.isResouce()) {
            if (folderPathToCheck.toPortableString().startsWith(objectType.getFolder() + ""String_Node_Str"")) {
              folderType=objectType;
              ERepositoryObjectType fromChildrenType=getTypeFromChildren(objectType.getChildrenTypesArray(),folderPathToCheck.toPortableString());
              if (fromChildrenType != null) {
                folderType=fromChildrenType;
              }
              if (folderType == ERepositoryObjectType.SQLPATTERNS && folderPathToCheck.removeTrailingSeparator().toPortableString().endsWith(RepositoryConstants.USER_DEFINED) || folderType == ERepositoryObjectType.TEST_CONTAINER) {
                folderType=null;
              }
              if (folderPathToCheck.removeTrailingSeparator().toPortableString().equals(objectType.getFolder())) {
                folderType=null;
              }
              break;
            }
          }
        }
        if (folderType != null) {
          IPath typePath=new Path(folderType.getFolder());
          IPath folderPath=folder.removeFirstSegments(1 + typePath.segmentCount()).removeLastSegments(1).removeTrailingSeparator();
          String folderLabel=folder.lastSegment();
          EmptyFolderImportItem folderItem=new EmptyFolderImportItem(folderPath);
          folderItem.setRepositoryType(folderType);
          folderItem.setLabel(folderLabel);
          Project project=PropertiesFactory.eINSTANCE.createProject();
          project.setTechnicalLabel(folder.segment(0));
          project.setLabel(folder.segment(0));
          folderItem.setItemProject(project);
          Property property=PropertiesFactory.eINSTANCE.createProperty();
          property.setId(ProxyRepositoryFactory.getInstance().getNextId());
          FolderItem createFolderItem=PropertiesFactory.eINSTANCE.createFolderItem();
          ItemState createStatus=PropertiesFactory.eINSTANCE.createItemState();
          property.setItem(createFolderItem);
          createStatus.setPath(folderPath.toPortableString());
          createFolderItem.setState(createStatus);
          items.add(folderItem);
          folderItem.setProperty(property);
          folderType=null;
        }
      }
    }
    postPopulate(monitor,resManager,items.toArray(new ImportItem[0]));
    return items;
  }
  finally {
    ImportCacheHelper.getInstance().afterPopulateItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public List<ImportItem> populateImportingItems(ResourcesManager resManager,boolean overwrite,IProgressMonitor progressMonitor,boolean enableProductChecking,boolean needCheck) throws Exception {
  IProgressMonitor monitor=progressMonitor;
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  try {
    prePopulate(monitor,resManager);
    ImportCacheHelper.getInstance().beforePopulateItems();
    if (resManager == null) {
      return Collections.emptyList();
    }
    Set<IPath> resPaths=resManager.getPaths();
    monitor.beginTask(Messages.getString(""String_Node_Str""),resPaths.size());
    List<ImportItem> items=new ArrayList<ImportItem>();
    List<IPath> resourcesPathsList=new ArrayList<IPath>(resPaths);
    Collections.sort(resourcesPathsList,new Comparator<IPath>(){
      @Override public int compare(      IPath o1,      IPath o2){
        return o1.toPortableString().compareTo(o2.toPortableString());
      }
    }
);
    List<IPath> doneList=new ArrayList<IPath>();
    ImportHandlerHelper importHandlerHelper=createImportHandlerHelper();
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      if (!importHandlerHelper.validResourcePath(path)) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,enableProductChecking);
        if (importHandler != null) {
          ImportItem importItem=null;
          if (needCheck) {
            importItem=importHandler.createImportItem(progressMonitor,resManager,path,overwrite,items);
          }
 else {
            importItem=importHandler.generateImportItem(progressMonitor,resManager,path,overwrite,items);
          }
          if (importItem != null && !items.contains(importItem)) {
            items.add(importItem);
            doneList.add(path);
          }
        }
        monitor.worked(1);
      }
    }
    resourcesPathsList.removeAll(doneList);
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      ImportItem importItem=importHandlerHelper.computeImportItem(monitor,resManager,path,overwrite);
      if (importItem != null) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,importItem,enableProductChecking,needCheck);
        if (importHandler != null) {
          if (importHandler instanceof ImportBasicHandler) {
            ImportBasicHandler importBasicHandler=(ImportBasicHandler)importHandler;
            if (needCheck) {
              if (importBasicHandler.checkItem(resManager,importItem,overwrite)) {
                importBasicHandler.checkAndSetProject(resManager,importItem);
                changeIdManager.add(importItem);
              }
            }
 else {
              importBasicHandler.resolveItem(resManager,importItem);
            }
          }
        }
 else {
          importItem=null;
        }
      }
      if (importItem != null && !items.contains(importItem)) {
        items.add(importItem);
      }
      monitor.worked(1);
    }
    List<IPath> emptyFolders=resManager.getEmptyFolders();
    if (!emptyFolders.isEmpty()) {
      DynaEnum<? extends DynaEnum<?>>[] values=ERepositoryObjectType.values();
      ERepositoryObjectType folderType=null;
      for (      IPath folder : emptyFolders) {
        if (folder.segmentCount() < 1) {
          continue;
        }
        IPath folderPathToCheck=folder.removeFirstSegments(1);
        String generatedPath=ERepositoryObjectType.DOCUMENTATION.getFolder() + ""String_Node_Str"" + RepositoryConstants.DOCUMENTATION_GENERATED_PATH;
        if (folderPathToCheck.removeTrailingSeparator().toPortableString().startsWith(generatedPath)) {
          continue;
        }
        for (        DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
          ERepositoryObjectType objectType=(ERepositoryObjectType)type;
          String[] products=objectType.getProducts();
          boolean isDI=false;
          for (          String product : products) {
            if (ERepositoryObjectType.PROD_DI.equals(product)) {
              isDI=true;
              break;
            }
          }
          if (isDI && objectType.isResouce()) {
            if (folderPathToCheck.toPortableString().startsWith(objectType.getFolder() + ""String_Node_Str"")) {
              folderType=objectType;
              ERepositoryObjectType fromChildrenType=getTypeFromChildren(objectType.getChildrenTypesArray(),folderPathToCheck.toPortableString());
              if (fromChildrenType != null) {
                folderType=fromChildrenType;
              }
              if (folderType == ERepositoryObjectType.SQLPATTERNS && folderPathToCheck.removeTrailingSeparator().toPortableString().endsWith(RepositoryConstants.USER_DEFINED) || folderType == ERepositoryObjectType.TEST_CONTAINER) {
                folderType=null;
              }
              if (folderPathToCheck.removeTrailingSeparator().toPortableString().equals(objectType.getFolder())) {
                folderType=null;
              }
              break;
            }
          }
        }
        if (folderType != null) {
          IPath typePath=new Path(folderType.getFolder());
          IPath folderPath=folder.removeFirstSegments(1 + typePath.segmentCount()).removeLastSegments(1).removeTrailingSeparator();
          String folderLabel=folder.lastSegment();
          EmptyFolderImportItem folderItem=new EmptyFolderImportItem(folderPath);
          folderItem.setRepositoryType(folderType);
          folderItem.setLabel(folderLabel);
          Project project=PropertiesFactory.eINSTANCE.createProject();
          project.setTechnicalLabel(folder.segment(0));
          project.setLabel(folder.segment(0));
          folderItem.setItemProject(project);
          Property property=PropertiesFactory.eINSTANCE.createProperty();
          property.setId(ProxyRepositoryFactory.getInstance().getNextId());
          FolderItem createFolderItem=PropertiesFactory.eINSTANCE.createFolderItem();
          ItemState createStatus=PropertiesFactory.eINSTANCE.createItemState();
          property.setItem(createFolderItem);
          createStatus.setPath(folderPath.toPortableString());
          createFolderItem.setState(createStatus);
          items.add(folderItem);
          folderItem.setProperty(property);
          folderType=null;
        }
      }
    }
    postPopulate(monitor,resManager,items.toArray(new ImportItem[0]));
    return items;
  }
  finally {
    ImportCacheHelper.getInstance().afterPopulateItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9988497483824588
125449,"/** 
 * When MapDB is used some different indicator maybe used same data file.then indicator need to implements it then we can know what data is for it
 * @param inputData
 * @return
 */
boolean isValid(Object inputData);","/** 
 * When MapDB is used some different indicator maybe used same data file.then the indicator need to implements it let me know what data is for it
 * @param inputData
 * @return
 */
boolean isValid(Object inputData);",0.9523809523809524
125450,"@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  String sql;
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=rs.getString(""String_Node_Str"").trim();
      String typeName=rs.getString(""String_Node_Str"");
      String columnSize=rs.getString(""String_Node_Str"");
      String decimalDigits=rs.getString(""String_Node_Str"");
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      if (decimalDigits == null) {
        decimalDigits=""String_Node_Str"";
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  if (databaseName != null && !databaseName.trim().isEmpty()) {
    database=databaseName;
  }
  String sql=null;
  int dbMajorVersion=connection.getMetaData().getDatabaseMajorVersion();
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
    if (dbMajorVersion > 12) {
      sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
    if (dbMajorVersion > 12) {
      sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=null;
      String typeName=null;
      String columnSize=null;
      String decimalDigits=null;
      if (dbMajorVersion > 12) {
        columnName=rs.getString(""String_Node_Str"").trim();
        typeName=rs.getString(""String_Node_Str"");
        columnSize=rs.getString(""String_Node_Str"");
        decimalDigits=rs.getString(""String_Node_Str"");
      }
 else {
        columnName=rs.getString(""String_Node_Str"").trim();
        typeName=rs.getString(""String_Node_Str"");
        columnSize=rs.getString(""String_Node_Str"");
        decimalDigits=rs.getString(""String_Node_Str"");
      }
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      if (typeName == null) {
        typeName=""String_Node_Str"";
      }
      if (columnSize == null) {
        columnSize=""String_Node_Str"";
      }
      if (decimalDigits == null) {
        decimalDigits=""String_Node_Str"";
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.749885478699038
125451,"@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null && !databaseName.trim().isEmpty()) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ addTypesToSql(types);
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str"";
  }
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"" + tableNamePattern+ ""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    sql=sql + ""String_Node_Str"";
  }
 else {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null && !databaseName.trim().isEmpty()) {
    database=databaseName;
  }
  String sql=null;
  int dbMajorVersion=connection.getMetaData().getDatabaseMajorVersion();
  String sysTable=""String_Node_Str"";
  if (dbMajorVersion > 12) {
    sysTable=""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    sql=""String_Node_Str"" + sysTable + ""String_Node_Str""+ database+ ""String_Node_Str""+ addTypesToSql(types);
  }
 else {
    sql=""String_Node_Str"" + sysTable + ""String_Node_Str""+ database+ ""String_Node_Str"";
  }
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"" + tableNamePattern+ ""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    sql=sql + ""String_Node_Str"";
  }
 else {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.9218058424313956
125452,"@Override public ResultSet getPrimaryKeys(String catalog,String schema,String table) throws SQLException {
  String sql=""String_Node_Str"" + schema + ""String_Node_Str""+ table+ ""String_Node_Str"";
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String columnName=rs.getString(""String_Node_Str"").trim();
      String pk=rs.getString(""String_Node_Str"");
      String[] r=new String[]{columnName,pk};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(PK_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getPrimaryKeys(String catalog,String schema,String table) throws SQLException {
  int dbMajorVersion=connection.getMetaData().getDatabaseMajorVersion();
  String sql=""String_Node_Str"" + schema + ""String_Node_Str""+ table+ ""String_Node_Str"";
  ResultSet rs=null;
  Statement stmt=null;
  String columnName=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    if (dbMajorVersion > 12) {
      sql=""String_Node_Str"" + schema + ""String_Node_Str""+ table+ ""String_Node_Str"";
      rs=getResultSet(catalog,schema,table,sql);
      while (rs.next()) {
        columnName=rs.getString(""String_Node_Str"").trim();
        String indexType=rs.getString(""String_Node_Str"");
        String[] r=new String[]{columnName,indexType};
        list.add(r);
      }
    }
 else {
      stmt=connection.createStatement();
      rs=stmt.executeQuery(sql);
      while (rs.next()) {
        columnName=rs.getString(""String_Node_Str"").trim();
        String pk=rs.getString(""String_Node_Str"");
        String[] r=new String[]{columnName,pk};
        list.add(r);
      }
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(PK_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.7070967741935484
125453,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
String key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Znode_Parent:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
case MaprdbKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
case MaprdbKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.LONG);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case TableNSMapping:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_TABLE_NS_MAPPING);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case MasterPrincipal:
String key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Znode_Parent:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
case MaprdbKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
case MaprdbKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.LONG);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}",0.9900249376558604
125454,"static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String znode_Parent=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getOriginalValue(contextType,znode_Parent));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.MAPRDB.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String maprdbMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,maprdbMasterPrin));
    String maprdbRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,maprdbRegionPrin));
    String znode_Parent=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getOriginalValue(contextType,znode_Parent));
    String maprdbKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,maprdbKeyTabPrin));
    String maprdbKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,maprdbKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String impalaPrin=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,impalaPrin));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}","static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String znode_Parent=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getOriginalValue(contextType,znode_Parent));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.MAPRDB.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String maprdbMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,maprdbMasterPrin));
    String maprdbRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,maprdbRegionPrin));
    String znode_Parent=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getOriginalValue(contextType,znode_Parent));
    String maprdbKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,maprdbKeyTabPrin));
    String maprdbKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,maprdbKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
    String maprdbTableNSMapping=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_TABLE_NS_MAPPING);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_TABLE_NS_MAPPING,ContextParameterUtils.getOriginalValue(contextType,maprdbTableNSMapping));
  }
  if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String impalaPrin=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,impalaPrin));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}",0.9896612654611076
125455,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.MAPRDB.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String maprdbMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,maprdbMasterPrin));
    String maprdbRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,maprdbRegionPrin));
    String znodeParent=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,getOriginalValue(hadoopClusterContextType,contextType,znodeParent));
    String maprdbKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,maprdbKeyTabPrin));
    String maprdbKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,maprdbKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String impalaAuthPrinciple=cloneConn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
    if (impalaAuthPrinciple != null) {
      cloneConn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,impalaAuthPrinciple));
    }
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=null;
    if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
      newURL=DatabaseConnStrUtil.getImpalaString(cloneConn,cloneConn.getServerName(),cloneConn.getPort(),cloneConn.getSID(),DbConnStrForHive.URL_HIVE_2_TEMPLATE);
    }
 else {
      newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    }
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.MAPRDB.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String maprdbMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,maprdbMasterPrin));
    String maprdbRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,maprdbRegionPrin));
    String znodeParent=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,getOriginalValue(hadoopClusterContextType,contextType,znodeParent));
    String maprdbKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,maprdbKeyTabPrin));
    String maprdbKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,maprdbKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
    String tableNSMapping=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_TABLE_NS_MAPPING);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_TABLE_NS_MAPPING,getOriginalValue(hadoopClusterContextType,contextType,tableNSMapping));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String impalaAuthPrinciple=cloneConn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
    if (impalaAuthPrinciple != null) {
      cloneConn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,impalaAuthPrinciple));
    }
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=null;
    if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
      newURL=DatabaseConnStrUtil.getImpalaString(cloneConn,cloneConn.getServerName(),cloneConn.getPort(),cloneConn.getSID(),DbConnStrForHive.URL_HIVE_2_TEMPLATE);
    }
 else {
      newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    }
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9919720767888308
125456,"static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
String key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Znode_Parent:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
case MaprdbKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
case MaprdbKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}","static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case TableNSMapping:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_MAPRDB_TABLE_NS_MAPPING,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
String key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Znode_Parent:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
case MaprdbKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
case MaprdbKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}",0.9885159571093204
125457,"private void duplicateTestCases(Item newItem,final CopyObjectAction copyObjectAction){
  if (!copyObjectAction.isAllowedToCopyTestCase(newItem,sourceNode) || !isAllowDuplicateTest) {
    return;
  }
  final IPath path=copyObjectAction.getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      testContainerService.copyTestCase(newItem,sourceNode.getObject().getProperty().getItem(),path,null,true);
    }
  }
}","private void duplicateTestCases(Item newItem,final CopyObjectAction copyObjectAction){
  if (!copyObjectAction.isAllowedToCopyTestCase(newItem,sourceNode)) {
    return;
  }
  final IPath path=copyObjectAction.getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      testContainerService.copyTestCase(newItem,sourceNode.getObject().getProperty().getItem(),path,null,true);
    }
  }
}",0.9836280288146692
125458,"public static void convertTestcases(final Item newItem,final IRepositoryViewObject sourceObject,final String jobTypeValue){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceObject.getId());
      Item item=sourceObject.getProperty().getItem();
      if (!(item instanceof ProcessItem)) {
        return;
      }
      testContainerService.copyTestCase(newItem,(ProcessItem)item,getTestCasePath(newItem,jobTypeValue),null,true);
    }
  }
}","public static void convertTestcases(final Item newItem,final IRepositoryViewObject sourceObject,final String jobTypeValue){
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceObject.getId());
      Item item=sourceObject.getProperty().getItem();
      if (!(item instanceof ProcessItem)) {
        return;
      }
      testContainerService.copyTestCase(newItem,(ProcessItem)item,getTestCasePath(newItem,jobTypeValue),null,false);
    }
  }
}",0.9953734302709848
125459,"public String[] handleImportJarDialog(Shell shell,String moduleName){
  FileDialog fileDialog=new FileDialog(shell,SWT.OPEN | SWT.MULTI);
  fileDialog.setFilterExtensions(FilesUtils.getAcceptJARFilesSuffix());
  fileDialog.open();
  final String path=fileDialog.getFilterPath();
  final String[] fileNames=fileDialog.getFileNames();
  BusyIndicator.showWhile(Display.getDefault(),new Runnable(){
    @Override public void run(){
      for (int i=0; i < fileNames.length; i++) {
        String fileName=fileNames[i];
        File file=new File(path + File.separatorChar + fileName);
        File tempFile=null;
        try {
          if (fileNames.length == 1 && !file.isDirectory() && !file.getName().equals(moduleName)) {
            Project project=ProjectManager.getInstance().getCurrentProject();
            IProject fsProject=ResourceUtils.getProject(project);
            IFolder tmpFolder=fsProject.getFolder(""String_Node_Str"");
            if (!tmpFolder.exists()) {
              tmpFolder.create(true,true,null);
            }
            tempFile=new File(tmpFolder.getLocation().toPortableString(),moduleName);
            FilesUtils.copyFile(file,tempFile);
            file=tempFile;
            fileNames[i]=file.getName();
          }
          LibManagerUiPlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
          if (tempFile != null) {
            FilesUtils.deleteFile(tempFile,true);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          continue;
        }
      }
      cleanupLib(new HashSet<String>(Arrays.asList(fileNames)));
    }
  }
);
  return fileNames;
}","public String[] handleImportJarDialog(Shell shell,String moduleName){
  FileDialog fileDialog=new FileDialog(shell,SWT.OPEN | SWT.MULTI);
  fileDialog.setFilterExtensions(FilesUtils.getAcceptJARFilesSuffix());
  fileDialog.open();
  final String path=fileDialog.getFilterPath();
  final String[] fileNames=fileDialog.getFileNames();
  BusyIndicator.showWhile(Display.getDefault(),new Runnable(){
    @Override public void run(){
      for (int i=0; i < fileNames.length; i++) {
        String fileName=fileNames[i];
        File file=new File(path + File.separatorChar + fileName);
        File tempFile=null;
        try {
          if (moduleName != null && fileNames.length == 1 && !file.isDirectory() && !file.getName().equals(moduleName)) {
            Project project=ProjectManager.getInstance().getCurrentProject();
            IProject fsProject=ResourceUtils.getProject(project);
            IFolder tmpFolder=fsProject.getFolder(""String_Node_Str"");
            if (!tmpFolder.exists()) {
              tmpFolder.create(true,true,null);
            }
            tempFile=new File(tmpFolder.getLocation().toPortableString(),moduleName);
            FilesUtils.copyFile(file,tempFile);
            file=tempFile;
            fileNames[i]=file.getName();
          }
          LibManagerUiPlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
          if (tempFile != null) {
            FilesUtils.deleteFile(tempFile,true);
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
          continue;
        }
      }
      cleanupLib(new HashSet<String>(Arrays.asList(fileNames)));
    }
  }
);
  return fileNames;
}",0.9934131736526948
125460,"@Override public void run(){
  for (int i=0; i < fileNames.length; i++) {
    String fileName=fileNames[i];
    File file=new File(path + File.separatorChar + fileName);
    File tempFile=null;
    try {
      if (fileNames.length == 1 && !file.isDirectory() && !file.getName().equals(moduleName)) {
        Project project=ProjectManager.getInstance().getCurrentProject();
        IProject fsProject=ResourceUtils.getProject(project);
        IFolder tmpFolder=fsProject.getFolder(""String_Node_Str"");
        if (!tmpFolder.exists()) {
          tmpFolder.create(true,true,null);
        }
        tempFile=new File(tmpFolder.getLocation().toPortableString(),moduleName);
        FilesUtils.copyFile(file,tempFile);
        file=tempFile;
        fileNames[i]=file.getName();
      }
      LibManagerUiPlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
      if (tempFile != null) {
        FilesUtils.deleteFile(tempFile,true);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      continue;
    }
  }
  cleanupLib(new HashSet<String>(Arrays.asList(fileNames)));
}","@Override public void run(){
  for (int i=0; i < fileNames.length; i++) {
    String fileName=fileNames[i];
    File file=new File(path + File.separatorChar + fileName);
    File tempFile=null;
    try {
      if (moduleName != null && fileNames.length == 1 && !file.isDirectory() && !file.getName().equals(moduleName)) {
        Project project=ProjectManager.getInstance().getCurrentProject();
        IProject fsProject=ResourceUtils.getProject(project);
        IFolder tmpFolder=fsProject.getFolder(""String_Node_Str"");
        if (!tmpFolder.exists()) {
          tmpFolder.create(true,true,null);
        }
        tempFile=new File(tmpFolder.getLocation().toPortableString(),moduleName);
        FilesUtils.copyFile(file,tempFile);
        file=tempFile;
        fileNames[i]=file.getName();
      }
      LibManagerUiPlugin.getDefault().getLibrariesService().deployLibrary(file.toURL());
      if (tempFile != null) {
        FilesUtils.deleteFile(tempFile,true);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
      continue;
    }
  }
  cleanupLib(new HashSet<String>(Arrays.asList(fileNames)));
}",0.9902222222222222
125461,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
          getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setRawPassword(passwordText.getText());
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  additionalJDBCSettingsText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,additionalJDBCSettingsText.getText());
        urlConnectionStringText.setText(getStringConnection());
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      resetControls();
      urlConnectionStringText.setEditable(false);
      authenticationGrpForImpala.setVisible(false);
      authenticationGrpForImpala.getParent().layout();
      clearFiledsForDiffDbTypes();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        hideControl(authenticationGrpForHBase,true);
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        hideControl(authenticationCom,true);
        hideControl(znodeparentGrp,false);
        initHBaseSettings();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.MAPRDB)) {
        hideControl(authenticationCom,true);
        hideControl(znodeparentGrp,false);
        hideControl(tableInfoPartOfMapRDBComp,false);
        initMaprdbSettings();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        hideControl(authenticationCom,true);
        hideControl(authenticationComForHBase,true);
        initImpalaSettings();
        getConnection().setDbVersionString(""String_Node_Str"");
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(!isGeneralJDBC());
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
          fillDefaultsWhenHiveVersionChanged();
          fillDefaultsWhenHiveModeChanged(isHiveEmbeddedMode());
        }
 else {
          doHiveDBTypeNotSelected();
        }
        if (isHBaseDBConnSelected()) {
          fillDefaultsWhenHBaseVersionChanged();
        }
        if (isImpalaDBConnSelected()) {
          fillDefaultsWhenImpalaVersionChanged();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else       if (isImpalaDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.MAPRDB) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)&& !isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  addMaprdbSettingFieldsListeners();
  addImpalaSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  Listener listener=new Listener(){
    @Override public void handleEvent(    final Event e){
      if (isContextMode()) {
      }
 else {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
        setPropertiesFormEditable(dbTypeCombo.getSelectionIndex() > -1);
        urlConnectionStringText.setEditable(false);
      }
    }
  }
;
  usernameText.addListener(SWT.FocusIn,listener);
  passwordText.addListener(SWT.FocusIn,listener);
  serverText.addListener(SWT.FocusIn,listener);
  portText.addListener(SWT.FocusIn,listener);
  sidOrDatabaseText.addListener(SWT.FocusIn,listener);
  datasourceText.addListener(SWT.FocusIn,listener);
  schemaText.addListener(SWT.FocusIn,listener);
  additionParamText.addListener(SWT.FocusIn,listener);
  urlConnectionStringText.addListener(SWT.FocusIn,listener);
  mappingFileText.addListener(SWT.FocusIn,listener);
  serverText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setServerName(serverText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  portText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setPort(portText.getText());
          modifyFieldValue();
        }
        boolean b=true;
        String databaseType=getConnection().getDatabaseType();
        if (databaseType != null) {
          if (databaseType.equals(""String_Node_Str"")) {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
 else {
            b=Pattern.matches(Messages.getString(""String_Node_Str""),portText.getText());
          }
        }
        if (b) {
          b=portText.getText().length() <= 5;
        }
        evaluateTextField(b);
      }
    }
  }
);
  portText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (!Character.isLetterOrDigit(e.character) && !Character.isIdentifierIgnorable(e.character)) {
        e.doit=false;
      }
    }
  }
);
  usernameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUsername(usernameText.getText());
          getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,usernameText.getText());
        }
      }
    }
  }
);
  passwordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setRawPassword(passwordText.getText());
        }
      }
    }
  }
);
  sidOrDatabaseText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setSID(sidOrDatabaseText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  datasourceText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setDatasourceName(datasourceText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setUiSchema(schemaText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  schemaText.addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
    }
    @Override public void focusLost(    FocusEvent e){
      if (!isContextMode()) {
        if (originalUischema != null) {
          if (!originalUischema.equalsIgnoreCase(schemaText.getText())) {
            ConnectionHelper.setIsConnNeedReload(getConnection(),Boolean.TRUE);
          }
 else {
            checkURLIsChanged();
          }
        }
      }
    }
  }
);
  dbVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        if (version != null) {
          getConnection().setDbVersionString(version.getVersionValue());
        }
        urlConnectionStringText.setText(getStringConnection());
        checkFieldsValue();
      }
    }
  }
);
  hideDbVersion();
  additionParamText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setAdditionalParams(additionParamText.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  additionalJDBCSettingsText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,additionalJDBCSettingsText.getText());
        urlConnectionStringText.setText(getStringConnection());
      }
    }
  }
);
  standardButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  systemButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setStandardSQL(standardButton.getSelection());
        getConnection().setSystemSQL(systemButton.getSelection());
      }
    }
  }
);
  button1.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(button1.getSelection());
      }
    }
  }
);
  button2.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        getConnection().setSQLMode(!button2.getSelection());
      }
    }
  }
);
  dbTypeCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().getParameters().clear();
      getConnection().setDbVersionString(null);
      resetControls();
      urlConnectionStringText.setEditable(false);
      authenticationGrpForImpala.setVisible(false);
      authenticationGrpForImpala.getParent().layout();
      clearFiledsForDiffDbTypes();
      boolean isGeneralJDBC=isGeneralJDBC();
      if (isGeneralJDBC) {
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(""String_Node_Str"");
        }
        if (generalJdbcUserText != null) {
          generalJdbcUserText.setText(""String_Node_Str"");
        }
        if (generalJdbcPasswordText != null) {
          generalJdbcPasswordText.setText(""String_Node_Str"");
        }
      }
 else       if (isHiveDBConnSelected()) {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
        hideControl(authenticationGrpForHBase,true);
        initHiveInfo();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.HBASE)) {
        hideControl(authenticationCom,true);
        hideControl(znodeparentGrp,false);
        initHBaseSettings();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.MAPRDB)) {
        hideControl(authenticationCom,true);
        hideControl(znodeparentGrp,false);
        hideControl(tableInfoPartOfMapRDBComp,false);
        initMaprdbSettings();
      }
 else       if (isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        hideControl(authenticationCom,true);
        hideControl(authenticationComForHBase,true);
        initImpalaSettings();
        getConnection().setDbVersionString(""String_Node_Str"");
      }
 else {
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(""String_Node_Str"");
        }
        if (usernameText != null) {
          usernameText.setText(""String_Node_Str"");
        }
        if (passwordText != null) {
          passwordText.setText(""String_Node_Str"");
        }
      }
      if (schemaText != null) {
        schemaText.setText(""String_Node_Str"");
      }
      if (serverText != null) {
        serverText.setText(""String_Node_Str"");
      }
      if (sidOrDatabaseText != null) {
        sidOrDatabaseText.setText(""String_Node_Str"");
      }
      if (portText != null && portText.getText() != null) {
        portText.setText(""String_Node_Str"");
      }
      if (fileField != null) {
        fileField.setText(""String_Node_Str"");
      }
      if (datasourceText != null) {
        datasourceText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (generalJdbcClassNameText != null) {
        generalJdbcClassNameText.setText(""String_Node_Str"");
      }
      if (generalJdbcDriverjarText != null) {
        generalJdbcDriverjarText.setText(""String_Node_Str"");
      }
      if (additionParamText != null) {
        additionParamText.setText(""String_Node_Str"");
      }
      if (mappingFileText != null) {
        mappingFileText.setText(""String_Node_Str"");
      }
      boolean hiddenGeneral=!isGeneralJDBC();
      switchBetweenTypeandGeneralDB(!isGeneralJDBC());
      if (!isContextMode()) {
        getConnection().setDatabaseType(dbTypeCombo.getText());
        EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
        if (template != null) {
          portText.setText(template.getDefaultPort());
        }
        final String product=EDatabaseTypeName.getTypeFromDisplayName(getConnection().getDatabaseType()).getProduct();
        getConnection().setProductId(product);
        String mapping=null;
        if (product == null || product.equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          mapping=generalMappingFileText.getText();
        }
 else {
          if (MetadataTalendType.getDefaultDbmsFromProduct(product) != null) {
            mapping=MetadataTalendType.getDefaultDbmsFromProduct(product).getId();
          }
        }
        if (mapping == null) {
          mapping=""String_Node_Str"";
        }
        getConnection().setDbmsId(mapping);
        setPropertiesFormEditable(true);
        additionParamText.setText(EDatabaseConnTemplate.getAdditionProperty(dbTypeCombo.getText()));
        if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
          datasourceText.setLabelText(Messages.getString(""String_Node_Str""));
        }
        checkAndSetIniSQLModel();
        checkAS400SpecificCase();
        checkFieldsValue();
        hideDbVersion();
        if (!schemaText.getEditable()) {
          schemaText.setText(""String_Node_Str"");
        }
        if (isHiveDBConnSelected()) {
          doHiveDBTypeSelected();
          fillDefaultsWhenHiveVersionChanged();
          fillDefaultsWhenHiveModeChanged(isHiveEmbeddedMode());
        }
 else {
          doHiveDBTypeNotSelected();
        }
        if (isHBaseDBConnSelected()) {
          fillDefaultsWhenHBaseVersionChanged();
        }
        if (isImpalaDBConnSelected()) {
          fillDefaultsWhenImpalaVersionChanged();
        }
      }
      if (isHiveDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,SWT.DEFAULT));
      }
 else       if (isImpalaDBConnSelected()) {
        scrolledComposite.setMinSize(newParent.computeSize(SWT.DEFAULT,550));
      }
 else {
        checkScrolledCompositeSize();
      }
      if (!isDBTypeSelected(EDatabaseConnTemplate.HBASE) && !isDBTypeSelected(EDatabaseConnTemplate.MAPRDB) && !isDBTypeSelected(EDatabaseConnTemplate.HIVE)&& !isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
        clearHadoopRelatedParameters();
      }
    }
  }
);
  fileField.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() == -1) {
          dbTypeCombo.forceFocus();
        }
 else {
          EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
          EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(getConnection().getDbVersionString());
          if (template != null && template.getUrlTemplate(version).contains(EDatabaseConnVar.FILENAME.getVariable())) {
            setPropertiesFormEditable(true);
            urlConnectionStringText.setEditable(false);
          }
          getConnection().setFileFieldName(PathUtils.getPortablePath(fileField.getText()));
        }
      }
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          getConnection().setFileFieldName(fileField.getText());
          modifyFieldValue();
        }
      }
    }
  }
);
  directoryField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (!urlConnectionStringText.getEditable()) {
          String text=directoryField.getText();
          getConnection().setDBRootPath(text);
          checkFieldsValue();
        }
      }
    }
  }
);
  sqlSyntaxCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setSqlSynthax(sqlSyntaxCombo.getText());
      }
    }
  }
);
  nullCharText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setNullChar(nullCharText.getText());
      }
    }
  }
);
  stringQuoteText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setStringQuote(stringQuoteText.getText());
      }
    }
  }
);
  addGeneralDbFieldsListeners();
  addHBaseSettingFieldsListeners();
  addMaprdbSettingFieldsListeners();
  addImpalaSettingFieldsListeners();
  regHiveRelatedWidgetsListeners();
  if (canLinkToHadoopCluster()) {
    addHadoopClusterLinkListeners();
  }
}",0.998445696522246
125462,"@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  String sql;
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=rs.getString(""String_Node_Str"").trim();
      String typeName=rs.getString(""String_Node_Str"");
      String columnSize=rs.getString(""String_Node_Str"");
      String decimalDigits=rs.getString(""String_Node_Str"");
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      if (decimalDigits == null) {
        decimalDigits=""String_Node_Str"";
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getColumns(String catalog,String database,String tableNamePattern,String columnNamePattern) throws SQLException {
  if (databaseName != null && !databaseName.trim().isEmpty()) {
    database=databaseName;
  }
  String sql=null;
  int dbMajorVersion=connection.getMetaData().getDatabaseMajorVersion();
  if (!StringUtils.isEmpty(database)) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
    if (dbMajorVersion > 12) {
      sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
 else {
    sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str"";
    if (dbMajorVersion > 12) {
      sql=""String_Node_Str"" + tableNamePattern + ""String_Node_Str""+ ""String_Node_Str"";
    }
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String tableName=tableNamePattern;
      String columnName=null;
      String typeName=null;
      String columnSize=null;
      String decimalDigits=null;
      if (dbMajorVersion > 12) {
        columnName=rs.getString(""String_Node_Str"").trim();
        typeName=rs.getString(""String_Node_Str"");
        columnSize=rs.getString(""String_Node_Str"");
        decimalDigits=rs.getString(""String_Node_Str"");
      }
 else {
        columnName=rs.getString(""String_Node_Str"").trim();
        typeName=rs.getString(""String_Node_Str"");
        columnSize=rs.getString(""String_Node_Str"");
        decimalDigits=rs.getString(""String_Node_Str"");
      }
      String isNullable;
      if (""String_Node_Str"".equals(rs.getString(""String_Node_Str""))) {
        isNullable=""String_Node_Str"";
      }
 else {
        isNullable=rs.getString(""String_Node_Str"");
      }
      if (typeName == null) {
        typeName=""String_Node_Str"";
      }
      if (columnSize == null) {
        columnSize=""String_Node_Str"";
      }
      if (decimalDigits == null) {
        decimalDigits=""String_Node_Str"";
      }
      String remarks=""String_Node_Str"";
      String columnDef=""String_Node_Str"";
      String[] r=new String[]{tableName,columnName,typeName,columnSize,decimalDigits,isNullable,remarks,columnDef};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(COLUMN_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.749885478699038
125463,"@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null && !databaseName.trim().isEmpty()) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ addTypesToSql(types);
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str"";
  }
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"" + tableNamePattern+ ""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    sql=sql + ""String_Node_Str"";
  }
 else {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null && !databaseName.trim().isEmpty()) {
    database=databaseName;
  }
  String sql=null;
  int dbMajorVersion=connection.getMetaData().getDatabaseMajorVersion();
  String sysTable=""String_Node_Str"";
  if (dbMajorVersion > 12) {
    sysTable=""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    sql=""String_Node_Str"" + sysTable + ""String_Node_Str""+ database+ ""String_Node_Str""+ addTypesToSql(types);
  }
 else {
    sql=""String_Node_Str"" + sysTable + ""String_Node_Str""+ database+ ""String_Node_Str"";
  }
  if (!StringUtils.isEmpty(tableNamePattern)) {
    sql=sql + ""String_Node_Str"" + tableNamePattern+ ""String_Node_Str"";
  }
  if (types != null && types.length > 0) {
    sql=sql + ""String_Node_Str"";
  }
 else {
    sql=sql + ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.9218058424313956
125464,"@Override public ResultSet getPrimaryKeys(String catalog,String schema,String table) throws SQLException {
  String sql=""String_Node_Str"" + schema + ""String_Node_Str""+ table+ ""String_Node_Str"";
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String columnName=rs.getString(""String_Node_Str"").trim();
      String pk=rs.getString(""String_Node_Str"");
      String[] r=new String[]{columnName,pk};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(PK_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getPrimaryKeys(String catalog,String schema,String table) throws SQLException {
  int dbMajorVersion=connection.getMetaData().getDatabaseMajorVersion();
  String sql=""String_Node_Str"" + schema + ""String_Node_Str""+ table+ ""String_Node_Str"";
  ResultSet rs=null;
  Statement stmt=null;
  String columnName=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    if (dbMajorVersion > 12) {
      sql=""String_Node_Str"" + schema + ""String_Node_Str""+ table+ ""String_Node_Str"";
      rs=getResultSet(catalog,schema,table,sql);
      while (rs.next()) {
        columnName=rs.getString(""String_Node_Str"").trim();
        String indexType=rs.getString(""String_Node_Str"");
        String[] r=new String[]{columnName,indexType};
        list.add(r);
      }
    }
 else {
      stmt=connection.createStatement();
      rs=stmt.executeQuery(sql);
      while (rs.next()) {
        columnName=rs.getString(""String_Node_Str"").trim();
        String pk=rs.getString(""String_Node_Str"");
        String[] r=new String[]{columnName,pk};
        list.add(r);
      }
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(PK_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.7070967741935484
125465,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ATreeNode other=(ATreeNode)obj;
  if (this.dataType == null) {
    if (other.dataType != null) {
      return false;
    }
  }
 else   if (!this.dataType.equals(other.dataType)) {
    return false;
  }
  if (this.originalDataType == null) {
    if (other.originalDataType != null) {
      return false;
    }
  }
 else   if (!this.originalDataType.equals(other.originalDataType)) {
    return false;
  }
  if (this.type != other.type) {
    return false;
  }
  if (this.value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!this.value.equals(other.value)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ATreeNode other=(ATreeNode)obj;
  if (this.dataType == null) {
    if (other.dataType != null) {
      return false;
    }
  }
 else   if (!this.dataType.equals(other.dataType)) {
    return false;
  }
  if (this.originalDataType == null) {
    if (other.originalDataType != null) {
      return false;
    }
  }
 else   if (!this.originalDataType.equals(other.originalDataType)) {
    return false;
  }
  if (this.type != other.type) {
    return false;
  }
  if (this.value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!this.value.equals(other.value)) {
    return false;
  }
  if (this.parent == null) {
    if (other.parent != null) {
      return false;
    }
  }
 else   if (!this.parent.equals(other.parent)) {
    return false;
  }
  return true;
}",0.8951434878587197
125466,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
String key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Znode_Parent:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
case MaprdbKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
case MaprdbKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
String key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MASTERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL;
if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_REGIONSERVERPRINCIPAL;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Znode_Parent:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
case MaprdbKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
case MaprdbKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
 else if (EDatabaseTypeName.MAPRDB.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_MAPRDB_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.LONG);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}",0.9987938596491228
125467,"private void refreshNodeFromProperty(org.talend.core.model.properties.Property property){
  List<IRepositoryNode> nodes=new ArrayList<>();
  for (  Object object : getExpandedElements()) {
    if (object instanceof IRepositoryNode) {
      nodes.add((IRepositoryNode)object);
    }
  }
  IRepositoryNode itemNode=findItemNode(property.getId(),nodes);
  if (itemNode != null) {
    IRepositoryViewObject object=itemNode.getObject();
    if (object != null) {
      object.getProperty();
    }
    if (itemNode != null && !getTree().isDisposed()) {
      refresh(itemNode,true);
    }
  }
}","private void refreshNodeFromProperty(org.talend.core.model.properties.Property property){
  if (this.getTree() == null || this.getTree().isDisposed()) {
    return;
  }
  List<IRepositoryNode> nodes=new ArrayList<>();
  for (  Object object : getExpandedElements()) {
    if (object instanceof IRepositoryNode) {
      nodes.add((IRepositoryNode)object);
    }
  }
  IRepositoryNode itemNode=findItemNode(property.getId(),nodes);
  if (itemNode != null) {
    IRepositoryViewObject object=itemNode.getObject();
    if (object != null) {
      object.getProperty();
    }
    if (itemNode != null && !getTree().isDisposed()) {
      refresh(itemNode,true);
    }
  }
}",0.9370517928286852
125468,"/** 
 * add StringConnection Controls.
 */
private void addStringConnectionControls(){
  urlConnectionStringText.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() >= 0) {
          setPropertiesFormEditable(false);
          urlConnectionStringText.setEditable(true);
        }
 else {
          updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"",dbTypeCombo.getLabel()));
        }
      }
    }
  }
);
  urlConnectionStringText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (urlConnectionStringText.getEditable()) {
          if (!databaseSettingIsValide) {
            updateStatus(IStatus.INFO,Messages.getString(""String_Node_Str""));
          }
          databaseSettingIsValide=false;
          checkButton.setEnabled(true);
          String[] s=DatabaseConnStrUtil.analyseURL(getConnection().getDatabaseType(),getConnection().getDbVersionString(),urlConnectionStringText.getText());
          String selection=s[0];
          if (!dbTypeCombo.getText().equals(selection)) {
            dbTypeCombo.setText(selection);
            dbTypeCombo.forceFocus();
          }
          int index=1;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MSODBC.getDBDisplayName())) {
              datasourceText.setText(s[index]);
              getConnection().setDatasourceName(s[index]);
              getConnection().setURL(getStringConnection());
            }
 else             if (selection.equals(EDatabaseConnTemplate.SQLITE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
              fileField.setText(s[index]);
              getConnection().setFileFieldName(s[index]);
            }
 else             if (selection.equals(EDatabaseConnTemplate.JAVADB_EMBEDED.getDBDisplayName())) {
              sidOrDatabaseText.setText(s[index]);
              getConnection().setSID(s[index]);
              getConnection().setURL(getStringConnection());
            }
 else             if (selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
              directoryField.setText(s[index]);
              getConnection().setDBRootPath(s[index]);
            }
 else {
              serverText.setText(s[index]);
              getConnection().setServerName(s[index]);
            }
          }
          index=2;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.INTERBASE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.TERADATA.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
              sidOrDatabaseText.setText(s[index]);
              getConnection().setSID(s[index]);
            }
 else             if (selection.equals(EDatabaseConnTemplate.FIREBIRD.getDBDisplayName())) {
              fileField.setText(s[index]);
              getConnection().setFileFieldName(s[index]);
            }
 else {
              portText.setText(s[index]);
              getConnection().setPort(s[index]);
            }
          }
          index=3;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName())) {
              sidOrDatabaseText.setText(s[index]);
              getConnection().setSID(s[index]);
            }
          }
          index=4;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
              datasourceText.setText(s[index]);
              getConnection().setDatasourceName(s[index]);
            }
 else {
              additionParamText.setText(s[index]);
              getConnection().setAdditionalParams(s[index]);
            }
          }
          index=5;
          if (s[index] != ""String_Node_Str"") {
            additionParamText.setText(s[index]);
            getConnection().setAdditionalParams(s[index]);
          }
        }
        checkDBTypeAS400();
      }
    }
  }
);
}","/** 
 * add StringConnection Controls.
 */
private void addStringConnectionControls(){
  urlConnectionStringText.addListener(SWT.FocusIn,new Listener(){
    @Override public void handleEvent(    final Event e){
      if (!isContextMode()) {
        if (dbTypeCombo.getSelectionIndex() >= 0) {
          setPropertiesFormEditable(false);
          urlConnectionStringText.setEditable(true);
        }
 else {
          updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str"",dbTypeCombo.getLabel()));
        }
      }
    }
  }
);
  urlConnectionStringText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (urlConnectionStringText.getEditable()) {
          if (!databaseSettingIsValide) {
            updateStatus(IStatus.INFO,Messages.getString(""String_Node_Str""));
          }
          databaseSettingIsValide=false;
          checkButton.setEnabled(true);
          String[] s=DatabaseConnStrUtil.analyseURL(getConnection().getDatabaseType(),getConnection().getDbVersionString(),urlConnectionStringText.getText());
          String selection=s[0];
          if (!dbTypeCombo.getText().equals(selection)) {
            dbTypeCombo.setText(selection);
            dbTypeCombo.forceFocus();
          }
          int index=1;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.MSODBC.getDBDisplayName())) {
              datasourceText.setText(s[index]);
              getConnection().setDatasourceName(s[index]);
              getConnection().setURL(getStringConnection());
            }
 else             if (selection.equals(EDatabaseConnTemplate.SQLITE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName())) {
              fileField.setText(s[index]);
              getConnection().setFileFieldName(s[index]);
            }
 else             if (selection.equals(EDatabaseConnTemplate.JAVADB_EMBEDED.getDBDisplayName())) {
              sidOrDatabaseText.setText(s[index]);
              getConnection().setSID(s[index]);
              getConnection().setURL(getStringConnection());
            }
 else             if (selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
              directoryField.setText(s[index]);
              getConnection().setDBRootPath(s[index]);
            }
 else {
              serverText.setText(s[index]);
              getConnection().setServerName(s[index]);
            }
          }
          index=2;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.INTERBASE.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.TERADATA.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName())|| selection.equals(EDatabaseConnTemplate.HSQLDB_IN_PROGRESS.getDBDisplayName())) {
              sidOrDatabaseText.setText(s[index]);
              getConnection().setSID(s[index]);
            }
 else             if (selection.equals(EDatabaseConnTemplate.FIREBIRD.getDBDisplayName())) {
              fileField.setText(s[index]);
              getConnection().setFileFieldName(s[index]);
            }
 else {
              portText.setText(s[index]);
              getConnection().setPort(s[index]);
            }
          }
          index=3;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.AS400.getDBDisplayName()) || selection.equals(EDatabaseConnTemplate.REDSHIFT.getDBDisplayName())) {
              sidOrDatabaseText.setText(s[index]);
              getConnection().setSID(s[index]);
            }
          }
          index=4;
          if (s[index] != ""String_Node_Str"") {
            if (selection.equals(EDatabaseConnTemplate.INFORMIX.getDBDisplayName())) {
              datasourceText.setText(s[index]);
              getConnection().setDatasourceName(s[index]);
            }
 else {
              additionParamText.setText(s[index]);
              getConnection().setAdditionalParams(s[index]);
            }
          }
          index=5;
          if (s[index] != ""String_Node_Str"") {
            additionParamText.setText(s[index]);
            getConnection().setAdditionalParams(s[index]);
          }
        }
        checkDBTypeAS400();
      }
    }
  }
);
}",0.991949200589636
125469,"@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  loopTableEditorView.setReadOnly(isContextMode());
  this.fieldsTableEditorView.setReadOnly(isContextMode());
}","@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  loopTableEditorView.setReadOnly(isContextMode());
  this.fieldsTableEditorView.setReadOnly(false);
}",0.956989247311828
125470,"@Override public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionLoopWithXPathEditorView loopTableEditorView=linker.getLoopTableEditorView();
  if (loopTableEditorView.isReadOnly()) {
    return;
  }
  ExtendedTableModel<XmlXPathLoopDescriptor> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  XmlXPathLoopDescriptor pathLoopDescriptor=extendedTableModel.getBeansList().get(0);
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,pathLoopDescriptor,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithXPathEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<SchemaTarget> fullSchemaTargetList=new ArrayList<SchemaTarget>(tableEditorView.getModel().getBeansList());
    List<SchemaTarget> list=new ArrayList<SchemaTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0) {
        String loopPath=loopXpathNodes.get(0);
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        SchemaTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=extractColumnName(extractTagName(relativeXPath),fullSchemaTargetList);
        newTargetEntry.setTagName(name);
        list.add(newTargetEntry);
        fullSchemaTargetList.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}","@Override public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionLoopWithXPathEditorView loopTableEditorView=linker.getLoopTableEditorView();
  ExtendedTableModel<XmlXPathLoopDescriptor> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  XmlXPathLoopDescriptor pathLoopDescriptor=extendedTableModel.getBeansList().get(0);
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(pathLoopDescriptor.getConnection(),pathLoopDescriptor.getConnection().getContextName());
  String originalValue=pathLoopDescriptor.getAbsoluteXPathQuery();
  if (contextType != null) {
    originalValue=ConnectionContextHelper.getOriginalValue(contextType,pathLoopDescriptor.getAbsoluteXPathQuery());
    originalValue=TalendQuoteUtils.removeQuotes(originalValue);
  }
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,pathLoopDescriptor,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithXPathEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<SchemaTarget> fullSchemaTargetList=new ArrayList<SchemaTarget>(tableEditorView.getModel().getBeansList());
    List<SchemaTarget> list=new ArrayList<SchemaTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0 || (loopTableEditorView.isReadOnly() && originalValue != null)) {
        String loopPath=originalValue;
        if (loopXpathNodes.size() > 0) {
          loopPath=loopXpathNodes.get(0);
        }
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        SchemaTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=extractColumnName(extractTagName(relativeXPath),fullSchemaTargetList);
        newTargetEntry.setTagName(name);
        list.add(newTargetEntry);
        fullSchemaTargetList.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}",0.9036564132327336
125471,"public static boolean needFormatSQL(String dbType){
  if (dbType != null) {
    EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(dbType);
    if (type != null) {
switch (type) {
case NETEZZA:
case ORACLE_OCI:
case ORACLEFORSID:
case ORACLESN:
case PSQL:
case PLUSPSQL:
case AS400:
case ACCESS:
case MYSQL:
case AMAZON_AURORA:
case IBMDB2:
case IBMDB2ZOS:
case HIVE:
        return false;
default :
      return true;
  }
}
}
return false;
}","public static boolean needFormatSQL(String dbType){
  if (dbType != null) {
    EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(dbType);
    if (type != null) {
switch (type) {
case NETEZZA:
case ORACLE_OCI:
case ORACLEFORSID:
case ORACLESN:
case PSQL:
case PLUSPSQL:
case AS400:
case ACCESS:
case MYSQL:
case AMAZON_AURORA:
case IBMDB2:
case IBMDB2ZOS:
case HIVE:
case IMPALA:
        return false;
default :
      return true;
  }
}
}
return false;
}",0.9857612267250822
125472,"public static IQueryGenerator getGenerator(final EDatabaseTypeName dbType){
  if (dbType == null) {
    return null;
  }
switch (dbType) {
case HIVE:
    return new HiveQueryGenerator(dbType);
case H2:
  return new H2QueryGenerator(dbType);
case NETEZZA:
return new NetezzaQueryGenerator();
case PLUSPSQL:
case PSQL:
return new PostgreQueryGenerator(dbType);
case AS400:
return new AS400QueryGenerator();
case ACCESS:
case IBMDB2:
case IBMDB2ZOS:
case MYSQL:
case AMAZON_AURORA:
case INGRES:
return new NonDatabaseDefaultQueryGenerator(dbType);
case ORACLE_OCI:
case ORACLEFORSID:
case ORACLESN:
case SAS:
case SAPHana:
return new OracleQueryGenerator(dbType);
case EXASOL:
case FIREBIRD:
case GENERAL_JDBC:
case GODBC:
case GREENPLUM:
case HSQLDB:
case HSQLDB_IN_PROGRESS:
case HSQLDB_SERVER:
case HSQLDB_WEBSERVER:
case INFORMIX:
case INTERBASE:
case JAVADB:
case JAVADB_DERBYCLIENT:
case JAVADB_EMBEDED:
case JAVADB_JCCJDBC:
case MAXDB:
case MSODBC:
case MSSQL:
case PARACCEL:
case REDSHIFT:
case SQLITE:
case SYBASEASE:
case SYBASEIQ:
case TERADATA:
case VERTICA:
default :
return new OldDelegateQueryGenerator(dbType);
}
}","public static IQueryGenerator getGenerator(final EDatabaseTypeName dbType){
  if (dbType == null) {
    return null;
  }
switch (dbType) {
case HIVE:
    return new HiveQueryGenerator(dbType);
case H2:
  return new H2QueryGenerator(dbType);
case IMPALA:
return new ImpalaQueryGenerator(dbType);
case NETEZZA:
return new NetezzaQueryGenerator();
case PLUSPSQL:
case PSQL:
return new PostgreQueryGenerator(dbType);
case AS400:
return new AS400QueryGenerator();
case ACCESS:
case IBMDB2:
case IBMDB2ZOS:
case MYSQL:
case AMAZON_AURORA:
case INGRES:
return new NonDatabaseDefaultQueryGenerator(dbType);
case ORACLE_OCI:
case ORACLEFORSID:
case ORACLESN:
case SAS:
case SAPHana:
return new OracleQueryGenerator(dbType);
case EXASOL:
case FIREBIRD:
case GENERAL_JDBC:
case GODBC:
case GREENPLUM:
case HSQLDB:
case HSQLDB_IN_PROGRESS:
case HSQLDB_SERVER:
case HSQLDB_WEBSERVER:
case INFORMIX:
case INTERBASE:
case JAVADB:
case JAVADB_DERBYCLIENT:
case JAVADB_EMBEDED:
case JAVADB_JCCJDBC:
case MAXDB:
case MSODBC:
case MSSQL:
case PARACCEL:
case REDSHIFT:
case SQLITE:
case SYBASEASE:
case SYBASEIQ:
case TERADATA:
case VERTICA:
default :
return new OldDelegateQueryGenerator(dbType);
}
}",0.9766031195840554
125473,"public DbConnStrForHive(EDatabaseTypeName dbType,String urlTemplate,EDatabaseVersion4Drivers[] hiveModes){
  super(dbType,urlTemplate);
}","public DbConnStrForHive(EDatabaseTypeName dbType,String urlTemplate,EDatabaseVersion4Drivers[] hiveModes,String defaultServer,String defaultDB){
  super(dbType,urlTemplate,null,null,hiveModes,defaultServer,defaultDB);
}",0.7696629213483146
125474,"/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  boolean isMaprdb=visible && asMaprdbVersionEnable();
  boolean isImpala=visible && ImpalaVersionEnable();
  boolean isMsSQL=visible && asMsSQLVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| isImpala|| isMsSQL|| EDatabaseConnTemplate.PSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.PLUSPSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (isHiveDBConnSelected()) {
        boolean isEmbeddedMode=isHiveEmbeddedMode();
        if (doSupportHive2()) {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
          }
        }
 else {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
          }
        }
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase || isMaprdb || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)|| isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    hideHCLinkSettings(!isHbase && !isMaprdb && !isHiveDBConnSelected());
    hideHBaseSettings(!isHbase);
    hideMaprdbSettings(!isMaprdb);
    hideImpalaSettings(!isImpala);
    updateHadoopPropertiesFieldsState();
    updateHiveJDBCPropertiesFieldsState();
    showIfAdditionalJDBCSettings();
    showIfSupportEncryption();
    showIfAuthentication();
    hideHiveExecutionFields(!doSupportTez());
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase || isMaprdb|| isImpala) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        if (isMaprdb) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.MAPRDB.getUrlTemplate(EDatabaseVersion4Drivers.MAPRDB));
          }
        }
        if (isImpala) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(""String_Node_Str"");
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        sidOrDatabaseText.setEditable(true);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase || isMaprdb|| isImpala) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(true);
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED && !isHiveDBConnSelected()) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase || isMaprdb) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isImpala) {
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase || isMaprdb) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  maprdbSettingGroup.layout();
  impalaSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}","/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  boolean isMaprdb=visible && asMaprdbVersionEnable();
  boolean isImpala=visible && ImpalaVersionEnable();
  boolean isHive=visible && hiveVersionEnable();
  boolean isMsSQL=visible && asMsSQLVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| isImpala|| isMsSQL|| EDatabaseConnTemplate.PSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.PLUSPSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (isHiveDBConnSelected()) {
        boolean isEmbeddedMode=isHiveEmbeddedMode();
        if (doSupportHive2()) {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
          }
        }
 else {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
          }
        }
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase || isMaprdb || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)|| isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    hideHCLinkSettings(!isHbase && !isMaprdb && !isHiveDBConnSelected());
    hideHBaseSettings(!isHbase);
    hideMaprdbSettings(!isMaprdb);
    hideImpalaSettings(!isImpala);
    updateHadoopPropertiesFieldsState();
    updateHiveJDBCPropertiesFieldsState();
    showIfAdditionalJDBCSettings();
    showIfSupportEncryption();
    showIfAuthentication();
    hideHiveExecutionFields(!doSupportTez());
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase || isMaprdb|| isImpala) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        if (isMaprdb) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.MAPRDB.getUrlTemplate(EDatabaseVersion4Drivers.MAPRDB));
          }
        }
        if (isImpala) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.IMPALA.getDefaultServer(null));
          }
        }
        if (isHive) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HIVE.getDefaultServer(EDatabaseVersion4Drivers.HIVE));
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        sidOrDatabaseText.setEditable(true);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase || isMaprdb|| isImpala) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(true);
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED && !isHiveDBConnSelected()) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase || isMaprdb) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isImpala) {
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase || isMaprdb) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  maprdbSettingGroup.layout();
  impalaSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}",0.9874654626322528
125475,"private void fillDefaultsWhenImpalaVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    if (distribution == null) {
      return;
    }
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    if (template != null) {
      portText.setText(template.getDefaultPort());
    }
    initImpalaInfo();
  }
}","private void fillDefaultsWhenImpalaVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    if (distribution == null) {
      return;
    }
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    if (template != null) {
      portText.setText(template.getDefaultPort());
      serverText.setText(template.getDefaultServer(null));
      sidOrDatabaseText.setText(template.getDefaultDB(null));
    }
    initImpalaInfo();
  }
}",0.9067077872012336
125476,"private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hiveDistribution=hadoopDistributionService.getHiveDistributionManager().getDistribution(distribution,false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(version,false);
    if (hiveVersion == null) {
      return;
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.NAMENODE_URI.getName());
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.RESOURCE_MANAGER.getName());
    }
 else {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.JOBTRACKER.getName());
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
      getConnection().setSID(defaultDatabase);
    }
    String maprticket_Cluster=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    String defaultMaprticket_Cluster=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_CLUSTER.getName());
    if (StringUtils.isNotEmpty(maprticket_Cluster)) {
      maprTClusterForHiveTxt.setText(maprticket_Cluster);
    }
 else     if (defaultMaprticket_Cluster != null) {
      maprTClusterForHiveTxt.setText(defaultMaprticket_Cluster);
    }
    String maprticket_Duration=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    String defaultMaprticket_Duration=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_DURATION.getName());
    if (StringUtils.isNotEmpty(maprticket_Duration)) {
      maprTDurationForHiveTxt.setText(maprticket_Duration);
    }
 else     if (defaultMaprticket_Duration != null) {
      maprTDurationForHiveTxt.setText(defaultMaprticket_Duration);
    }
  }
}","private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hiveDistribution=hadoopDistributionService.getHiveDistributionManager().getDistribution(distribution,false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(version,false);
    if (hiveVersion == null) {
      return;
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.NAMENODE_URI.getName());
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.RESOURCE_MANAGER.getName());
    }
 else {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.JOBTRACKER.getName());
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
      getConnection().setSID(defaultDatabase);
    }
    String maprticket_Cluster=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    String defaultMaprticket_Cluster=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_CLUSTER.getName());
    if (StringUtils.isNotEmpty(maprticket_Cluster)) {
      maprTClusterForHiveTxt.setText(maprticket_Cluster);
    }
 else     if (defaultMaprticket_Cluster != null) {
      maprTClusterForHiveTxt.setText(defaultMaprticket_Cluster);
    }
    String maprticket_Duration=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    String defaultMaprticket_Duration=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_DURATION.getName());
    if (StringUtils.isNotEmpty(maprticket_Duration)) {
      maprTDurationForHiveTxt.setText(maprticket_Duration);
    }
 else     if (defaultMaprticket_Duration != null) {
      maprTDurationForHiveTxt.setText(defaultMaprticket_Duration);
    }
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    if (template != null) {
      serverText.setText(template.getDefaultServer(null));
    }
  }
}",0.9744562468386444
125477,"/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    ITreeContentProvider contentProvider=(ITreeContentProvider)getContentProvider();
    Object[] childrensObject=contentProvider.getElements(node);
    List<IRepositoryNode> childrens=new ArrayList<>();
    for (    Object o : childrensObject) {
      if (o instanceof IRepositoryNode) {
        childrens.add((IRepositoryNode)o);
      }
    }
    IRepositoryNode childNode=findItemNode(id,childrens);
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    List<IRepositoryNode> childrens=new ArrayList<>();
    Widget repWidget=this.findItem(node);
    if (repWidget != null) {
      Item[] childrenItem=this.getChildren(repWidget);
      if (childrenItem != null) {
        for (        Item childItem : childrenItem) {
          RepositoryNode repNode=this.getRepositoryNode(childItem);
          if (repNode != null) {
            childrens.add(repNode);
          }
        }
      }
    }
 else {
      ITreeContentProvider contentProvider=(ITreeContentProvider)getContentProvider();
      Object[] childrensObject=contentProvider.getElements(node);
      for (      Object o : childrensObject) {
        if (o instanceof IRepositoryNode) {
          childrens.add((IRepositoryNode)o);
        }
      }
    }
    IRepositoryNode childNode=findItemNode(id,childrens);
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}",0.7175170962651236
125478,"/** 
 * copy all fields.
 * @param metadataColumn
 */
public MetadataColumn(IMetadataColumn metadataColumn){
  this();
  this.setLabel(metadataColumn.getLabel());
  this.setOriginalDbColumnName(metadataColumn.getOriginalDbColumnName());
  this.key=metadataColumn.isKey();
  this.pattern=metadataColumn.getPattern();
  try {
    this.setTalendType(metadataColumn.getTalendType());
  }
 catch (  NoClassDefFoundError e) {
    ExceptionHandler.process(e);
  }
  this.setType(metadataColumn.getType());
  this.nullable=metadataColumn.isNullable();
  this.length=metadataColumn.getLength();
  this.precision=metadataColumn.getPrecision();
  this.originalLength=metadataColumn.getOriginalLength();
  setDefault(metadataColumn.getDefault());
  setComment(metadataColumn.getComment());
  setOriginalLength(metadataColumn.getOriginalLength());
  setRelatedEntity(metadataColumn.getRelatedEntity());
  setRelationshipType(metadataColumn.getRelationshipType());
  this.usefulColumn=metadataColumn.isUsefulColumn();
}","/** 
 * copy all fields.
 * @param metadataColumn
 */
public MetadataColumn(IMetadataColumn metadataColumn){
  this();
  this.setLabel(metadataColumn.getLabel());
  this.setOriginalDbColumnName(metadataColumn.getOriginalDbColumnName());
  this.key=metadataColumn.isKey();
  this.pattern=metadataColumn.getPattern();
  try {
    this.setTalendType(metadataColumn.getTalendType());
  }
 catch (  NoClassDefFoundError e) {
    ExceptionHandler.process(e);
  }
  this.setType(metadataColumn.getType());
  this.nullable=metadataColumn.isNullable();
  this.length=metadataColumn.getLength();
  this.precision=metadataColumn.getPrecision();
  this.originalLength=metadataColumn.getOriginalLength();
  setDefault(metadataColumn.getDefault());
  setComment(metadataColumn.getComment());
  setOriginalLength(metadataColumn.getOriginalLength());
  setRelatedEntity(metadataColumn.getRelatedEntity());
  setRelationshipType(metadataColumn.getRelationshipType());
  this.usefulColumn=metadataColumn.isUsefulColumn();
  this.getAdditionalField().putAll(metadataColumn.getAdditionalField());
}",0.9649543927028325
125479,"@SuppressWarnings(""String_Node_Str"") public Function clone(String[] parameters){
  Function function=(Function)clone();
  if (parameters != null) {
    for (int i=0; i < function.getParameters().size(); i++) {
      Parameter pa=(Parameter)function.getParameters().get(i);
      pa.setValue(parameters[i]);
    }
  }
  return function;
}","@SuppressWarnings(""String_Node_Str"") public Function clone(JSONArray parametersArray){
  if (parametersArray == null || parametersArray.length() == 0) {
    return (Function)clone();
  }
  Function function=(Function)clone();
  if (parametersArray != null) {
    try {
      List<Parameter> params=function.getParameters();
      for (      Parameter param : params) {
        for (int i=0; i < parametersArray.length(); i++) {
          JSONObject parameterObj=parametersArray.getJSONObject(i);
          String paramName=parameterObj.getString(PARAMETER_NAME);
          String paramValue=parameterObj.getString(PARAMETER_VALUE);
          if (param.getName().equals(paramName)) {
            param.setValue(paramValue);
          }
        }
      }
    }
 catch (    JSONException e) {
      ExceptionHandler.process(e);
    }
  }
  return function;
}",0.3640939597315436
125480,"private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  boolean hasJoblet=false;
  boolean reloadJoblet=false;
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      continue;
    }
    if (ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) {
      hasJoblet=true;
    }
    if (hasJoblet) {
      if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType()) {
        reloadJoblet=true;
        if (PluginChecker.isJobLetPluginLoaded()) {
          IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          if (jobletService != null) {
            jobletService.loadComponentsFromProviders();
          }
        }
      }
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
  if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
}","private void importItemRecordsWithRelations(final IProgressMonitor monitor,final ResourcesManager manager,final List<ImportItem> processingItemRecords,final boolean overwriting,ImportItem[] allPopulatedImportItemRecords,IPath destinationPath,final Set<String> overwriteDeletedItems,final Set<String> idDeletedBeforeImport) throws Exception {
  boolean hasJoblet=false;
  boolean reloadJoblet=false;
  for (  ImportItem itemRecord : processingItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isImported()) {
      continue;
    }
    if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
      hasJoblet=true;
    }
    if (hasJoblet) {
      if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
        reloadJoblet=true;
        if (PluginChecker.isJobLetPluginLoaded()) {
          IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
          if (jobletService != null) {
            jobletService.loadComponentsFromProviders();
          }
        }
      }
    }
    try {
      final IImportItemsHandler importHandler=itemRecord.getImportHandler();
      if (importHandler != null && itemRecord.isValid()) {
        List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
        if (importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        if (monitor.isCanceled()) {
          return;
        }
        importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
        if (monitor.isCanceled()) {
          return;
        }
        if (!importHandler.isPriorImportRelatedItem()) {
          if (!relatedItemRecord.isEmpty()) {
            importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
          }
        }
        importHandler.afterImportingItems(monitor,manager,itemRecord);
        ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
        monitor.worked(1);
      }
    }
 catch (    Exception e) {
      if (Platform.inDebugMode()) {
        itemRecord.addError(e.getMessage());
        ImportCacheHelper.getInstance().setImportingError(true);
        ExceptionHandler.process(e);
      }
    }
  }
  if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (jobletService != null) {
      jobletService.loadComponentsFromProviders();
    }
  }
}",0.9315889029003784
125481,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty() && checkedFolders.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if (ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty() && checkedFolders.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if ((ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_JOBLET == itemRecord.getRepositoryType()) || (ERepositoryObjectType.SPARK_STREAMING_JOBLET == itemRecord.getRepositoryType())) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_JOBLET != itemRecord.getRepositoryType() && ERepositoryObjectType.SPARK_STREAMING_JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9786274837201536
125482,"private void addListenerForImpalaAuthentication(){
  useKerberosForImpala.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (useKerberosForImpala.getSelection()) {
        GridData hadoopData=(GridData)authenticationComForImpala.getLayoutData();
        hadoopData.exclude=false;
        authenticationComForImpala.setVisible(true);
        authenticationComForImpala.setLayoutData(hadoopData);
        authenticationComForImpala.getParent().layout();
        authenticationGrpForImpala.layout();
        authenticationGrpForImpala.getParent().layout();
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,Boolean.TRUE.toString());
      }
 else {
        GridData hadoopData=(GridData)authenticationComForImpala.getLayoutData();
        hadoopData.exclude=true;
        authenticationComForImpala.setVisible(false);
        authenticationComForImpala.setLayoutData(hadoopData);
        authenticationComForImpala.getParent().layout();
        authenticationGrpForImpala.layout();
        authenticationGrpForImpala.getParent().layout();
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,Boolean.FALSE.toString());
      }
      urlConnectionStringText.setText(getStringConnection());
    }
  }
);
  impalaPrincipalTxt.getTextControl().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        getConnection().getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,impalaPrincipalTxt.getText());
        urlConnectionStringText.setText(getStringConnection());
      }
    }
  }
);
}","private void addListenerForImpalaAuthentication(){
  useKerberosForImpala.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (useKerberosForImpala.getSelection()) {
        GridData hadoopData=(GridData)authenticationComForImpala.getLayoutData();
        hadoopData.exclude=false;
        authenticationComForImpala.setVisible(true);
        authenticationComForImpala.setLayoutData(hadoopData);
        authenticationComForImpala.getParent().layout();
        authenticationGrpForImpala.layout();
        authenticationGrpForImpala.getParent().layout();
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,Boolean.TRUE.toString());
        getConnection().getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,impalaPrincipalTxt.getText());
        urlConnectionStringText.setText(getStringConnection());
      }
 else {
        GridData hadoopData=(GridData)authenticationComForImpala.getLayoutData();
        hadoopData.exclude=true;
        authenticationComForImpala.setVisible(false);
        authenticationComForImpala.setLayoutData(hadoopData);
        authenticationComForImpala.getParent().layout();
        authenticationGrpForImpala.layout();
        authenticationGrpForImpala.getParent().layout();
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_KRB,Boolean.FALSE.toString());
      }
      urlConnectionStringText.setText(getStringConnection());
    }
  }
);
  impalaPrincipalTxt.getTextControl().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode() && impalaPrincipalTxt.isVisiable()) {
        getConnection().getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,impalaPrincipalTxt.getText());
        urlConnectionStringText.setText(getStringConnection());
      }
    }
  }
);
}",0.9384615384615383
125483,"private void fillDefaultsWhenImpalaVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    if (distribution == null) {
      return;
    }
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    if (template != null) {
      portText.setText(template.getDefaultPort());
    }
  }
}","private void fillDefaultsWhenImpalaVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    if (distribution == null) {
      return;
    }
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    if (template != null) {
      portText.setText(template.getDefaultPort());
    }
    initImpalaInfo();
  }
}",0.9809358752166378
125484,"/** 
 * Getter for destinationPath.
 * @return the destinationPath
 */
public IPath getDestinationPath(){
  String pathStr=pathText.getText();
  if (pathStr.contains(""String_Node_Str"")) {
    int index=pathStr.indexOf(""String_Node_Str"");
    if (pathStr.length() > index + 1) {
      pathStr=pathStr.substring(pathStr.indexOf(""String_Node_Str"") + 1);
    }
  }
  return new Path(pathStr);
}","/** 
 * Getter for destinationPath.
 * @return the destinationPath
 */
public IPath getDestinationPath(){
  String pathStr=""String_Node_Str"";
  if (pathText != null) {
    pathStr=pathText.getText();
  }
  if (pathStr.contains(""String_Node_Str"")) {
    int index=pathStr.indexOf(""String_Node_Str"");
    if (pathStr.length() > index + 1) {
      pathStr=pathStr.substring(pathStr.indexOf(""String_Node_Str"") + 1);
    }
  }
  return new Path(pathStr);
}",0.9179548156956004
125485,"public void buildDeletedItemsTree(RepositoryNode rootNode){
  List<String> folders=RecycleBinManager.getInstance().getDeletedFolders(ProjectManager.getInstance().getCurrentProject());
  Collections.sort(folders);
  for (  String fullPath : folders) {
    String path=null;
    String comparePath=fullPath;
    if (fullPath != null) {
      String[] paths=fullPath.split(""String_Node_Str"");
      if (paths.length > 0) {
        comparePath=paths[0];
      }
    }
    ERepositoryObjectType currentType=null;
    for (    DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
      ERepositoryObjectType objectType=(ERepositoryObjectType)type;
      if (objectType.isResouce() && comparePath.equals(objectType.getFolder())) {
        path=fullPath.substring(objectType.getFolder().length() + 1);
        currentType=objectType;
        break;
      }
    }
    if (currentType != null) {
      buildFolders(rootNode,currentType,path,rootNode);
    }
  }
  addDeletedElements(rootNode,rootNode.getChildren());
}","public void buildDeletedItemsTree(RepositoryNode rootNode){
  List<String> folders=RecycleBinManager.getInstance().getDeletedFolders(ProjectManager.getInstance().getCurrentProject());
  Collections.sort(folders);
  for (  String fullPath : folders) {
    String folderPath=null;
    final IPath fPath=new Path(fullPath);
    ERepositoryObjectType currentType=null;
    for (    DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
      ERepositoryObjectType objectType=(ERepositoryObjectType)type;
      if (objectType.isResouce()) {
        IPath typePath=new Path(objectType.getFolder());
        if (typePath.isPrefixOf(fPath)) {
          folderPath=fPath.makeRelativeTo(typePath).toString();
          currentType=objectType;
          break;
        }
      }
    }
    if (currentType != null) {
      buildFolders(rootNode,currentType,folderPath,rootNode);
    }
  }
  addDeletedElements(rootNode,rootNode.getChildren());
}",0.7111111111111111
125486,"public void saveRelations(){
  if (!loaded && !modified) {
    return;
  }
  Project currentProject=getAimProject();
  List<ItemRelations> oldRelations=new ArrayList<ItemRelations>(currentProject.getEmfProject().getItemsRelations());
  List<ItemRelations> usedList=new ArrayList<ItemRelations>();
  for (  Relation relation : currentProjectItemsRelations.keySet()) {
    ItemRelations itemRelations=null;
    boolean exist=false;
    for (    ItemRelations relations : oldRelations) {
      if (relations.getBaseItem().getId().equals(relation.getId())) {
        usedList.add(relations);
        itemRelations=relations;
        exist=true;
        break;
      }
    }
    if (itemRelations == null) {
      itemRelations=PropertiesFactory.eINSTANCE.createItemRelations();
      ItemRelation baseItem=PropertiesFactory.eINSTANCE.createItemRelation();
      itemRelations.setBaseItem(baseItem);
      baseItem.setId(relation.getId());
      baseItem.setType(relation.getType());
      baseItem.setVersion(relation.getVersion());
    }
    List<Relation> relationItemsList=new ArrayList<Relation>(currentProjectItemsRelations.get(relation));
    Collections.sort(relationItemsList,new Comparator<Relation>(){
      @Override public int compare(      Relation o1,      Relation o2){
        return o1.getType().compareTo(o2.getType());
      }
    }
);
    for (    Relation relatedItem : relationItemsList) {
      List<ItemRelation> relationList=new ArrayList<ItemRelation>(itemRelations.getRelatedItems());
      boolean found=false;
      for (      ItemRelation item : relationList) {
        if (item.getId() != null && item.getId().equals(relatedItem.getId())) {
          found=true;
          break;
        }
      }
      if (found) {
        continue;
      }
      ItemRelation emfRelatedItem=PropertiesFactory.eINSTANCE.createItemRelation();
      emfRelatedItem.setId(relatedItem.getId());
      emfRelatedItem.setType(relatedItem.getType());
      emfRelatedItem.setVersion(relatedItem.getVersion());
      itemRelations.getRelatedItems().add(emfRelatedItem);
    }
    if (!exist) {
      currentProject.getEmfProject().getItemsRelations().add(itemRelations);
    }
  }
  oldRelations.removeAll(usedList);
  currentProject.getEmfProject().getItemsRelations().removeAll(oldRelations);
  try {
    getProxyRepositoryFactory().saveProject(currentProject);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  modified=false;
}","public void saveRelations(){
  if (!loaded && !modified) {
    return;
  }
  Project currentProject=getAimProject();
  List<ItemRelations> oldRelations=new ArrayList<ItemRelations>(currentProject.getEmfProject().getItemsRelations());
  List<ItemRelations> usedList=new ArrayList<ItemRelations>();
  for (  Relation relation : currentProjectItemsRelations.keySet()) {
    ItemRelations itemRelations=null;
    boolean exist=false;
    for (    ItemRelations relations : oldRelations) {
      boolean isIdSame=relations.getBaseItem().getId().equals(relation.getId());
      boolean isVersionSame=StringUtils.equals(relations.getBaseItem().getVersion(),relation.getVersion());
      if (isIdSame && isVersionSame) {
        usedList.add(relations);
        itemRelations=relations;
        exist=true;
        break;
      }
    }
    if (itemRelations == null) {
      itemRelations=PropertiesFactory.eINSTANCE.createItemRelations();
      ItemRelation baseItem=PropertiesFactory.eINSTANCE.createItemRelation();
      itemRelations.setBaseItem(baseItem);
      baseItem.setId(relation.getId());
      baseItem.setType(relation.getType());
      baseItem.setVersion(relation.getVersion());
    }
    List<Relation> relationItemsList=new ArrayList<Relation>(currentProjectItemsRelations.get(relation));
    Collections.sort(relationItemsList,new Comparator<Relation>(){
      @Override public int compare(      Relation o1,      Relation o2){
        return o1.getType().compareTo(o2.getType());
      }
    }
);
    for (    Relation relatedItem : relationItemsList) {
      List<ItemRelation> relationList=new ArrayList<ItemRelation>(itemRelations.getRelatedItems());
      boolean found=false;
      for (      ItemRelation item : relationList) {
        boolean isIdSame=false;
        String itemId=item.getId();
        if (itemId != null) {
          isIdSame=itemId.equals(relatedItem.getId());
        }
        boolean isVersionSame=false;
        if (isIdSame) {
          isVersionSame=StringUtils.equals(item.getVersion(),relatedItem.getVersion());
        }
        if (isIdSame && isVersionSame) {
          found=true;
          break;
        }
      }
      if (found) {
        continue;
      }
      ItemRelation emfRelatedItem=PropertiesFactory.eINSTANCE.createItemRelation();
      emfRelatedItem.setId(relatedItem.getId());
      emfRelatedItem.setType(relatedItem.getType());
      emfRelatedItem.setVersion(relatedItem.getVersion());
      itemRelations.getRelatedItems().add(emfRelatedItem);
    }
    if (!exist) {
      currentProject.getEmfProject().getItemsRelations().add(itemRelations);
    }
  }
  oldRelations.removeAll(usedList);
  currentProject.getEmfProject().getItemsRelations().removeAll(oldRelations);
  try {
    getProxyRepositoryFactory().saveProject(currentProject);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  modified=false;
}",0.8962562860867945
125487,"@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (""String_Node_Str"".equals(version)) {
    version=null;
  }
  if (objToDelete.getRepositoryObjectType() == ERepositoryObjectType.PROCESS || objToDelete.getRepositoryObjectType() == ERepositoryObjectType.JOBLET || objToDelete.getRepositoryObjectType() == ERepositoryObjectType.SPARK_JOBLET || objToDelete.getRepositoryObjectType() == ERepositoryObjectType.SPARK_STREAMING_JOBLET) {
    if (coreSerivce.isAlreadyBuilt(project)) {
      if (objToDelete.getProperty() != null) {
        coreSerivce.removeItemRelations(objToDelete.getProperty().getItem());
      }
    }
  }
  List<IRepositoryViewObject> allVersionToDelete=getAllVersion(project,objToDelete.getId(),false);
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    String currentVersionValue=currentVersion.getVersion();
    if (version == null || currentVersionValue.equals(version)) {
      Property currentProperty=currentVersion.getProperty();
      Item currentItem=currentProperty.getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      currentItem.setParent(null);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(currentProperty);
      for (      Resource resource : affectedResources) {
        deleteResource(resource);
      }
      EList<EObject> eCrossReferences=currentItem.eCrossReferences();
      if (eCrossReferences != null) {
        Iterator<EObject> i=eCrossReferences.iterator();
        while (i.hasNext()) {
          EObject object=i.next();
          if (object != null) {
            Resource currentResource=object.eResource();
            if (currentResource == null) {
              if (object.eIsProxy()) {
                URI uri=((InternalEObject)object).eProxyURI().trimFragment();
                ResourceUtils.deleteFile(URIHelper.getFile(uri));
              }
            }
          }
        }
      }
    }
  }
  if (!allVersionToDelete.isEmpty()) {
    RecycleBinManager.getInstance().removeFromRecycleBin(project,allVersionToDelete.get(0).getProperty().getItem());
  }
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}","@Override public void deleteObjectPhysical(Project project,IRepositoryViewObject objToDelete,String version,boolean fromEmptyRecycleBin) throws PersistenceException {
  if (""String_Node_Str"".equals(version)) {
    version=null;
  }
  List<IRepositoryViewObject> allVersionToDelete=getAllVersion(project,objToDelete.getId(),false);
  for (  IRepositoryViewObject currentVersion : allVersionToDelete) {
    String currentVersionValue=currentVersion.getVersion();
    if (version == null || currentVersionValue.equals(version)) {
      if (currentVersion.getRepositoryObjectType() == ERepositoryObjectType.PROCESS || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.JOBLET || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.SPARK_JOBLET || currentVersion.getRepositoryObjectType() == ERepositoryObjectType.SPARK_STREAMING_JOBLET) {
        if (coreSerivce.isAlreadyBuilt(project)) {
          if (currentVersion.getProperty() != null) {
            coreSerivce.removeItemRelations(currentVersion.getProperty().getItem());
          }
        }
      }
      Property currentProperty=currentVersion.getProperty();
      Item currentItem=currentProperty.getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      currentItem.setParent(null);
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(currentProperty);
      for (      Resource resource : affectedResources) {
        deleteResource(resource);
      }
      EList<EObject> eCrossReferences=currentItem.eCrossReferences();
      if (eCrossReferences != null) {
        Iterator<EObject> i=eCrossReferences.iterator();
        while (i.hasNext()) {
          EObject object=i.next();
          if (object != null) {
            Resource currentResource=object.eResource();
            if (currentResource == null) {
              if (object.eIsProxy()) {
                URI uri=((InternalEObject)object).eProxyURI().trimFragment();
                ResourceUtils.deleteFile(URIHelper.getFile(uri));
              }
            }
          }
        }
      }
    }
  }
  if (!allVersionToDelete.isEmpty()) {
    RecycleBinManager.getInstance().removeFromRecycleBin(project,allVersionToDelete.get(0).getProperty().getItem());
  }
  if (!fromEmptyRecycleBin) {
    saveProject(project);
  }
}",0.8400335008375209
125488,"@Override public Item copy(Item originalItem,IPath path,String newItemLabel) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=null;
    if (newItemLabel == null) {
      boolean changeLabelWithCopyPrefix=true;
      newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    }
 else {
      newItem=copyFromResource(createResource,newItemLabel);
    }
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    if (originalItem.eClass() == PropertiesPackage.Literals.PROCESS_ITEM || originalItem.eClass() == PropertiesPackage.Literals.JOBLET_PROCESS_ITEM) {
      xmiResourceManager.copyScreenshotFile(originalItem,newItem);
    }
 else {
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        handler.copyScreenShotFile(originalItem,newItem);
      }
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}","@Override public Item copy(Item originalItem,IPath path,String newItemLabel) throws PersistenceException, BusinessException {
  Resource resource;
  ProjectManager projectManage=ProjectManager.getInstance();
  if (!projectManage.getProject(originalItem).equals(projectManage.getCurrentProject().getEmfProject())) {
    originalItem.getProperty().eResource().getContents().add(originalItem);
  }
  resource=originalItem.getProperty().eResource();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  try {
    resource.save(out,null);
    Resource createResource=new ResourceSetImpl().createResource(resource.getURI());
    ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray());
    createResource.load(in,null);
    Item newItem=null;
    if (newItemLabel == null) {
      boolean changeLabelWithCopyPrefix=true;
      newItem=copyFromResource(createResource,changeLabelWithCopyPrefix);
    }
 else {
      newItem=copyFromResource(createResource,newItemLabel);
    }
    copyIcon(originalItem,newItem);
    copyReferenceFiles(originalItem,newItem);
    create(getRepositoryContext().getProject(),newItem,path);
    if (originalItem.eClass() == PropertiesPackage.Literals.PROCESS_ITEM || originalItem.eClass() == PropertiesPackage.Literals.JOBLET_PROCESS_ITEM) {
      xmiResourceManager.copyScreenshotFile(originalItem,newItem);
    }
 else {
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        handler.copyScreenShotFile(originalItem,newItem);
      }
    }
    if (newItem instanceof ConnectionItem) {
      ConnectionItem connectionItem=(ConnectionItem)newItem;
      Resource itemResource=xmiResourceManager.getItemResource(connectionItem);
      if (itemResource != null && itemResource instanceof XMLResource) {
        XMLResource xmlResource=(XMLResource)itemResource;
        xmlResource.setID(connectionItem.getConnection(),EcoreUtil.generateUUID());
      }
    }
    return newItem;
  }
 catch (  IOException e) {
    ExceptionHandler.process(e);
  }
  return null;
}",0.9911460895228726
125489,"/** 
 * DOC sgandon Comment method ""getModulesToBeInstalled"".
 * @return
 */
protected List<ModuleToInstall> getModulesToBeInstalled(){
  List<ModuleToInstall> theInputList=tableViewerCreator.getInputList();
  List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
  for (  ModuleToInstall module : theInputList) {
    if (!MavenConstants.DOWNLOAD_MANUAL.equals(module.getDistribution()) && !jarsInstalledSuccuss.contains(module.getName())) {
      toInstall.add(module);
    }
  }
  return toInstall;
}","/** 
 * DOC sgandon Comment method ""getModulesToBeInstalled"".
 * @return
 */
protected List<ModuleToInstall> getModulesToBeInstalled(){
  List<ModuleToInstall> theInputList=tableViewerCreator.getInputList();
  List<ModuleToInstall> toInstall=new ArrayList<ModuleToInstall>();
  for (  ModuleToInstall module : theInputList) {
    if (!MavenConstants.DOWNLOAD_MANUAL.equals(module.getDistribution()) && !jarsInstalledSuccuss.contains(module.getName()) && ELibraryInstallStatus.INSTALLED != ModuleStatusProvider.getStatusMap().get(module.getMavenUri())) {
      toInstall.add(module);
    }
  }
  return toInstall;
}",0.9113475177304964
125490,"private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
            final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
            statusMap.put(mvnUri,ELibraryInstallStatus.INSTALLED);
            ModuleStatusProvider.getDeployStatusMap().put(mvnUri,ELibraryInstallStatus.DEPLOYED);
          }
        }
 else {
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
          final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
          statusMap.put(module.getMavenUri(),ELibraryInstallStatus.INSTALLED);
          ModuleStatusProvider.getDeployStatusMap().put(module.getMavenUri(),ELibraryInstallStatus.DEPLOYED);
        }
        installedModules.add(module.getName());
      }
 catch (      Exception e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(new Exception(""String_Node_Str"" + module.getName() + ""String_Node_Str""));
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!installedModules.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
  }
}","private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            if (ELibraryInstallStatus.INSTALLED == ModuleStatusProvider.getStatusMap().get(mvnUri)) {
              continue;
            }
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
          }
        }
 else {
          if (ELibraryInstallStatus.INSTALLED == ModuleStatusProvider.getStatusMap().get(module.getMavenUri())) {
            continue;
          }
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
        }
        installedModules.add(module.getName());
      }
 catch (      Exception e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(new Exception(""String_Node_Str"" + module.getName() + ""String_Node_Str"",e));
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!installedModules.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
  }
}",0.8062780269058296
125491,"@Override public void download(URL url,File desc) throws Exception {
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  File tempFolder=null;
  try {
    TalendLibsServerManager manager=TalendLibsServerManager.getInstance();
    final NexusServerBean talendlibServer=manager.getLibrariesNexusServer();
    String mavenUri=url.toExternalForm();
    MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mavenUri);
    if (parseMvnUrl != null) {
      String reletivePath=PomUtil.getArtifactPath(parseMvnUrl);
      String tempPath=getTmpFolderPath();
      tempFolder=new File(tempPath + File.separator + File.createTempFile(""String_Node_Str"",""String_Node_Str"").getName());
      if (tempFolder.exists()) {
        tempFolder.delete();
      }
      tempFolder.mkdirs();
      String name=parseMvnUrl.getArtifactId();
      String type=parseMvnUrl.getType();
      if (type == null || ""String_Node_Str"".equals(type)) {
        type=MavenConstants.PACKAGING_JAR;
      }
      name=name + ""String_Node_Str"" + type;
      File destination=new File(tempFolder,name);
      HttpURLConnection connection=getHttpURLConnection(talendlibServer.getServer(),talendlibServer.getRepositoryId(),reletivePath,talendlibServer.getUserName(),talendlibServer.getPassword());
      InputStream inputStream=connection.getInputStream();
      bis=new BufferedInputStream(inputStream);
      bos=new BufferedOutputStream(new FileOutputStream(destination));
      int contentLength=connection.getContentLength();
      fireDownloadStart(contentLength);
      int bytesDownloaded=0;
      byte[] buf=new byte[BUFFER_SIZE];
      int bytesRead=-1;
      while ((bytesRead=bis.read(buf)) != -1) {
        bos.write(buf,0,bytesRead);
        fireDownloadProgress(bytesRead);
        bytesDownloaded+=bytesRead;
        if (isCancel()) {
          return;
        }
      }
      bos.flush();
      bos.close();
      if (bytesDownloaded == contentLength) {
        ArtifactsDeployer deployer=new ArtifactsDeployer();
        deployer.deployToLocalMaven(destination.getAbsolutePath(),mavenUri);
      }
    }
    fireDownloadComplete();
  }
  finally {
    if (bis != null) {
      bis.close();
    }
    if (bos != null) {
      bos.close();
    }
    if (tempFolder != null) {
      FilesUtils.deleteFile(tempFolder,true);
    }
  }
}","@Override public void download(URL url,File desc) throws Exception {
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  File tempFolder=null;
  try {
    TalendLibsServerManager manager=TalendLibsServerManager.getInstance();
    final NexusServerBean talendlibServer=manager.getLibrariesNexusServer();
    String mavenUri=url.toExternalForm();
    MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(mavenUri);
    if (parseMvnUrl != null) {
      String reletivePath=PomUtil.getArtifactPath(parseMvnUrl);
      String tempPath=getTmpFolderPath();
      tempFolder=new File(tempPath + File.separator + File.createTempFile(""String_Node_Str"",""String_Node_Str"").getName());
      if (tempFolder.exists()) {
        tempFolder.delete();
      }
      tempFolder.mkdirs();
      String name=parseMvnUrl.getArtifactId();
      String type=parseMvnUrl.getType();
      if (type == null || ""String_Node_Str"".equals(type)) {
        type=MavenConstants.PACKAGING_JAR;
      }
      name=name + ""String_Node_Str"" + type;
      File destination=new File(tempFolder,name);
      HttpURLConnection connection=getHttpURLConnection(talendlibServer.getServer(),talendlibServer.getRepositoryId(),reletivePath,talendlibServer.getUserName(),talendlibServer.getPassword());
      InputStream inputStream=connection.getInputStream();
      bis=new BufferedInputStream(inputStream);
      bos=new BufferedOutputStream(new FileOutputStream(destination));
      int contentLength=connection.getContentLength();
      fireDownloadStart(contentLength);
      int bytesDownloaded=0;
      byte[] buf=new byte[BUFFER_SIZE];
      int bytesRead=-1;
      while ((bytesRead=bis.read(buf)) != -1) {
        bos.write(buf,0,bytesRead);
        fireDownloadProgress(bytesRead);
        bytesDownloaded+=bytesRead;
        if (isCancel()) {
          return;
        }
      }
      bos.flush();
      bos.close();
      if (bytesDownloaded == contentLength) {
        ArtifactsDeployer deployer=new ArtifactsDeployer();
        deployer.deployToLocalMaven(destination.getAbsolutePath(),mavenUri);
        final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
        statusMap.put(mavenUri,ELibraryInstallStatus.INSTALLED);
        ModuleStatusProvider.getDeployStatusMap().put(mavenUri,ELibraryInstallStatus.DEPLOYED);
      }
    }
    fireDownloadComplete();
  }
  finally {
    if (bis != null) {
      bis.close();
    }
    if (bos != null) {
      bos.close();
    }
    if (tempFolder != null) {
      FilesUtils.deleteFile(tempFolder,true);
    }
  }
}",0.9477551020408164
125492,"/** 
 * DOC zshen Comment method ""isComeFromRefrenceProject"".
 * @return
 */
private static boolean isComeFromRefrenceProject(Connection dataProvider){
  String currentResourceProjectName=dataProvider.eResource().getURI().segment(1);
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  boolean isLocal=project.getEmfProject().isLocal();
  boolean isReference=project.getEmfProject().isReference();
  EList<ProjectReferenceImpl> referencedProjects=project.getEmfProject().getReferencedProjects();
  if (isLocal || isReference) {
    return false;
  }
  if (referencedProjects.size() > 0) {
    for (    ProjectReferenceImpl projectRef : referencedProjects) {
      String label=projectRef.getReferencedProject().getLabel();
      if (currentResourceProjectName.toUpperCase().equals(label.toUpperCase())) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * DOC zshen Comment method ""isComeFromRefrenceProject"".
 * @return
 */
public static boolean isComeFromRefrenceProject(Connection dataProvider){
  String currentResourceProjectName=dataProvider.eResource().getURI().segment(1);
  RepositoryContext repositoryContext=(RepositoryContext)org.talend.core.runtime.CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  Project project=repositoryContext.getProject();
  boolean isLocal=project.getEmfProject().isLocal();
  boolean isReference=project.getEmfProject().isReference();
  EList<ProjectReferenceImpl> referencedProjects=project.getEmfProject().getReferencedProjects();
  if (isLocal || isReference) {
    return false;
  }
  if (referencedProjects.size() > 0) {
    for (    ProjectReferenceImpl projectRef : referencedProjects) {
      String label=projectRef.getReferencedProject().getLabel();
      if (currentResourceProjectName.toUpperCase().equals(label.toUpperCase())) {
        return true;
      }
    }
  }
  return false;
}",0.9946679592825982
125493,"/** 
 */
protected ATreeNode(){
  children=new ArrayList();
}","/** 
 */
protected ATreeNode(){
  children=new ArrayList();
  if (NodeCreationObserver.isRunning()) {
    NodeCreationObserver.add(this);
  }
}",0.5980392156862745
125494,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ATreeNode other=(ATreeNode)obj;
  if (this.dataType == null) {
    if (other.dataType != null) {
      return false;
    }
  }
 else   if (!this.dataType.equals(other.dataType)) {
    return false;
  }
  if (this.originalDataType == null) {
    if (other.originalDataType != null) {
      return false;
    }
  }
 else   if (!this.originalDataType.equals(other.originalDataType)) {
    return false;
  }
  if (this.type != other.type) {
    return false;
  }
  if (this.value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!this.value.equals(other.value)) {
    return false;
  }
  if (!this.children.equals(other.children)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ATreeNode other=(ATreeNode)obj;
  if (this.dataType == null) {
    if (other.dataType != null) {
      return false;
    }
  }
 else   if (!this.dataType.equals(other.dataType)) {
    return false;
  }
  if (this.originalDataType == null) {
    if (other.originalDataType != null) {
      return false;
    }
  }
 else   if (!this.originalDataType.equals(other.originalDataType)) {
    return false;
  }
  if (this.type != other.type) {
    return false;
  }
  if (this.value == null) {
    if (other.value != null) {
      return false;
    }
  }
 else   if (!this.value.equals(other.value)) {
    return false;
  }
  return true;
}",0.9435718440954044
125495,"public static FOXTreeNode cloneATreeNode(ATreeNode treeNode,String currentPath,boolean isXsd){
  FOXTreeNode node=null;
  if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
    node=new Attribute();
  }
 else {
    node=new Element();
  }
  if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
    node=new NameSpaceNode();
    node.setLabel(treeNode.getDataType());
    node.setDefaultValue((String)treeNode.getValue());
  }
 else {
    node.setLabel(treeNode.getValue().toString());
    node.setChoice(treeNode.isChoice());
    node.setSubstitution(treeNode.isSubstitution());
    node.setOptional(treeNode.isOptional());
    node.getUniqueNames().clear();
    node.getUniqueNames().addAll(treeNode.getUniqueNames());
  }
  if (isXsd) {
    MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
    String originalDataType=treeNode.getOriginalDataType();
    if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
      originalDataType=""String_Node_Str"" + originalDataType;
    }
    node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
  }
 else {
    node.setDataType(treeNode.getDataType());
  }
  node.setDataMaxLength(treeNode.getDataMaxLength());
  node.setPrecisionValue(treeNode.getPrecisionValue());
  Object[] children=treeNode.getChildren();
  if (children != null) {
    for (    Object element : children) {
      if (element instanceof ATreeNode) {
        ATreeNode child=(ATreeNode)element;
        String newPath=currentPath + ""String_Node_Str"";
        if (child.getValue() instanceof String) {
          String elementName=(String)child.getValue() + ""String_Node_Str"" + child.getDataType()+ ""String_Node_Str"";
          if (currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"") && isXsd) {
            continue;
          }
          newPath+=elementName;
        }
 else {
          newPath+=""String_Node_Str"";
        }
        FOXTreeNode foxChild=cloneATreeNode(child,newPath,isXsd);
        node.addChild(foxChild);
      }
    }
  }
  return node;
}","public static FOXTreeNode cloneATreeNode(ATreeNode aNode,boolean isXsd){
  List<ATreeNode> aNodes=NodeCreationObserver.getList();
  FOXTreeNode rootFNode=null;
  for (int i=0; i < aNodes.size(); i++) {
    ATreeNode treeNode=aNodes.get(i);
    if (isXsd && treeNode.getValue() instanceof String) {
      String currentPath=treeNode.getValue() + ""String_Node_Str"" + treeNode.getDataType()+ ""String_Node_Str"";
      if (treeNode.getParent() != null) {
        String parentPath=""String_Node_Str"" + treeNode.getParent().getValue() + ""String_Node_Str""+ treeNode.getParent().getDataType()+ ""String_Node_Str"";
        if (parentPath.contains(""String_Node_Str"" + currentPath + ""String_Node_Str"")) {
          continue;
        }
      }
    }
    FOXTreeNode node=null;
    if (treeNode.getType() == ATreeNode.ATTRIBUTE_TYPE) {
      node=new Attribute();
    }
 else {
      node=new Element();
    }
    if (treeNode.getType() == ATreeNode.NAMESPACE_TYPE) {
      node=new NameSpaceNode();
      node.setLabel(treeNode.getDataType());
      node.setDefaultValue((String)treeNode.getValue());
    }
 else {
      node.setLabel(treeNode.getValue() == null ? null : treeNode.getValue().toString());
      node.setChoice(treeNode.isChoice());
      node.setSubstitution(treeNode.isSubstitution());
      node.setOptional(treeNode.isOptional());
      node.getUniqueNames().clear();
      node.getUniqueNames().addAll(treeNode.getUniqueNames());
    }
    if (isXsd) {
      MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
      String originalDataType=treeNode.getOriginalDataType();
      if (originalDataType != null && !originalDataType.startsWith(""String_Node_Str"")) {
        originalDataType=""String_Node_Str"" + originalDataType;
      }
      node.setDataType(retriever.getDefaultSelectedTalendType(originalDataType));
    }
 else {
      node.setDataType(treeNode.getDataType());
    }
    node.setDataMaxLength(treeNode.getDataMaxLength());
    node.setPrecisionValue(treeNode.getPrecisionValue());
    if (treeNode.getFoxTreeNode() == null) {
      treeNode.setFoxTreeNode(node);
    }
    if (treeNode.getParent() != null && treeNode.getParent().getFoxTreeNode() != null) {
      ((FOXTreeNode)treeNode.getParent().getFoxTreeNode()).addChild(node);
    }
  }
  for (  ATreeNode treeNode : aNodes) {
    FOXTreeNode fNode=(FOXTreeNode)treeNode.getFoxTreeNode();
    if (treeNode.getParent() != null && fNode.getParent() == null) {
      ((FOXTreeNode)treeNode.getParent().getFoxTreeNode()).addChild(fNode);
    }
  }
  rootFNode=(FOXTreeNode)aNode.getFoxTreeNode();
  return rootFNode;
}",0.562420651713923
125496,"public static List<FOXTreeNode> getFoxTreeNodes(String filePath,String selectedEntity,boolean forMDM){
  List<String> attList=new ArrayList<String>();
  attList.add(selectedEntity);
  List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
  try {
    XSDSchema xsdSchema=TreeUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
    ATreeNode selectedNode=null;
    if (!rootNodes.isEmpty()) {
      for (      Object obj : rootNodes) {
        ATreeNode node=(ATreeNode)obj;
        if (node.getValue() != null && node.getValue().equals(selectedEntity)) {
          selectedNode=node;
          break;
        }
      }
      if (selectedNode != null) {
        return TreeUtil.getFoxTreeNodesByRootNode(xsdSchema,selectedNode,false);
      }
    }
    if (filePath == null) {
      return list;
    }
    if (selectedEntity == null || ""String_Node_Str"".equals(selectedEntity)) {
      return getFoxTreeNodes(filePath);
    }
 else {
      ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,forMDM,0,attList);
      if (treeNode != null) {
        if (forMDM) {
          if (selectedEntity.equals(treeNode.getValue())) {
            selectedNode=treeNode;
          }
        }
        for (        Object obj : treeNode.getChildren()) {
          if (obj instanceof ATreeNode) {
            ATreeNode node=(ATreeNode)obj;
            if (selectedEntity.equals(node.getValue())) {
              selectedNode=node;
              break;
            }
          }
        }
        if (selectedNode != null) {
          String rootName=""String_Node_Str"";
          if (treeNode.getValue() instanceof String) {
            rootName+=""String_Node_Str"" + treeNode.getValue();
          }
          FOXTreeNode root=cloneATreeNode(treeNode,rootName,XmlUtil.isXSDFile(filePath));
          if (root instanceof Element) {
            root.setParent(null);
            list.add(root);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return list;
}","public static List<FOXTreeNode> getFoxTreeNodes(String filePath,String selectedEntity,boolean forMDM){
  List<String> attList=new ArrayList<String>();
  attList.add(selectedEntity);
  List<FOXTreeNode> list=new ArrayList<FOXTreeNode>();
  try {
    XSDSchema xsdSchema=TreeUtil.getXSDSchema(filePath);
    List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
    ATreeNode selectedNode=null;
    if (!rootNodes.isEmpty()) {
      for (      Object obj : rootNodes) {
        ATreeNode node=(ATreeNode)obj;
        if (node.getValue() != null && node.getValue().equals(selectedEntity)) {
          selectedNode=node;
          break;
        }
      }
      if (selectedNode != null) {
        return TreeUtil.getFoxTreeNodesByRootNode(xsdSchema,selectedNode,false);
      }
    }
    if (filePath == null) {
      return list;
    }
    if (selectedEntity == null || ""String_Node_Str"".equals(selectedEntity)) {
      return getFoxTreeNodes(filePath);
    }
 else {
      ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,forMDM,0,attList);
      if (treeNode != null) {
        if (forMDM) {
          if (selectedEntity.equals(treeNode.getValue())) {
            selectedNode=treeNode;
          }
        }
        for (        Object obj : treeNode.getChildren()) {
          if (obj instanceof ATreeNode) {
            ATreeNode node=(ATreeNode)obj;
            if (selectedEntity.equals(node.getValue())) {
              selectedNode=node;
              break;
            }
          }
        }
        if (selectedNode != null) {
          FOXTreeNode root=cloneATreeNode(treeNode,XmlUtil.isXSDFile(filePath));
          if (root instanceof Element) {
            root.setParent(null);
            list.add(root);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  return list;
}",0.9534412955465588
125497,"private static void getFoxTreeNodesForXmlMap(String filePath,List<FOXTreeNode> list) throws OdaException, URISyntaxException, IOException {
  ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,0);
  String rootName=""String_Node_Str"";
  if (treeNode.getValue() instanceof String) {
    rootName+=""String_Node_Str"" + treeNode.getValue();
  }
  FOXTreeNode root=cloneATreeNode(treeNode,rootName,XmlUtil.isXSDFile(filePath));
  if (root instanceof Element) {
    if (root instanceof Element) {
      root=((Element)root).getElementChildren().get(0);
      root.setParent(null);
      list.add(root);
      if (XmlUtil.isXMLFile(filePath)) {
        List<? extends FOXTreeNode> nameSpaceChildren=((Element)root).getNameSpaceChildren();
        for (        FOXTreeNode nameSpaceChild : nameSpaceChildren) {
          if (nameSpaceChild instanceof NameSpaceNode) {
            nameSpaceChild.setDataType(JavaDataTypeHelper.getTalendTypeOfValue(nameSpaceChild.getDataType()));
          }
        }
      }
    }
  }
}","private static void getFoxTreeNodesForXmlMap(String filePath,List<FOXTreeNode> list) throws OdaException, URISyntaxException, IOException {
  ATreeNode treeNode=SchemaPopulationUtil.getSchemaTree(filePath,true,0);
  FOXTreeNode root=cloneATreeNode(treeNode,XmlUtil.isXSDFile(filePath));
  if (root instanceof Element) {
    if (root instanceof Element) {
      root=((Element)root).getElementChildren().get(0);
      root.setParent(null);
      list.add(root);
      if (XmlUtil.isXMLFile(filePath)) {
        List<? extends FOXTreeNode> nameSpaceChildren=((Element)root).getNameSpaceChildren();
        for (        FOXTreeNode nameSpaceChild : nameSpaceChildren) {
          if (nameSpaceChild instanceof NameSpaceNode) {
            nameSpaceChild.setDataType(JavaDataTypeHelper.getTalendTypeOfValue(nameSpaceChild.getDataType()));
          }
        }
      }
    }
  }
}",0.9201680672268908
125498,"public void initialize(ERepositoryObjectType itemType) throws PersistenceException {
  if (!types.contains(itemType)) {
    types.add(itemType);
    List<IRepositoryViewObject> list=factory.getAll(itemType,true,false);
    List<IRepositoryViewObject> newList=new ArrayList<IRepositoryViewObject>();
    for (    IRepositoryViewObject obj : list) {
      IRepositoryViewObject newObject=new RepositoryViewObject(obj.getProperty(),true);
      List<IRepositoryViewObject> items=cache.get(newObject.getId());
      if (items == null) {
        items=new ArrayList<IRepositoryViewObject>();
        cache.put(newObject.getId(),items);
      }
      items.add(newObject);
      newList.add(newObject);
    }
    itemsFromRepository.put(itemType,newList);
  }
}","public void initialize(ERepositoryObjectType itemType) throws PersistenceException {
  if (!types.contains(itemType)) {
    types.add(itemType);
    List<IRepositoryViewObject> list=factory.getAll(itemType,true,false);
    if (list == null || list.isEmpty()) {
      ERepositoryObjectType newRepType=getNewRepType(itemType);
      if (newRepType != null) {
        list=factory.getAll(newRepType,true,false);
      }
    }
    List<IRepositoryViewObject> newList=new ArrayList<IRepositoryViewObject>();
    for (    IRepositoryViewObject obj : list) {
      IRepositoryViewObject newObject=new RepositoryViewObject(obj.getProperty(),true);
      List<IRepositoryViewObject> items=cache.get(newObject.getId());
      if (items == null) {
        items=new ArrayList<IRepositoryViewObject>();
        cache.put(newObject.getId(),items);
      }
      items.add(newObject);
      newList.add(newObject);
    }
    itemsFromRepository.put(itemType,newList);
  }
}",0.8809801633605601
125499,"/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem importItem,boolean overwrite){
  try {
    Item item=importItem.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    List<IRepositoryViewObject> repViewObjectList=null;
    List<ERepositoryObjectType> allTypesOfProcess=ERepositoryObjectType.getAllTypesOfProcess();
    if (allTypesOfProcess.contains(itemType)) {
      for (      ERepositoryObjectType curProcessType : allTypesOfProcess) {
        repObjectcache.initialize(curProcessType);
      }
      Map<ERepositoryObjectType,List<IRepositoryViewObject>> itemsMap=repObjectcache.getItemsFromRepository();
      repViewObjectList=new LinkedList<IRepositoryViewObject>();
      for (      ERepositoryObjectType curProcessType : allTypesOfProcess) {
        List<IRepositoryViewObject> itemList=itemsMap.get(curProcessType);
        if (itemList != null) {
          repViewObjectList.addAll(itemList);
        }
      }
    }
 else {
      repObjectcache.initialize(itemType);
      repViewObjectList=repObjectcache.getItemsFromRepository().get(itemType);
    }
    Iterator<IRepositoryViewObject> repoViewObjectIter=repViewObjectList.iterator();
    boolean isSameRepositoryType=true;
    while (repoViewObjectIter.hasNext()) {
      IRepositoryViewObject current=repoViewObjectIter.next();
      final Property property=importItem.getProperty();
      if (property != null) {
        if (isSameName(importItem,current)) {
          itemWithSameNameObj=current;
          if (importItem.getRepositoryType() == current.getRepositoryObjectType()) {
            isSameRepositoryType=true;
          }
 else {
            isSameRepositoryType=false;
          }
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        importItem.setState(State.ID_EXISTED);
        importItem.setExistingItemWithSameId(itemWithSameIdObj);
      }
    }
 else {
      if (idAvailable) {
        importItem.setState(State.NAME_EXISTED);
        if (overwrite && isSameRepositoryType) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              importItem.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        importItem.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (isSameRepositoryType) {
        if (!overwrite) {
          importItem.addError(Messages.getString(""String_Node_Str""));
        }
      }
 else {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && importItem.getState() == State.NAME_AND_ID_EXISTED && isSameRepositoryType) {
      if (checkIfLocked(importItem)) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + importItem.getPath(),e);
  }
  return true;
}","/** 
 * check the item is valid or not。
 */
public boolean checkItem(ResourcesManager resManager,ImportItem importItem,boolean overwrite){
  try {
    Item item=importItem.getItem();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(item);
    if (itemType == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    if (item.getState() == null) {
      importItem.addError(Messages.getString(""String_Node_Str""));
      return false;
    }
    final RepositoryObjectCache repObjectcache=ImportCacheHelper.getInstance().getRepObjectcache();
    IRepositoryViewObject itemWithSameIdObj=null;
    IRepositoryViewObject itemWithSameNameObj=null;
    List<IRepositoryViewObject> repViewObjectList=null;
    List<ERepositoryObjectType> allTypesOfProcess=ERepositoryObjectType.getAllTypesOfProcess();
    if (allTypesOfProcess.contains(itemType)) {
      for (      ERepositoryObjectType curProcessType : allTypesOfProcess) {
        repObjectcache.initialize(curProcessType);
      }
      Map<ERepositoryObjectType,List<IRepositoryViewObject>> itemsMap=repObjectcache.getItemsFromRepository();
      repViewObjectList=new LinkedList<IRepositoryViewObject>();
      for (      ERepositoryObjectType curProcessType : allTypesOfProcess) {
        List<IRepositoryViewObject> itemList=itemsMap.get(curProcessType);
        if (itemList != null) {
          repViewObjectList.addAll(itemList);
        }
      }
    }
 else {
      repObjectcache.initialize(itemType);
      repViewObjectList=repObjectcache.getItemsFromRepository().get(itemType);
    }
    Iterator<IRepositoryViewObject> repoViewObjectIter=repViewObjectList.iterator();
    boolean isSameRepositoryType=true;
    while (repoViewObjectIter.hasNext()) {
      IRepositoryViewObject current=repoViewObjectIter.next();
      final Property property=importItem.getProperty();
      if (property != null) {
        if (isSameName(importItem,current)) {
          itemWithSameNameObj=current;
          isSameRepositoryType=isSameRepType(current.getRepositoryObjectType(),importItem.getRepositoryType());
        }
        if (property.getId() != null && property.getId().equals(current.getId())) {
          itemWithSameIdObj=current;
        }
      }
    }
    boolean nameAvailable=itemWithSameNameObj == null;
    boolean idAvailable=itemWithSameIdObj == null;
    if (nameAvailable) {
      if (!idAvailable) {
        importItem.setState(State.ID_EXISTED);
        importItem.setExistingItemWithSameId(itemWithSameIdObj);
      }
    }
 else {
      if (idAvailable) {
        importItem.setState(State.NAME_EXISTED);
        if (overwrite && isSameRepositoryType) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
          if (itemWithSameNameObj != null) {
            ERepositoryStatus status=itemWithSameNameObj.getRepositoryStatus();
            if (status == ERepositoryStatus.LOCK_BY_OTHER || status == ERepositoryStatus.LOCK_BY_USER) {
              importItem.addError(Messages.getString(""String_Node_Str""));
            }
          }
        }
      }
 else {
        importItem.setState(State.NAME_AND_ID_EXISTED);
        if (overwrite) {
          importItem.setExistingItemWithSameId(itemWithSameNameObj);
        }
      }
      if (isSameRepositoryType) {
        if (!overwrite) {
          importItem.addError(Messages.getString(""String_Node_Str""));
        }
      }
 else {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
    if (overwrite && importItem.getState() == State.NAME_AND_ID_EXISTED && isSameRepositoryType) {
      if (checkIfLocked(importItem)) {
        importItem.addError(Messages.getString(""String_Node_Str""));
      }
    }
  }
 catch (  PersistenceException e) {
    log.error(""String_Node_Str"" + importItem.getPath(),e);
  }
  return true;
}",0.9795081967213116
125500,"/** 
 * ggu Comment method ""addContextForElementParameters"".
 * @param process
 * @param connItem
 * @param elementParameters
 * @param category
 * @param checked
 */
private static void addContextForElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  if (connItem == null || elementParameters == null || process == null) {
    return;
  }
  if (isHadoopSubItem(connItem)) {
    addContextForHadoopElementParameters(process,connItem,elementParameters,category,ignoreContextMode);
    return;
  }
  Connection connection=connItem.getConnection();
  if (connection != null && connection.isContextMode()) {
    Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
    if (neededVars != null && !neededVars.isEmpty()) {
      ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
      if (contextItem != null) {
        Set<String> addedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
        if (addedVars != null && !addedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
          boolean added=false;
          if (ignoreContextMode) {
            addContextVarForJob(process,contextItem,addedVars);
            added=true;
          }
 else {
            Map<String,Set<String>> addedVarsMap=new HashMap<String,Set<String>>();
            addedVarsMap.put(connItem.getProperty().getId(),addedVars);
            if (showContextdialog(process,contextItem,process.getContextManager(),addedVarsMap,addedVars)) {
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}","/** 
 * ggu Comment method ""addContextForElementParameters"".
 * @param process
 * @param connItem
 * @param elementParameters
 * @param category
 * @param checked
 */
private static void addContextForElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  if (connItem == null || elementParameters == null || process == null) {
    return;
  }
  if (isHadoopSubItem(connItem)) {
    addContextForHadoopElementParameters(process,connItem,elementParameters,category,ignoreContextMode);
    return;
  }
  Connection connection=connItem.getConnection();
  if (connection != null && connection.isContextMode()) {
    Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
    if (neededVars != null && !neededVars.isEmpty()) {
      ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
      if (contextItem != null) {
        Set<String> addedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
        if (addedVars != null && !addedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
          AtomicBoolean added=new AtomicBoolean();
          if (ignoreContextMode) {
            addContextVarForJob(process,contextItem,addedVars);
            added.set(true);
          }
 else {
            Map<String,Set<String>> addedVarsMap=new HashMap<String,Set<String>>();
            addedVarsMap.put(connItem.getProperty().getId(),addedVars);
            PlatformUI.getWorkbench().getDisplay().syncExec(new Runnable(){
              @Override public void run(){
                if (showContextdialog(process,contextItem,process.getContextManager(),addedVarsMap,addedVars)) {
                  added.set(true);
                }
              }
            }
);
          }
          if (added.get()) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
                @Override public void run(){
                  service.switchToCurContextsView();
                }
              }
);
            }
          }
        }
      }
    }
  }
}",0.7497282017829963
125501,"public static List<Map<String,Object>> getColumnMappingValue(Connection connection,IMetadataTable metaTable){
  if (connection == null || metaTable == null) {
    return null;
  }
  List<Map<String,Object>> values=new ArrayList<Map<String,Object>>();
  List<IMetadataColumn> columns=metaTable.getListColumns();
  if (connection instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)connection;
    String databaseType=dbConn.getDatabaseType();
    if (EDatabaseTypeName.HBASE.getDisplayName().equals(databaseType)) {
      for (      IMetadataColumn column : columns) {
        Map<String,Object> row=new HashMap<String,Object>();
        row.put(""String_Node_Str"",column.getLabel());
        row.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getAdditionalField().get(""String_Node_Str"")));
        values.add(row);
      }
    }
  }
  return values;
}","public static List<Map<String,Object>> getColumnMappingValue(Connection connection,IMetadataTable metaTable){
  if (connection == null || metaTable == null) {
    return null;
  }
  List<Map<String,Object>> values=new ArrayList<Map<String,Object>>();
  List<IMetadataColumn> columns=metaTable.getListColumns();
  if (connection instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)connection;
    String databaseType=dbConn.getDatabaseType();
    if (EDatabaseTypeName.HBASE.getDisplayName().equals(databaseType) || EDatabaseTypeName.MAPRDB.getDisplayName().equals(databaseType)) {
      for (      IMetadataColumn column : columns) {
        Map<String,Object> row=new HashMap<String,Object>();
        row.put(""String_Node_Str"",column.getLabel());
        row.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getAdditionalField().get(""String_Node_Str"")));
        values.add(row);
      }
    }
  }
  return values;
}",0.9642470205850489
125502,"public Object getTypedValue(Property property,Object rawValue){
  if (GenericTypeUtils.isSchemaType(property)) {
    return rawValue;
  }
  String stringValue=String.valueOf(rawValue);
  if (GenericTypeUtils.isBooleanType(property)) {
    return new Boolean(stringValue);
  }
  if (GenericTypeUtils.isIntegerType(property) && rawValue != null && !stringValue.isEmpty()) {
    try {
      return Integer.valueOf(stringValue);
    }
 catch (    Exception e) {
      return 0;
    }
  }
  if (GenericTypeUtils.isEnumType(property)) {
    List<?> possibleValues=property.getPossibleValues();
    if (possibleValues != null) {
      Object firstValue=null;
      if (!possibleValues.isEmpty()) {
        firstValue=possibleValues.get(0);
      }
      String stringStoredValue=TalendQuoteUtils.removeQuotes(stringValue);
      for (      Object possibleValue : possibleValues) {
        if (possibleValue.toString().equals(stringStoredValue)) {
          return possibleValue;
        }
      }
      if (firstValue != null) {
        return firstValue;
      }
    }
  }
  if (GenericTypeUtils.isStringType(property)) {
    return TalendQuoteUtils.removeQuotes(StringEscapeUtils.unescapeJava(stringValue));
  }
  return rawValue;
}","public Object getTypedValue(Property property,Object rawValue){
  if (GenericTypeUtils.isSchemaType(property)) {
    return rawValue;
  }
  String stringValue=String.valueOf(rawValue);
  if (GenericTypeUtils.isBooleanType(property)) {
    return new Boolean(stringValue);
  }
  if (GenericTypeUtils.isIntegerType(property) && rawValue != null) {
    if (stringValue.isEmpty()) {
      return null;
    }
    try {
      return Integer.valueOf(stringValue);
    }
 catch (    Exception e) {
      return 0;
    }
  }
  if (GenericTypeUtils.isEnumType(property)) {
    List<?> possibleValues=property.getPossibleValues();
    if (possibleValues != null) {
      Object firstValue=null;
      if (!possibleValues.isEmpty()) {
        firstValue=possibleValues.get(0);
      }
      String stringStoredValue=TalendQuoteUtils.removeQuotes(stringValue);
      for (      Object possibleValue : possibleValues) {
        if (possibleValue.toString().equals(stringStoredValue)) {
          return possibleValue;
        }
      }
      if (firstValue != null) {
        return firstValue;
      }
    }
  }
  if (GenericTypeUtils.isStringType(property)) {
    return TalendQuoteUtils.removeQuotes(StringEscapeUtils.unescapeJava(stringValue));
  }
  return rawValue;
}",0.9831053901850362
125503,"@Test public void testGetTypedValue(){
  TestProperties props=(TestProperties)new TestProperties(""String_Node_Str"").init();
  Object value=evalutor.getTypedValue(props.stringProp,""String_Node_Str"");
  assertEquals(""String_Node_Str"",value);
  value=evalutor.getTypedValue(props.booleanProp,""String_Node_Str"");
  assertEquals(true,value);
  value=evalutor.getTypedValue(props.integerProp,""String_Node_Str"");
  assertEquals(1,value);
  value=evalutor.getTypedValue(props.integerProp,""String_Node_Str"");
  assertEquals(0,value);
  value=evalutor.getTypedValue(props.enumProp,""String_Node_Str"");
  assertEquals(EnumType.E1,value);
  value=evalutor.getTypedValue(props.enumProp,""String_Node_Str"");
  assertEquals(EnumType.E2,value);
}","@Test public void testGetTypedValue(){
  TestProperties props=(TestProperties)new TestProperties(""String_Node_Str"").init();
  Object value=evalutor.getTypedValue(props.stringProp,""String_Node_Str"");
  assertEquals(""String_Node_Str"",value);
  value=evalutor.getTypedValue(props.booleanProp,""String_Node_Str"");
  assertEquals(true,value);
  value=evalutor.getTypedValue(props.integerProp,""String_Node_Str"");
  assertEquals(1,value);
  value=evalutor.getTypedValue(props.integerProp,""String_Node_Str"");
  assertEquals(0,value);
  value=evalutor.getTypedValue(props.integerProp,""String_Node_Str"");
  assertEquals(null,value);
  value=evalutor.getTypedValue(props.enumProp,""String_Node_Str"");
  assertEquals(EnumType.E1,value);
  value=evalutor.getTypedValue(props.enumProp,""String_Node_Str"");
  assertEquals(EnumType.E2,value);
}",0.9375402446877013
125504,"public synchronized void checkDeletedItems(){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    for (    ImportItem itemRecord : importedItemRecords) {
      if (itemRecord.isValid() && itemRecord.getItemId() != null) {
        IRepositoryViewObject obj=factory.getLastVersion(itemRecord.getItemId());
        Item item=obj.getProperty().getItem();
        ERepositoryStatus status=factory.getStatus(item);
        if (status != null && status == ERepositoryStatus.DELETED) {
          RecycleBinManager.getInstance().addToRecycleBin(ProjectManager.getInstance().getCurrentProject(),item);
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}","public synchronized void checkDeletedItems(){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  try {
    for (    ImportItem itemRecord : importedItemRecords) {
      if (itemRecord.isValid() && itemRecord.getItemId() != null) {
        IRepositoryViewObject obj=factory.getLastVersion(itemRecord.getItemId());
        if (obj != null && obj.getProperty() != null) {
          Item item=obj.getProperty().getItem();
          ERepositoryStatus status=factory.getStatus(item);
          if (status != null && status == ERepositoryStatus.DELETED) {
            RecycleBinManager.getInstance().addToRecycleBin(ProjectManager.getInstance().getCurrentProject(),item);
          }
        }
      }
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
}",0.93717277486911
125505,"private Map<ImportItem,List<ImportItem>> getTestCaseItemMap(List<ImportItem> items){
  Map<ImportItem,List<ImportItem>> map=new HashMap<ImportItem,List<ImportItem>>();
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
  }
  if (items != null && testContainerService != null) {
    Map<String,ImportItem> itemMap=new HashMap<String,ImportItem>();
    for (    ImportItem ir : items) {
      if (ir.getItem() != null && !testContainerService.isTestContainerItem(ir.getItem())) {
        itemMap.put(ir.getProperty().getId(),ir);
        map.put(ir,new ArrayList<ImportItem>());
      }
    }
    Set<String> keys=itemMap.keySet();
    for (    String key : keys) {
      Item item=itemMap.get(key).getItem();
      if (item == null) {
        continue;
      }
      List<ImportItem> children=new ArrayList<ImportItem>();
      for (      ImportItem child : items) {
        Item childItem=child.getItem();
        if (childItem == null) {
          continue;
        }
        boolean isTestContainer=testContainerService.isTestContainerItem(childItem);
        if (isTestContainer) {
          String path=childItem.getState().getPath();
          if (path != null && path.contains(""String_Node_Str"")) {
            int index=path.indexOf(""String_Node_Str"");
            path=path.substring(index + 1);
            if (path.equals(item.getProperty().getId())) {
              children.add(child);
            }
          }
        }
      }
      map.put(itemMap.get(key),children);
    }
  }
  return map;
}","private Map<ImportItem,List<ImportItem>> getTestCaseItemMap(List<ImportItem> items){
  Map<ImportItem,List<ImportItem>> map=new HashMap<ImportItem,List<ImportItem>>();
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
  }
  if (items != null && testContainerService != null) {
    Map<String,List<ImportItem>> itemMap=new HashMap<String,List<ImportItem>>();
    for (    ImportItem ir : items) {
      if (ir.getItem() != null && !testContainerService.isTestContainerItem(ir.getItem())) {
        String id=ir.getProperty().getId();
        List<ImportItem> itemList=itemMap.get(id);
        if (itemList == null) {
          itemList=new LinkedList<ImportItem>();
          itemMap.put(id,itemList);
        }
        if (!itemList.contains(ir)) {
          itemList.add(ir);
        }
        map.put(ir,new ArrayList<ImportItem>());
      }
    }
    Set<String> keys=itemMap.keySet();
    for (    String key : keys) {
      List<ImportItem> itemList=itemMap.get(key);
      ImportItem importItem=null;
      Item item=null;
      String version=""String_Node_Str"";
      boolean useLastVersion=true;
      Iterator<ImportItem> iter=itemList.iterator();
      while (iter.hasNext()) {
        ImportItem curImportItem=iter.next();
        Item curItem=curImportItem.getItem();
        String curVersion=curItem.getProperty().getVersion();
        if (item == null) {
          item=curItem;
          version=curVersion;
          importItem=curImportItem;
        }
 else {
          if (curVersion != null && 0 < (curVersion.compareTo(version) * (useLastVersion ? 1 : -1))) {
            item=curItem;
            version=curVersion;
            importItem=curImportItem;
          }
        }
      }
      if (item == null) {
        continue;
      }
      List<ImportItem> children=new ArrayList<ImportItem>();
      for (      ImportItem child : items) {
        Item childItem=child.getItem();
        if (childItem == null) {
          continue;
        }
        boolean isTestContainer=testContainerService.isTestContainerItem(childItem);
        if (isTestContainer) {
          String path=childItem.getState().getPath();
          if (path != null && path.contains(""String_Node_Str"")) {
            int index=path.indexOf(""String_Node_Str"");
            path=path.substring(index + 1);
            if (path.equals(item.getProperty().getId())) {
              children.add(child);
            }
          }
        }
      }
      map.put(importItem,children);
    }
  }
  return map;
}",0.7414634146341463
125506,"private void collectImpalaContextParams(){
  if (isImpalaDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.ImpalaPrincipal,useKerberosForImpala.getSelection());
  }
}","private void collectImpalaContextParams(){
  if (isImpalaDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Login,true);
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.ImpalaPrincipal,useKerberosForImpala.getSelection());
  }
}",0.9364005412719892
125507,"public void expansionStateChanging(ExpansionEvent e){
}","@Override public void expansionStateChanging(ExpansionEvent e){
}",0.9166666666666666
125508,"public void expansionStateChanged(ExpansionEvent e){
  int delta=300;
  if (!e.getState()) {
    delta=-delta;
  }
  Point shellSize=getShell().getSize();
  Point newSize=new Point(shellSize.x,shellSize.y + delta);
  getShell().setSize(newSize);
}","@Override public void expansionStateChanged(ExpansionEvent e){
  int delta=300;
  if (!e.getState()) {
    delta=-delta;
  }
  Point shellSize=getShell().getSize();
  Point newSize=new Point(shellSize.x,shellSize.y + delta);
  getShell().setSize(newSize);
}",0.98015873015873
125509,"@Override protected Control createCustomArea(Composite parent){
  StringWriter stringWriter=new StringWriter();
  ex.printStackTrace(new PrintWriter(stringWriter));
  String exceptionString=stringWriter.toString();
  ExpandableComposite errorComposite=new ExpandableComposite(parent,ExpandableComposite.COMPACT);
  errorComposite.setLayoutData(new GridData(GridData.FILL,GridData.FILL,false,true,1,1));
  errorComposite.setText(Messages.getString(""String_Node_Str""));
  errorComposite.addExpansionListener(new IExpansionListener(){
    public void expansionStateChanged(    ExpansionEvent e){
      int delta=300;
      if (!e.getState()) {
        delta=-delta;
      }
      Point shellSize=getShell().getSize();
      Point newSize=new Point(shellSize.x,shellSize.y + delta);
      getShell().setSize(newSize);
    }
    public void expansionStateChanging(    ExpansionEvent e){
    }
  }
);
  Text text=new Text(errorComposite,SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
  text.setText(exceptionString);
  text.setEditable(false);
  errorComposite.setClient(text);
  return errorComposite;
}","@Override protected Control createCustomArea(Composite parent){
  if (exceptionString == null || exceptionString.isEmpty()) {
    StringWriter stringWriter=new StringWriter();
    ex.printStackTrace(new PrintWriter(stringWriter));
    exceptionString=stringWriter.toString();
  }
  ExpandableComposite errorComposite=new ExpandableComposite(parent,ExpandableComposite.COMPACT);
  errorComposite.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
  errorComposite.setText(Messages.getString(""String_Node_Str""));
  errorComposite.addExpansionListener(new IExpansionListener(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      int delta=300;
      if (!e.getState()) {
        delta=-delta;
      }
      Point shellSize=getShell().getSize();
      Point newSize=new Point(shellSize.x,shellSize.y + delta);
      getShell().setSize(newSize);
    }
    @Override public void expansionStateChanging(    ExpansionEvent e){
    }
  }
);
  Text text=new Text(errorComposite,SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);
  text.setText(exceptionString);
  text.setEditable(false);
  errorComposite.setClient(text);
  return errorComposite;
}",0.9541850220264316
125510,"@Test public void testInitializeAllColumns() throws Exception {
  File file=new File(""String_Node_Str"");
  assertTrue(file.exists());
  MetadataSchema ms=new MetadataSchema();
  List<IMetadataColumn> list=ms.initializeAllColumns(file);
  assertTrue(list.size() == 3);
  IMetadataColumn column1=list.get(0);
  assertEquals(""String_Node_Str"",column1.getLabel());
  assertEquals(""String_Node_Str"",column1.getTalendType());
  IMetadataColumn column2=list.get(1);
  assertEquals(""String_Node_Str"",column2.getLabel());
  assertEquals(""String_Node_Str"",column2.getTalendType());
  IMetadataColumn column3=list.get(2);
  assertEquals(""String_Node_Str"",column3.getLabel());
  assertEquals(""String_Node_Str"",column3.getTalendType());
}","@Test public void testInitializeAllColumns() throws Exception {
  URL xmlURL=FileLocator.find(Platform.getBundle(""String_Node_Str""),new Path(""String_Node_Str""),null);
  if (xmlURL != null) {
    xmlURL=FileLocator.toFileURL(xmlURL);
  }
  File file=new File(xmlURL.getFile());
  assertTrue(file.exists());
  MetadataSchema ms=new MetadataSchema();
  List<IMetadataColumn> list=ms.initializeAllColumns(file);
  assertTrue(list.size() == 3);
  IMetadataColumn column1=list.get(0);
  assertEquals(""String_Node_Str"",column1.getLabel());
  assertEquals(""String_Node_Str"",column1.getTalendType());
  IMetadataColumn column2=list.get(1);
  assertEquals(""String_Node_Str"",column2.getLabel());
  assertEquals(""String_Node_Str"",column2.getTalendType());
  IMetadataColumn column3=list.get(2);
  assertEquals(""String_Node_Str"",column3.getLabel());
  assertEquals(""String_Node_Str"",column3.getTalendType());
}",0.8668310727496917
125511,"protected void verifyConnection4ReturnColumns4DontCreateConnection(Connection conn) throws SQLException {
  verify(conn,times(4)).isClosed();
}","protected void verifyConnection4ReturnColumns4DontCreateConnection(Connection conn) throws SQLException {
  verify(conn,times(2)).isClosed();
}",0.993006993006993
125512,"protected void verifyConnection4ReturnColumns4DontCreateConnection(Connection conn) throws SQLException {
  verify(conn,times(4)).isClosed();
}","protected void verifyConnection4ReturnColumns4DontCreateConnection(Connection conn) throws SQLException {
  verify(conn,times(2)).isClosed();
}",0.993006993006993
125513,"public void buildDeletedItemsTree(RepositoryNode rootNode){
  List<String> folders=RecycleBinManager.getInstance().getDeletedFolders(ProjectManager.getInstance().getCurrentProject());
  Collections.sort(folders);
  for (  String fullPath : folders) {
    String path=null;
    ERepositoryObjectType currentType=null;
    for (    DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
      ERepositoryObjectType objectType=(ERepositoryObjectType)type;
      if (objectType.isResouce() && fullPath.startsWith(objectType.getFolder())) {
        path=fullPath.substring(objectType.getFolder().length() + 1);
        currentType=objectType;
        break;
      }
    }
    if (currentType != null) {
      buildFolders(rootNode,currentType,path,rootNode);
    }
  }
  addDeletedElements(rootNode,rootNode.getChildren());
}","public void buildDeletedItemsTree(RepositoryNode rootNode){
  List<String> folders=RecycleBinManager.getInstance().getDeletedFolders(ProjectManager.getInstance().getCurrentProject());
  Collections.sort(folders);
  for (  String fullPath : folders) {
    String path=null;
    String comparePath=fullPath;
    if (fullPath != null) {
      String[] paths=fullPath.split(""String_Node_Str"");
      if (paths.length > 0) {
        comparePath=paths[0];
      }
    }
    ERepositoryObjectType currentType=null;
    for (    DynaEnum<? extends DynaEnum<?>> type : ERepositoryObjectType.values()) {
      ERepositoryObjectType objectType=(ERepositoryObjectType)type;
      if (objectType.isResouce() && comparePath.equals(objectType.getFolder())) {
        path=fullPath.substring(objectType.getFolder().length() + 1);
        currentType=objectType;
        break;
      }
    }
    if (currentType != null) {
      buildFolders(rootNode,currentType,path,rootNode);
    }
  }
  addDeletedElements(rootNode,rootNode.getChildren());
}",0.8831725616291533
125514,"@Override protected void createButtonsForButtonBar(Composite parent){
  super.createButtonsForButtonBar(parent);
  this.getOKButton().setEnabled(false);
}","@Override protected void createButtonsForButtonBar(Composite parent){
  super.createButtonsForButtonBar(parent);
  checkSelectedItems();
}",0.863013698630137
125515,"/** 
 * DOC talend PastSelectorDialog constructor comment.
 * @param parentShell
 */
public PastSelectorDialog(Shell parentShell,List<IRepositoryViewObject> versions,RepositoryNode sourceNode){
  super(parentShell);
  setShellStyle(getShellStyle() | SWT.RESIZE);
  this.versions=versions;
  this.sourceNode=sourceNode;
}","/** 
 * DOC talend PastSelectorDialog constructor comment.
 * @param parentShell
 */
public PastSelectorDialog(Shell parentShell,List<IRepositoryViewObject> versions,RepositoryNode sourceNode){
  super(parentShell);
  setShellStyle(getShellStyle() | SWT.RESIZE);
  this.versions=versions;
  this.sourceNode=sourceNode;
  init();
}",0.9846153846153848
125516,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  table=new Table(composite,SWT.NONE | SWT.CHECK);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableColumn version=new TableColumn(table,SWT.NONE);
  version.setWidth(100);
  version.setText(""String_Node_Str"");
  TableColumn cretationTime=new TableColumn(table,SWT.NONE);
  cretationTime.setWidth(200);
  cretationTime.setText(""String_Node_Str"");
  TableColumn modificationTime=new TableColumn(table,SWT.NONE);
  modificationTime.setWidth(200);
  modificationTime.setText(""String_Node_Str"");
  for (  IRepositoryViewObject object : versions) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setData(object);
    item.setText(0,object.getVersion());
    item.setText(1,object.getCreationDate().toString());
    if (object.getModificationDate() != null) {
      item.setText(2,object.getModificationDate().toString());
    }
  }
  Composite buttonContainer=new Composite(composite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  buttonContainer.setLayout(layout);
  buttonContainer.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_CENTER));
  selectAll=new Button(buttonContainer,SWT.PUSH);
  selectAll.setText(""String_Node_Str"");
  selectNone=new Button(buttonContainer,SWT.PUSH);
  selectNone.setText(""String_Node_Str"");
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        Property property=((IRepositoryObject)tableItem.getData()).getProperty();
        if (property != null && property.getItem() != null) {
          if (tableItem.getChecked()) {
            selectedVersionItems.add((IRepositoryObject)tableItem.getData());
          }
 else {
            selectedVersionItems.remove(tableItem.getData());
          }
        }
      }
      checkSelectedItems();
    }
  }
);
  selectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (int i=0; i < table.getItemCount(); i++) {
        table.getItem(i).setChecked(true);
        IRepositoryObject data=(IRepositoryObject)table.getItem(i).getData();
        selectedVersionItems.add(data);
      }
      checkSelectedItems();
    }
  }
);
  selectNone.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (int i=0; i < table.getItemCount(); i++) {
        table.getItem(i).setChecked(false);
        selectedVersionItems.remove(table.getItem(i).getData());
      }
      checkSelectedItems();
    }
  }
);
  return composite;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  table=new Table(composite,SWT.NONE | SWT.CHECK);
  table.setLayoutData(new GridData(GridData.FILL_BOTH));
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  TableColumn version=new TableColumn(table,SWT.NONE);
  version.setWidth(100);
  version.setText(""String_Node_Str"");
  TableColumn cretationTime=new TableColumn(table,SWT.NONE);
  cretationTime.setWidth(200);
  cretationTime.setText(""String_Node_Str"");
  TableColumn modificationTime=new TableColumn(table,SWT.NONE);
  modificationTime.setWidth(200);
  modificationTime.setText(""String_Node_Str"");
  for (  IRepositoryViewObject object : versions) {
    TableItem item=new TableItem(table,SWT.NONE);
    item.setData(object);
    item.setText(0,object.getVersion());
    item.setText(1,object.getCreationDate().toString());
    if (object.getModificationDate() != null) {
      item.setText(2,object.getModificationDate().toString());
    }
    if (testParentVersions.contains(object.getVersion())) {
      item.setChecked(true);
      selectedVersionItems.add(object);
    }
  }
  Composite buttonContainer=new Composite(composite,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  buttonContainer.setLayout(layout);
  buttonContainer.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_CENTER));
  selectAll=new Button(buttonContainer,SWT.PUSH);
  selectAll.setText(""String_Node_Str"");
  selectNone=new Button(buttonContainer,SWT.PUSH);
  selectNone.setText(""String_Node_Str"");
  selectNone.setEnabled(this.testParentVersions.isEmpty());
  table.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TableItem tableItem=(TableItem)e.item;
        Property property=((IRepositoryObject)tableItem.getData()).getProperty();
        if (testParentVersions.contains(property.getVersion())) {
          tableItem.setChecked(true);
          checkSelectedItems();
          return;
        }
        if (property != null && property.getItem() != null) {
          if (tableItem.getChecked()) {
            selectedVersionItems.add((IRepositoryObject)tableItem.getData());
          }
 else {
            selectedVersionItems.remove(tableItem.getData());
          }
        }
      }
      checkSelectedItems();
    }
  }
);
  selectAll.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (int i=0; i < table.getItemCount(); i++) {
        table.getItem(i).setChecked(true);
        IRepositoryObject data=(IRepositoryObject)table.getItem(i).getData();
        selectedVersionItems.add(data);
      }
      checkSelectedItems();
    }
  }
);
  selectNone.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      for (int i=0; i < table.getItemCount(); i++) {
        table.getItem(i).setChecked(false);
        selectedVersionItems.remove(table.getItem(i).getData());
      }
      checkSelectedItems();
    }
  }
);
  return composite;
}",0.9419563459983832
125517,"private void addImpalaSettingFieldsListeners(){
  impalaDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
      String newDistributionDisplayName=impalaDistributionCombo.getText();
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService == null) {
        return;
      }
      IHDistribution newDistribution=hadoopService.getImpalaDistributionManager().getDistribution(newDistributionDisplayName,true);
      if (newDistribution == null) {
        return;
      }
      if (!newDistribution.getName().equals(originalDistributionName)) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION,newDistribution.getName());
        updateImpalaVersionPart(newDistribution);
        fillDefaultsWhenImpalaVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  impalaVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalVersionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
      String newVersionDisplayName=StringUtils.trimToNull(impalaVersionCombo.getText());
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService == null) {
        return;
      }
      IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(impalaDistributionCombo.getText(),true);
      if (impalaDistribution == null) {
        return;
      }
      IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(newVersionDisplayName,true);
      if (impalaVersion != null && !impalaVersion.getVersion().equals(originalVersionName)) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION,impalaVersion.getVersion());
        fillDefaultsWhenImpalaVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  impalaCustomButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleHadoopCustomVersion(ECustomVersionType.ALL);
    }
  }
);
}","private void addImpalaSettingFieldsListeners(){
  impalaDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
      String newDistributionDisplayName=impalaDistributionCombo.getText();
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService == null) {
        return;
      }
      IHDistribution newDistribution=hadoopService.getImpalaDistributionManager().getDistribution(newDistributionDisplayName,true);
      if (newDistribution == null) {
        return;
      }
      if (!newDistribution.getName().equals(originalDistributionName)) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION,newDistribution.getName());
        updateImpalaVersionPart(newDistribution);
        fillDefaultsWhenImpalaVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  impalaVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalVersionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
      String newVersionDisplayName=StringUtils.trimToNull(impalaVersionCombo.getText());
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService == null) {
        return;
      }
      IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(impalaDistributionCombo.getText(),true);
      if (impalaDistribution == null) {
        return;
      }
      IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(newVersionDisplayName,true);
      if (impalaVersion != null && !impalaVersion.getVersion().equals(originalVersionName)) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION,impalaVersion.getVersion());
        fillDefaultsWhenImpalaVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  impalaCustomButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleHadoopCustomVersion(ECustomVersionType.HIVE);
    }
  }
);
}",0.9985723026718336
125518,"@Override protected void addFieldsListeners(){
  final LDAPSchemaConnection connection=(LDAPSchemaConnection)connectionItem.getConnection();
  bindPrincipalCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        connection.setBindPrincipal(bindPrincipalCombo.getText().trim());
      }
    }
  }
);
  bindPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      if (!isContextMode()) {
        checkFieldsValue();
        password=bindPasswordText.getText().trim();
        if (saveBindPasswordButton.getSelection() == true) {
          connection.setSavePassword(true);
          connection.setBindPassword(connection.getValue(password,true));
        }
      }
    }
  }
);
  authenticationMethodCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (authenticationMethodCombo.getText().equals(EAuthenticationMethod.ANONYMOUS.getName())) {
        refreshAuthParamGroup(connection,false);
        connection.setUseAuthen(false);
        String selectedDN=connection.getSelectedDN();
        if (selectedDN == null || selectedDN.length() == 0) {
          updateStatus(IStatus.ERROR,alertForFetchBaseDNs);
        }
      }
 else {
        refreshAuthParamGroup(connection,true);
        connection.setUseAuthen(true);
      }
    }
  }
);
  checkPrincipalPasswordAuthButton.addSelectionListener(new SelectionAdapter(){
    boolean isOK=false;
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor){
            connection.setUseAuthen(true);
            isOK=LDAPConnectionUtils.checkParam(getOriginalValueConnection(),false);
          }
        }
;
        new ProgressMonitorDialog(Display.getDefault().getActiveShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
      if (!isContextMode()) {
        fetchBaseDnsButton.setEnabled(isOK);
      }
      connection.setUseAuthen(true);
      if (isOK) {
        if (!isContextMode()) {
          saveDialogSettings();
        }
        MessageDialog.openInformation(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        updateStatus(IStatus.ERROR,alertForFetchBaseDNs);
      }
 else {
        MessageDialog.openError(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        updateStatus(IStatus.ERROR,null);
      }
    }
  }
);
  autoFetchBaseDnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        boolean isSelection=autoFetchBaseDnsButton.getSelection();
        baseDNCombo.setEnabled(!isSelection);
        connection.setGetBaseDNsFromRoot(isSelection);
      }
    }
  }
);
  fetchBaseDnsButton.addSelectionListener(new SelectionAdapter(){
    boolean isOK=false;
    List<String> dnList=null;
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor){
            dnList=fetchBaseDNsList();
          }
        }
;
        new ProgressMonitorDialog(Display.getDefault().getActiveShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
      if (dnList != null && dnList.size() > 0) {
        isOK=true;
        int length=dnList.size();
        String[] baseDNarray=dnList.toArray(new String[length]);
        baseDNCombo.setItems((baseDNarray));
        baseDNCombo.select(0);
        connection.getBaseDNs().addAll(Arrays.asList(baseDNarray));
        connection.setSelectedDN(baseDNarray[0]);
      }
 else {
        isOK=false;
      }
      if (isOK) {
        if (!isContextMode()) {
          saveDialogSettings();
        }
        MessageDialog.openInformation(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        updateStatus(IStatus.OK,null);
      }
 else {
        MessageDialog.openError(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        updateStatus(IStatus.ERROR,null);
      }
    }
  }
);
  baseDNCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (baseDNCombo.getText() != null) {
        connection.setSelectedDN(baseDNCombo.getText());
      }
    }
  }
);
  findingButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (findingButton.getSelection()) {
        connection.setAliases(EAliasesDereference.FINDING.getRepositoryName());
      }
    }
  }
);
  searchButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (searchButton.getSelection()) {
        connection.setAliases(EAliasesDereference.SEARCHING.getRepositoryName());
      }
    }
  }
);
  alwaysButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (alwaysButton.getSelection()) {
        connection.setAliases(EAliasesDereference.ALWAYS.getRepositoryName());
      }
    }
  }
);
  neverButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (neverButton.getSelection()) {
        connection.setAliases(EAliasesDereference.NEVER.getRepositoryName());
      }
    }
  }
);
  ignoreButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (ignoreButton.getSelection()) {
        connection.setReferrals(EReferrals.IGNORE.getRepositoryName());
      }
    }
  }
);
  followButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (followButton.getSelection()) {
        connection.setReferrals(EReferrals.FOLLOW.getRepositoryName());
      }
    }
  }
);
  countLimitText.addVerifyListener(new VerifyListener(){
    @Override public void verifyText(    VerifyEvent e){
      if (!isContextMode()) {
        if (!e.text.matches(""String_Node_Str"")) {
          e.doit=false;
        }
      }
    }
  }
);
  countLimitText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String countLimit=countLimitText.getText();
        if (countLimit != null && countLimit.length() > 0) {
          connection.setCountLimit(countLimit);
        }
      }
    }
  }
);
  timeLimitText.addVerifyListener(new VerifyListener(){
    @Override public void verifyText(    VerifyEvent e){
      if (!isContextMode()) {
        if (!e.text.matches(""String_Node_Str"")) {
          e.doit=false;
        }
      }
    }
  }
);
  timeLimitText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String timeLimit=timeLimitText.getText();
        if (timeLimit != null && timeLimit.length() > 0) {
          connection.setTimeOutLimit(timeLimit);
        }
      }
    }
  }
);
}","@Override protected void addFieldsListeners(){
  final LDAPSchemaConnection connection=(LDAPSchemaConnection)connectionItem.getConnection();
  bindPrincipalCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        checkFieldsValue();
        connection.setBindPrincipal(bindPrincipalCombo.getText().trim());
      }
    }
  }
);
  bindPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent event){
      if (!isContextMode()) {
        checkFieldsValue();
        password=bindPasswordText.getText().trim();
        if (saveBindPasswordButton.getSelection() == true) {
          connection.setSavePassword(true);
          connection.setBindPassword(connection.getValue(password,true));
        }
      }
    }
  }
);
  authenticationMethodCombo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      if (authenticationMethodCombo.getText().equals(EAuthenticationMethod.ANONYMOUS.getName())) {
        refreshAuthParamGroup(connection,false);
        connection.setUseAuthen(false);
        String selectedDN=connection.getSelectedDN();
        if (selectedDN == null || selectedDN.length() == 0) {
          updateStatus(IStatus.ERROR,alertForFetchBaseDNs);
        }
      }
 else {
        refreshAuthParamGroup(connection,true);
        connection.setUseAuthen(true);
      }
    }
  }
);
  checkPrincipalPasswordAuthButton.addSelectionListener(new SelectionAdapter(){
    boolean isOK=false;
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor){
            connection.setUseAuthen(true);
            isOK=LDAPConnectionUtils.checkParam(getOriginalValueConnection(),false);
          }
        }
;
        new ProgressMonitorDialog(Display.getDefault().getActiveShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
      if (!isContextMode()) {
        fetchBaseDnsButton.setEnabled(isOK);
      }
      connection.setUseAuthen(true);
      if (isOK) {
        if (!isContextMode()) {
          saveDialogSettings();
        }
        MessageDialog.openInformation(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        String baseDN=baseDNCombo.getText();
        if (baseDN == null || baseDN.length() <= 0) {
          updateStatus(IStatus.ERROR,alertForFetchBaseDNs);
        }
      }
 else {
        MessageDialog.openError(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        updateStatus(IStatus.ERROR,null);
      }
    }
  }
);
  autoFetchBaseDnsButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (!isContextMode()) {
        boolean isSelection=autoFetchBaseDnsButton.getSelection();
        baseDNCombo.setEnabled(!isSelection);
        connection.setGetBaseDNsFromRoot(isSelection);
      }
    }
  }
);
  fetchBaseDnsButton.addSelectionListener(new SelectionAdapter(){
    boolean isOK=false;
    List<String> dnList=null;
    @Override public void widgetSelected(    SelectionEvent event){
      try {
        IRunnableWithProgress op=new IRunnableWithProgress(){
          @Override public void run(          IProgressMonitor monitor){
            dnList=fetchBaseDNsList();
          }
        }
;
        new ProgressMonitorDialog(Display.getDefault().getActiveShell()).run(true,false,op);
      }
 catch (      InvocationTargetException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
catch (      InterruptedException e) {
        updateStatus(IStatus.ERROR,null);
        MessageBoxExceptionHandler.process(e);
      }
      if (dnList != null && dnList.size() > 0) {
        isOK=true;
        int length=dnList.size();
        String[] baseDNarray=dnList.toArray(new String[length]);
        baseDNCombo.setItems((baseDNarray));
        baseDNCombo.select(0);
        connection.getBaseDNs().addAll(Arrays.asList(baseDNarray));
        connection.setSelectedDN(baseDNarray[0]);
      }
 else {
        isOK=false;
      }
      if (isOK) {
        if (!isContextMode()) {
          saveDialogSettings();
        }
        MessageDialog.openInformation(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        updateStatus(IStatus.OK,null);
      }
 else {
        MessageDialog.openError(Display.getDefault().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        updateStatus(IStatus.ERROR,null);
      }
    }
  }
);
  baseDNCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (baseDNCombo.getText() != null) {
        connection.setSelectedDN(baseDNCombo.getText());
      }
    }
  }
);
  findingButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (findingButton.getSelection()) {
        connection.setAliases(EAliasesDereference.FINDING.getRepositoryName());
      }
    }
  }
);
  searchButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (searchButton.getSelection()) {
        connection.setAliases(EAliasesDereference.SEARCHING.getRepositoryName());
      }
    }
  }
);
  alwaysButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (alwaysButton.getSelection()) {
        connection.setAliases(EAliasesDereference.ALWAYS.getRepositoryName());
      }
    }
  }
);
  neverButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (neverButton.getSelection()) {
        connection.setAliases(EAliasesDereference.NEVER.getRepositoryName());
      }
    }
  }
);
  ignoreButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (ignoreButton.getSelection()) {
        connection.setReferrals(EReferrals.IGNORE.getRepositoryName());
      }
    }
  }
);
  followButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (followButton.getSelection()) {
        connection.setReferrals(EReferrals.FOLLOW.getRepositoryName());
      }
    }
  }
);
  countLimitText.addVerifyListener(new VerifyListener(){
    @Override public void verifyText(    VerifyEvent e){
      if (!isContextMode()) {
        if (!e.text.matches(""String_Node_Str"")) {
          e.doit=false;
        }
      }
    }
  }
);
  countLimitText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String countLimit=countLimitText.getText();
        if (countLimit != null && countLimit.length() > 0) {
          connection.setCountLimit(countLimit);
        }
      }
    }
  }
);
  timeLimitText.addVerifyListener(new VerifyListener(){
    @Override public void verifyText(    VerifyEvent e){
      if (!isContextMode()) {
        if (!e.text.matches(""String_Node_Str"")) {
          e.doit=false;
        }
      }
    }
  }
);
  timeLimitText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String timeLimit=timeLimitText.getText();
        if (timeLimit != null && timeLimit.length() > 0) {
          connection.setTimeOutLimit(timeLimit);
        }
      }
    }
  }
);
}",0.9931239546552686
125519,"/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String newStr,String replacement){
  return CHANGE(oldStr,newStr,replacement);
}","/** 
 * Substitutes all substrings that match the given regular expression in the given old string with the given replacement and returns a new string.
 * @param oldStr: the old string.
 * @param regex: the regular expression to match.
 * @param replacement: the string to be substituted for every match.{talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") regex: Regx. {param} string(""guy"") replacement: Replacement. {example} EREPLACE(""hello world!"",""world"",""guy"") # hello world
 */
public static String EREPLACE(String oldStr,String regex,String replacement){
  return CHANGE(oldStr,regex,replacement);
}",0.6807760141093474
125520,"/** 
 * Substitutes an element of a string with a replacement element. {talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") newStr: Regx. {param} string(""guy"") replacement: Replacement. {example} CHANGE(""hello world!"",""world"",""guy"") # hello world
 */
public static String CHANGE(String oldStr,String newStr,String replacement){
  if (oldStr == null || newStr == null || replacement == null)   return oldStr;
 else   return oldStr.replaceAll(newStr,replacement);
}","/** 
 * Substitutes all substrings that match the given regular expression in the given old string with the given replacement and returns a new string.
 * @param oldStr: the old string.
 * @param regex: the regular expression to match.
 * @param replacement: the string to be substituted for every match.{talendTypes} String {Category} StringHandling {param} string(""hello world!"") oldStr: The whole string. {param} string(""world"") regex: Regx. {param} string(""guy"") replacement: Replacement. {example} CHANGE(""hello world!"",""world"",""guy"") # hello world
 */
public static String CHANGE(String oldStr,String regex,String replacement){
  if (oldStr == null || regex == null || replacement == null)   return oldStr;
 else   return oldStr.replaceAll(regex,replacement);
}",0.714176245210728
125521,"/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    DatabaseMetaData dbMetaData=createDatabaseMetaData(metadataConnection,needCreateAndClose);
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(extractMeta.getConn(),newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
      metadataColumns=MetadataFillFactory.getDBInstance(currentEDatabaseType).fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      extractMeta.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (extractMeta.getConn() != null) {
      ConnectionUtils.closeConnection(extractMeta.getConn());
    }
  }
  return metadataColumns;
}","/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    DatabaseMetaData dbMetaData=createDatabaseMetaData(metadataConnection,needCreateAndClose);
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(extractMeta.getConn(),newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
      metadataColumns=MetadataFillFactory.getDBInstance(currentEDatabaseType).fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (needCreateAndClose && extractMeta.getConn() != null) {
      extractMeta.closeConnection();
    }
  }
  return metadataColumns;
}",0.9627085377821394
125522,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        saveMetaData();
        tableHelper.resetUUID(connection);
        ITDQRepositoryService tdqRepositoryService=null;
        boolean needUpdateAnalysis=false;
        if (PluginChecker.isTDQLoaded()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(connection,oldCopiedConnection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
        }
        saveMetaData();
        if (tdqRepositoryService != null && needUpdateAnalysis) {
          tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
        }
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
            closeLockStrategy();
          }
        }
);
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        oldCopiedConnection=null;
        tableHelper.clean();
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        saveMetaData();
        tableHelper.resetUUID(connection);
        ITDQRepositoryService tdqRepositoryService=null;
        boolean needUpdateAnalysis=false;
        if (PluginChecker.isTDQLoaded()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(connection,oldCopiedConnection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
        }
        saveMetaData();
        if (tdqRepositoryService != null && needUpdateAnalysis) {
          tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
        }
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
            closeLockStrategy();
          }
        }
);
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        oldCopiedConnection=null;
        tableHelper.clean();
        if (ExtractMetaDataUtils.getInstance().getConn() != null) {
          ExtractMetaDataUtils.getInstance().closeConnection();
        }
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9313471502590672
125523,"private Map<ImportItem,List<ImportItem>> getTestCaseItemMap(List<ImportItem> items){
  Map<ImportItem,List<ImportItem>> map=new HashMap<ImportItem,List<ImportItem>>();
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
  }
  if (items != null && testContainerService != null) {
    Map<String,ImportItem> itemMap=new HashMap<String,ImportItem>();
    for (    ImportItem ir : items) {
      if (ir.getItem() != null && !testContainerService.isTestContainerItem(ir.getItem())) {
        itemMap.put(ir.getProperty().getId(),ir);
        map.put(ir,new ArrayList<ImportItem>());
      }
    }
    Set<String> keys=itemMap.keySet();
    for (    String key : keys) {
      Item item=itemMap.get(key).getItem();
      if (item == null) {
        continue;
      }
      List<ImportItem> children=new ArrayList<ImportItem>();
      for (      ImportItem child : items) {
        Item childItem=child.getItem();
        if (childItem == null) {
          continue;
        }
        boolean isTestContainer=testContainerService.isTestContainerItem(childItem);
        if (isTestContainer) {
          String path=childItem.getState().getPath();
          if (path != null && path.contains(""String_Node_Str"")) {
            int index=path.indexOf(""String_Node_Str"");
            path=path.substring(index + 1);
            if (path.equals(item.getProperty().getId())) {
              children.add(child);
            }
          }
        }
      }
      map.put(itemMap.get(key),children);
    }
  }
  return map;
}","private Map<ImportItem,List<ImportItem>> getTestCaseItemMap(List<ImportItem> items){
  Map<ImportItem,List<ImportItem>> map=new HashMap<ImportItem,List<ImportItem>>();
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
  }
  if (items != null && testContainerService != null) {
    Map<String,List<ImportItem>> itemMap=new HashMap<String,List<ImportItem>>();
    for (    ImportItem ir : items) {
      if (ir.getItem() != null && !testContainerService.isTestContainerItem(ir.getItem())) {
        String id=ir.getProperty().getId();
        List<ImportItem> itemList=itemMap.get(id);
        if (itemList == null) {
          itemList=new LinkedList<ImportItem>();
          itemMap.put(id,itemList);
        }
        if (!itemList.contains(ir)) {
          itemList.add(ir);
        }
        map.put(ir,new ArrayList<ImportItem>());
      }
    }
    Set<String> keys=itemMap.keySet();
    for (    String key : keys) {
      List<ImportItem> itemList=itemMap.get(key);
      ImportItem importItem=null;
      Item item=null;
      String version=""String_Node_Str"";
      boolean useLastVersion=true;
      Iterator<ImportItem> iter=itemList.iterator();
      while (iter.hasNext()) {
        ImportItem curImportItem=iter.next();
        Item curItem=curImportItem.getItem();
        String curVersion=curItem.getProperty().getVersion();
        if (item == null) {
          item=curItem;
          version=curVersion;
          importItem=curImportItem;
        }
 else {
          if (curVersion != null && 0 < (curVersion.compareTo(version) * (useLastVersion ? 1 : -1))) {
            item=curItem;
            version=curVersion;
            importItem=curImportItem;
          }
        }
      }
      if (item == null) {
        continue;
      }
      List<ImportItem> children=new ArrayList<ImportItem>();
      for (      ImportItem child : items) {
        Item childItem=child.getItem();
        if (childItem == null) {
          continue;
        }
        boolean isTestContainer=testContainerService.isTestContainerItem(childItem);
        if (isTestContainer) {
          String path=childItem.getState().getPath();
          if (path != null && path.contains(""String_Node_Str"")) {
            int index=path.indexOf(""String_Node_Str"");
            path=path.substring(index + 1);
            if (path.equals(item.getProperty().getId())) {
              children.add(child);
            }
          }
        }
      }
      map.put(importItem,children);
    }
  }
  return map;
}",0.7414634146341463
125524,"/** 
 * DOC ycbai Comment method ""isInContextMode"". <p> Estimate whether or not the item is in context mode. <br> Hadoop subconnections are in context mode even though it is not context mode itself if the hadoop cluster is in context mode.
 * @param connItem
 * @return
 */
public boolean isInContextMode(ConnectionItem connItem);","/** 
 * DOC ycbai Comment method ""isInContextMode"". <p> Estimate whether or not the connection is in context mode. <br> Hadoop subconnections are in context mode even though it is not context mode itself if the hadoop cluster is in context mode.
 * @param connection
 * @return
 */
public boolean isInContextMode(Connection connection);",0.8288288288288288
125525,"private static boolean isContextMode(Connection connection,String value){
  if (connection == null || value == null) {
    return false;
  }
  if (connection.isContextMode() && ContextParameterUtils.isContainContextParam(value)) {
    return true;
  }
  return false;
}","private static boolean isContextMode(Connection connection,String value){
  IMetadataManagmentUiService mmService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentUiService.class)) {
    mmService=(IMetadataManagmentUiService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentUiService.class);
  }
  if (mmService != null) {
    return mmService.isContextMode(connection,value);
  }
  return false;
}",0.3059805285118219
125526,"private static void addContextForHadoopElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null) {
    if (hadoopClusterService.isInContextMode(connItem)) {
      Connection connection=connItem.getConnection();
      Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
      if (neededVars != null && !neededVars.isEmpty()) {
        ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
        ConnectionItem hadoopClusterItem=(ConnectionItem)hadoopClusterService.getHadoopClusterBySubitemId(connItem.getProperty().getId());
        Connection hadoopClusterConnection=hadoopClusterItem.getConnection();
        ContextItem hadoopClusterContextItem=ContextUtils.getContextItemById2(hadoopClusterConnection.getContextId());
        Set<String> hcNeededVars=retrieveContextVar(elementParameters,hadoopClusterConnection,category,true);
        List<ContextItem> contextItems=new ArrayList<>();
        if (contextItem != null || hadoopClusterContextItem != null) {
          Set<String> connAddedVars=null;
          Set<String> hcAddedVars=null;
          if (contextItem != null) {
            connAddedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
            contextItems.add(contextItem);
          }
          if (hadoopClusterContextItem != null) {
            hcAddedVars=checkAndAddContextVariables(hadoopClusterContextItem,hcNeededVars,process.getContextManager(),false);
            contextItems.add(hadoopClusterContextItem);
          }
          boolean added=false;
          Map<String,Set<String>> addedVarsMap=new HashMap<>();
          Map<ContextItem,Set<String>> contextToVars=new HashMap<>();
          if (connAddedVars != null && !connAddedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,contextItem,connAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(connItem.getProperty().getId(),connAddedVars);
              contextToVars.put(contextItem,connAddedVars);
            }
          }
          if (hcAddedVars != null && !hcAddedVars.isEmpty() && !isAddContextVar(hadoopClusterContextItem,process.getContextManager(),hcNeededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,hadoopClusterContextItem,hcAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(hadoopClusterItem.getProperty().getId(),hcAddedVars);
              contextToVars.put(hadoopClusterContextItem,hcAddedVars);
            }
          }
          if (addedVarsMap.size() > 0) {
            if (showContextDialogForHadoop(process,contextItems,process.getContextManager(),addedVarsMap,contextToVars)) {
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}","private static void addContextForHadoopElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null) {
    Connection connection=connItem.getConnection();
    if (hadoopClusterService.isInContextMode(connection)) {
      Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
      if (neededVars != null && !neededVars.isEmpty()) {
        ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
        ConnectionItem hadoopClusterItem=(ConnectionItem)hadoopClusterService.getHadoopClusterBySubitemId(connItem.getProperty().getId());
        Connection hadoopClusterConnection=hadoopClusterItem.getConnection();
        ContextItem hadoopClusterContextItem=ContextUtils.getContextItemById2(hadoopClusterConnection.getContextId());
        Set<String> hcNeededVars=retrieveContextVar(elementParameters,hadoopClusterConnection,category,true);
        List<ContextItem> contextItems=new ArrayList<>();
        if (contextItem != null || hadoopClusterContextItem != null) {
          Set<String> connAddedVars=null;
          Set<String> hcAddedVars=null;
          if (contextItem != null) {
            connAddedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
            contextItems.add(contextItem);
          }
          if (hadoopClusterContextItem != null) {
            hcAddedVars=checkAndAddContextVariables(hadoopClusterContextItem,hcNeededVars,process.getContextManager(),false);
            contextItems.add(hadoopClusterContextItem);
          }
          boolean added=false;
          Map<String,Set<String>> addedVarsMap=new HashMap<>();
          Map<ContextItem,Set<String>> contextToVars=new HashMap<>();
          if (connAddedVars != null && !connAddedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,contextItem,connAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(connItem.getProperty().getId(),connAddedVars);
              contextToVars.put(contextItem,connAddedVars);
            }
          }
          if (hcAddedVars != null && !hcAddedVars.isEmpty() && !isAddContextVar(hadoopClusterContextItem,process.getContextManager(),hcNeededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,hadoopClusterContextItem,hcAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(hadoopClusterItem.getProperty().getId(),hcAddedVars);
              contextToVars.put(hadoopClusterContextItem,hcAddedVars);
            }
          }
          if (addedVarsMap.size() > 0) {
            if (showContextDialogForHadoop(process,contextItems,process.getContextManager(),addedVarsMap,contextToVars)) {
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}",0.9843370240345666
125527,"static void setLDAPSchemaPropertiesForExistContextMode(LDAPSchemaConnection ldapConn,Set<IConnParamName> paramSet,Map<ContextItem,List<ConectionAdaptContextVariableModel>> map){
  if (ldapConn == null) {
    return;
  }
  String ldapVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EParamName) {
      ldapVariableName=""String_Node_Str"";
      EParamName ldapParam=(EParamName)param;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<ContextItem,List<ConectionAdaptContextVariableModel>> entry : map.entrySet()) {
          List<ConectionAdaptContextVariableModel> modelList=entry.getValue();
          for (          ConectionAdaptContextVariableModel model : modelList) {
            if (model.getValue().equals(ldapParam.name())) {
              ldapVariableName=model.getName();
              break;
            }
          }
        }
      }
switch (ldapParam) {
case Host:
        ldapConn.setHost(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
      break;
case Port:
    ldapConn.setPort(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
  break;
case BindPrincipal:
ldapConn.setBindPrincipal(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
case BindPassword:
ldapConn.setBindPassword(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
case CountLimit:
ldapConn.setCountLimit(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
case TimeOutLimit:
ldapConn.setTimeOutLimit(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
case Filter:
ldapConn.setFilter(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
case BaseDN:
ldapConn.setSelectedDN(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
default :
}
}
}
}","static void setLDAPSchemaPropertiesForExistContextMode(LDAPSchemaConnection ldapConn,Set<IConnParamName> paramSet,Map<ContextItem,List<ConectionAdaptContextVariableModel>> map){
  if (ldapConn == null) {
    return;
  }
  String ldapVariableName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EParamName) {
      ldapVariableName=""String_Node_Str"";
      EParamName ldapParam=(EParamName)param;
      if (map != null && map.size() > 0) {
        for (        Map.Entry<ContextItem,List<ConectionAdaptContextVariableModel>> entry : map.entrySet()) {
          List<ConectionAdaptContextVariableModel> modelList=entry.getValue();
          for (          ConectionAdaptContextVariableModel model : modelList) {
            if (model.getValue().equals(ldapParam.name())) {
              ldapVariableName=model.getName();
              break;
            }
          }
        }
      }
switch (ldapParam) {
case Host:
        ldapConn.setHost(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
      break;
case Port:
    ldapConn.setPort(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
  break;
case BindPrincipal:
ldapConn.setBindPrincipal(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
break;
case BindPassword:
ldapConn.setBindPassword(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
break;
case CountLimit:
ldapConn.setCountLimit(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
break;
case TimeOutLimit:
ldapConn.setTimeOutLimit(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
break;
case Filter:
ldapConn.setFilter(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
break;
case BaseDN:
ldapConn.setSelectedDN(ContextParameterUtils.getNewScriptCode(ldapVariableName,LANGUAGE));
break;
default :
}
}
}
}",0.9886240520043336
125528,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if (ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<EmptyFolderImportItem> checkedFolders=new ArrayList<EmptyFolderImportItem>();
  for (  ImportItem importItem : checkedItemRecords) {
    if (importItem instanceof EmptyFolderImportItem) {
      checkedFolders.add((EmptyFolderImportItem)importItem);
    }
  }
  checkedItemRecords.removeAll(checkedFolders);
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty() && checkedFolders.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            if (!checkedFolders.isEmpty()) {
              for (              EmptyFolderImportItem folder : checkedFolders) {
                boolean exist=false;
                ERepositoryObjectType repositoryType=folder.getRepositoryType();
                IPath path=folder.getPath();
                if (destinationPath != null) {
                  IPath desPath=destinationPath.makeRelativeTo(new Path(repositoryType.getFolder()));
                  path=desPath.append(folder.getPath());
                }
                String label=folder.getLabel();
                FolderItem getFolderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),repositoryType,path);
                if (getFolderItem != null) {
                  for (                  Object obj : getFolderItem.getChildren()) {
                    if (obj instanceof FolderItem) {
                      FolderItem existFolder=(FolderItem)obj;
                      if (label.equals(existFolder.getProperty().getLabel())) {
                        exist=true;
                        break;
                      }
                    }
                  }
                }
                if (!exist) {
                  try {
                    factory.createFolder(repositoryType,path,label);
                  }
 catch (                  PersistenceException e) {
                    ExceptionHandler.process(e);
                  }
                }
              }
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if (ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9988142627255018
125529,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Znode_Parent:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}",0.9889090795162604
125530,"static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String impalaPrin=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,impalaPrin));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}","static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String znode_Parent=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getOriginalValue(contextType,znode_Parent));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String impalaPrin=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,impalaPrin));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}",0.9880202068799616
125531,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String znodeParent=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,getOriginalValue(hadoopClusterContextType,contextType,znodeParent));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9904991595410364
125532,"static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}","static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Znode_Parent:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_ZNODE_PARENT,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}",0.9869408586010208
125533,"@Override public void expandNode(TreeViewer viewer,IRepositoryNode repoNode,int expandLevel){
  if (repoNode != null && validType(repoNode.getObjectType())) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      List<ERepositoryObjectType> preExpandTypes=getPreExpandTypes();
      if (preExpandTypes != null) {
        for (        ERepositoryObjectType preExpandType : preExpandTypes) {
          IRepositoryNode preExpandNode=root.getRootRepositoryNode(preExpandType);
          if (preExpandNode != null) {
            viewer.expandToLevel(preExpandNode,expandLevel);
          }
        }
      }
    }
  }
  RepositorySeekerManager seekerManager=RepositorySeekerManager.getInstance();
  seekerManager.expandNode(seekerManager.getRepoTreeViewer(),repoNode,1);
}","@Override public void expandNode(TreeViewer viewer,IRepositoryNode repoNode,int expandLevel){
  if (repoNode != null && validType(repoNode.getObjectType())) {
    IProjectRepositoryNode root=repoNode.getRoot();
    if (root != null) {
      List<ERepositoryObjectType> preExpandTypes=getPreExpandTypes();
      if (preExpandTypes != null) {
        for (        ERepositoryObjectType preExpandType : preExpandTypes) {
          IRepositoryNode preExpandNode=root.getRootRepositoryNode(preExpandType);
          if (preExpandNode != null && viewer != null) {
            viewer.expandToLevel(preExpandNode,expandLevel);
          }
        }
      }
    }
  }
  RepositorySeekerManager seekerManager=RepositorySeekerManager.getInstance();
  seekerManager.expandNode(seekerManager.getRepoTreeViewer(),repoNode,1);
}",0.9888059701492538
125534,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  saveMetaData();
  tableHelper.resetUUID(connection);
  ITDQRepositoryService tdqRepositoryService=null;
  boolean needUpdateAnalysis=false;
  if (PluginChecker.isTDQLoaded()) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(connection,oldCopiedConnection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
  }
  saveMetaData();
  if (tdqRepositoryService != null && needUpdateAnalysis) {
    tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  oldCopiedConnection=null;
  tableHelper.clean();
}","@Override public void run(){
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
}",0.1925925925925926
125535,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        saveMetaData();
        tableHelper.resetUUID(connection);
        ITDQRepositoryService tdqRepositoryService=null;
        boolean needUpdateAnalysis=false;
        if (PluginChecker.isTDQLoaded()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(connection,oldCopiedConnection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
        }
        saveMetaData();
        if (tdqRepositoryService != null && needUpdateAnalysis) {
          tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        oldCopiedConnection=null;
        tableHelper.clean();
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        saveMetaData();
        tableHelper.resetUUID(connection);
        ITDQRepositoryService tdqRepositoryService=null;
        boolean needUpdateAnalysis=false;
        if (PluginChecker.isTDQLoaded()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(connection,oldCopiedConnection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
        }
        saveMetaData();
        if (tdqRepositoryService != null && needUpdateAnalysis) {
          tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
        }
        Display.getDefault().asyncExec(new Runnable(){
          @Override public void run(){
            RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
            closeLockStrategy();
          }
        }
);
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        oldCopiedConnection=null;
        tableHelper.clean();
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}",0.9708915883566354
125536,"/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  boolean isImpala=visible && ImpalaVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| isImpala|| EDatabaseConnTemplate.PSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.PLUSPSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (isHiveDBConnSelected()) {
        boolean isEmbeddedMode=isHiveEmbeddedMode();
        if (doSupportHive2()) {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
          }
        }
 else {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
          }
        }
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM) || isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    hideHCLinkSettings(!isHbase && !isHiveDBConnSelected());
    hideHBaseSettings(!isHbase);
    hideImpalaSettings(!isImpala);
    updateHadoopPropertiesFieldsState();
    updateHiveJDBCPropertiesFieldsState();
    showIfAdditionalJDBCSettings();
    showIfSupportEncryption();
    showIfAuthentication();
    hideHiveExecutionFields(!doSupportTez());
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase || isImpala) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        if (isImpala) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(""String_Node_Str"");
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        sidOrDatabaseText.setEditable(true);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase || isImpala) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(true);
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED && !isHiveDBConnSelected()) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase || isImpala) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  impalaSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}","/** 
 * SetEditable fields.
 * @param boolean
 */
@SuppressWarnings(""String_Node_Str"") private void setPropertiesFormEditable(boolean visible){
  clearContextParams();
  EDBParamName sidOrDatabase=null;
  if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(getConnection().getProductId())) {
    if (EDatabaseConnTemplate.ORACLESN.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabaseText.setLabelWidth(65);
      sidOrDatabase=EDBParamName.ServiceName;
    }
 else     if (EDatabaseConnTemplate.ORACLEFORSID.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
 else     if (EDatabaseConnTemplate.ORACLE_OCI.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
      sidOrDatabase=EDBParamName.Sid;
    }
  }
 else {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    sidOrDatabase=EDBParamName.Database;
    if (EDatabaseConnTemplate.INFORMIX.getDBDisplayName().equals(getConnection().getDatabaseType())) {
      sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
    }
  }
  if (EDatabaseTypeName.MSODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseTypeName.GODBC.getDisplayName().equals(dbTypeCombo.getText())) {
    sidOrDatabaseText.setLabelText(Messages.getString(""String_Node_Str""));
  }
  if (EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.JdbcUrl,visible);
    addContextParams(EDBParamName.DriverJar,visible);
    addContextParams(EDBParamName.MappingFile,visible);
    addContextParams(EDBParamName.ClassName,visible);
  }
  addContextParams(EDBParamName.Login,visible);
  addContextParams(EDBParamName.Password,visible);
  boolean isOracle=visible && oracleVersionEnable();
  boolean isAS400=visible && as400VersionEnable();
  boolean isMySQL=visible && asMySQLVersionEnable();
  boolean isVertica=visible && asVerticaVersionEnable();
  boolean isSAS=visible && asSASVersionEnable();
  boolean isHbase=visible && asHbaseVersionEnable();
  boolean isImpala=visible && ImpalaVersionEnable();
  dbVersionCombo.setEnabled(!isReadOnly() && (isOracle || isAS400 || isMySQL|| isVertica|| isSAS|| isImpala|| EDatabaseConnTemplate.PSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.PLUSPSQL.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.ACCESS.getDBTypeName().equals(dbTypeCombo.getText())|| EDatabaseConnTemplate.MSSQL05_08.getDBDisplayName().equals(dbTypeCombo.getText())));
  usernameText.setEditable(visible);
  passwordText.setEditable(visible);
  serverText.setEditable(false);
  portText.setEditable(false);
  sidOrDatabaseText.setEditable(false);
  datasourceText.setEditable(false);
  additionParamText.setEditable(false);
  schemaText.setEditable(false);
  fileField.setEditable(false);
  directoryField.setEditable(false);
  mappingFileText.setEditable(false);
  mappingSelectButton.setEnabled(false);
  if (EDatabaseConnTemplate.GODBC.getDBTypeName().equals(dbTypeCombo.getText()) || EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
    addContextParams(EDBParamName.MappingFile,true);
    mappingFileText.show();
    mappingFileText.setEditable(true);
    mappingSelectButton.setVisible(true);
    mappingSelectButton.setEnabled(true);
  }
 else {
    addContextParams(EDBParamName.MappingFile,false);
    mappingFileText.hide();
    mappingFileText.setEditable(false);
    mappingSelectButton.setVisible(false);
    mappingSelectButton.setEnabled(false);
  }
  if (dbTypeCombo.getSelectionIndex() < 0) {
    urlConnectionStringText.setEditable(false);
  }
 else {
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(dbTypeCombo.getText());
    String s=""String_Node_Str"";
    if (template != null) {
      EDatabaseVersion4Drivers version=null;
      if (isHiveDBConnSelected()) {
        boolean isEmbeddedMode=isHiveEmbeddedMode();
        if (doSupportHive2()) {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_2_STANDALONE);
          }
        }
 else {
          if (isEmbeddedMode) {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE_EMBEDDED);
          }
 else {
            s=template.getUrlTemplate(EDatabaseVersion4Drivers.HIVE);
          }
        }
      }
 else {
        version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(dbVersionCombo.getText());
        s=template.getUrlTemplate(version);
      }
    }
    if (isHbase || isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM) || isDBTypeSelected(EDatabaseConnTemplate.IMPALA)) {
      urlConnectionStringText.hide();
    }
 else {
      urlConnectionStringText.show();
    }
    if (isDBTypeSelected(EDatabaseConnTemplate.ORACLE_CUSTOM)) {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
 else {
      serverText.setLabelText(Messages.getString(""String_Node_Str""));
    }
    hideHCLinkSettings(!isHbase && !isHiveDBConnSelected());
    hideHBaseSettings(!isHbase);
    hideImpalaSettings(!isImpala);
    updateHadoopPropertiesFieldsState();
    updateHiveJDBCPropertiesFieldsState();
    showIfAdditionalJDBCSettings();
    showIfSupportEncryption();
    showIfAuthentication();
    hideHiveExecutionFields(!doSupportTez());
    urlConnectionStringText.setEditable(!visible);
    boolean schemaTextIsShow=true;
    if (template == EDatabaseConnTemplate.MSSQL) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.VERTICA || template == EDatabaseConnTemplate.INFORMIX) {
      schemaText.show();
      schemaText.setEditable(true);
      addContextParams(EDBParamName.Schema,true);
    }
 else     if (template == EDatabaseConnTemplate.GENERAL_JDBC) {
      String jdbcUrlString=""String_Node_Str"";
      if (isContextMode()) {
        if (selectedContextType == null) {
          selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),getConnection(),true);
        }
        if (selectedContextType != null) {
          jdbcUrlString=ConnectionContextHelper.getOriginalValue(selectedContextType,getConnection().getURL());
        }
      }
 else {
        jdbcUrlString=generalJdbcUrlText.getText();
      }
      if (jdbcUrlString.contains(""String_Node_Str"")) {
        jDBCschemaText.setHideWidgets(false);
        addContextParams(EDBParamName.Schema,true);
      }
 else {
        jDBCschemaText.setHideWidgets(true);
        addContextParams(EDBParamName.Schema,false);
      }
    }
 else {
      schemaTextIsShow=false;
    }
    if (s.contains(EDatabaseConnVar.HOST.getVariable()) || isHbase || isImpala) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        serverText.show();
        serverText.setEditable(visible);
        if (isHbase) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(EDatabaseConnTemplate.HBASE.getUrlTemplate(EDatabaseVersion4Drivers.HBASE));
          }
        }
        if (isImpala) {
          String serverName=getConnection().getServerName();
          if (serverName == null || ""String_Node_Str"".equals(serverName)) {
            serverText.setText(""String_Node_Str"");
          }
        }
        addContextParams(EDBParamName.Server,visible);
      }
    }
 else {
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          portText.show();
          serverText.show();
          portText.setEditable(true);
          serverText.setEditable(visible);
          hideMappingFileRelatedWidgets(true);
        }
        sidOrDatabaseText.setEditable(true);
      }
 else {
        serverText.hide();
      }
      addContextParams(EDBParamName.Server,false);
    }
    if (s.contains(EDatabaseConnVar.PORT.getVariable()) || isHbase || isImpala) {
      portText.show();
      portText.setEditable(visible);
      addContextParams(EDBParamName.Port,visible);
    }
 else {
      if (isHiveDBConnSelected()) {
        portText.show();
        portText.setEditable(visible);
      }
 else {
        portText.hide();
      }
      addContextParams(EDBParamName.Port,false);
    }
    if (s.contains(EDatabaseConnVar.SID.getVariable()) || s.contains(EDatabaseConnVar.SERVICE_NAME.getVariable())) {
      if (!EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText())) {
        if (EDatabaseTypeName.HIVE.getDisplayName().equalsIgnoreCase(dbTypeCombo.getText())) {
          if (isHiveEmbeddedMode()) {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
 else {
            portText.show();
            serverText.show();
            serverText.setEditable(true);
            hideMappingFileRelatedWidgets(true);
          }
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(true);
        }
 else {
          sidOrDatabaseText.show();
          sidOrDatabaseText.setEditable(visible);
        }
        addContextParams(sidOrDatabase,visible);
      }
 else {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
 else {
      if (template.getDbType() != EDatabaseTypeName.JAVADB_EMBEDED && !isHiveDBConnSelected()) {
        sidOrDatabaseText.hide();
        addContextParams(sidOrDatabase,false);
      }
    }
    if (s.contains(EDatabaseConnVar.FILENAME.getVariable())) {
      fileField.show();
      fileField.setEditable(!isReadOnly() && visible);
      addContextParams(EDBParamName.File,visible);
      boolean isSqlLite=false;
      if (template.getDbType() == EDatabaseTypeName.SQLITE) {
        isSqlLite=true;
        usernameText.hide();
        passwordText.hide();
      }
 else {
        isSqlLite=false;
        usernameText.show();
        passwordText.show();
      }
      usernameText.setEditable(!isSqlLite);
      passwordText.setEditable(!isSqlLite);
      addContextParams(EDBParamName.Login,!isSqlLite);
      addContextParams(EDBParamName.Password,!isSqlLite);
    }
 else {
      fileField.hide();
      addContextParams(EDBParamName.File,false);
      usernameText.show();
      passwordText.show();
      if (isHbase) {
        usernameText.hide();
        passwordText.hide();
      }
 else       if (isImpala) {
        passwordText.hide();
      }
 else       if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          usernameText.show();
          passwordText.show();
          serverText.setEditable(true);
          hideMappingFileRelatedWidgets(true);
        }
 else {
          usernameText.show();
          passwordText.show();
          hideMappingFileRelatedWidgets(true);
        }
      }
      addContextParams(EDBParamName.Login,true);
      addContextParams(EDBParamName.Password,true);
    }
    if (s.contains(EDatabaseConnVar.DATASOURCE.getVariable())) {
      datasourceText.show();
      datasourceText.setEditable(visible);
      addContextParams(EDBParamName.Datasource,visible);
    }
 else {
      datasourceText.hide();
      addContextParams(EDBParamName.Datasource,false);
    }
    if (s.contains(EDatabaseConnVar.DBROOTPATH.getVariable())) {
      directoryField.show();
      directoryField.setEditable(visible);
      sidOrDatabaseText.setEditable(visible);
      addContextParams(EDBParamName.DBRootPath,visible);
      addContextParams(sidOrDatabase,visible);
    }
 else {
      directoryField.hide();
      addContextParams(EDBParamName.DBRootPath,false);
    }
    if (EDatabaseConnTemplate.isSchemaNeeded(getConnection().getDatabaseType())) {
      schemaText.show();
      schemaText.setEditable(visible);
      if (isHbase) {
        schemaText.setLabelText(""String_Node_Str"");
      }
      addContextParams(EDBParamName.Schema,visible);
    }
 else {
      if (!schemaTextIsShow) {
        schemaText.hide();
        addContextParams(EDBParamName.Schema,false);
      }
    }
    if (EDatabaseConnTemplate.isAddtionParamsNeeded(getConnection().getDatabaseType()) && !EDatabaseConnTemplate.GENERAL_JDBC.getDBTypeName().equals(dbTypeCombo.getText()) && visible) {
      additionParamText.show();
      additionParamText.setEditable(true);
      addContextParams(EDBParamName.AdditionalParams,true);
    }
 else {
      additionParamText.hide();
      addContextParams(EDBParamName.AdditionalParams,false);
    }
    if (EDatabaseConnTemplate.FIREBIRD.equals(template)) {
      portText.show();
      portText.setEditable(true);
      addContextParams(EDBParamName.Port,true);
    }
    if (isHiveDBConnSelected()) {
      if (isHiveEmbeddedMode()) {
        passwordText.hide();
        portText.show();
        serverText.show();
        hideMappingFileRelatedWidgets(true);
      }
 else {
        portText.show();
        serverText.show();
        usernameText.show();
        passwordText.show();
        hideMappingFileRelatedWidgets(true);
      }
      schemaText.hide();
    }
  }
  doHiveUIContentsLayout();
  hbaseSettingGroup.layout();
  impalaSettingGroup.layout();
  hadoopPropGrp.layout();
  metastorePropGrp.layout();
  compositeDbSettings.layout();
  typeDbCompositeParent.layout();
  newParent.layout();
  databaseSettingGroup.layout();
  compositeGroupDbSettings.layout();
}",0.9957739976561668
125537,"/** 
 * DOC wchen Comment method ""createMetadataFromXSD"".
 * @param parameter
 * @param connectionLabel
 * @param portTypeName
 * @param operationName
 * @param schemaFile
 * @param selectItems
 * @param fileForInnerContent
 * @param populationUtil
 * @throws IOException
 */
public static void createMetadataFromXSD(QName parameter,String connectionLabel,String portTypeName,String operationName,Collection<XmlFileConnectionItem> selectItems,File fileForInnerContent,XSDPopulationUtil2 populationUtil) throws IOException {
  String targetNameSpace=parameter.getNamespaceURI();
  XSDSchema xsdSchema=populationUtil.getXSDSchemaFromNamespace(targetNameSpace);
  if (xsdSchema == null) {
    return;
  }
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (!selectItems.isEmpty()) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite && !isNameValidInXmlFileConnection(parameter,portTypeName,operationName)) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(connectionLabel);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(fileForInnerContent);
  connection.setFileContent(byteArray.getInnerContent());
  connection.setXmlFilePath(fileForInnerContent.getName());
  connection.setTargetNameSpace(targetNameSpace);
  try {
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=getImportedXmlSchemaPath(targetNameSpace,portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}","/** 
 * DOC wchen Comment method ""createMetadataFromXSD"".
 * @param parameter
 * @param connectionLabel
 * @param portTypeName
 * @param operationName
 * @param schemaFile
 * @param selectItems
 * @param fileForInnerContent
 * @param populationUtil
 * @throws IOException
 * @throws URISyntaxException
 */
public static void createMetadataFromXSD(QName parameter,String connectionLabel,String portTypeName,String operationName,Collection<XmlFileConnectionItem> selectItems,File fileForInnerContent,XSDPopulationUtil2 populationUtil) throws IOException {
  String targetNameSpace=parameter.getNamespaceURI();
  String name=parameter.getLocalPart();
  XmlFileConnection connection=null;
  Property connectionProperty=null;
  XmlFileConnectionItem connectionItem=null;
  String oldConnectionId=null;
  String oldTableId=null;
  IMetadataTable oldMetadataTable=null;
  Map<String,String> oldTableMap=null;
  if (!selectItems.isEmpty()) {
    boolean needRewrite=false;
    for (    XmlFileConnectionItem item : selectItems) {
      connectionProperty=item.getProperty();
      if (connectionProperty.getLabel().equals(name)) {
        oldConnectionId=connectionProperty.getId();
        connectionItem=item;
        connection=(XmlFileConnection)connectionItem.getConnection();
        needRewrite=true;
        Set<MetadataTable> tables=ConnectionHelper.getTables(connection);
        MetadataTable oldTable=null;
        if (tables.size() > 0) {
          oldTable=tables.toArray(new MetadataTable[0])[0];
          oldTableId=oldTable.getId();
          oldMetadataTable=ConvertionHelper.convert(oldTable);
        }
        oldTableMap=RepositoryUpdateManager.getOldTableIdAndNameMap(connectionItem,oldTable,false);
        break;
      }
    }
    if (!needRewrite && !isNameValidInXmlFileConnection(parameter,portTypeName,operationName)) {
      return;
    }
  }
  connection=ConnectionFactory.eINSTANCE.createXmlFileConnection();
  connection.setName(ERepositoryObjectType.METADATA_FILE_XML.getKey());
  connectionItem=PropertiesFactory.eINSTANCE.createXmlFileConnectionItem();
  connectionProperty=PropertiesFactory.eINSTANCE.createProperty();
  connectionProperty.setAuthor(((RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY)).getUser());
  connectionProperty.setLabel(connectionLabel);
  connectionProperty.setVersion(VersionUtils.DEFAULT_VERSION);
  connectionProperty.setStatusCode(""String_Node_Str"");
  connectionItem.setProperty(connectionProperty);
  connectionItem.setConnection(connection);
  connection.setInputModel(false);
  ByteArray byteArray=PropertiesFactory.eINSTANCE.createByteArray();
  byteArray.setInnerContentFromFile(fileForInnerContent);
  connection.setFileContent(byteArray.getInnerContent());
  connection.setXmlFilePath(fileForInnerContent.getName());
  connection.setTargetNameSpace(targetNameSpace);
  try {
    XSDSchema xsdSchema=null;
    if (XmlUtil.isWSDLFile(fileForInnerContent.getName())) {
      xsdSchema=populationUtil.getXSDSchemaFromNamespace(targetNameSpace);
    }
 else {
      xsdSchema=populationUtil.getXSDSchema(fileForInnerContent.getAbsolutePath());
    }
    if (xsdSchema == null) {
      return;
    }
    List<ATreeNode> rootNodes=populationUtil.getAllRootNodes(xsdSchema);
    ATreeNode node=null;
    for (    ATreeNode curNode : rootNodes) {
      String curName=(String)curNode.getValue();
      if (curName.contains(""String_Node_Str"")) {
        if (curName.split(""String_Node_Str"")[1].equals(name)) {
          node=curNode;
          break;
        }
      }
 else       if (curName.equals(name)) {
        node=curNode;
        break;
      }
    }
    node=populationUtil.getSchemaTree(xsdSchema,node);
    orderId=1;
    loopElementFound=false;
    if (ConnectionHelper.getTables(connection).isEmpty()) {
      MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
      if (oldTableId != null) {
        table.setId(oldTableId);
      }
 else {
        table.setId(ProxyRepositoryFactory.getInstance().getNextId());
      }
      RecordFile record=(RecordFile)ConnectionHelper.getPackage(connection.getName(),connection,RecordFile.class);
      if (record != null) {
        PackageHelper.addMetadataTable(table,record);
      }
 else {
        RecordFile newrecord=RecordFactory.eINSTANCE.createRecordFile();
        newrecord.setName(connection.getName());
        ConnectionHelper.addPackage(newrecord,connection);
        PackageHelper.addMetadataTable(table,newrecord);
      }
    }
    boolean haveElement=false;
    for (    Object curNode : node.getChildren()) {
      if (((ATreeNode)curNode).getType() == ATreeNode.ELEMENT_TYPE) {
        haveElement=true;
        break;
      }
    }
    fillRootInfo(connection,node,""String_Node_Str"",!haveElement);
  }
 catch (  OdaException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e1) {
    ExceptionHandler.process(e1);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  connectionProperty.setId(factory.getNextId());
  try {
    String folderPath=getImportedXmlSchemaPath(targetNameSpace,portTypeName,operationName);
    IPath path=new Path(folderPath);
    factory.create(connectionItem,path,true);
    if (oldConnectionId != null) {
      connectionItem.getProperty().setId(oldConnectionId);
      factory.save(connectionItem);
    }
    propagateSchemaChange(oldMetadataTable,oldTableMap,connection,connectionItem);
    ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
catch (  URISyntaxException e) {
    ExceptionHandler.process(e);
  }
}",0.824890164081413
125538,"public static String getDeleteFolderName(ERepositoryObjectType type){
  if (type == BUSINESS_PROCESS) {
    return ""String_Node_Str"";
  }
 else   if (type == SVG_BUSINESS_PROCESS) {
    return ""String_Node_Str"";
  }
 else   if (type == PROCESS) {
    return ""String_Node_Str"";
  }
 else   if (type == JOBLET) {
    return ""String_Node_Str"";
  }
 else   if (type == CONTEXT) {
    return ""String_Node_Str"";
  }
 else   if (type == ROUTINES) {
    return ""String_Node_Str"";
  }
 else   if (type == JOB_SCRIPT) {
    return ""String_Node_Str"";
  }
 else   if (type == SNIPPETS) {
    return ""String_Node_Str"";
  }
 else   if (type == DOCUMENTATION) {
    return ""String_Node_Str"";
  }
 else   if (type == SQLPATTERNS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_CONNECTIONS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_SAPCONNECTIONS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_EBCDIC) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_HL7) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_FTP) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_BRMS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_MDMCONNECTION) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_DELIMITED) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_POSITIONAL) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_REGEXP) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_XML) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_EXCEL) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_LDIF) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_LDAP_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_GENERIC_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_WSDL_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_SALESFORCE_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_RULES) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_LINKRULES) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_HEADER_FOOTER) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_ANALYSIS_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_RULES_SQL) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_INDICATOR_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_PATTERN_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_JRAXML_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_REPORT_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == COMPONENTS) {
    return ""String_Node_Str"";
  }
 else   if (type.getType().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
    ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    String deleteFolderName=camelService.getDeleteFolderName(type);
    if (deleteFolderName != null) {
      return deleteFolderName;
    }
  }
  return ""String_Node_Str"";
}","public static String getDeleteFolderName(ERepositoryObjectType type){
  if (type == BUSINESS_PROCESS) {
    return ""String_Node_Str"";
  }
 else   if (type == SVG_BUSINESS_PROCESS) {
    return ""String_Node_Str"";
  }
 else   if (type == PROCESS) {
    return ""String_Node_Str"";
  }
 else   if (type == JOBLET) {
    return ""String_Node_Str"";
  }
 else   if (type == CONTEXT) {
    return ""String_Node_Str"";
  }
 else   if (type == ROUTINES) {
    return ""String_Node_Str"";
  }
 else   if (type == JOB_SCRIPT) {
    return ""String_Node_Str"";
  }
 else   if (type == SNIPPETS) {
    return ""String_Node_Str"";
  }
 else   if (type == DOCUMENTATION) {
    return ""String_Node_Str"";
  }
 else   if (type == SQLPATTERNS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_CONNECTIONS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_SAPCONNECTIONS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_EBCDIC) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_HL7) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_FTP) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_BRMS) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_MDMCONNECTION) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_DELIMITED) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_POSITIONAL) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_REGEXP) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_XML) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_EXCEL) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_LDIF) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_LDAP_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_GENERIC_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_WSDL_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_SALESFORCE_SCHEMA) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_RULES) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_FILE_LINKRULES) {
    return ""String_Node_Str"";
  }
 else   if (type == METADATA_HEADER_FOOTER) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_ANALYSIS_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_RULES_SQL) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_INDICATOR_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_PATTERN_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_JRAXML_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_REPORT_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == TDQ_ELEMENT) {
    return ""String_Node_Str"";
  }
 else   if (type == COMPONENTS) {
    return ""String_Node_Str"";
  }
 else   if (type.getType().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (type.getType().equals(""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
 else   if (GlobalServiceRegister.getDefault().isServiceRegistered(ICamelDesignerCoreService.class)) {
    ICamelDesignerCoreService camelService=(ICamelDesignerCoreService)GlobalServiceRegister.getDefault().getService(ICamelDesignerCoreService.class);
    String deleteFolderName=camelService.getDeleteFolderName(type);
    if (deleteFolderName != null) {
      return deleteFolderName;
    }
  }
  return ""String_Node_Str"";
}",0.987298899237934
125539,"@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    boolean isOracle=MetadataConnectionUtils.isOracle(dbJDBCMetadata);
    if (isOracle && tablePattern.contains(""String_Node_Str"")) {
      tablePattern=tablePattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    MappingTypeRetriever mappingTypeRetriever=null;
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
    String dbmsId=JavaSqlFactory.getDbmsId(dbConnection);
    if (StringUtils.isBlank(dbmsId)) {
      log.error(Messages.getString(""String_Node_Str""));
    }
 else {
      mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
    }
    if (mappingTypeRetriever == null) {
      EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbConnection.getDatabaseType(),false);
      if (dbType != null) {
        mappingTypeRetriever=MetadataTalendType.getMappingTypeRetrieverByProduct(dbType.getProduct());
      }
    }
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String fetchTableName=extractMeta.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      if (fetchTableName.equals(tablePattern)) {
        String columnName=getStringFromResultSet(columns,GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        int dataType=0;
        try {
          typeName=getStringFromResultSet(columns,GetColumn.TYPE_NAME.name());
          typeName=typeName.toUpperCase().trim();
          typeName=ManagementTextUtils.filterSpecialChar(typeName);
          if (typeName.startsWith(""String_Node_Str"")) {
            typeName=""String_Node_Str"";
          }
          typeName=MetadataToolHelper.validateValueForDBType(typeName);
          if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
            dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
            decimalDigits=getIntFromResultSet(columns,GetColumn.DECIMAL_DIGITS.name());
          }
 else           if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
            dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
            typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
          }
 else {
            dataType=getIntFromResultSet(columns,GetColumn.DATA_TYPE.name());
            if (!isOdbcTeradata) {
              numPrecRadix=getIntFromResultSet(columns,GetColumn.NUM_PREC_RADIX.name());
              decimalDigits=getIntFromResultSet(columns,GetColumn.DECIMAL_DIGITS.name());
            }
          }
          if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
            if (typeName.toLowerCase().equals(""String_Node_Str"")) {
              dataType=91;
            }
 else             if (typeName.toLowerCase().equals(""String_Node_Str"")) {
              dataType=92;
            }
          }
          if (!isOdbcTeradata) {
            int column_size=getIntFromResultSet(columns,GetColumn.COLUMN_SIZE.name());
            column.setLength(column_size);
          }
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
        column.setSqlDataType(sqlDataType);
        int nullable=0;
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
          String isNullable=getStringFromResultSet(columns,""String_Node_Str"");
          if (!isNullable.equals(""String_Node_Str"")) {
            nullable=1;
          }
        }
 else {
          nullable=getIntFromResultSet(columns,GetColumn.NULLABLE.name());
        }
        column.getSqlDataType().setNullable(NullableType.get(nullable));
        Object defaultvalue=null;
        try {
          if (!isOdbcTeradata) {
            defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
          }
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
        TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
        column.setInitialValue(defExpression);
        extractMeta.handleDefaultValue(column,dbJDBCMetadata);
        if (mappingTypeRetriever != null) {
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=mappingTypeRetriever.getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        String colComment=getColumnComment(dbJDBCMetadata,columns,tablePattern,column.getName(),schemaPattern);
        ColumnHelper.setComment(colComment,column);
        try {
          column.setNullable(nullable == 1);
        }
 catch (        Exception e) {
        }
        returnColumns.add(column);
        columnMap.put(columnName,column);
      }
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}","@Override public List<TdColumn> fillColumns(ColumnSet colSet,DatabaseMetaData dbJDBCMetadata,List<String> columnFilter,String columnPattern){
  if (colSet == null || dbJDBCMetadata == null) {
    return null;
  }
  List<TdColumn> returnColumns=new ArrayList<TdColumn>();
  Map<String,TdColumn> columnMap=new HashMap<String,TdColumn>();
  String typeName=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    String catalogName=getName(CatalogHelper.getParentCatalog(colSet));
    Schema schema=SchemaHelper.getParentSchema(colSet);
    if (catalogName == null && schema != null) {
      catalogName=getName(CatalogHelper.getParentCatalog(schema));
    }
    String schemaPattern=getName(schema);
    schemaPattern=""String_Node_Str"".equals(schemaPattern) ? null : schemaPattern;
    String tablePattern=getName(colSet);
    boolean isOracle=MetadataConnectionUtils.isOracle(dbJDBCMetadata);
    if (isOracle && tablePattern.contains(""String_Node_Str"")) {
      tablePattern=tablePattern.replaceAll(""String_Node_Str"",""String_Node_Str"");
    }
    ResultSet columns=dbJDBCMetadata.getColumns(catalogName,schemaPattern,tablePattern,columnPattern);
    boolean isOdbcTeradata=ConnectionUtils.isOdbcTeradata(dbJDBCMetadata);
    MappingTypeRetriever mappingTypeRetriever=null;
    DatabaseConnection dbConnection=(DatabaseConnection)ConnectionHelper.getConnection(colSet);
    String dbmsId=JavaSqlFactory.getDbmsId(dbConnection);
    if (StringUtils.isBlank(dbmsId)) {
      log.error(Messages.getString(""String_Node_Str""));
    }
 else {
      mappingTypeRetriever=MetadataTalendType.getMappingTypeRetriever(dbmsId);
    }
    if (mappingTypeRetriever == null) {
      EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbConnection.getDatabaseType(),false);
      if (dbType != null) {
        mappingTypeRetriever=MetadataTalendType.getMappingTypeRetrieverByProduct(dbType.getProduct());
      }
    }
    while (columns.next()) {
      int decimalDigits=0;
      int numPrecRadix=0;
      String fetchTableName=extractMeta.getStringMetaDataInfo(columns,ExtractManager.TABLE_NAME,null);
      fetchTableName=ManagementTextUtils.filterSpecialChar(fetchTableName);
      String databaseType=dbConnection.getDatabaseType();
      if (fetchTableName.equals(tablePattern) || databaseType.equals(EDatabaseTypeName.SQLITE.getDisplayName())) {
        String columnName=getStringFromResultSet(columns,GetColumn.COLUMN_NAME.name());
        TdColumn column=ColumnHelper.createTdColumn(columnName);
        int dataType=0;
        try {
          typeName=getStringFromResultSet(columns,GetColumn.TYPE_NAME.name());
          typeName=typeName.toUpperCase().trim();
          typeName=ManagementTextUtils.filterSpecialChar(typeName);
          if (typeName.startsWith(""String_Node_Str"")) {
            typeName=""String_Node_Str"";
          }
          typeName=MetadataToolHelper.validateValueForDBType(typeName);
          if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata) {
            dataType=Java2SqlType.getJavaTypeBySqlType(typeName);
            decimalDigits=getIntFromResultSet(columns,GetColumn.DECIMAL_DIGITS.name());
          }
 else           if (dbJDBCMetadata instanceof TeradataDataBaseMetadata) {
            dataType=Java2SqlType.getTeradataJavaTypeBySqlTypeAsInt(typeName);
            typeName=Java2SqlType.getTeradataJavaTypeBySqlTypeAsString(typeName);
          }
 else {
            dataType=getIntFromResultSet(columns,GetColumn.DATA_TYPE.name());
            if (!isOdbcTeradata) {
              numPrecRadix=getIntFromResultSet(columns,GetColumn.NUM_PREC_RADIX.name());
              decimalDigits=getIntFromResultSet(columns,GetColumn.DECIMAL_DIGITS.name());
            }
          }
          if (MetadataConnectionUtils.isMssql(dbJDBCMetadata)) {
            if (typeName.toLowerCase().equals(""String_Node_Str"")) {
              dataType=91;
            }
 else             if (typeName.toLowerCase().equals(""String_Node_Str"")) {
              dataType=92;
            }
          }
          if (!isOdbcTeradata) {
            int column_size=getIntFromResultSet(columns,GetColumn.COLUMN_SIZE.name());
            column.setLength(column_size);
          }
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        TdSqlDataType sqlDataType=MetadataConnectionUtils.createDataType(dataType,typeName,decimalDigits,numPrecRadix);
        column.setSqlDataType(sqlDataType);
        int nullable=0;
        if (dbJDBCMetadata instanceof DB2ForZosDataBaseMetadata || dbJDBCMetadata instanceof TeradataDataBaseMetadata || dbJDBCMetadata instanceof EmbeddedHiveDataBaseMetadata) {
          String isNullable=getStringFromResultSet(columns,""String_Node_Str"");
          if (!isNullable.equals(""String_Node_Str"")) {
            nullable=1;
          }
        }
 else {
          nullable=getIntFromResultSet(columns,GetColumn.NULLABLE.name());
        }
        column.getSqlDataType().setNullable(NullableType.get(nullable));
        Object defaultvalue=null;
        try {
          if (!isOdbcTeradata) {
            defaultvalue=columns.getObject(GetColumn.COLUMN_DEF.name());
          }
        }
 catch (        Exception e1) {
          log.warn(e1,e1);
        }
        String defaultStr=(defaultvalue != null) ? String.valueOf(defaultvalue) : null;
        TdExpression defExpression=createTdExpression(GetColumn.COLUMN_DEF.name(),defaultStr);
        column.setInitialValue(defExpression);
        extractMeta.handleDefaultValue(column,dbJDBCMetadata);
        if (mappingTypeRetriever != null) {
          String talendType=mappingTypeRetriever.getDefaultSelectedTalendType(typeName,extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""),(dbJDBCMetadata instanceof TeradataDataBaseMetadata) ? 0 : extractMeta.getIntMetaDataInfo(columns,""String_Node_Str""));
          column.setTalendType(talendType);
          String defaultSelectedDbType=mappingTypeRetriever.getDefaultSelectedDbType(talendType);
          column.setSourceType(defaultSelectedDbType);
        }
        String colComment=getColumnComment(dbJDBCMetadata,columns,tablePattern,column.getName(),schemaPattern);
        ColumnHelper.setComment(colComment,column);
        try {
          column.setNullable(nullable == 1);
        }
 catch (        Exception e) {
        }
        returnColumns.add(column);
        columnMap.put(columnName,column);
      }
    }
    columns.close();
    if (isLinked()) {
      ColumnSetHelper.addColumns(colSet,returnColumns);
    }
    fillPkandFk(colSet,columnMap,dbJDBCMetadata,catalogName,schemaPattern,tablePattern);
  }
 catch (  Exception e) {
    log.error(e,e);
  }
  return returnColumns;
}",0.9906780935197714
125540,"private void checkMDMConnection(){
  String username=mdmUsernameText.getText();
  String pass=mdmPasswordText.getText();
  String server=serverURLText.getText();
  if (username == null || pass == null || server == null) {
    page.setPageComplete(false);
    return;
  }
  AbsMdmConnectionHelper helper=null;
  helper=new S60MdmConnectionHelper();
  try {
    stub=helper.checkConnection(server,null,username,pass);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    stub=null;
  }
  if (stub != null) {
    page.setPageComplete(true);
    MessageBox box=new MessageBox(Display.getCurrent().getActiveShell(),SWT.ICON_WORKING | SWT.OK | SWT.CANCEL);
    box.setText(Messages.getString(""String_Node_Str""));
    box.setMessage(Messages.getString(""String_Node_Str""));
    box.open();
  }
 else {
    String titleMsg=Messages.getString(""String_Node_Str"");
    String mainMsg=Messages.getString(""String_Node_Str"");
    MessageDialog.openError(getShell(),titleMsg,mainMsg);
  }
}","private void checkMDMConnection(){
  String username=mdmUsernameText.getText();
  String pass=mdmPasswordText.getText();
  String server=serverURLText.getText();
  if (username == null || pass == null || server == null) {
    page.setPageComplete(false);
    return;
  }
  AbsMdmConnectionHelper helper=null;
  helper=new S60MdmConnectionHelper();
  try {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMDMService.class)) {
      IMDMService mdmService=(IMDMService)GlobalServiceRegister.getDefault().getService(IMDMService.class);
      if (mdmService != null) {
        SSLContext sslContext=mdmService.getSSLContext();
        HttpsURLConnection.setDefaultHostnameVerifier(mdmService.getDefaultHostnameVerifier());
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
      }
    }
    stub=helper.checkConnection(server,null,username,pass);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    stub=null;
  }
  if (stub != null) {
    page.setPageComplete(true);
    MessageBox box=new MessageBox(Display.getCurrent().getActiveShell(),SWT.ICON_WORKING | SWT.OK | SWT.CANCEL);
    box.setText(Messages.getString(""String_Node_Str""));
    box.setMessage(Messages.getString(""String_Node_Str""));
    box.open();
  }
 else {
    String titleMsg=Messages.getString(""String_Node_Str"");
    String mainMsg=Messages.getString(""String_Node_Str"");
    MessageDialog.openError(getShell(),titleMsg,mainMsg);
  }
}",0.8047289033836119
125541,"@Override protected void doRun(){
  RepositoryNode metadataNode=getMetadataNode(getCurrentRepositoryNode());
  IRepositoryView viewPart=getViewPart();
  if (viewPart != null) {
    viewPart.setFocus();
    viewPart.expand(metadataNode,true);
  }
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  RepositoryNode node=(RepositoryNode)selection.getFirstElement();
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (ERepositoryObjectType.METADATA_CON_TABLE.equals(nodeType)) {
    ConnectionItem connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
    nodeType=ERepositoryObjectType.getItemType(connectionItem);
  }
  if (ERepositoryObjectType.METADATA_FILE_POSITIONAL.equals(nodeType)) {
    createFilePositionalTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(nodeType)) {
    createFileDelimitedTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_CONNECTIONS.equals(nodeType)) {
    createDatabaseTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_REGEXP.equals(nodeType)) {
    createFileRegexpTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_XML.equals(nodeType)) {
    createFileXmlTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_EXCEL.equals(nodeType)) {
    createFileExcelTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_LDIF.equals(nodeType)) {
    createFileLdifTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_GENERIC_SCHEMA.equals(nodeType)) {
    createGenericSchemaWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_LDAP_SCHEMA.equals(nodeType)) {
    createLDAPSchemaWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA.equals(nodeType)) {
    createSalesforceSchemaWizard(node,true);
  }
 else {
    createExtenseNodeSchemaWizard(nodeType,node,true);
  }
}","@Override protected void doRun(){
  RepositoryNode metadataNode=getMetadataNode(getCurrentRepositoryNode());
  IRepositoryView viewPart=getViewPart();
  if (viewPart != null) {
    viewPart.setFocus();
    viewPart.expand(metadataNode,true);
  }
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  RepositoryNode node=(RepositoryNode)selection.getFirstElement();
  ERepositoryObjectType nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  if (ERepositoryObjectType.METADATA_CON_COLUMN.equals(nodeType)) {
    IRepositoryViewObject obj=node.getObject();
    if (obj instanceof MetadataColumnRepositoryObject) {
      node=node.getParent().getParent();
      nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
    }
  }
  if (ERepositoryObjectType.METADATA_CON_TABLE.equals(nodeType)) {
    ConnectionItem connectionItem=(ConnectionItem)node.getObject().getProperty().getItem();
    nodeType=ERepositoryObjectType.getItemType(connectionItem);
  }
  if (ERepositoryObjectType.METADATA_FILE_POSITIONAL.equals(nodeType)) {
    createFilePositionalTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_DELIMITED.equals(nodeType)) {
    createFileDelimitedTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_CONNECTIONS.equals(nodeType)) {
    createDatabaseTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_REGEXP.equals(nodeType)) {
    createFileRegexpTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_XML.equals(nodeType)) {
    createFileXmlTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_EXCEL.equals(nodeType)) {
    createFileExcelTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_FILE_LDIF.equals(nodeType)) {
    createFileLdifTableWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_GENERIC_SCHEMA.equals(nodeType)) {
    createGenericSchemaWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_LDAP_SCHEMA.equals(nodeType)) {
    createLDAPSchemaWizard(node,true);
  }
 else   if (ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA.equals(nodeType)) {
    createSalesforceSchemaWizard(node,true);
  }
 else {
    createExtenseNodeSchemaWizard(nodeType,node,true);
  }
}",0.9287696577243292
125542,"protected void doLoadDefault(){
  MessageDialog.openConfirm(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  ICoreService coreService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
    coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
    coreService.syncMappingsFileFromSystemToProject();
    tmpFileManager.reload();
    coreService.synchronizeMapptingXML();
  }
  super.load();
}","protected void doLoadDefault(){
  boolean confirm=MessageDialog.openConfirm(Display.getCurrent().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  if (confirm) {
    ICoreService coreService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreService.class)) {
      coreService=(ICoreService)GlobalServiceRegister.getDefault().getService(ICoreService.class);
      coreService.syncMappingsFileFromSystemToProject();
      tmpFileManager.reload();
      coreService.synchronizeMapptingXML();
    }
    super.load();
  }
}",0.9529724933451642
125543,"@Override protected void checkAndSetParameters(IProcess2 process2){
  IContextManager contextManager=process2.getContextManager();
  if (contextManager instanceof JobContextManager) {
    JobContextManager jobContextManager=(JobContextManager)contextManager;
    jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
    jobContextManager.setNewParametersMap(getNewParametersMap());
    Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
    List<IContext> listIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryAddGroupContext.keySet()) {
      List<IContext> list=repositoryAddGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        JobContext newJobContext=new JobContext(context.getName());
        List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
        for (int j=0; j < context.getContextParameterList().size(); j++) {
          IContextParameter param=context.getContextParameterList().get(j);
          IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
          if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
            IContextParameter clone=param.clone();
            clone.setContext(newJobContext);
            existedParameters.add(clone);
          }
        }
        if (!existedParameters.isEmpty()) {
          newJobContext.setContextParameterList(existedParameters);
          listIContext.add(newJobContext);
        }
      }
    }
    jobContextManager.setAddGroupContext(listIContext);
    jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
    Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
    List<IContext> removeListIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryRemoveGroupContext.keySet()) {
      List<IContext> list=repositoryRemoveGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        if (!removeListIContext.contains(context)) {
          removeListIContext.add(context);
        }
      }
    }
    jobContextManager.setRemoveGroupContext(removeListIContext);
    jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
    Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
    jobContextManager.setRenameGroupContext(getRenameContextGroup());
    jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
  }
  IUpdateManager updateManager=process2.getUpdateManager();
  if (updateManager instanceof AbstractUpdateManager) {
    AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
    if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
      manager.setSchemaRenamedMap(getSchemaRenamedMap());
    }
    if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
      manager.setColumnRenamedMap(getColumnRenamedMap());
    }
    if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
      manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
    }
    manager.setFromRepository(true);
    if (isAddColumn) {
      manager.setAddColumn(true);
      isAddColumn=false;
    }
  }
}","@Override protected void checkAndSetParameters(IProcess2 process2){
  IContextManager contextManager=process2.getContextManager();
  if (contextManager instanceof JobContextManager) {
    JobContextManager jobContextManager=(JobContextManager)contextManager;
    jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
    jobContextManager.setNewParametersMap(getNewParametersMap());
    Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
    if (checkAddContextGroup && repositoryAddGroupContext.isEmpty() && parameter instanceof ContextItem) {
      List<IContext> addContextGroupList=new ArrayList<IContext>();
      List<IContext> jobContexts=process2.getContextManager().getListContext();
      List<ContextType> repositoryContexts=((ContextItem)parameter).getContext();
      String repositoryId=((ContextItem)parameter).getProperty().getId();
      for (      ContextType repoContext : repositoryContexts) {
        boolean found=false;
        for (        IContext jobContext : jobContexts) {
          if (jobContext.getName().equals(repoContext.getName())) {
            found=true;
          }
        }
        if (!found) {
          IContext jobContext=new JobContext(repoContext.getName());
          List<ContextParameterType> repoParams=repoContext.getContextParameter();
          for (          ContextParameterType repoParam : repoParams) {
            IContextParameter jobParam=new JobContextParameter();
            jobParam.setName(repoParam.getName());
            jobParam.setContext(jobContext);
            jobParam.setComment(repoParam.getComment());
            jobParam.setPrompt(repoParam.getPrompt());
            jobParam.setSource(repositoryId);
            jobParam.setType(repoParam.getType());
            jobParam.setValue(repoParam.getValue());
            jobContext.getContextParameterList().add(jobParam);
          }
          addContextGroupList.add(jobContext);
        }
      }
      repositoryAddGroupContext.put((ContextItem)parameter,addContextGroupList);
    }
    List<IContext> listIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryAddGroupContext.keySet()) {
      List<IContext> list=repositoryAddGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        JobContext newJobContext=new JobContext(context.getName());
        List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
        for (int j=0; j < context.getContextParameterList().size(); j++) {
          IContextParameter param=context.getContextParameterList().get(j);
          IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
          if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
            IContextParameter clone=param.clone();
            clone.setContext(newJobContext);
            existedParameters.add(clone);
          }
        }
        if (!existedParameters.isEmpty()) {
          newJobContext.setContextParameterList(existedParameters);
          listIContext.add(newJobContext);
        }
      }
    }
    jobContextManager.setAddGroupContext(listIContext);
    jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
    Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
    List<IContext> removeListIContext=new ArrayList<IContext>();
    for (    ContextItem item : repositoryRemoveGroupContext.keySet()) {
      List<IContext> list=repositoryRemoveGroupContext.get(item);
      ListIterator<IContext> listIterator=list.listIterator();
      while (listIterator.hasNext()) {
        IContext context=listIterator.next();
        if (!removeListIContext.contains(context)) {
          removeListIContext.add(context);
        }
      }
    }
    jobContextManager.setRemoveGroupContext(removeListIContext);
    jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
    Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
    jobContextManager.setRenameGroupContext(getRenameContextGroup());
    jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
  }
  IUpdateManager updateManager=process2.getUpdateManager();
  if (updateManager instanceof AbstractUpdateManager) {
    AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
    if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
      manager.setSchemaRenamedMap(getSchemaRenamedMap());
    }
    if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
      manager.setColumnRenamedMap(getColumnRenamedMap());
    }
    if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
      manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
    }
    manager.setFromRepository(true);
    if (isAddColumn) {
      manager.setAddColumn(true);
      isAddColumn=false;
    }
  }
}",0.8218930227298428
125544,"private static boolean updateContext(JobContextManager repositoryContextManager,ContextItem item,boolean show,boolean onlySimpleShow){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(item.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.CONTEXT_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(item,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.CONTEXT);
      types.add(EUpdateItemType.CONTEXT_GROUP);
      return types;
    }
  }
;
  if (repositoryContextManager != null) {
    Map<ContextItem,List<IContext>> repositoryContextGroupMap=new HashMap<ContextItem,List<IContext>>();
    List<IContext> addGroupContext=repositoryContextManager.getAddGroupContext();
    if (!addGroupContext.isEmpty()) {
      repositoryContextGroupMap.put(item,addGroupContext);
    }
    repositoryUpdateManager.setRepositoryAddGroupContext(repositoryContextGroupMap);
    Map<ContextItem,List<IContext>> removeRepositoryContextGroupMap=new HashMap<ContextItem,List<IContext>>();
    List<IContext> removeGroupContext=repositoryContextManager.getRemoveGroupContext();
    if (!removeGroupContext.isEmpty()) {
      removeRepositoryContextGroupMap.put(item,removeGroupContext);
    }
    repositoryUpdateManager.setRepositoryRemoveGroupContext(removeRepositoryContextGroupMap);
    Map<ContextItem,List<IContext>> renameRepositoryContextGroupMap=new HashMap<ContextItem,List<IContext>>();
    Map<IContext,String> renameContextGroup=new HashMap<IContext,String>();
    Map<IContext,String> renameGroupContext=repositoryContextManager.getRenameGroupContext();
    List<IContext> renameGroupList=new ArrayList<IContext>();
    for (    IContext renameGroup : renameGroupContext.keySet()) {
      renameGroupList.add(renameGroup);
      renameContextGroup.put(renameGroup,renameGroupContext.get(renameGroup));
    }
    if (!renameGroupContext.isEmpty()) {
      renameRepositoryContextGroupMap.put(item,renameGroupList);
    }
    repositoryUpdateManager.setRepositoryRenameGroupContext(renameRepositoryContextGroupMap);
    repositoryUpdateManager.setRenameContextGroup(renameContextGroup);
    Map<ContextItem,Map<String,String>> repositoryRenamedMap=new HashMap<ContextItem,Map<String,String>>();
    if (!repositoryContextManager.getNameMap().isEmpty()) {
      repositoryRenamedMap.put(item,repositoryContextManager.getNameMap());
    }
    repositoryUpdateManager.setContextRenamedMap(repositoryRenamedMap);
    Map<ContextItem,Set<String>> newParametersMap=new HashMap<ContextItem,Set<String>>();
    if (!repositoryContextManager.getNewParameters().isEmpty()) {
      newParametersMap.put(item,repositoryContextManager.getNewParameters());
    }
    repositoryUpdateManager.setNewParametersMap(newParametersMap);
  }
  try {
    repositoryUpdateManager.updateConnection(item);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}","private static boolean updateContext(JobContextManager repositoryContextManager,ContextItem item,boolean show,boolean onlySimpleShow,boolean detectAddContextGroup){
  List<Relation> relations=RelationshipItemBuilder.getInstance().getItemsRelatedTo(item.getProperty().getId(),RelationshipItemBuilder.LATEST_VERSION,RelationshipItemBuilder.CONTEXT_RELATION);
  RepositoryUpdateManager repositoryUpdateManager=new RepositoryUpdateManager(item,relations){
    @Override public Set<EUpdateItemType> getTypes(){
      Set<EUpdateItemType> types=new HashSet<EUpdateItemType>();
      types.add(EUpdateItemType.CONTEXT);
      types.add(EUpdateItemType.CONTEXT_GROUP);
      return types;
    }
  }
;
  repositoryUpdateManager.checkAddContextGroup=detectAddContextGroup;
  if (repositoryContextManager != null) {
    Map<ContextItem,List<IContext>> repositoryContextGroupMap=new HashMap<ContextItem,List<IContext>>();
    List<IContext> addGroupContext=repositoryContextManager.getAddGroupContext();
    if (!addGroupContext.isEmpty()) {
      repositoryContextGroupMap.put(item,addGroupContext);
    }
    repositoryUpdateManager.setRepositoryAddGroupContext(repositoryContextGroupMap);
    Map<ContextItem,List<IContext>> removeRepositoryContextGroupMap=new HashMap<ContextItem,List<IContext>>();
    List<IContext> removeGroupContext=repositoryContextManager.getRemoveGroupContext();
    if (!removeGroupContext.isEmpty()) {
      removeRepositoryContextGroupMap.put(item,removeGroupContext);
    }
    repositoryUpdateManager.setRepositoryRemoveGroupContext(removeRepositoryContextGroupMap);
    Map<ContextItem,List<IContext>> renameRepositoryContextGroupMap=new HashMap<ContextItem,List<IContext>>();
    Map<IContext,String> renameContextGroup=new HashMap<IContext,String>();
    Map<IContext,String> renameGroupContext=repositoryContextManager.getRenameGroupContext();
    List<IContext> renameGroupList=new ArrayList<IContext>();
    for (    IContext renameGroup : renameGroupContext.keySet()) {
      renameGroupList.add(renameGroup);
      renameContextGroup.put(renameGroup,renameGroupContext.get(renameGroup));
    }
    if (!renameGroupContext.isEmpty()) {
      renameRepositoryContextGroupMap.put(item,renameGroupList);
    }
    repositoryUpdateManager.setRepositoryRenameGroupContext(renameRepositoryContextGroupMap);
    repositoryUpdateManager.setRenameContextGroup(renameContextGroup);
    Map<ContextItem,Map<String,String>> repositoryRenamedMap=new HashMap<ContextItem,Map<String,String>>();
    if (!repositoryContextManager.getNameMap().isEmpty()) {
      repositoryRenamedMap.put(item,repositoryContextManager.getNameMap());
    }
    repositoryUpdateManager.setContextRenamedMap(repositoryRenamedMap);
    Map<ContextItem,Set<String>> newParametersMap=new HashMap<ContextItem,Set<String>>();
    if (!repositoryContextManager.getNewParameters().isEmpty()) {
      newParametersMap.put(item,repositoryContextManager.getNewParameters());
    }
    repositoryUpdateManager.setNewParametersMap(newParametersMap);
  }
  try {
    repositoryUpdateManager.updateConnection(item);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  return repositoryUpdateManager.doWork(show,onlySimpleShow);
}",0.9842915488532832
125545,"/** 
 * ggu Comment method ""checkJobItemsForUpdate"".
 * @param types - need update types of jobs.
 * @param sourceIdMap - map old source id to new one.
 * @param sourceItem - modified repository item.
 * @return
 */
private List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types,final boolean onlySimpleShow) throws InterruptedException {
  if (types == null || types.isEmpty()) {
    return null;
  }
  RepositoryUpdateManagerHelper helper=new RepositoryUpdateManagerHelper(){
    @Override protected boolean enableCheckItem(){
      return parameter != null && relations != null && !onlyOpeningJob;
    }
    @Override protected List<Relation> getRelations(){
      return relations;
    }
    @Override protected List<UpdateResult> getOtherUpdateResults(    IProgressMonitor parentMonitor,    List<IProcess2> openedProcessList,    Set<IUpdateItemType> types){
      List<UpdateResult> resultList=new ArrayList<UpdateResult>();
      if (isDetectAndUpdate) {
        resultList=updateAllProcess(parentMonitor,resultList,openedProcessList,types,false);
      }
      if (!onlyOpeningJob) {
        List<UpdateResult> templateSetUpdate=checkSettingInJobTemplateWizard();
        if (templateSetUpdate != null) {
          resultList.addAll(templateSetUpdate);
        }
      }
      return resultList;
    }
    @Override protected void checkAndSetParameters(    IProcess2 process2){
      IContextManager contextManager=process2.getContextManager();
      if (contextManager instanceof JobContextManager) {
        JobContextManager jobContextManager=(JobContextManager)contextManager;
        jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
        jobContextManager.setNewParametersMap(getNewParametersMap());
        Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
        List<IContext> listIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryAddGroupContext.keySet()) {
          List<IContext> list=repositoryAddGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            JobContext newJobContext=new JobContext(context.getName());
            List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
            for (int j=0; j < context.getContextParameterList().size(); j++) {
              IContextParameter param=context.getContextParameterList().get(j);
              IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
              if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
                IContextParameter clone=param.clone();
                clone.setContext(newJobContext);
                existedParameters.add(clone);
              }
            }
            if (!existedParameters.isEmpty()) {
              newJobContext.setContextParameterList(existedParameters);
              listIContext.add(newJobContext);
            }
          }
        }
        jobContextManager.setAddGroupContext(listIContext);
        jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
        Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
        List<IContext> removeListIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryRemoveGroupContext.keySet()) {
          List<IContext> list=repositoryRemoveGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            if (!removeListIContext.contains(context)) {
              removeListIContext.add(context);
            }
          }
        }
        jobContextManager.setRemoveGroupContext(removeListIContext);
        jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
        Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
        jobContextManager.setRenameGroupContext(getRenameContextGroup());
        jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
      }
      IUpdateManager updateManager=process2.getUpdateManager();
      if (updateManager instanceof AbstractUpdateManager) {
        AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
        if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
          manager.setSchemaRenamedMap(getSchemaRenamedMap());
        }
        if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
          manager.setColumnRenamedMap(getColumnRenamedMap());
        }
        if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
          manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
        }
        manager.setFromRepository(true);
        if (isAddColumn) {
          manager.setAddColumn(true);
          isAddColumn=false;
        }
      }
    }
  }
;
  return helper.checkJobItemsForUpdate(parentMonitor,types);
}","/** 
 * ggu Comment method ""checkJobItemsForUpdate"".
 * @param types - need update types of jobs.
 * @param sourceIdMap - map old source id to new one.
 * @param sourceItem - modified repository item.
 * @return
 */
private List<UpdateResult> checkJobItemsForUpdate(IProgressMonitor parentMonitor,final Set<IUpdateItemType> types,final boolean onlySimpleShow) throws InterruptedException {
  if (types == null || types.isEmpty()) {
    return null;
  }
  RepositoryUpdateManagerHelper helper=new RepositoryUpdateManagerHelper(){
    @Override protected boolean enableCheckItem(){
      return parameter != null && relations != null && !onlyOpeningJob;
    }
    @Override protected List<Relation> getRelations(){
      return relations;
    }
    @Override protected List<UpdateResult> getOtherUpdateResults(    IProgressMonitor parentMonitor,    List<IProcess2> openedProcessList,    Set<IUpdateItemType> types){
      List<UpdateResult> resultList=new ArrayList<UpdateResult>();
      if (isDetectAndUpdate) {
        resultList=updateAllProcess(parentMonitor,resultList,openedProcessList,types,false);
      }
      if (!onlyOpeningJob) {
        List<UpdateResult> templateSetUpdate=checkSettingInJobTemplateWizard();
        if (templateSetUpdate != null) {
          resultList.addAll(templateSetUpdate);
        }
      }
      return resultList;
    }
    @Override protected void checkAndSetParameters(    IProcess2 process2){
      IContextManager contextManager=process2.getContextManager();
      if (contextManager instanceof JobContextManager) {
        JobContextManager jobContextManager=(JobContextManager)contextManager;
        jobContextManager.setRepositoryRenamedMap(getContextRenamedMap());
        jobContextManager.setNewParametersMap(getNewParametersMap());
        Map<ContextItem,List<IContext>> repositoryAddGroupContext=getRepositoryAddGroupContext();
        if (checkAddContextGroup && repositoryAddGroupContext.isEmpty() && parameter instanceof ContextItem) {
          List<IContext> addContextGroupList=new ArrayList<IContext>();
          List<IContext> jobContexts=process2.getContextManager().getListContext();
          List<ContextType> repositoryContexts=((ContextItem)parameter).getContext();
          String repositoryId=((ContextItem)parameter).getProperty().getId();
          for (          ContextType repoContext : repositoryContexts) {
            boolean found=false;
            for (            IContext jobContext : jobContexts) {
              if (jobContext.getName().equals(repoContext.getName())) {
                found=true;
              }
            }
            if (!found) {
              IContext jobContext=new JobContext(repoContext.getName());
              List<ContextParameterType> repoParams=repoContext.getContextParameter();
              for (              ContextParameterType repoParam : repoParams) {
                IContextParameter jobParam=new JobContextParameter();
                jobParam.setName(repoParam.getName());
                jobParam.setContext(jobContext);
                jobParam.setComment(repoParam.getComment());
                jobParam.setPrompt(repoParam.getPrompt());
                jobParam.setSource(repositoryId);
                jobParam.setType(repoParam.getType());
                jobParam.setValue(repoParam.getValue());
                jobContext.getContextParameterList().add(jobParam);
              }
              addContextGroupList.add(jobContext);
            }
          }
          repositoryAddGroupContext.put((ContextItem)parameter,addContextGroupList);
        }
        List<IContext> listIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryAddGroupContext.keySet()) {
          List<IContext> list=repositoryAddGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            JobContext newJobContext=new JobContext(context.getName());
            List<IContextParameter> existedParameters=new ArrayList<IContextParameter>();
            for (int j=0; j < context.getContextParameterList().size(); j++) {
              IContextParameter param=context.getContextParameterList().get(j);
              IContextParameter contextParameter=jobContextManager.getDefaultContext().getContextParameter(param.getName());
              if (contextParameter != null && param.getName().equals(contextParameter.getName()) && item.getProperty().getId().equals(contextParameter.getSource())) {
                IContextParameter clone=param.clone();
                clone.setContext(newJobContext);
                existedParameters.add(clone);
              }
            }
            if (!existedParameters.isEmpty()) {
              newJobContext.setContextParameterList(existedParameters);
              listIContext.add(newJobContext);
            }
          }
        }
        jobContextManager.setAddGroupContext(listIContext);
        jobContextManager.setAddContextGroupMap(repositoryAddGroupContext);
        Map<ContextItem,List<IContext>> repositoryRemoveGroupContext=getRepositoryRemoveGroupContext();
        List<IContext> removeListIContext=new ArrayList<IContext>();
        for (        ContextItem item : repositoryRemoveGroupContext.keySet()) {
          List<IContext> list=repositoryRemoveGroupContext.get(item);
          ListIterator<IContext> listIterator=list.listIterator();
          while (listIterator.hasNext()) {
            IContext context=listIterator.next();
            if (!removeListIContext.contains(context)) {
              removeListIContext.add(context);
            }
          }
        }
        jobContextManager.setRemoveGroupContext(removeListIContext);
        jobContextManager.setRemoveContextGroupMap(repositoryRemoveGroupContext);
        Map<ContextItem,List<IContext>> repositoryRenameGroupContext=getRepositoryRenameGroupContext();
        jobContextManager.setRenameGroupContext(getRenameContextGroup());
        jobContextManager.setRenameContextGroupMap(repositoryRenameGroupContext);
      }
      IUpdateManager updateManager=process2.getUpdateManager();
      if (updateManager instanceof AbstractUpdateManager) {
        AbstractUpdateManager manager=(AbstractUpdateManager)updateManager;
        if (getSchemaRenamedMap() != null && !getSchemaRenamedMap().isEmpty()) {
          manager.setSchemaRenamedMap(getSchemaRenamedMap());
        }
        if (getColumnRenamedMap() != null && !getColumnRenamedMap().isEmpty()) {
          manager.setColumnRenamedMap(getColumnRenamedMap());
        }
        if (getDeletedOrReselectTablesMap() != null && !getDeletedOrReselectTablesMap().isEmpty()) {
          manager.setDeletedOrReselectTablesMap(getDeletedOrReselectTablesMap());
        }
        manager.setFromRepository(true);
        if (isAddColumn) {
          manager.setAddColumn(true);
          isAddColumn=false;
        }
      }
    }
  }
;
  return helper.checkJobItemsForUpdate(parentMonitor,types);
}",0.8621606380407637
125546,"@Override public synchronized List<IMetadataColumn> getListColumns(boolean withUnselected){
  Iterator<IMetadataColumn> it=this.listColumns.iterator();
  while (it.hasNext()) {
    IMetadataColumn column=it.next();
    if (!column.isUsefulColumn()) {
      this.unusedColumns.add(column);
      it.remove();
    }
  }
  Iterator<IMetadataColumn> it2=this.unusedColumns.iterator();
  while (it2.hasNext()) {
    IMetadataColumn column=it2.next();
    if (column.isUsefulColumn()) {
      this.listColumns.add(column);
      it2.remove();
    }
  }
  if (withUnselected) {
    List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
    temp.addAll(this.listColumns);
    temp.addAll(this.unusedColumns);
    if (originalColumns != null) {
      Collections.sort(temp,new Comparator<IMetadataColumn>(){
        @Override public int compare(        IMetadataColumn o1,        IMetadataColumn o2){
          int index1=originalColumns.indexOf(o1.getLabel());
          int index2=originalColumns.indexOf(o2.getLabel());
          return index1 - index2;
        }
      }
);
    }
    return temp;
  }
  return this.listColumns;
}","@Override public synchronized List<IMetadataColumn> getListColumns(boolean withUnselected){
  Iterator<IMetadataColumn> it=this.listColumns.iterator();
  while (it.hasNext()) {
    IMetadataColumn column=it.next();
    if (!column.isUsefulColumn()) {
      this.unusedColumns.add(column);
      it.remove();
    }
  }
  Iterator<IMetadataColumn> it2=this.unusedColumns.iterator();
  while (it2.hasNext()) {
    IMetadataColumn column=it2.next();
    if (column.isUsefulColumn()) {
      this.listColumns.add(column);
      it2.remove();
    }
  }
  if (withUnselected) {
    List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
    temp.addAll(this.listColumns);
    temp.addAll(this.unusedColumns);
    if (isRepository && originalColumns != null) {
      Collections.sort(temp,new Comparator<IMetadataColumn>(){
        @Override public int compare(        IMetadataColumn o1,        IMetadataColumn o2){
          int index1=originalColumns.indexOf(o1.getLabel());
          int index2=originalColumns.indexOf(o2.getLabel());
          return index1 - index2;
        }
      }
);
    }
    return temp;
  }
  return this.listColumns;
}",0.99297629499561
125547,"public IODataComponent getDataComponent(IConnection connection){
  for (  IODataComponent current : inputs) {
    if (current.getUniqueName().equals(connection.getUniqueName())) {
      return current;
    }
  }
  for (  IODataComponent current : ouputs) {
    if (current.getUniqueName().equals(connection.getUniqueName())) {
      return current;
    }
  }
  return null;
}","public IODataComponent getDataComponent(IConnection connection){
  for (  IODataComponent current : inputs) {
    if (current.getUniqueName().equals(connection.getUniqueName()) && current.getConnection().getSource().getUniqueName().equals(connection.getSource().getUniqueName()) && current.getConnection().getTarget().getUniqueName().equals(connection.getTarget().getUniqueName())) {
      return current;
    }
  }
  for (  IODataComponent current : ouputs) {
    if (current.getUniqueName().equals(connection.getUniqueName()) && current.getConnection().getSource().getUniqueName().equals(connection.getSource().getUniqueName()) && current.getConnection().getTarget().getUniqueName().equals(connection.getTarget().getUniqueName())) {
      return current;
    }
  }
  return null;
}",0.6476683937823834
125548,"public ELibraryInstallStatus getStatus(){
  String mvnUriStatusKey=getMavenUri(true);
  final ELibraryInstallStatus eLibraryInstallStatus=ModuleStatusProvider.getStatusMap().get(mvnUriStatusKey);
  if (eLibraryInstallStatus != null) {
    return eLibraryInstallStatus;
  }
 else {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
    }
 else {
      String localMavenUri=mvnUriStatusKey.replace(""String_Node_Str"",""String_Node_Str"" + MavenConstants.LOCAL_RESOLUTION_URL + ""String_Node_Str"");
      try {
        getMavenResolver().resolve(localMavenUri);
        status=ELibraryInstallStatus.INSTALLED;
      }
 catch (      Exception e) {
        status=ELibraryInstallStatus.NOT_INSTALLED;
      }
    }
    ModuleStatusProvider.getStatusMap().put(mvnUriStatusKey,status);
  }
  return this.status;
}","public ELibraryInstallStatus getStatus(){
  String mvnUriStatusKey=getMavenUri(true);
  final ELibraryInstallStatus eLibraryInstallStatus=ModuleStatusProvider.getStatusMap().get(mvnUriStatusKey);
  if (eLibraryInstallStatus != null) {
    return eLibraryInstallStatus;
  }
 else {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
      ModuleStatusProvider.getStatusMap().put(mvnUriStatusKey,status);
    }
 else {
      resolveStatusLocally(mvnUriStatusKey);
    }
  }
  return this.status;
}",0.6941045606229144
125549,"public static void reset(){
  statusMap.clear();
}","public static void reset(){
  statusMap.clear();
  deployStatusMap.clear();
}",0.7874015748031497
125550,"protected void addDependencies(Model model){
  Set<ModuleNeeded> runningModules=getDependenciesModules();
  if (runningModules != null) {
    List<Dependency> existedDependencies=model.getDependencies();
    if (existedDependencies == null) {
      existedDependencies=new ArrayList<Dependency>();
      model.setDependencies(existedDependencies);
    }
    for (    ModuleNeeded module : runningModules) {
      Dependency dependency=null;
      if (module.getStatus() != ELibraryInstallStatus.NOT_INSTALLED) {
        dependency=PomUtil.createModuleDependency(module.getMavenUri(true));
      }
      if (dependency != null) {
        existedDependencies.add(dependency);
      }
    }
  }
}","protected void addDependencies(Model model){
  Set<ModuleNeeded> runningModules=getDependenciesModules();
  if (runningModules != null) {
    List<Dependency> existedDependencies=model.getDependencies();
    if (existedDependencies == null) {
      existedDependencies=new ArrayList<Dependency>();
      model.setDependencies(existedDependencies);
    }
    for (    ModuleNeeded module : runningModules) {
      Dependency dependency=null;
      if (module.getDeployStatus() == ELibraryInstallStatus.DEPLOYED) {
        dependency=PomUtil.createModuleDependency(module.getMavenUri(true));
      }
      if (dependency != null) {
        existedDependencies.add(dependency);
      }
    }
  }
}",0.9834174477289112
125551,"public static boolean isAvailable(MavenArtifact artifact){
  String absArtifactPath=getAbsArtifactPath(artifact);
  if (absArtifactPath != null) {
    return true;
  }
  return false;
}","public static boolean isAvailable(String mvnUri){
  MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(mvnUri);
  if (artifact != null) {
    return isAvailable(artifact);
  }
  return false;
}",0.6472148541114059
125552,"private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
            final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
            statusMap.put(mvnUri,ELibraryInstallStatus.INSTALLED);
          }
        }
 else {
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
          final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
          statusMap.put(module.getMavenUri(),ELibraryInstallStatus.INSTALLED);
        }
        installedModules.add(module.getName());
      }
 catch (      Exception e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(new Exception(""String_Node_Str"" + module.getName() + ""String_Node_Str""));
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!installedModules.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
  }
}","private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
            final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
            statusMap.put(mvnUri,ELibraryInstallStatus.INSTALLED);
            ModuleStatusProvider.getDeployStatusMap().put(mvnUri,ELibraryInstallStatus.DEPLOYED);
          }
        }
 else {
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
          final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
          statusMap.put(module.getMavenUri(),ELibraryInstallStatus.INSTALLED);
          ModuleStatusProvider.getDeployStatusMap().put(module.getMavenUri(),ELibraryInstallStatus.DEPLOYED);
        }
        installedModules.add(module.getName());
      }
 catch (      Exception e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(new Exception(""String_Node_Str"" + module.getName() + ""String_Node_Str""));
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!installedModules.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
  }
}",0.953900709219858
125553,"/** 
 * DOC nrousseau Comment method ""resolveJar"".
 * @param jarNeeded
 * @param jarFile
 * @param manager
 * @param customNexusServer
 * @param uri
 * @return
 * @throws Exception
 * @throws IOException
 */
public File resolveJar(TalendLibsServerManager manager,final NexusServerBean customNexusServer,String uri) throws Exception, IOException {
  File resolvedFile=null;
  if (!isLocalJarSameAsNexus(manager,customNexusServer,uri)) {
    resolvedFile=manager.getMavenResolver().resolve(uri);
  }
  if (resolvedFile != null) {
    final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
    statusMap.put(uri,ELibraryInstallStatus.INSTALLED);
    mavenJarInstalled.put(uri,resolvedFile.getAbsolutePath());
  }
  updateLastResolveDate(uri);
  if (resolvedFile != null) {
    try {
      String pomPath=resolvedFile.getParent();
      String name=resolvedFile.getName();
      int indexOf=name.lastIndexOf(""String_Node_Str"");
      if (indexOf != -1) {
        pomPath=pomPath + ""String_Node_Str"" + name.substring(0,indexOf)+ ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
 else {
        pomPath=pomPath + name + ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
      File pomFile=new File(pomPath);
      if (!pomFile.exists()) {
        MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(uri);
        File generatedPom=new File(PomUtil.generatePom(parseMvnUrl));
        FilesUtils.copyFile(generatedPom,pomFile);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return resolvedFile;
}","/** 
 * DOC nrousseau Comment method ""resolveJar"".
 * @param jarNeeded
 * @param jarFile
 * @param manager
 * @param customNexusServer
 * @param uri
 * @return
 * @throws Exception
 * @throws IOException
 */
public File resolveJar(TalendLibsServerManager manager,final NexusServerBean customNexusServer,String uri) throws Exception, IOException {
  File resolvedFile=null;
  if (!isLocalJarSameAsNexus(manager,customNexusServer,uri)) {
    resolvedFile=manager.getMavenResolver().resolve(uri);
  }
  if (resolvedFile != null) {
    final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
    statusMap.put(uri,ELibraryInstallStatus.INSTALLED);
    ModuleStatusProvider.getDeployStatusMap().put(uri,ELibraryInstallStatus.DEPLOYED);
    mavenJarInstalled.put(uri,resolvedFile.getAbsolutePath());
  }
  updateLastResolveDate(uri);
  if (resolvedFile != null) {
    try {
      String pomPath=resolvedFile.getParent();
      String name=resolvedFile.getName();
      int indexOf=name.lastIndexOf(""String_Node_Str"");
      if (indexOf != -1) {
        pomPath=pomPath + ""String_Node_Str"" + name.substring(0,indexOf)+ ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
 else {
        pomPath=pomPath + name + ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
      File pomFile=new File(pomPath);
      if (!pomFile.exists()) {
        MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(uri);
        File generatedPom=new File(PomUtil.generatePom(parseMvnUrl));
        FilesUtils.copyFile(generatedPom,pomFile);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return resolvedFile;
}",0.973172987974098
125554,"public ELibraryInstallStatus getStatus(){
  String mvnUriStatusKey=getMavenUri(true);
  final ELibraryInstallStatus eLibraryInstallStatus=ModuleStatusProvider.getStatusMap().get(mvnUriStatusKey);
  if (eLibraryInstallStatus != null) {
    return eLibraryInstallStatus;
  }
 else {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
      ModuleStatusProvider.getStatusMap().put(mvnUriStatusKey,status);
    }
 else {
      resolveStatusLocally(mvnUriStatusKey);
    }
  }
  return this.status;
}","public ELibraryInstallStatus getStatus(){
  String mvnUriStatusKey=getMavenUri(true);
  final ELibraryInstallStatus eLibraryInstallStatus=ModuleStatusProvider.getStatusMap().get(mvnUriStatusKey);
  if (eLibraryInstallStatus != null) {
    return eLibraryInstallStatus;
  }
 else   if (mvnUriStatusKey != null) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
      ModuleStatusProvider.getStatusMap().put(mvnUriStatusKey,status);
    }
 else {
      resolveStatusLocally(mvnUriStatusKey);
    }
  }
  return this.status;
}",0.9796186719263642
125555,"public ELibraryInstallStatus getDeployStatus(){
  String mvnUriStatusKey=getMavenUri(true);
  final ELibraryInstallStatus eLibraryDeployStatus=ModuleStatusProvider.getDeployStatusMap().get(mvnUriStatusKey);
  if (eLibraryDeployStatus != null) {
    return eLibraryDeployStatus;
  }
 else {
    resolveStatusLocally(mvnUriStatusKey);
  }
  return this.installStatus;
}","public ELibraryInstallStatus getDeployStatus(){
  String mvnUriStatusKey=getMavenUri(true);
  final ELibraryInstallStatus eLibraryDeployStatus=ModuleStatusProvider.getDeployStatusMap().get(mvnUriStatusKey);
  if (eLibraryDeployStatus != null) {
    return eLibraryDeployStatus;
  }
 else   if (mvnUriStatusKey != null) {
    resolveStatusLocally(mvnUriStatusKey);
  }
  return this.installStatus;
}",0.9594771241830066
125556,"/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  EMap<String,String> libIndex=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
  EMap<String,String> mavenIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    File fileToDeploy=null;
    String moduleLocation=module.getModuleLocaion();
    Set<String> toDeploy=new HashSet<String>();
    if (module.getMavenUri() == null && mavenIndex.get(module.getModuleName()) != null) {
      final String[] split=mavenIndex.get(module.getModuleName()).split(MavenUrlHelper.MVN_INDEX_SPLITER);
      for (      String mvnUri : split) {
        toDeploy.add(mvnUri);
      }
    }
 else {
      toDeploy.add(module.getMavenUri(true));
    }
    for (    String mavenUri : toDeploy) {
      if (checkJarInstalledInMaven(mavenUri)) {
        continue;
      }
      boolean found=false;
      if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
        if (libIndex.containsKey(module.getModuleName())) {
          String relativePath=libIndex.get(module.getModuleName());
          if (!relativePath.equals(moduleLocation)) {
            if (!urlWarned.contains(moduleLocation)) {
              System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
              urlWarned.add(moduleLocation);
            }
            moduleLocation=relativePath;
          }
        }
        if (checkJarInstalledFromPlatform(moduleLocation)) {
          libIndex.put(module.getModuleName(),moduleLocation);
          modified=true;
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(moduleLocation));
        }
      }
      if (!found) {
        EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
        String relativePath=jarsToRelative.get(module.getModuleName());
        if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(relativePath));
        }
      }
      if (!found) {
        try {
          fileToDeploy=getJarFile(module.getModuleName());
        }
 catch (        MalformedURLException e) {
          ExceptionHandler.process(e);
        }
        if (fileToDeploy != null) {
          found=true;
        }
      }
      if (fileToDeploy != null && !fileToDeploy.exists()) {
        fileToDeploy=null;
        found=false;
      }
      if (!found) {
        ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
      }
      if (fileToDeploy != null) {
        deployFile(fileToDeploy,mavenUri,false,monitorWrap);
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}","/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  EMap<String,String> libIndex=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
  EMap<String,String> mavenIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    File fileToDeploy=null;
    String moduleLocation=module.getModuleLocaion();
    Set<String> toDeploy=new HashSet<String>();
    if (module.getMavenUri() == null && mavenIndex.get(module.getModuleName()) != null) {
      final String[] split=mavenIndex.get(module.getModuleName()).split(MavenUrlHelper.MVN_INDEX_SPLITER);
      for (      String mvnUri : split) {
        toDeploy.add(mvnUri);
      }
    }
 else {
      if (module.getMavenUri(true) != null) {
        toDeploy.add(module.getMavenUri(true));
      }
    }
    for (    String mavenUri : toDeploy) {
      if (checkJarInstalledInMaven(mavenUri)) {
        continue;
      }
      boolean found=false;
      if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
        if (libIndex.containsKey(module.getModuleName())) {
          String relativePath=libIndex.get(module.getModuleName());
          if (!relativePath.equals(moduleLocation)) {
            if (!urlWarned.contains(moduleLocation)) {
              System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
              urlWarned.add(moduleLocation);
            }
            moduleLocation=relativePath;
          }
        }
        if (checkJarInstalledFromPlatform(moduleLocation)) {
          libIndex.put(module.getModuleName(),moduleLocation);
          modified=true;
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(moduleLocation));
        }
      }
      if (!found) {
        EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
        String relativePath=jarsToRelative.get(module.getModuleName());
        if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(relativePath));
        }
      }
      if (!found) {
        try {
          fileToDeploy=getJarFile(module.getModuleName());
        }
 catch (        MalformedURLException e) {
          ExceptionHandler.process(e);
        }
        if (fileToDeploy != null) {
          found=true;
        }
      }
      if (fileToDeploy != null && !fileToDeploy.exists()) {
        fileToDeploy=null;
        found=false;
      }
      if (!found) {
        ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
      }
      if (fileToDeploy != null) {
        deployFile(fileToDeploy,mavenUri,false,monitorWrap);
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}",0.9907529722589168
125557,"@Override public String getJarPathFromMaven(String jarNameOrMavenUri){
  String libPath=null;
  Set<String> mvnUris=new HashSet<String>();
  if (MavenUrlHelper.isMvnUrl(jarNameOrMavenUri)) {
    mvnUris.add(jarNameOrMavenUri);
  }
 else {
    EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
    String mavenUri=jarsToMavenUri.get(jarNameOrMavenUri);
    if (mavenUri == null) {
      mvnUris.add(MavenUrlHelper.generateMvnUrlForJarName(jarNameOrMavenUri));
    }
 else {
      for (      String uri : mavenUri.split(MavenUrlHelper.MVN_INDEX_SPLITER)) {
        mvnUris.add(uri);
      }
    }
  }
  for (  String uriToCheck : mvnUris) {
    if (checkJarInstalledInMaven(uriToCheck)) {
      libPath=mavenJarInstalled.get(uriToCheck);
      if (libPath != null) {
        return libPath;
      }
    }
  }
  return null;
}","@Override public String getJarPathFromMaven(String jarNameOrMavenUri){
  if (jarNameOrMavenUri == null) {
    return null;
  }
  String libPath=null;
  Set<String> mvnUris=new HashSet<String>();
  if (MavenUrlHelper.isMvnUrl(jarNameOrMavenUri)) {
    mvnUris.add(jarNameOrMavenUri);
  }
 else {
    EMap<String,String> jarsToMavenUri=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
    String mavenUri=jarsToMavenUri.get(jarNameOrMavenUri);
    if (mavenUri == null) {
      mvnUris.add(MavenUrlHelper.generateMvnUrlForJarName(jarNameOrMavenUri));
    }
 else {
      for (      String uri : mavenUri.split(MavenUrlHelper.MVN_INDEX_SPLITER)) {
        mvnUris.add(uri);
      }
    }
  }
  for (  String uriToCheck : mvnUris) {
    if (checkJarInstalledInMaven(uriToCheck)) {
      libPath=mavenJarInstalled.get(uriToCheck);
      if (libPath != null) {
        return libPath;
      }
    }
  }
  return null;
}",0.9694323144104804
125558,"private void showIfAuthentication(){
  if (isHiveDBConnSelected()) {
    if (doSupportSecurity()) {
      updateAuthenticationForHive(isHiveEmbeddedMode());
      setHidAuthenticationForHive(false);
    }
 else {
      setHidAuthenticationForHive(true);
    }
  }
 else {
    setHidAuthenticationForHive(true);
  }
}","private void showIfAuthentication(){
  if (isHiveDBConnSelected()) {
    if (doSupportSecurity()) {
      updateAuthenticationForHive(isHiveEmbeddedMode());
      hideControlForKerbTickt();
      setHidAuthenticationForHive(false);
    }
 else {
      setHidAuthenticationForHive(true);
    }
  }
 else {
    setHidAuthenticationForHive(true);
  }
}",0.950375939849624
125559,"private boolean doSupportSecurity(){
  return HiveMetadataHelper.doSupportSecurity(hiveDistributionCombo.getText(),hiveVersionCombo.getText(),hiveModeCombo.getText(),hiveServerVersionCombo.getText(),true);
}","private boolean doSupportSecurity(){
  return doSupportKerb() || doSupportTicket();
}",0.4383561643835616
125560,"private void initProperty(){
  JobInfo jobInfo=new JobInfo(processItem,processItem.getProcess().getDefaultContext(),processItem.getProperty().getVersion());
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  setProperty(PROJECT_ID,String.valueOf(currentProject.getEmfProject().getId()));
  setProperty(PROJECT_NAME,currentProject.getTechnicalLabel());
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + UNDER_LINE_CHAR + currentProject.getTechnicalLabel();
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  RepositoryContext rc=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (rc.getFields().containsKey(branchKey) && rc.getFields().get(branchKey) != null) {
    String branchSelection=rc.getFields().get(branchKey);
    setProperty(BRANCH,branchSelection);
  }
  setProperty(JOB_ID,jobInfo.getJobId());
  setProperty(JOB_NAME,jobInfo.getJobName());
  String jobType=processItem.getProcess().getJobType();
  if (jobType == null) {
    jobType=""String_Node_Str"";
  }
  setProperty(JOB_TYPE,jobType);
  setProperty(JOB_VERSION,jobInfo.getJobVersion());
  setProperty(CONTEXT_NAME,this.contextName);
  setProperty(DATE,DATAFORMAT.format(new Date()));
  setProperty(APPLY_CONTEXY_CHILDREN,String.valueOf(applyContextToChild));
  if (CommonsPlugin.isHeadless()) {
    setProperty(ADD_STATIC_CODE,String.valueOf(addStat));
  }
 else {
    setProperty(ADD_STATIC_CODE,Boolean.FALSE.toString());
  }
  setProperty(COMMANDLINE_VERSION,VersionUtils.getVersion());
}","private void initProperty(){
  JobInfo jobInfo=new JobInfo(processItem,processItem.getProcess().getDefaultContext(),processItem.getProperty().getVersion());
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  setProperty(PROJECT_ID,String.valueOf(currentProject.getEmfProject().getId()));
  setProperty(PROJECT_NAME,currentProject.getTechnicalLabel());
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + UNDER_LINE_CHAR + currentProject.getTechnicalLabel();
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  RepositoryContext rc=(RepositoryContext)ctx.getProperty(Context.REPOSITORY_CONTEXT_KEY);
  if (rc.getFields().containsKey(branchKey) && rc.getFields().get(branchKey) != null) {
    String branchSelection=rc.getFields().get(branchKey);
    setProperty(BRANCH,branchSelection);
  }
  setProperty(JOB_ID,jobInfo.getJobId());
  setProperty(JOB_NAME,jobInfo.getJobName());
  String jobType=processItem.getProcess().getJobType();
  if (jobType == null) {
    jobType=""String_Node_Str"";
  }
  setProperty(JOB_TYPE,jobType);
  setProperty(JOB_VERSION,jobInfo.getJobVersion());
  setProperty(CONTEXT_NAME,this.contextName);
  setProperty(DATE,DATAFORMAT.format(new Date()));
  setProperty(APPLY_CONTEXY_CHILDREN,String.valueOf(applyContextToChild));
  if (CommonsPlugin.isHeadless()) {
    setProperty(ADD_STATIC_CODE,String.valueOf(addStat));
  }
 else {
    setProperty(ADD_STATIC_CODE,Boolean.TRUE.toString());
  }
  setProperty(COMMANDLINE_VERSION,VersionUtils.getVersion());
}",0.9977101733725876
125561,"static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}","static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IMPALA.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String impalaPrin=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,impalaPrin));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}",0.982711646108882
125562,"@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  dbTypeCombo.setReadOnly(isContextMode());
  urlConnectionStringText.setEditable(!isContextMode());
  usernameText.setEditable(!isContextMode());
  passwordText.setEditable(!isContextMode());
  serverText.setEditable(!isContextMode());
  portText.setEditable(!isContextMode());
  sidOrDatabaseText.setEditable(!isContextMode());
  schemaText.setEditable(!isContextMode());
  dbVersionCombo.setReadOnly(isContextMode());
  datasourceText.setEditable(!isContextMode());
  additionParamText.setEditable(!isContextMode());
  fileField.setEditable(!isContextMode());
  directoryField.setEditable(!isContextMode());
  sqlSyntaxCombo.setReadOnly(isContextMode());
  stringQuoteText.setEditable(!isContextMode());
  nullCharText.setEditable(!isContextMode());
  button1.setEnabled(!isContextMode());
  button2.setEnabled(!isContextMode());
  generalJdbcUrlText.setEditable(!isContextMode());
  generalJdbcUserText.setEditable(!isContextMode());
  generalJdbcPasswordText.setEditable(!isContextMode());
  generalJdbcClassNameText.setEnabled(!isContextMode());
  generalJdbcDriverjarText.setEditable(!isContextMode());
  jDBCschemaText.setEditable(!isContextMode());
  generalMappingFileText.setEditable(!isContextMode());
  mappingFileText.setEditable(!isContextMode());
  if (isContextMode()) {
    passwordText.getTextControl().setEchoChar('\0');
    generalJdbcPasswordText.getTextControl().setEchoChar('\0');
    passwordTxt.getTextControl().setEchoChar('\0');
  }
 else {
    passwordText.getTextControl().setEchoChar('*');
    generalJdbcPasswordText.getTextControl().setEchoChar('*');
    passwordTxt.getTextControl().setEchoChar('*');
  }
  if (isHiveDBConnSelected()) {
    adaptHadoopLinkedPartToReadOnly();
    updateHadoopProperties(!isContextMode());
  }
  if (isHBaseDBConnSelected()) {
    adaptHbaseHadoopPartEditable();
    updateHadoopProperties(!isContextMode());
  }
}","@Override protected void adaptFormToEditable(){
  super.adaptFormToEditable();
  dbTypeCombo.setReadOnly(isContextMode());
  urlConnectionStringText.setEditable(!isContextMode());
  usernameText.setEditable(!isContextMode());
  passwordText.setEditable(!isContextMode());
  serverText.setEditable(!isContextMode());
  portText.setEditable(!isContextMode());
  sidOrDatabaseText.setEditable(!isContextMode());
  schemaText.setEditable(!isContextMode());
  dbVersionCombo.setReadOnly(isContextMode());
  datasourceText.setEditable(!isContextMode());
  additionParamText.setEditable(!isContextMode());
  fileField.setEditable(!isContextMode());
  directoryField.setEditable(!isContextMode());
  sqlSyntaxCombo.setReadOnly(isContextMode());
  stringQuoteText.setEditable(!isContextMode());
  nullCharText.setEditable(!isContextMode());
  button1.setEnabled(!isContextMode());
  button2.setEnabled(!isContextMode());
  generalJdbcUrlText.setEditable(!isContextMode());
  generalJdbcUserText.setEditable(!isContextMode());
  generalJdbcPasswordText.setEditable(!isContextMode());
  generalJdbcClassNameText.setEnabled(!isContextMode());
  generalJdbcDriverjarText.setEditable(!isContextMode());
  jDBCschemaText.setEditable(!isContextMode());
  generalMappingFileText.setEditable(!isContextMode());
  mappingFileText.setEditable(!isContextMode());
  if (isContextMode()) {
    passwordText.getTextControl().setEchoChar('\0');
    generalJdbcPasswordText.getTextControl().setEchoChar('\0');
    passwordTxt.getTextControl().setEchoChar('\0');
  }
 else {
    passwordText.getTextControl().setEchoChar('*');
    generalJdbcPasswordText.getTextControl().setEchoChar('*');
    passwordTxt.getTextControl().setEchoChar('*');
  }
  if (isHiveDBConnSelected()) {
    adaptHadoopLinkedPartToReadOnly();
    updateHadoopProperties(!isContextMode());
  }
  if (isHBaseDBConnSelected()) {
    adaptHbaseHadoopPartEditable();
    updateHadoopProperties(!isContextMode());
  }
  if (isImpalaDBConnSelected()) {
    adaptImpalaHadoopPartEditable();
    updateHadoopProperties(!isContextMode());
  }
}",0.9700420896261452
125563,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}",0.8931467527807678
125564,"static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}","static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}",0.862630432289875
125565,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.8983987645289767
125566,"static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}","static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}",0.8721247906935754
125567,"private void adaptHbaseHadoopPartEditable(){
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hbaseDistributionCombo.setReadOnly(isContextMode());
  hbaseVersionCombo.setReadOnly(isContextMode());
  useKerberosForHBase.setEnabled(!isContextMode());
  useKeyTabForHBase.setEnabled(!isContextMode());
  hbaseMasterPrincipalTxt.setEditable(!isContextMode());
  hbaseRSPrincipalTxt.setEditable(!isContextMode());
  principalForHBaseTxt.setEditable(!isContextMode());
  keytabForHBaseTxt.setEditable(!isContextMode());
  useMaprTForHBase.setEnabled(!isContextMode());
  maprTUsernameForHBaseTxt.setEditable(!isContextMode());
  maprTPasswordForHBaseTxt.setEditable(!isContextMode());
  maprTClusterForHBaseTxt.setEditable(!isContextMode());
  maprTDurationForHBaseTxt.setEditable(!isContextMode());
}","private void adaptHbaseHadoopPartEditable(){
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hbaseDistributionCombo.setReadOnly(isContextMode());
  hbaseVersionCombo.setReadOnly(isContextMode());
  useKerberosForHBase.setEnabled(!isContextMode());
  useKeyTabForHBase.setEnabled(!isContextMode());
  hbaseMasterPrincipalTxt.setEditable(!isContextMode());
  hbaseRSPrincipalTxt.setEditable(!isContextMode());
  principalForHBaseTxt.setEditable(!isContextMode());
  keytabForHBaseTxt.setEditable(!isContextMode());
  useMaprTForHBase.setEnabled(!isContextMode());
  maprTUsernameForHBaseTxt.setEditable(!isContextMode());
  maprTPasswordForHBaseTxt.setEditable(!isContextMode());
  maprTClusterForHBaseTxt.setEditable(!isContextMode());
  maprTDurationForHBaseTxt.setEditable(!isContextMode());
  if (isContextMode()) {
    maprTPasswordForHBaseTxt.getTextControl().setEchoChar('\0');
  }
 else {
    maprTPasswordForHBaseTxt.getTextControl().setEchoChar('*');
  }
}",0.903954802259887
125568,"private void adaptHadoopLinkedPartToReadOnly(){
  boolean fromRepository=hcPropertyTypeCombo.getSelectionIndex() == 1;
  hcSelectBtn.setVisible(fromRepository);
  hcRepositoryText.setVisible(fromRepository);
  dbTypeCombo.setReadOnly(fromRepository || isContextMode());
  hbaseDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseVersionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseCustomButton.setEnabled(!fromRepository && !isContextMode());
  impalaDistributionCombo.setReadOnly(fromRepository || isContextMode());
  impalaVersionCombo.setReadOnly(fromRepository || isContextMode());
  impalaCustomButton.setEnabled(!fromRepository && !isContextMode());
  hiveDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hiveVersionCombo.setReadOnly(fromRepository || isContextMode());
  nameNodeURLTxt.setReadOnly(fromRepository || isContextMode());
  jobTrackerURLTxt.setReadOnly(fromRepository || isContextMode());
  hiveCustomButton.setEnabled(!fromRepository && !isContextMode());
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hiveModeCombo.setReadOnly(isContextMode());
  hiveServerVersionCombo.setReadOnly(isContextMode());
  useKerberos.setEnabled(!isContextMode());
  useKeyTab.setEnabled(!isContextMode());
  browseDriverJarBtn.setEnabled(!isContextMode());
  browseDriverClassButton.setEnabled(!isContextMode());
  hivePrincipalTxt.setEditable(!isContextMode());
  metastoreUrlTxt.setEditable(!isContextMode());
  driverJarTxt.setEditable(!isContextMode());
  driverClassTxt.setReadOnly(isContextMode());
  usernameTxt.setEditable(!isContextMode());
  passwordTxt.setEditable(!isContextMode());
  principalTxt.setEditable(!isContextMode());
  keytabTxt.setEditable(!isContextMode());
  additionalJDBCSettingsText.setEditable(!isContextMode());
  useSSLEncryption.setEnabled(!isContextMode());
  trustStorePath.setEditable(!isContextMode());
  trustStorePassword.setEditable(!isContextMode());
  useMaprTForHive.setEnabled(!isContextMode());
  maprTUsernameForHiveTxt.setEditable(!isContextMode());
  maprTPasswordForHiveTxt.setEditable(!isContextMode());
  maprTClusterForHiveTxt.setEditable(!isContextMode());
  maprTDurationForHiveTxt.setEditable(!isContextMode());
  if (isContextMode()) {
    trustStorePassword.getTextControl().setEchoChar('\0');
  }
 else {
    trustStorePassword.getTextControl().setEchoChar('*');
  }
}","private void adaptHadoopLinkedPartToReadOnly(){
  boolean fromRepository=hcPropertyTypeCombo.getSelectionIndex() == 1;
  hcSelectBtn.setVisible(fromRepository);
  hcRepositoryText.setVisible(fromRepository);
  dbTypeCombo.setReadOnly(fromRepository || isContextMode());
  hbaseDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseVersionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseCustomButton.setEnabled(!fromRepository && !isContextMode());
  impalaDistributionCombo.setReadOnly(fromRepository || isContextMode());
  impalaVersionCombo.setReadOnly(fromRepository || isContextMode());
  impalaCustomButton.setEnabled(!fromRepository && !isContextMode());
  hiveDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hiveVersionCombo.setReadOnly(fromRepository || isContextMode());
  nameNodeURLTxt.setReadOnly(fromRepository || isContextMode());
  jobTrackerURLTxt.setReadOnly(fromRepository || isContextMode());
  hiveCustomButton.setEnabled(!fromRepository && !isContextMode());
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hiveModeCombo.setReadOnly(isContextMode());
  hiveServerVersionCombo.setReadOnly(isContextMode());
  useKerberos.setEnabled(!isContextMode());
  useKeyTab.setEnabled(!isContextMode());
  browseDriverJarBtn.setEnabled(!isContextMode());
  browseDriverClassButton.setEnabled(!isContextMode());
  hivePrincipalTxt.setEditable(!isContextMode());
  metastoreUrlTxt.setEditable(!isContextMode());
  driverJarTxt.setEditable(!isContextMode());
  driverClassTxt.setReadOnly(isContextMode());
  usernameTxt.setEditable(!isContextMode());
  passwordTxt.setEditable(!isContextMode());
  principalTxt.setEditable(!isContextMode());
  keytabTxt.setEditable(!isContextMode());
  additionalJDBCSettingsText.setEditable(!isContextMode());
  useSSLEncryption.setEnabled(!isContextMode());
  trustStorePath.setEditable(!isContextMode());
  trustStorePassword.setEditable(!isContextMode());
  useMaprTForHive.setEnabled(!isContextMode());
  maprTUsernameForHiveTxt.setEditable(!isContextMode());
  maprTPasswordForHiveTxt.setEditable(!isContextMode());
  maprTClusterForHiveTxt.setEditable(!isContextMode());
  maprTDurationForHiveTxt.setEditable(!isContextMode());
  if (isContextMode()) {
    trustStorePassword.getTextControl().setEchoChar('\0');
    maprTPasswordForHiveTxt.getTextControl().setEchoChar('\0');
  }
 else {
    trustStorePassword.getTextControl().setEchoChar('*');
    maprTPasswordForHiveTxt.getTextControl().setEchoChar('*');
  }
}",0.9741396864182448
125569,"private void collectHiveContextParams(){
  if (isHiveDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Login,true);
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.NameNode,useHadoopRepositoryParam());
    addContextParams(EDBParamName.JobTrackerOrResourceManager,useHadoopRepositoryParam());
    addContextParams(EDBParamName.Password,!isHiveEmbeddedMode());
    boolean isHivePrincipal=isHiveDBConnSelected() && doSupportSecurity() && useKerberos.getSelection();
    addContextParams(EDBParamName.HivePrincipal,isHivePrincipal);
    boolean hasAuthentication=isHivePrincipal && isHiveEmbeddedMode();
    addContextParams(EDBParamName.HiveMetastore,hasAuthentication);
    addContextParams(EDBParamName.HiveDriverJar,hasAuthentication);
    addContextParams(EDBParamName.HiveDriveClass,hasAuthentication);
    addContextParams(EDBParamName.HiveUserName,hasAuthentication);
    addContextParams(EDBParamName.HivePassword,hasAuthentication);
    addContextParams(EDBParamName.HiveKeyTabPrincipal,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.HiveKeyTab,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.hiveAdditionalJDBCParameters,isSupportHiveAdditionalSettings());
    boolean addSSLEncryptionContext=isSupportHiveEncryption() && isSupportHiveTrustStore();
    addContextParams(EDBParamName.hiveSSLTrustStorePath,addSSLEncryptionContext);
    addContextParams(EDBParamName.hiveSSLTrustStorePassword,addSSLEncryptionContext);
  }
}","private void collectHiveContextParams(){
  if (isHiveDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Login,true);
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.NameNode,useHadoopRepositoryParam());
    addContextParams(EDBParamName.JobTrackerOrResourceManager,useHadoopRepositoryParam());
    addContextParams(EDBParamName.Password,!isHiveEmbeddedMode());
    boolean isHivePrincipal=isHiveDBConnSelected() && doSupportSecurity() && useKerberos.getSelection();
    addContextParams(EDBParamName.HivePrincipal,isHivePrincipal);
    boolean hasAuthentication=isHivePrincipal && isHiveEmbeddedMode();
    addContextParams(EDBParamName.HiveMetastore,hasAuthentication);
    addContextParams(EDBParamName.HiveDriverJar,hasAuthentication);
    addContextParams(EDBParamName.HiveDriveClass,hasAuthentication);
    addContextParams(EDBParamName.HiveUserName,hasAuthentication);
    addContextParams(EDBParamName.HivePassword,hasAuthentication);
    addContextParams(EDBParamName.HiveKeyTabPrincipal,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.HiveKeyTab,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.hiveAdditionalJDBCParameters,isSupportHiveAdditionalSettings());
    boolean addSSLEncryptionContext=isSupportHiveEncryption() && isSupportHiveTrustStore();
    addContextParams(EDBParamName.hiveSSLTrustStorePath,addSSLEncryptionContext);
    addContextParams(EDBParamName.hiveSSLTrustStorePassword,addSSLEncryptionContext);
    addContextParams(EDBParamName.Username,!useKerberos.getSelection() && useMaprTForHive.getSelection());
    addContextParams(EDBParamName.Maprticket_Password,!useKerberos.getSelection() && useMaprTForHive.getSelection());
    addContextParams(EDBParamName.Maprticket_Cluster,useMaprTForHive.getSelection());
    addContextParams(EDBParamName.Maprticket_Duration,useMaprTForHive.getSelection());
  }
}",0.893068242880172
125570,"/** 
 * DOC ggu Comment method ""getMainProjectBranch"".
 * @param technicalLabel
 * @return
 */
public String getMainProjectBranch(String technicalLabel){
  String branchForMainProject=null;
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return branchForMainProject;
  }
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (fields.containsKey(branchKey)) {
    branchForMainProject=fields.get(branchKey);
  }
  if (branchForMainProject != null) {
    if (!branchForMainProject.contains(SVNConstant.NAME_TAGS) && !branchForMainProject.contains(SVNConstant.NAME_BRANCHES) && !branchForMainProject.contains(SVNConstant.NAME_TRUNK)&& !branchForMainProject.contains(SVNConstant.NAME_MASTER)) {
      branchForMainProject=SVNConstant.NAME_BRANCHES + SVNConstant.SEP_CHAR + branchForMainProject;
    }
  }
  return branchForMainProject;
}","/** 
 * DOC ggu Comment method ""getMainProjectBranch"".
 * @param technicalLabel
 * @return
 */
public String getMainProjectBranch(String technicalLabel){
  String branchForMainProject=null;
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return branchForMainProject;
  }
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (fields.containsKey(branchKey)) {
    branchForMainProject=fields.get(branchKey);
  }
  if (branchForMainProject != null) {
    branchForMainProject=getFormatedBranchName(branchForMainProject);
  }
  return branchForMainProject;
}",0.7172582619339045
125571,"/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected synchronized List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              Exception e) {
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                String curFile=current.getFullPath().toPortableString();
                if (!invalidFiles.contains(curFile)) {
                  invalidFiles.add(curFile);
                  log.error(Messages.getString(""String_Node_Str"") + current);
                }
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  deleteResource(current);
                }
 catch (                PersistenceException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}","/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected synchronized List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    Set<String> propertyFounds=new HashSet<String>();
    Set<String> folderNamesFounds=new HashSet<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      Set<String> physicalPropertyFounds=new HashSet<String>();
      Set<String> physicalDirectoryFounds=new HashSet<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              Exception e) {
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                String curFile=current.getFullPath().toPortableString();
                if (!invalidFiles.contains(curFile)) {
                  invalidFiles.add(curFile);
                  log.error(Messages.getString(""String_Node_Str"") + current);
                }
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  deleteResource(current);
                }
 catch (                PersistenceException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}",0.995319044099532
125572,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}",0.9858217821782178
125573,"static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}","static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}",0.982525814138205
125574,"private void collectContextParams(){
  collectHiveContextParams();
  collectHBaseContextParams();
}","private void collectContextParams(){
  collectHiveContextParams();
  collectHBaseContextParams();
  collectImpalaContextParams();
}",0.8608695652173913
125575,"/** 
 * generate the code of the current Process.
 * @param statistics generate with statistics option ?
 * @param trace generate with trace option ?
 * @param context generate also the context file ?
 * @throws ProcessorException
 */
public void generateCode(boolean statistics,boolean trace,boolean context) throws ProcessorException ;","public void generateCode(boolean statistics,boolean trace,boolean context,int option) throws ProcessorException ;",0.4533333333333333
125576,"private static void generateContextInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean trace,boolean needContext,IProgressMonitor progressMonitor,IProcess currentProcess,String currentJobName,IProcessor processor) throws ProcessorException {
  if (isCodeGenerationNeeded(jobInfo,statistics,trace)) {
    codeModified=true;
    if ((currentProcess instanceof IProcess2) && exportConfig) {
      ((IProcess2)currentProcess).setProcessModified(true);
      resetRunJobComponentParameterForContextApply(jobInfo,currentProcess,selectedContextName);
    }
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    IContext currentContext;
    if (jobInfo.getContext() == null) {
      currentContext=getContext(currentProcess,jobInfo.getContextName());
    }
 else {
      currentContext=jobInfo.getContext();
    }
    if (needContext) {
      List<IContext> list=currentProcess.getContextManager().getListContext();
      for (      IContext context : list) {
        if (context.getName().equals(currentContext.getName())) {
          processor.setContext(currentContext);
        }
 else {
          processor.setContext(context);
        }
        LastGenerationInfo.getInstance().getContextPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).add(context.getName());
        try {
          processor.generateContextCode();
        }
 catch (        ProcessorException pe) {
          ExceptionHandler.process(pe);
        }
      }
    }
    processor.setContext(currentContext);
    processor.generateCode(statistics,trace,true);
    if (currentProcess instanceof IProcess2 && ((IProcess2)currentProcess).getProperty() != null) {
      designerCoreService.getLastGeneratedJobsDateMap().put(currentProcess.getId(),((IProcess2)currentProcess).getProperty().getModificationDate());
    }
    Integer infos=new Integer(0);
    infos+=statistics ? GENERATED_WITH_STATS : 0;
    infos+=trace ? GENERATED_WITH_TRACES : 0;
    lastGeneratedWithStatsOrTrace.put(jobInfo.getJobId(),infos);
    if (currentProcess instanceof IProcess2) {
      processor.generateEsbFiles();
      ((IProcess2)currentProcess).setNeedRegenerateCode(false);
    }
  }
 else {
    processor.setCodeGenerated(true);
  }
}","private static void generateContextInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean trace,boolean needContext,IProgressMonitor progressMonitor,IProcess currentProcess,String currentJobName,IProcessor processor,boolean isMain) throws ProcessorException {
  if (isCodeGenerationNeeded(jobInfo,statistics,trace)) {
    codeModified=true;
    if ((currentProcess instanceof IProcess2) && exportConfig) {
      ((IProcess2)currentProcess).setProcessModified(true);
      resetRunJobComponentParameterForContextApply(jobInfo,currentProcess,selectedContextName);
    }
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    IContext currentContext;
    if (jobInfo.getContext() == null) {
      currentContext=getContext(currentProcess,jobInfo.getContextName());
    }
 else {
      currentContext=jobInfo.getContext();
    }
    if (needContext) {
      List<IContext> list=currentProcess.getContextManager().getListContext();
      for (      IContext context : list) {
        if (context.getName().equals(currentContext.getName())) {
          processor.setContext(currentContext);
        }
 else {
          processor.setContext(context);
        }
        LastGenerationInfo.getInstance().getContextPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).add(context.getName());
        try {
          processor.generateContextCode();
        }
 catch (        ProcessorException pe) {
          ExceptionHandler.process(pe);
        }
      }
    }
    processor.setContext(currentContext);
    int option=TalendProcessOptionConstants.GENERATE_WITHOUT_FORMAT;
    if (isMain) {
      option=0;
    }
    processor.generateCode(statistics,trace,true,option);
    if (currentProcess instanceof IProcess2 && ((IProcess2)currentProcess).getProperty() != null) {
      designerCoreService.getLastGeneratedJobsDateMap().put(currentProcess.getId(),((IProcess2)currentProcess).getProperty().getModificationDate());
    }
    Integer infos=new Integer(0);
    infos+=statistics ? GENERATED_WITH_STATS : 0;
    infos+=trace ? GENERATED_WITH_TRACES : 0;
    lastGeneratedWithStatsOrTrace.put(jobInfo.getJobId(),infos);
    if (currentProcess instanceof IProcess2) {
      processor.generateEsbFiles();
      ((IProcess2)currentProcess).setNeedRegenerateCode(false);
    }
  }
 else {
    processor.setCodeGenerated(true);
  }
}",0.971614301191766
125577,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor,int option) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    if (codeModified && !BitwiseOptionUtils.containOption(option,GENERATE_WITHOUT_COMPILING)) {
      try {
        processor.build(progressMonitor);
      }
 catch (      Exception e) {
        throw new ProcessorException(e);
      }
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    retrievedJarsForCurrentBuild.clear();
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor,int option) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    if (codeModified && !BitwiseOptionUtils.containOption(option,GENERATE_WITHOUT_COMPILING)) {
      try {
        processor.build(progressMonitor);
      }
 catch (      Exception e) {
        throw new ProcessorException(e);
      }
      processor.syntaxCheck();
      CorePlugin.getDefault().getRunProcessService().checkLastGenerationHasCompilationError(true);
    }
    needContextInCurrentGeneration=true;
    retrievedJarsForCurrentBuild.clear();
    codeModified=false;
  }
}",0.9340439706862091
125578,"private static void addContextForHadoopElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null) {
    if (hadoopClusterService.isInContextMode(connItem)) {
      Connection connection=connItem.getConnection();
      Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
      if (neededVars != null && !neededVars.isEmpty()) {
        ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
        ConnectionItem hadoopClusterItem=(ConnectionItem)hadoopClusterService.getHadoopClusterBySubitemId(connItem.getProperty().getId());
        Connection hadoopClusterConnection=hadoopClusterItem.getConnection();
        ContextItem hadoopClusterContextItem=ContextUtils.getContextItemById2(hadoopClusterConnection.getContextId());
        Set<String> hcNeededVars=retrieveContextVar(elementParameters,hadoopClusterConnection,category);
        List<ContextItem> contextItems=new ArrayList<>();
        if (contextItem != null || hadoopClusterContextItem != null) {
          Set<String> connAddedVars=null;
          Set<String> hcAddedVars=null;
          if (contextItem != null) {
            connAddedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
            contextItems.add(contextItem);
          }
          if (hadoopClusterContextItem != null) {
            hcAddedVars=checkAndAddContextVariables(hadoopClusterContextItem,hcNeededVars,process.getContextManager(),false);
            contextItems.add(hadoopClusterContextItem);
          }
          boolean added=false;
          Map<String,Set<String>> addedVarsMap=new HashMap<>();
          Map<ContextItem,Set<String>> contextToVars=new HashMap<>();
          if (connAddedVars != null && !connAddedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,contextItem,connAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(connItem.getProperty().getId(),connAddedVars);
              contextToVars.put(contextItem,connAddedVars);
            }
          }
          if (hcAddedVars != null && !hcAddedVars.isEmpty() && !isAddContextVar(hadoopClusterContextItem,process.getContextManager(),hcNeededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,hadoopClusterContextItem,hcAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(hadoopClusterItem.getProperty().getId(),hcAddedVars);
              contextToVars.put(hadoopClusterContextItem,hcAddedVars);
            }
          }
          if (addedVarsMap.size() > 0) {
            if (showContextDialogForHadoop(process,contextItems,process.getContextManager(),addedVarsMap,contextToVars)) {
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}","private static void addContextForHadoopElementParameters(final IProcess2 process,final ConnectionItem connItem,List<? extends IElementParameter> elementParameters,final EComponentCategory category,final boolean ignoreContextMode){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null) {
    if (hadoopClusterService.isInContextMode(connItem)) {
      Connection connection=connItem.getConnection();
      Set<String> neededVars=retrieveContextVar(elementParameters,connection,category);
      if (neededVars != null && !neededVars.isEmpty()) {
        ContextItem contextItem=ContextUtils.getContextItemById2(connection.getContextId());
        ConnectionItem hadoopClusterItem=(ConnectionItem)hadoopClusterService.getHadoopClusterBySubitemId(connItem.getProperty().getId());
        Connection hadoopClusterConnection=hadoopClusterItem.getConnection();
        ContextItem hadoopClusterContextItem=ContextUtils.getContextItemById2(hadoopClusterConnection.getContextId());
        Set<String> hcNeededVars=retrieveContextVar(elementParameters,hadoopClusterConnection,category,true);
        List<ContextItem> contextItems=new ArrayList<>();
        if (contextItem != null || hadoopClusterContextItem != null) {
          Set<String> connAddedVars=null;
          Set<String> hcAddedVars=null;
          if (contextItem != null) {
            connAddedVars=checkAndAddContextVariables(contextItem,neededVars,process.getContextManager(),false);
            contextItems.add(contextItem);
          }
          if (hadoopClusterContextItem != null) {
            hcAddedVars=checkAndAddContextVariables(hadoopClusterContextItem,hcNeededVars,process.getContextManager(),false);
            contextItems.add(hadoopClusterContextItem);
          }
          boolean added=false;
          Map<String,Set<String>> addedVarsMap=new HashMap<>();
          Map<ContextItem,Set<String>> contextToVars=new HashMap<>();
          if (connAddedVars != null && !connAddedVars.isEmpty() && !isAddContextVar(contextItem,process.getContextManager(),neededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,contextItem,connAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(connItem.getProperty().getId(),connAddedVars);
              contextToVars.put(contextItem,connAddedVars);
            }
          }
          if (hcAddedVars != null && !hcAddedVars.isEmpty() && !isAddContextVar(hadoopClusterContextItem,process.getContextManager(),hcNeededVars)) {
            if (ignoreContextMode) {
              addContextVarForJob(process,hadoopClusterContextItem,hcAddedVars);
              added=true;
            }
 else {
              addedVarsMap.put(hadoopClusterItem.getProperty().getId(),hcAddedVars);
              contextToVars.put(hadoopClusterContextItem,hcAddedVars);
            }
          }
          if (addedVarsMap.size() > 0) {
            if (showContextDialogForHadoop(process,contextItems,process.getContextManager(),addedVarsMap,contextToVars)) {
              added=true;
            }
          }
          if (added) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              service.switchToCurContextsView();
            }
          }
        }
      }
    }
  }
}",0.9993244156195108
125579,"public static Set<String> retrieveContextVar(List<? extends IElementParameter> elementParameters,Connection connection,EComponentCategory category){
  if (elementParameters == null || connection == null) {
    return null;
  }
  Set<String> addedVars=new HashSet<String>();
  String var=null;
  for (  IElementParameter param : elementParameters) {
    if (category == null || category == param.getCategory()) {
      String repositoryValue=param.getRepositoryValue();
      if (repositoryValue != null) {
        Object objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,null);
        if (objectValue != null) {
          if (objectValue instanceof List) {
            List list=(List)objectValue;
            for (int i=0; i < list.size(); i++) {
              Object object=list.get(i);
              if (object instanceof HashMap) {
                Map map=(HashMap)object;
                if (!map.isEmpty()) {
                  Set keySet=map.keySet();
                  Iterator iterator=keySet.iterator();
                  while (iterator.hasNext()) {
                    String key=(String)iterator.next();
                    Object object2=map.get(key);
                    if (object2 instanceof String) {
                      var=ContextParameterUtils.getVariableFromCode((String)object2);
                      if (var != null) {
                        addedVars.add(var);
                      }
                    }
                  }
                }
              }
            }
          }
          if (objectValue instanceof String) {
            var=ContextParameterUtils.getVariableFromCode((String)objectValue);
            if (var != null) {
              addedVars.add(var);
            }
          }
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) && connection.isContextMode() && param.getValue() instanceof String) {
        var=ContextParameterUtils.getVariableFromCode((String)param.getValue());
        if (var != null) {
          addedVars.add(var);
        }
      }
    }
  }
  return addedVars;
}","public static Set<String> retrieveContextVar(List<? extends IElementParameter> elementParameters,Connection connection,EComponentCategory category,boolean onlyConsiderShowedParam){
  if (elementParameters == null || connection == null) {
    return null;
  }
  Set<String> addedVars=new HashSet<String>();
  String var=null;
  for (  IElementParameter param : elementParameters) {
    if (onlyConsiderShowedParam && !param.isShow(elementParameters)) {
      continue;
    }
    if (category == null || category == param.getCategory()) {
      String repositoryValue=param.getRepositoryValue();
      if (repositoryValue != null) {
        Object objectValue=RepositoryToComponentProperty.getValue(connection,repositoryValue,null);
        if (objectValue != null) {
          if (objectValue instanceof List) {
            List list=(List)objectValue;
            for (int i=0; i < list.size(); i++) {
              Object object=list.get(i);
              if (object instanceof HashMap) {
                Map map=(HashMap)object;
                if (!map.isEmpty()) {
                  Set keySet=map.keySet();
                  Iterator iterator=keySet.iterator();
                  while (iterator.hasNext()) {
                    String key=(String)iterator.next();
                    Object object2=map.get(key);
                    if (object2 instanceof String) {
                      var=ContextParameterUtils.getVariableFromCode((String)object2);
                      if (var != null) {
                        addedVars.add(var);
                      }
                    }
                  }
                }
              }
            }
          }
          if (objectValue instanceof String) {
            var=ContextParameterUtils.getVariableFromCode((String)objectValue);
            if (var != null) {
              addedVars.add(var);
            }
          }
        }
      }
 else       if (""String_Node_Str"".equals(param.getName()) && connection.isContextMode() && param.getValue() instanceof String) {
        var=ContextParameterUtils.getVariableFromCode((String)param.getValue());
        if (var != null) {
          addedVars.add(var);
        }
      }
    }
  }
  return addedVars;
}",0.9710447069724346
125580,"public static ProjectRepositoryNode getInstance(){
  if (defaultProjRepoNode == null) {
    defaultProjRepoNode=new ProjectRepositoryNode(null,null,ENodeType.STABLE_SYSTEM_FOLDER);
    defaultProjRepoNode.initialize(null);
  }
  if (defaultProjRepoNode.isDisposed) {
synchronized (defaultProjRepoNode) {
      if (defaultProjRepoNode.isDisposed) {
        defaultProjRepoNode.isDisposed=false;
        defaultProjRepoNode.project=ProjectManager.getInstance().getCurrentProject();
        defaultProjRepoNode.setRoot(defaultProjRepoNode);
        defaultProjRepoNode.initialize(defaultProjRepoNode.currentPerspective);
      }
    }
  }
  return defaultProjRepoNode;
}","public static ProjectRepositoryNode getInstance(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return dummyProjRepoNode;
  }
  if (defaultProjRepoNode == null) {
    defaultProjRepoNode=new ProjectRepositoryNode(null,null,ENodeType.STABLE_SYSTEM_FOLDER);
    defaultProjRepoNode.initialize(null);
  }
  if (defaultProjRepoNode.isDisposed) {
synchronized (defaultProjRepoNode) {
      if (defaultProjRepoNode.isDisposed) {
        defaultProjRepoNode.isDisposed=false;
        defaultProjRepoNode.project=ProjectManager.getInstance().getCurrentProject();
        defaultProjRepoNode.setRoot(defaultProjRepoNode);
        defaultProjRepoNode.initialize(defaultProjRepoNode.currentPerspective);
      }
    }
  }
  return defaultProjRepoNode;
}",0.9283228949199722
125581,"public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  fullLogonFinished=false;
  ProjectRepositoryNode root=ProjectRepositoryNode.getInstance();
  if (root != null) {
    root.setEnableDisposed(true);
    root.dispose();
  }
}","public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  ProjectRepositoryNode root=ProjectRepositoryNode.getInstance();
  if (root != null) {
    root.setEnableDisposed(true);
    root.dispose();
  }
  fullLogonFinished=false;
}",0.8928571428571429
125582,"/** 
 * DOC ggu Comment method ""getMainProjectBranch"".
 * @param technicalLabel
 * @return
 */
public String getMainProjectBranch(String technicalLabel){
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return null;
  }
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (fields.containsKey(branchKey)) {
    String branchForMainProject=fields.get(branchKey);
    return branchForMainProject;
  }
  return null;
}","/** 
 * DOC ggu Comment method ""getMainProjectBranch"".
 * @param technicalLabel
 * @return
 */
public String getMainProjectBranch(String technicalLabel){
  String branchForMainProject=null;
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return branchForMainProject;
  }
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (fields.containsKey(branchKey)) {
    branchForMainProject=fields.get(branchKey);
  }
  if (branchForMainProject != null) {
    if (!branchForMainProject.contains(SVNConstant.NAME_TAGS) && !branchForMainProject.contains(SVNConstant.NAME_BRANCHES) && !branchForMainProject.contains(SVNConstant.NAME_TRUNK)&& !branchForMainProject.contains(SVNConstant.NAME_MASTER)) {
      branchForMainProject=SVNConstant.NAME_BRANCHES + SVNConstant.SEP_CHAR + branchForMainProject;
    }
  }
  return branchForMainProject;
}",0.6907630522088354
125583,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}",0.8958231302035962
125584,"static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}","static void revertPropertiesForContextMode(DatabaseConnection conn,ContextType contextType){
  if (conn == null || contextType == null) {
    return;
  }
  String server=ContextParameterUtils.getOriginalValue(contextType,conn.getServerName());
  String username=ContextParameterUtils.getOriginalValue(contextType,conn.getUsername());
  String password=ContextParameterUtils.getOriginalValue(contextType,conn.getRawPassword());
  String port=ContextParameterUtils.getOriginalValue(contextType,conn.getPort());
  String sidOrDatabase=ContextParameterUtils.getOriginalValue(contextType,conn.getSID());
  String datasource=ContextParameterUtils.getOriginalValue(contextType,conn.getDatasourceName());
  String filePath=ContextParameterUtils.getOriginalValue(contextType,conn.getFileFieldName());
  String schemaOracle=ContextParameterUtils.getOriginalValue(contextType,conn.getUiSchema());
  String dbRootPath=ContextParameterUtils.getOriginalValue(contextType,conn.getDBRootPath());
  String additionParam=ContextParameterUtils.getOriginalValue(contextType,conn.getAdditionalParams());
  String jdbcUrl=ContextParameterUtils.getOriginalValue(contextType,conn.getURL());
  String driverJar=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverJarPath());
  String className=ContextParameterUtils.getOriginalValue(contextType,conn.getDriverClass());
  String mappingFile=ContextParameterUtils.getOriginalValue(contextType,conn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  conn.setAdditionalParams(additionParam);
  conn.setDatasourceName(datasource);
  conn.setDBRootPath(dbRootPath);
  conn.setFileFieldName(filePath);
  conn.setRawPassword(password);
  conn.setPort(port);
  conn.setUiSchema(schemaOracle);
  conn.setServerName(server);
  if (conn.getDataPackage() != null) {
    for (    orgomg.cwm.objectmodel.core.Package dataPackage : conn.getDataPackage()) {
      if (dataPackage instanceof ModelElement) {
        ModelElement element=dataPackage;
        if (conn.getSID() != null && conn.getSID().equals(element.getName())) {
          element.setName(sidOrDatabase);
        }
      }
    }
  }
  conn.setSID(sidOrDatabase);
  conn.setUsername(username);
  conn.setURL(jdbcUrl);
  conn.setDriverJarPath(driverJar);
  conn.setDriverClass(className);
  conn.setDbmsId(mappingFile);
  revertConnSubElement(conn,contextType);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hadoopUserName=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String addtionalJDBCParameters=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getOriginalValue(contextType,addtionalJDBCParameters));
    String sslTrustStorePath=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePath));
    String sslTrustStorePassword=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,conn.getValue(ContextParameterUtils.getOriginalValue(contextType,sslTrustStorePassword),true));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(conn.getDatabaseType()))) {
    String hbaseMasterPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
    String maprticket_Username=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,maprticket_Username));
    String maprticket_Password=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,maprticket_Password));
    String maprticket_Cluster=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,ContextParameterUtils.getOriginalValue(contextType,maprticket_Cluster));
    String maprticket_Duration=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,ContextParameterUtils.getOriginalValue(contextType,maprticket_Duration));
  }
  String hadoopPropertiesJson=transformContextModeToOriginal(getHiveOrHbaseHadoopProperties(conn),contextType);
  setAdditionalHadoopProperties(conn,hadoopPropertiesJson);
  String hivePropertiesJson=transformContextModeToOriginal(getHiveJdbcProperties(conn),contextType);
  setAdditionalHiveJdbcProperties(conn,hivePropertiesJson);
}",0.862630432289875
125585,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
    String maprticket_Username=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Username));
    String maprticket_Password=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Password));
    String maprticket_Cluster=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Cluster));
    String maprticket_Duration=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION,getOriginalValue(hadoopClusterContextType,contextType,maprticket_Duration));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.8983987645289767
125586,"static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}","static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}",0.8641764253354988
125587,"private void adaptHbaseHadoopPartEditable(){
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hbaseDistributionCombo.setReadOnly(isContextMode());
  hbaseVersionCombo.setReadOnly(isContextMode());
  useKerberosForHBase.setEnabled(!isContextMode());
  useKeyTabForHBase.setEnabled(!isContextMode());
  hbaseMasterPrincipalTxt.setEditable(!isContextMode());
  hbaseRSPrincipalTxt.setEditable(!isContextMode());
  principalForHBaseTxt.setEditable(!isContextMode());
  keytabForHBaseTxt.setEditable(!isContextMode());
  useMaprTForHBase.setEnabled(!isContextMode());
  maprTUsernameForHBaseTxt.setEditable(!isContextMode());
  maprTPasswordForHBaseTxt.setEditable(!isContextMode());
  maprTClusterForHBaseTxt.setEditable(!isContextMode());
  maprTDurationForHBaseTxt.setEditable(!isContextMode());
}","private void adaptHbaseHadoopPartEditable(){
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hbaseDistributionCombo.setReadOnly(isContextMode());
  hbaseVersionCombo.setReadOnly(isContextMode());
  useKerberosForHBase.setEnabled(!isContextMode());
  useKeyTabForHBase.setEnabled(!isContextMode());
  hbaseMasterPrincipalTxt.setEditable(!isContextMode());
  hbaseRSPrincipalTxt.setEditable(!isContextMode());
  principalForHBaseTxt.setEditable(!isContextMode());
  keytabForHBaseTxt.setEditable(!isContextMode());
  useMaprTForHBase.setEnabled(!isContextMode());
  maprTUsernameForHBaseTxt.setEditable(!isContextMode());
  maprTPasswordForHBaseTxt.setEditable(!isContextMode());
  maprTClusterForHBaseTxt.setEditable(!isContextMode());
  maprTDurationForHBaseTxt.setEditable(!isContextMode());
  if (isContextMode()) {
    maprTPasswordForHBaseTxt.getTextControl().setEchoChar('\0');
  }
 else {
    maprTPasswordForHBaseTxt.getTextControl().setEchoChar('*');
  }
}",0.903954802259887
125588,"private void adaptHadoopLinkedPartToReadOnly(){
  boolean fromRepository=hcPropertyTypeCombo.getSelectionIndex() == 1;
  hcSelectBtn.setVisible(fromRepository);
  hcRepositoryText.setVisible(fromRepository);
  dbTypeCombo.setReadOnly(fromRepository || isContextMode());
  hbaseDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseVersionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseCustomButton.setEnabled(!fromRepository && !isContextMode());
  impalaDistributionCombo.setReadOnly(fromRepository || isContextMode());
  impalaVersionCombo.setReadOnly(fromRepository || isContextMode());
  impalaCustomButton.setEnabled(!fromRepository && !isContextMode());
  hiveDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hiveVersionCombo.setReadOnly(fromRepository || isContextMode());
  nameNodeURLTxt.setReadOnly(fromRepository || isContextMode());
  jobTrackerURLTxt.setReadOnly(fromRepository || isContextMode());
  hiveCustomButton.setEnabled(!fromRepository && !isContextMode());
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hiveModeCombo.setReadOnly(isContextMode());
  hiveServerVersionCombo.setReadOnly(isContextMode());
  useKerberos.setEnabled(!isContextMode());
  useKeyTab.setEnabled(!isContextMode());
  browseDriverJarBtn.setEnabled(!isContextMode());
  browseDriverClassButton.setEnabled(!isContextMode());
  hivePrincipalTxt.setEditable(!isContextMode());
  metastoreUrlTxt.setEditable(!isContextMode());
  driverJarTxt.setEditable(!isContextMode());
  driverClassTxt.setReadOnly(isContextMode());
  usernameTxt.setEditable(!isContextMode());
  passwordTxt.setEditable(!isContextMode());
  principalTxt.setEditable(!isContextMode());
  keytabTxt.setEditable(!isContextMode());
  additionalJDBCSettingsText.setEditable(!isContextMode());
  useSSLEncryption.setEnabled(!isContextMode());
  trustStorePath.setEditable(!isContextMode());
  trustStorePassword.setEditable(!isContextMode());
  useMaprTForHive.setEnabled(!isContextMode());
  maprTUsernameForHiveTxt.setEditable(!isContextMode());
  maprTPasswordForHiveTxt.setEditable(!isContextMode());
  maprTClusterForHiveTxt.setEditable(!isContextMode());
  maprTDurationForHiveTxt.setEditable(!isContextMode());
  if (isContextMode()) {
    trustStorePassword.getTextControl().setEchoChar('\0');
  }
 else {
    trustStorePassword.getTextControl().setEchoChar('*');
  }
}","private void adaptHadoopLinkedPartToReadOnly(){
  boolean fromRepository=hcPropertyTypeCombo.getSelectionIndex() == 1;
  hcSelectBtn.setVisible(fromRepository);
  hcRepositoryText.setVisible(fromRepository);
  dbTypeCombo.setReadOnly(fromRepository || isContextMode());
  hbaseDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseVersionCombo.setReadOnly(fromRepository || isContextMode());
  hbaseCustomButton.setEnabled(!fromRepository && !isContextMode());
  impalaDistributionCombo.setReadOnly(fromRepository || isContextMode());
  impalaVersionCombo.setReadOnly(fromRepository || isContextMode());
  impalaCustomButton.setEnabled(!fromRepository && !isContextMode());
  hiveDistributionCombo.setReadOnly(fromRepository || isContextMode());
  hiveVersionCombo.setReadOnly(fromRepository || isContextMode());
  nameNodeURLTxt.setReadOnly(fromRepository || isContextMode());
  jobTrackerURLTxt.setReadOnly(fromRepository || isContextMode());
  hiveCustomButton.setEnabled(!fromRepository && !isContextMode());
  hcPropertyTypeCombo.setReadOnly(isContextMode());
  hiveModeCombo.setReadOnly(isContextMode());
  hiveServerVersionCombo.setReadOnly(isContextMode());
  useKerberos.setEnabled(!isContextMode());
  useKeyTab.setEnabled(!isContextMode());
  browseDriverJarBtn.setEnabled(!isContextMode());
  browseDriverClassButton.setEnabled(!isContextMode());
  hivePrincipalTxt.setEditable(!isContextMode());
  metastoreUrlTxt.setEditable(!isContextMode());
  driverJarTxt.setEditable(!isContextMode());
  driverClassTxt.setReadOnly(isContextMode());
  usernameTxt.setEditable(!isContextMode());
  passwordTxt.setEditable(!isContextMode());
  principalTxt.setEditable(!isContextMode());
  keytabTxt.setEditable(!isContextMode());
  additionalJDBCSettingsText.setEditable(!isContextMode());
  useSSLEncryption.setEnabled(!isContextMode());
  trustStorePath.setEditable(!isContextMode());
  trustStorePassword.setEditable(!isContextMode());
  useMaprTForHive.setEnabled(!isContextMode());
  maprTUsernameForHiveTxt.setEditable(!isContextMode());
  maprTPasswordForHiveTxt.setEditable(!isContextMode());
  maprTClusterForHiveTxt.setEditable(!isContextMode());
  maprTDurationForHiveTxt.setEditable(!isContextMode());
  if (isContextMode()) {
    trustStorePassword.getTextControl().setEchoChar('\0');
    maprTPasswordForHiveTxt.getTextControl().setEchoChar('\0');
  }
 else {
    trustStorePassword.getTextControl().setEchoChar('*');
    maprTPasswordForHiveTxt.getTextControl().setEchoChar('*');
  }
}",0.9741396864182448
125589,"private void collectHiveContextParams(){
  if (isHiveDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Login,true);
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.NameNode,useHadoopRepositoryParam());
    addContextParams(EDBParamName.JobTrackerOrResourceManager,useHadoopRepositoryParam());
    addContextParams(EDBParamName.Password,!isHiveEmbeddedMode());
    boolean isHivePrincipal=isHiveDBConnSelected() && doSupportSecurity() && useKerberos.getSelection();
    addContextParams(EDBParamName.HivePrincipal,isHivePrincipal);
    boolean hasAuthentication=isHivePrincipal && isHiveEmbeddedMode();
    addContextParams(EDBParamName.HiveMetastore,hasAuthentication);
    addContextParams(EDBParamName.HiveDriverJar,hasAuthentication);
    addContextParams(EDBParamName.HiveDriveClass,hasAuthentication);
    addContextParams(EDBParamName.HiveUserName,hasAuthentication);
    addContextParams(EDBParamName.HivePassword,hasAuthentication);
    addContextParams(EDBParamName.HiveKeyTabPrincipal,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.HiveKeyTab,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.hiveAdditionalJDBCParameters,isSupportHiveAdditionalSettings());
    boolean addSSLEncryptionContext=isSupportHiveEncryption() && isSupportHiveTrustStore();
    addContextParams(EDBParamName.hiveSSLTrustStorePath,addSSLEncryptionContext);
    addContextParams(EDBParamName.hiveSSLTrustStorePassword,addSSLEncryptionContext);
  }
}","private void collectHiveContextParams(){
  if (isHiveDBConnSelected()) {
    getConetxtParams().clear();
    addContextParams(EDBParamName.Login,true);
    addContextParams(EDBParamName.Server,true);
    addContextParams(EDBParamName.Port,true);
    addContextParams(EDBParamName.Database,true);
    addContextParams(EDBParamName.NameNode,useHadoopRepositoryParam());
    addContextParams(EDBParamName.JobTrackerOrResourceManager,useHadoopRepositoryParam());
    addContextParams(EDBParamName.Password,!isHiveEmbeddedMode());
    boolean isHivePrincipal=isHiveDBConnSelected() && doSupportSecurity() && useKerberos.getSelection();
    addContextParams(EDBParamName.HivePrincipal,isHivePrincipal);
    boolean hasAuthentication=isHivePrincipal && isHiveEmbeddedMode();
    addContextParams(EDBParamName.HiveMetastore,hasAuthentication);
    addContextParams(EDBParamName.HiveDriverJar,hasAuthentication);
    addContextParams(EDBParamName.HiveDriveClass,hasAuthentication);
    addContextParams(EDBParamName.HiveUserName,hasAuthentication);
    addContextParams(EDBParamName.HivePassword,hasAuthentication);
    addContextParams(EDBParamName.HiveKeyTabPrincipal,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.HiveKeyTab,isHivePrincipal && useKeyTab.getSelection());
    addContextParams(EDBParamName.hiveAdditionalJDBCParameters,isSupportHiveAdditionalSettings());
    boolean addSSLEncryptionContext=isSupportHiveEncryption() && isSupportHiveTrustStore();
    addContextParams(EDBParamName.hiveSSLTrustStorePath,addSSLEncryptionContext);
    addContextParams(EDBParamName.hiveSSLTrustStorePassword,addSSLEncryptionContext);
    addContextParams(EDBParamName.Username,!useKerberos.getSelection() && useMaprTForHive.getSelection());
    addContextParams(EDBParamName.Maprticket_Password,!useKerberos.getSelection() && useMaprTForHive.getSelection());
    addContextParams(EDBParamName.Maprticket_Cluster,useMaprTForHive.getSelection());
    addContextParams(EDBParamName.Maprticket_Duration,useMaprTForHive.getSelection());
  }
}",0.893068242880172
125590,"/** 
 * Export the resources contained in the previously-defined resourcesToExport collection.
 */
public void exportSpecifiedResources() throws InterruptedException {
  for (  ExportFileResource fileResource : resourcesListToExport) {
    String rootName=fileResource.getDirectoryName();
    Set<String> paths=fileResource.getRelativePathList();
    for (Iterator iter=paths.iterator(); iter.hasNext(); ) {
      String relativePath=(String)iter.next();
      Set<URL> resource=fileResource.getResourcesByRelativePath(relativePath);
      for (      URL url : resource) {
        String currentResource=url.getPath();
        exportResource(rootName,relativePath,currentResource,1);
      }
    }
  }
}","/** 
 * Export the resources contained in the previously-defined resourcesToExport collection.
 */
public void exportSpecifiedResources() throws InterruptedException {
  for (  ExportFileResource fileResource : resourcesListToExport) {
    String rootName=fileResource.getDirectoryName();
    Set<String> paths=fileResource.getRelativePathList();
    for (    Object element : paths) {
      String relativePath=(String)element;
      Set<URL> resource=fileResource.getResourcesByRelativePath(relativePath);
      for (      URL url : resource) {
        String currentResource=url.getPath();
        exportResource(rootName,relativePath,currentResource,1);
      }
    }
  }
}",0.8797101449275362
125591,"public void exportResource(String rootName,String directory,String exportResource,int leadupDepth) throws InterruptedException {
  final String separator=""String_Node_Str"";
  File file=new File(exportResource);
  if (file.isFile()) {
    String destinationName=file.getName();
    if (!""String_Node_Str"".equals(directory)) {
      if (directory.endsWith(separator)) {
        destinationName=directory + file.getName();
      }
 else {
        destinationName=directory + separator + file.getName();
      }
    }
    if (rootName != null && !""String_Node_Str"".equals(destinationName)) {
      destinationName=rootName + separator + destinationName;
    }
    try {
      this.write(exportResource,destinationName);
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (file.isDirectory()) {
    File[] children=null;
    try {
      children=file.listFiles(new FileFilter(){
        public boolean accept(        File pathname){
          boolean result=true;
          if (pathname != null && pathname.isFile()) {
            try {
              result=Pattern.compile(regEx).matcher(pathname.getName()).find();
            }
 catch (            PatternSyntaxException e) {
            }
          }
          return result;
        }
      }
);
    }
 catch (    Exception e) {
    }
    for (int i=0; i < children.length; i++) {
      exportResource(rootName,directory + file.getName() + separator,children[i].getPath(),leadupDepth + 1);
    }
  }
}","public void exportResource(String rootName,String directory,String exportResource,int leadupDepth) throws InterruptedException {
  final String separator=""String_Node_Str"";
  File file=new File(exportResource);
  if (file.isFile()) {
    String destinationName=file.getName();
    if (!""String_Node_Str"".equals(directory)) {
      if (directory.endsWith(separator)) {
        destinationName=directory + file.getName();
      }
 else {
        destinationName=directory + separator + file.getName();
      }
    }
    if (rootName != null && !""String_Node_Str"".equals(destinationName)) {
      destinationName=rootName + separator + destinationName;
    }
    try {
      this.write(exportResource,destinationName);
    }
 catch (    IOException e) {
      ExceptionHandler.process(e);
    }
catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (file.isDirectory()) {
    File[] children=null;
    try {
      children=file.listFiles(new FileFilter(){
        @Override public boolean accept(        File pathname){
          boolean result=true;
          if (pathname != null && pathname.isFile()) {
            try {
              result=Pattern.compile(regEx).matcher(pathname.getName()).find();
            }
 catch (            PatternSyntaxException e) {
            }
          }
          return result;
        }
      }
);
    }
 catch (    Exception e) {
    }
    for (    File element : children) {
      exportResource(rootName,directory + file.getName() + separator,element.getPath(),leadupDepth + 1);
    }
  }
}",0.9001280409731114
125592,"/** 
 * Do all required cleanup now that we're finished with the currently-open .tar.gz
 * @exception java.io.IOException
 */
public void finished() throws IOException {
}","/** 
 * Do all required cleanup now that we're finished with the currently-open .tar.gz
 * @exception java.io.IOException
 */
@Override public void finished() throws IOException {
}",0.9715909090909092
125593,"/** 
 * Write the passed resource to the current archive.
 * @param resource org.eclipse.core.resources.IFile
 * @param destinationPath java.lang.String
 * @exception java.io.IOException
 * @exception org.eclipse.core.runtime.CoreException
 */
public void write(String resource,String destinationPath) throws IOException, CoreException {
  Path path=new Path(destinationPath);
  if (path.segmentCount() == 1) {
    writeFile(resource,new File(rootFolder,path.segment(0)));
  }
 else {
    File destination=new File(rootFolder,path.toOSString());
    createFolder(destination.getAbsolutePath());
    writeFile(resource,destination);
  }
}","/** 
 * Write the passed resource to the current archive.
 * @param resource org.eclipse.core.resources.IFile
 * @param destinationPath java.lang.String
 * @exception java.io.IOException
 * @exception org.eclipse.core.runtime.CoreException
 */
@Override public void write(String resource,String destinationPath) throws IOException, CoreException {
  Path path=new Path(destinationPath);
  if (path.segmentCount() == 1) {
    writeFile(resource,new File(rootFolder,path.segment(0)));
  }
 else {
    File destination=new File(rootFolder,path.toOSString());
    createFolder(destination.getAbsolutePath());
    writeFile(resource,destination);
  }
}",0.9922118380062306
125594,"public boolean accept(File pathname){
  boolean result=true;
  if (pathname != null && pathname.isFile()) {
    try {
      result=Pattern.compile(regEx).matcher(pathname.getName()).find();
    }
 catch (    PatternSyntaxException e) {
    }
  }
  return result;
}","@Override public boolean accept(File pathname){
  boolean result=true;
  if (pathname != null && pathname.isFile()) {
    try {
      result=Pattern.compile(regEx).matcher(pathname.getName()).find();
    }
 catch (    PatternSyntaxException e) {
    }
  }
  return result;
}",0.9814126394052044
125595,"/** 
 * Do all required cleanup now that we're finished with the currently-open .tar.gz
 * @exception java.io.IOException
 */
public void finished() throws IOException {
  outputStream.close();
  if (gzipOutputStream != null) {
    gzipOutputStream.close();
  }
}","/** 
 * Do all required cleanup now that we're finished with the currently-open .tar.gz
 * @exception java.io.IOException
 */
@Override public void finished() throws IOException {
  outputStream.close();
  if (gzipOutputStream != null) {
    gzipOutputStream.close();
  }
}",0.9813432835820896
125596,"/** 
 * Write the passed resource to the current archive.
 * @param resource org.eclipse.core.resources.IFile
 * @param destinationPath java.lang.String
 * @exception java.io.IOException
 * @exception org.eclipse.core.runtime.CoreException
 */
public void write(String resource,String destinationPath) throws IOException, CoreException {
  TarEntry newEntry=new TarEntry(destinationPath);
  write(newEntry,resource);
}","/** 
 * Write the passed resource to the current archive.
 * @param resource org.eclipse.core.resources.IFile
 * @param destinationPath java.lang.String
 * @exception java.io.IOException
 * @exception org.eclipse.core.runtime.CoreException
 */
@Override public void write(String resource,String destinationPath) throws IOException, CoreException {
  TarEntry newEntry=new TarEntry(destinationPath);
  write(newEntry,resource);
}",0.9881796690307328
125597,"/** 
 * Do all required cleanup now that we're finished with the currently-open .zip
 * @exception java.io.IOException
 */
public void finished() throws IOException {
  outputStream.close();
}","/** 
 * Do all required cleanup now that we're finished with the currently-open .zip
 * @exception java.io.IOException
 */
@Override public void finished() throws IOException {
  outputStream.close();
}",0.9746192893401016
125598,"/** 
 * Write the passed resource to the current archive.
 * @param resource org.eclipse.core.resources.IFile
 * @param destinationPath java.lang.String
 * @exception java.io.IOException
 * @exception org.eclipse.core.runtime.CoreException
 */
public void write(String resource,String destinationPath) throws IOException, CoreException {
  ZipEntry newEntry=new ZipEntry(destinationPath);
  write(newEntry,resource);
}","/** 
 * Write the passed resource to the current archive.
 * @param resource org.eclipse.core.resources.IFile
 * @param destinationPath java.lang.String
 * @exception java.io.IOException
 * @exception org.eclipse.core.runtime.CoreException
 */
@Override public void write(String resource,String destinationPath) throws IOException, CoreException {
  ZipEntry newEntry=new ZipEntry(destinationPath);
  write(newEntry,resource);
}",0.9881796690307328
125599,"@SuppressWarnings(""String_Node_Str"") public ResourcesManager doUnify(boolean interruptable) throws TarException, ZipException, FileNotFoundException, IOException {
  final File originalFile=getOriginalFileResouce();
  Assert.isNotNull(originalFile);
  final String absolutePath=originalFile.getAbsolutePath();
  if (!originalFile.exists()) {
    throw new FileNotFoundException(absolutePath);
  }
  final File tmpWorkFolder=getTmpResWorkFolder();
  if (originalFile.isDirectory()) {
    try {
      FileCopyUtils.copyFolder(originalFile,tmpWorkFolder,interruptable);
    }
 catch (    Throwable e) {
      if (e instanceof InterruptedException && interruptable) {
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
 else   if (originalFile.isFile()) {
    this.isArchiveFile=true;
    ProviderManager archiveProviderManager=null;
    ILeveledImportStructureProvider importProvider=null;
    if (ArchiveFileManipulations.isTarFile(absolutePath)) {
      TarFile tarFile=new TarFile(originalFile);
      importProvider=new TarLeveledStructureProvider(tarFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
 else     if (ArchiveFileManipulations.isZipFile(absolutePath)) {
      ZipFile zipFile=new ZipFile(originalFile);
      importProvider=new ZipLeveledStructureProvider(zipFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
    if (archiveProviderManager != null && importProvider != null) {
      if (!archiveProviderManager.collectPath2Object(importProvider.getRoot())) {
        throw new IOException(""String_Node_Str"");
      }
      try {
        decompress(archiveProviderManager,tmpWorkFolder,interruptable);
      }
  finally {
        if (archiveProviderManager != null) {
          archiveProviderManager.closeResource();
        }
      }
    }
  }
  collectPath2Object(tmpWorkFolder,interruptable);
  return this;
}","@SuppressWarnings(""String_Node_Str"") public ResourcesManager doUnify(boolean interruptable) throws TarException, ZipException, FileNotFoundException, IOException {
  final File originalFile=getOriginalFileResouce();
  Assert.isNotNull(originalFile);
  final String absolutePath=originalFile.getAbsolutePath();
  if (!originalFile.exists()) {
    throw new FileNotFoundException(absolutePath);
  }
  final File tmpWorkFolder=getTmpResWorkFolder();
  if (originalFile.isDirectory()) {
    try {
      FileCopyUtils.copyFolder(originalFile,tmpWorkFolder,interruptable);
    }
 catch (    Throwable e) {
      if (e instanceof InterruptedException && interruptable) {
      }
 else {
        ExceptionHandler.process(e);
      }
    }
  }
 else   if (originalFile.isFile()) {
    this.isArchiveFile=true;
    ProviderManager archiveProviderManager=null;
    ILeveledImportStructureProvider importProvider=null;
    if (ArchiveFileManipulations.isTarFile(absolutePath)) {
      TarFile tarFile=new TarFile(originalFile);
      importProvider=new TarLeveledStructureProvider(tarFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
 else     if (ArchiveFileManipulations.isZipFile(absolutePath)) {
      ZipFile zipFile=new ZipFile(originalFile);
      importProvider=new ZipLeveledStructureProvider(zipFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
    if (archiveProviderManager != null && importProvider != null) {
      if (!archiveProviderManager.collectPath2Object(importProvider.getRoot())) {
        throw new IOException(""String_Node_Str"");
      }
      try {
        decompress(archiveProviderManager,tmpWorkFolder,interruptable);
      }
  finally {
        if (archiveProviderManager != null) {
          archiveProviderManager.closeResource();
        }
      }
    }
    this.getEmptyFolders().addAll(archiveProviderManager.getEmptyFolders());
  }
  collectPath2Object(originalFile,tmpWorkFolder,tmpWorkFolder,interruptable);
  return this;
}",0.9744847890088322
125600,"private boolean doCollectItemFiles(File directory,boolean interruptable){
  File[] contents=directory.listFiles();
  Thread currentThread=Thread.currentThread();
  if (contents != null) {
    for (    File content : contents) {
      if (interruptable && currentThread.isInterrupted()) {
        return false;
      }
      File file=content;
      if (file.isFile()) {
        add(file.getAbsolutePath(),file);
      }
      if (file.isDirectory()) {
        if ((!FilesUtils.isSVNFolder(file))) {
          collectPath2Object(content,interruptable);
        }
      }
    }
  }
  return true;
}","private boolean doCollectItemFiles(File original,File root,File directory,boolean interruptable){
  File[] contents=directory.listFiles();
  Thread currentThread=Thread.currentThread();
  if (contents != null) {
    for (    File content : contents) {
      if (interruptable && currentThread.isInterrupted()) {
        return false;
      }
      File file=content;
      if (file.isFile()) {
        add(file.getAbsolutePath(),file);
      }
      if (file.isDirectory()) {
        if ((!FilesUtils.isSVNFolder(file))) {
          collectPath2Object(original,root,content,interruptable);
        }
        IPath folderPath=getFolderPath(original,root,file);
        if (folderPath != null) {
          addFolder(folderPath.toPortableString());
        }
      }
    }
  }
  return true;
}",0.8412698412698413
125601,"public boolean collectPath2Object(Object root,boolean interruptable){
  if (interruptable && Thread.currentThread().isInterrupted()) {
    return false;
  }
  return doCollectItemFiles((File)root,interruptable);
}","public boolean collectPath2Object(File original,File root,File current,boolean interruptable){
  if (interruptable && Thread.currentThread().isInterrupted()) {
    return false;
  }
  return doCollectItemFiles(original,root,current,interruptable);
}",0.8398268398268398
125602,"private boolean doCollectItemFiles(Object entry,int level){
  List children=provider.getChildren(entry);
  if (children == null) {
    children=new ArrayList(1);
  }
  Iterator childrenEnum=children.iterator();
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    if (provider.isFolder(child)) {
      doCollectItemFiles(child,level + 1);
    }
 else {
      add(provider.getFullPath(child),child);
    }
  }
  return true;
}","private boolean doCollectItemFiles(Object entry,int level){
  List children=provider.getChildren(entry);
  if (children == null) {
    children=new ArrayList(1);
  }
  Iterator childrenEnum=children.iterator();
  while (childrenEnum.hasNext()) {
    Object child=childrenEnum.next();
    if (provider.isFolder(child)) {
      doCollectItemFiles(child,level + 1);
      addFolder(provider.getFullPath(child));
    }
 else {
      add(provider.getFullPath(child),child);
    }
  }
  return true;
}",0.951271186440678
125603,"public static ProjectRepositoryNode getInstance(){
  if (defaultProjRepoNode == null) {
    defaultProjRepoNode=new ProjectRepositoryNode(null,null,ENodeType.STABLE_SYSTEM_FOLDER);
    defaultProjRepoNode.initialize(null);
  }
  if (defaultProjRepoNode.isDisposed) {
synchronized (defaultProjRepoNode) {
      if (defaultProjRepoNode.isDisposed) {
        defaultProjRepoNode.isDisposed=false;
        defaultProjRepoNode.project=ProjectManager.getInstance().getCurrentProject();
        defaultProjRepoNode.setRoot(defaultProjRepoNode);
        defaultProjRepoNode.initialize(defaultProjRepoNode.currentPerspective);
      }
    }
  }
  return defaultProjRepoNode;
}","public static ProjectRepositoryNode getInstance(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return dummyProjRepoNode;
  }
  if (defaultProjRepoNode == null) {
    defaultProjRepoNode=new ProjectRepositoryNode(null,null,ENodeType.STABLE_SYSTEM_FOLDER);
    defaultProjRepoNode.initialize(null);
  }
  if (defaultProjRepoNode.isDisposed) {
synchronized (defaultProjRepoNode) {
      if (defaultProjRepoNode.isDisposed) {
        defaultProjRepoNode.isDisposed=false;
        defaultProjRepoNode.project=ProjectManager.getInstance().getCurrentProject();
        defaultProjRepoNode.setRoot(defaultProjRepoNode);
        defaultProjRepoNode.initialize(defaultProjRepoNode.currentPerspective);
      }
    }
  }
  return defaultProjRepoNode;
}",0.9283228949199722
125604,"public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  fullLogonFinished=false;
  ProjectRepositoryNode root=ProjectRepositoryNode.getInstance();
  if (root != null) {
    root.setEnableDisposed(true);
    root.dispose();
  }
}","public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  ProjectRepositoryNode root=ProjectRepositoryNode.getInstance();
  if (root != null) {
    root.setEnableDisposed(true);
    root.dispose();
  }
  fullLogonFinished=false;
}",0.8928571428571429
125605,"/** 
 * DOC ggu Comment method ""getMainProjectBranch"".
 * @param technicalLabel
 * @return
 */
public String getMainProjectBranch(String technicalLabel){
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return null;
  }
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (fields.containsKey(branchKey)) {
    String branchForMainProject=fields.get(branchKey);
    return branchForMainProject;
  }
  return null;
}","/** 
 * DOC ggu Comment method ""getMainProjectBranch"".
 * @param technicalLabel
 * @return
 */
public String getMainProjectBranch(String technicalLabel){
  String branchForMainProject=null;
  Map<String,String> fields=getRepositoryContextFields();
  if (fields == null || technicalLabel == null) {
    return branchForMainProject;
  }
  String branchKey=IProxyRepositoryFactory.BRANCH_SELECTION + SVNConstant.UNDER_LINE_CHAR + technicalLabel;
  if (fields.containsKey(branchKey)) {
    branchForMainProject=fields.get(branchKey);
  }
  if (branchForMainProject != null) {
    if (!branchForMainProject.contains(SVNConstant.NAME_TAGS) && !branchForMainProject.contains(SVNConstant.NAME_BRANCHES) && !branchForMainProject.contains(SVNConstant.NAME_TRUNK)&& !branchForMainProject.contains(SVNConstant.NAME_MASTER)) {
      branchForMainProject=SVNConstant.NAME_BRANCHES + SVNConstant.SEP_CHAR + branchForMainProject;
    }
  }
  return branchForMainProject;
}",0.6907630522088354
125606,"static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}","static List<IContextParameter> getDBVariables(String prefixName,DatabaseConnection conn,Set<IConnParamName> paramSet){
  if (conn == null || prefixName == null || paramSet == null || paramSet.isEmpty()) {
    return Collections.emptyList();
  }
  List<IContextParameter> varList=new ArrayList<IContextParameter>();
  String paramPrefix=prefixName + ConnectionContextHelper.LINE;
  String paramName=null;
  for (  IConnParamName param : paramSet) {
    if (param instanceof EDBParamName) {
      EDBParamName dbParam=(EDBParamName)param;
      paramName=paramPrefix + dbParam;
switch (dbParam) {
case AdditionalParams:
        ConnectionContextHelper.createParameters(varList,paramName,conn.getAdditionalParams());
      break;
case Datasource:
    ConnectionContextHelper.createParameters(varList,paramName,conn.getDatasourceName());
  break;
case DBRootPath:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDBRootPath(),JavaTypesManager.DIRECTORY);
break;
case File:
ConnectionContextHelper.createParameters(varList,paramName,conn.getFileFieldName(),JavaTypesManager.FILE);
break;
case Password:
ConnectionContextHelper.createParameters(varList,paramName,conn.getRawPassword(),JavaTypesManager.PASSWORD);
break;
case JdbcUrl:
String url=conn.getURL();
String h2Prefix=""String_Node_Str"";
if (url.startsWith(h2Prefix)) {
String path=url.substring(h2Prefix.length(),url.length());
path=PathUtils.getPortablePath(path);
url=h2Prefix + path;
}
ConnectionContextHelper.createParameters(varList,paramName,url);
break;
case DriverJar:
String path=conn.getDriverJarPath();
PathUtils.getOSPath(path);
if (path.contains(""String_Node_Str"")) {
Path p=new Path(path);
String newPath=p.getDevice();
for (int i=0; i < p.segmentCount(); i++) {
newPath=newPath + ""String_Node_Str"" + p.segment(i);
}
path=newPath;
}
ConnectionContextHelper.createParameters(varList,paramName,path);
break;
case MappingFile:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDbmsId());
break;
case ClassName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getDriverClass());
break;
case Port:
ConnectionContextHelper.createParameters(varList,paramName,conn.getPort(),JavaTypesManager.STRING);
break;
case Schema:
if (conn.getProductId().equals(EDatabaseTypeName.ORACLEFORSID.getProduct())) {
String schema=conn.getUiSchema();
if (schema != null) {
conn.setUiSchema(schema.toUpperCase());
}
}
ConnectionContextHelper.createParameters(varList,paramName,conn.getUiSchema());
break;
case Server:
ConnectionContextHelper.createParameters(varList,paramName,conn.getServerName());
break;
case Sid:
case Database:
case ServiceName:
ConnectionContextHelper.createParameters(varList,paramName,conn.getSID());
break;
case Login:
ConnectionContextHelper.createParameters(varList,paramName,conn.getUsername());
break;
case JobTrackerOrResourceManager:
String value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case NameNode:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePrincipal:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveMetastore:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriverJar:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveDriveClass:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveUserName:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HivePassword:
value=conn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case HiveKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HiveKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveAdditionalJDBCParameters:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePath:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case hiveSSLTrustStorePassword:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
value=conn.getValue(value,false);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case MasterPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case RegionPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTabPrincipal:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case HbaseKeyTab:
value=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case ImpalaPrincipal:
value=conn.getParameters().get(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value,JavaTypesManager.PASSWORD);
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
value=conn.getParameters().get(key);
ConnectionContextHelper.createParameters(varList,paramName,value);
break;
default :
}
}
}
createAdditionalContextParameters(prefixName,varList,getHiveOrHbaseHadoopProperties(conn));
createAdditionalContextParameters(prefixName,varList,getHiveJdbcProperties(conn));
return varList;
}",0.98852784720887
125607,"static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}","static void matchContextPropertiesForDbConnection(EDBParamName dbParam,DatabaseConnection conn,String originalVariableName){
switch (dbParam) {
case AdditionalParams:
    conn.setAdditionalParams(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
  break;
case Datasource:
conn.setDatasourceName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DBRootPath:
conn.setDBRootPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case File:
conn.setFileFieldName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Password:
conn.setPassword(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JdbcUrl:
conn.setURL(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case DriverJar:
conn.setDriverJarPath(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MappingFile:
conn.setDbmsId(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ClassName:
conn.setDriverClass(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Port:
conn.setPort(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Schema:
conn.setUiSchema(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Server:
conn.setServerName(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Sid:
case Database:
case ServiceName:
conn.setSID(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Login:
conn.setUsername(ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case JobTrackerOrResourceManager:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case NameNode:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePrincipal:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveMetastore:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriverJar:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveDriveClass:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveUserName:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HivePassword:
conn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HiveKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveAdditionalJDBCParameters:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePath:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case hiveSSLTrustStorePassword:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case MasterPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case RegionPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTabPrincipal:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case HbaseKeyTab:
conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Username:
String key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Password:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Cluster:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case Maprticket_Duration:
key=ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION;
if (EDatabaseTypeName.HBASE.getDisplayName().equals(conn.getDatabaseType())) {
key=ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION;
}
conn.getParameters().put(key,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
case ImpalaPrincipal:
conn.getParameters().put(ConnParameterKeys.IMPALA_AUTHENTICATION_PRINCIPLA,ContextParameterUtils.getNewScriptCode(originalVariableName,LANGUAGE));
break;
default :
}
}",0.9864344072760908
125608,"/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected synchronized List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    List<String> propertyFounds=new ArrayList<String>();
    List<String> folderNamesFounds=new ArrayList<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      List<String> physicalPropertyFounds=new ArrayList<String>();
      List<String> physicalDirectoryFounds=new ArrayList<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              Exception e) {
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                String curFile=current.getFullPath().toPortableString();
                if (!invalidFiles.contains(curFile)) {
                  invalidFiles.add(curFile);
                  log.error(Messages.getString(""String_Node_Str"") + current);
                }
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  deleteResource(current);
                }
 catch (                PersistenceException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}","/** 
 * Get all object in a folder recursively.
 * @param folder - the folder to search in
 * @param id - the id of the object searched. Specify <code>null</code> to get all objects.
 * @param type - the type searched
 * @param allVersion - <code>true</code> if all version of each object must be return or <code>false</code> if onlythe most recent version
 * @return a list (may be empty) of objects found
 * @throws PersistenceException
 */
@Override protected synchronized List<IRepositoryViewObject> getSerializableFromFolder(Project project,Object folder,String id,ERepositoryObjectType type,boolean allVersion,boolean searchInChildren,boolean withDeleted,boolean avoidSaveProject,boolean... recursiveCall) throws PersistenceException {
  List<IRepositoryViewObject> toReturn=new VersionList(allVersion);
  FolderHelper folderHelper=getFolderHelper(project.getEmfProject());
  if (folder != null) {
    IFolder physicalFolder;
    FolderItem currentFolderItem=null;
    if (folder instanceof IFolder) {
      if (!((IFolder)folder).getName().equals(BIN)) {
        currentFolderItem=folderHelper.getFolder(((IFolder)folder).getProjectRelativePath());
        if (((IFolder)folder).getLocation().toPortableString().contains(BIN)) {
        }
 else         if (currentFolderItem == null) {
          currentFolderItem=folderHelper.createFolder(((IFolder)folder).getProjectRelativePath().toPortableString());
        }
      }
      physicalFolder=(IFolder)folder;
    }
 else {
      currentFolderItem=(FolderItem)folder;
      physicalFolder=getPhysicalProject(project).getFolder(folderHelper.getFullFolderPath(currentFolderItem));
    }
    Set<String> propertyFounds=new HashSet<String>();
    Set<String> folderNamesFounds=new HashSet<String>();
    List<Item> toRemoveFromFolder=new ArrayList<Item>();
    if (currentFolderItem != null) {
      for (      Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
        Property property=curItem.getProperty();
        if (property != null) {
          if (curItem instanceof FolderItem && searchInChildren) {
            folderNamesFounds.add(curItem.getProperty().getLabel());
            toReturn.addAll(getSerializableFromFolder(project,curItem,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
          }
 else           if (!(curItem instanceof FolderItem)) {
            if (property.eResource() != null) {
              if (id == null || property.getId().equals(id)) {
                if (withDeleted || !property.getItem().getState().isDeleted()) {
                  toReturn.add(new RepositoryObject(property));
                }
              }
              propertyFounds.add(property.eResource().getURI().lastSegment());
              property.getItem().setParent(currentFolderItem);
              addToHistory(id,type,property.getItem().getState().getPath());
            }
 else {
              toRemoveFromFolder.add(curItem);
            }
          }
        }
 else {
          toRemoveFromFolder.add(curItem);
        }
      }
      if (toRemoveFromFolder.size() != 0) {
        currentFolderItem.getChildren().removeAll(toRemoveFromFolder);
      }
    }
    if (physicalFolder.exists()) {
      Set<String> physicalPropertyFounds=new HashSet<String>();
      Set<String> physicalDirectoryFounds=new HashSet<String>();
      for (      IResource current : ResourceUtils.getMembers(physicalFolder)) {
        if (current instanceof IFile) {
          if (xmiResourceManager.isPropertyFile((IFile)current)) {
            String fileName=((IFile)current).getName();
            physicalPropertyFounds.add(fileName);
            if (!propertyFounds.contains(fileName)) {
              Property property=null;
              try {
                property=xmiResourceManager.loadProperty(current);
              }
 catch (              Exception e) {
              }
              if (property != null) {
                if (property.getItem() == null || property.getItem().getState() == null) {
                  if (type != null) {
                    log.error(""String_Node_Str"" + property.getLabel() + ""String_Node_Str""+ type);
                  }
 else {
                    log.error(""String_Node_Str"" + property.getLabel());
                  }
                  continue;
                }
                addToHistory(property.getId(),type,property.getItem().getState().getPath());
                if (id == null || property.getId().equals(id)) {
                  if (withDeleted || !property.getItem().getState().isDeleted()) {
                    toReturn.add(new RepositoryObject(property));
                  }
                }
                if (currentFolderItem != null && !currentFolderItem.getChildren().contains(property.getItem())) {
                  currentFolderItem.getChildren().add(property.getItem());
                  property.getItem().setParent(currentFolderItem);
                }
              }
 else {
                String curFile=current.getFullPath().toPortableString();
                if (!invalidFiles.contains(curFile)) {
                  invalidFiles.add(curFile);
                  log.error(Messages.getString(""String_Node_Str"") + current);
                }
              }
            }
          }
        }
 else         if (current instanceof IFolder) {
          if (!((IFolder)current).getName().startsWith(""String_Node_Str"") && !FilesUtils.isSVNFolder(current) && searchInChildren) {
            String fileName=((IFolder)current).getName();
            physicalDirectoryFounds.add(fileName);
            if (!folderNamesFounds.contains(((IFolder)current).getName())) {
              FolderItem parentFolder=folderHelper.getFolder(current.getProjectRelativePath());
              if (parentFolder == null) {
                parentFolder=folderHelper.createFolder(current.getProjectRelativePath().toString());
              }
              parentFolder.setParent(currentFolderItem);
              toReturn.addAll(getSerializableFromFolder(project,(IFolder)current,id,type,allVersion,true,withDeleted,avoidSaveProject,true));
            }
            if (((IFolder)current).getName().equals(BIN)) {
              IResource[] binFolder=ResourceUtils.getMembers((IFolder)current);
              if (binFolder.length == 0 || (binFolder.length == 1 && FilesUtils.isSVNFolder(binFolder[0]))) {
                try {
                  deleteResource(current);
                }
 catch (                PersistenceException e) {
                }
              }
            }
          }
        }
      }
      if (currentFolderItem != null) {
        List<Item> itemsDeleted=new ArrayList<Item>();
        for (        Item curItem : new ArrayList<Item>(currentFolderItem.getChildren())) {
          if (!(curItem instanceof FolderItem)) {
            String name;
            if (curItem.eResource() != null) {
              name=curItem.eResource().getURI().lastSegment();
            }
 else {
              name=curItem.getProperty().getLabel() + ""String_Node_Str"" + curItem.getProperty().getVersion()+ ""String_Node_Str""+ FileConstants.PROPERTIES_EXTENSION;
            }
            if (!physicalPropertyFounds.contains(name)) {
              itemsDeleted.add(curItem);
            }
          }
 else           if (searchInChildren && ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
            if (!physicalDirectoryFounds.contains(curItem.getProperty().getLabel())) {
              itemsDeleted.add(curItem);
            }
          }
        }
        for (        Item item : itemsDeleted) {
          item.setParent(null);
          Iterator<IRepositoryViewObject> it=toReturn.iterator();
          while (it.hasNext()) {
            IRepositoryViewObject object=it.next();
            if (object.getLabel().equals(item.getProperty().getLabel()) && object.getId().equals(item.getProperty().getId()) && object.getVersion().equals(item.getProperty().getVersion())) {
              it.remove();
            }
          }
        }
        currentFolderItem.getChildren().removeAll(itemsDeleted);
      }
    }
  }
  return toReturn;
}",0.995319044099532
125609,"private void collectContextParams(){
  collectHiveContextParams();
  collectHBaseContextParams();
}","private void collectContextParams(){
  collectHiveContextParams();
  collectHBaseContextParams();
  collectImpalaContextParams();
}",0.8608695652173913
125610,"@Override protected void doRun(){
  final ISelection selection=getSelection();
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          if (!isContainParentNode(selectNodes,(RepositoryNode)obj)) {
            selectNodes.add((RepositoryNode)obj);
          }
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      List<RepositoryNode> accessNodes=new ArrayList<RepositoryNode>();
      for (      RepositoryNode node : selectNodes) {
        try {
          accessNodes.add(node);
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (needReturn) {
              if (accessNodes.containsAll(selectNodes)) {
                return;
              }
 else {
                continue;
              }
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            types.add(node.getContentType());
            if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
              types.add(ERepositoryObjectType.DOCUMENTATION);
            }
            deletedFolder.add(node);
            deleteFolder(node,factory,deleteActionCache);
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject() || factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    return;
  }
  final ISelection selection=getSelection();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          if (!isContainParentNode(selectNodes,(RepositoryNode)obj)) {
            selectNodes.add((RepositoryNode)obj);
          }
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      List<RepositoryNode> accessNodes=new ArrayList<RepositoryNode>();
      for (      RepositoryNode node : selectNodes) {
        try {
          accessNodes.add(node);
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (needReturn) {
              if (accessNodes.containsAll(selectNodes)) {
                return;
              }
 else {
                continue;
              }
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            types.add(node.getContentType());
            if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
              types.add(ERepositoryObjectType.DOCUMENTATION);
            }
            deletedFolder.add(node);
            deleteFolder(node,factory,deleteActionCache);
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.9836913040802512
125611,"private void handleReferenced(RepositoryNode parent){
  if (parent.getType().equals(ENodeType.SYSTEM_FOLDER)) {
    for (    ProjectReference refProject : (List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
      String parentBranch=ProjectManager.getInstance().getMainProjectBranch(project);
      if (refProject.getReferencedProject().getUrl() != null && refProject.getReferencedProject().getUrl().startsWith(""String_Node_Str"") || (refProject.getBranch() != null && refProject.getBranch().equals(parentBranch))) {
        Project emfProject=refProject.getReferencedProject();
        ProjectRepositoryNode referencedProjectNode=new ProjectRepositoryNode(new org.talend.core.model.general.Project(emfProject),null,parent,this,ENodeType.REFERENCED_PROJECT);
        referencedProjectNode.setProperties(EProperties.LABEL,emfProject.getLabel());
        referencedProjectNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
        parent.getChildren().add(referencedProjectNode);
        referencedProjectNode.initialize(currentPerspective);
      }
    }
  }
}","private void handleReferenced(RepositoryNode parent){
  if (parent.getType().equals(ENodeType.SYSTEM_FOLDER)) {
    for (    ProjectReference refProject : (List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
      String parentBranch=ProjectManager.getInstance().getMainProjectBranch(project);
      if (refProject.getBranch() == null || refProject.getBranch().equals(parentBranch)) {
        Project emfProject=refProject.getReferencedProject();
        ProjectRepositoryNode referencedProjectNode=new ProjectRepositoryNode(new org.talend.core.model.general.Project(emfProject),null,parent,this,ENodeType.REFERENCED_PROJECT);
        referencedProjectNode.setProperties(EProperties.LABEL,emfProject.getLabel());
        referencedProjectNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.REFERENCED_PROJECTS);
        parent.getChildren().add(referencedProjectNode);
        referencedProjectNode.initialize(currentPerspective);
      }
    }
  }
}",0.9277566539923956
125612,"public void unloadRelations(){
  loaded=false;
  currentProjectItemsRelations=new HashMap<Relation,Set<Relation>>();
  referencesItemsRelations=new HashMap<Relation,Set<Relation>>();
}","public void unloadRelations(){
  loaded=false;
  clearAllItemsRelations();
}",0.5384615384615384
125613,"/** 
 * return the referenced projects of the project.
 */
@SuppressWarnings(""String_Node_Str"") public List<Project> getReferencedProjects(Project project){
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  if (project != null && ctx != null) {
    if (project.equals(this.currentProject)) {
      return getReferencedProjects();
    }
    String parentBranch=getMainProjectBranch(project);
    List<Project> refProjects=new ArrayList<Project>();
    for (    ProjectReference refProject : (List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
      if (refProject.getBranch() == null || parentBranch.equals(refProject.getBranch())) {
        refProjects.add(new Project(refProject.getReferencedProject(),false));
      }
    }
    return refProjects;
  }
  return Collections.emptyList();
}","/** 
 * return the referenced projects of the project.
 */
@SuppressWarnings(""String_Node_Str"") public List<Project> getReferencedProjects(Project project){
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  if (project != null && ctx != null) {
    if (project.equals(this.currentProject)) {
      return getReferencedProjects();
    }
    String parentBranch=getMainProjectBranch(project);
    List<Project> refProjects=new ArrayList<Project>();
    for (    ProjectReference refProject : (List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
      if (refProject.getBranch() == null || refProject.getBranch().equals(parentBranch)) {
        refProjects.add(new Project(refProject.getReferencedProject(),false));
      }
    }
    return refProjects;
  }
  return Collections.emptyList();
}",0.9757281553398058
125614,"@SuppressWarnings(""String_Node_Str"") private void resolveRefProject(org.talend.core.model.properties.Project p){
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  if (p != null && ctx != null) {
    String parentBranch=ProjectManager.getInstance().getMainProjectBranch(p);
    if (parentBranch != null) {
      for (      ProjectReference pr : (List<ProjectReference>)p.getReferencedProjects()) {
        if (pr.getBranch() == null || parentBranch.equals(pr.getBranch())) {
          resolveRefProject(pr.getReferencedProject());
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void resolveRefProject(org.talend.core.model.properties.Project p){
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  if (p != null && ctx != null) {
    String parentBranch=ProjectManager.getInstance().getMainProjectBranch(p);
    if (parentBranch != null) {
      for (      ProjectReference pr : (List<ProjectReference>)p.getReferencedProjects()) {
        if (pr.getBranch() == null || pr.getBranch().equals(parentBranch)) {
          resolveRefProject(pr.getReferencedProject());
        }
      }
    }
  }
}",0.9824868651488616
125615,"private void resolveSubRefProject(org.talend.core.model.properties.Project p,List<Project> allReferencedprojects){
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  if (ctx != null && p != null) {
    String parentBranch=ProjectManager.getInstance().getMainProjectBranch(p);
    if (parentBranch != null) {
      for (      ProjectReference pr : (List<ProjectReference>)p.getReferencedProjects()) {
        if (pr.getBranch() == null || parentBranch.equals(pr.getBranch())) {
          Project project=new Project(pr.getReferencedProject(),false);
          allReferencedprojects.add(project);
          resolveSubRefProject(pr.getReferencedProject(),allReferencedprojects);
        }
      }
    }
  }
}","private void resolveSubRefProject(org.talend.core.model.properties.Project p,List<Project> allReferencedprojects){
  Context ctx=CoreRuntimePlugin.getInstance().getContext();
  if (ctx != null && p != null) {
    String parentBranch=ProjectManager.getInstance().getMainProjectBranch(p);
    if (parentBranch != null) {
      for (      ProjectReference pr : (List<ProjectReference>)p.getReferencedProjects()) {
        if (pr.getBranch() == null || pr.getBranch().equals(parentBranch)) {
          Project project=new Project(pr.getReferencedProject(),false);
          allReferencedprojects.add(project);
          resolveSubRefProject(pr.getReferencedProject(),allReferencedprojects);
        }
      }
    }
  }
}",0.9860335195530726
125616,"@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}","@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    RelationshipItemBuilder.getInstance().cleanTypeRelations(RelationshipItemBuilder.JOB_RELATION,RelationshipItemBuilder.JOB_RELATION,false);
    RelationshipItemBuilder.getInstance().cleanTypeRelations(RelationshipItemBuilder.JOBLET_RELATION,RelationshipItemBuilder.JOBLET_RELATION,true);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}",0.9830524795377948
125617,"@Override public Project createProject(Project projectInfor) throws PersistenceException {
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  String technicalLabel=Project.createTechnicalName(projectInfor.getLabel());
  IProject prj=root.getProject(technicalLabel);
  final IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    IProjectDescription desc=null;
    if (prj.exists()) {
      desc=prj.getDescription();
    }
 else {
      desc=workspace.newProjectDescription(projectInfor.getLabel());
    }
    desc.setNatureIds(new String[]{TalendNature.ID});
    desc.setComment(projectInfor.getDescription());
    if (!prj.exists()) {
      prj.create(desc,null);
    }
    prj.open(IResource.NONE,null);
    prj.setDefaultCharset(""String_Node_Str"",null);
  }
 catch (  CoreException e) {
    throw new PersistenceException(e);
  }
  Project project=new Project();
  project.setLabel(projectInfor.getLabel());
  project.setDescription(projectInfor.getDescription());
  project.setLanguage(projectInfor.getLanguage());
  project.setAuthor(projectInfor.getAuthor());
  project.setLocal(true);
  project.setTechnicalLabel(technicalLabel);
  saveProject(prj,project);
  return project;
}","@Override public Project createProject(Project projectInfor) throws PersistenceException {
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  IProgressMonitor monitor=new NullProgressMonitor();
  String technicalLabel=Project.createTechnicalName(projectInfor.getLabel());
  IProject prj=root.getProject(technicalLabel);
  final IWorkspace workspace=ResourcesPlugin.getWorkspace();
  try {
    if (prj.exists() && !prj.getFile(IProjectDescription.DESCRIPTION_FILE_NAME).getLocation().toFile().exists()) {
      File projectFolder=prj.getLocation().toFile();
      File bakFolder=new File(projectFolder.getParentFile(),technicalLabel + ""String_Node_Str"");
      boolean renamed=false;
      try {
        renamed=projectFolder.renameTo(bakFolder);
        if (renamed) {
          prj.delete(true,monitor);
        }
      }
  finally {
        if (renamed) {
          bakFolder.renameTo(projectFolder);
        }
      }
    }
    IProjectDescription desc=null;
    if (prj.exists()) {
      if (!prj.isOpen()) {
        prj.open(monitor);
      }
      desc=prj.getDescription();
    }
 else {
      desc=workspace.newProjectDescription(projectInfor.getLabel());
    }
    desc.setNatureIds(new String[]{TalendNature.ID});
    desc.setComment(projectInfor.getDescription());
    if (!prj.exists()) {
      prj.create(desc,monitor);
    }
    prj.open(IResource.NONE,monitor);
    prj.setDefaultCharset(""String_Node_Str"",monitor);
  }
 catch (  CoreException e) {
    throw new PersistenceException(e);
  }
  Project project=new Project();
  project.setLabel(projectInfor.getLabel());
  project.setDescription(projectInfor.getDescription());
  project.setLanguage(projectInfor.getLanguage());
  project.setAuthor(projectInfor.getAuthor());
  project.setLocal(true);
  project.setTechnicalLabel(technicalLabel);
  saveProject(prj,project);
  return project;
}",0.7674343172234837
125618,"@Override public List<org.talend.core.model.properties.Project> getReferencedProjects(Project project){
  String parentBranch=getRepositoryContext().getFields().get(IProxyRepositoryFactory.BRANCH_SELECTION + ""String_Node_Str"" + getRepositoryContext().getProject().getTechnicalLabel());
  List<org.talend.core.model.properties.Project> refProjectList=new ArrayList<org.talend.core.model.properties.Project>();
  for (  ProjectReference refProject : (List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
    if (refProject.getBranch() == null || parentBranch.equals(refProject.getBranch())) {
      refProjectList.add(refProject.getReferencedProject());
    }
  }
  return refProjectList;
}","@Override public List<org.talend.core.model.properties.Project> getReferencedProjects(Project project){
  String parentBranch=getRepositoryContext().getFields().get(IProxyRepositoryFactory.BRANCH_SELECTION + ""String_Node_Str"" + getRepositoryContext().getProject().getTechnicalLabel());
  List<org.talend.core.model.properties.Project> refProjectList=new ArrayList<org.talend.core.model.properties.Project>();
  for (  ProjectReference refProject : (List<ProjectReference>)project.getEmfProject().getReferencedProjects()) {
    if (refProject.getBranch() == null || refProject.getBranch().equals(parentBranch)) {
      refProjectList.add(refProject.getReferencedProject());
    }
  }
  return refProjectList;
}",0.9717912552891396
125619,"public void unloadRelations(){
  loaded=false;
  currentProjectItemsRelations=new HashMap<Relation,Set<Relation>>();
  referencesItemsRelations=new HashMap<Relation,Set<Relation>>();
}","public void unloadRelations(){
  loaded=false;
  clearAllItemsRelations();
}",0.5384615384615384
125620,"@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}","@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    RelationshipItemBuilder.getInstance().cleanTypeRelations(RelationshipItemBuilder.JOB_RELATION,RelationshipItemBuilder.JOB_RELATION,false);
    RelationshipItemBuilder.getInstance().cleanTypeRelations(RelationshipItemBuilder.JOBLET_RELATION,RelationshipItemBuilder.JOBLET_RELATION,true);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}",0.9830524795377948
125621,"private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hiveDistribution=hadoopDistributionService.getHiveDistributionManager().getDistribution(distribution,false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(version,false);
    if (hiveVersion == null) {
      return;
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.NAMENODE_URI.getName());
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.RESOURCE_MANAGER.getName());
    }
 else {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.JOBTRACKER.getName());
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
      getConnection().setSID(defaultDatabase);
    }
  }
}","private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hiveDistribution=hadoopDistributionService.getHiveDistributionManager().getDistribution(distribution,false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(version,false);
    if (hiveVersion == null) {
      return;
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.NAMENODE_URI.getName());
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.RESOURCE_MANAGER.getName());
    }
 else {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.JOBTRACKER.getName());
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
      getConnection().setSID(defaultDatabase);
    }
    String maprticket_Cluster=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    String defaultMaprticket_Cluster=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_CLUSTER.getName());
    if (StringUtils.isNotEmpty(maprticket_Cluster)) {
      maprTClusterForHiveTxt.setText(maprticket_Cluster);
    }
 else     if (defaultMaprticket_Cluster != null) {
      maprTClusterForHiveTxt.setText(defaultMaprticket_Cluster);
    }
    String maprticket_Duration=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
    String defaultMaprticket_Duration=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_DURATION.getName());
    if (StringUtils.isNotEmpty(maprticket_Duration)) {
      maprTDurationForHiveTxt.setText(maprticket_Duration);
    }
 else     if (defaultMaprticket_Duration != null) {
      maprTDurationForHiveTxt.setText(defaultMaprticket_Duration);
    }
  }
}",0.8467524693205627
125622,"private void fillDefaultsWhenHBaseVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hbaseDistribution=hadoopDistributionService.getHBaseDistributionManager().getDistribution(distribution,false);
    if (hbaseDistribution == null) {
      return;
    }
    IHDistributionVersion hbaseVersion=hbaseDistribution.getHDVersion(version,false);
    if (hbaseVersion == null) {
      return;
    }
    String defaultPort=hbaseVersion.getDefaultConfig(distribution,EHadoopCategory.HBASE.getName(),EHadoopProperties.PORT.getName());
    if (defaultPort != null && !isContextMode()) {
      getConnection().setPort(defaultPort);
      portText.setText(defaultPort);
    }
  }
}","private void fillDefaultsWhenHBaseVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
    String hbaseMasterPrincipal=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    String hbaseRSPrincipal=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hbaseDistribution=hadoopDistributionService.getHBaseDistributionManager().getDistribution(distribution,false);
    if (hbaseDistribution == null) {
      return;
    }
    IHDistributionVersion hbaseVersion=hbaseDistribution.getHDVersion(version,false);
    if (hbaseVersion == null) {
      return;
    }
    String defaultPort=hbaseVersion.getDefaultConfig(distribution,EHadoopCategory.HBASE.getName(),EHadoopProperties.PORT.getName());
    if (defaultPort != null && !isContextMode()) {
      getConnection().setPort(defaultPort);
      portText.setText(defaultPort);
    }
    String defaultHbaseMasterPrincipal=hbaseVersion.getDefaultConfig(distribution,EHadoopCategory.HBASE.getName(),EHadoopProperties.HBASE_MASTER_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hbaseMasterPrincipal)) {
      hbaseMasterPrincipalTxt.setText(hbaseMasterPrincipal);
    }
 else     if (defaultHbaseMasterPrincipal != null) {
      hbaseMasterPrincipalTxt.setText(defaultHbaseMasterPrincipal);
    }
    String defaultHbaseRSPrincipal=hbaseVersion.getDefaultConfig(distribution,EHadoopCategory.HBASE.getName(),EHadoopProperties.HBASE_REGIONSERVER_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hbaseRSPrincipal)) {
      hbaseRSPrincipalTxt.setText(hbaseRSPrincipal);
    }
 else     if (defaultHbaseRSPrincipal != null) {
      hbaseRSPrincipalTxt.setText(defaultHbaseRSPrincipal);
    }
    String maprticket_Cluster=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
    String defaultMaprticket_Cluster=hbaseVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_CLUSTER.getName());
    if (StringUtils.isNotEmpty(maprticket_Cluster)) {
      maprTClusterForHBaseTxt.setText(maprticket_Cluster);
    }
 else     if (defaultMaprticket_Cluster != null) {
      maprTClusterForHBaseTxt.setText(defaultMaprticket_Cluster);
    }
    String maprticket_Duration=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
    String defaultMaprticket_Duration=hbaseVersion.getDefaultConfig(distribution,EHadoopProperties.MAPRTICKET_DURATION.getName());
    if (StringUtils.isNotEmpty(maprticket_Duration)) {
      maprTDurationForHBaseTxt.setText(maprticket_Duration);
    }
 else     if (defaultMaprticket_Duration != null) {
      maprTDurationForHBaseTxt.setText(defaultMaprticket_Duration);
    }
  }
}",0.5130674002751031
125623,"@Override public boolean checkMigrationTasks(org.talend.core.model.properties.Project project){
  EList<MigrationTask> migrationTasks=project.getMigrationTask();
  ProductVersion topTaskVersion=new ProductVersion(0,0,0);
  ProductVersion topTaskBreaks=new ProductVersion(0,0,0);
  for (  MigrationTask task : migrationTasks) {
    String version=task.getVersion();
    if (version == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else {
      ProductVersion taskVersion=ProductVersion.fromString(version);
      if (taskVersion.compareTo(topTaskVersion) > 0) {
        topTaskVersion=taskVersion;
        taskId=task.getId();
      }
    }
    String breaks=task.getBreaks();
    MigrationStatus status=task.getStatus();
    if (breaks == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (status != MigrationStatus.NOIMPACT_LITERAL) {
      ProductVersion taskBreaks=ProductVersion.fromString(breaks);
      if (taskBreaks != null && taskBreaks.compareTo(topTaskBreaks) > 0) {
        topTaskBreaks=taskBreaks;
      }
    }
  }
  ProductVersion productVersion=ProductVersion.fromString(VersionUtils.getTalendVersion());
  if (topTaskBreaks.compareTo(productVersion) >= 0) {
    int dataVersionMajor=topTaskVersion.getMajor();
    int dataVersionMinor=topTaskVersion.getMinor();
    int dataVersionSystem=topTaskVersion.getMicro();
    int productVersionMajor=productVersion.getMajor();
    int productVersionMinor=productVersion.getMinor();
    int productVersionSystem=productVersion.getMicro();
    if (dataVersionMajor == productVersionMajor && dataVersionMinor == productVersionMinor && dataVersionSystem <= productVersionSystem) {
      return true;
    }
    log.warn((Messages.getString(""String_Node_Str"",taskId)));
    return false;
  }
  return true;
}","@Override public boolean checkMigrationTasks(org.talend.core.model.properties.Project project){
  EList<MigrationTask> migrationTasks=project.getMigrationTask();
  ProductVersion topTaskVersion=new ProductVersion(0,0,0);
  ProductVersion topTaskBreaks=new ProductVersion(0,0,0);
  for (  MigrationTask task : migrationTasks) {
    IProjectMigrationTask productMigrationTask=GetTasksHelper.getInstance().getProjectTask(task.getId());
    if (productMigrationTask != null) {
      continue;
    }
    String version=task.getVersion();
    if (version == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else {
      ProductVersion taskVersion=ProductVersion.fromString(version);
      if (taskVersion.compareTo(topTaskVersion) > 0) {
        topTaskVersion=taskVersion;
        taskId=task.getId();
      }
    }
    String breaks=task.getBreaks();
    MigrationStatus status=task.getStatus();
    if (breaks == null) {
      log.warn(Messages.getString(""String_Node_Str"",task.getId()));
    }
 else     if (status != MigrationStatus.NOIMPACT_LITERAL) {
      ProductVersion taskBreaks=ProductVersion.fromString(breaks);
      if (taskBreaks != null && taskBreaks.compareTo(topTaskBreaks) > 0) {
        topTaskBreaks=taskBreaks;
      }
    }
  }
  ProductVersion productVersion=ProductVersion.fromString(VersionUtils.getTalendVersion());
  if (topTaskBreaks.compareTo(productVersion) >= 0) {
    int dataVersionMajor=topTaskVersion.getMajor();
    int dataVersionMinor=topTaskVersion.getMinor();
    int dataVersionSystem=topTaskVersion.getMicro();
    int productVersionMajor=productVersion.getMajor();
    int productVersionMinor=productVersion.getMinor();
    int productVersionSystem=productVersion.getMicro();
    if (dataVersionMajor == productVersionMajor && dataVersionMinor == productVersionMinor && dataVersionSystem <= productVersionSystem) {
      return true;
    }
    log.warn((Messages.getString(""String_Node_Str"",taskId)));
    return false;
  }
  return true;
}",0.9564541213063764
125624,"private static List<Map<String,Object>> getColumnMappingValue(Connection connection,IMetadataTable metaTable){
  if (connection == null || metaTable == null) {
    return null;
  }
  List<Map<String,Object>> values=new ArrayList<Map<String,Object>>();
  List<IMetadataColumn> columns=metaTable.getListColumns();
  if (connection instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)connection;
    String databaseType=dbConn.getDatabaseType();
    if (EDatabaseTypeName.HBASE.getDisplayName().equals(databaseType)) {
      for (      IMetadataColumn column : columns) {
        Map<String,Object> row=new HashMap<String,Object>();
        row.put(""String_Node_Str"",column.getLabel());
        row.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getAdditionalField().get(""String_Node_Str"")));
        values.add(row);
      }
    }
  }
  return values;
}","public static List<Map<String,Object>> getColumnMappingValue(Connection connection,IMetadataTable metaTable){
  if (connection == null || metaTable == null) {
    return null;
  }
  List<Map<String,Object>> values=new ArrayList<Map<String,Object>>();
  List<IMetadataColumn> columns=metaTable.getListColumns();
  if (connection instanceof DatabaseConnection) {
    DatabaseConnection dbConn=(DatabaseConnection)connection;
    String databaseType=dbConn.getDatabaseType();
    if (EDatabaseTypeName.HBASE.getDisplayName().equals(databaseType)) {
      for (      IMetadataColumn column : columns) {
        Map<String,Object> row=new HashMap<String,Object>();
        row.put(""String_Node_Str"",column.getLabel());
        row.put(""String_Node_Str"",TalendQuoteUtils.addQuotes(column.getAdditionalField().get(""String_Node_Str"")));
        values.add(row);
      }
    }
  }
  return values;
}",0.9938236945536216
125625,"public void cleanup(){
  if (defaultProjRepoNode == null) {
    return;
  }
  for (  IRepositoryNode childNode : defaultProjRepoNode.getChildren()) {
    if (childNode instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)childNode;
      node.setInitialized(false);
      node.getChildren().clear();
    }
  }
}","public void cleanup(){
  if (defaultProjRepoNode == null) {
    return;
  }
  getInstance();
  for (  IRepositoryNode childNode : defaultProjRepoNode.getChildren()) {
    if (childNode instanceof RepositoryNode) {
      RepositoryNode node=(RepositoryNode)childNode;
      node.setInitialized(false);
      node.getChildren().clear();
    }
  }
}",0.9748148148148148
125626,"@Override public void dispose(){
  boolean doDispose=isEnableDisposed();
  if (doDispose) {
    this.project=null;
    this.recBinNode=null;
  }
  if (refProject != null) {
    for (    IRepositoryNode refP : refProject.getChildren()) {
      if (refP instanceof IProjectRepositoryNode) {
        if (refP instanceof RepositoryNode) {
          ((RepositoryNode)refP).setEnableDisposed(doDispose);
        }
        refP.dispose();
      }
    }
  }
  for (  DynaEnum<? extends DynaEnum<?>> de : ERepositoryObjectType.values()) {
    if (de instanceof ERepositoryObjectType) {
      RepositoryNode rootRepositoryNode=getRootRepositoryNode((ERepositoryObjectType)de);
      if (rootRepositoryNode != null && !rootRepositoryNode.isDisposed()) {
        rootRepositoryNode.setEnableDisposed(doDispose);
        rootRepositoryNode.dispose();
      }
    }
  }
  if (this.repositoryNodeMap != null) {
    for (    String type : this.repositoryNodeMap.keySet()) {
      RepositoryNode repositoryNode=this.repositoryNodeMap.get(type);
      if (repositoryNode != null && !repositoryNode.isDisposed()) {
        repositoryNode.setEnableDisposed(doDispose);
        repositoryNode.dispose();
      }
    }
    if (doDispose) {
      this.repositoryNodeMap.clear();
    }
  }
  if (doDispose && this.nodeAndProject != null) {
    nodeAndProject.clear();
  }
  if (doDispose) {
    final Field[] declaredFields=this.getClass().getDeclaredFields();
    for (    Field f : declaredFields) {
      f.setAccessible(true);
      try {
        final Object object=f.get(this);
        if (object instanceof RepositoryNode) {
          f.set(this,null);
        }
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
    }
  }
  super.dispose();
}","@Override public void dispose(){
  boolean doDispose=isEnableDisposed();
  if (doDispose) {
    this.project=null;
    this.recBinNode=null;
  }
  if (refProject != null) {
    for (    IRepositoryNode refP : refProject.getChildren()) {
      if (refP instanceof IProjectRepositoryNode) {
        if (refP instanceof RepositoryNode) {
          ((RepositoryNode)refP).setEnableDisposed(doDispose);
        }
        refP.dispose();
      }
    }
  }
  for (  DynaEnum<? extends DynaEnum<?>> de : ERepositoryObjectType.values()) {
    if (de instanceof ERepositoryObjectType) {
      RepositoryNode rootRepositoryNode=getRootRepositoryNode((ERepositoryObjectType)de);
      if (rootRepositoryNode != null && !rootRepositoryNode.isDisposed()) {
        rootRepositoryNode.setEnableDisposed(doDispose);
        rootRepositoryNode.dispose();
      }
    }
  }
  if (this.repositoryNodeMap != null) {
    for (    String type : this.repositoryNodeMap.keySet()) {
      RepositoryNode repositoryNode=this.repositoryNodeMap.get(type);
      if (repositoryNode != null && !repositoryNode.isDisposed()) {
        repositoryNode.setEnableDisposed(doDispose);
        repositoryNode.dispose();
      }
    }
    if (doDispose) {
      this.repositoryNodeMap.clear();
    }
  }
  if (doDispose && this.nodeAndProject != null) {
    nodeAndProject.clear();
  }
  if (doDispose) {
    final Field[] declaredFields=this.getClass().getDeclaredFields();
    for (    Field f : declaredFields) {
      f.setAccessible(true);
      try {
        final Object object=f.get(this);
        if (object == defaultProjRepoNode) {
          continue;
        }
        if (object instanceof RepositoryNode) {
          f.set(this,null);
        }
      }
 catch (      IllegalArgumentException e) {
      }
catch (      IllegalAccessException e) {
      }
    }
  }
  super.dispose();
}",0.9794238683127572
125627,"public static ProjectRepositoryNode getInstance(){
  if (defaultProjRepoNode == null) {
    defaultProjRepoNode=new ProjectRepositoryNode(null,null,ENodeType.STABLE_SYSTEM_FOLDER);
    defaultProjRepoNode.initialize(null);
  }
  return defaultProjRepoNode;
}","public static ProjectRepositoryNode getInstance(){
  if (defaultProjRepoNode == null) {
    defaultProjRepoNode=new ProjectRepositoryNode(null,null,ENodeType.STABLE_SYSTEM_FOLDER);
    defaultProjRepoNode.initialize(null);
  }
  if (defaultProjRepoNode.isDisposed) {
synchronized (defaultProjRepoNode) {
      if (defaultProjRepoNode.isDisposed) {
        defaultProjRepoNode.isDisposed=false;
        defaultProjRepoNode.project=ProjectManager.getInstance().getCurrentProject();
        defaultProjRepoNode.setRoot(defaultProjRepoNode);
        defaultProjRepoNode.initialize(defaultProjRepoNode.currentPerspective);
      }
    }
  }
  return defaultProjRepoNode;
}",0.5037837837837837
125628,"public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  fullLogonFinished=false;
}","public void logOffProject(){
  repositoryFactoryFromProvider.logOffProject();
  fullLogonFinished=false;
  ProjectRepositoryNode root=ProjectRepositoryNode.getInstance();
  if (root != null) {
    root.setEnableDisposed(true);
    root.dispose();
  }
}",0.5921787709497207
125629,"public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,ContextType clusterContextType,ContextType contextType,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      parentProperties=getHadoopPropertiesWithOriginalValue(hadoopClusterService.getHadoopClusterProperties(connection),clusterContextType,includeQuotes);
    }
  }
  List<Map<String,Object>> properties=getHadoopPropertiesWithOriginalValue(propertiesJsonStr,contextType,includeQuotes);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes,boolean useOriginalValue){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      String hadoopClusterPropertiesStrs=hadoopClusterService.getHadoopClusterProperties(connection);
      parentProperties=getHadoopProperties(hadoopClusterConnection,hadoopClusterPropertiesStrs,includeQuotes,useOriginalValue);
    }
  }
  List<Map<String,Object>> properties=getHadoopProperties(connection,propertiesJsonStr,includeQuotes,useOriginalValue);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.8602216748768473
125630,"@Override protected Object openDialogBox(Control cellEditorWindow){
  String value=(String)getValue();
  ModuleListDialog dialog=new ModuleListDialog(cellEditorWindow.getShell(),value,this.param,false);
  if (dialog.open() == Window.OK) {
    String selecteModule=dialog.getSelecteModule();
    if (selecteModule != null && (value == null || !value.equals(selecteModule))) {
      int index=0;
      if (getTableViewer() != null) {
        index=getTableViewer().getTable().getSelectionIndex();
      }
      IElement element=this.tableParam.getElement();
      if (element != null) {
        IElementParameter updateComponentsParam=element.getElementParameter(""String_Node_Str"");
        if (updateComponentsParam != null) {
          updateComponentsParam.setValue(Boolean.TRUE);
        }
      }
      executeCommand(new ModelChangeCommand(tableParam,param.getName(),selecteModule,index));
      if (getTableViewer() != null) {
        getTableViewer().refresh(true);
      }
      return selecteModule;
    }
  }
  return null;
}","@Override protected Object openDialogBox(Control cellEditorWindow){
  String value=(String)getValue();
  ModuleListDialog dialog=new ModuleListDialog(cellEditorWindow.getShell(),value,this.param,false);
  if (dialog.open() == Window.OK) {
    String selecteModule=dialog.getSelecteModule();
    if (selecteModule != null && (value == null || !value.equals(selecteModule))) {
      setModuleValue(selecteModule);
      return selecteModule;
    }
  }
  return null;
}",0.5293333333333333
125631,"@Override protected Control createContents(Composite cell){
  defaultLabel=new Text(cell,SWT.LEFT);
  defaultLabel.setFont(cell.getFont());
  defaultLabel.setBackground(cell.getBackground());
  return defaultLabel;
}","@Override protected Control createContents(Composite cell){
  defaultLabel=new Text(cell,SWT.LEFT);
  defaultLabel.setFont(cell.getFont());
  defaultLabel.setBackground(cell.getBackground());
  defaultLabel.addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      String newValue=defaultLabel.getText();
      if (newValue == null || newValue.trim().equals(""String_Node_Str"")) {
        defaultLabel.setText(oldValue);
        return;
      }
      if (newValue.equals(oldValue)) {
        return;
      }
      boolean newValidState=isCorrect(newValue);
      if (newValidState) {
        doSetValue(newValue);
        setModuleValue(newValue);
      }
    }
  }
);
  return defaultLabel;
}",0.4113924050632911
125632,"@Override protected void updateContents(Object value){
  if (defaultLabel == null) {
    return;
  }
  String text=""String_Node_Str"";
  if (value != null) {
    text=value.toString();
  }
  defaultLabel.setText(text);
}","@Override protected void updateContents(Object value){
  if (defaultLabel == null) {
    return;
  }
  String text=""String_Node_Str"";
  if (value != null) {
    text=value.toString();
  }
  oldValue=text;
  defaultLabel.setText(text);
}",0.9626373626373628
125633,"public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,ContextType clusterContextType,ContextType contextType,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      parentProperties=getHadoopPropertiesWithOriginalValue(hadoopClusterService.getHadoopClusterProperties(connection),clusterContextType,includeQuotes);
    }
  }
  List<Map<String,Object>> properties=getHadoopPropertiesWithOriginalValue(propertiesJsonStr,contextType,includeQuotes);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes,boolean useOriginalValue){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      String hadoopClusterPropertiesStrs=hadoopClusterService.getHadoopClusterProperties(connection);
      parentProperties=getHadoopProperties(hadoopClusterConnection,hadoopClusterPropertiesStrs,includeQuotes,useOriginalValue);
    }
  }
  List<Map<String,Object>> properties=getHadoopProperties(connection,propertiesJsonStr,includeQuotes,useOriginalValue);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.8602216748768473
125634,"@Override protected void doRun(){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject() || factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    return;
  }
  final ISelection selection=getSelection();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          if (!isContainParentNode(selectNodes,(RepositoryNode)obj)) {
            selectNodes.add((RepositoryNode)obj);
          }
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      List<RepositoryNode> accessNodes=new ArrayList<RepositoryNode>();
      for (      RepositoryNode node : selectNodes) {
        try {
          accessNodes.add(node);
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (needReturn) {
              if (accessNodes.containsAll(selectNodes)) {
                return;
              }
 else {
                continue;
              }
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            types.add(node.getContentType());
            if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
              types.add(ERepositoryObjectType.DOCUMENTATION);
            }
            deletedFolder.add(node);
            deleteFolder(node,factory,deleteActionCache);
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}","@Override protected void doRun(){
  final IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  if (factory.isUserReadOnlyOnCurrentProject() || factory.getRepositoryContext().isOffline() || factory.getRepositoryContext().isEditableAsReadOnly()) {
    return;
  }
  final ISelection selection=getSelection();
  final DeleteActionCache deleteActionCache=DeleteActionCache.getInstance();
  deleteActionCache.setGetAlways(false);
  deleteActionCache.setDocRefresh(false);
  deleteActionCache.createRecords();
  final Set<ERepositoryObjectType> types=new HashSet<ERepositoryObjectType>();
  final List<RepositoryNode> deletedFolder=new ArrayList<RepositoryNode>();
  final IWorkspaceRunnable op=new IWorkspaceRunnable(){
    @Override public void run(    IProgressMonitor monitor){
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      Object[] selections=((IStructuredSelection)selection).toArray();
      List<RepositoryNode> selectNodes=new ArrayList<RepositoryNode>();
      for (      Object obj : selections) {
        if (obj instanceof RepositoryNode) {
          if (!isContainParentNode(selectNodes,(RepositoryNode)obj)) {
            selectNodes.add((RepositoryNode)obj);
          }
        }
      }
      final List<ItemReferenceBean> unDeleteItems=RepositoryNodeDeleteManager.getInstance().getUnDeleteItems(selectNodes,deleteActionCache);
      List<RepositoryNode> accessNodes=new ArrayList<RepositoryNode>();
      for (      RepositoryNode node : selectNodes) {
        try {
          accessNodes.add(node);
          if (sourceFileOpening(node)) {
            continue;
          }
          if (containParent(node,(IStructuredSelection)selection)) {
            continue;
          }
          if (isForbidNode(node)) {
            continue;
          }
          if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
              IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
              Item repoItem=node.getObject().getProperty().getItem();
              if (service != null && !repoItem.getState().isDeleted()) {
                final StringBuffer jobNames=service.getAllTheJObNames(node);
                if (jobNames != null) {
                  Display.getDefault().syncExec(new Runnable(){
                    @Override public void run(){
                      String message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                      final Shell shell=getShell();
                      confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                    }
                  }
);
                  if (!confirmAssignDialog) {
                    continue;
                  }
                }
              }
            }
            if (isInDeletedFolder(deletedFolder,node.getParent())) {
              continue;
            }
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
              IDesignerCoreService coreService=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
              IRepositoryViewObject object=node.getObject();
              if (coreService != null && object != null && object.getProperty() != null) {
                Item item=object.getProperty().getItem();
                IProcess iProcess=coreService.getProcessFromItem(item);
                if (iProcess != null && iProcess instanceof IProcess2) {
                  IProcess2 process=(IProcess2)iProcess;
                  process.removeProblems4ProcessDeleted();
                }
              }
            }
            if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET) {
              needToUpdataPalette=true;
            }
            boolean needReturn=deleteElements(factory,deleteActionCache,node);
            if (needReturn) {
              if (accessNodes.containsAll(selectNodes)) {
                return;
              }
 else {
                continue;
              }
            }
            types.add(node.getObjectType());
          }
 else           if (node.getType() == ENodeType.SIMPLE_FOLDER) {
            if (node.getChildren().size() > 0 && !node.getObject().isDeleted()) {
              if (GlobalServiceRegister.getDefault().isServiceRegistered(IESBService.class)) {
                IESBService service=(IESBService)GlobalServiceRegister.getDefault().getService(IESBService.class);
                if (service != null) {
                  final StringBuffer jobNames=service.getAllTheJObNames(node);
                  if (jobNames != null) {
                    Display.getDefault().syncExec(new Runnable(){
                      @Override public void run(){
                        String message=null;
                        if (jobNames.toString().contains(""String_Node_Str"")) {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
 else {
                          message=jobNames.toString() + Messages.getString(""String_Node_Str"");
                        }
                        final Shell shell=getShell();
                        confirmAssignDialog=MessageDialog.openQuestion(shell,""String_Node_Str"",message);
                      }
                    }
);
                    if (!confirmAssignDialog) {
                      continue;
                    }
                  }
                }
              }
            }
            types.add(node.getContentType());
            if (node.getContentType() == ERepositoryObjectType.PROCESS || node.getContentType() == ERepositoryObjectType.JOBLET) {
              types.add(ERepositoryObjectType.DOCUMENTATION);
            }
            deletedFolder.add(node);
            deleteFolder(node,factory,deleteActionCache);
          }
        }
 catch (        PersistenceException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
      }
      if (unDeleteItems.size() > 0) {
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            ItemReferenceDialog dialog=new ItemReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),unDeleteItems);
            dialog.open();
          }
        }
);
      }
      try {
        factory.saveProject(ProjectManager.getInstance().getCurrentProject());
      }
 catch (      PersistenceException e) {
        ExceptionHandler.process(e);
      }
    }
    /** 
 * DOC xqliu Comment method ""sourceFileOpening"".
 * @param node
 * @return
 */
    private boolean sourceFileOpening(    RepositoryNode node){
      boolean result=false;
      if (node != null) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService service=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (service != null) {
            result=service.sourceFileOpening(node);
          }
        }
      }
      return result;
    }
  }
;
  IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      try {
        ISchedulingRule schedulingRule=workspace.getRoot();
        workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
      }
 catch (      CoreException e) {
        throw new InvocationTargetException(e);
      }
    }
  }
;
  try {
    PlatformUI.getWorkbench().getProgressService().run(false,false,iRunnableWithProgress);
    if (forceBuild) {
      IRunProcessService service=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      service.buildJavaProject();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  synchUI(deleteActionCache);
}",0.999634547447923
125635,"public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!loaded) {
    loadRelations();
  }
  if (item == null) {
    return;
  }
  boolean relationsModified=true;
  Relation relation=new Relation();
  relation.setId(item.getProperty().getId());
  relation.setType(getTypeFromItem(item));
  relation.setVersion(item.getProperty().getVersion());
  Set<Relation> oldProjectRelations=null;
  if (currentProjectItemsRelations.containsKey(relation)) {
    oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
    currentProjectItemsRelations.get(relation).clear();
  }
  clearItemsRelations(item);
  final Map<Relation,Set<Relation>> itemRelations=getRelatedRelations(item);
  IItemRelationshipHandler[] itemRelationshipHandlers=RelationshipRegistryReader.getInstance().getItemRelationshipHandlers();
  for (  IItemRelationshipHandler handler : itemRelationshipHandlers) {
    Map<Relation,Set<Relation>> relations=handler.find(item);
    mergeRelationship(itemRelations,relations);
  }
  if (oldProjectRelations != null) {
    Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
    if (oldProjectRelations.size() == newProjectRelations.size()) {
      relationsModified=false;
      for (      Relation newRelation : newProjectRelations) {
        if (!oldProjectRelations.contains(newRelation)) {
          relationsModified=true;
          break;
        }
      }
    }
    if (!relationsModified) {
      currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
    }
  }
  if (relationsModified && !modified) {
    modified=true;
  }
  if (!fromMigration && modified) {
    saveRelations();
  }
}","public void addOrUpdateItem(Item item,boolean fromMigration){
  if (!supportRelation(item)) {
    return;
  }
  if (!loaded) {
    loadRelations();
  }
  if (item == null) {
    return;
  }
  boolean relationsModified=true;
  Relation relation=new Relation();
  relation.setId(item.getProperty().getId());
  relation.setType(getTypeFromItem(item));
  relation.setVersion(item.getProperty().getVersion());
  Set<Relation> oldProjectRelations=null;
  if (currentProjectItemsRelations.containsKey(relation)) {
    oldProjectRelations=new HashSet<Relation>(currentProjectItemsRelations.get(relation));
    currentProjectItemsRelations.get(relation).clear();
  }
  clearItemsRelations(item);
  final Map<Relation,Set<Relation>> itemRelations=getRelatedRelations(item);
  IItemRelationshipHandler[] itemRelationshipHandlers=RelationshipRegistryReader.getInstance().getItemRelationshipHandlers();
  for (  IItemRelationshipHandler handler : itemRelationshipHandlers) {
    Map<Relation,Set<Relation>> relations=handler.find(item);
    mergeRelationship(itemRelations,relations);
  }
  if (oldProjectRelations != null) {
    Set<Relation> newProjectRelations=currentProjectItemsRelations.get(relation);
    if (oldProjectRelations.size() == newProjectRelations.size()) {
      relationsModified=false;
      for (      Relation newRelation : newProjectRelations) {
        if (!oldProjectRelations.contains(newRelation)) {
          relationsModified=true;
          break;
        }
      }
    }
    if (!relationsModified) {
      currentProjectItemsRelations.get(relation).addAll(oldProjectRelations);
    }
  }
  if (relationsModified && !modified) {
    modified=true;
  }
  if (!fromMigration && modified) {
    saveRelations();
  }
}",0.9859566998244588
125636,"private static void checkItemDependencies(IRepositoryViewObject obj,List<IRepositoryViewObject> repositoryObjects,boolean includeSystemItems,boolean includeReferenceProjectItems){
  if (obj != null && !repositoryObjects.contains(obj)) {
    repositoryObjects.add(obj);
    checkAllVersionLatest(repositoryObjects,obj,includeSystemItems,includeReferenceProjectItems);
    checkItemDependencies(obj.getProperty().getItem(),repositoryObjects,includeSystemItems,includeReferenceProjectItems);
  }
}","private static void checkItemDependencies(IRepositoryViewObject obj,List<IRepositoryViewObject> repositoryObjects,boolean includeSystemItems,boolean includeReferenceProjectItems,boolean needRebuild){
  if (obj != null && !repositoryObjects.contains(obj)) {
    repositoryObjects.add(obj);
    checkAllVersionLatest(repositoryObjects,obj,includeSystemItems,includeReferenceProjectItems);
    checkItemDependencies(obj.getProperty().getItem(),repositoryObjects,includeSystemItems,includeReferenceProjectItems,needRebuild);
  }
}",0.9686274509803922
125637,"/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return ""String_Node_Str"";
  }
  String testPassword=password.trim();
  if (testPassword.startsWith(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX)) {
    String variableName=testPassword.substring(ContextParameterUtils.JAVA_NEW_CONTEXT_PREFIX.length(),testPassword.length());
    if (!ContextUtils.isJavaKeyWords(variableName)) {
      return password;
    }
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}","/** 
 * DOC YeXiaowei Comment method ""hidePassword"".
 * @param password
 * @return
 */
public static String hidePassword(final String password){
  if (password == null) {
    return PASS_COVER + PASS_COVER;
  }
  if (ContextParameterUtils.containContextVariables(password)) {
    return password;
  }
  int length=password.length() + 2;
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < length; i++) {
    builder.append(PASS_COVER);
  }
  return builder.toString();
}",0.3377703826955074
125638,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite comp=new Composite(composite,SWT.NONE);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  comp.setLayout(layout);
  propertiesBar=new ExpandBar(comp,SWT.V_SCROLL);
  propertiesBar.setSpacing(10);
  propertiesBar.setBackground(propertiesBar.getParent().getBackground());
  propertiesBar.setLayoutData(new GridData(GridData.FILL_BOTH));
  PropertiesTableView parentPropertiesTable=null;
  if (initPropertiesOfParent != null) {
    parentPropertiesTable=createPropertiesTable(propertiesBar,0,getParentTitle(),initPropertiesOfParent,true,false);
  }
  int tableIndex=parentPropertiesTable == null ? 0 : 1;
  propertiesTableView=createPropertiesTable(propertiesBar,tableIndex,getTitle(),initProperties,isReadOnly(),true);
  updateExpandItems();
  updateStatusLabel(initProperties);
  return parent;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite comp=new Composite(composite,SWT.NONE);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  comp.setLayout(layout);
  propertiesBar=new ExpandBar(comp,SWT.V_SCROLL);
  propertiesBar.setSpacing(10);
  propertiesBar.setBackground(propertiesBar.getParent().getBackground());
  propertiesBar.setLayoutData(new GridData(GridData.FILL_BOTH));
  PropertiesTableView parentPropertiesTable=null;
  if (initPropertiesOfParent != null) {
    parentPropertiesTable=createPropertiesTable(propertiesBar,0,getParentTitle(),initPropertiesOfParent,true,false);
  }
  int tableIndex=parentPropertiesTable == null ? 0 : 1;
  propertiesTableView=createPropertiesTable(propertiesBar,tableIndex,getTitle(),initProperties,isReadOnly(),true);
  updateExpandItems();
  return parent;
}",0.9817644159684572
125639,"public void createPropertiesFields(Composite parent){
  propComposite=new Composite(parent,SWT.NONE);
  GridLayout propCompLayout=new GridLayout(3,false);
  propCompLayout.marginWidth=getMarginWidth();
  propCompLayout.marginHeight=getMarginHeight();
  propComposite.setLayout(propCompLayout);
  propComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label propLabel=new Label(propComposite,SWT.NONE);
  propLabel.setText(getTitle());
  Button propertyButton=new Button(propComposite,SWT.NONE);
  final PropertiesDialog propertiesDialog=this;
  propertyButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  propertyButton.setLayoutData(new GridData(30,25));
  propertyButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (propertiesTableView != null && !propertiesTableView.getTable().isDisposed()) {
        propertiesTableView.setReadOnly(isReadOnly());
      }
      setInitProperties(getLatestInitProperties());
      if (propertiesDialog.open() == IDialogConstants.OK_ID) {
        applyProperties(properties);
        updateStatusLabel(properties);
      }
    }
  }
);
  statusLabel=new Label(propComposite,SWT.NONE);
  statusLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","public void createPropertiesFields(Composite parent){
  propComposite=new Composite(parent,SWT.NONE);
  GridLayout propCompLayout=new GridLayout(3,false);
  propCompLayout.marginWidth=getMarginWidth();
  propCompLayout.marginHeight=getMarginHeight();
  propComposite.setLayout(propCompLayout);
  propComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label propLabel=new Label(propComposite,SWT.NONE);
  propLabel.setText(getTitle());
  Button propertyButton=new Button(propComposite,SWT.NONE);
  final PropertiesDialog propertiesDialog=this;
  propertyButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  propertyButton.setLayoutData(new GridData(30,25));
  propertyButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (propertiesTableView != null && !propertiesTableView.getTable().isDisposed()) {
        propertiesTableView.setReadOnly(isReadOnly());
      }
      setInitProperties(getLatestInitProperties());
      if (propertiesDialog.open() == IDialogConstants.OK_ID) {
        applyProperties(properties);
        updateStatusLabel(properties);
      }
    }
  }
);
  statusLabel=new Label(propComposite,SWT.NONE);
  statusLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  updateStatusLabel(initProperties);
}",0.98592620768353
125640,"protected void revertContext(){
  if (hasContextBtn() && connectionItem != null) {
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),connectionItem.getConnection(),true);
      if (contextType != null) {
        ConnectionContextHelper.revertPropertiesForContextMode(connectionItem,contextType);
        adaptContextModeToReversion();
      }
    }
 else {
      ConnectionContextHelper.openOutConetxtModeDialog();
    }
  }
}","protected void revertContext(){
  if (hasContextBtn() && connectionItem != null) {
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(getShell(),connectionItem.getConnection(),true);
      if (contextType != null) {
        revertingContext=true;
        ConnectionContextHelper.revertPropertiesForContextMode(connectionItem,contextType);
        adaptContextModeToReversion();
        revertingContext=false;
      }
    }
 else {
      ConnectionContextHelper.openOutConetxtModeDialog();
    }
  }
}",0.9403973509933776
125641,"private void fillDefaultsWhenImpalaVersionChanged(){
  if (isCreation) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    if (distribution == null) {
      return;
    }
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    if (template != null) {
      portText.setText(template.getDefaultPort());
    }
  }
}","private void fillDefaultsWhenImpalaVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    if (distribution == null) {
      return;
    }
    EDatabaseConnTemplate template=EDatabaseConnTemplate.indexOfTemplate(getConnection().getDatabaseType());
    if (template != null) {
      portText.setText(template.getDefaultPort());
    }
  }
}",0.9783393501805054
125642,"private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hiveDistribution=hadoopDistributionService.getHiveDistributionManager().getDistribution(distribution,false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(version,false);
    if (hiveVersion == null) {
      return;
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.NAMENODE_URI.getName());
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.RESOURCE_MANAGER.getName());
    }
 else {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.JOBTRACKER.getName());
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
      getConnection().setSID(defaultDatabase);
    }
  }
}","private void fillDefaultsWhenHiveVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hiveDistribution=hadoopDistributionService.getHiveDistributionManager().getDistribution(distribution,false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(version,false);
    if (hiveVersion == null) {
      return;
    }
    boolean useYarn=Boolean.valueOf(getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_YARN));
    String defaultNN=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.NAMENODE_URI.getName());
    String nameNodeURLstr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hiveKerberosPrin=getConnection().getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (StringUtils.isNotEmpty(nameNodeURLstr)) {
      nameNodeURLTxt.setText(nameNodeURLstr);
    }
 else     if (defaultNN != null) {
      nameNodeURLTxt.setText(defaultNN);
    }
    String defaultJTORRM=null;
    if (useYarn) {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.RESOURCE_MANAGER.getName());
    }
 else {
      defaultJTORRM=hiveVersion.getDefaultConfig(distribution,EHadoopProperties.JOBTRACKER.getName());
    }
    if (StringUtils.isNotEmpty(jobTrackerURLStr)) {
      jobTrackerURLTxt.setText(jobTrackerURLStr);
    }
 else     if (defaultJTORRM != null) {
      jobTrackerURLTxt.setText(defaultJTORRM);
    }
    String defaultPrincipal=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.HIVE_PRINCIPAL.getName());
    if (StringUtils.isNotEmpty(hiveKerberosPrin)) {
      hivePrincipalTxt.setText(hiveKerberosPrin);
    }
 else     if (defaultPrincipal != null) {
      hivePrincipalTxt.setText(defaultPrincipal);
    }
    String defaultDatabase=hiveVersion.getDefaultConfig(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(getConnection().getSID())) {
      sidOrDatabaseText.setText(getConnection().getSID());
    }
 else     if (defaultDatabase != null) {
      sidOrDatabaseText.setText(defaultDatabase);
      getConnection().setSID(defaultDatabase);
    }
  }
}",0.9957401490947816
125643,"private void fillDefaultsWhenHiveModeChanged(boolean isEmbeddedMode){
  if (isCreation) {
    IHDistribution hiveDistribution=getCurrentHiveDistribution(false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
    if (hiveVersion == null) {
      return;
    }
    String defaultPort=null;
    if (isEmbeddedMode) {
      defaultPort=hiveVersion.getDefaultConfig(hiveDistribution.getName(),EHadoopCategory.HIVE.getName(),HiveModeInfo.EMBEDDED.getName(),EHadoopProperties.PORT.getName());
    }
 else {
      defaultPort=hiveVersion.getDefaultConfig(hiveDistribution.getName(),EHadoopCategory.HIVE.getName(),HiveModeInfo.STANDALONE.getName(),EHadoopProperties.PORT.getName());
    }
    if (defaultPort != null && !isContextMode()) {
      getConnection().setPort(defaultPort);
      portText.setText(defaultPort);
    }
  }
}","private void fillDefaultsWhenHiveModeChanged(boolean isEmbeddedMode){
  if (isCreation && isNeedFillDefaults()) {
    IHDistribution hiveDistribution=getCurrentHiveDistribution(false);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
    if (hiveVersion == null) {
      return;
    }
    String defaultPort=null;
    if (isEmbeddedMode) {
      defaultPort=hiveVersion.getDefaultConfig(hiveDistribution.getName(),EHadoopCategory.HIVE.getName(),HiveModeInfo.EMBEDDED.getName(),EHadoopProperties.PORT.getName());
    }
 else {
      defaultPort=hiveVersion.getDefaultConfig(hiveDistribution.getName(),EHadoopCategory.HIVE.getName(),HiveModeInfo.STANDALONE.getName(),EHadoopProperties.PORT.getName());
    }
    if (defaultPort != null && !isContextMode()) {
      getConnection().setPort(defaultPort);
      portText.setText(defaultPort);
    }
  }
}",0.9873150105708244
125644,"private void fillDefaultsWhenHBaseVersionChanged(){
  if (isCreation) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hbaseDistribution=hadoopDistributionService.getHBaseDistributionManager().getDistribution(distribution,false);
    if (hbaseDistribution == null) {
      return;
    }
    IHDistributionVersion hbaseVersion=hbaseDistribution.getHDVersion(version,false);
    if (hbaseVersion == null) {
      return;
    }
    String defaultPort=hbaseVersion.getDefaultConfig(distribution,EHadoopCategory.HBASE.getName(),EHadoopProperties.PORT.getName());
    if (defaultPort != null && !isContextMode()) {
      getConnection().setPort(defaultPort);
      portText.setText(defaultPort);
    }
  }
}","private void fillDefaultsWhenHBaseVersionChanged(){
  if (isCreation && isNeedFillDefaults()) {
    String distribution=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
    String version=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
    if (distribution == null) {
      return;
    }
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (hadoopDistributionService == null) {
      return;
    }
    IHDistribution hbaseDistribution=hadoopDistributionService.getHBaseDistributionManager().getDistribution(distribution,false);
    if (hbaseDistribution == null) {
      return;
    }
    IHDistributionVersion hbaseVersion=hbaseDistribution.getHDVersion(version,false);
    if (hbaseVersion == null) {
      return;
    }
    String defaultPort=hbaseVersion.getDefaultConfig(distribution,EHadoopCategory.HBASE.getName(),EHadoopProperties.PORT.getName());
    if (defaultPort != null && !isContextMode()) {
      getConnection().setPort(defaultPort);
      portText.setText(defaultPort);
    }
  }
}",0.989159891598916
125645,"/** 
 * get the Column Comment especially for oracle type.
 * @param dbJDBCMetadata
 * @param columns
 * @param tableName
 * @param columnName
 * @param schemaPattern
 * @return
 */
private String getColumnComment(DatabaseMetaData dbJDBCMetadata,ResultSet columns,String tableName,String columnName,String schemaPattern){
  String columnComment=getStringFromResultSet(columns,GetColumn.REMARKS.name());
  try {
    if (StringUtils.isBlank(columnComment) && MetadataConnectionUtils.isOracle(dbJDBCMetadata)) {
      String selectRemarkOnTable=""String_Node_Str"" + tableName + ""String_Node_Str""+ schemaPattern.toUpperCase()+ ""String_Node_Str""+ columnName+ ""String_Node_Str"";
      columnComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (columnComment == null) {
    columnComment=""String_Node_Str"";
  }
  return columnComment;
}","/** 
 * get the Column Comment especially for oracle type.
 * @param dbJDBCMetadata
 * @param columns
 * @param tableName
 * @param columnName
 * @param schemaPattern
 * @return
 */
private String getColumnComment(DatabaseMetaData dbJDBCMetadata,ResultSet columns,String tableName,String columnName,String schemaPattern){
  String columnComment=getRemarksFromResultSet(columns);
  try {
    if (StringUtils.isBlank(columnComment) && MetadataConnectionUtils.isOracle(dbJDBCMetadata)) {
      String selectRemarkOnTable=""String_Node_Str"" + tableName + ""String_Node_Str""+ schemaPattern.toUpperCase()+ ""String_Node_Str""+ columnName+ ""String_Node_Str"";
      columnComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  if (columnComment == null) {
    columnComment=""String_Node_Str"";
  }
  return columnComment;
}",0.9793253536452666
125646,"/** 
 * get Table Comment.
 * @param dbJDBCMetadata
 * @param tables
 * @param tableName
 * @param catalogName
 * @param schemaPattern
 * @return
 */
private String getTableComment(DatabaseMetaData dbJDBCMetadata,ResultSet tables,String tableName,String catalogName,String schemaPattern){
  String tableComment=getStringFromResultSet(tables,GetTable.REMARKS.name());
  try {
    String productName=dbJDBCMetadata.getDatabaseProductName();
    if (StringUtils.isBlank(tableComment)) {
      String selectRemarkOnTable=MetadataConnectionUtils.getCommentQueryStr(productName,tableName,catalogName,schemaPattern);
      if (selectRemarkOnTable != null) {
        tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableComment;
}","/** 
 * get Table Comment.
 * @param dbJDBCMetadata
 * @param tables
 * @param tableName
 * @param catalogName
 * @param schemaPattern
 * @return
 */
private String getTableComment(DatabaseMetaData dbJDBCMetadata,ResultSet tables,String tableName,String catalogName,String schemaPattern){
  String tableComment=getRemarksFromResultSet(tables);
  try {
    String productName=dbJDBCMetadata.getDatabaseProductName();
    if (StringUtils.isBlank(tableComment)) {
      String selectRemarkOnTable=MetadataConnectionUtils.getCommentQueryStr(productName,tableName,catalogName,schemaPattern);
      if (selectRemarkOnTable != null) {
        tableComment=executeGetCommentStatement(selectRemarkOnTable,dbJDBCMetadata.getConnection());
      }
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableComment;
}",0.9778310365488316
125647,"public static String getOriginalValueOfProperties(ContextType contextType,String propertiesStrings){
  String originalValueOfProperties=propertiesStrings;
  if (propertiesStrings != null && !propertiesStrings.isEmpty()) {
    List<Map<String,Object>> jdbcPropertiesList=HadoopRepositoryUtil.getHadoopPropertiesList(propertiesStrings);
    if (jdbcPropertiesList != null && !jdbcPropertiesList.isEmpty()) {
      List<Map<String,Object>> newJdbcPropertiesList=new ArrayList<Map<String,Object>>(jdbcPropertiesList.size());
      Iterator<Map<String,Object>> iter=jdbcPropertiesList.iterator();
      while (iter.hasNext()) {
        Map<String,Object> map=iter.next();
        if (map != null && !map.isEmpty()) {
          Map<String,Object> newMap=new HashMap<String,Object>();
          Iterator<Map.Entry<String,Object>> mapEntryIter=map.entrySet().iterator();
          while (mapEntryIter.hasNext()) {
            Map.Entry<String,Object> entry=mapEntryIter.next();
            if (entry != null) {
              Object obj=entry.getValue();
              Object newValue=null;
              if (obj != null) {
                newValue=ContextParameterUtils.getOriginalValue(contextType,obj.toString());
              }
              newMap.put(entry.getKey(),newValue);
            }
          }
          newJdbcPropertiesList.add(newMap);
        }
      }
      originalValueOfProperties=HadoopRepositoryUtil.getHadoopPropertiesJsonStr(newJdbcPropertiesList);
    }
  }
  return originalValueOfProperties;
}","public static String getOriginalValueOfProperties(String propertiesStrings,ContextType contextType,boolean includeQuotes){
  String originalValueOfProperties=propertiesStrings;
  if (propertiesStrings != null && !propertiesStrings.isEmpty()) {
    List<Map<String,Object>> propertiesList=getHadoopPropertiesWithOriginalValue(propertiesStrings,contextType,includeQuotes);
    if (propertiesList != null && !propertiesList.isEmpty()) {
      originalValueOfProperties=getHadoopPropertiesJsonStr(propertiesList);
    }
  }
  return originalValueOfProperties;
}",0.4092664092664093
125648,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),hadoopClusterConnection.isContextMode(),true);
    }
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,ContextType clusterContextType,ContextType contextType,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      parentProperties=getHadoopPropertiesWithOriginalValue(hadoopClusterService.getHadoopClusterProperties(connection),clusterContextType,includeQuotes);
    }
  }
  List<Map<String,Object>> properties=getHadoopPropertiesWithOriginalValue(propertiesJsonStr,contextType,includeQuotes);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.8575598365440747
125649,"@Override public void widgetSelected(SelectionEvent e){
  if (propertiesDialog.open() == IDialogConstants.OK_ID) {
    applyProperties(properties);
    updateStatusLabel(properties);
  }
}","@Override public void widgetSelected(SelectionEvent e){
  setInitProperties(getLatestInitProperties());
  if (propertiesDialog.open() == IDialogConstants.OK_ID) {
    applyProperties(properties);
    updateStatusLabel(properties);
  }
}",0.8867924528301887
125650,"@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite comp=new Composite(composite,SWT.NONE);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  comp.setLayout(layout);
  propertiesBar=new ExpandBar(comp,SWT.V_SCROLL);
  propertiesBar.setSpacing(10);
  propertiesBar.setBackground(propertiesBar.getParent().getBackground());
  propertiesBar.setLayoutData(new GridData(GridData.FILL_BOTH));
  PropertiesTableView parentPropertiesTable=null;
  if (initPropertiesOfParent != null) {
    parentPropertiesTable=createPropertiesTable(propertiesBar,0,getParentTitle(),initPropertiesOfParent,true,false);
  }
  int tableIndex=parentPropertiesTable == null ? 0 : 1;
  propertiesTableView=createPropertiesTable(propertiesBar,tableIndex,getTitle(),initProperties,false,true);
  updateExpandItems();
  return parent;
}","@Override protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  Composite comp=new Composite(composite,SWT.NONE);
  comp.setLayoutData(new GridData(GridData.FILL_BOTH));
  GridLayout layout=new GridLayout();
  layout.marginHeight=10;
  layout.marginWidth=10;
  comp.setLayout(layout);
  propertiesBar=new ExpandBar(comp,SWT.V_SCROLL);
  propertiesBar.setSpacing(10);
  propertiesBar.setBackground(propertiesBar.getParent().getBackground());
  propertiesBar.setLayoutData(new GridData(GridData.FILL_BOTH));
  PropertiesTableView parentPropertiesTable=null;
  if (initPropertiesOfParent != null) {
    parentPropertiesTable=createPropertiesTable(propertiesBar,0,getParentTitle(),initPropertiesOfParent,true,false);
  }
  int tableIndex=parentPropertiesTable == null ? 0 : 1;
  propertiesTableView=createPropertiesTable(propertiesBar,tableIndex,getTitle(),initProperties,false,true);
  updateExpandItems();
  updateStatusLabel(initProperties);
  return parent;
}",0.981637717121588
125651,"public void createPropertiesFields(Composite parent){
  propComposite=new Composite(parent,SWT.NONE);
  GridLayout propCompLayout=new GridLayout(3,false);
  propCompLayout.marginWidth=getMarginWidth();
  propCompLayout.marginHeight=getMarginHeight();
  propComposite.setLayout(propCompLayout);
  propComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label propLabel=new Label(propComposite,SWT.NONE);
  propLabel.setText(getTitle());
  Button propertyButton=new Button(propComposite,SWT.NONE);
  final PropertiesDialog propertiesDialog=this;
  propertyButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  propertyButton.setLayoutData(new GridData(30,25));
  propertyButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (propertiesDialog.open() == IDialogConstants.OK_ID) {
        applyProperties(properties);
        updateStatusLabel(properties);
      }
    }
  }
);
  statusLabel=new Label(propComposite,SWT.NONE);
  statusLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  updateStatusLabel(initProperties);
}","public void createPropertiesFields(Composite parent){
  propComposite=new Composite(parent,SWT.NONE);
  GridLayout propCompLayout=new GridLayout(3,false);
  propCompLayout.marginWidth=getMarginWidth();
  propCompLayout.marginHeight=getMarginHeight();
  propComposite.setLayout(propCompLayout);
  propComposite.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label propLabel=new Label(propComposite,SWT.NONE);
  propLabel.setText(getTitle());
  Button propertyButton=new Button(propComposite,SWT.NONE);
  final PropertiesDialog propertiesDialog=this;
  propertyButton.setImage(ImageProvider.getImage(EImage.THREE_DOTS_ICON));
  propertyButton.setLayoutData(new GridData(30,25));
  propertyButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      setInitProperties(getLatestInitProperties());
      if (propertiesDialog.open() == IDialogConstants.OK_ID) {
        applyProperties(properties);
        updateStatusLabel(properties);
      }
    }
  }
);
  statusLabel=new Label(propComposite,SWT.NONE);
  statusLabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9608446986361636
125652,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(contextType,jdbcPropertiesString));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(contextType,propertiesString));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  ContextType hadoopClusterContextType=getHadoopClusterContextType(dbConn,defaultContext);
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,getOriginalValue(hadoopClusterContextType,contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,getOriginalValue(hadoopClusterContextType,contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,getOriginalValue(hadoopClusterContextType,contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,getOriginalValue(hadoopClusterContextType,contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,getOriginalValue(hadoopClusterContextType,contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,getOriginalValue(hadoopClusterContextType,contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,getOriginalValue(hadoopClusterContextType,contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,getOriginalValue(hadoopClusterContextType,contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,keytab));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(jdbcPropertiesString,contextType));
    String additionalJDBCSettings=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS,getOriginalValue(hadoopClusterContextType,contextType,additionalJDBCSettings));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(propertiesString,contextType));
    String trustStorePath=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
    if (trustStorePath != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH,getOriginalValue(hadoopClusterContextType,contextType,trustStorePath));
    }
    String trustStorePassword=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
    if (trustStorePassword != null) {
      cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD,cloneConn.getValue(cloneConn.getValue(getOriginalValue(hadoopClusterContextType,contextType,trustStorePassword),false),true));
    }
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,getOriginalValue(hadoopClusterContextType,contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9965620193612594
125653,"protected void createHadoopPropertiesContextVariable(String prefixName,List<IContextParameter> varList,String hadoopProperties){
  List<Map<String,Object>> hadoopPropertiesList=HadoopRepositoryUtil.getHadoopPropertiesList(hadoopProperties);
  for (  Map<String,Object> propertyMap : hadoopPropertiesList) {
    String propertyKey=(String)propertyMap.get(HADOOP_PROPERTY);
    String propertyValue=(String)propertyMap.get(HADOOP_VALUE);
    String keyWithPrefix=prefixName + ConnectionContextHelper.LINE + getValidHadoopContextName(propertyKey);
    ConnectionContextHelper.createParameters(varList,keyWithPrefix,propertyValue);
  }
}","protected void createHadoopPropertiesContextVariable(String prefixName,List<IContextParameter> varList,String hadoopProperties){
  List<Map<String,Object>> hadoopPropertiesList=HadoopRepositoryUtil.getHadoopPropertiesList(hadoopProperties);
  for (  Map<String,Object> propertyMap : hadoopPropertiesList) {
    String propertyKey=(String)propertyMap.get(HADOOP_PROPERTY);
    String propertyValue=(String)propertyMap.get(HADOOP_VALUE);
    String keyWithPrefix=prefixName + ConnectionContextHelper.LINE + ContextParameterUtils.getValidParameterName(propertyKey);
    ConnectionContextHelper.createParameters(varList,keyWithPrefix,propertyValue);
  }
}",0.9657320872274144
125654,"protected List<Map<String,Object>> transformHadoopPropertiesForContextMode(List<Map<String,Object>> hadoopPropertiesList,String prefixName){
  for (  Map<String,Object> propertyMap : hadoopPropertiesList) {
    String propertyKey=(String)propertyMap.get(HADOOP_PROPERTY);
    propertyMap.put(HADOOP_VALUE,ContextParameterUtils.getNewScriptCode(prefixName + ConnectionContextHelper.LINE + getValidHadoopContextName(propertyKey),LANGUAGE));
  }
  return hadoopPropertiesList;
}","protected List<Map<String,Object>> transformHadoopPropertiesForContextMode(List<Map<String,Object>> hadoopPropertiesList,String prefixName){
  for (  Map<String,Object> propertyMap : hadoopPropertiesList) {
    String propertyKey=(String)propertyMap.get(HADOOP_PROPERTY);
    propertyMap.put(HADOOP_VALUE,ContextParameterUtils.getNewScriptCode(prefixName + ConnectionContextHelper.LINE + ContextParameterUtils.getValidParameterName(propertyKey),LANGUAGE));
  }
  return hadoopPropertiesList;
}",0.9545454545454546
125655,"private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
    }
    if (useMaprTicket) {
      setMaprTicketConfig(metadataConn,hiveClassLoader,useKerberos);
    }
    if (useKerberos) {
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}","private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useMaprTicket) {
      setMaprTicketPropertiesConfig(metadataConn);
    }
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (useMaprTicket) {
      setMaprTicketConfig(metadataConn,hiveClassLoader,useKerberos);
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}",0.9246060606060608
125656,"private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws SQLException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}","private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws SQLException {
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean setMapRHadoopLogin=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_SETMAPRHADOOPLOGIN));
  String mapRHadoopLogin=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_MAPRTICKET_MAPRHADOOPLOGIN);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      if (setMapRHadoopLogin) {
        System.setProperty(""String_Node_Str"",mapRHadoopLogin);
      }
 else {
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      }
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}",0.8665716999050332
125657,"private ClassLoader getClassLoader(IMetadataConnection metadataConn){
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null) {
    String distribution=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(distribution,false);
    if (impalaDistribution != null) {
      String impalaIndex=EDatabaseTypeName.IMPALA.getProduct() + ClassLoaderFactory.KEY_SEPARATOR + impalaDistribution.getName();
      if (impalaDistribution.useCustom()) {
        String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
        String index=""String_Node_Str"" + ClassLoaderFactory.KEY_SEPARATOR + impalaIndex+ ClassLoaderFactory.KEY_SEPARATOR+ metadataConn.getId();
        DynamicClassLoader classLoader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
        if (classLoader != null) {
          return classLoader;
        }
      }
 else {
        IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(version,false);
        if (impalaVersion != null) {
          DynamicClassLoader classLoader=ClassLoaderFactory.getClassLoader(impalaIndex + ClassLoaderFactory.KEY_SEPARATOR + impalaVersion.getVersion());
          if (classLoader == null) {
            classLoader=ClassLoaderFactory.getClassLoader(impalaVersion);
          }
          if (classLoader != null) {
            return classLoader;
          }
        }
      }
    }
  }
  return this.getClass().getClassLoader();
}","private ClassLoader getClassLoader(IMetadataConnection metadataConn){
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null) {
    String distribution=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(distribution,false);
    if (impalaDistribution != null) {
      String impalaIndex=EDatabaseTypeName.IMPALA.getProduct() + ClassLoaderFactory.KEY_SEPARATOR + impalaDistribution.getName();
      if (impalaDistribution.useCustom()) {
        String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
        String index=""String_Node_Str"" + ClassLoaderFactory.KEY_SEPARATOR + impalaIndex+ ClassLoaderFactory.KEY_SEPARATOR+ metadataConn.getId();
        DynamicClassLoader classLoader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
        if (classLoader != null) {
          return classLoader;
        }
      }
 else {
        IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(version,false);
        if (impalaVersion != null) {
          boolean isKeb=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
          DynamicClassLoader classLoader=ClassLoaderFactory.getClassLoader(impalaIndex + ClassLoaderFactory.KEY_SEPARATOR + impalaVersion.getVersion()+ (isKeb ? ""String_Node_Str"" : ""String_Node_Str""));
          if (classLoader == null) {
            classLoader=ClassLoaderFactory.getClassLoader(impalaVersion);
          }
          if (classLoader != null) {
            return classLoader;
          }
        }
      }
    }
  }
  return this.getClass().getClassLoader();
}",0.9002217294900222
125658,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
        if (!useSSL) {
          metadataConnection.setUrl(connection.getURL());
        }
        if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
      if (!repositoryObjectEditable) {
        boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (flag) {
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
      }
 else {
        DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
        WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
        wizardDialog.setBlockOnOpen(true);
        handleWizard(node,wizardDialog);
      }
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())&& !metadataConnection.getDbType().equals(EDatabaseConnTemplate.IMPALA.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
        if (!useSSL) {
          metadataConnection.setUrl(connection.getURL());
        }
        if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
      if (!repositoryObjectEditable) {
        boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (flag) {
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
      }
 else {
        DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
        WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
        wizardDialog.setBlockOnOpen(true);
        handleWizard(node,wizardDialog);
      }
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9912349045578496
125659,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
            if (!useSSL) {
              metadataConnection.setUrl(connection.getURL());
            }
            if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
          if (!repositoryObjectEditable) {
            boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            if (flag) {
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
          }
 else {
            DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
            WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
            wizardDialog.setBlockOnOpen(true);
            handleWizard(node,wizardDialog);
          }
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())&& !metadataConnection.getDbType().equals(EDatabaseConnTemplate.IMPALA.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
            if (!useSSL) {
              metadataConnection.setUrl(connection.getURL());
            }
            if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
          if (!repositoryObjectEditable) {
            boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            if (flag) {
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
          }
 else {
            DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
            WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
            wizardDialog.setBlockOnOpen(true);
            handleWizard(node,wizardDialog);
          }
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9924924924924924
125660,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
                if (!useSSL) {
                  metadataConnection.setUrl(connection.getURL());
                }
                if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
              IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
              boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
              if (!repositoryObjectEditable) {
                boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                if (flag) {
                  DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                  wizardDialog.setBlockOnOpen(true);
                  handleWizard(node,wizardDialog);
                }
              }
 else {
                DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                wizardDialog.setBlockOnOpen(true);
                handleWizard(node,wizardDialog);
              }
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())&& !metadataConnection.getDbType().equals(EDatabaseConnTemplate.IMPALA.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
                if (!useSSL) {
                  metadataConnection.setUrl(connection.getURL());
                }
                if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
              IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
              boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
              if (!repositoryObjectEditable) {
                boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                if (flag) {
                  DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                  wizardDialog.setBlockOnOpen(true);
                  handleWizard(node,wizardDialog);
                }
              }
 else {
                DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                wizardDialog.setBlockOnOpen(true);
                handleWizard(node,wizardDialog);
              }
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.9934640522875816
125661,"@Override public IMetadataColumn getColumn(String columnName){
  for (int i=0; i < getListColumns(true).size(); i++) {
    IMetadataColumn column=getListColumns(true).get(i);
    if (column.getLabel().equals(columnName)) {
      return column;
    }
  }
  return null;
}","@Override public IMetadataColumn getColumn(String columnName){
  List<IMetadataColumn> withUnusedList=getListColumns(true);
  for (int i=0; i < withUnusedList.size(); i++) {
    IMetadataColumn column=withUnusedList.get(i);
    if (column.getLabel().equals(columnName)) {
      return column;
    }
  }
  return null;
}",0.7809847198641766
125662,"@Override public synchronized List<IMetadataColumn> getListColumns(boolean withUnselected){
  Iterator<IMetadataColumn> it=this.listColumns.iterator();
  while (it.hasNext()) {
    IMetadataColumn column=it.next();
    if (!column.isUsefulColumn()) {
      this.unusedColumns.add(column);
      it.remove();
    }
  }
  Iterator<IMetadataColumn> it2=this.unusedColumns.iterator();
  while (it2.hasNext()) {
    IMetadataColumn column=it2.next();
    if (column.isUsefulColumn()) {
      this.listColumns.add(column);
      it2.remove();
    }
  }
  if (withUnselected) {
    List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
    temp.addAll(this.listColumns);
    temp.addAll(this.unusedColumns);
    return temp;
  }
  return this.listColumns;
}","@Override public synchronized List<IMetadataColumn> getListColumns(boolean withUnselected){
  Iterator<IMetadataColumn> it=this.listColumns.iterator();
  while (it.hasNext()) {
    IMetadataColumn column=it.next();
    if (!column.isUsefulColumn()) {
      this.unusedColumns.add(column);
      it.remove();
    }
  }
  Iterator<IMetadataColumn> it2=this.unusedColumns.iterator();
  while (it2.hasNext()) {
    IMetadataColumn column=it2.next();
    if (column.isUsefulColumn()) {
      this.listColumns.add(column);
      it2.remove();
    }
  }
  if (withUnselected) {
    List<IMetadataColumn> temp=new ArrayList<IMetadataColumn>();
    temp.addAll(this.listColumns);
    temp.addAll(this.unusedColumns);
    if (isRepository && originalColumns != null) {
      Collections.sort(temp,new Comparator<IMetadataColumn>(){
        @Override public int compare(        IMetadataColumn o1,        IMetadataColumn o2){
          int index1=originalColumns.indexOf(o1.getLabel());
          int index2=originalColumns.indexOf(o2.getLabel());
          return index1 - index2;
        }
      }
);
    }
    return temp;
  }
  return this.listColumns;
}",0.7563025210084033
125663,"public boolean isRepository(){
  return this.isRepository;
}","@Override public boolean isRepository(){
  return this.isRepository;
}",0.9230769230769232
125664,"private ClassLoader getClassLoader(IMetadataConnection metadataConn){
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null) {
    String distribution=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(distribution,false);
    if (impalaDistribution != null) {
      String impalaIndex=EDatabaseTypeName.IMPALA.getProduct() + ClassLoaderFactory.KEY_SEPARATOR + impalaDistribution.getName();
      if (impalaDistribution.useCustom()) {
        String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
        String index=""String_Node_Str"" + ClassLoaderFactory.KEY_SEPARATOR + impalaIndex+ ClassLoaderFactory.KEY_SEPARATOR+ metadataConn.getId();
        DynamicClassLoader classLoader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
        if (classLoader != null) {
          return classLoader;
        }
      }
 else {
        IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(version,false);
        if (impalaVersion != null) {
          boolean isKeb=false;
          DynamicClassLoader classLoader=ClassLoaderFactory.getClassLoader(impalaIndex + ClassLoaderFactory.KEY_SEPARATOR + impalaVersion.getVersion()+ (isKeb ? ""String_Node_Str"" : ""String_Node_Str""));
          if (classLoader == null) {
            classLoader=ClassLoaderFactory.getClassLoader(impalaVersion);
          }
          if (classLoader != null) {
            return classLoader;
          }
        }
      }
    }
  }
  return this.getClass().getClassLoader();
}","private ClassLoader getClassLoader(IMetadataConnection metadataConn){
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null) {
    String distribution=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(distribution,false);
    if (impalaDistribution != null) {
      String impalaIndex=EDatabaseTypeName.IMPALA.getProduct() + ClassLoaderFactory.KEY_SEPARATOR + impalaDistribution.getName();
      if (impalaDistribution.useCustom()) {
        String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
        String index=""String_Node_Str"" + ClassLoaderFactory.KEY_SEPARATOR + impalaIndex+ ClassLoaderFactory.KEY_SEPARATOR+ metadataConn.getId();
        DynamicClassLoader classLoader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
        if (classLoader != null) {
          return classLoader;
        }
      }
 else {
        IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(version,false);
        if (impalaVersion != null) {
          boolean isKeb=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
          DynamicClassLoader classLoader=ClassLoaderFactory.getClassLoader(impalaIndex + ClassLoaderFactory.KEY_SEPARATOR + impalaVersion.getVersion()+ (isKeb ? ""String_Node_Str"" : ""String_Node_Str""));
          if (classLoader == null) {
            classLoader=ClassLoaderFactory.getClassLoader(impalaVersion);
          }
          if (classLoader != null) {
            return classLoader;
          }
        }
      }
    }
  }
  return this.getClass().getClassLoader();
}",0.915401301518438
125665,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
        if (!useSSL) {
          metadataConnection.setUrl(connection.getURL());
        }
        if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
      if (!repositoryObjectEditable) {
        boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (flag) {
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
      }
 else {
        DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
        WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
        wizardDialog.setBlockOnOpen(true);
        handleWizard(node,wizardDialog);
      }
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())&& !metadataConnection.getDbType().equals(EDatabaseConnTemplate.IMPALA.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
        if (!useSSL) {
          metadataConnection.setUrl(connection.getURL());
        }
        if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
      if (!repositoryObjectEditable) {
        boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (flag) {
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
      }
 else {
        DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
        WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
        wizardDialog.setBlockOnOpen(true);
        handleWizard(node,wizardDialog);
      }
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9912349045578496
125666,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
            if (!useSSL) {
              metadataConnection.setUrl(connection.getURL());
            }
            if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
          if (!repositoryObjectEditable) {
            boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            if (flag) {
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
          }
 else {
            DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
            WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
            wizardDialog.setBlockOnOpen(true);
            handleWizard(node,wizardDialog);
          }
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())&& !metadataConnection.getDbType().equals(EDatabaseConnTemplate.IMPALA.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
            if (!useSSL) {
              metadataConnection.setUrl(connection.getURL());
            }
            if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
          if (!repositoryObjectEditable) {
            boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            if (flag) {
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
          }
 else {
            DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
            WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
            wizardDialog.setBlockOnOpen(true);
            handleWizard(node,wizardDialog);
          }
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9924924924924924
125667,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
                if (!useSSL) {
                  metadataConnection.setUrl(connection.getURL());
                }
                if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
              IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
              boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
              if (!repositoryObjectEditable) {
                boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                if (flag) {
                  DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                  wizardDialog.setBlockOnOpen(true);
                  handleWizard(node,wizardDialog);
                }
              }
 else {
                DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                wizardDialog.setBlockOnOpen(true);
                handleWizard(node,wizardDialog);
              }
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())&& !metadataConnection.getDbType().equals(EDatabaseConnTemplate.IMPALA.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
                if (!useSSL) {
                  metadataConnection.setUrl(connection.getURL());
                }
                if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
              IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
              boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
              if (!repositoryObjectEditable) {
                boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                if (flag) {
                  DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                  wizardDialog.setBlockOnOpen(true);
                  handleWizard(node,wizardDialog);
                }
              }
 else {
                DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                wizardDialog.setBlockOnOpen(true);
                handleWizard(node,wizardDialog);
              }
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.9934640522875816
125668,"private static ContextType getHadoopClusterContextType(DatabaseConnection dbConn,boolean useDefaultContext){
  ContextType hadoopClusterContextType=null;
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null) {
    ConnectionItem hadoopClusterItem=(ConnectionItem)hadoopClusterService.getHadoopClusterItemById(dbConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID));
    if (hadoopClusterItem != null) {
      Connection hadoopClusterConnection=hadoopClusterItem.getConnection();
      hadoopClusterContextType=ConnectionContextHelper.getContextTypeForContextMode(null,hadoopClusterConnection,hadoopClusterConnection.getContextName(),useDefaultContext);
    }
  }
  return hadoopClusterContextType;
}","private static ContextType getHadoopClusterContextType(DatabaseConnection dbConn,boolean useDefaultContext){
  ContextType hadoopClusterContextType=null;
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  if (hadoopClusterService != null) {
    EMap<String,String> parameters=dbConn.getParameters();
    if (parameters != null && parameters.size() > 0) {
      ConnectionItem hadoopClusterItem=(ConnectionItem)hadoopClusterService.getHadoopClusterItemById(parameters.get(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CLUSTER_ID));
      if (hadoopClusterItem != null) {
        Connection hadoopClusterConnection=hadoopClusterItem.getConnection();
        hadoopClusterContextType=ConnectionContextHelper.getContextTypeForContextMode(null,hadoopClusterConnection,hadoopClusterConnection.getContextName(),useDefaultContext);
      }
    }
  }
  return hadoopClusterContextType;
}",0.9217391304347826
125669,"public static SAPConnection cloneOriginalValueSAPConnection(SAPConnection fileConn,ContextType contextType){
  if (fileConn == null) {
    return null;
  }
  SAPConnection cloneConn=ConnectionFactory.eINSTANCE.createSAPConnection();
  String client=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getClient());
  String host=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getHost());
  String user=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getUsername());
  String pass=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getValue(fileConn.getPassword(),false));
  String sysNumber=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getSystemNumber());
  String language=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getLanguage());
  cloneConn.setClient(client);
  cloneConn.setHost(host);
  cloneConn.setUsername(user);
  cloneConn.setPassword(cloneConn.getValue(pass,true));
  cloneConn.setSystemNumber(sysNumber);
  cloneConn.setLanguage(language);
  ConnectionContextHelper.cloneConnectionProperties(fileConn,cloneConn);
  return cloneConn;
}","public static SAPConnection cloneOriginalValueSAPConnection(SAPConnection fileConn,ContextType contextType){
  if (fileConn == null) {
    return null;
  }
  SAPConnection cloneConn=ConnectionFactory.eINSTANCE.createSAPConnection();
  String client=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getClient());
  String host=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getHost());
  String user=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getUsername());
  String pass=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getValue(fileConn.getPassword(),false));
  String sysNumber=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getSystemNumber());
  String language=ConnectionContextHelper.getOriginalValue(contextType,fileConn.getLanguage());
  cloneConn.setClient(client);
  cloneConn.setHost(host);
  cloneConn.setUsername(user);
  cloneConn.setPassword(cloneConn.getValue(pass,true));
  cloneConn.setSystemNumber(sysNumber);
  cloneConn.setLanguage(language);
  if (fileConn.getAdditionalProperties() != null && !fileConn.getAdditionalProperties().isEmpty()) {
    Collection<AdditionalConnectionProperty> addtionalProperties=EcoreUtil.copyAll(fileConn.getAdditionalProperties());
    cloneConn.getAdditionalProperties().addAll(addtionalProperties);
    for (    AdditionalConnectionProperty prop : cloneConn.getAdditionalProperties()) {
      String propValue=ConnectionContextHelper.getOriginalValue(contextType,prop.getValue());
      prop.setValue(propValue);
    }
  }
  ConnectionContextHelper.cloneConnectionProperties(fileConn,cloneConn);
  return cloneConn;
}",0.8151079136690648
125670,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((this.path == null) ? 0 : this.path.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((this.path == null) ? 0 : this.path.hashCode());
  result=prime * result + ((this.topNodePath == null) ? 0 : this.topNodePath.hashCode());
  return result;
}",0.7857142857142857
125671,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ResourceNode other=(ResourceNode)obj;
  if (this.path == null) {
    if (other.path != null)     return false;
  }
 else   if (!this.path.equals(other.path))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ResourceNode other=(ResourceNode)obj;
  if (this.path == null) {
    if (other.path != null)     return false;
  }
 else   if (!this.path.equals(other.path))   return false;
  if (this.topNodePath == null) {
    if (other.topNodePath != null)     return false;
  }
 else   if (!this.topNodePath.equals(other.topNodePath))   return false;
  return true;
}",0.7840909090909091
125672,"@Override public boolean contains(String jarName){
  return list().contains(jarName);
}","@Override public boolean contains(String jarName){
  Set<String> list=list();
  boolean contained=list.contains(jarName);
  if (!contained) {
    try {
      File jarFile=getJarFile(jarName);
      if (jarFile != null) {
        list.add(jarName);
        contained=true;
      }
    }
 catch (    MalformedURLException e) {
      contained=false;
    }
  }
  return contained;
}",0.2832618025751073
125673,"public void executeJobOnServer(IProcessMessageManager processMessageManager,ITargetExecutionConfig config,PipedInputStream stdInputStream,PipedInputStream errInputStream,PipedOutputStream stdOutputStream,PipedOutputStream errOutputStream,String remoteJobId,String jobName,Map<String,String> jobParams,Map<String,String> contextParams) throws Exception ;","public Process executeJobOnServer(IProcessMessageManager processMessageManager,ITargetExecutionConfig config,PipedInputStream stdInputStream,PipedInputStream errInputStream,PipedOutputStream stdOutputStream,PipedOutputStream errOutputStream,String remoteJobId,String jobName,Map<String,String> jobParams,Map<String,String> contextParams) throws Exception ;",0.9844851904090268
125674,"public void addItem(ImportItem itemRecord,List<ImportItem> children){
  if (itemRecord != null) {
    this.allImportItemRecords.add(itemRecord);
    final Project project=itemRecord.getItemProject();
    if (project == null) {
      return;
    }
    final String technicalLabel=project.getTechnicalLabel();
    ProjectImportNode projectImportNode=this.projectNodesMap.get(technicalLabel);
    if (projectImportNode == null) {
      projectImportNode=new ProjectImportNode(project);
      this.projectNodesMap.put(technicalLabel,projectImportNode);
    }
    final Item item=itemRecord.getItem();
    if (item != null && hadoopClusterService != null && hadoopClusterService.isHadoopSubItem(item)) {
      return;
    }
    final ERepositoryObjectType itemType=itemRecord.getRepositoryType();
    ImportNode typeImportNode=findAndCreateParentTypeNode(projectImportNode,itemType);
    ImportNode parentImportNode=typeImportNode;
    if (parentImportNode == null) {
      parentImportNode=projectImportNode;
    }
    if (ERepositoryObjectType.PROCESS.equals(itemType) && ERepositoryObjectType.findParentType(itemType) == null && PluginChecker.isTIS()) {
      StandardJobImportNode standJobImportNode=this.standardNodesMap.get(technicalLabel);
      if (standJobImportNode == null) {
        standJobImportNode=new StandardJobImportNode(itemType);
        this.standardNodesMap.put(technicalLabel,standJobImportNode);
        typeImportNode.addChild(standJobImportNode);
      }
      parentImportNode=standJobImportNode;
    }
    String path=item.getState().getPath();
    if (StringUtils.isNotEmpty(path)) {
      parentImportNode=findAndCreateFolderNode(typeImportNode,new Path(path));
    }
    ItemImportNode itemNode=new ItemImportNode(itemRecord);
    parentImportNode.addChild(itemNode);
    allImportItemNode.add(itemNode);
    if (children != null) {
      for (      ImportItem childRecord : children) {
        ItemImportNode childNode=new ItemImportNode(childRecord);
        itemNode.addChild(childNode);
      }
    }
  }
}","public void addItem(ImportItem itemRecord,List<ImportItem> children){
  if (itemRecord != null) {
    this.allImportItemRecords.add(itemRecord);
    final Project project=itemRecord.getItemProject();
    if (project == null) {
      return;
    }
    final String technicalLabel=project.getTechnicalLabel();
    ProjectImportNode projectImportNode=this.projectNodesMap.get(technicalLabel);
    if (projectImportNode == null) {
      projectImportNode=new ProjectImportNode(project);
      this.projectNodesMap.put(technicalLabel,projectImportNode);
    }
    final Item item=itemRecord.getItem();
    if (item != null && hadoopClusterService != null && hadoopClusterService.isHadoopSubItem(item)) {
      return;
    }
    final ERepositoryObjectType itemType=itemRecord.getRepositoryType();
    ImportNode typeImportNode=findAndCreateParentTypeNode(projectImportNode,itemType);
    ImportNode parentImportNode=typeImportNode;
    if (parentImportNode == null) {
      parentImportNode=projectImportNode;
    }
    if (ERepositoryObjectType.PROCESS.equals(itemType) && ERepositoryObjectType.findParentType(itemType) == null && PluginChecker.isTIS()) {
      StandardJobImportNode standJobImportNode=this.standardNodesMap.get(technicalLabel);
      if (standJobImportNode == null) {
        standJobImportNode=new StandardJobImportNode(itemType);
        this.standardNodesMap.put(technicalLabel,standJobImportNode);
        typeImportNode.addChild(standJobImportNode);
      }
      parentImportNode=standJobImportNode;
      typeImportNode=standJobImportNode;
    }
    String path=item.getState().getPath();
    if (StringUtils.isNotEmpty(path)) {
      parentImportNode=findAndCreateFolderNode(typeImportNode,new Path(path));
    }
    ItemImportNode itemNode=new ItemImportNode(itemRecord);
    parentImportNode.addChild(itemNode);
    allImportItemNode.add(itemNode);
    if (children != null) {
      for (      ImportItem childRecord : children) {
        ItemImportNode childNode=new ItemImportNode(childRecord);
        itemNode.addChild(childNode);
      }
    }
  }
}",0.9900364520048602
125675,"private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useMaprTicket) {
      setMaprTicketConfig(metadataConn,hiveClassLoader,useKerberos);
    }
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}","private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
    }
    if (useMaprTicket) {
      setMaprTicketConfig(metadataConn,hiveClassLoader,useKerberos);
    }
    if (useKerberos) {
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}",0.9433588919119466
125676,"/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  DriverShim wapperDriver=null;
  String dbType=""String_Node_Str"";
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    dbType=metadataConnection.getDbType();
    DatabaseMetaData dbMetaData=null;
    if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
    }
 else {
      if (needCreateAndClose || extractMeta.getConn() == null || extractMeta.getConn().isClosed()) {
        List list=extractMeta.getConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getDatabase(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams());
        if (list != null && list.size() > 0) {
          for (int i=0; i < list.size(); i++) {
            if (list.get(i) instanceof DriverShim) {
              wapperDriver=(DriverShim)list.get(i);
            }
          }
        }
      }
      dbMetaData=extractMeta.getDatabaseMetaData(extractMeta.getConn(),dbType,metadataConnection.isSqlMode(),metadataConnection.getDatabase());
    }
    String tableLabel=tableNode.getValue();
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(extractMeta.getConn(),newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(dbType);
      metadataColumns=MetadataFillFactory.getDBInstance(currentEDatabaseType).fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      extractMeta.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (extractMeta.getConn() != null) {
      ConnectionUtils.closeConnection(extractMeta.getConn());
    }
  }
  return metadataColumns;
}","/** 
 * DOC ggu Comment method ""returnColumns"". work for @see ExtractMetaDataFromDataBase.returnColumns(...)
 * @param metadataConnection
 * @param tableNode
 * @param dontCreateClose
 * @return
 */
public List<TdColumn> returnColumns(IMetadataConnection metadataConnection,TableNode tableNode,boolean... dontCreateClose){
  if (metadataConnection == null || tableNode == null || tableNode.getType() != TableNode.TABLE) {
    return Collections.emptyList();
  }
  NamedColumnSet table=tableNode.getTable();
  if (table == null) {
    table=tableNode.getView();
  }
  if (table == null) {
    return Collections.emptyList();
  }
  List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
  boolean needCreateAndClose=dontCreateClose.length == 0 || !dontCreateClose[0];
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  try {
    DatabaseMetaData dbMetaData=createDatabaseMetaData(metadataConnection,needCreateAndClose);
    TableNode newNode=tableNode;
    String name=newNode.getItemType();
    if (name != null && StringUtils.trimToEmpty(name).equals(ETableTypes.TABLETYPE_SYNONYM.getName())) {
      String tableName=getTableNameBySynonyms(extractMeta.getConn(),newNode.getValue());
      if (tableName != null && tableName.contains(""String_Node_Str"")) {
        tableName=tableName.replace(""String_Node_Str"",""String_Node_Str"");
      }
      fillSynonyms(metadataConnection,metadataColumns,table,tableName,dbMetaData);
    }
 else {
      EDatabaseTypeName currentEDatabaseType=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
      metadataColumns=MetadataFillFactory.getDBInstance(currentEDatabaseType).fillColumns(table,metadataConnection,dbMetaData,null);
    }
    ColumnSetHelper.addColumns(table,metadataColumns);
    if (needCreateAndClose) {
      extractMeta.closeConnection();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    log.error(e);
  }
 finally {
    if (extractMeta.getConn() != null) {
      ConnectionUtils.closeConnection(extractMeta.getConn());
    }
  }
  return metadataColumns;
}",0.7544389875330563
125677,"public static ExtractManager create(EDatabaseTypeName dbType){
  if (dbType == null) {
    return null;
  }
switch (dbType) {
case ACCESS:
    return new AccessExtractManager();
case AS400:
  return new AS400ExtractManager();
case GENERAL_JDBC:
return new GeneralJDBCExtractManager();
case HIVE:
return new HiveExtractManager();
case HSQLDB:
case HSQLDB_SERVER:
case HSQLDB_WEBSERVER:
case HSQLDB_IN_PROGRESS:
return new HSQLDBExtractManager(dbType);
case IBMDB2:
case IBMDB2ZOS:
return new IBMDB2ExtractManager(dbType);
case JAVADB:
case JAVADB_EMBEDED:
case JAVADB_DERBYCLIENT:
case JAVADB_JCCJDBC:
return new JAVADBExtractManager(dbType);
case MSSQL:
case MSSQL05_08:
return new MSSQLExtractManager(dbType);
case MYSQL:
return new MySQLExtractManager();
case ORACLEFORSID:
case ORACLESN:
case ORACLE_CUSTOM:
case ORACLE_OCI:
return new OracleExtractManager(dbType);
case TERADATA:
return new TeradataExtractManager();
default :
return new ExtractManager(dbType);
}
}","public static ExtractManager create(EDatabaseTypeName dbType){
  if (dbType == null) {
    return null;
  }
switch (dbType) {
case ACCESS:
    return new AccessExtractManager();
case AS400:
  return new AS400ExtractManager();
case GENERAL_JDBC:
return new GeneralJDBCExtractManager();
case HIVE:
return new HiveExtractManager();
case IMPALA:
return new ImpalaExtractManager();
case HSQLDB:
case HSQLDB_SERVER:
case HSQLDB_WEBSERVER:
case HSQLDB_IN_PROGRESS:
return new HSQLDBExtractManager(dbType);
case IBMDB2:
case IBMDB2ZOS:
return new IBMDB2ExtractManager(dbType);
case JAVADB:
case JAVADB_EMBEDED:
case JAVADB_DERBYCLIENT:
case JAVADB_JCCJDBC:
return new JAVADBExtractManager(dbType);
case MSSQL:
case MSSQL05_08:
return new MSSQLExtractManager(dbType);
case MYSQL:
return new MySQLExtractManager();
case ORACLEFORSID:
case ORACLESN:
case ORACLE_CUSTOM:
case ORACLE_OCI:
return new OracleExtractManager(dbType);
case TERADATA:
return new TeradataExtractManager();
default :
return new ExtractManager(dbType);
}
}",0.9758308157099698
125678,"@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=extractMeta.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=extractMeta.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=extractMeta.getConn().createStatement();
          extractMeta.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(metadataConn);
      for (      String filter : tableNameFilter) {
        tempListTables=dbInstance.fillAll(pack,dbMetaData,metadataConn,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=dbInstance.fillAll(pack,dbMetaData,metadataConn,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    String driverClass=metadataConn.getDriverClass();
    if (conn != null) {
      ConnectionUtils.closeConnection(conn);
    }
    if (driver != null) {
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}","@Override public Object[] getChildren(Object parentElement){
  TableNode tableNode=(TableNode)parentElement;
  List<TableNode> child=tableNode.getChildren();
  boolean extended=false;
  if (!child.isEmpty()) {
    for (    TableNode node : child) {
      if (node.getType() == TableNode.TABLE) {
        extended=true;
        break;
      }
    }
  }
  if (extended) {
    return child.toArray();
  }
  IMetadataConnection metadataConn=tableNode.getMetadataConn();
  Connection conn=null;
  Driver driver=null;
  DatabaseMetaData dbMetaData=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConn);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (EDatabaseTypeName.IMPALA.getDisplayName().equalsIgnoreCase(metadataConn.getDbType())) {
    try {
      dbMetaData=ImpalaConnectionManager.getInstance().createConnection(metadataConn).getMetaData();
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else {
    List list=extractMeta.getConnectionList(metadataConn);
    if (list != null && !list.isEmpty()) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          conn=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          driver=(DriverShim)list.get(i);
        }
      }
    }
    dbMetaData=extractMeta.getDatabaseMetaData(conn,metadataConn.getDbType(),metadataConn.isSqlMode(),metadataConn.getDatabase());
  }
  int type=tableNode.getType();
  orgomg.cwm.objectmodel.core.Package pack=null;
  List<MetadataTable> tableList=new ArrayList<MetadataTable>();
  if (type == tableNode.CATALOG) {
    if (tableNode.getChildren().isEmpty()) {
      pack=tableNode.getCatalog();
    }
  }
 else   if (type == tableNode.SCHEMA) {
    pack=tableNode.getSchema();
  }
  try {
    if (pack != null) {
      TableInfoParameters paras=tableNode.getParas();
      List<ETableTypes> paraType=paras.getTypes();
      Set<String> availableTableTypes=new HashSet<String>();
      for (      ETableTypes tableType : paraType) {
        availableTableTypes.add(tableType.getName());
      }
      Set<String> tableNameFilter=null;
      if (!paras.isUsedName()) {
        tableNameFilter=new HashSet<String>();
        if (paras.getSqlFiter() != null && !""String_Node_Str"".equals(paras.getSqlFiter())) {
          Statement stmt=extractMeta.getConn().createStatement();
          extractMeta.setQueryStatementTimeout(stmt);
          ResultSet rsTables=stmt.executeQuery(paras.getSqlFiter());
          while (rsTables.next()) {
            String nameKey=rsTables.getString(1).trim();
            tableNameFilter.add(nameKey);
          }
          rsTables.close();
          stmt.close();
        }
      }
 else {
        tableNameFilter=paras.getNameFilters();
      }
      List<MetadataTable> tempListTables=new ArrayList<MetadataTable>();
      MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(metadataConn);
      for (      String filter : tableNameFilter) {
        tempListTables=dbInstance.fillAll(pack,dbMetaData,metadataConn,null,filter,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
      if (tableNameFilter.isEmpty()) {
        tempListTables=dbInstance.fillAll(pack,dbMetaData,metadataConn,null,null,availableTableTypes.toArray(new String[]{}));
        for (        MetadataTable table : tempListTables) {
          boolean contains=false;
          for (          MetadataTable inListTable : tableList) {
            if (inListTable.getName().equals(table.getName())) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            tableList.add(table);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    String dbType=metadataConn.getDbType();
    String driverClass=metadataConn.getDriverClass();
    if (conn != null) {
      ConnectionUtils.closeConnection(conn);
    }
    if (driver != null) {
      if ((driverClass != null && driverClass.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) || (dbType != null && (dbType.equals(EDatabaseTypeName.JAVADB_EMBEDED.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_DERBYCLIENT.getDisplayName()) || dbType.equals(EDatabaseTypeName.JAVADB_JCCJDBC.getDisplayName())|| dbType.equals(EDatabaseTypeName.HSQLDB_IN_PROGRESS.getDisplayName())))) {
        try {
          driver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
  transferToTableNode(tableList,tableNode);
  List<TableNode> children=tableNode.getChildren();
  return children.toArray();
}",0.9602674307545368
125679,"@Override public IFile getRoutinesFile(Item item) throws SystemException {
  if (item instanceof RoutineItem) {
    final RoutineItem routineItem=(RoutineItem)item;
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(ProjectManager.getInstance().getProject(routineItem).getTechnicalLabel());
    IFolder folder=project.getFolder(ERepositoryObjectType.getFolderName(ERepositoryObjectType.getItemType(routineItem)));
    final String folderPath=RepositoryNodeUtilities.getPath(routineItem.getProperty().getId()).toString();
    if (folderPath != null && !folderPath.trim().isEmpty()) {
      folder=folder.getFolder(folderPath);
    }
    final String fileName=routineItem.getProperty().getLabel() + '_' + routineItem.getProperty().getVersion()+ JavaUtils.ITEM_EXTENSION;
    return folder.getFile(fileName);
  }
  return null;
}","@Override public IFile getRoutinesFile(Item item) throws SystemException {
  if (item instanceof RoutineItem) {
    final RoutineItem routineItem=(RoutineItem)item;
    final IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(ProjectManager.getInstance().getProject(routineItem).getTechnicalLabel());
    IFolder folder=project.getFolder(ERepositoryObjectType.getFolderName(ERepositoryObjectType.getItemType(routineItem)));
    IPath ipath=RepositoryNodeUtilities.getPath(routineItem.getProperty().getId());
    if (ipath == null)     return null;
    final String folderPath=ipath.toString();
    if (folderPath != null && !folderPath.trim().isEmpty()) {
      folder=folder.getFolder(folderPath);
    }
    final String fileName=routineItem.getProperty().getLabel() + '_' + routineItem.getProperty().getVersion()+ JavaUtils.ITEM_EXTENSION;
    return folder.getFile(fileName);
  }
  return null;
}",0.9418407679277244
125680,"/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=context.getName();
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),contextName,isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_APPLY_CONTEXT_TO_CHILDREN),isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()).toLowerCase());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobType,jobInfoProp.getProperty(JobInfoProperties.JOB_TYPE));
  if (process instanceof IProcess2) {
    String framework=(String)((IProcess2)process).getAdditionalProperties().get(""String_Node_Str"");
    if (framework == null) {
      framework=""String_Node_Str"";
    }
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.Framework,framework);
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  addScriptAddition(windowsScriptAdditionValue,this.getWindowsScriptAddition());
  addScriptAddition(unixScriptAdditionValue,this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else         if (value.contains(""String_Node_Str"")) {
          contextParamPart.append(TalendQuoteUtils.addQuotesIfNotExist(value));
        }
 else {
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=jProcessor.getJVMArgs();
  StringBuffer jvmArgsStr=new StringBuffer();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg);
      jvmArgsStr.append(' ');
    }
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobJvmArgs,jvmArgsStr.toString());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,windowsScriptAdditionValue.toString());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,unixScriptAdditionValue.toString());
  String finalNameStr=JavaResourcesHelper.getJobJarName(property.getLabel(),property.getVersion());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameStr);
}","/** 
 * Add the properties for job.
 */
@Override @SuppressWarnings(""String_Node_Str"") protected void addProperties(Model model){
  super.addProperties(model);
  Properties properties=model.getProperties();
  final IProcessor jProcessor=getJobProcessor();
  final IProcess process=jProcessor.getProcess();
  final IContext context=jProcessor.getContext();
  final Property property=jProcessor.getProperty();
  String jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(property.getItem());
  String jobClassPackage=JavaResourcesHelper.getJobClassPackageName(property.getItem());
  String jobFolderName=JavaResourcesHelper.getJobFolderName(property.getLabel(),property.getVersion());
  Project project=ProjectManager.getInstance().getProject(property);
  if (project == null) {
    project=ProjectManager.getInstance().getCurrentProject().getEmfProject();
  }
  String mainProjectBranch=ProjectManager.getInstance().getMainProjectBranch(project);
  if (mainProjectBranch == null) {
    mainProjectBranch=SVNConstant.NAME_TRUNK;
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPath,jobClassPackageFolder);
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobPackage,jobClassPackage);
  String contextName=getOptionString(TalendProcessArgumentConstant.ARG_CONTEXT_NAME);
  if (contextName == null) {
    contextName=context.getName();
  }
  JobInfoProperties jobInfoProp=new JobInfoProperties((ProcessItem)property.getItem(),contextName,isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_APPLY_CONTEXT_TO_CHILDREN),isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectName,jobInfoProp.getProperty(JobInfoProperties.PROJECT_NAME,project.getTechnicalLabel()).toLowerCase());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectId,jobInfoProp.getProperty(JobInfoProperties.PROJECT_ID,String.valueOf(project.getId())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProjectBranch,jobInfoProp.getProperty(JobInfoProperties.BRANCH,mainProjectBranch));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobName,jobInfoProp.getProperty(JobInfoProperties.JOB_NAME,property.getLabel()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobVersion,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobDate,jobInfoProp.getProperty(JobInfoProperties.DATE,JobInfoProperties.DATAFORMAT.format(new Date())));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobContext,jobInfoProp.getProperty(JobInfoProperties.CONTEXT_NAME,context.getName()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobId,jobInfoProp.getProperty(JobInfoProperties.JOB_ID,process.getId()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobType,jobInfoProp.getProperty(JobInfoProperties.JOB_TYPE));
  if (process instanceof IProcess2) {
    String framework=(String)((IProcess2)process).getAdditionalProperties().get(""String_Node_Str"");
    if (framework == null) {
      framework=""String_Node_Str"";
    }
    checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.Framework,framework);
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobClass,""String_Node_Str"");
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobStat,jobInfoProp.getProperty(JobInfoProperties.ADD_STATIC_CODE,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobApplyContextToChildren,jobInfoProp.getProperty(JobInfoProperties.APPLY_CONTEXY_CHILDREN,Boolean.FALSE.toString()));
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.ProductVersion,jobInfoProp.getProperty(JobInfoProperties.COMMANDLINE_VERSION,VersionUtils.getVersion()));
  StringBuffer windowsScriptAdditionValue=new StringBuffer(50);
  StringBuffer unixScriptAdditionValue=new StringBuffer(50);
  addScriptAddition(windowsScriptAdditionValue,this.getWindowsScriptAddition());
  addScriptAddition(unixScriptAdditionValue,this.getUnixScriptAddition());
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_CONTEXT)) {
    final String contextPart=TalendProcessArgumentConstant.CMD_ARG_CONTEXT_NAME + contextName;
    addScriptAddition(windowsScriptAdditionValue,contextPart);
    addScriptAddition(unixScriptAdditionValue,contextPart);
  }
  List paramsList=ProcessUtils.getOptionValue(getArgumentsMap(),TalendProcessArgumentConstant.ARG_CONTEXT_PARAMS,(List)null);
  if (paramsList != null && !paramsList.isEmpty()) {
    StringBuffer contextParamPart=new StringBuffer(100);
    for (    Object param : paramsList) {
      if (param instanceof ContextParameterType) {
        ContextParameterType contextParamType=(ContextParameterType)param;
        contextParamPart.append(' ');
        contextParamPart.append(TalendProcessArgumentConstant.CMD_ARG_CONTEXT_PARAMETER);
        contextParamPart.append(' ');
        contextParamPart.append(contextParamType.getName());
        contextParamPart.append('=');
        String value=contextParamType.getRawValue();
        if (value == null) {
          contextParamPart.append((String)null);
        }
 else {
          value=TalendQuoteUtils.addPairQuotesIfNotExist(value);
          contextParamPart.append(value);
        }
      }
    }
    if (contextParamPart.length() > 0) {
      addScriptAddition(windowsScriptAdditionValue,contextParamPart.toString());
      addScriptAddition(unixScriptAdditionValue,contextParamPart.toString());
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_LOG4J) && isOptionChecked(TalendProcessArgumentConstant.ARG_NEED_LOG4J_LEVEL)) {
    String log4jLevel=getOptionString(TalendProcessArgumentConstant.ARG_LOG4J_LEVEL);
    if (StringUtils.isNotEmpty(log4jLevel)) {
      String log4jLevelPart=TalendProcessArgumentConstant.CMD_ARG_LOG4J_LEVEL + log4jLevel;
      addScriptAddition(windowsScriptAdditionValue,log4jLevelPart);
      addScriptAddition(unixScriptAdditionValue,log4jLevelPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_STATS)) {
    String statsPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_STATS);
    if (StringUtils.isNotEmpty(statsPort)) {
      String statsPortPart=TalendProcessArgumentConstant.CMD_ARG_STATS_PORT + statsPort;
      addScriptAddition(windowsScriptAdditionValue,statsPortPart);
      addScriptAddition(unixScriptAdditionValue,statsPortPart);
    }
  }
  if (isOptionChecked(TalendProcessArgumentConstant.ARG_ENABLE_TRACS)) {
    String tracPort=getOptionString(TalendProcessArgumentConstant.ARG_PORT_TRACS);
    if (StringUtils.isNotEmpty(tracPort)) {
      String tracPortPart=TalendProcessArgumentConstant.CMD_ARG_TRACE_PORT + tracPort;
      addScriptAddition(windowsScriptAdditionValue,tracPortPart);
      addScriptAddition(unixScriptAdditionValue,tracPortPart);
    }
  }
  String watchParam=getOptionString(TalendProcessArgumentConstant.ARG_ENABLE_WATCH);
  if (StringUtils.isNotEmpty(watchParam)) {
    addScriptAddition(windowsScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
    addScriptAddition(unixScriptAdditionValue,TalendProcessArgumentConstant.CMD_ARG_WATCH);
  }
  String[] jvmArgs=jProcessor.getJVMArgs();
  StringBuffer jvmArgsStr=new StringBuffer();
  if (jvmArgs != null && jvmArgs.length > 0) {
    for (    String arg : jvmArgs) {
      jvmArgsStr.append(arg);
      jvmArgsStr.append(' ');
    }
  }
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobJvmArgs,jvmArgsStr.toString());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatClasspath,this.getWindowsClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobBatAddition,windowsScriptAdditionValue.toString());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShClasspath,this.getUnixClasspath());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobShAddition,unixScriptAdditionValue.toString());
  String finalNameStr=JavaResourcesHelper.getJobJarName(property.getLabel(),property.getVersion());
  checkPomProperty(properties,""String_Node_Str"",ETalendMavenVariables.JobFinalName,finalNameStr);
}",0.9933728636205092
125681,"/** 
 * DOC nrousseau Comment method ""getParentResourceNode"".
 * @param delta
 * @param resource
 * @return
 */
private ResourceNode getParentResourceNode(IResourceDelta delta,IResource resource){
  IRepositoryNode topNode=getTopNodeFromResourceDelta(delta);
  ResourceNode resourceNode=new ResourceNode();
  resourceNode.setPath(resource.getParent().getFullPath().toPortableString());
  resourceNode.setTopNode(topNode);
  resourceNode.setTopNodePath(getTopLevelNodePathForRefresh((RepositoryNode)topNode).toPortableString());
  ((RepositoryNode)topNode).setInitialized(false);
  return resourceNode;
}","/** 
 * DOC nrousseau Comment method ""getParentResourceNode"".
 * @param delta
 * @param resource
 * @return
 */
private ResourceNode getParentResourceNode(IResourceDelta delta,IResource resource){
  IRepositoryNode topNode=getTopNodeFromResourceDelta(delta);
  ResourceNode resourceNode=new ResourceNode();
  resourceNode.setPath(resource.getParent().getFullPath().toPortableString());
  resourceNode.setTopNode(topNode);
  resourceNode.setTopNodePath(getTopLevelNodePathForRefresh((RepositoryNode)topNode).toPortableString());
  ((RepositoryNode)topNode).setInitialized(false);
  topNode.getChildren().clear();
  return resourceNode;
}",0.973365617433414
125682,"@Override public boolean contains(String jarName){
  return list().contains(jarName);
}","@Override public boolean contains(String jarName){
  Set<String> list=list();
  boolean contained=list.contains(jarName);
  if (!contained) {
    try {
      File jarFile=getJarFile(jarName);
      if (jarFile != null) {
        list.add(jarName);
        contained=true;
      }
    }
 catch (    MalformedURLException e) {
      contained=false;
    }
  }
  return contained;
}",0.2832618025751073
125683,"/** 
 * collect all vesions to one ModuleToInstall to don't display several times for the same jar in the dialog if need to download all versions
 */
public void collectModulesWithJarName(List<ModuleToInstall> toInstall){
  List<ModuleToInstall> manualInstall=new ArrayList<ModuleToInstall>();
  Map<String,ModuleToInstall> nameAndModuleMap=new HashMap<String,ModuleToInstall>();
  for (  ModuleToInstall module : toInstall) {
    if (MavenConstants.DOWNLOAD_MANUAL.equals(module.getDistribution())) {
      manualInstall.add(module);
    }
 else     if (module.getMavenUri() != null) {
      final ModuleToInstall moduleToInstall=nameAndModuleMap.get(module.getName());
      if (moduleToInstall != null) {
        moduleToInstall.getMavenUris().add(module.getMavenUri());
      }
 else {
        module.getMavenUris().add(module.getMavenUri());
        nameAndModuleMap.put(module.getName(),module);
      }
    }
  }
  toInstall.clear();
  toInstall.addAll(nameAndModuleMap.values());
  toInstall.addAll(manualInstall);
}","/** 
 * collect all vesions to one ModuleToInstall to don't display several times for the same jar in the dialog if need to download all versions
 */
public void collectModulesWithJarName(List<ModuleToInstall> toInstall){
  List<ModuleToInstall> manualInstall=new ArrayList<ModuleToInstall>();
  Map<String,ModuleToInstall> nameAndModuleMap=new HashMap<String,ModuleToInstall>();
  for (  ModuleToInstall module : toInstall) {
    ModuleToInstall moduleToInstall=nameAndModuleMap.get(module.getName());
    if (!MavenConstants.DOWNLOAD_MANUAL.equals(module.getDistribution()) && module.getMavenUri() != null) {
      if (moduleToInstall == null) {
        moduleToInstall=module;
        nameAndModuleMap.put(module.getName(),module);
      }
      moduleToInstall.getMavenUris().add(module.getMavenUri());
    }
  }
  for (  ModuleToInstall module : toInstall) {
    if (MavenConstants.DOWNLOAD_MANUAL.equals(module.getDistribution())) {
      ModuleToInstall moduleToInstall=nameAndModuleMap.get(module.getName());
      if (moduleToInstall == null) {
        nameAndModuleMap.put(module.getName(),module);
      }
    }
  }
  toInstall.clear();
  toInstall.addAll(nameAndModuleMap.values());
  toInstall.addAll(manualInstall);
}",0.541019955654102
125684,"public IStatus shareLibs(Job job,IProgressMonitor monitor){
  ArtifactsDeployer deployer=new ArtifactsDeployer();
  Map<ModuleNeeded,File> filesToShare=null;
  IStatus status=Status.OK_STATUS;
  try {
    if (PluginChecker.isSVNProviderPluginLoaded()) {
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
      if (service != null && service.isSvnLibSetupOnTAC()) {
        if (!factory.isLocalConnectionProvider() && factory.getRepositoryContext() != null && !factory.getRepositoryContext().isOffline()) {
          service.syncLibs(monitor);
          setJobName(job,Messages.getString(""String_Node_Str"",TYPE_SVN));
          int shareLimit=5;
          int limit=shareLimit;
          filesToShare=getFilesToShare(monitor);
          if (filesToShare == null) {
            return Status.CANCEL_STATUS;
          }
          SubMonitor mainSubMonitor=SubMonitor.convert(monitor,filesToShare.size());
          Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
          int index=0;
          while (iterator.hasNext()) {
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            List<String> jars=new ArrayList<String>();
            String jarName=""String_Node_Str"";
            while (index < limit && index < filesToShare.size()) {
              ModuleNeeded next=iterator.next();
              File file=filesToShare.get(next);
              String installLocation=getStorageDirectory().getAbsolutePath();
              File target=new File(installLocation,next.getModuleName());
              if (!target.exists()) {
                FilesUtils.copyFile(file,target);
                jars.add(target.getAbsolutePath());
                deployToLocalMaven(deployer,file,next);
                jarName+=next.getModuleName();
                if (index < limit - 1) {
                  jarName+=""String_Node_Str"";
                }
              }
              index++;
            }
            limit+=shareLimit;
            try {
              if (jars.size() > 0) {
                mainSubMonitor.setTaskName(Messages.getString(""String_Node_Str"",jarName));
                service.deployNewJar(jars);
              }
              mainSubMonitor.worked(limit);
            }
 catch (            Exception e) {
              ExceptionHandler.process(new Exception(""String_Node_Str"" + jarName + ""String_Node_Str"",e));
              status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,""String_Node_Str"" + jarName + ""String_Node_Str"",e);
              continue;
            }
          }
        }
      }
 else {
        int searchLimit=50;
        setJobName(job,Messages.getString(""String_Node_Str"",TYPE_NEXUS));
        final List<MavenArtifact> searchResults=new ArrayList<MavenArtifact>();
        TalendLibsServerManager instance=TalendLibsServerManager.getInstance();
        NexusServerBean customServer=instance.getCustomNexusServer();
        if (customServer != null && customServer.getUserName() != null) {
          filesToShare=getFilesToShare(monitor);
          if (filesToShare == null) {
            return Status.CANCEL_STATUS;
          }
          SubMonitor mainSubMonitor=SubMonitor.convert(monitor,filesToShare.size());
          Set<String> groupIds=new HashSet<String>();
          for (          ModuleNeeded module : filesToShare.keySet()) {
            if (module.getMavenUri() != null) {
              MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(module.getMavenUri());
              if (parseMvnUrl != null) {
                groupIds.add(parseMvnUrl.getGroupId());
              }
            }
          }
          for (          String groupId : groupIds) {
            searchResults.addAll(instance.search(customServer.getServer(),customServer.getUserName(),customServer.getPassword(),customServer.getRepositoryId(),groupId,null,null));
            searchResults.addAll(instance.search(customServer.getServer(),customServer.getUserName(),customServer.getPassword(),customServer.getSnapshotRepId(),groupId,null,null));
          }
          int limit=searchLimit;
          int shareIndex=0;
          Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
          while (iterator.hasNext()) {
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            shareIndex++;
            if (shareIndex == limit) {
              limit+=searchLimit;
            }
            ModuleNeeded next=iterator.next();
            File file=filesToShare.get(next);
            String pomPath=file.getParent();
            String name=file.getName();
            MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(next.getMavenUri(true));
            if (artifact == null) {
              continue;
            }
            boolean eixst=false;
            for (            MavenArtifact remoteAtifact : searchResults) {
              String groupId=artifact.getGroupId();
              String artifactId=artifact.getArtifactId();
              String version=artifact.getVersion();
              String rGroup=remoteAtifact.getGroupId();
              String rArtifact=remoteAtifact.getArtifactId();
              String rVersion=remoteAtifact.getVersion();
              if (groupId != null && artifactId != null && version != null && groupId.equals(rGroup) && artifactId.equals(rArtifact) && version.equals(rVersion)) {
                eixst=true;
                break;
              }
            }
            if (eixst) {
              continue;
            }
            mainSubMonitor.setTaskName(Messages.getString(""String_Node_Str"",name));
            int indexOf=name.lastIndexOf(""String_Node_Str"");
            if (indexOf != -1) {
              pomPath=pomPath + ""String_Node_Str"" + name.substring(0,indexOf)+ ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
            }
            try {
              deployToLocalMaven(deployer,file,next);
              deployer.installToRemote(file,artifact,artifact.getType());
              File pomFile=new File(pomPath);
              if (pomFile.exists()) {
                deployer.installToRemote(pomFile,artifact,MavenConstants.PACKAGING_POM);
              }
              mainSubMonitor.worked(1);
            }
 catch (            Exception e) {
              ExceptionHandler.process(new Exception(""String_Node_Str"" + name + ""String_Node_Str"",e));
              status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,""String_Node_Str"" + name + ""String_Node_Str"",e);
              continue;
            }
          }
        }
      }
    }
    if (filesToShare == null) {
      filesToShare=getFilesToShare(monitor);
      Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
      while (iterator.hasNext()) {
        ModuleNeeded next=iterator.next();
        File file=filesToShare.get(next);
        deployToLocalMaven(deployer,file,next);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,e.getMessage(),e);
  }
  return status;
}","public IStatus shareLibs(Job job,IProgressMonitor monitor){
  ArtifactsDeployer deployer=new ArtifactsDeployer();
  Map<ModuleNeeded,File> filesToShare=null;
  IStatus status=Status.OK_STATUS;
  try {
    if (PluginChecker.isSVNProviderPluginLoaded()) {
      IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      ISVNProviderServiceInCoreRuntime service=(ISVNProviderServiceInCoreRuntime)GlobalServiceRegister.getDefault().getService(ISVNProviderServiceInCoreRuntime.class);
      if (service != null && service.isSvnLibSetupOnTAC()) {
        if (!factory.isLocalConnectionProvider() && factory.getRepositoryContext() != null && !factory.getRepositoryContext().isOffline()) {
          service.syncLibs(monitor);
          setJobName(job,Messages.getString(""String_Node_Str"",TYPE_SVN));
          int shareLimit=5;
          int limit=shareLimit;
          filesToShare=getFilesToShare(monitor);
          if (filesToShare == null) {
            return Status.CANCEL_STATUS;
          }
          SubMonitor mainSubMonitor=SubMonitor.convert(monitor,filesToShare.size());
          Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
          int index=0;
          while (iterator.hasNext()) {
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            List<String> jars=new ArrayList<String>();
            String jarName=""String_Node_Str"";
            while (index < limit && index < filesToShare.size()) {
              ModuleNeeded next=iterator.next();
              File file=filesToShare.get(next);
              String installLocation=getStorageDirectory().getAbsolutePath();
              File target=new File(installLocation,next.getModuleName());
              if (!target.exists()) {
                FilesUtils.copyFile(file,target);
                jars.add(target.getAbsolutePath());
                deployToLocalMaven(deployer,file,next);
                jarName+=next.getModuleName();
                if (index < limit - 1) {
                  jarName+=""String_Node_Str"";
                }
              }
              index++;
            }
            limit+=shareLimit;
            try {
              if (jars.size() > 0) {
                mainSubMonitor.setTaskName(Messages.getString(""String_Node_Str"",jarName));
                service.deployNewJar(jars);
              }
              mainSubMonitor.worked(limit);
            }
 catch (            Exception e) {
              ExceptionHandler.process(new Exception(""String_Node_Str"" + jarName + ""String_Node_Str"",e));
              status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,""String_Node_Str"" + jarName + ""String_Node_Str"",e);
              continue;
            }
          }
        }
      }
 else {
        int searchLimit=50;
        setJobName(job,Messages.getString(""String_Node_Str"",TYPE_NEXUS));
        final List<MavenArtifact> searchResults=new ArrayList<MavenArtifact>();
        TalendLibsServerManager instance=TalendLibsServerManager.getInstance();
        NexusServerBean customServer=instance.getCustomNexusServer();
        if (customServer != null && customServer.getUserName() != null) {
          filesToShare=getFilesToShare(monitor);
          if (filesToShare == null) {
            return Status.CANCEL_STATUS;
          }
          SubMonitor mainSubMonitor=SubMonitor.convert(monitor,filesToShare.size());
          Set<String> groupIds=new HashSet<String>();
          for (          ModuleNeeded module : filesToShare.keySet()) {
            if (module.getMavenUri() != null) {
              MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(module.getMavenUri());
              if (parseMvnUrl != null) {
                groupIds.add(parseMvnUrl.getGroupId());
              }
            }
          }
          for (          String groupId : groupIds) {
            searchResults.addAll(instance.search(customServer.getServer(),customServer.getUserName(),customServer.getPassword(),customServer.getRepositoryId(),groupId,null,null));
            searchResults.addAll(instance.search(customServer.getServer(),customServer.getUserName(),customServer.getPassword(),customServer.getSnapshotRepId(),groupId,null,null));
          }
          int limit=searchLimit;
          int shareIndex=0;
          Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
          while (iterator.hasNext()) {
            if (monitor.isCanceled()) {
              return Status.CANCEL_STATUS;
            }
            shareIndex++;
            if (shareIndex == limit) {
              limit+=searchLimit;
            }
            ModuleNeeded next=iterator.next();
            File file=filesToShare.get(next);
            String pomPath=file.getParent();
            String name=file.getName();
            MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(next.getMavenUri(true));
            if (artifact == null) {
              continue;
            }
            int indexOf=name.lastIndexOf(""String_Node_Str"");
            if (indexOf != -1) {
              pomPath=pomPath + ""String_Node_Str"" + name.substring(0,indexOf)+ ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
            }
 else {
              pomPath=pomPath + name + ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
            }
            File pomFile=new File(pomPath);
            if (!pomFile.exists()) {
              File generatedPom=new File(PomUtil.generatePom(artifact));
              FilesUtils.copyFile(generatedPom,pomFile);
            }
            boolean eixst=false;
            for (            MavenArtifact remoteAtifact : searchResults) {
              String groupId=artifact.getGroupId();
              String artifactId=artifact.getArtifactId();
              String version=artifact.getVersion();
              String rGroup=remoteAtifact.getGroupId();
              String rArtifact=remoteAtifact.getArtifactId();
              String rVersion=remoteAtifact.getVersion();
              if (groupId != null && artifactId != null && version != null && groupId.equals(rGroup) && artifactId.equals(rArtifact) && version.equals(rVersion)) {
                eixst=true;
                break;
              }
            }
            if (eixst) {
              continue;
            }
            mainSubMonitor.setTaskName(Messages.getString(""String_Node_Str"",name));
            try {
              deployToLocalMaven(deployer,file,next);
              deployer.installToRemote(file,artifact,artifact.getType());
              deployer.installToRemote(pomFile,artifact,MavenConstants.PACKAGING_POM);
              mainSubMonitor.worked(1);
            }
 catch (            Exception e) {
              ExceptionHandler.process(new Exception(""String_Node_Str"" + name + ""String_Node_Str"",e));
              status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,""String_Node_Str"" + name + ""String_Node_Str"",e);
              continue;
            }
          }
        }
      }
    }
    if (filesToShare == null) {
      filesToShare=getFilesToShare(monitor);
      Iterator<ModuleNeeded> iterator=filesToShare.keySet().iterator();
      while (iterator.hasNext()) {
        ModuleNeeded next=iterator.next();
        File file=filesToShare.get(next);
        deployToLocalMaven(deployer,file,next);
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
    status=new Status(IStatus.ERROR,""String_Node_Str"",IStatus.ERROR,e.getMessage(),e);
  }
  return status;
}",0.8352758876237957
125685,"/** 
 * DOC nrousseau Comment method ""resolveJar"".
 * @param jarNeeded
 * @param jarFile
 * @param manager
 * @param customNexusServer
 * @param uri
 * @return
 * @throws Exception
 * @throws IOException
 */
public File resolveJar(TalendLibsServerManager manager,final NexusServerBean customNexusServer,String uri) throws Exception, IOException {
  File resolvedFile=null;
  if (!isLocalJarSameAsNexus(manager,customNexusServer,uri)) {
    resolvedFile=manager.getMavenResolver().resolve(uri);
  }
  if (resolvedFile != null) {
    final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
    statusMap.put(uri,ELibraryInstallStatus.INSTALLED);
    mavenJarInstalled.put(uri,resolvedFile.getAbsolutePath());
  }
  updateLastResolveDate(uri);
  return resolvedFile;
}","/** 
 * DOC nrousseau Comment method ""resolveJar"".
 * @param jarNeeded
 * @param jarFile
 * @param manager
 * @param customNexusServer
 * @param uri
 * @return
 * @throws Exception
 * @throws IOException
 */
public File resolveJar(TalendLibsServerManager manager,final NexusServerBean customNexusServer,String uri) throws Exception, IOException {
  File resolvedFile=null;
  if (!isLocalJarSameAsNexus(manager,customNexusServer,uri)) {
    resolvedFile=manager.getMavenResolver().resolve(uri);
  }
  if (resolvedFile != null) {
    final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
    statusMap.put(uri,ELibraryInstallStatus.INSTALLED);
    mavenJarInstalled.put(uri,resolvedFile.getAbsolutePath());
  }
  updateLastResolveDate(uri);
  if (resolvedFile != null) {
    try {
      String pomPath=resolvedFile.getParent();
      String name=resolvedFile.getName();
      int indexOf=name.lastIndexOf(""String_Node_Str"");
      if (indexOf != -1) {
        pomPath=pomPath + ""String_Node_Str"" + name.substring(0,indexOf)+ ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
 else {
        pomPath=pomPath + name + ""String_Node_Str""+ MavenConstants.PACKAGING_POM;
      }
      File pomFile=new File(pomPath);
      if (!pomFile.exists()) {
        MavenArtifact parseMvnUrl=MavenUrlHelper.parseMvnUrl(uri);
        File generatedPom=new File(PomUtil.generatePom(parseMvnUrl));
        FilesUtils.copyFile(generatedPom,pomFile);
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
  return resolvedFile;
}",0.6529064869418703
125686,"private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws SQLException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
    }
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}","private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws SQLException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
 else     if (StringUtils.isNumeric(mapRTicketDuration)) {
      desiredTicketDurInSecs=Long.valueOf(mapRTicketDuration) + 'L';
    }
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}",0.9575569358178054
125687,"public static DynamicClassLoader getClassLoader(String index,ClassLoader parentClassLoader){
  if (classLoadersMap == null) {
    init();
  }
  DynamicClassLoader classLoader=classLoadersMap.get(index);
  if (classLoader == null) {
    classLoader=findLoader(index,parentClassLoader,true);
  }
  return classLoader;
}","public static DynamicClassLoader getClassLoader(IHDistributionVersion hdVersion){
  String index=""String_Node_Str"" + KEY_SEPARATOR + hdVersion.getDistribution().getName()+ KEY_SEPARATOR+ hdVersion.getVersion();
  List<ModuleNeeded> modulesNeeded=hdVersion.getModulesNeeded();
  Set<String> libraries=new HashSet<String>();
  for (  ModuleNeeded m : modulesNeeded) {
    libraries.add(m.getModuleName());
  }
  DynamicClassLoader hdClassLoader=getCustomClassLoader(index,libraries);
  return hdClassLoader;
}",0.145631067961165
125688,"private ClassLoader getClassLoader(IMetadataConnection metadataConn){
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null) {
    String distribution=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(distribution,false);
    if (impalaDistribution != null) {
      String impalaIndex=EDatabaseTypeName.IMPALA.getProduct() + ':' + impalaDistribution.getName();
      if (impalaDistribution.useCustom()) {
        String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
        String index=""String_Node_Str"" + impalaIndex + ':'+ metadataConn.getId();
        DynamicClassLoader classLoader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
        if (classLoader != null) {
          return classLoader;
        }
      }
 else {
        IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(version,false);
        if (impalaVersion != null) {
          DynamicClassLoader classLoader=ClassLoaderFactory.getClassLoader(impalaIndex + ':' + impalaVersion.getVersion());
          if (classLoader != null) {
            return classLoader;
          }
        }
      }
    }
  }
  return this.getClass().getClassLoader();
}","private ClassLoader getClassLoader(IMetadataConnection metadataConn){
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null) {
    String distribution=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_DISTRIBUTION);
    String version=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_IMPALA_VERSION);
    IHDistribution impalaDistribution=hadoopService.getImpalaDistributionManager().getDistribution(distribution,false);
    if (impalaDistribution != null) {
      String impalaIndex=EDatabaseTypeName.IMPALA.getProduct() + ClassLoaderFactory.KEY_SEPARATOR + impalaDistribution.getName();
      if (impalaDistribution.useCustom()) {
        String jarsStr=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HADOOP_CUSTOM_JARS);
        String index=""String_Node_Str"" + ClassLoaderFactory.KEY_SEPARATOR + impalaIndex+ ClassLoaderFactory.KEY_SEPARATOR+ metadataConn.getId();
        DynamicClassLoader classLoader=ClassLoaderFactory.getCustomClassLoader(index,jarsStr);
        if (classLoader != null) {
          return classLoader;
        }
      }
 else {
        IHDistributionVersion impalaVersion=impalaDistribution.getHDVersion(version,false);
        if (impalaVersion != null) {
          DynamicClassLoader classLoader=ClassLoaderFactory.getClassLoader(impalaIndex + ClassLoaderFactory.KEY_SEPARATOR + impalaVersion.getVersion());
          if (classLoader == null) {
            classLoader=ClassLoaderFactory.getClassLoader(impalaVersion);
          }
          if (classLoader != null) {
            return classLoader;
          }
        }
      }
    }
  }
  return this.getClass().getClassLoader();
}",0.9174484052532832
125689,"/** 
 * DOC cantoine : Check connexion from IMetadataConnection comment. Detailled comment.
 * @return isValide
 */
public boolean check(IMetadataConnection metadataConnection,StringBuffer retProposedSchema,boolean... onlyIfNeeded){
  messageException=null;
  ConnectionStatus testConnection=null;
  if (metadataConnection == null) {
    return false;
  }
  if (onlyIfNeeded != null && onlyIfNeeded.length > 0 && onlyIfNeeded[0] == true) {
    if (metadataConnection.equals(oldConnection)) {
      return true;
    }
  }
  if (metadataConnection.getDbRootPath() != null && !metadataConnection.getDbRootPath().equals(""String_Node_Str"")) {
    setDbRootPath(metadataConnection.getDbRootPath());
  }
  try {
    EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
    if (type.isUseProvider()) {
      IDBMetadataProvider extractorToUse=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
      if (extractorToUse != null) {
        testConnection=extractorToUse.testConnection(metadataConnection);
      }
    }
 else     if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
      String key=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      testConnection=new ConnectionStatus();
      testConnection.setResult(false);
      try {
        if (HiveModeInfo.get(key) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        testConnection.setResult(true);
      }
 catch (      Exception e) {
        testConnection.setResult(false);
        log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
      }
    }
 else {
      testConnection=ExtractMetaDataFromDataBase.testConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams(),retProposedSchema);
    }
    oldConnection=metadataConnection;
    isValide=testConnection.getResult();
    messageException=testConnection.getMessageException();
  }
 catch (  Exception e) {
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
  }
  return isValide;
}","/** 
 * DOC cantoine : Check connexion from IMetadataConnection comment. Detailled comment.
 * @return isValide
 */
public boolean check(IMetadataConnection metadataConnection,StringBuffer retProposedSchema,boolean... onlyIfNeeded){
  messageException=null;
  ConnectionStatus testConnection=null;
  if (metadataConnection == null) {
    return false;
  }
  if (onlyIfNeeded != null && onlyIfNeeded.length > 0 && onlyIfNeeded[0] == true) {
    if (metadataConnection.equals(oldConnection)) {
      return true;
    }
  }
  if (metadataConnection.getDbRootPath() != null && !metadataConnection.getDbRootPath().equals(""String_Node_Str"")) {
    setDbRootPath(metadataConnection.getDbRootPath());
  }
  try {
    EDatabaseTypeName type=EDatabaseTypeName.getTypeFromDbType(metadataConnection.getDbType());
    if (type.isUseProvider()) {
      IDBMetadataProvider extractorToUse=ExtractMetaDataFromDataBase.getProviderByDbType(metadataConnection.getDbType());
      if (extractorToUse != null) {
        testConnection=extractorToUse.testConnection(metadataConnection);
      }
    }
 else     if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
      String key=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      testConnection=new ConnectionStatus();
      testConnection.setResult(false);
      try {
        if (HiveModeInfo.get(key) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        testConnection.setResult(true);
      }
 catch (      Exception e) {
        testConnection.setResult(false);
        log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(metadataConnection.getDbType())) {
      testConnection=new ConnectionStatus();
      testConnection.setResult(false);
      try {
        ImpalaConnectionManager.getInstance().checkConnection(metadataConnection);
        testConnection.setResult(true);
      }
 catch (      Exception e) {
        testConnection.setResult(false);
        log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
      }
    }
 else {
      testConnection=ExtractMetaDataFromDataBase.testConnection(metadataConnection.getDbType(),metadataConnection.getUrl(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getSchema(),metadataConnection.getDriverClass(),metadataConnection.getDriverJarPath(),metadataConnection.getDbVersionString(),metadataConnection.getAdditionalParams(),retProposedSchema);
    }
    oldConnection=metadataConnection;
    isValide=testConnection.getResult();
    messageException=testConnection.getMessageException();
  }
 catch (  Exception e) {
    log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + e.toString());
  }
  return isValide;
}",0.8876163206871869
125690,"private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(metadataconnection);
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      dbInstance.fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      dbInstance.fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    SQLException e) {
      e.printStackTrace();
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        dbInstance.fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        dbInstance.fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}","private void updatePackage(IMetadataConnection metadataConnection){
  if (metadataConnection == null) {
    return;
  }
  Driver derbyDriver=null;
  Connection sqlConn=null;
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  String dbType=metadataconnection.getDbType();
  DatabaseConnection dbConn=(DatabaseConnection)metadataconnection.getCurrentConnection();
  MetadataFillFactory dbInstance=MetadataFillFactory.getDBInstance(metadataconnection);
  if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(dbType)) {
    DatabaseMetaData dm=null;
    try {
      dm=HiveConnectionManager.getInstance().extractDatabaseMetaData(metadataConnection);
      dbInstance.fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      dbInstance.fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbType)) {
    Connection conn=null;
    try {
      conn=ImpalaConnectionManager.getInstance().createConnection(metadataConnection);
      DatabaseMetaData dm=conn.getMetaData();
      dbInstance.fillCatalogs(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
      dbInstance.fillSchemas(dbConn,dm,metadataConnection,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
    }
  }
 else {
    List list=MetadataConnectionUtils.getConnection(metadataconnection);
    for (int i=0; i < list.size(); i++) {
      if (list.get(i) instanceof Driver) {
        String driverClass=metadataconnection.getDriverClass();
        if (MetadataConnectionUtils.isDerbyRelatedDb(driverClass,dbType)) {
          derbyDriver=(Driver)list.get(i);
        }
      }
      if (list.get(i) instanceof java.sql.Connection) {
        sqlConn=(java.sql.Connection)list.get(i);
      }
    }
    try {
      if (sqlConn != null) {
        DatabaseMetaData dm=extractMeta.getDatabaseMetaData(sqlConn,dbType,false,metadataconnection.getDatabase());
        dbInstance.fillCatalogs(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,true));
        dbInstance.fillSchemas(dbConn,dm,MetadataConnectionUtils.getPackageFilter(dbConn,dm,false));
      }
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
 finally {
      if (sqlConn != null) {
        ConnectionUtils.closeConnection(sqlConn);
      }
      if (derbyDriver != null) {
        try {
          derbyDriver.connect(""String_Node_Str"",null);
        }
 catch (        SQLException e) {
        }
      }
    }
  }
}",0.4106870229007633
125691,"@Override protected boolean validChildrenJob(JobInfo jobInfo){
  JobInfo fatherJobInfo=null;
  for (  JobInfo lastGeneratedJobInfo : LastGenerationInfo.getInstance().getLastGeneratedjobs()) {
    if (lastGeneratedJobInfo.getJobId().equals(getJobProcessor().getProperty().getId()) && lastGeneratedJobInfo.getJobVersion().equals(getJobProcessor().getProperty().getVersion())) {
      fatherJobInfo=lastGeneratedJobInfo;
      break;
    }
  }
  if (fatherJobInfo != null) {
    fatherJobInfo=fatherJobInfo.getFatherJobInfo();
  }
  while (fatherJobInfo != null) {
    if (fatherJobInfo.getJobId().equals(jobInfo.getJobId()) && fatherJobInfo.getJobVersion().equals(jobInfo.getJobVersion())) {
      return false;
    }
    fatherJobInfo=fatherJobInfo.getFatherJobInfo();
  }
  return jobInfo != null && !jobInfo.isTestContainer();
}","@Override protected boolean validChildrenJob(JobInfo jobInfo){
  JobInfo fatherJobInfo=null;
  for (  JobInfo lastGeneratedJobInfo : LastGenerationInfo.getInstance().getLastGeneratedjobs()) {
    if (lastGeneratedJobInfo.getJobId().equals(getJobProcessor().getProperty().getId()) && lastGeneratedJobInfo.getJobVersion().equals(getJobProcessor().getProperty().getVersion())) {
      fatherJobInfo=lastGeneratedJobInfo;
      break;
    }
  }
  while (fatherJobInfo != null) {
    if (fatherJobInfo.getJobId().equals(jobInfo.getJobId()) && fatherJobInfo.getJobVersion().equals(jobInfo.getJobVersion())) {
      return false;
    }
    fatherJobInfo=fatherJobInfo.getFatherJobInfo();
  }
  return jobInfo != null && !jobInfo.isTestContainer();
}",0.732017823042648
125692,"/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    IRepositoryNode childNode=findItemNode(id,node.getChildren());
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    ITreeContentProvider contentProvider=(ITreeContentProvider)getContentProvider();
    Object[] childrensObject=contentProvider.getElements(node);
    List<IRepositoryNode> childrens=new ArrayList<>();
    for (    Object o : childrensObject) {
      if (o instanceof IRepositoryNode) {
        childrens.add((IRepositoryNode)o);
      }
    }
    IRepositoryNode childNode=findItemNode(id,childrens);
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}",0.6120313862249346
125693,"protected boolean visit(IResourceDelta delta,Collection<ResourceNode> pathToRefresh){
  IResource resource=delta.getResource();
  if (resource.getType() == IResource.ROOT) {
    return true;
  }
  try {
    if (resource.getType() == IResource.PROJECT) {
      if (resource.getProject().hasNature(TalendNature.ID)) {
        return true;
      }
      return false;
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
  if (resource.getType() == IResource.FOLDER) {
    if (FilesUtils.isSVNFolder(resource)) {
      return false;
    }
    IRepositoryNode topNode=getTopNode(delta);
    if (topNode == null) {
      return false;
    }
    ResourceNode resourceNode=new ResourceNode();
    resourceNode.setPath(resource.getParent().getFullPath().toPortableString());
    resourceNode.setTopNode(topNode);
    resourceNode.setTopNodePath(getTopLevelNodePath((RepositoryNode)topNode).toPortableString());
    if (delta.getKind() == IResourceDelta.ADDED) {
      pathToRefresh.add(resourceNode);
      return false;
    }
 else     if (delta.getKind() == IResourceDelta.REMOVED) {
      pathToRefresh.add(resourceNode);
      return false;
    }
    return true;
  }
  if (resource.getType() == IResource.FILE) {
    IRepositoryNode topNode=getTopNode(delta);
    if (topNode == null) {
      return false;
    }
    ResourceNode resourceNode=new ResourceNode();
    resourceNode.setPath(resource.getParent().getFullPath().toPortableString());
    resourceNode.setTopNode(topNode);
    resourceNode.setTopNodePath(getTopLevelNodePath((RepositoryNode)topNode).toPortableString());
    if (delta.getKind() == IResourceDelta.ADDED) {
      pathToRefresh.add(resourceNode);
      ((RepositoryNode)topNode).setInitialized(false);
      topNode.getChildren().clear();
      return false;
    }
 else     if (delta.getKind() == IResourceDelta.REMOVED) {
      pathToRefresh.add(resourceNode);
      ((RepositoryNode)topNode).setInitialized(false);
      topNode.getChildren().clear();
      return false;
    }
 else     if (delta.getKind() == IResourceDelta.CHANGED) {
      XmiResourceManager xrm=new XmiResourceManager();
      if (xrm.isPropertyFile((IFile)resource)) {
        pathToRefresh.add(resourceNode);
        ResourceNode fileResourceNode=new ResourceNode();
        fileResourceNode.setPath(resource.getFullPath().toPortableString());
        pathToRefresh.add(fileResourceNode);
        ((RepositoryNode)topNode).setInitialized(false);
        topNode.getChildren().clear();
      }
      return false;
    }
  }
  return false;
}","protected boolean visit(IResourceDelta delta,Collection<ResourceNode> pathToRefresh){
  IResource resource=delta.getResource();
  if (resource.getType() == IResource.ROOT) {
    return true;
  }
  try {
    if (resource.getType() == IResource.PROJECT) {
      if (resource.getProject().hasNature(TalendNature.ID)) {
        return true;
      }
      return false;
    }
  }
 catch (  CoreException e) {
    ExceptionHandler.process(e);
    return false;
  }
  if (resource.getType() == IResource.FOLDER) {
    if (FilesUtils.isSVNFolder(resource)) {
      return false;
    }
    if (!isValidResourceDelta(delta)) {
      return false;
    }
    if (delta.getKind() == IResourceDelta.ADDED) {
      ResourceNode resourceNode=getParentResourceNode(delta,resource);
      pathToRefresh.add(resourceNode);
      return false;
    }
 else     if (delta.getKind() == IResourceDelta.REMOVED) {
      ResourceNode resourceNode=getParentResourceNode(delta,resource);
      pathToRefresh.add(resourceNode);
      return false;
    }
    return true;
  }
  if (resource.getType() == IResource.FILE) {
    if (!isValidResourceDelta(delta)) {
      return false;
    }
    IRepositoryNode topNode=getTopNodeFromResourceDelta(delta);
    ResourceNode resourceNode=new ResourceNode();
    resourceNode.setPath(resource.getParent().getFullPath().toPortableString());
    resourceNode.setTopNode(topNode);
    resourceNode.setTopNodePath(getTopLevelNodePathForRefresh((RepositoryNode)topNode).toPortableString());
    if (delta.getKind() == IResourceDelta.ADDED) {
      pathToRefresh.add(resourceNode);
      ((RepositoryNode)topNode).setInitialized(false);
      topNode.getChildren().clear();
      return false;
    }
 else     if (delta.getKind() == IResourceDelta.REMOVED) {
      pathToRefresh.add(resourceNode);
      ((RepositoryNode)topNode).setInitialized(false);
      topNode.getChildren().clear();
      return false;
    }
 else     if (delta.getKind() == IResourceDelta.CHANGED) {
      XmiResourceManager xrm=new XmiResourceManager();
      if (xrm.isPropertyFile((IFile)resource)) {
        pathToRefresh.add(resourceNode);
        ResourceNode fileResourceNode=new ResourceNode();
        fileResourceNode.setPath(resource.getFullPath().toPortableString());
        pathToRefresh.add(fileResourceNode);
        ((RepositoryNode)topNode).setInitialized(false);
        topNode.getChildren().clear();
      }
      return false;
    }
  }
  return false;
}",0.8552135054617677
125694,"@Override public void resourceChanged(IResourceChangeEvent event){
  if (viewer == null || resourcevisitors == null || resourcevisitors.isEmpty()) {
    return;
  }
  final Control ctrl=viewer.getControl();
  if (ctrl == null || ctrl.isDisposed()) {
    return;
  }
  final Collection<Runnable> runnables=new HashSet<>();
  final Collection<ResourceNode> pathToRefresh=new HashSet<>();
  for (  IResourceDeltaVisitor visitor : resourcevisitors) {
    if (visitor instanceof RunnableResourceVisitor) {
      ((RunnableResourceVisitor)visitor).setRunnables(runnables);
    }
    if (visitor instanceof ResourceCollectorVisitor) {
      ((ResourceCollectorVisitor)visitor).setRunnables(pathToRefresh);
    }
    try {
      event.getDelta().accept(visitor);
    }
 catch (    CoreException e) {
    }
  }
  if (!runnables.isEmpty()) {
    if (ctrl.getDisplay().getThread() == Thread.currentThread()) {
      runUpdates(runnables);
    }
 else {
      ctrl.getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          Control ctrl2=viewer.getControl();
          if (ctrl2 == null || ctrl2.isDisposed()) {
            return;
          }
          runUpdates(runnables);
        }
      }
);
    }
  }
  if (!pathToRefresh.isEmpty()) {
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        for (        ResourceNode resourceNode : pathToRefresh) {
          XmiResourceManager xrm=new XmiResourceManager();
          if (xrm.isPropertyFile(resourceNode.getPath())) {
            List<IRepositoryNode> nodes=new ArrayList<>();
            for (            Object object : viewer.getExpandedElements()) {
              if (object instanceof IRepositoryNode) {
                nodes.add((IRepositoryNode)object);
              }
            }
            IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(resourceNode.getPath()));
            Property property=xrm.loadProperty(file);
            IRepositoryNode itemNode=findItemNode(property.getId(),nodes);
            if (itemNode != null) {
              IRepositoryViewObject object=itemNode.getObject();
              if (object != null) {
                object.getProperty();
              }
              if (itemNode != null && viewer != null && !viewer.getTree().isDisposed()) {
                viewer.refresh(itemNode,true);
              }
            }
          }
 else {
            String folder=resourceNode.getPath().replace(resourceNode.getTopNodePath(),""String_Node_Str"");
            IRepositoryNode nodeToRefresh=findFolder(folder,resourceNode.getTopNode());
            if (nodeToRefresh != null) {
              if (nodeToRefresh != null && viewer != null && !viewer.getTree().isDisposed()) {
                viewer.refresh(nodeToRefresh,false);
              }
            }
          }
        }
      }
    }
);
  }
}","@Override public void resourceChanged(IResourceChangeEvent event){
  if (viewer == null || resourcevisitors == null || resourcevisitors.isEmpty()) {
    return;
  }
  final Control ctrl=viewer.getControl();
  if (ctrl == null || ctrl.isDisposed()) {
    return;
  }
  final Collection<Runnable> runnables=new HashSet<>();
  final Collection<ResourceNode> pathToRefresh=new HashSet<>();
  for (  IResourceDeltaVisitor visitor : resourcevisitors) {
    if (visitor instanceof RunnableResourceVisitor) {
      ((RunnableResourceVisitor)visitor).setRunnables(runnables);
    }
    if (visitor instanceof ResourceCollectorVisitor) {
      ((ResourceCollectorVisitor)visitor).setRunnables(pathToRefresh);
    }
    try {
      event.getDelta().accept(visitor);
    }
 catch (    CoreException e) {
    }
  }
  if (!runnables.isEmpty()) {
    if (ctrl.getDisplay().getThread() == Thread.currentThread()) {
      runUpdates(runnables);
    }
 else {
      ctrl.getDisplay().asyncExec(new Runnable(){
        @Override public void run(){
          Control ctrl2=viewer.getControl();
          if (ctrl2 == null || ctrl2.isDisposed()) {
            return;
          }
          runUpdates(runnables);
        }
      }
);
    }
  }
  if (!pathToRefresh.isEmpty()) {
    Display.getDefault().asyncExec(new Runnable(){
      @Override public void run(){
        for (        ResourceNode resourceNode : pathToRefresh) {
          XmiResourceManager xrm=new XmiResourceManager();
          if (xrm.isPropertyFile(resourceNode.getPath())) {
            List<IRepositoryNode> nodes=new ArrayList<>();
            for (            Object object : viewer.getExpandedElements()) {
              if (object instanceof IRepositoryNode) {
                nodes.add((IRepositoryNode)object);
              }
            }
            IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(resourceNode.getPath()));
            Property property=xrm.loadProperty(file);
            if (property != null) {
              IRepositoryNode itemNode=findItemNode(property.getId(),nodes);
              if (itemNode != null) {
                IRepositoryViewObject object=itemNode.getObject();
                if (object != null) {
                  object.getProperty();
                }
                if (itemNode != null && viewer != null && !viewer.getTree().isDisposed()) {
                  viewer.refresh(itemNode,true);
                }
              }
            }
          }
 else {
            String folder=null;
            if (resourceNode.getPath().startsWith(resourceNode.getTopNodePath())) {
              folder=resourceNode.getPath().replace(resourceNode.getTopNodePath(),""String_Node_Str"");
            }
 else {
              folder=""String_Node_Str"";
            }
            IRepositoryNode nodeToRefresh=findFolder(folder,resourceNode.getTopNode());
            if (nodeToRefresh != null) {
              if (nodeToRefresh != null && viewer != null && !viewer.getTree().isDisposed()) {
                viewer.refresh(nodeToRefresh,false);
              }
            }
          }
        }
      }
    }
);
  }
}",0.9571880726303514
125695,"/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    IRepositoryNode childNode=findItemNode(id,node.getChildren());
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""findItemNode"".
 * @param id
 * @return
 */
private IRepositoryNode findItemNode(String id,List<IRepositoryNode> nodes){
  for (  IRepositoryNode node : nodes) {
    if (id.equals(node.getId())) {
      return node;
    }
    ITreeContentProvider contentProvider=(ITreeContentProvider)viewer.getContentProvider();
    Object[] childrensObject=contentProvider.getElements(node);
    List<IRepositoryNode> childrens=new ArrayList<>();
    for (    Object o : childrensObject) {
      if (o instanceof IRepositoryNode) {
        childrens.add((IRepositoryNode)o);
      }
    }
    IRepositoryNode childNode=findItemNode(id,node.getChildren());
    if (childNode != null) {
      return childNode;
    }
  }
  return null;
}",0.6208082545141874
125696,"@Override public void run(){
  for (  ResourceNode resourceNode : pathToRefresh) {
    XmiResourceManager xrm=new XmiResourceManager();
    if (xrm.isPropertyFile(resourceNode.getPath())) {
      List<IRepositoryNode> nodes=new ArrayList<>();
      for (      Object object : viewer.getExpandedElements()) {
        if (object instanceof IRepositoryNode) {
          nodes.add((IRepositoryNode)object);
        }
      }
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(resourceNode.getPath()));
      Property property=xrm.loadProperty(file);
      IRepositoryNode itemNode=findItemNode(property.getId(),nodes);
      if (itemNode != null) {
        IRepositoryViewObject object=itemNode.getObject();
        if (object != null) {
          object.getProperty();
        }
        if (itemNode != null && viewer != null && !viewer.getTree().isDisposed()) {
          viewer.refresh(itemNode,true);
        }
      }
    }
 else {
      String folder=resourceNode.getPath().replace(resourceNode.getTopNodePath(),""String_Node_Str"");
      IRepositoryNode nodeToRefresh=findFolder(folder,resourceNode.getTopNode());
      if (nodeToRefresh != null) {
        if (nodeToRefresh != null && viewer != null && !viewer.getTree().isDisposed()) {
          viewer.refresh(nodeToRefresh,false);
        }
      }
    }
  }
}","@Override public void run(){
  for (  ResourceNode resourceNode : pathToRefresh) {
    XmiResourceManager xrm=new XmiResourceManager();
    if (xrm.isPropertyFile(resourceNode.getPath())) {
      List<IRepositoryNode> nodes=new ArrayList<>();
      for (      Object object : viewer.getExpandedElements()) {
        if (object instanceof IRepositoryNode) {
          nodes.add((IRepositoryNode)object);
        }
      }
      IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(resourceNode.getPath()));
      Property property=xrm.loadProperty(file);
      if (property != null) {
        IRepositoryNode itemNode=findItemNode(property.getId(),nodes);
        if (itemNode != null) {
          IRepositoryViewObject object=itemNode.getObject();
          if (object != null) {
            object.getProperty();
          }
          if (itemNode != null && viewer != null && !viewer.getTree().isDisposed()) {
            viewer.refresh(itemNode,true);
          }
        }
      }
    }
 else {
      String folder=null;
      if (resourceNode.getPath().startsWith(resourceNode.getTopNodePath())) {
        folder=resourceNode.getPath().replace(resourceNode.getTopNodePath(),""String_Node_Str"");
      }
 else {
        folder=""String_Node_Str"";
      }
      IRepositoryNode nodeToRefresh=findFolder(folder,resourceNode.getTopNode());
      if (nodeToRefresh != null) {
        if (nodeToRefresh != null && viewer != null && !viewer.getTree().isDisposed()) {
          viewer.refresh(nodeToRefresh,false);
        }
      }
    }
  }
}",0.92573402417962
125697,"/** 
 * For TDI-36019
 */
@Test public void testGetInstance(){
  String projectName=""String_Node_Str"";
  Project project=new Project(projectName);
  project.setTechnicalLabel(projectName);
  RelationshipItemBuilder relationshipItemBuilder=RelationshipItemBuilder.getInstance(project,true);
  assert(project == relationshipItemBuilder.getAimProject());
  assert(ProjectManager.getInstance().getCurrentProject() == RelationshipItemBuilder.getInstance().getAimProject());
  Project project2=new Project(projectName);
  project2.setTechnicalLabel(projectName);
  assert(project2 == RelationshipItemBuilder.getInstance().getAimProject());
}","/** 
 * For TDI-36019
 */
@Test public void testGetInstance(){
  String projectName=""String_Node_Str"";
  Project project=new Project(projectName);
  project.setTechnicalLabel(projectName);
  RelationshipItemBuilder relationshipItemBuilder=RelationshipItemBuilder.getInstance(project,true);
  assert(project == relationshipItemBuilder.getAimProject());
  Project project2=new Project(projectName);
  project2.setTechnicalLabel(projectName);
  assert(relationshipItemBuilder == RelationshipItemBuilder.getInstance(project2,true));
  assert(relationshipItemBuilder.getAimProject() == project2);
  assert(ProjectManager.getInstance().getCurrentProject() == RelationshipItemBuilder.getInstance().getAimProject());
}",0.6988847583643123
125698,"@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        metadataConnection.setUrl(connection.getURL());
        if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
      if (!repositoryObjectEditable) {
        boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (flag) {
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
      }
 else {
        DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
        WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
        wizardDialog.setBlockOnOpen(true);
        handleWizard(node,wizardDialog);
      }
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}","@Override protected void run() throws LoginException, PersistenceException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  if (!monitor.isCanceled()) {
    final ManagerConnection managerConnection=new ManagerConnection();
    DatabaseConnection connection=(DatabaseConnection)item.getConnection();
    String oldContextName=connection.getContextName();
    IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
    String newContextName=connection.getContextName();
    if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
      if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
        Item itemTemp=node.getObject().getProperty().getItem();
        if (itemTemp != null && itemTemp instanceof ConnectionItem) {
          ConnectionItem connItem=(ConnectionItem)itemTemp;
          SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
        }
      }
    }
    if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
        if (!useSSL) {
          metadataConnection.setUrl(connection.getURL());
        }
        if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
          JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
        }
      }
 else {
        String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
        metadataConnection.setUrl(genUrl);
      }
    }
    if (connection != null) {
      EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
      Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
      ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
    }
    if (creation) {
      String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
      if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConnection);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        managerConnection.check(metadataConnection);
      }
      ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
      IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
      boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
      if (!repositoryObjectEditable) {
        boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        if (flag) {
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          wizardDialog.setBlockOnOpen(true);
          handleWizard(node,wizardDialog);
        }
      }
 else {
        DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
        WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
        wizardDialog.setBlockOnOpen(true);
        handleWizard(node,wizardDialog);
      }
    }
 else {
      final boolean skipStep=true;
      DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
      databaseTableWizard.setSkipStep(skipStep);
      WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
      handleWizard(node,wizardDialog);
    }
  }
}",0.9852442671984049
125699,"@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            metadataConnection.setUrl(connection.getURL());
            if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
          if (!repositoryObjectEditable) {
            boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            if (flag) {
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
          }
 else {
            DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
            WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
            wizardDialog.setBlockOnOpen(true);
            handleWizard(node,wizardDialog);
          }
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}","@Override public IStatus runInUIThread(final IProgressMonitor monitor){
  String name=""String_Node_Str"" + getText();
  RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
    @Override protected void run() throws LoginException, PersistenceException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      if (!monitor.isCanceled()) {
        final ManagerConnection managerConnection=new ManagerConnection();
        DatabaseConnection connection=(DatabaseConnection)item.getConnection();
        String oldContextName=connection.getContextName();
        IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
        String newContextName=connection.getContextName();
        if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
          if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
            Item itemTemp=node.getObject().getProperty().getItem();
            if (itemTemp != null && itemTemp instanceof ConnectionItem) {
              ConnectionItem connItem=(ConnectionItem)itemTemp;
              SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
            }
          }
        }
        if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
            if (!useSSL) {
              metadataConnection.setUrl(connection.getURL());
            }
            if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
              JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
            }
          }
 else {
            String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
            metadataConnection.setUrl(genUrl);
          }
        }
        if (connection != null) {
          EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
          Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
          ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
        }
        if (creation) {
          String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
          if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
            try {
              HiveConnectionManager.getInstance().checkConnection(metadataConnection);
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
 else {
            managerConnection.check(metadataConnection);
          }
          ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
          IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
          boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
          if (!repositoryObjectEditable) {
            boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            if (flag) {
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              wizardDialog.setBlockOnOpen(true);
              handleWizard(node,wizardDialog);
            }
          }
 else {
            DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
            WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
            wizardDialog.setBlockOnOpen(true);
            handleWizard(node,wizardDialog);
          }
        }
 else {
          final boolean skipStep=true;
          DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
          databaseTableWizard.setSkipStep(skipStep);
          WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
          handleWizard(node,wizardDialog);
        }
      }
    }
  }
;
  repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
  IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
  monitor.done();
  return Status.OK_STATUS;
}",0.9863690577611176
125700,"private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                metadataConnection.setUrl(connection.getURL());
                if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
              IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
              boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
              if (!repositoryObjectEditable) {
                boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                if (flag) {
                  DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                  wizardDialog.setBlockOnOpen(true);
                  handleWizard(node,wizardDialog);
                }
              }
 else {
                DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                wizardDialog.setBlockOnOpen(true);
                handleWizard(node,wizardDialog);
              }
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}","private void openDatabaseTableWizard(final DatabaseConnectionItem item,final MetadataTable metadataTable,final boolean forceReadOnly,final RepositoryNode node,final boolean creation){
  UIJob job=new UIJob(Messages.getString(""String_Node_Str"")){
    @Override public IStatus runInUIThread(    final IProgressMonitor monitor){
      String name=""String_Node_Str"" + getText();
      RepositoryWorkUnit<Object> repositoryWorkUnit=new RepositoryWorkUnit<Object>(name,this){
        @Override protected void run() throws LoginException, PersistenceException {
          monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
          if (!monitor.isCanceled()) {
            final ManagerConnection managerConnection=new ManagerConnection();
            DatabaseConnection connection=(DatabaseConnection)item.getConnection();
            String oldContextName=connection.getContextName();
            IMetadataConnection metadataConnection=ConvertionHelper.convert(connection,false,null);
            String newContextName=connection.getContextName();
            if (oldContextName != null && newContextName != null && !oldContextName.equals(newContextName)) {
              if (node != null && node.getObject() != null && node.getObject().getProperty() != null) {
                Item itemTemp=node.getObject().getProperty().getItem();
                if (itemTemp != null && itemTemp instanceof ConnectionItem) {
                  ConnectionItem connItem=(ConnectionItem)itemTemp;
                  SwitchContextGroupNameImpl.getInstance().updateContextGroup(connItem,newContextName);
                }
              }
            }
            if (!metadataConnection.getDbType().equals(EDatabaseConnTemplate.GODBC.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.ACCESS.getDBDisplayName()) && !metadataConnection.getDbType().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                boolean useSSL=Boolean.valueOf(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
                if (!useSSL) {
                  metadataConnection.setUrl(connection.getURL());
                }
                if (HiveModeInfo.get(hiveMode) == HiveModeInfo.EMBEDDED) {
                  JavaSqlFactory.doHivePreSetup((DatabaseConnection)metadataConnection.getCurrentConnection());
                }
              }
 else {
                String genUrl=DatabaseConnStrUtil.getURLString(metadataConnection.getDbType(),metadataConnection.getDbVersionString(),metadataConnection.getServerName(),metadataConnection.getUsername(),metadataConnection.getPassword(),metadataConnection.getPort(),metadataConnection.getDatabase(),metadataConnection.getFileFieldName(),metadataConnection.getDataSourceName(),metadataConnection.getDbRootPath(),metadataConnection.getAdditionalParams());
                metadataConnection.setUrl(genUrl);
              }
            }
            if (connection != null) {
              EList<orgomg.cwm.objectmodel.core.Package> dp=connection.getDataPackage();
              Collection<Package> newDataPackage=EcoreUtil.copyAll(dp);
              ConnectionHelper.addPackages(newDataPackage,(DatabaseConnection)metadataConnection.getCurrentConnection());
            }
            if (creation) {
              String hiveMode=(String)metadataConnection.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
              if (EDatabaseTypeName.HIVE.getDisplayName().equals(metadataConnection.getDbType())) {
                try {
                  HiveConnectionManager.getInstance().checkConnection(metadataConnection);
                }
 catch (                Exception e) {
                  e.printStackTrace();
                }
              }
 else {
                managerConnection.check(metadataConnection);
              }
              ExtractMetaDataUtils.getInstance().setUseAllSynonyms(false);
              IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
              boolean repositoryObjectEditable=factory.isEditableAndLockIfPossible(node.getObject());
              if (!repositoryObjectEditable) {
                boolean flag=MessageDialog.openConfirm(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
                if (flag) {
                  DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                  WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                  wizardDialog.setBlockOnOpen(true);
                  handleWizard(node,wizardDialog);
                }
              }
 else {
                DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
                WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
                wizardDialog.setBlockOnOpen(true);
                handleWizard(node,wizardDialog);
              }
            }
 else {
              final boolean skipStep=true;
              DatabaseTableWizard databaseTableWizard=new DatabaseTableWizard(PlatformUI.getWorkbench(),creation,node.getObject(),metadataTable,getExistingNames(),forceReadOnly,managerConnection,metadataConnection);
              databaseTableWizard.setSkipStep(skipStep);
              WizardDialog wizardDialog=new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),databaseTableWizard);
              handleWizard(node,wizardDialog);
            }
          }
        }
      }
;
      repositoryWorkUnit.setAvoidUnloadResources(isAvoidUnloadResources());
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.getProxyRepositoryFactory().executeRepositoryWorkUnit(repositoryWorkUnit);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(true);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (!event.getResult().isOK()) {
        log.error(event.getResult().getMessage(),event.getResult().getException());
      }
    }
  }
);
  job.schedule();
}",0.9872668048563814
125701,"private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws SQLException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}","private void setMaprTicketConfig(IMetadataConnection metadataConn,ClassLoader classLoader,boolean useKerberos) throws SQLException {
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  Long desiredTicketDurInSecs=86400L;
  if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
    if (mapRTicketDuration.endsWith(""String_Node_Str"")) {
      mapRTicketDuration=mapRTicketDuration.substring(0,mapRTicketDuration.length() - 1);
    }
    desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
  }
  try {
    Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",classLoader,new Object[]{});
    if (useKerberos) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
    }
 else {
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
      ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,mapRTicketPassword,desiredTicketDurInSecs});
    }
  }
 catch (  Exception e) {
    throw new SQLException(e);
  }
}",0.9286300246103364
125702,"private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
            final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
            statusMap.put(mvnUri,ELibraryInstallStatus.INSTALLED);
          }
        }
 else {
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
          final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
          statusMap.put(module.getMavenUri(),ELibraryInstallStatus.INSTALLED);
        }
        installedModules.add(module.getName());
      }
 catch (      SocketTimeoutException e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(e);
        continue;
      }
catch (      Exception e) {
        downloadFailed.add(module.getName());
        MessageBoxExceptionHandler.process(e);
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!installedModules.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
  }
}","private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
            final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
            statusMap.put(mvnUri,ELibraryInstallStatus.INSTALLED);
          }
        }
 else {
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
          final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
          statusMap.put(module.getMavenUri(),ELibraryInstallStatus.INSTALLED);
        }
        installedModules.add(module.getName());
      }
 catch (      Exception e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(new Exception(""String_Node_Str"" + module.getName() + ""String_Node_Str""));
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!installedModules.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
  }
}",0.9522075557578517
125703,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS) && jobInfo.getProcessItem() != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<ProcessItem> testsItems=testContainerService.getAllTestContainers(jobInfo.getProcessItem());
        for (        ProcessItem testItem : testsItems) {
          JobInfo subJobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
          subJobInfo.setTestContainer(true);
          subJobInfo.setFatherJobInfo(jobInfo);
          if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
          }
 else {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
            currentProcess.setNeedRegenerateCode(true);
          }
        }
      }
    }
  }
  jobInfo.setProcessItem(null);
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str"") || ""String_Node_Str"".equals(node.getComponent().getOriginalFamilyName()))) {
        if (""String_Node_Str"".equals(componentName)) {
          if ((Boolean)node.getElementParameter(""String_Node_Str"").getValue()) {
            continue;
          }
        }
        boolean isNeedLoadmodules=true;
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        final String jobIds=(String)processIdparam.getValue();
        for (        String jobId : jobIds.split(ProcessorUtilities.COMMA)) {
          if (StringUtils.isNotEmpty(jobId)) {
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            final JobInfo subJobInfo=new JobInfo(jobId,context,version);
            final ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (!isNeedLoadmodules) {
              LastGenerationInfo.getInstance().setModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion(),Collections.<ModuleNeeded>emptySet());
            }
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              int subJobOption=GENERATE_ALL_CHILDS;
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                subJobOption=GENERATE_MAIN_ONLY;
              }
              if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS)) {
                subJobOption|=GENERATE_TESTS;
              }
              generateCode(subJobInfo,selectedContextName,statistics,false,properties,isNeedLoadmodules,subJobOption,progressMonitor);
              if (!BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
            if (!LastGenerationInfo.getInstance().isUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUsePigUDFs(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS) && jobInfo.getProcessItem() != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<ProcessItem> testsItems=testContainerService.getAllTestContainers(jobInfo.getProcessItem());
        for (        ProcessItem testItem : testsItems) {
          JobInfo subJobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
          subJobInfo.setTestContainer(true);
          subJobInfo.setFatherJobInfo(jobInfo);
          if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
          }
 else {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
            currentProcess.setNeedRegenerateCode(true);
          }
        }
      }
    }
  }
  jobInfo.setProcessItem(null);
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str"") || ""String_Node_Str"".equals(node.getComponent().getOriginalFamilyName()))) {
        if (""String_Node_Str"".equals(componentName)) {
          if ((Boolean)node.getElementParameter(""String_Node_Str"").getValue()) {
            continue;
          }
        }
        boolean isNeedLoadmodules=true;
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        final String jobIds=(String)processIdparam.getValue();
        for (        String jobId : jobIds.split(ProcessorUtilities.COMMA)) {
          if (StringUtils.isNotEmpty(jobId)) {
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            final JobInfo subJobInfo=new JobInfo(jobId,context,version);
            final ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            subJobInfo.setJobName(processItem.getProperty().getLabel());
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (!isNeedLoadmodules) {
                LastGenerationInfo.getInstance().setModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion(),Collections.<ModuleNeeded>emptySet());
              }
              if (jobInfo.isApplyContextToChildren()) {
                subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
                if (checkIfContextExisted(processItem,selectedContextName)) {
                  subJobInfo.setContextName(selectedContextName);
                }
 else {
                  String defaultContext=processItem.getProcess().getDefaultContext();
                  node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                  subJobInfo.setContextName(defaultContext);
                }
              }
              int subJobOption=GENERATE_ALL_CHILDS;
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                subJobOption=GENERATE_MAIN_ONLY;
              }
              if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS)) {
                subJobOption|=GENERATE_TESTS;
              }
              generateCode(subJobInfo,selectedContextName,statistics,false,properties,isNeedLoadmodules,subJobOption,progressMonitor);
              if (!BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
              if (!LastGenerationInfo.getInstance().isUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUsePigUDFs(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}",0.9715532432659226
125704,"private static void generateJobInfo(JobInfo jobInfo,boolean isMainJob,IProcess currentProcess,ProcessItem selectedProcessItem){
  if (!CommonsPlugin.isHeadless()) {
    if (currentProcess instanceof IProcess2) {
      IProcess2 process2=(IProcess2)currentProcess;
      process2.setActivate(true);
      process2.checkProcess();
    }
  }
  JobInfo generatedJobInfo=new JobInfo(jobInfo.getJobId(),jobInfo.getContextName(),jobInfo.getJobVersion());
  generatedJobInfo.setJobName(currentProcess.getName());
  generatedJobInfo.setTestContainer(jobInfo.isTestContainer());
  String projectFolderName;
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    projectFolderName=JavaResourcesHelper.getProjectFolderName(selectedProcessItem);
  }
 else {
    projectFolderName=PerlResourcesHelper.getRootProjectName(selectedProcessItem);
  }
  generatedJobInfo.setProjectFolderName(projectFolderName);
  LastGenerationInfo.getInstance().getLastGeneratedjobs().add(generatedJobInfo);
  if (isMainJob) {
    LastGenerationInfo.getInstance().setLastMainJob(generatedJobInfo);
  }
}","private static void generateJobInfo(JobInfo jobInfo,boolean isMainJob,IProcess currentProcess,ProcessItem selectedProcessItem){
  if (!CommonsPlugin.isHeadless()) {
    if (currentProcess instanceof IProcess2) {
      IProcess2 process2=(IProcess2)currentProcess;
      process2.setActivate(true);
      process2.checkProcess();
    }
  }
  JobInfo generatedJobInfo=cloneJobInfo(jobInfo);
  String projectFolderName;
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    projectFolderName=JavaResourcesHelper.getProjectFolderName(selectedProcessItem);
  }
 else {
    projectFolderName=PerlResourcesHelper.getRootProjectName(selectedProcessItem);
  }
  generatedJobInfo.setProjectFolderName(projectFolderName);
  LastGenerationInfo.getInstance().getLastGeneratedjobs().add(generatedJobInfo);
  if (isMainJob) {
    LastGenerationInfo.getInstance().setLastMainJob(generatedJobInfo);
  }
}",0.9045226130653268
125705,"/** 
 * update the modules list for project pom. The routines should be added always.
 */
protected void updateModulesList(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateModules()) {
    return;
  }
  List<String> modulesList=new ArrayList<String>();
  List<String> codesModules=PomUtil.getMavenCodesModules(processor != null ? processor.getProcess() : null);
  for (  String module : codesModules) {
    modulesList.add(module);
  }
  if (processor != null) {
    for (    JobInfo childJob : processor.getBuildChildrenJobs()) {
      modulesList.add(PomUtil.getPomFileName(childJob.getJobName(),childJob.getJobVersion()));
    }
    modulesList.add(PomUtil.getPomFileName(processor.getProperty().getLabel(),processor.getProperty().getVersion()));
  }
  List<String> modules=projectModel.getModules();
  if (modules == null) {
    modules=new ArrayList<String>();
    projectModel.setModules(modules);
  }
 else   if (!modules.isEmpty()) {
    modules.clear();
  }
  modules.addAll(modulesList);
  IProject project=projectPomFile.getProject();
  project.refreshLocal(IResource.DEPTH_ONE,monitor);
  for (  String module : modules) {
    IFile file=project.getFile(module);
    if (file.exists()) {
      Model model=MODEL_MANAGER.readMavenModel(file);
      Parent parent=model.getParent();
      if (parent != null) {
        if (parent.getGroupId().equals(projectModel.getGroupId())) {
          continue;
        }
        PomUtil.checkParent(model,file);
        PomUtil.savePom(monitor,model,file);
      }
    }
  }
}","/** 
 * update the modules list for project pom. The routines should be added always.
 */
protected void updateModulesList(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateModules()) {
    return;
  }
  List<String> modulesList=new ArrayList<String>();
  List<String> codesModules=PomUtil.getMavenCodesModules(processor != null ? processor.getProcess() : null);
  for (  String module : codesModules) {
    modulesList.add(module);
  }
  if (processor != null) {
    String mainPom=PomUtil.getPomFileName(processor.getProperty().getLabel(),processor.getProperty().getVersion());
    for (    JobInfo childJob : processor.getBuildChildrenJobs()) {
      String childPom=PomUtil.getPomFileName(childJob.getJobName(),childJob.getJobVersion());
      if (!childPom.equals(mainPom)) {
        modulesList.add(childPom);
      }
    }
    modulesList.add(mainPom);
  }
  List<String> modules=projectModel.getModules();
  if (modules == null) {
    modules=new ArrayList<String>();
    projectModel.setModules(modules);
  }
 else   if (!modules.isEmpty()) {
    modules.clear();
  }
  modules.addAll(modulesList);
  IProject project=projectPomFile.getProject();
  project.refreshLocal(IResource.DEPTH_ONE,monitor);
  for (  String module : modules) {
    IFile file=project.getFile(module);
    if (file.exists()) {
      Model model=MODEL_MANAGER.readMavenModel(file);
      Parent parent=model.getParent();
      if (parent != null) {
        if (parent.getGroupId().equals(projectModel.getGroupId())) {
          continue;
        }
        PomUtil.checkParent(model,file);
        PomUtil.savePom(monitor,model,file);
      }
    }
  }
}",0.896657467034652
125706,"@Override protected boolean validChildrenJob(JobInfo jobInfo){
  return jobInfo != null && !jobInfo.isTestContainer();
}","@Override protected boolean validChildrenJob(JobInfo jobInfo){
  JobInfo fatherJobInfo=null;
  for (  JobInfo lastGeneratedJobInfo : LastGenerationInfo.getInstance().getLastGeneratedjobs()) {
    if (lastGeneratedJobInfo.getJobId().equals(getJobProcessor().getProperty().getId()) && lastGeneratedJobInfo.getJobVersion().equals(getJobProcessor().getProperty().getVersion())) {
      fatherJobInfo=lastGeneratedJobInfo;
      break;
    }
  }
  if (fatherJobInfo != null) {
    fatherJobInfo=fatherJobInfo.getFatherJobInfo();
  }
  while (fatherJobInfo != null) {
    if (fatherJobInfo.getJobId().equals(jobInfo.getJobId()) && fatherJobInfo.getJobVersion().equals(jobInfo.getJobVersion())) {
      return false;
    }
    fatherJobInfo=fatherJobInfo.getFatherJobInfo();
  }
  return jobInfo != null && !jobInfo.isTestContainer();
}",0.238145416227608
125707,"@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName(),child.getJobVersion()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
  clonedChildrenJobInfors.remove(LastGenerationInfo.getInstance().getLastMainJob());
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName(),child.getJobVersion()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}",0.9883097235593452
125708,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS) && jobInfo.getProcessItem() != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<ProcessItem> testsItems=testContainerService.getAllTestContainers(jobInfo.getProcessItem());
        for (        ProcessItem testItem : testsItems) {
          JobInfo subJobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
          subJobInfo.setTestContainer(true);
          subJobInfo.setFatherJobInfo(jobInfo);
          if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
          }
 else {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
            currentProcess.setNeedRegenerateCode(true);
          }
        }
      }
    }
  }
  jobInfo.setProcessItem(null);
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str"") || ""String_Node_Str"".equals(node.getComponent().getOriginalFamilyName()))) {
        if (""String_Node_Str"".equals(componentName)) {
          if ((Boolean)node.getElementParameter(""String_Node_Str"").getValue()) {
            continue;
          }
        }
        boolean isNeedLoadmodules=true;
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        final String jobIds=(String)processIdparam.getValue();
        for (        String jobId : jobIds.split(ProcessorUtilities.COMMA)) {
          if (StringUtils.isNotEmpty(jobId)) {
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            final JobInfo subJobInfo=new JobInfo(jobId,context,version);
            final ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            if (!isNeedLoadmodules) {
              LastGenerationInfo.getInstance().setModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion(),Collections.<ModuleNeeded>emptySet());
            }
            if (jobInfo.isApplyContextToChildren()) {
              subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
              if (checkIfContextExisted(processItem,selectedContextName)) {
                subJobInfo.setContextName(selectedContextName);
              }
 else {
                String defaultContext=processItem.getProcess().getDefaultContext();
                node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                subJobInfo.setContextName(defaultContext);
              }
            }
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              int subJobOption=GENERATE_ALL_CHILDS;
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                subJobOption=GENERATE_MAIN_ONLY;
              }
              if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS)) {
                subJobOption|=GENERATE_TESTS;
              }
              generateCode(subJobInfo,selectedContextName,statistics,false,properties,isNeedLoadmodules,subJobOption,progressMonitor);
              if (!BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                currentProcess.setNeedRegenerateCode(true);
              }
            }
            LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
            if (!LastGenerationInfo.getInstance().isUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion())) {
              LastGenerationInfo.getInstance().setUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUsePigUDFs(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS) && jobInfo.getProcessItem() != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<ProcessItem> testsItems=testContainerService.getAllTestContainers(jobInfo.getProcessItem());
        for (        ProcessItem testItem : testsItems) {
          JobInfo subJobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
          subJobInfo.setTestContainer(true);
          subJobInfo.setFatherJobInfo(jobInfo);
          if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
          }
 else {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
            currentProcess.setNeedRegenerateCode(true);
          }
        }
      }
    }
  }
  jobInfo.setProcessItem(null);
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str"") || ""String_Node_Str"".equals(node.getComponent().getOriginalFamilyName()))) {
        if (""String_Node_Str"".equals(componentName)) {
          if ((Boolean)node.getElementParameter(""String_Node_Str"").getValue()) {
            continue;
          }
        }
        boolean isNeedLoadmodules=true;
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        final String jobIds=(String)processIdparam.getValue();
        for (        String jobId : jobIds.split(ProcessorUtilities.COMMA)) {
          if (StringUtils.isNotEmpty(jobId)) {
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            final JobInfo subJobInfo=new JobInfo(jobId,context,version);
            final ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            subJobInfo.setJobName(processItem.getProperty().getLabel());
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (!isNeedLoadmodules) {
                LastGenerationInfo.getInstance().setModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion(),Collections.<ModuleNeeded>emptySet());
              }
              if (jobInfo.isApplyContextToChildren()) {
                subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
                if (checkIfContextExisted(processItem,selectedContextName)) {
                  subJobInfo.setContextName(selectedContextName);
                }
 else {
                  String defaultContext=processItem.getProcess().getDefaultContext();
                  node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                  subJobInfo.setContextName(defaultContext);
                }
              }
              int subJobOption=GENERATE_ALL_CHILDS;
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                subJobOption=GENERATE_MAIN_ONLY;
              }
              if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS)) {
                subJobOption|=GENERATE_TESTS;
              }
              generateCode(subJobInfo,selectedContextName,statistics,false,properties,isNeedLoadmodules,subJobOption,progressMonitor);
              if (!BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
              if (!LastGenerationInfo.getInstance().isUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUsePigUDFs(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}",0.9715532432659226
125709,"private static void generateJobInfo(JobInfo jobInfo,boolean isMainJob,IProcess currentProcess,ProcessItem selectedProcessItem){
  if (!CommonsPlugin.isHeadless()) {
    if (currentProcess instanceof IProcess2) {
      IProcess2 process2=(IProcess2)currentProcess;
      process2.setActivate(true);
      process2.checkProcess();
    }
  }
  JobInfo generatedJobInfo=new JobInfo(jobInfo.getJobId(),jobInfo.getContextName(),jobInfo.getJobVersion());
  generatedJobInfo.setJobName(currentProcess.getName());
  generatedJobInfo.setTestContainer(jobInfo.isTestContainer());
  String projectFolderName;
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    projectFolderName=JavaResourcesHelper.getProjectFolderName(selectedProcessItem);
  }
 else {
    projectFolderName=PerlResourcesHelper.getRootProjectName(selectedProcessItem);
  }
  generatedJobInfo.setProjectFolderName(projectFolderName);
  LastGenerationInfo.getInstance().getLastGeneratedjobs().add(generatedJobInfo);
  if (isMainJob) {
    LastGenerationInfo.getInstance().setLastMainJob(generatedJobInfo);
  }
}","private static void generateJobInfo(JobInfo jobInfo,boolean isMainJob,IProcess currentProcess,ProcessItem selectedProcessItem){
  if (!CommonsPlugin.isHeadless()) {
    if (currentProcess instanceof IProcess2) {
      IProcess2 process2=(IProcess2)currentProcess;
      process2.setActivate(true);
      process2.checkProcess();
    }
  }
  JobInfo generatedJobInfo=cloneJobInfo(jobInfo);
  String projectFolderName;
  if (LanguageManager.getCurrentLanguage() == ECodeLanguage.JAVA) {
    projectFolderName=JavaResourcesHelper.getProjectFolderName(selectedProcessItem);
  }
 else {
    projectFolderName=PerlResourcesHelper.getRootProjectName(selectedProcessItem);
  }
  generatedJobInfo.setProjectFolderName(projectFolderName);
  LastGenerationInfo.getInstance().getLastGeneratedjobs().add(generatedJobInfo);
  if (isMainJob) {
    LastGenerationInfo.getInstance().setLastMainJob(generatedJobInfo);
  }
}",0.9045226130653268
125710,"/** 
 * update the modules list for project pom. The routines should be added always.
 */
protected void updateModulesList(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateModules()) {
    return;
  }
  List<String> modulesList=new ArrayList<String>();
  List<String> codesModules=PomUtil.getMavenCodesModules(processor != null ? processor.getProcess() : null);
  for (  String module : codesModules) {
    modulesList.add(module);
  }
  if (processor != null) {
    for (    JobInfo childJob : processor.getBuildChildrenJobs()) {
      modulesList.add(PomUtil.getPomFileName(childJob.getJobName(),childJob.getJobVersion()));
    }
    modulesList.add(PomUtil.getPomFileName(processor.getProperty().getLabel(),processor.getProperty().getVersion()));
  }
  List<String> modules=projectModel.getModules();
  if (modules == null) {
    modules=new ArrayList<String>();
    projectModel.setModules(modules);
  }
 else   if (!modules.isEmpty()) {
    modules.clear();
  }
  modules.addAll(modulesList);
  IProject project=projectPomFile.getProject();
  project.refreshLocal(IResource.DEPTH_ONE,monitor);
  for (  String module : modules) {
    IFile file=project.getFile(module);
    if (file.exists()) {
      Model model=MODEL_MANAGER.readMavenModel(file);
      Parent parent=model.getParent();
      if (parent != null) {
        if (parent.getGroupId().equals(projectModel.getGroupId())) {
          continue;
        }
        PomUtil.checkParent(model,file);
        PomUtil.savePom(monitor,model,file);
      }
    }
  }
}","/** 
 * update the modules list for project pom. The routines should be added always.
 */
protected void updateModulesList(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateModules()) {
    return;
  }
  List<String> modulesList=new ArrayList<String>();
  List<String> codesModules=PomUtil.getMavenCodesModules(processor != null ? processor.getProcess() : null);
  for (  String module : codesModules) {
    modulesList.add(module);
  }
  if (processor != null) {
    String mainPom=PomUtil.getPomFileName(processor.getProperty().getLabel(),processor.getProperty().getVersion());
    for (    JobInfo childJob : processor.getBuildChildrenJobs()) {
      String childPom=PomUtil.getPomFileName(childJob.getJobName(),childJob.getJobVersion());
      if (!childPom.equals(mainPom)) {
        modulesList.add(childPom);
      }
    }
    modulesList.add(mainPom);
  }
  List<String> modules=projectModel.getModules();
  if (modules == null) {
    modules=new ArrayList<String>();
    projectModel.setModules(modules);
  }
 else   if (!modules.isEmpty()) {
    modules.clear();
  }
  modules.addAll(modulesList);
  IProject project=projectPomFile.getProject();
  project.refreshLocal(IResource.DEPTH_ONE,monitor);
  for (  String module : modules) {
    IFile file=project.getFile(module);
    if (file.exists()) {
      Model model=MODEL_MANAGER.readMavenModel(file);
      Parent parent=model.getParent();
      if (parent != null) {
        if (parent.getGroupId().equals(projectModel.getGroupId())) {
          continue;
        }
        PomUtil.checkParent(model,file);
        PomUtil.savePom(monitor,model,file);
      }
    }
  }
}",0.896657467034652
125711,"@Override protected boolean validChildrenJob(JobInfo jobInfo){
  return jobInfo != null && !jobInfo.isTestContainer();
}","@Override protected boolean validChildrenJob(JobInfo jobInfo){
  JobInfo fatherJobInfo=null;
  for (  JobInfo lastGeneratedJobInfo : LastGenerationInfo.getInstance().getLastGeneratedjobs()) {
    if (lastGeneratedJobInfo.getJobId().equals(getJobProcessor().getProperty().getId()) && lastGeneratedJobInfo.getJobVersion().equals(getJobProcessor().getProperty().getVersion())) {
      fatherJobInfo=lastGeneratedJobInfo;
      break;
    }
  }
  if (fatherJobInfo != null) {
    fatherJobInfo=fatherJobInfo.getFatherJobInfo();
  }
  while (fatherJobInfo != null) {
    if (fatherJobInfo.getJobId().equals(jobInfo.getJobId()) && fatherJobInfo.getJobVersion().equals(jobInfo.getJobVersion())) {
      return false;
    }
    fatherJobInfo=fatherJobInfo.getFatherJobInfo();
  }
  return jobInfo != null && !jobInfo.isTestContainer();
}",0.238145416227608
125712,"@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName(),child.getJobVersion()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void addChildrenJobsInAssembly(IProgressMonitor monitor,IFile assemblyFile) throws Exception {
  if (!assemblyFile.exists()) {
    return;
  }
  final File file=assemblyFile.getLocation().toFile();
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=dbf.newDocumentBuilder();
  Document document=db.parse(file);
  if (document == null) {
    throw new IOException(""String_Node_Str"" + file);
  }
  Node filesElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  Node fileSetsElem=getElement(document.getDocumentElement(),""String_Node_Str"",1);
  if (fileSetsElem == null) {
    fileSetsElem=document.createElement(""String_Node_Str"");
    document.appendChild(fileSetsElem);
  }
  List<String> childrenPomsIncludes=new ArrayList<String>();
  List<String> childrenFolderResourcesIncludes=new ArrayList<String>();
  final Set<JobInfo> clonedChildrenJobInfors=getJobProcessor().getBuildChildrenJobs();
  clonedChildrenJobInfors.remove(LastGenerationInfo.getInstance().getLastMainJob());
  for (  JobInfo child : clonedChildrenJobInfors) {
    if (child.getFatherJobInfo() != null) {
      String jobClassPackageFolder=null;
      if (child.getProcessItem() != null) {
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(child.getProcessItem());
      }
 else {
        String projectName=null;
        String jobId=child.getJobId();
        if (jobId != null) {
          IProxyRepositoryFactory proxyRepositoryFactory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
          IRepositoryViewObject lastVersion=proxyRepositoryFactory.getLastVersion(jobId);
          if (lastVersion != null) {
            Property property=lastVersion.getProperty();
            if (property != null) {
              Project project=ProjectManager.getInstance().getProject(property.getItem());
              projectName=project.getTechnicalLabel();
            }
          }
        }
        if (projectName == null) {
          projectName=ProjectManager.getInstance().getCurrentProject().getTechnicalLabel();
        }
        jobClassPackageFolder=JavaResourcesHelper.getJobClassPackageFolder(projectName,child.getJobName(),child.getJobVersion());
      }
      childrenPomsIncludes.add(PomUtil.getPomFileName(child.getJobName(),child.getJobVersion()));
      if (!child.isTestContainer()) {
        childrenFolderResourcesIncludes.add(jobClassPackageFolder + ""String_Node_Str"");
      }
    }
  }
  if (!clonedChildrenJobInfors.isEmpty()) {
    addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenPomsIncludes,null,null,null,null,false,""String_Node_Str"");
    if (!childrenFolderResourcesIncludes.isEmpty()) {
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
      addAssemblyFileSets(fileSetsElem,""String_Node_Str"",""String_Node_Str"",false,childrenFolderResourcesIncludes,null,null,null,null,false,""String_Node_Str"");
    }
    TransformerFactory transFactory=TransformerFactory.newInstance();
    Transformer transFormer=transFactory.newTransformer();
    transFormer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transFormer.transform(new DOMSource(document),new StreamResult(new FileOutputStream(file)));
    cleanChildrenPomSettings(monitor,childrenPomsIncludes);
    assemblyFile.getProject().refreshLocal(IResource.DEPTH_ONE,monitor);
  }
}",0.9883097235593452
125713,"private static Set<JobInfo> getAllJobInfo(ProcessType ptype,JobInfo parentJobInfo,Set<JobInfo> jobInfos){
  if (ptype == null) {
    return jobInfos;
  }
  EList<NodeType> nodes=ptype.getNode();
  for (  NodeType node : nodes) {
    boolean activate=true;
    for (    Object o : node.getElementParameter()) {
      ElementParameterType param=(ElementParameterType)o;
      if (""String_Node_Str"".equals(param.getName())) {
        activate=""String_Node_Str"".equals(param.getValue());
        break;
      }
    }
    if (!activate) {
      continue;
    }
    if (""String_Node_Str"".equalsIgnoreCase(node.getComponentName())) {
      String jobIds=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobContext=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobVersion=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
      for (      String jobId : jobsArr) {
        if (StringUtils.isNotEmpty(jobId)) {
          ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,jobVersion);
          if (processItem != null) {
            JobInfo jobInfo=new JobInfo(processItem,jobContext);
            if (!jobInfos.contains(jobInfo)) {
              jobInfos.add(jobInfo);
              jobInfo.setFatherJobInfo(parentJobInfo);
              getAllJobInfo(processItem.getProcess(),jobInfo,jobInfos);
            }
          }
        }
      }
    }
 else {
      if (PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null) {
          ProcessType jobletProcess=service.getJobletProcess(node);
          if (jobletProcess != null) {
            getAllJobInfo(jobletProcess,parentJobInfo,jobInfos);
          }
        }
      }
    }
  }
  if (!parentJobInfo.isTestContainer() && GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      List<ProcessItem> testsItems=testContainerService.getAllTestContainers(parentJobInfo.getProcessItem());
      for (      ProcessItem testItem : testsItems) {
        ProcessType testProcess=testContainerService.getTestContainerProcess(testItem);
        if (testItem.getProcess() == null) {
          testItem.setProcess(testProcess);
        }
        if (testProcess == null) {
          log.warn(Messages.getString(""String_Node_Str""));
          continue;
        }
        JobInfo jobInfo=new JobInfo(testItem,testProcess.getDefaultContext());
        jobInfo.setTestContainer(true);
        jobInfos.add(jobInfo);
        jobInfo.setFatherJobInfo(parentJobInfo);
      }
    }
  }
  return jobInfos;
}","private static Set<JobInfo> getAllJobInfo(ProcessType ptype,JobInfo parentJobInfo,Set<JobInfo> jobInfos){
  if (ptype == null) {
    return jobInfos;
  }
  EList<NodeType> nodes=ptype.getNode();
  for (  NodeType node : nodes) {
    boolean activate=true;
    for (    Object o : node.getElementParameter()) {
      ElementParameterType param=(ElementParameterType)o;
      if (""String_Node_Str"".equals(param.getName())) {
        activate=""String_Node_Str"".equals(param.getValue());
        break;
      }
    }
    if (!activate) {
      continue;
    }
    if (""String_Node_Str"".equalsIgnoreCase(node.getComponentName())) {
      String jobIds=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobContext=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String jobVersion=getParameterValue(node.getElementParameter(),""String_Node_Str"");
      String[] jobsArr=jobIds.split(ProcessorUtilities.COMMA);
      for (      String jobId : jobsArr) {
        if (StringUtils.isNotEmpty(jobId)) {
          ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,jobVersion);
          if (processItem != null) {
            JobInfo jobInfo=new JobInfo(processItem,jobContext);
            if (!jobInfos.contains(jobInfo)) {
              jobInfos.add(jobInfo);
              jobInfo.setFatherJobInfo(parentJobInfo);
              getAllJobInfo(processItem.getProcess(),jobInfo,jobInfos);
            }
          }
        }
      }
    }
 else {
      if (PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (service != null) {
          ProcessType jobletProcess=service.getJobletProcess(node);
          if (jobletProcess != null) {
            getAllJobInfo(jobletProcess,parentJobInfo,jobInfos);
          }
        }
      }
    }
  }
  if (!parentJobInfo.isTestContainer() && GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      List<ProcessItem> testsItems=testContainerService.getTestContainersByVersion(parentJobInfo.getProcessItem());
      for (      ProcessItem testItem : testsItems) {
        ProcessType testProcess=testContainerService.getTestContainerProcess(testItem);
        if (testItem.getProcess() == null) {
          testItem.setProcess(testProcess);
        }
        if (testProcess == null) {
          log.warn(Messages.getString(""String_Node_Str""));
          continue;
        }
        JobInfo jobInfo=new JobInfo(testItem,testProcess.getDefaultContext());
        jobInfo.setTestContainer(true);
        jobInfos.add(jobInfo);
        jobInfo.setFatherJobInfo(parentJobInfo);
      }
    }
  }
  return jobInfos;
}",0.9979946524064172
125714,"private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS) && jobInfo.getProcessItem() != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<ProcessItem> testsItems=testContainerService.getAllTestContainers(jobInfo.getProcessItem());
        for (        ProcessItem testItem : testsItems) {
          JobInfo subJobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
          subJobInfo.setTestContainer(true);
          subJobInfo.setFatherJobInfo(jobInfo);
          if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
          }
 else {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
            currentProcess.setNeedRegenerateCode(true);
          }
        }
      }
    }
  }
  jobInfo.setProcessItem(null);
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str"") || ""String_Node_Str"".equals(node.getComponent().getOriginalFamilyName()))) {
        if (""String_Node_Str"".equals(componentName)) {
          if ((Boolean)node.getElementParameter(""String_Node_Str"").getValue()) {
            continue;
          }
        }
        boolean isNeedLoadmodules=true;
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        final String jobIds=(String)processIdparam.getValue();
        for (        String jobId : jobIds.split(ProcessorUtilities.COMMA)) {
          if (StringUtils.isNotEmpty(jobId)) {
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            final JobInfo subJobInfo=new JobInfo(jobId,context,version);
            final ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            subJobInfo.setJobName(processItem.getProperty().getLabel());
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (!isNeedLoadmodules) {
                LastGenerationInfo.getInstance().setModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion(),Collections.<ModuleNeeded>emptySet());
              }
              if (jobInfo.isApplyContextToChildren()) {
                subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
                if (checkIfContextExisted(processItem,selectedContextName)) {
                  subJobInfo.setContextName(selectedContextName);
                }
 else {
                  String defaultContext=processItem.getProcess().getDefaultContext();
                  node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                  subJobInfo.setContextName(defaultContext);
                }
              }
              int subJobOption=GENERATE_ALL_CHILDS;
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                subJobOption=GENERATE_MAIN_ONLY;
              }
              if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS)) {
                subJobOption|=GENERATE_TESTS;
              }
              generateCode(subJobInfo,selectedContextName,statistics,false,properties,isNeedLoadmodules,subJobOption,progressMonitor);
              if (!BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
              if (!LastGenerationInfo.getInstance().isUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUsePigUDFs(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}","private static void generateNodeInfo(JobInfo jobInfo,String selectedContextName,boolean statistics,boolean properties,int option,IProgressMonitor progressMonitor,IProcess currentProcess) throws ProcessorException {
  if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS) && jobInfo.getProcessItem() != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<ProcessItem> testsItems=testContainerService.getTestContainersByVersion(jobInfo.getProcessItem());
        for (        ProcessItem testItem : testsItems) {
          JobInfo subJobInfo=new JobInfo(testItem,testItem.getProcess().getDefaultContext());
          subJobInfo.setTestContainer(true);
          subJobInfo.setFatherJobInfo(jobInfo);
          if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_MAIN_ONLY,progressMonitor);
          }
 else {
            generateCode(subJobInfo,selectedContextName,statistics,false,properties,GENERATE_ALL_CHILDS,progressMonitor);
            currentProcess.setNeedRegenerateCode(true);
          }
        }
      }
    }
  }
  jobInfo.setProcessItem(null);
  if (!BitwiseOptionUtils.containOption(option,GENERATE_MAIN_ONLY)) {
    for (    INode node : currentProcess.getGeneratingNodes()) {
      String componentName=node.getComponent().getName();
      if ((node != null) && (componentName.equals(""String_Node_Str"") || componentName.equals(""String_Node_Str"") || ""String_Node_Str"".equals(node.getComponent().getOriginalFamilyName()))) {
        if (""String_Node_Str"".equals(componentName)) {
          if ((Boolean)node.getElementParameter(""String_Node_Str"").getValue()) {
            continue;
          }
        }
        boolean isNeedLoadmodules=true;
        IElementParameter processIdparam=node.getElementParameter(""String_Node_Str"");
        final String jobIds=(String)processIdparam.getValue();
        for (        String jobId : jobIds.split(ProcessorUtilities.COMMA)) {
          if (StringUtils.isNotEmpty(jobId)) {
            String context=(String)node.getElementParameter(""String_Node_Str"").getValue();
            String version=(String)node.getElementParameter(""String_Node_Str"").getValue();
            final JobInfo subJobInfo=new JobInfo(jobId,context,version);
            final ProcessItem processItem=ItemCacheManager.getProcessItem(jobId,version);
            if (processItem == null) {
              throw new ProcessorException(node.getUniqueName() + ""String_Node_Str"" + currentProcess.getName());
            }
            subJobInfo.setJobVersion(processItem.getProperty().getVersion());
            subJobInfo.setJobName(processItem.getProperty().getLabel());
            subJobInfo.setFatherJobInfo(jobInfo);
            if (!jobList.contains(subJobInfo)) {
              if (!isNeedLoadmodules) {
                LastGenerationInfo.getInstance().setModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion(),Collections.<ModuleNeeded>emptySet());
              }
              if (jobInfo.isApplyContextToChildren()) {
                subJobInfo.setApplyContextToChildren(jobInfo.isApplyContextToChildren());
                if (checkIfContextExisted(processItem,selectedContextName)) {
                  subJobInfo.setContextName(selectedContextName);
                }
 else {
                  String defaultContext=processItem.getProcess().getDefaultContext();
                  node.getElementParameter(""String_Node_Str"").setValue(defaultContext);
                  subJobInfo.setContextName(defaultContext);
                }
              }
              int subJobOption=GENERATE_ALL_CHILDS;
              if (BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                subJobOption=GENERATE_MAIN_ONLY;
              }
              if (BitwiseOptionUtils.containOption(option,GENERATE_TESTS)) {
                subJobOption|=GENERATE_TESTS;
              }
              generateCode(subJobInfo,selectedContextName,statistics,false,properties,isNeedLoadmodules,subJobOption,progressMonitor);
              if (!BitwiseOptionUtils.containOption(option,GENERATE_WITH_FIRST_CHILD)) {
                currentProcess.setNeedRegenerateCode(true);
              }
              LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getModulesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getPigudfNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(jobInfo.getJobId(),jobInfo.getJobVersion()).addAll(LastGenerationInfo.getInstance().getRoutinesNeededWithSubjobPerJob(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              if (!LastGenerationInfo.getInstance().isUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUseDynamic(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUseDynamic(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
              if (!LastGenerationInfo.getInstance().isUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion())) {
                LastGenerationInfo.getInstance().setUsePigUDFs(jobInfo.getJobId(),jobInfo.getJobVersion(),LastGenerationInfo.getInstance().isUsePigUDFs(subJobInfo.getJobId(),subJobInfo.getJobVersion()));
              }
            }
          }
        }
      }
    }
  }
}",0.9990033222591362
125715,"@Override public void updateItemsPath(ERepositoryObjectType type,IPath targetPath) throws PersistenceException {
  if (type == null) {
    return;
  }
  Project baseProject=getRepositoryContext().getProject();
  IProject project=ResourceUtils.getProject(baseProject);
  String folderPathString=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString();
  IFolder folder=ResourceUtils.getFolder(project,folderPathString,false);
  unloadUnlockedResources();
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(baseProject,folder,null,type,true,false,false,false);
  for (  IRepositoryViewObject repositoryObject : serializableFromFolder) {
    ItemState state=repositoryObject.getProperty().getItem().getState();
    state.setPath(getItemStatePath(type,targetPath).toString());
    xmiResourceManager.saveResource(state.eResource());
  }
  if (folder.exists()) {
    for (    IResource current : ResourceUtils.getMembers(folder)) {
      if (current instanceof IFolder) {
        updateItemsPath(type,targetPath.append(current.getName()));
      }
    }
  }
}","@Override public void updateItemsPath(ERepositoryObjectType type,IPath targetPath) throws PersistenceException {
  if (type == null) {
    return;
  }
  Project baseProject=getRepositoryContext().getProject();
  IProject project=ResourceUtils.getProject(baseProject);
  String folderPathString=ERepositoryObjectType.getFolderName(type) + IPath.SEPARATOR + targetPath.toString();
  IFolder folder=ResourceUtils.getFolder(project,folderPathString,false);
  unloadUnlockedResources();
  List<IRepositoryViewObject> serializableFromFolder=getSerializableFromFolder(baseProject,folder,null,type,true,false,true,false);
  for (  IRepositoryViewObject repositoryObject : serializableFromFolder) {
    ItemState state=repositoryObject.getProperty().getItem().getState();
    state.setPath(getItemStatePath(type,targetPath).toString());
    xmiResourceManager.saveResource(state.eResource());
  }
  if (folder.exists()) {
    for (    IResource current : ResourceUtils.getMembers(folder)) {
      if (current instanceof IFolder) {
        updateItemsPath(type,targetPath.append(current.getName()));
      }
    }
  }
}",0.996845425867508
125716,"private String getParamType(IMetadataTable table,boolean isInput){
  if (functionUnit == null) {
    return null;
  }
  SAPFunctionParamData paramData=functionUnit.getParamData();
  if (paramData == null) {
    return null;
  }
  EList<SAPFunctionParameter> parameterChildrenList=null;
  if (isInput) {
    parameterChildrenList=paramData.getInputRoot().getChildren();
  }
 else {
    parameterChildrenList=paramData.getOutputRoot().getChildren();
  }
  for (  SAPFunctionParameter parameter : parameterChildrenList) {
    if (parameter.getName().equals(table.getTableName())) {
      if (parameter.getType().equals(ISAPConstant.PARAM_STRUCTURE)) {
        return ISAPConstant.PARAM_STRUCTURE.toUpperCase();
      }
 else       if (parameter.getType().equals(ISAPConstant.PARAM_TABLE)) {
        return ISAPConstant.PARAM_TABLE.toUpperCase();
      }
 else {
        return ISAPConstant.PARAM_SINGLE.toUpperCase();
      }
    }
  }
  if (ISAPConstant.SINGLE_PARAM_TABLE_NAME.equals(table.getTableName())) {
    return ISAPConstant.PARAM_TABLE.toUpperCase();
  }
  return null;
}","private String getParamType(IMetadataTable table,boolean isInput){
  if (functionUnit == null) {
    return null;
  }
  SAPFunctionParamData paramData=functionUnit.getParamData();
  if (paramData == null) {
    return null;
  }
  EList<SAPFunctionParameter> parameterChildrenList=null;
  if (isInput) {
    parameterChildrenList=paramData.getInputRoot().getChildren();
  }
 else {
    parameterChildrenList=paramData.getOutputRoot().getChildren();
  }
  for (  SAPFunctionParameter parameter : parameterChildrenList) {
    if (parameter.getName().equals(table.getTableName())) {
      if (parameter.getType().equals(ISAPConstant.PARAM_STRUCTURE)) {
        return ISAPConstant.PARAM_STRUCTURE.toUpperCase();
      }
 else       if (parameter.getType().equals(ISAPConstant.PARAM_TABLE)) {
        return ISAPConstant.PARAM_TABLE.toUpperCase();
      }
 else {
        return ISAPConstant.PARAM_SINGLE.toUpperCase();
      }
    }
  }
  if (!isInput && ISAPConstant.SINGLE_PARAM_TABLE_NAME.equals(table.getTableName())) {
    return ISAPConstant.PARAM_SINGLE.toUpperCase();
  }
  return null;
}",0.9912482726853984
125717,"private void createAuthenticationForHBase(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrpForHBase=new Group(parent,SWT.NONE);
  authenticationGrpForHBase.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrpForHBase);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrpForHBase.setLayout(authLayout);
  useKerberosForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useKerberosForHBase.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberosForHBase.setLayoutData(data);
  authenticationComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationComForHBase.setLayoutData(data);
  authenticationComForHBase.setLayout(new GridLayout(3,false));
  hbaseMasterPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  hbaseRSPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  useKeyTabForHBase=new Button(authenticationComForHBase,SWT.CHECK);
  useKeyTabForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTabForHBase.setLayoutData(data);
  keyTabCompoisteForHBase=new Composite(authenticationComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabCompoisteForHBase.setLayoutData(data);
  keyTabCompoisteForHBase.setVisible(false);
  keyTabCompoisteForHBase.setLayout(new GridLayout(5,false));
  principalForHBaseTxt=new LabelledText(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabForHBaseTxt=new LabelledFileField(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useMaprTForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHBase.setLayoutData(data);
  authenticationMaprTComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHBase.setLayoutData(data);
  authenticationMaprTComForHBase.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHBase=new Composite(authenticationMaprTComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHBase.setLayoutData(data);
  authenticationUserPassComForHBase.setLayout(new GridLayout(3,false));
  maprTUsernameForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  maprTClusterForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  addListenerHBaseAuthentication();
  initForHBaseAuthentication();
}","private void createAuthenticationForHBase(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrpForHBase=new Group(parent,SWT.NONE);
  authenticationGrpForHBase.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrpForHBase);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrpForHBase.setLayout(authLayout);
  useKerberosForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useKerberosForHBase.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberosForHBase.setLayoutData(data);
  authenticationComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationComForHBase.setLayoutData(data);
  authenticationComForHBase.setLayout(new GridLayout(3,false));
  hbaseMasterPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  hbaseRSPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  useKeyTabForHBase=new Button(authenticationComForHBase,SWT.CHECK);
  useKeyTabForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTabForHBase.setLayoutData(data);
  keyTabCompoisteForHBase=new Composite(authenticationComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabCompoisteForHBase.setLayoutData(data);
  keyTabCompoisteForHBase.setVisible(false);
  keyTabCompoisteForHBase.setLayout(new GridLayout(5,false));
  principalForHBaseTxt=new LabelledText(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabForHBaseTxt=new LabelledFileField(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useMaprTForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHBase.setLayoutData(data);
  authenticationMaprTComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHBase.setLayoutData(data);
  authenticationMaprTComForHBase.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHBase=new Composite(authenticationMaprTComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHBase.setLayoutData(data);
  authenticationUserPassComForHBase.setLayout(new GridLayout(3,false));
  maprTUsernameForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordForHBaseTxt.getTextControl().setEchoChar('*');
  maprTClusterForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  addListenerHBaseAuthentication();
  initForHBaseAuthentication();
}",0.987460815047022
125718,"private void createAuthenticationForHive(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrp=new Group(parent,SWT.NONE);
  authenticationGrp.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrp);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrp.setLayout(authLayout);
  useKerberos=new Button(authenticationGrp,SWT.CHECK);
  useKerberos.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberos.setLayoutData(data);
  authenticationCom=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationCom.setLayoutData(data);
  authenticationCom.setLayout(new GridLayout(3,false));
  hivePrincipalTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  metastoreUrlTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  driverJarTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),1);
  browseDriverJarBtn=new Button(authenticationCom,SWT.NONE);
  browseDriverJarBtn.setText(""String_Node_Str"");
  browseDriverJarBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  driverClassTxt=new LabelledCombo(authenticationCom,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseDriverClassButton=new Button(authenticationCom,SWT.NONE);
  browseDriverClassButton.setText(""String_Node_Str"");
  browseDriverClassButton.setToolTipText(Messages.getString(""String_Node_Str""));
  usernameTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  passwordTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  useKeyTab=new Button(authenticationCom,SWT.CHECK);
  useKeyTab.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTab.setLayoutData(data);
  keyTabComponent=new Composite(authenticationCom,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabComponent.setLayoutData(data);
  keyTabComponent.setVisible(false);
  keyTabComponent.setLayout(new GridLayout(5,false));
  principalTxt=new LabelledText(keyTabComponent,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabTxt=new LabelledFileField(keyTabComponent,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHive=new Button(authenticationGrp,SWT.CHECK);
  useMaprTForHive.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHive.setLayoutData(data);
  authenticationMaprTComForHive=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHive.setLayoutData(data);
  authenticationMaprTComForHive.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHive=new Composite(authenticationMaprTComForHive,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHive.setLayoutData(data);
  authenticationUserPassComForHive.setLayout(new GridLayout(3,false));
  maprTUsernameForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  maprTClusterForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  addListenerForAuthentication();
  initForAuthentication();
}","private void createAuthenticationForHive(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrp=new Group(parent,SWT.NONE);
  authenticationGrp.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrp);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrp.setLayout(authLayout);
  useKerberos=new Button(authenticationGrp,SWT.CHECK);
  useKerberos.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberos.setLayoutData(data);
  authenticationCom=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationCom.setLayoutData(data);
  authenticationCom.setLayout(new GridLayout(3,false));
  hivePrincipalTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  metastoreUrlTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  driverJarTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),1);
  browseDriverJarBtn=new Button(authenticationCom,SWT.NONE);
  browseDriverJarBtn.setText(""String_Node_Str"");
  browseDriverJarBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  driverClassTxt=new LabelledCombo(authenticationCom,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseDriverClassButton=new Button(authenticationCom,SWT.NONE);
  browseDriverClassButton.setText(""String_Node_Str"");
  browseDriverClassButton.setToolTipText(Messages.getString(""String_Node_Str""));
  usernameTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  passwordTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  useKeyTab=new Button(authenticationCom,SWT.CHECK);
  useKeyTab.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTab.setLayoutData(data);
  keyTabComponent=new Composite(authenticationCom,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabComponent.setLayoutData(data);
  keyTabComponent.setVisible(false);
  keyTabComponent.setLayout(new GridLayout(5,false));
  principalTxt=new LabelledText(keyTabComponent,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabTxt=new LabelledFileField(keyTabComponent,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHive=new Button(authenticationGrp,SWT.CHECK);
  useMaprTForHive.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHive.setLayoutData(data);
  authenticationMaprTComForHive=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHive.setLayoutData(data);
  authenticationMaprTComForHive.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHive=new Composite(authenticationMaprTComForHive,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHive.setLayoutData(data);
  authenticationUserPassComForHive.setLayout(new GridLayout(3,false));
  maprTUsernameForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordForHiveTxt.getTextControl().setEchoChar('*');
  maprTClusterForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  addListenerForAuthentication();
  initForAuthentication();
}",0.9850451118526758
125719,"public void addItem(ImportItem itemRecord,List<ImportItem> children){
  if (itemRecord != null) {
    this.allImportItemRecords.add(itemRecord);
    final Project project=itemRecord.getItemProject();
    if (project == null) {
      return;
    }
    final String technicalLabel=project.getTechnicalLabel();
    ProjectImportNode projectImportNode=this.projectNodesMap.get(technicalLabel);
    if (projectImportNode == null) {
      projectImportNode=new ProjectImportNode(project);
      this.projectNodesMap.put(technicalLabel,projectImportNode);
    }
    final Item item=itemRecord.getItem();
    if (item != null && hadoopClusterService != null && hadoopClusterService.isHadoopSubItem(item)) {
      return;
    }
    final ERepositoryObjectType itemType=itemRecord.getRepositoryType();
    ImportNode typeImportNode=findAndCreateParentTypeNode(projectImportNode,itemType);
    if (ERepositoryObjectType.PROCESS.equals(itemType) && ERepositoryObjectType.findParentType(itemType) == null) {
      StandardJobImportNode standJobImportNode=this.jobNodesMap.get(itemType.getLabel());
      if (standJobImportNode == null) {
        standJobImportNode=new StandardJobImportNode(itemType);
        this.jobNodesMap.put(itemType.getLabel(),standJobImportNode);
        typeImportNode.addChild(standJobImportNode);
      }
      ImportNode parentImportNode=standJobImportNode;
      String path=item.getState().getPath();
      if (StringUtils.isNotEmpty(path)) {
        parentImportNode=findAndCreateFolderNode(standJobImportNode,new Path(path));
      }
      ItemImportNode itemNode=new ItemImportNode(itemRecord);
      parentImportNode.addChild(itemNode);
      allImportItemNode.add(itemNode);
      if (children != null) {
        for (        ImportItem childRecord : children) {
          ItemImportNode childNode=new ItemImportNode(childRecord);
          itemNode.addChild(childNode);
        }
      }
    }
 else {
      ImportNode parentImportNode=typeImportNode;
      if (parentImportNode == null) {
        parentImportNode=projectImportNode;
      }
      String path=item.getState().getPath();
      if (StringUtils.isNotEmpty(path)) {
        parentImportNode=findAndCreateFolderNode(typeImportNode,new Path(path));
      }
      ItemImportNode itemNode=new ItemImportNode(itemRecord);
      parentImportNode.addChild(itemNode);
      allImportItemNode.add(itemNode);
      if (children != null) {
        for (        ImportItem childRecord : children) {
          ItemImportNode childNode=new ItemImportNode(childRecord);
          itemNode.addChild(childNode);
        }
      }
    }
  }
}","public void addItem(ImportItem itemRecord,List<ImportItem> children){
  if (itemRecord != null) {
    this.allImportItemRecords.add(itemRecord);
    final Project project=itemRecord.getItemProject();
    if (project == null) {
      return;
    }
    final String technicalLabel=project.getTechnicalLabel();
    ProjectImportNode projectImportNode=this.projectNodesMap.get(technicalLabel);
    if (projectImportNode == null) {
      projectImportNode=new ProjectImportNode(project);
      this.projectNodesMap.put(technicalLabel,projectImportNode);
    }
    final Item item=itemRecord.getItem();
    if (item != null && hadoopClusterService != null && hadoopClusterService.isHadoopSubItem(item)) {
      return;
    }
    final ERepositoryObjectType itemType=itemRecord.getRepositoryType();
    ImportNode typeImportNode=findAndCreateParentTypeNode(projectImportNode,itemType);
    ImportNode parentImportNode=typeImportNode;
    if (parentImportNode == null) {
      parentImportNode=projectImportNode;
    }
    if (ERepositoryObjectType.PROCESS.equals(itemType) && ERepositoryObjectType.findParentType(itemType) == null && PluginChecker.isTIS()) {
      StandardJobImportNode standJobImportNode=this.standardNodesMap.get(technicalLabel);
      if (standJobImportNode == null) {
        standJobImportNode=new StandardJobImportNode(itemType);
        this.standardNodesMap.put(technicalLabel,standJobImportNode);
        typeImportNode.addChild(standJobImportNode);
      }
      parentImportNode=standJobImportNode;
    }
    String path=item.getState().getPath();
    if (StringUtils.isNotEmpty(path)) {
      parentImportNode=findAndCreateFolderNode(typeImportNode,new Path(path));
    }
    ItemImportNode itemNode=new ItemImportNode(itemRecord);
    parentImportNode.addChild(itemNode);
    allImportItemNode.add(itemNode);
    if (children != null) {
      for (      ImportItem childRecord : children) {
        ItemImportNode childNode=new ItemImportNode(childRecord);
        itemNode.addChild(childNode);
      }
    }
  }
}",0.6471600688468159
125720,"public void clear(){
  this.allImportItemNode.clear();
  this.allImportItemRecords.clear();
  this.projectNodesMap.clear();
  this.jobNodesMap.clear();
}","public void clear(){
  this.allImportItemNode.clear();
  this.allImportItemRecords.clear();
  this.projectNodesMap.clear();
  this.standardNodesMap.clear();
}",0.964630225080386
125721,"@Override public void getPipelinedChildren(Object aParent,Set theCurrentChildren){
  theCurrentChildren.clear();
}","@Override public void getPipelinedChildren(Object aParent,Set theCurrentChildren){
  removeResourceVisitorForOverride(theCurrentChildren);
  theCurrentChildren.clear();
}",0.8028169014084507
125722,"@Override public void getPipelinedElements(Object anInput,Set theCurrentElements){
  theCurrentElements.clear();
}","@Override public void getPipelinedElements(Object anInput,Set theCurrentElements){
  removeResourceVisitorForOverride(theCurrentElements);
  theCurrentElements.clear();
}",0.8028169014084507
125723,"@Override public void dispose(){
}","@Override public void dispose(){
  this.viewer=null;
}",0.7727272727272727
125724,"@Override public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","@Override public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
  this.viewer=viewer;
}",0.8842105263157894
125725,"@Override public void dispose(){
  if (this.viewer != null && this.visitor != null && this.viewer instanceof RepoViewCommonViewer) {
    final Control control=this.viewer.getControl();
    if (control != null && !control.isDisposed()) {
      CommonNavigator commonNavigator=((RepoViewCommonViewer)this.viewer).getCommonNavigator();
      if (commonNavigator instanceof RepoViewCommonNavigator) {
        ((RepoViewCommonNavigator)commonNavigator).removeVisitor(this.visitor);
      }
    }
  }
  topLevelNodeToPathMap.clear();
  topLevelNodeToPathMap=null;
  super.dispose();
}","@Override public void dispose(){
  if (this.viewer != null && this.visitor != null && this.viewer instanceof RepoViewCommonViewer) {
    final Control control=this.viewer.getControl();
    if (control != null && !control.isDisposed()) {
      CommonNavigator commonNavigator=((RepoViewCommonViewer)this.viewer).getCommonNavigator();
      if (commonNavigator instanceof RepoViewCommonNavigator) {
        ((RepoViewCommonNavigator)commonNavigator).removeVisitor(this.visitor);
        this.visitor=null;
      }
    }
  }
  topLevelNodeToPathMap.clear();
  super.dispose();
}",0.9262792714657416
125726,"/** 
 * DOC Zqin Comment method ""format"".
 * @param input the object that was formated.
 * @param style the style of formated, it should be 0, 1, 99999.
 * @return the formated object.
 */
public static Object format(Object input,int style){
  try {
    if (checkInput(input)) {
      DecimalFormat format=null;
      BigDecimal zero=new BigDecimal(0);
      BigDecimal temp=new BigDecimal(input.toString());
      BigDecimal min=new BigDecimal(10E-5);
      BigDecimal max=new BigDecimal(9999 * 10E-5);
      boolean isUseScientific=false;
switch (style) {
case 0:
        if (temp.compareTo(min) == -1 && temp.compareTo(zero) == 1) {
          isUseScientific=true;
        }
 else         if (temp.compareTo(max) == 1 && temp.compareTo(new BigDecimal(1)) == -1) {
          input=max.toString();
        }
      format=(DecimalFormat)DecimalFormat.getPercentInstance(Locale.ENGLISH);
    format.applyPattern(""String_Node_Str"");
  break;
case 1:
min=new BigDecimal(10E-3);
if (temp.compareTo(min) == -1 && temp.compareTo(zero) == 1) {
isUseScientific=true;
}
format=(DecimalFormat)DecimalFormat.getNumberInstance(Locale.ENGLISH);
format.applyPattern(""String_Node_Str"");
break;
default :
format=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
return format.parse(input.toString());
}
if (isUseScientific) {
format.applyPattern(""String_Node_Str"");
}
return format.format(new Double(input.toString()));
}
 else {
return input;
}
}
 catch (Exception e) {
return input;
}
}","/** 
 * DOC Zqin Comment method ""format"".
 * @param input the object that was formated.
 * @param style the style of formated, it should be 0, 1,2,99999.
 * @return the formated object.
 */
public static Object format(Object input,int style){
  try {
    if (checkInput(input)) {
      DecimalFormat format=null;
      BigDecimal zero=new BigDecimal(0);
      BigDecimal temp=new BigDecimal(input.toString());
      BigDecimal min=new BigDecimal(10E-5);
      BigDecimal max=new BigDecimal(9999 * 10E-5);
      boolean isUseScientific=false;
switch (style) {
case PERCENT:
        if (temp.compareTo(min) == -1 && temp.compareTo(zero) == 1) {
          isUseScientific=true;
        }
 else         if (temp.compareTo(max) == 1 && temp.compareTo(new BigDecimal(1)) == -1) {
          input=max.toString();
        }
      format=(DecimalFormat)DecimalFormat.getPercentInstance(Locale.ENGLISH);
    format.applyPattern(""String_Node_Str"");
  break;
case INT_NUMBER:
min=new BigDecimal(10E-3);
if (temp.compareTo(min) == -1 && temp.compareTo(zero) == 1) {
isUseScientific=true;
}
format=(DecimalFormat)DecimalFormat.getNumberInstance(Locale.ENGLISH);
format.applyPattern(""String_Node_Str"");
break;
case DOUBLE_NUMBER:
min=new BigDecimal(10E-3);
if (temp.compareTo(min) == -1 && temp.compareTo(zero) == 1) {
isUseScientific=true;
}
format=(DecimalFormat)DecimalFormat.getNumberInstance(Locale.ENGLISH);
format.applyPattern(""String_Node_Str"");
break;
default :
format=(DecimalFormat)DecimalFormat.getInstance(Locale.getDefault());
return format.parse(input.toString());
}
if (isUseScientific) {
format.applyPattern(""String_Node_Str"");
}
return format.format(new Double(input.toString()));
}
 else {
return input;
}
}
 catch (Exception e) {
return input;
}
}",0.86252703120173
125727,"public void saveRelations(){
  if (!loaded && !modified) {
    return;
  }
  Project currentProject=getAimProject();
  currentProject.getEmfProject().getItemsRelations().clear();
  for (  Relation relation : currentProjectItemsRelations.keySet()) {
    ItemRelations itemRelations=PropertiesFactory.eINSTANCE.createItemRelations();
    ItemRelation baseItem=PropertiesFactory.eINSTANCE.createItemRelation();
    itemRelations.setBaseItem(baseItem);
    baseItem.setId(relation.getId());
    baseItem.setType(relation.getType());
    baseItem.setVersion(relation.getVersion());
    List<Relation> relationItemsList=new ArrayList<Relation>(currentProjectItemsRelations.get(relation));
    Collections.sort(relationItemsList,new Comparator<Relation>(){
      @Override public int compare(      Relation o1,      Relation o2){
        return o1.getType().compareTo(o2.getType());
      }
    }
);
    for (    Relation relatedItem : relationItemsList) {
      ItemRelation emfRelatedItem=PropertiesFactory.eINSTANCE.createItemRelation();
      emfRelatedItem.setId(relatedItem.getId());
      emfRelatedItem.setType(relatedItem.getType());
      emfRelatedItem.setVersion(relatedItem.getVersion());
      itemRelations.getRelatedItems().add(emfRelatedItem);
    }
    currentProject.getEmfProject().getItemsRelations().add(itemRelations);
  }
  try {
    getProxyRepositoryFactory().saveProject(currentProject);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  modified=false;
}","public void saveRelations(){
  if (!loaded && !modified) {
    return;
  }
  Project currentProject=getAimProject();
  List<ItemRelations> oldRelations=new ArrayList<ItemRelations>(currentProject.getEmfProject().getItemsRelations());
  List<ItemRelations> usedList=new ArrayList<ItemRelations>();
  for (  Relation relation : currentProjectItemsRelations.keySet()) {
    ItemRelations itemRelations=null;
    boolean exist=false;
    for (    ItemRelations relations : oldRelations) {
      if (relations.getBaseItem().getId().equals(relation.getId())) {
        usedList.add(relations);
        itemRelations=relations;
        exist=true;
        break;
      }
    }
    if (itemRelations == null) {
      itemRelations=PropertiesFactory.eINSTANCE.createItemRelations();
      ItemRelation baseItem=PropertiesFactory.eINSTANCE.createItemRelation();
      itemRelations.setBaseItem(baseItem);
      baseItem.setId(relation.getId());
      baseItem.setType(relation.getType());
      baseItem.setVersion(relation.getVersion());
    }
    List<Relation> relationItemsList=new ArrayList<Relation>(currentProjectItemsRelations.get(relation));
    Collections.sort(relationItemsList,new Comparator<Relation>(){
      @Override public int compare(      Relation o1,      Relation o2){
        return o1.getType().compareTo(o2.getType());
      }
    }
);
    for (    Relation relatedItem : relationItemsList) {
      List<ItemRelation> relationList=new ArrayList<ItemRelation>(itemRelations.getRelatedItems());
      boolean found=false;
      for (      ItemRelation item : relationList) {
        if (item.getId().equals(relatedItem.getId())) {
          found=true;
          break;
        }
      }
      if (found) {
        continue;
      }
      ItemRelation emfRelatedItem=PropertiesFactory.eINSTANCE.createItemRelation();
      emfRelatedItem.setId(relatedItem.getId());
      emfRelatedItem.setType(relatedItem.getType());
      emfRelatedItem.setVersion(relatedItem.getVersion());
      itemRelations.getRelatedItems().add(emfRelatedItem);
    }
    if (!exist) {
      currentProject.getEmfProject().getItemsRelations().add(itemRelations);
    }
  }
  oldRelations.removeAll(usedList);
  currentProject.getEmfProject().getItemsRelations().removeAll(oldRelations);
  try {
    getProxyRepositoryFactory().saveProject(currentProject);
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  modified=false;
}",0.7596348884381339
125728,"@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon && (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion()) || nbMigrationsToDo > 0)) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}","@Override public void executeMigrationTasksForLogon(final Project project,final boolean beforeLogon,final IProgressMonitor monitorWrap){
  String taskDesc=""String_Node_Str"" + project.getLabel() + ""String_Node_Str"";
  log.trace(taskDesc);
  final List<IProjectMigrationTask> toExecute=GetTasksHelper.getProjectTasks(beforeLogon);
  final List<MigrationTask> done=new ArrayList<MigrationTask>(project.getEmfProject().getMigrationTask());
  if (beforeLogon) {
    boolean isNewProject=project.getEmfProject().getProductVersion() == null ? true : false;
    setMigrationOnNewProject(beforeLogon && isNewProject && done.isEmpty());
  }
  sortMigrationTasks(toExecute);
  int nbMigrationsToDo=0;
  for (  IProjectMigrationTask task : toExecute) {
    MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
    if (mgTask == null && !task.isDeprecated()) {
      nbMigrationsToDo++;
    }
  }
  if (!beforeLogon) {
    MigrationUtil.removeMigrationTaskById(done,RELATION_TASK);
    RelationshipItemBuilder.getInstance().unloadRelations();
    nbMigrationsToDo++;
  }
  if (nbMigrationsToDo == 0) {
    return;
  }
  MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  boolean haveAnyBinFolder=false;
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IProject fsProject=workspace.getRoot().getProject(project.getTechnicalLabel());
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])ERepositoryObjectType.values()) {
    if (!type.hasFolder()) {
      continue;
    }
    String folderName=ERepositoryObjectType.getFolderName(type);
    if (folderName == null || ""String_Node_Str"".equals(folderName)) {
      continue;
    }
    IFolder folder=fsProject.getFolder(folderName);
    if (folder.exists() && folder.getFolder(""String_Node_Str"").exists()) {
      haveAnyBinFolder=true;
      break;
    }
  }
  if (haveAnyBinFolder) {
    MigrationUtil.removeMigrationTaskById(done,""String_Node_Str"");
  }
  final SubProgressMonitor subProgressMonitor=new SubProgressMonitor(monitorWrap,toExecute.size());
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  final IProxyRepositoryFactory repFactory=service.getProxyRepositoryFactory();
  RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(project,taskDesc){
    @Override public void run() throws PersistenceException {
      final IWorkspaceRunnable op=new IWorkspaceRunnable(){
        @Override public void run(        IProgressMonitor monitor) throws CoreException {
          if (!isMigrationOnNewProject() && beforeLogon) {
            appendToLogFile(project,""String_Node_Str"" + project.getLabel() + ""String_Node_Str"");
          }
          try {
            boolean needSave=false;
            if (!isMigrationOnNewProject()) {
              if (!beforeLogon) {
                ERepositoryObjectType[] types=(ERepositoryObjectType[])ERepositoryObjectType.values();
                Arrays.sort(types,new Comparator<ERepositoryObjectType>(){
                  @Override public int compare(                  ERepositoryObjectType arg0,                  ERepositoryObjectType arg1){
                    if (arg0 == ERepositoryObjectType.PROCESS) {
                      return 1;
                    }
                    if (arg0 == ERepositoryObjectType.JOBLET) {
                      return 1;
                    }
                    return 0;
                  }
                }
);
                for (                ERepositoryObjectType type : types) {
                  if (!type.isResourceItem()) {
                    continue;
                  }
                  List<IRepositoryViewObject> objects=repFactory.getAll(project,type,true,true);
                  for (                  IRepositoryViewObject object : objects) {
                    Item item=object.getProperty().getItem();
                    monitorWrap.subTask(""String_Node_Str"" + item.getProperty().getLabel());
                    boolean hadFailed=false;
                    subProgressMonitor.worked(1);
                    for (                    IProjectMigrationTask task : toExecute) {
                      if (monitorWrap.isCanceled()) {
                        throw new OperationCanceledException(Messages.getString(""String_Node_Str"",task.getName()));
                      }
                      MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
                      if (mgTask == null && !task.isDeprecated()) {
                        try {
                          ExecutionResult status=task.execute(project,item);
switch (status) {
case SUCCESS_WITH_ALERT:
                            if (task.getStatus() != ExecutionResult.FAILURE) {
                              task.setStatus(status);
                            }
case SUCCESS_NO_ALERT:
                          if (task.getStatus() != ExecutionResult.FAILURE) {
                            task.setStatus(status);
                          }
case NOTHING_TO_DO:
                        if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                          task.setStatus(status);
                        }
                      break;
case SKIPPED:
                    if (task.getStatus() != ExecutionResult.SUCCESS_WITH_ALERT && task.getStatus() != ExecutionResult.SUCCESS_NO_ALERT && task.getStatus() != ExecutionResult.FAILURE) {
                      task.setStatus(status);
                    }
                  break;
case FAILURE:
                task.setStatus(status);
default :
              task.setStatus(status);
            if (!isMigrationOnNewProject()) {
              if (!hadFailed) {
                hadFailed=true;
                Property prop=object.getProperty();
                Resource resource=prop.eResource();
                String itemInfo=null;
                if (resource != null) {
                  IPath path=URIHelper.convert(resource.getURI());
                  if (path != null) {
                    itemInfo=path.toPortableString();
                  }
                }
                if (itemInfo == null) {
                  itemInfo=prop.toString();
                }
                appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
              }
              appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
            }
          break;
      }
    }
 catch (    Exception e) {
      doneThisSession.add(task);
      ExceptionHandler.process(e);
      if (!isMigrationOnNewProject()) {
        if (!hadFailed) {
          hadFailed=true;
          Property prop=object.getProperty();
          Resource resource=prop.eResource();
          String itemInfo=null;
          if (resource != null) {
            IPath path=URIHelper.convert(resource.getURI());
            if (path != null) {
              itemInfo=path.toPortableString();
            }
          }
          if (itemInfo == null) {
            itemInfo=prop.toString();
          }
          appendToLogFile(project,""String_Node_Str"" + itemInfo + ""String_Node_Str"");
        }
        appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
    }
  }
}
if (object instanceof RepositoryObject) {
  ((RepositoryObject)object).unload();
}
}
monitorWrap.subTask(""String_Node_Str"");
}
}
for (IProjectMigrationTask task : toExecute) {
MigrationTask mgTask=MigrationUtil.findMigrationTask(done,task);
if (mgTask == null && !task.isDeprecated()) {
try {
ExecutionResult status;
if (beforeLogon) {
  status=task.execute(project);
  task.setStatus(status);
}
 else {
  status=task.getStatus();
}
switch (status) {
case SUCCESS_WITH_ALERT:
  if (!isMigrationOnNewProject()) {
    doneThisSession.add(task);
  }
case SUCCESS_NO_ALERT:
if (!isMigrationOnNewProject()) {
  log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
  appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
case NOTHING_TO_DO:
if (!isMigrationOnNewProject() && task.getStatus() == ExecutionResult.NOTHING_TO_DO) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case SKIPPED:
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
if (!isMigrationOnNewProject()) {
appendToLogFile(project,""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
break;
case FAILURE:
doneThisSession.add(task);
default :
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
break;
}
}
 catch (Exception e) {
doneThisSession.add(task);
ExceptionHandler.process(e);
log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
}
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
}
 else {
for (IProjectMigrationTask task : toExecute) {
task.setStatus(ExecutionResult.NOTHING_TO_DO);
done.add(MigrationUtil.convertMigrationTask(task));
}
needSave=true;
}
if (needSave) {
saveProjectMigrationTasksDone(project,done);
}
if (!RelationshipItemBuilder.INDEX_VERSION.equals(project.getEmfProject().getItemsRelationVersion())) {
project.getEmfProject().setItemsRelationVersion(RelationshipItemBuilder.INDEX_VERSION);
}
if (!isMigrationOnNewProject()) {
RelationshipItemBuilder.getInstance().saveRelations();
}
}
 catch (PersistenceException e) {
throw new CoreException(new Status(Status.ERROR,""String_Node_Str"",e.getMessage(),e));
}
if (!isMigrationOnNewProject() && !beforeLogon) {
appendToLogFile(project,""String_Node_Str"");
}
}
}
;
try {
IWorkspace workspace1=ResourcesPlugin.getWorkspace();
ISchedulingRule schedulingRule=workspace1.getRoot();
workspace1.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitorWrap);
}
 catch (CoreException e) {
throw new PersistenceException(e);
}
}
}
;
repositoryWorkUnit.setAvoidUnloadResources(true);
repFactory.executeRepositoryWorkUnit(repositoryWorkUnit);
if (!beforeLogon) {
setMigrationOnNewProject(false);
}
}",0.9937906564163216
125729,"/** 
 * For TDI-36019
 */
@Test public void testGetInstance(){
  ProjectManager projectManager=PowerMockito.mock(ProjectManager.class);
  PowerMockito.mockStatic(ProjectManager.class);
  when(ProjectManager.getInstance()).thenReturn(projectManager);
  CoreRuntimePlugin coreRuntimePlugin=PowerMockito.mock(CoreRuntimePlugin.class);
  PowerMockito.mockStatic(CoreRuntimePlugin.class);
  when(CoreRuntimePlugin.getInstance()).thenReturn(coreRuntimePlugin);
  String projectName=""String_Node_Str"";
  Project project=new Project(projectName);
  project.setTechnicalLabel(projectName);
  RelationshipItemBuilder relationshipItemBuilder=RelationshipItemBuilder.getInstance(project,true);
  assert(project == relationshipItemBuilder.getAimProject());
  when(projectManager.getCurrentProject()).thenReturn(project);
  assert(project == RelationshipItemBuilder.getInstance().getAimProject());
  Project project2=new Project(projectName);
  project2.setTechnicalLabel(projectName);
  when(projectManager.getCurrentProject()).thenReturn(project2);
  assert(project2 == RelationshipItemBuilder.getInstance().getAimProject());
}","/** 
 * For TDI-36019
 */
@Test public void testGetInstance(){
  String projectName=""String_Node_Str"";
  Project project=new Project(projectName);
  project.setTechnicalLabel(projectName);
  RelationshipItemBuilder relationshipItemBuilder=RelationshipItemBuilder.getInstance(project,true);
  assert(project == relationshipItemBuilder.getAimProject());
  assert(ProjectManager.getInstance().getCurrentProject() == RelationshipItemBuilder.getInstance().getAimProject());
  Project project2=new Project(projectName);
  project2.setTechnicalLabel(projectName);
  assert(project2 == RelationshipItemBuilder.getInstance().getAimProject());
}",0.4708571428571428
125730,"private void createNewSchema(List<Map<String,Object>> paramValues,IMetadataTable newMetadatTable,String tableType){
  if (newMetadatTable != null && tableType.equals(newMetadatTable.getTableType())) {
    boolean found=false;
    if (paramValues.size() > 0) {
      List<IMetadataTable> metadataList=node.getMetadataList();
      for (      IMetadataTable metadata : metadataList) {
        if (tableType.equals(metadata.getTableType())) {
          if (metadata.getLabel() != null && metadata.getLabel().equals(newMetadatTable.getLabel())) {
            found=true;
            MetadataToolHelper.copyTable(newMetadatTable,metadata);
          }
        }
      }
    }
    if (found) {
      return;
    }
    Boolean isInput=MetadataSchemaType.INPUT.name().equals(tableType);
    Map valueMap=null;
    String uinqueTableName=node.getProcess().generateUniqueConnectionName(MultiSchemasUtil.getConnectionBaseName(newMetadatTable.getLabel()));
    String paramType=getParamType(newMetadatTable,isInput);
    if (paramType == null) {
      return;
    }
    if (selectionIndex != null && selectionIndex < paramValues.size()) {
      valueMap=paramValues.get(selectionIndex);
    }
    if (valueMap == null) {
      valueMap=new HashMap();
      paramValues.add(valueMap);
    }
    valueMap.put(ISAPConstant.NAME,TalendQuoteUtils.addQuotes(newMetadatTable.getLabel()));
    valueMap.put(ISAPConstant.TYPE,paramType);
    valueMap.put(ISAPConstant.FIELD_SCHEMA,uinqueTableName);
    if (isInput) {
      valueMap.put(ISAPConstant.PARENT_ROW,""String_Node_Str"");
      Map<String,String> properties=newMetadatTable.getAdditionalProperties();
      if (properties != null) {
        properties.put(ISINPUT,TRUE);
      }
    }
    if (oldMetadataTable != null) {
      CoreUIPlugin.getDefault().getDesignerCoreService().removeConnection(node,oldMetadataTable.getTableName());
      node.getMetadataList().remove(oldMetadataTable);
    }
    newMetadatTable.setTableName(uinqueTableName);
    newMetadatTable.setLabel(uinqueTableName);
    node.getProcess().addUniqueConnectionName(uinqueTableName);
    node.getMetadataList().add(newMetadatTable);
  }
}","private void createNewSchema(List<Map<String,Object>> paramValues,IMetadataTable newMetadatTable,String tableType){
  if (newMetadatTable != null && tableType.equals(newMetadatTable.getTableType())) {
    boolean found=false;
    if (paramValues.size() > 0) {
      List<IMetadataTable> metadataList=node.getMetadataList();
      for (      IMetadataTable metadata : metadataList) {
        if (tableType.equals(metadata.getTableType())) {
          if (metadata.getLabel() != null && metadata.getLabel().equals(newMetadatTable.getLabel())) {
            found=true;
            MetadataToolHelper.copyTable(newMetadatTable,metadata);
          }
        }
      }
    }
    if (found) {
      return;
    }
    Boolean isInput=MetadataSchemaType.INPUT.name().equals(tableType);
    Map valueMap=null;
    String uinqueTableName=node.getProcess().generateUniqueConnectionName(MultiSchemasUtil.getConnectionBaseName(newMetadatTable.getLabel()));
    String paramType=getParamType(newMetadatTable,isInput);
    if (paramType == null) {
      return;
    }
    if (selectionIndex != null && selectionIndex < paramValues.size()) {
      valueMap=paramValues.get(selectionIndex);
    }
    if (valueMap == null) {
      valueMap=new HashMap();
      paramValues.add(valueMap);
    }
    valueMap.put(ISAPConstant.NAME,TalendQuoteUtils.addQuotes(newMetadatTable.getLabel()));
    valueMap.put(ISAPConstant.TYPE,paramType);
    valueMap.put(ISAPConstant.FIELD_SCHEMA,uinqueTableName);
    if (isInput) {
      valueMap.put(ISAPConstant.PARENT_ROW,""String_Node_Str"");
      if (functionUnit != null && functionUnit.getParamData() != null && functionUnit.getParamData().getInputRoot() != null) {
        for (        SAPFunctionParameter param : functionUnit.getParamData().getInputRoot().getChildren()) {
          if (param.getName().equals(newMetadatTable.getTableName())) {
            valueMap.put(ISAPConstant.CHANGING,param.isChanging());
          }
        }
      }
      Map<String,String> properties=newMetadatTable.getAdditionalProperties();
      if (properties != null) {
        properties.put(ISINPUT,TRUE);
      }
    }
    if (oldMetadataTable != null) {
      CoreUIPlugin.getDefault().getDesignerCoreService().removeConnection(node,oldMetadataTable.getTableName());
      node.getMetadataList().remove(oldMetadataTable);
    }
    newMetadatTable.setTableName(uinqueTableName);
    newMetadatTable.setLabel(uinqueTableName);
    node.getProcess().addUniqueConnectionName(uinqueTableName);
    node.getMetadataList().add(newMetadatTable);
  }
}",0.9134962805526036
125731,"/** 
 * @param pane
 * @param viewport
 */
public AnimatableZoomManager(ScalableFigure pane,Viewport viewport){
  super(pane,viewport);
}","/** 
 * @param pane
 * @param viewport
 */
public AnimatableZoomManager(ScalableFigure pane,Viewport viewport){
  super(pane,viewport);
  currentZoom=1.0;
}",0.9351535836177476
125732,"private boolean isTestCasesLocked(RepositoryNode node){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    IRepositoryViewObject nodeObject=child.getObject();
    if (nodeObject != null && nodeObject.getProperty() != null && nodeObject.getProperty().getItem() != null) {
      if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
        if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean isTestCasesLocked(IRepositoryNode node){
  if (node.getObject() == null) {
    return false;
  }
  if (node.getObject().getProperty() == null) {
    return false;
  }
  Item item=node.getObject().getProperty().getItem();
  if (item instanceof FolderItem) {
    for (    IRepositoryNode child : node.getChildren()) {
      if (isTestCasesLocked(child)) {
        return true;
      }
    }
  }
 else   if (item instanceof ProcessItem) {
    ProcessItem processItem=(ProcessItem)item;
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<IRepositoryViewObject> objectList=testContainerService.listExistingTestCases(processItem.getProperty().getId());
        for (        IRepositoryViewObject nodeObject : objectList) {
          if (nodeObject != null && nodeObject.getProperty() != null && nodeObject.getProperty().getItem() != null) {
            if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
              if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}",0.4997720018239854
125733,"/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param node
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(RepositoryNode node,String itemName,ERepositoryObjectType type,TreeSelection selectionInClipboard){
  if (!isValid(node,itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(type),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (itemName.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    ERepositoryObjectType repositoryType=node.getObjectType();
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS || repositoryType == ERepositoryObjectType.PROCESS_STORM || repositoryType == ERepositoryObjectType.PROCESS_MR) {
        try {
          List<IRepositoryViewObject> listExistingObjects=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true,false);
          if (PluginChecker.isStormPluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_STORM,true,false));
          }
          if (PluginChecker.isMapReducePluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_MR,true,false));
          }
          Property property=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getProperty();
          if (property != null && (!repositoryFactory.isNameAvailable(property.getItem(),itemName,listExistingObjects) || itemName.equals(property.getLabel()))) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 catch (        PersistenceException e1) {
          return Messages.getString(""String_Node_Str"");
        }
      }
 else {
        boolean isTestContainer=false;
        List<IRepositoryViewObject> testObjectList=new ArrayList<IRepositoryViewObject>();
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
          ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
          if (testContainerService != null) {
            isTestContainer=testContainerService.isTestContainerType(repositoryType);
            if (isTestContainer) {
              testObjectList=testContainerService.listExistingTestCases();
            }
          }
        }
        if (isTestContainer && !testObjectList.isEmpty()) {
          try {
            if (!repositoryFactory.isNameAvailable(node.getObject().getProperty().getItem(),itemName,testObjectList)) {
              return Messages.getString(""String_Node_Str"");
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 else {
          try {
            Item testNewItem=createNewItem();
            if (testNewItem != null) {
              if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
                return Messages.getString(""String_Node_Str"");
              }
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
      }
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param node
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(RepositoryNode node,String itemName,ERepositoryObjectType type,TreeSelection selectionInClipboard){
  if (!isValid(node,itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(type),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (itemName.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    ERepositoryObjectType repositoryType=node.getObjectType();
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS || repositoryType == ERepositoryObjectType.PROCESS_STORM || repositoryType == ERepositoryObjectType.PROCESS_MR) {
        try {
          List<IRepositoryViewObject> listExistingObjects=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true,false);
          if (PluginChecker.isStormPluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_STORM,true,false));
          }
          if (PluginChecker.isMapReducePluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_MR,true,false));
          }
          Property property=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getProperty();
          if (property != null && (!repositoryFactory.isNameAvailable(property.getItem(),itemName,listExistingObjects) || itemName.equals(property.getLabel()))) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 catch (        PersistenceException e1) {
          return Messages.getString(""String_Node_Str"");
        }
      }
 else {
        boolean isTestContainer=false;
        List<IRepositoryViewObject> testObjectList=new ArrayList<IRepositoryViewObject>();
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
          ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
          if (testContainerService != null) {
            isTestContainer=testContainerService.isTestContainerType(repositoryType);
            if (isTestContainer) {
              testObjectList=testContainerService.listExistingTestCases(null);
            }
          }
        }
        if (isTestContainer && !testObjectList.isEmpty()) {
          try {
            if (!repositoryFactory.isNameAvailable(node.getObject().getProperty().getItem(),itemName,testObjectList)) {
              return Messages.getString(""String_Node_Str"");
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 else {
          try {
            Item testNewItem=createNewItem();
            if (testNewItem != null) {
              if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
                return Messages.getString(""String_Node_Str"");
              }
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
      }
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}",0.99948132780083
125734,"private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray,boolean showDownloadIfNotExist){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    String jarPath=libPath + PATH_SEPARATOR + driverName;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      driverNotExist.add(driverName);
    }
    jarPathList.add(jarFile.getAbsolutePath());
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,showDownloadIfNotExist,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}","private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray,boolean showDownloadIfNotExist){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    if (StringUtils.isNotEmpty(driverName)) {
      String jarPath=libPath + PATH_SEPARATOR + driverName;
      File jarFile=new File(jarPath);
      if (!jarFile.exists()) {
        driverNotExist.add(driverName);
      }
      jarPathList.add(jarFile.getAbsolutePath());
    }
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,showDownloadIfNotExist,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}",0.9703153988868276
125735,"private static String getImpalaURLString(boolean supportContext,String server,String port,String sid,String Principal){
  String s=EDatabaseConnTemplate.IMPALA.getUrlTemplate(EDatabaseVersion4Drivers.IMPALA_CDH5);
  String standardURlString=getImpalaURlString(s,supportContext,server,port,sid);
  String principalSuffix=""String_Node_Str"";
  boolean hasPrinc=false;
  String[] urlArray=standardURlString.split(SEMICOLON);
  if (urlArray[urlArray.length - 1].startsWith(principalSuffix)) {
    hasPrinc=true;
  }
  if (hasPrinc) {
    if (Principal == null) {
      standardURlString=standardURlString.substring(0,standardURlString.lastIndexOf(principalSuffix));
    }
  }
 else {
    if (Principal != null) {
      standardURlString=standardURlString.concat(SEMICOLON).concat(principalSuffix).concat(Principal);
    }
  }
  return standardURlString;
}","private static String getImpalaURLString(boolean supportContext,String server,String port,String sid,String Principal){
  String s=EDatabaseConnTemplate.IMPALA.getUrlTemplate(null);
  String standardURlString=getImpalaURlString(s,supportContext,server,port,sid);
  String principalSuffix=""String_Node_Str"";
  boolean hasPrinc=false;
  String[] urlArray=standardURlString.split(SEMICOLON);
  if (urlArray[urlArray.length - 1].startsWith(principalSuffix)) {
    hasPrinc=true;
  }
  if (hasPrinc) {
    if (Principal == null) {
      standardURlString=standardURlString.substring(0,standardURlString.lastIndexOf(principalSuffix));
    }
  }
 else {
    if (Principal != null) {
      standardURlString=standardURlString.concat(SEMICOLON).concat(principalSuffix).concat(Principal);
    }
  }
  return standardURlString;
}",0.9760191846522782
125736,"/** 
 * @param pane
 * @param viewport
 */
public AnimatableZoomManager(ScalableFigure pane,Viewport viewport){
  super(pane,viewport);
}","/** 
 * @param pane
 * @param viewport
 */
public AnimatableZoomManager(ScalableFigure pane,Viewport viewport){
  super(pane,viewport);
  currentZoom=1.0;
}",0.9351535836177476
125737,"private boolean isTestCasesLocked(RepositoryNode node){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    IRepositoryViewObject nodeObject=child.getObject();
    if (nodeObject != null && nodeObject.getProperty() != null && nodeObject.getProperty().getItem() != null) {
      if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
        if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean isTestCasesLocked(IRepositoryNode node){
  if (node.getObject() == null) {
    return false;
  }
  if (node.getObject().getProperty() == null) {
    return false;
  }
  Item item=node.getObject().getProperty().getItem();
  if (item instanceof FolderItem) {
    for (    IRepositoryNode child : node.getChildren()) {
      if (isTestCasesLocked(child)) {
        return true;
      }
    }
  }
 else   if (item instanceof ProcessItem) {
    ProcessItem processItem=(ProcessItem)item;
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<IRepositoryViewObject> objectList=testContainerService.listExistingTestCases(processItem.getProperty().getId());
        for (        IRepositoryViewObject nodeObject : objectList) {
          if (nodeObject != null && nodeObject.getProperty() != null && nodeObject.getProperty().getItem() != null) {
            if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
              if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}",0.4997720018239854
125738,"/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param node
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(RepositoryNode node,String itemName,ERepositoryObjectType type,TreeSelection selectionInClipboard){
  if (!isValid(node,itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(type),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (itemName.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    ERepositoryObjectType repositoryType=node.getObjectType();
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS || repositoryType == ERepositoryObjectType.PROCESS_STORM || repositoryType == ERepositoryObjectType.PROCESS_MR) {
        try {
          List<IRepositoryViewObject> listExistingObjects=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true,false);
          if (PluginChecker.isStormPluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_STORM,true,false));
          }
          if (PluginChecker.isMapReducePluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_MR,true,false));
          }
          Property property=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getProperty();
          if (property != null && (!repositoryFactory.isNameAvailable(property.getItem(),itemName,listExistingObjects) || itemName.equals(property.getLabel()))) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 catch (        PersistenceException e1) {
          return Messages.getString(""String_Node_Str"");
        }
      }
 else {
        boolean isTestContainer=false;
        List<IRepositoryViewObject> testObjectList=new ArrayList<IRepositoryViewObject>();
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
          ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
          if (testContainerService != null) {
            isTestContainer=testContainerService.isTestContainerType(repositoryType);
            if (isTestContainer) {
              testObjectList=testContainerService.listExistingTestCases();
            }
          }
        }
        if (isTestContainer && !testObjectList.isEmpty()) {
          try {
            if (!repositoryFactory.isNameAvailable(node.getObject().getProperty().getItem(),itemName,testObjectList)) {
              return Messages.getString(""String_Node_Str"");
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 else {
          try {
            Item testNewItem=createNewItem();
            if (testNewItem != null) {
              if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
                return Messages.getString(""String_Node_Str"");
              }
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
      }
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param node
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(RepositoryNode node,String itemName,ERepositoryObjectType type,TreeSelection selectionInClipboard){
  if (!isValid(node,itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(type),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (itemName.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    ERepositoryObjectType repositoryType=node.getObjectType();
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS || repositoryType == ERepositoryObjectType.PROCESS_STORM || repositoryType == ERepositoryObjectType.PROCESS_MR) {
        try {
          List<IRepositoryViewObject> listExistingObjects=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true,false);
          if (PluginChecker.isStormPluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_STORM,true,false));
          }
          if (PluginChecker.isMapReducePluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_MR,true,false));
          }
          Property property=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getProperty();
          if (property != null && (!repositoryFactory.isNameAvailable(property.getItem(),itemName,listExistingObjects) || itemName.equals(property.getLabel()))) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 catch (        PersistenceException e1) {
          return Messages.getString(""String_Node_Str"");
        }
      }
 else {
        boolean isTestContainer=false;
        List<IRepositoryViewObject> testObjectList=new ArrayList<IRepositoryViewObject>();
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
          ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
          if (testContainerService != null) {
            isTestContainer=testContainerService.isTestContainerType(repositoryType);
            if (isTestContainer) {
              testObjectList=testContainerService.listExistingTestCases(null);
            }
          }
        }
        if (isTestContainer && !testObjectList.isEmpty()) {
          try {
            if (!repositoryFactory.isNameAvailable(node.getObject().getProperty().getItem(),itemName,testObjectList)) {
              return Messages.getString(""String_Node_Str"");
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 else {
          try {
            Item testNewItem=createNewItem();
            if (testNewItem != null) {
              if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
                return Messages.getString(""String_Node_Str"");
              }
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
      }
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}",0.99948132780083
125739,public List<IRepositoryViewObject> listExistingTestCases();,public List<IRepositoryViewObject> listExistingTestCases(String originalParentID);,0.8368794326241135
125740,"@Override public void moveObjectMulti(IRepositoryViewObject[] objToMoves,IPath newPath) throws PersistenceException {
  List<Resource> allResource=new ArrayList<Resource>();
  Map<Resource,IFolder> resourceFolderMap=new HashMap<Resource,IFolder>();
  IPath parentPath=null;
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceUtils.getProject(project);
  List<IRepositoryViewObject> allRepositoryViewObject=new ArrayList<IRepositoryViewObject>();
  for (  IRepositoryViewObject objToMove : objToMoves) {
    String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
    IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
    parentPath=folder.getFullPath();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
    FolderItem folderItem=getFolderItem(project,itemType,newPath);
    List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
    for (    IRepositoryViewObject oject : objects) {
      if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
        throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
      }
    }
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      allRepositoryViewObject.add(obj);
      Item currentItem=obj.getProperty().getItem();
      if (currentItem.getParent() instanceof FolderItem) {
        ((FolderItem)currentItem.getParent()).getChildren().remove(currentItem);
      }
      FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
      newFolderItem.getChildren().add(currentItem);
      currentItem.setParent(newFolderItem);
      ItemState state=obj.getProperty().getItem().getState();
      state.setPath(newPath.toString());
      xmiResourceManager.saveResource(state.eResource());
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
        allResource.add(resource);
        resourceFolderMap.put(resource,folder);
      }
    }
  }
  Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
  List<Resource> crossReferences=new ArrayList<Resource>();
  for (  Resource resource : allResource) {
    IFolder folder=resourceFolderMap.get(resource);
    IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
    resourceAndPathMap.put(resource,path);
    crossReferences.addAll(findCrossReference(resource));
    moveResource(resource,path);
  }
  svnMoveResource(allResource,parentPath,resourceAndPathMap);
  saveCrossReference(crossReferences);
  for (  IRepositoryViewObject objToMove : objToMoves) {
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
  }
  saveProject(project);
}","@Override public void moveObjectMulti(IRepositoryViewObject[] objToMoves,IPath newPath) throws PersistenceException {
  List<Resource> allResource=new ArrayList<Resource>();
  Map<Resource,IFolder> resourceFolderMap=new HashMap<Resource,IFolder>();
  IPath parentPath=null;
  Project project=getRepositoryContext().getProject();
  IProject fsProject=ResourceUtils.getProject(project);
  List<IRepositoryViewObject> allRepositoryViewObject=new ArrayList<IRepositoryViewObject>();
  for (  IRepositoryViewObject objToMove : objToMoves) {
    String folderName=ERepositoryObjectType.getFolderName(objToMove.getRepositoryObjectType()) + IPath.SEPARATOR + newPath;
    IFolder folder=ResourceUtils.getFolder(fsProject,folderName,true);
    parentPath=folder.getFullPath();
    ERepositoryObjectType itemType=ERepositoryObjectType.getItemType(objToMove.getProperty().getItem());
    FolderItem folderItem=getFolderItem(project,itemType,newPath);
    List<IRepositoryViewObject> objects=getSerializableFromFolder(project,folderItem,null,itemType,false,false,true,true,false);
    for (    IRepositoryViewObject oject : objects) {
      if (oject.getLabel().equalsIgnoreCase(objToMove.getLabel())) {
        throw new PersistenceException(""String_Node_Str"" + oject.getLabel() + ""String_Node_Str""+ newPath.toPortableString());
      }
    }
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      allRepositoryViewObject.add(obj);
      Item currentItem=obj.getProperty().getItem();
      FolderItem newFolderItem=getFolderItem(project,objToMove.getRepositoryObjectType(),newPath);
      newFolderItem.getChildren().add(currentItem);
      currentItem.setParent(newFolderItem);
      ItemState state=obj.getProperty().getItem().getState();
      state.setPath(newPath.toString());
      xmiResourceManager.saveResource(state.eResource());
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
        allResource.add(resource);
        resourceFolderMap.put(resource,folder);
      }
    }
  }
  Map<Resource,IPath> resourceAndPathMap=new HashMap<Resource,IPath>();
  List<Resource> crossReferences=new ArrayList<Resource>();
  for (  Resource resource : allResource) {
    IFolder folder=resourceFolderMap.get(resource);
    IPath path=folder.getFullPath().append(resource.getURI().lastSegment());
    resourceAndPathMap.put(resource,path);
    crossReferences.addAll(findCrossReference(resource));
    moveResource(resource,path);
  }
  svnMoveResource(allResource,parentPath,resourceAndPathMap);
  saveCrossReference(crossReferences);
  for (  IRepositoryViewObject objToMove : objToMoves) {
    List<IRepositoryViewObject> allVersionToMove=getAllVersion(getRepositoryContext().getProject(),objToMove.getId(),false);
    for (    IRepositoryViewObject obj : allVersionToMove) {
      List<Resource> affectedResources=xmiResourceManager.getAffectedResources(obj.getProperty());
      for (      Resource resource : affectedResources) {
        xmiResourceManager.saveResource(resource);
      }
    }
  }
  saveProject(project);
}",0.9781517567168586
125741,"private Set<Relation> getItemsHaveRelationWith(Map<Relation,Set<Relation>> itemsRelations,String itemId,boolean includeTestCase){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (id != null) {
        Relation tmpRelatedItem=null;
        if (id.indexOf(""String_Node_Str"") != -1) {
          try {
            tmpRelatedItem=(Relation)relatedItem.clone();
            tmpRelatedItem.setId(id.split(""String_Node_Str"")[0]);
          }
 catch (          CloneNotSupportedException e) {
            log.error(e);
          }
        }
 else {
          tmpRelatedItem=relatedItem;
        }
        if (tmpRelatedItem != null && itemId.equals(id)) {
          if (!includeTestCase && TEST_RELATION.equals(tmpRelatedItem.getType())) {
            continue;
          }
          relations.add(baseItem);
          break;
        }
      }
    }
  }
  return relations;
}","private Set<Relation> getItemsHaveRelationWith(Map<Relation,Set<Relation>> itemsRelations,String itemId){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (id != null) {
        Relation tmpRelatedItem=null;
        if (id.indexOf(""String_Node_Str"") != -1) {
          try {
            tmpRelatedItem=(Relation)relatedItem.clone();
            tmpRelatedItem.setId(id.split(""String_Node_Str"")[0]);
          }
 catch (          CloneNotSupportedException e) {
            log.error(e);
          }
        }
 else {
          tmpRelatedItem=relatedItem;
        }
        if (tmpRelatedItem != null && itemId.equals(id)) {
          relations.add(baseItem);
          break;
        }
      }
    }
  }
  return relations;
}",0.8347107438016529
125742,"/** 
 * @param pane
 * @param viewport
 */
public AnimatableZoomManager(ScalableFigure pane,Viewport viewport){
  super(pane,viewport);
}","/** 
 * @param pane
 * @param viewport
 */
public AnimatableZoomManager(ScalableFigure pane,Viewport viewport){
  super(pane,viewport);
  currentZoom=1.0;
}",0.9351535836177476
125743,"private boolean isTestCasesLocked(RepositoryNode node){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  for (  IRepositoryNode child : node.getChildren()) {
    IRepositoryViewObject nodeObject=child.getObject();
    if (nodeObject != null && nodeObject.getProperty() != null && nodeObject.getProperty().getItem() != null) {
      if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
        if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean isTestCasesLocked(IRepositoryNode node){
  if (node.getObject() == null) {
    return false;
  }
  if (node.getObject().getProperty() == null) {
    return false;
  }
  Item item=node.getObject().getProperty().getItem();
  if (item instanceof FolderItem) {
    for (    IRepositoryNode child : node.getChildren()) {
      if (isTestCasesLocked(child)) {
        return true;
      }
    }
  }
 else   if (item instanceof ProcessItem) {
    ProcessItem processItem=(ProcessItem)item;
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
      ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
      if (testContainerService != null) {
        List<IRepositoryViewObject> objectList=testContainerService.listExistingTestCases(processItem.getProperty().getId());
        for (        IRepositoryViewObject nodeObject : objectList) {
          if (nodeObject != null && nodeObject.getProperty() != null && nodeObject.getProperty().getItem() != null) {
            if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
              if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
                return true;
              }
            }
          }
        }
      }
    }
  }
  return false;
}",0.4997720018239854
125744,"/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param node
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(RepositoryNode node,String itemName,ERepositoryObjectType type,TreeSelection selectionInClipboard){
  if (!isValid(node,itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(type),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (itemName.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    ERepositoryObjectType repositoryType=node.getObjectType();
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS || repositoryType == ERepositoryObjectType.PROCESS_STORM || repositoryType == ERepositoryObjectType.PROCESS_MR) {
        try {
          List<IRepositoryViewObject> listExistingObjects=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true,false);
          if (PluginChecker.isStormPluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_STORM,true,false));
          }
          if (PluginChecker.isMapReducePluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_MR,true,false));
          }
          Property property=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getProperty();
          if (property != null && (!repositoryFactory.isNameAvailable(property.getItem(),itemName,listExistingObjects) || itemName.equals(property.getLabel()))) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 catch (        PersistenceException e1) {
          return Messages.getString(""String_Node_Str"");
        }
      }
 else {
        boolean isTestContainer=false;
        List<IRepositoryViewObject> testObjectList=new ArrayList<IRepositoryViewObject>();
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
          ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
          if (testContainerService != null) {
            isTestContainer=testContainerService.isTestContainerType(repositoryType);
            if (isTestContainer) {
              testObjectList=testContainerService.listExistingTestCases();
            }
          }
        }
        if (isTestContainer && !testObjectList.isEmpty()) {
          try {
            if (!repositoryFactory.isNameAvailable(node.getObject().getProperty().getItem(),itemName,testObjectList)) {
              return Messages.getString(""String_Node_Str"");
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 else {
          try {
            Item testNewItem=createNewItem();
            if (testNewItem != null) {
              if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
                return Messages.getString(""String_Node_Str"");
              }
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
      }
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param node
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(RepositoryNode node,String itemName,ERepositoryObjectType type,TreeSelection selectionInClipboard){
  if (!isValid(node,itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(type),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (itemName.equalsIgnoreCase(ProjectManager.getInstance().getCurrentProject().getLabel())) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    ERepositoryObjectType repositoryType=node.getObjectType();
    if (repositoryType != null) {
      if (repositoryType == ERepositoryObjectType.PROCESS || repositoryType == ERepositoryObjectType.PROCESS_STORM || repositoryType == ERepositoryObjectType.PROCESS_MR) {
        try {
          List<IRepositoryViewObject> listExistingObjects=repositoryFactory.getAll(ERepositoryObjectType.PROCESS,true,false);
          if (PluginChecker.isStormPluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_STORM,true,false));
          }
          if (PluginChecker.isMapReducePluginLoader()) {
            listExistingObjects.addAll(repositoryFactory.getAll(ERepositoryObjectType.PROCESS_MR,true,false));
          }
          Property property=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getProperty();
          if (property != null && (!repositoryFactory.isNameAvailable(property.getItem(),itemName,listExistingObjects) || itemName.equals(property.getLabel()))) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 catch (        PersistenceException e1) {
          return Messages.getString(""String_Node_Str"");
        }
      }
 else {
        boolean isTestContainer=false;
        List<IRepositoryViewObject> testObjectList=new ArrayList<IRepositoryViewObject>();
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
          ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
          if (testContainerService != null) {
            isTestContainer=testContainerService.isTestContainerType(repositoryType);
            if (isTestContainer) {
              testObjectList=testContainerService.listExistingTestCases(null);
            }
          }
        }
        if (isTestContainer && !testObjectList.isEmpty()) {
          try {
            if (!repositoryFactory.isNameAvailable(node.getObject().getProperty().getItem(),itemName,testObjectList)) {
              return Messages.getString(""String_Node_Str"");
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
 else {
          try {
            Item testNewItem=createNewItem();
            if (testNewItem != null) {
              if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
                return Messages.getString(""String_Node_Str"");
              }
            }
          }
 catch (          PersistenceException e) {
            return Messages.getString(""String_Node_Str"");
          }
        }
      }
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}",0.99948132780083
125745,"private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray,boolean showDownloadIfNotExist){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    String jarPath=libPath + PATH_SEPARATOR + driverName;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      driverNotExist.add(driverName);
    }
    jarPathList.add(jarFile.getAbsolutePath());
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,showDownloadIfNotExist,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}","private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray,boolean showDownloadIfNotExist){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    if (StringUtils.isNotEmpty(driverName)) {
      String jarPath=libPath + PATH_SEPARATOR + driverName;
      File jarFile=new File(jarPath);
      if (!jarFile.exists()) {
        driverNotExist.add(driverName);
      }
      jarPathList.add(jarFile.getAbsolutePath());
    }
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,showDownloadIfNotExist,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}",0.9703153988868276
125746,"private static String getImpalaURLString(boolean supportContext,String server,String port,String sid,String Principal){
  String s=EDatabaseConnTemplate.IMPALA.getUrlTemplate(EDatabaseVersion4Drivers.IMPALA_CDH5);
  String standardURlString=getImpalaURlString(s,supportContext,server,port,sid);
  String principalSuffix=""String_Node_Str"";
  boolean hasPrinc=false;
  String[] urlArray=standardURlString.split(SEMICOLON);
  if (urlArray[urlArray.length - 1].startsWith(principalSuffix)) {
    hasPrinc=true;
  }
  if (hasPrinc) {
    if (Principal == null) {
      standardURlString=standardURlString.substring(0,standardURlString.lastIndexOf(principalSuffix));
    }
  }
 else {
    if (Principal != null) {
      standardURlString=standardURlString.concat(SEMICOLON).concat(principalSuffix).concat(Principal);
    }
  }
  return standardURlString;
}","private static String getImpalaURLString(boolean supportContext,String server,String port,String sid,String Principal){
  String s=EDatabaseConnTemplate.IMPALA.getUrlTemplate(null);
  String standardURlString=getImpalaURlString(s,supportContext,server,port,sid);
  String principalSuffix=""String_Node_Str"";
  boolean hasPrinc=false;
  String[] urlArray=standardURlString.split(SEMICOLON);
  if (urlArray[urlArray.length - 1].startsWith(principalSuffix)) {
    hasPrinc=true;
  }
  if (hasPrinc) {
    if (Principal == null) {
      standardURlString=standardURlString.substring(0,standardURlString.lastIndexOf(principalSuffix));
    }
  }
 else {
    if (Principal != null) {
      standardURlString=standardURlString.concat(SEMICOLON).concat(principalSuffix).concat(Principal);
    }
  }
  return standardURlString;
}",0.9760191846522782
125747,"private Map<ImportItem,List<ImportItem>> getTestCaseItemMap(List<ImportItem> items){
  Map<ImportItem,List<ImportItem>> map=new HashMap<ImportItem,List<ImportItem>>();
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
  }
  if (items != null && testContainerService != null) {
    for (    ImportItem ir : items) {
      Item item=ir.getItem();
      if (item == null) {
        continue;
      }
      boolean isTestContainer=testContainerService.isTestContainerItem(item);
      if (!isTestContainer) {
        List<ImportItem> children=new ArrayList<ImportItem>();
        for (        ImportItem child : items) {
          Item childItem=child.getItem();
          if (childItem == null) {
            continue;
          }
          isTestContainer=testContainerService.isTestContainerItem(childItem);
          if (isTestContainer) {
            String path=childItem.getState().getPath();
            if (path != null && path.contains(""String_Node_Str"")) {
              int index=path.indexOf(""String_Node_Str"");
              path=path.substring(index + 1);
              if (path.equals(item.getProperty().getId())) {
                children.add(child);
              }
            }
          }
        }
        map.put(ir,children);
      }
    }
  }
  return map;
}","private Map<ImportItem,List<ImportItem>> getTestCaseItemMap(List<ImportItem> items){
  Map<ImportItem,List<ImportItem>> map=new HashMap<ImportItem,List<ImportItem>>();
  ITestContainerProviderService testContainerService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
  }
  if (items != null && testContainerService != null) {
    Map<String,ImportItem> itemMap=new HashMap<String,ImportItem>();
    for (    ImportItem ir : items) {
      if (ir.getItem() != null && !testContainerService.isTestContainerItem(ir.getItem())) {
        itemMap.put(ir.getProperty().getId(),ir);
        map.put(ir,new ArrayList<ImportItem>());
      }
    }
    Set<String> keys=itemMap.keySet();
    for (    String key : keys) {
      Item item=itemMap.get(key).getItem();
      if (item == null) {
        continue;
      }
      List<ImportItem> children=new ArrayList<ImportItem>();
      for (      ImportItem child : items) {
        Item childItem=child.getItem();
        if (childItem == null) {
          continue;
        }
        boolean isTestContainer=testContainerService.isTestContainerItem(childItem);
        if (isTestContainer) {
          String path=childItem.getState().getPath();
          if (path != null && path.contains(""String_Node_Str"")) {
            int index=path.indexOf(""String_Node_Str"");
            path=path.substring(index + 1);
            if (path.equals(item.getProperty().getId())) {
              children.add(child);
            }
          }
        }
      }
      map.put(itemMap.get(key),children);
    }
  }
  return map;
}",0.7195863746958637
125748,"private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray,boolean showDownloadIfNotExist){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    String jarPath=libPath + PATH_SEPARATOR + driverName;
    File jarFile=new File(jarPath);
    if (!jarFile.exists()) {
      driverNotExist.add(driverName);
    }
    jarPathList.add(jarFile.getAbsolutePath());
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,showDownloadIfNotExist,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}","private static boolean loadLibraries(DynamicClassLoader classLoader,String[] driversArray,boolean showDownloadIfNotExist){
  List<String> jarPathList=new ArrayList<String>();
  if (driversArray == null || driversArray.length == 0) {
    return true;
  }
  ILibraryManagerService librairesManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
  String libPath=getLibPath();
  List<String> driverNotExist=new ArrayList<String>();
  for (  String driverName : driversArray) {
    if (StringUtils.isNotEmpty(driverName)) {
      String jarPath=libPath + PATH_SEPARATOR + driverName;
      File jarFile=new File(jarPath);
      if (!jarFile.exists()) {
        driverNotExist.add(driverName);
      }
      jarPathList.add(jarFile.getAbsolutePath());
    }
  }
  boolean putInCache=false;
  if (!driverNotExist.isEmpty()) {
    putInCache=librairesManagerService.retrieve(driverNotExist,libPath,showDownloadIfNotExist,new NullProgressMonitor());
  }
  classLoader.setLibStorePath(libPath);
  classLoader.addLibraries(jarPathList);
  return putInCache;
}",0.9703153988868276
125749,"private static String getImpalaURLString(boolean supportContext,String server,String port,String sid,String Principal){
  String s=EDatabaseConnTemplate.IMPALA.getUrlTemplate(EDatabaseVersion4Drivers.IMPALA_CDH5);
  String standardURlString=getImpalaURlString(s,supportContext,server,port,sid);
  String principalSuffix=""String_Node_Str"";
  boolean hasPrinc=false;
  String[] urlArray=standardURlString.split(SEMICOLON);
  if (urlArray[urlArray.length - 1].startsWith(principalSuffix)) {
    hasPrinc=true;
  }
  if (hasPrinc) {
    if (Principal == null) {
      standardURlString=standardURlString.substring(0,standardURlString.lastIndexOf(principalSuffix));
    }
  }
 else {
    if (Principal != null) {
      standardURlString=standardURlString.concat(SEMICOLON).concat(principalSuffix).concat(Principal);
    }
  }
  return standardURlString;
}","private static String getImpalaURLString(boolean supportContext,String server,String port,String sid,String Principal){
  String s=EDatabaseConnTemplate.IMPALA.getUrlTemplate(null);
  String standardURlString=getImpalaURlString(s,supportContext,server,port,sid);
  String principalSuffix=""String_Node_Str"";
  boolean hasPrinc=false;
  String[] urlArray=standardURlString.split(SEMICOLON);
  if (urlArray[urlArray.length - 1].startsWith(principalSuffix)) {
    hasPrinc=true;
  }
  if (hasPrinc) {
    if (Principal == null) {
      standardURlString=standardURlString.substring(0,standardURlString.lastIndexOf(principalSuffix));
    }
  }
 else {
    if (Principal != null) {
      standardURlString=standardURlString.concat(SEMICOLON).concat(principalSuffix).concat(Principal);
    }
  }
  return standardURlString;
}",0.9760191846522782
125750,"private static List<ModuleNeeded> collectModuleNeeded(List<IRepositoryViewObject> routineItems,Set<String> routineIdOrNames,boolean system){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  if (org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
    return importNeedsList;
  }
  if (!routineItems.isEmpty()) {
    for (    IRepositoryViewObject object : routineItems) {
      if (routineIdOrNames.contains(object.getLabel()) && system || routineIdOrNames.contains(object.getId()) && !system) {
        Item item=object.getProperty().getItem();
        if (item instanceof RoutineItem) {
          RoutineItem routine=(RoutineItem)item;
          importNeedsList.addAll(createModuleNeededFromRoutine(routine));
        }
      }
    }
  }
  if (system) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerUIService.class)) {
      ILibraryManagerUIService libUiService=(ILibraryManagerUIService)GlobalServiceRegister.getDefault().getService(ILibraryManagerUIService.class);
      Set<String> routinesName=new HashSet<>();
      for (      IRoutinesProvider routineProvider : libUiService.getRoutinesProviders(ECodeLanguage.JAVA)) {
        for (        URL url : routineProvider.getSystemRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
        for (        URL url : routineProvider.getTalendRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
      }
      Map<String,List<LibraryInfo>> routineAndJars=libUiService.getRoutineAndJars();
      Iterator<Map.Entry<String,List<LibraryInfo>>> iter=routineAndJars.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,List<LibraryInfo>> entry=iter.next();
        String routineName=entry.getKey();
        if (!routinesName.contains(routineName)) {
          continue;
        }
        List<LibraryInfo> needJars=entry.getValue();
        for (        LibraryInfo jar : needJars) {
          ModuleNeeded toAdd=new ModuleNeeded(""String_Node_Str"" + routineName,jar.getLibName(),""String_Node_Str"",true);
          String bundleId=jar.getBundleId();
          if (bundleId != null) {
            String bundleName=null;
            String bundleVersion=null;
            if (bundleId.contains(""String_Node_Str"")) {
              String[] nameAndVersion=bundleId.split(""String_Node_Str"");
              bundleName=nameAndVersion[0];
              bundleVersion=nameAndVersion[1];
            }
 else {
              bundleName=bundleId;
            }
            toAdd.setBundleName(bundleName);
            toAdd.setBundleVersion(bundleVersion);
          }
          importNeedsList.add(toAdd);
        }
      }
    }
  }
  return importNeedsList;
}","private static List<ModuleNeeded> collectModuleNeeded(List<IRepositoryViewObject> routineItems,Set<String> routineIdOrNames,boolean system){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  if (org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
    return importNeedsList;
  }
  if (!routineItems.isEmpty()) {
    for (    IRepositoryViewObject object : routineItems) {
      if (routineIdOrNames.contains(object.getLabel()) && system || routineIdOrNames.contains(object.getId()) && !system) {
        Item item=object.getProperty().getItem();
        if (item instanceof RoutineItem) {
          RoutineItem routine=(RoutineItem)item;
          importNeedsList.addAll(createModuleNeededFromRoutine(routine));
        }
      }
    }
  }
  if (system) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerUIService.class)) {
      ILibraryManagerUIService libUiService=(ILibraryManagerUIService)GlobalServiceRegister.getDefault().getService(ILibraryManagerUIService.class);
      Set<String> routinesName=new HashSet<>();
      for (      IRoutinesProvider routineProvider : libUiService.getRoutinesProviders(ECodeLanguage.JAVA)) {
        for (        URL url : routineProvider.getSystemRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
        for (        URL url : routineProvider.getTalendRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
      }
      Map<String,List<LibraryInfo>> routineAndJars=libUiService.getRoutineAndJars();
      Iterator<Map.Entry<String,List<LibraryInfo>>> iter=routineAndJars.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,List<LibraryInfo>> entry=iter.next();
        String routineName=entry.getKey();
        if (!routinesName.contains(routineName)) {
          continue;
        }
        List<LibraryInfo> needJars=entry.getValue();
        for (        LibraryInfo jar : needJars) {
          ModuleNeeded toAdd=new ModuleNeeded(""String_Node_Str"" + routineName,jar.getLibName(),""String_Node_Str"",true);
          String bundleId=jar.getBundleId();
          if (bundleId != null) {
            String bundleName=null;
            String bundleVersion=null;
            if (bundleId.contains(""String_Node_Str"")) {
              String[] nameAndVersion=bundleId.split(""String_Node_Str"");
              bundleName=nameAndVersion[0];
              bundleVersion=nameAndVersion[1];
            }
 else {
              bundleName=bundleId;
            }
            toAdd.setBundleName(bundleName);
            toAdd.setBundleVersion(bundleVersion);
          }
          importNeedsList.add(toAdd);
        }
      }
    }
  }
  Set<String> dedupModulesList=new HashSet<String>();
  Iterator<ModuleNeeded> it=importNeedsList.iterator();
  while (it.hasNext()) {
    ModuleNeeded module=it.next();
    if (!module.getModuleName().contains(""String_Node_Str"")) {
      it.remove();
    }
 else     if (dedupModulesList.contains(module.getModuleName())) {
      it.remove();
    }
 else {
      dedupModulesList.add(module.getModuleName());
    }
  }
  return new ArrayList<ModuleNeeded>(importNeedsList);
}",0.9281800681178736
125751,"public static Set<ModuleNeeded> getCodesModuleNeededs(ERepositoryObjectType type){
  if (type == null) {
    return Collections.emptySet();
  }
  Set<ModuleNeeded> codesModules=new HashSet<ModuleNeeded>();
  codesModules.addAll(getModulesNeededForRoutines(type));
  if (type.equals(ERepositoryObjectType.ROUTINES)) {
    codesModules.addAll(collectModuleNeeded(new ArrayList<IRepositoryViewObject>(),new HashSet<String>(),true));
  }
  return codesModules;
}","public static Set<ModuleNeeded> getCodesModuleNeededs(ERepositoryObjectType type,boolean systemOnly){
  if (type == null) {
    return Collections.emptySet();
  }
  Set<ModuleNeeded> codesModules=new HashSet<ModuleNeeded>();
  if (type.equals(ERepositoryObjectType.ROUTINES)) {
    codesModules.addAll(collectModuleNeeded(new ArrayList<IRepositoryViewObject>(),new HashSet<String>(),true));
  }
  if (!systemOnly || !type.equals(ERepositoryObjectType.ROUTINES)) {
    codesModules.addAll(getModulesNeededForRoutines(type));
  }
  return codesModules;
}",0.7544554455445545
125752,"public static Set<ModuleNeeded> getRunningModules(){
  Set<ModuleNeeded> runningModules=new HashSet<ModuleNeeded>();
  runningModules.addAll(getCodesModuleNeededs(ERepositoryObjectType.ROUTINES));
  runningModules.addAll(getCodesModuleNeededs(ERepositoryObjectType.getType(""String_Node_Str"")));
  runningModules.addAll(getCodesModuleNeededs(ERepositoryObjectType.PIG_UDF));
  return runningModules;
}","public static Set<ModuleNeeded> getRunningModules(){
  Set<ModuleNeeded> runningModules=new HashSet<ModuleNeeded>();
  runningModules.addAll(getCodesModuleNeededs(ERepositoryObjectType.ROUTINES,true));
  runningModules.addAll(getCodesModuleNeededs(ERepositoryObjectType.getType(""String_Node_Str""),true));
  runningModules.addAll(getCodesModuleNeededs(ERepositoryObjectType.PIG_UDF,true));
  return runningModules;
}",0.98159509202454
125753,"@Override public Set<ModuleNeeded> getCodesModuleNeededs(ERepositoryObjectType type){
  return ModulesNeededProvider.getCodesModuleNeededs(type);
}","@Override public Set<ModuleNeeded> getCodesModuleNeededs(ERepositoryObjectType type){
  return ModulesNeededProvider.getCodesModuleNeededs(type,false);
}",0.98
125754,"@Override public void checkInstalledLibraries(){
  Set<String> existLibraries=repositoryBundleService.list();
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}","@Override public void checkInstalledLibraries(){
  repositoryBundleService.deployModules(ModulesNeededProvider.getCodesModuleNeededs(ERepositoryObjectType.ROUTINES,true),null);
  Set<String> existLibraries=repositoryBundleService.list();
  List<String> modulesNeededNames=ModulesNeededProvider.getModulesNeededNames();
  ModulesNeededProvider.getUnUsedModules().clear();
  for (  String library : existLibraries) {
    if (!modulesNeededNames.contains(library)) {
      ModulesNeededProvider.userAddUnusedModules(""String_Node_Str"",library);
    }
  }
}",0.8688524590163934
125755,"private void createAuthenticationForHBase(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrpForHBase=new Group(parent,SWT.NONE);
  authenticationGrpForHBase.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrpForHBase);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrpForHBase.setLayout(authLayout);
  useKerberosForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useKerberosForHBase.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberosForHBase.setLayoutData(data);
  authenticationComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationComForHBase.setLayoutData(data);
  authenticationComForHBase.setLayout(new GridLayout(3,false));
  hbaseMasterPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  hbaseRSPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  useKeyTabForHBase=new Button(authenticationComForHBase,SWT.CHECK);
  useKeyTabForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTabForHBase.setLayoutData(data);
  keyTabCompoisteForHBase=new Composite(authenticationComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabCompoisteForHBase.setLayoutData(data);
  keyTabCompoisteForHBase.setVisible(false);
  keyTabCompoisteForHBase.setLayout(new GridLayout(5,false));
  principalForHBaseTxt=new LabelledText(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabForHBaseTxt=new LabelledFileField(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useMaprTForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHBase.setLayoutData(data);
  authenticationMaprTComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHBase.setLayoutData(data);
  authenticationMaprTComForHBase.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHBase=new Composite(authenticationMaprTComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHBase.setLayoutData(data);
  authenticationUserPassComForHBase.setLayout(new GridLayout(3,false));
  maprTUsernameForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  maprTClusterForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  addListenerHBaseAuthentication();
  initForHBaseAuthentication();
}","private void createAuthenticationForHBase(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrpForHBase=new Group(parent,SWT.NONE);
  authenticationGrpForHBase.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrpForHBase);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrpForHBase.setLayout(authLayout);
  useKerberosForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useKerberosForHBase.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberosForHBase.setLayoutData(data);
  authenticationComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationComForHBase.setLayoutData(data);
  authenticationComForHBase.setLayout(new GridLayout(3,false));
  hbaseMasterPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  hbaseRSPrincipalTxt=new LabelledText(authenticationComForHBase,Messages.getString(""String_Node_Str""),2);
  useKeyTabForHBase=new Button(authenticationComForHBase,SWT.CHECK);
  useKeyTabForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTabForHBase.setLayoutData(data);
  keyTabCompoisteForHBase=new Composite(authenticationComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabCompoisteForHBase.setLayoutData(data);
  keyTabCompoisteForHBase.setVisible(false);
  keyTabCompoisteForHBase.setLayout(new GridLayout(5,false));
  principalForHBaseTxt=new LabelledText(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabForHBaseTxt=new LabelledFileField(keyTabCompoisteForHBase,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHBase=new Button(authenticationGrpForHBase,SWT.CHECK);
  useMaprTForHBase.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHBase.setLayoutData(data);
  authenticationMaprTComForHBase=new Composite(authenticationGrpForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHBase.setLayoutData(data);
  authenticationMaprTComForHBase.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHBase=new Composite(authenticationMaprTComForHBase,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHBase.setLayoutData(data);
  authenticationUserPassComForHBase.setLayout(new GridLayout(3,false));
  maprTUsernameForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHBaseTxt=new LabelledText(authenticationUserPassComForHBase,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordForHBaseTxt.getTextControl().setEchoChar('*');
  maprTClusterForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHBaseTxt=new LabelledText(authenticationMaprTComForHBase,Messages.getString(""String_Node_Str""),2);
  addListenerHBaseAuthentication();
  initForHBaseAuthentication();
}",0.987460815047022
125756,"private void createAuthenticationForHive(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrp=new Group(parent,SWT.NONE);
  authenticationGrp.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrp);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrp.setLayout(authLayout);
  useKerberos=new Button(authenticationGrp,SWT.CHECK);
  useKerberos.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberos.setLayoutData(data);
  authenticationCom=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationCom.setLayoutData(data);
  authenticationCom.setLayout(new GridLayout(3,false));
  hivePrincipalTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  metastoreUrlTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  driverJarTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),1);
  browseDriverJarBtn=new Button(authenticationCom,SWT.NONE);
  browseDriverJarBtn.setText(""String_Node_Str"");
  browseDriverJarBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  driverClassTxt=new LabelledCombo(authenticationCom,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseDriverClassButton=new Button(authenticationCom,SWT.NONE);
  browseDriverClassButton.setText(""String_Node_Str"");
  browseDriverClassButton.setToolTipText(Messages.getString(""String_Node_Str""));
  usernameTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  passwordTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  useKeyTab=new Button(authenticationCom,SWT.CHECK);
  useKeyTab.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTab.setLayoutData(data);
  keyTabComponent=new Composite(authenticationCom,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabComponent.setLayoutData(data);
  keyTabComponent.setVisible(false);
  keyTabComponent.setLayout(new GridLayout(5,false));
  principalTxt=new LabelledText(keyTabComponent,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabTxt=new LabelledFileField(keyTabComponent,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHive=new Button(authenticationGrp,SWT.CHECK);
  useMaprTForHive.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHive.setLayoutData(data);
  authenticationMaprTComForHive=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHive.setLayoutData(data);
  authenticationMaprTComForHive.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHive=new Composite(authenticationMaprTComForHive,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHive.setLayoutData(data);
  authenticationUserPassComForHive.setLayout(new GridLayout(3,false));
  maprTUsernameForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  maprTClusterForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  addListenerForAuthentication();
  initForAuthentication();
}","private void createAuthenticationForHive(Composite parent){
  GridLayout parentLayout=(GridLayout)parent.getLayout();
  authenticationGrp=new Group(parent,SWT.NONE);
  authenticationGrp.setText(Messages.getString(""String_Node_Str""));
  GridDataFactory.fillDefaults().span(parentLayout.numColumns,1).align(SWT.FILL,SWT.BEGINNING).grab(true,false).applyTo(authenticationGrp);
  GridLayout authLayout=new GridLayout(4,false);
  authLayout.marginHeight=0;
  authenticationGrp.setLayout(authLayout);
  useKerberos=new Button(authenticationGrp,SWT.CHECK);
  useKerberos.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKerberos.setLayoutData(data);
  authenticationCom=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationCom.setLayoutData(data);
  authenticationCom.setLayout(new GridLayout(3,false));
  hivePrincipalTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  metastoreUrlTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  driverJarTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),1);
  browseDriverJarBtn=new Button(authenticationCom,SWT.NONE);
  browseDriverJarBtn.setText(""String_Node_Str"");
  browseDriverJarBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  driverClassTxt=new LabelledCombo(authenticationCom,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseDriverClassButton=new Button(authenticationCom,SWT.NONE);
  browseDriverClassButton.setText(""String_Node_Str"");
  browseDriverClassButton.setToolTipText(Messages.getString(""String_Node_Str""));
  usernameTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2);
  passwordTxt=new LabelledText(authenticationCom,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD);
  useKeyTab=new Button(authenticationCom,SWT.CHECK);
  useKeyTab.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useKeyTab.setLayoutData(data);
  keyTabComponent=new Composite(authenticationCom,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  data.exclude=true;
  keyTabComponent.setLayoutData(data);
  keyTabComponent.setVisible(false);
  keyTabComponent.setLayout(new GridLayout(5,false));
  principalTxt=new LabelledText(keyTabComponent,Messages.getString(""String_Node_Str""),1);
  String[] extensions={""String_Node_Str""};
  keytabTxt=new LabelledFileField(keyTabComponent,Messages.getString(""String_Node_Str""),extensions);
  useMaprTForHive=new Button(authenticationGrp,SWT.CHECK);
  useMaprTForHive.setText(Messages.getString(""String_Node_Str""));
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.horizontalSpan=4;
  useMaprTForHive.setLayoutData(data);
  authenticationMaprTComForHive=new Composite(authenticationGrp,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationMaprTComForHive.setLayoutData(data);
  authenticationMaprTComForHive.setLayout(new GridLayout(3,false));
  authenticationUserPassComForHive=new Composite(authenticationMaprTComForHive,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=4;
  authenticationUserPassComForHive.setLayoutData(data);
  authenticationUserPassComForHive.setLayout(new GridLayout(3,false));
  maprTUsernameForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2);
  maprTPasswordForHiveTxt=new LabelledText(authenticationUserPassComForHive,Messages.getString(""String_Node_Str""),2,SWT.PASSWORD | SWT.BORDER | SWT.SINGLE);
  maprTPasswordForHiveTxt.getTextControl().setEchoChar('*');
  maprTClusterForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  maprTDurationForHiveTxt=new LabelledText(authenticationMaprTComForHive,Messages.getString(""String_Node_Str""),2);
  addListenerForAuthentication();
  initForAuthentication();
}",0.9850451118526758
125757,"private void addFieldsForGeneralDB(Composite parent){
  generalDbCompositeParent=new Composite(parent,SWT.NULL);
  generalDbCompositeParent.setLayout(new GridLayout(3,false));
  GridLayout layout2=(GridLayout)generalDbCompositeParent.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  generalJdbcUrlText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcDriverjarText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  generalJdbcDriverjarText.setReadOnly(true);
  browseJarFilesButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseJarFilesButton.setText(""String_Node_Str"");
  browseJarFilesButton.setToolTipText(Messages.getString(""String_Node_Str""));
  generalJdbcClassNameText=new LabelledCombo(generalDbCompositeParent,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseClassButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseClassButton.setText(""String_Node_Str"");
  browseClassButton.setToolTipText(""String_Node_Str"");
  generalJdbcUserText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText.getTextControl().setEchoChar('*');
  jDBCschemaText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalMappingFileText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  generalMappingSelectButton=new Button(generalDbCompositeParent,SWT.NONE);
  generalMappingSelectButton.setText(""String_Node_Str"");
  generalMappingSelectButton.setToolTipText(Messages.getString(""String_Node_Str""));
}","private void addFieldsForGeneralDB(Composite parent){
  generalDbCompositeParent=new Composite(parent,SWT.NULL);
  generalDbCompositeParent.setLayout(new GridLayout(3,false));
  GridLayout layout2=(GridLayout)generalDbCompositeParent.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  generalJdbcUrlText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcDriverjarText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  browseJarFilesButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseJarFilesButton.setText(""String_Node_Str"");
  browseJarFilesButton.setToolTipText(Messages.getString(""String_Node_Str""));
  generalJdbcClassNameText=new LabelledCombo(generalDbCompositeParent,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseClassButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseClassButton.setText(""String_Node_Str"");
  browseClassButton.setToolTipText(""String_Node_Str"");
  generalJdbcUserText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText.getTextControl().setEchoChar('*');
  jDBCschemaText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalMappingFileText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  generalMappingSelectButton=new Button(generalDbCompositeParent,SWT.NONE);
  generalMappingSelectButton.setText(""String_Node_Str"");
  generalMappingSelectButton.setToolTipText(Messages.getString(""String_Node_Str""));
}",0.9871076233183856
125758,"private void addHBaseSettingFieldsListeners(){
  hbaseDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      IHDistribution newDistribution=getHBaseDistribution(hbaseDistributionCombo.getText(),true);
      if (newDistribution == null) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      boolean doSupportMapRTicket=false;
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService != null && newDistribution != null) {
        doSupportMapRTicket=hadoopService.doSupportMapRTicket(newDistribution.getDefaultVersion());
      }
      useMaprTForHBase.setEnabled(doSupportMapRTicket);
      hideControl(useMaprTForHBase,!doSupportMapRTicket);
      hideControl(authenticationMaprTComForHBase,!useMaprTForHBase.getSelection());
      hideControl(authenticationUserPassComForHBase,!useMaprTForHBase.getSelection());
      if (originalDistribution == null || !newDistribution.getName().equals(originalDistribution.getName())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,newDistribution.getName());
        updateHBaseVersionPart(newDistribution);
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      if (originalDistribution == null) {
        return;
      }
      String newVersionDisplayName=StringUtils.trimToNull(hbaseVersionCombo.getText());
      IHDistributionVersion newVersion=originalDistribution.getHDVersion(newVersionDisplayName,true);
      if (newVersion == null) {
        return;
      }
      String originalVersionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
      IHDistributionVersion originalVersion=originalDistribution.getHDVersion(originalVersionName,false);
      if (originalVersion == null || newVersion.getVersion() != null && !newVersion.getVersion().equals(originalVersion.getVersion())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,newVersion.getVersion());
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseCustomButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleHadoopCustomVersion(ECustomVersionType.HBASE);
    }
  }
);
}","private void addHBaseSettingFieldsListeners(){
  hbaseDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      IHDistribution newDistribution=getHBaseDistribution(hbaseDistributionCombo.getText(),true);
      if (newDistribution == null) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      boolean doSupportMapRTicket=false;
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService != null && newDistribution != null) {
        doSupportMapRTicket=hadoopService.doSupportMapRTicket(newDistribution.getDefaultVersion());
      }
      hideControl(useMaprTForHBase,!doSupportMapRTicket);
      hideControl(authenticationMaprTComForHBase,!(useMaprTForHBase.getSelection() && doSupportMapRTicket));
      hideControl(authenticationUserPassComForHBase,useKerberosForHBase.getSelection() && doSupportMapRTicket);
      authenticationGrpForHBase.layout();
      authenticationGrpForHBase.getParent().layout();
      if (originalDistribution == null || !newDistribution.getName().equals(originalDistribution.getName())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,newDistribution.getName());
        updateHBaseVersionPart(newDistribution);
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      if (originalDistribution == null) {
        return;
      }
      String newVersionDisplayName=StringUtils.trimToNull(hbaseVersionCombo.getText());
      IHDistributionVersion newVersion=originalDistribution.getHDVersion(newVersionDisplayName,true);
      if (newVersion == null) {
        return;
      }
      String originalVersionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
      IHDistributionVersion originalVersion=originalDistribution.getHDVersion(originalVersionName,false);
      if (originalVersion == null || newVersion.getVersion() != null && !newVersion.getVersion().equals(originalVersion.getVersion())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,newVersion.getVersion());
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseCustomButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleHadoopCustomVersion(ECustomVersionType.HBASE);
    }
  }
);
}",0.9550743374272788
125759,"/** 
 * Added by Marvin Wang on Aug 10, 2012.
 */
protected void doHiveDistributionModify(){
  IHDistribution newHiveDistribution=getCurrentHiveDistribution(false);
  if (newHiveDistribution == null) {
    return;
  }
  String distributionObj=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  IHDistribution originalHiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && newHiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(newHiveDistribution.getDefaultVersion());
  }
  useMaprTForHive.setEnabled(doSupportMapRTicket);
  hideControl(useMaprTForHive,!doSupportMapRTicket);
  hideControl(authenticationMaprTComForHive,!useMaprTForHive.getSelection());
  hideControl(authenticationUserPassComForHive,!useMaprTForHive.getSelection());
  if (originalHiveDistribution == null || !newHiveDistribution.equals(originalHiveDistribution)) {
    updateHiveVersionAndMakeSelection(newHiveDistribution,null);
    setHideVersionInfoWidgets(false);
    updateYarnInfo(newHiveDistribution,null);
    updateHiveModeAndMakeSelection(null);
    doHiveModeModify();
    fillDefaultsWhenHiveVersionChanged();
  }
}","/** 
 * Added by Marvin Wang on Aug 10, 2012.
 */
protected void doHiveDistributionModify(){
  IHDistribution newHiveDistribution=getCurrentHiveDistribution(false);
  if (newHiveDistribution == null) {
    return;
  }
  String distributionObj=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  IHDistribution originalHiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && newHiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(newHiveDistribution.getDefaultVersion());
  }
  hideControl(useMaprTForHive,!doSupportMapRTicket);
  hideControl(authenticationMaprTComForHive,!(useMaprTForHive.getSelection() && doSupportMapRTicket));
  hideControl(authenticationUserPassComForHive,useKerberos.getSelection() && doSupportMapRTicket);
  authenticationGrp.layout();
  authenticationGrp.getParent().layout();
  if (originalHiveDistribution == null || !newHiveDistribution.equals(originalHiveDistribution)) {
    updateHiveVersionAndMakeSelection(newHiveDistribution,null);
    setHideVersionInfoWidgets(false);
    updateYarnInfo(newHiveDistribution,null);
    updateHiveModeAndMakeSelection(null);
    doHiveModeModify();
    fillDefaultsWhenHiveVersionChanged();
  }
}",0.8850658857979502
125760,"/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  IHDistribution hiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  IHDistributionVersion hdVersion=null;
  if (hiveDistribution != null) {
    hdVersion=hiveDistribution.getHDVersion(hiveVersion,false);
    updateHiveDistributionAndMakeSelection(hiveDistribution);
    updateHiveVersionAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveServerAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveModeAndMakeSelection(HiveModeInfo.get(hiveMode));
  }
 else {
    updateHiveDistributionAndMakeSelection(null);
    updateHiveVersionAndMakeSelection(null,null);
    updateHiveServerAndMakeSelection(null,null);
    updateHiveModeAndMakeSelection(null);
  }
  doHiveModeModify();
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hadoopUserName=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    usernameText.setText(hadoopUserName == null ? ""String_Node_Str"" : hadoopUserName);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
  String useKrb=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String hivePrincipla=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
  String metastoreUrl=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
  String driverJarPath=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
  String driverClass=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
  String username=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
  String password=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String Principla=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String additionalJDBCSettings=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
  boolean useSSL=Boolean.parseBoolean(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
  String trustStorePathStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
  String trustStorePasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
  if (Boolean.valueOf(useKrb)) {
    useKerberos.setSelection(true);
    GridData hadoopData=(GridData)authenticationCom.getLayoutData();
    hadoopData.exclude=false;
    authenticationCom.setVisible(true);
    authenticationCom.setLayoutData(hadoopData);
    authenticationCom.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  hivePrincipalTxt.setText(hivePrincipla == null ? ""String_Node_Str"" : hivePrincipla);
  metastoreUrlTxt.setText(metastoreUrl == null ? ""String_Node_Str"" : metastoreUrl);
  driverJarTxt.setText(driverJarPath == null ? ""String_Node_Str"" : driverJarPath);
  driverClassTxt.setText(driverClass == null ? ""String_Node_Str"" : driverClass);
  usernameTxt.setText(username == null ? ""String_Node_Str"" : username);
  passwordTxt.setText(password == null ? ""String_Node_Str"" : password);
  additionalJDBCSettingsText.setText(additionalJDBCSettings == null ? ""String_Node_Str"" : additionalJDBCSettings);
  useSSLEncryption.setSelection(useSSL);
  trustStorePath.setText(trustStorePathStr == null ? ""String_Node_Str"" : trustStorePathStr);
  if (trustStorePasswordStr == null) {
    trustStorePasswordStr=""String_Node_Str"";
  }
 else {
    trustStorePasswordStr=connection.getValue(trustStorePasswordStr,false);
  }
  trustStorePassword.setText(trustStorePasswordStr);
  if (Boolean.valueOf(useKeytabString)) {
    useKeyTab.setSelection(true);
    GridData hadoopData=(GridData)keyTabComponent.getLayoutData();
    hadoopData.exclude=false;
    keyTabComponent.setVisible(true);
    keyTabComponent.setLayoutData(hadoopData);
    keyTabComponent.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  principalTxt.setText(Principla == null ? ""String_Node_Str"" : Principla);
  keytabTxt.setText(keytab == null ? ""String_Node_Str"" : keytab);
  String executionEngine=connection.getParameters().get(ConnParameterKeys.HIVE_EXECUTION_ENGINE);
  EHiveExecutionTypes executionType=EHiveExecutionTypes.getTypeFromValue(executionEngine);
  if (executionType != null) {
    hiveExecutionEngineCombo.setText(executionType.getLabel());
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.HIVE_EXECUTION_ENGINE,null);
  }
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hiveDistribution.getHDVersion(hiveVersion,false));
  }
  String useMaprTForHiveString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHive=Boolean.valueOf(useMaprTForHiveString);
  useMaprTForHive.setEnabled(doSupportMapRTicket);
  useMaprTForHive.setSelection(checkMaprTForHive);
  if (checkMaprTForHive) {
    maprTUsernameForHiveTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHive));
    maprTPasswordForHiveTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHive));
    maprTClusterForHiveTxt.setText(StringUtils.trimToEmpty(maprTClusterForHive));
    maprTDurationForHiveTxt.setText(maprTDurationForHive == null ? ""String_Node_Str"" : maprTDurationForHive.trim());
  }
  hideControl(authenticationMaprTComForHive,!checkMaprTForHive);
  hideControl(authenticationUserPassComForHive,Boolean.valueOf(useKrb));
  updateYarnStatus();
  updateYarnInfo(hiveDistribution,hdVersion);
  showIfSupportEncryption();
  updateSSLEncryptionDetailsDisplayStatus();
}","/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  IHDistribution hiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  IHDistributionVersion hdVersion=null;
  if (hiveDistribution != null) {
    hdVersion=hiveDistribution.getHDVersion(hiveVersion,false);
    updateHiveDistributionAndMakeSelection(hiveDistribution);
    updateHiveVersionAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveServerAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveModeAndMakeSelection(HiveModeInfo.get(hiveMode));
  }
 else {
    updateHiveDistributionAndMakeSelection(null);
    updateHiveVersionAndMakeSelection(null,null);
    updateHiveServerAndMakeSelection(null,null);
    updateHiveModeAndMakeSelection(null);
  }
  doHiveModeModify();
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hadoopUserName=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    usernameText.setText(hadoopUserName == null ? ""String_Node_Str"" : hadoopUserName);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
  String useKrb=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String hivePrincipla=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
  String metastoreUrl=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
  String driverJarPath=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
  String driverClass=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
  String username=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
  String password=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String Principla=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String additionalJDBCSettings=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
  boolean useSSL=Boolean.parseBoolean(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
  String trustStorePathStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
  String trustStorePasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
  if (Boolean.valueOf(useKrb)) {
    useKerberos.setSelection(true);
    GridData hadoopData=(GridData)authenticationCom.getLayoutData();
    hadoopData.exclude=false;
    authenticationCom.setVisible(true);
    authenticationCom.setLayoutData(hadoopData);
    authenticationCom.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  hivePrincipalTxt.setText(hivePrincipla == null ? ""String_Node_Str"" : hivePrincipla);
  metastoreUrlTxt.setText(metastoreUrl == null ? ""String_Node_Str"" : metastoreUrl);
  driverJarTxt.setText(driverJarPath == null ? ""String_Node_Str"" : driverJarPath);
  driverClassTxt.setText(driverClass == null ? ""String_Node_Str"" : driverClass);
  usernameTxt.setText(username == null ? ""String_Node_Str"" : username);
  passwordTxt.setText(password == null ? ""String_Node_Str"" : password);
  additionalJDBCSettingsText.setText(additionalJDBCSettings == null ? ""String_Node_Str"" : additionalJDBCSettings);
  useSSLEncryption.setSelection(useSSL);
  trustStorePath.setText(trustStorePathStr == null ? ""String_Node_Str"" : trustStorePathStr);
  if (trustStorePasswordStr == null) {
    trustStorePasswordStr=""String_Node_Str"";
  }
 else {
    trustStorePasswordStr=connection.getValue(trustStorePasswordStr,false);
  }
  trustStorePassword.setText(trustStorePasswordStr);
  if (Boolean.valueOf(useKeytabString)) {
    useKeyTab.setSelection(true);
    GridData hadoopData=(GridData)keyTabComponent.getLayoutData();
    hadoopData.exclude=false;
    keyTabComponent.setVisible(true);
    keyTabComponent.setLayoutData(hadoopData);
    keyTabComponent.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  principalTxt.setText(Principla == null ? ""String_Node_Str"" : Principla);
  keytabTxt.setText(keytab == null ? ""String_Node_Str"" : keytab);
  String executionEngine=connection.getParameters().get(ConnParameterKeys.HIVE_EXECUTION_ENGINE);
  EHiveExecutionTypes executionType=EHiveExecutionTypes.getTypeFromValue(executionEngine);
  if (executionType != null) {
    hiveExecutionEngineCombo.setText(executionType.getLabel());
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.HIVE_EXECUTION_ENGINE,null);
  }
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hiveDistribution.getHDVersion(hiveVersion,false));
  }
  String useMaprTForHiveString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHive=Boolean.valueOf(useMaprTForHiveString);
  useMaprTForHive.setSelection(checkMaprTForHive);
  if (checkMaprTForHive) {
    maprTUsernameForHiveTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHive));
    maprTPasswordForHiveTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHive));
    maprTClusterForHiveTxt.setText(StringUtils.trimToEmpty(maprTClusterForHive));
    maprTDurationForHiveTxt.setText(maprTDurationForHive == null ? ""String_Node_Str"" : maprTDurationForHive.trim());
  }
  hideControl(useMaprTForHive,!doSupportMapRTicket);
  hideControl(authenticationMaprTComForHive,!(checkMaprTForHive && doSupportMapRTicket));
  hideControl(authenticationUserPassComForHive,Boolean.valueOf(useKrb) && doSupportMapRTicket);
  authenticationGrp.layout();
  authenticationGrp.getParent().layout();
  updateYarnStatus();
  updateYarnInfo(hiveDistribution,hdVersion);
  showIfSupportEncryption();
  updateSSLEncryptionDetailsDisplayStatus();
}",0.9852301351041906
125761,"private void initHBaseSettings(){
  DatabaseConnection connection=getConnection();
  String hadoopDistribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  String hadoopVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  IHDistribution hBaseDistribution=getHBaseDistribution(hadoopDistribution,false);
  if (hBaseDistribution != null) {
    String distributionDisplayName=hBaseDistribution.getDisplayName();
    hbaseDistributionCombo.setText(distributionDisplayName);
    updateHBaseVersionPart(hBaseDistribution);
    IHDistributionVersion hdVersion=hBaseDistribution.getHDVersion(hadoopVersion,false);
    if (hdVersion != null && hdVersion.getDisplayVersion() != null) {
      hbaseVersionCombo.setText(hdVersion.getDisplayVersion());
    }
 else {
      hbaseVersionCombo.select(0);
    }
  }
 else {
    hbaseDistributionCombo.select(0);
    hbaseVersionCombo.select(0);
  }
  String useKrbString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String keytabPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String masterPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
  String regionServerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
  boolean useKrb=Boolean.valueOf(useKrbString);
  boolean useKeytab=Boolean.valueOf(useKeytabString);
  useKerberosForHBase.setSelection(useKrb);
  if (useKrb) {
    useKeyTabForHBase.setSelection(useKeytab);
    if (useKeytab) {
      principalForHBaseTxt.setText(StringUtils.trimToEmpty(keytabPrincipal));
      keytabForHBaseTxt.setText(StringUtils.trimToEmpty(keytab));
    }
    hbaseMasterPrincipalTxt.setText(StringUtils.trimToEmpty(masterPrincipal));
    hbaseRSPrincipalTxt.setText(StringUtils.trimToEmpty(regionServerPrincipal));
  }
  hideControl(keyTabCompoisteForHBase,!useKeytab);
  hideControl(authenticationComForHBase,!useKrb);
  hideControl(authenticationGrpForHBase,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hBaseDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hBaseDistribution.getHDVersion(hadoopVersion,false));
  }
  String useMaprTForHBaseString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHBase=Boolean.valueOf(useMaprTForHBaseString);
  useMaprTForHBase.setEnabled(doSupportMapRTicket);
  useMaprTForHBase.setSelection(checkMaprTForHBase);
  if (checkMaprTForHBase) {
    maprTUsernameForHBaseTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHBase));
    maprTPasswordForHBaseTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHBase));
    maprTClusterForHBaseTxt.setText(StringUtils.trimToEmpty(maprTClusterForHBase));
    maprTDurationForHBaseTxt.setText(maprTDurationForHBase == null ? ""String_Node_Str"" : maprTDurationForHBase.trim());
  }
  hideControl(authenticationMaprTComForHBase,!checkMaprTForHBase);
  hideControl(authenticationUserPassComForHBase,useKrb);
}","private void initHBaseSettings(){
  DatabaseConnection connection=getConnection();
  String hadoopDistribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  String hadoopVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  IHDistribution hBaseDistribution=getHBaseDistribution(hadoopDistribution,false);
  if (hBaseDistribution != null) {
    String distributionDisplayName=hBaseDistribution.getDisplayName();
    hbaseDistributionCombo.setText(distributionDisplayName);
    updateHBaseVersionPart(hBaseDistribution);
    IHDistributionVersion hdVersion=hBaseDistribution.getHDVersion(hadoopVersion,false);
    if (hdVersion != null && hdVersion.getDisplayVersion() != null) {
      hbaseVersionCombo.setText(hdVersion.getDisplayVersion());
    }
 else {
      hbaseVersionCombo.select(0);
    }
  }
 else {
    hbaseDistributionCombo.select(0);
    hbaseVersionCombo.select(0);
  }
  String useKrbString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String keytabPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String masterPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
  String regionServerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
  boolean useKrb=Boolean.valueOf(useKrbString);
  boolean useKeytab=Boolean.valueOf(useKeytabString);
  useKerberosForHBase.setSelection(useKrb);
  if (useKrb) {
    useKeyTabForHBase.setSelection(useKeytab);
    if (useKeytab) {
      principalForHBaseTxt.setText(StringUtils.trimToEmpty(keytabPrincipal));
      keytabForHBaseTxt.setText(StringUtils.trimToEmpty(keytab));
    }
    hbaseMasterPrincipalTxt.setText(StringUtils.trimToEmpty(masterPrincipal));
    hbaseRSPrincipalTxt.setText(StringUtils.trimToEmpty(regionServerPrincipal));
  }
  hideControl(keyTabCompoisteForHBase,!useKeytab);
  hideControl(authenticationComForHBase,!useKrb);
  hideControl(authenticationGrpForHBase,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hBaseDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hBaseDistribution.getHDVersion(hadoopVersion,false));
  }
  String useMaprTForHBaseString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHBase=Boolean.valueOf(useMaprTForHBaseString);
  useMaprTForHBase.setSelection(checkMaprTForHBase);
  if (checkMaprTForHBase) {
    maprTUsernameForHBaseTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHBase));
    maprTPasswordForHBaseTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHBase));
    maprTClusterForHBaseTxt.setText(StringUtils.trimToEmpty(maprTClusterForHBase));
    maprTDurationForHBaseTxt.setText(maprTDurationForHBase == null ? ""String_Node_Str"" : maprTDurationForHBase.trim());
  }
  hideControl(useMaprTForHBase,!doSupportMapRTicket);
  hideControl(authenticationMaprTComForHBase,!(checkMaprTForHBase && doSupportMapRTicket));
  hideControl(authenticationUserPassComForHBase,useKrb && doSupportMapRTicket);
  authenticationGrpForHBase.layout();
  authenticationGrpForHBase.getParent().layout();
}",0.9658500371195248
125762,"/** 
 * check if there exist variables which need to add into the ctxManager.
 * @param contexts
 * @param defaultContextName
 * @param contextItemId
 * @param neededVars
 * @param ctxManager
 * @param added add the variable or not
 * @return
 */
public static Set<String> checkAndAddContextVariables(final List<ContextType> contexts,final String defaultContextName,final String contextItemId,final Set<String> neededVars,final IContextManager ctxManager,boolean added){
  Set<String> addedVars=new HashSet<String>();
  for (  IContext context : ctxManager.getListContext()) {
    ContextType type=ContextUtils.getContextTypeByName(contexts,context.getName(),defaultContextName);
    if (type != null) {
      for (      String var : neededVars) {
        if (context.getContextParameter(var) != null) {
          continue;
        }
        ContextParameterType param=ContextUtils.getContextParameterTypeByName(type,var);
        if (param != null) {
          if (added) {
            JobContextParameter contextParam=new JobContextParameter();
            ContextUtils.updateParameter(param,contextParam);
            if (contextItemId != null) {
              contextParam.setSource(contextItemId);
            }
            contextParam.setContext(context);
            context.getContextParameterList().add(contextParam);
          }
          addedVars.add(var);
        }
      }
    }
  }
  return addedVars;
}","/** 
 * check if there exist variables which need to add into the ctxManager.
 * @param contexts
 * @param defaultContextName
 * @param contextItemId
 * @param neededVars
 * @param ctxManager
 * @param added add the variable or not
 * @return
 */
public static Set<String> checkAndAddContextVariables(final List<ContextType> contexts,final String defaultContextName,final String contextItemId,final Set<String> neededVars,final IContextManager ctxManager,boolean added){
  Set<String> addedVars=new HashSet<String>();
  for (  IContext context : ctxManager.getListContext()) {
    ContextType type=ContextUtils.getContextTypeByName(contexts,context.getName(),defaultContextName);
    if (type != null) {
      for (      IContextParameter jobParam : context.getContextParameterList()) {
        if (contextItemId.equals(jobParam.getSource()) && ContextUtils.getContextParameterTypeByName(type,jobParam.getName()) == null) {
          jobParam.setSource(IContextParameter.BUILT_IN);
        }
      }
      for (      String var : neededVars) {
        if (context.getContextParameter(var) != null) {
          continue;
        }
        ContextParameterType param=ContextUtils.getContextParameterTypeByName(type,var);
        if (param != null) {
          if (added) {
            JobContextParameter contextParam=new JobContextParameter();
            ContextUtils.updateParameter(param,contextParam);
            if (contextItemId != null) {
              contextParam.setSource(contextItemId);
            }
            contextParam.setContext(context);
            context.getContextParameterList().add(contextParam);
          }
          addedVars.add(var);
        }
      }
    }
  }
  return addedVars;
}",0.6981493299298022
125763,public List<ComponentProperties> getAllComponentProperties(Connection connection);,"/** 
 * Get all component properties which are related to the <code>connection</code>.
 * @param connection the connection.
 * @param tableLabel the table which need to consider the component properties along.
 * @return
 */
public List<ComponentProperties> getAllComponentProperties(Connection connection,String tableLabel);",0.4029484029484029
125764,"private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
        String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
        Long desiredTicketDurInSecs=86400L;
        if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
          desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
        }
        try {
          Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",hiveClassLoader,new Object[]{});
          ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
      String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
      String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
      String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",hiveClassLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}","private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useMaprTicket) {
      setMaprTicketConfig(metadataConn,hiveClassLoader,useKerberos);
    }
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}",0.5791951404707669
125765,"protected void swap(Object[] children,int source,int target){
  if (source != target && source > -1 && target > -1 && source < children.length && target < children.length) {
    if (source > target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i--) {
        children[i]=children[i - 1];
      }
      children[target]=sourceObject;
    }
 else     if (source < target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i++) {
        children[i]=children[i + 1];
      }
      children[target]=sourceObject;
    }
  }
}","protected void swap(Object[] children,int source,int target){
  if (source != target && source > -1 && target > -1 && source < children.length && target < children.length) {
    if (source > target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i--) {
        children[i]=children[i - 1];
      }
      children[target]=sourceObject;
    }
 else     if (source < target) {
      Object sourceObject=children[source];
      for (int i=source; i < target; i++) {
        children[i]=children[i + 1];
      }
      children[target]=sourceObject;
    }
  }
}",0.9983079526226736
125766,"/** 
 * RetreiveShema connection width value of nameText, serverText, loginText, passwordText, tableCombo.
 */
private void pressRetreiveSchemaButton(){
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection());
  if (!checkConnectionIsDone) {
    adaptFormToCheckConnection();
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      tableString=tableCombo.getText();
      if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableString) == -1) {
        MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
      List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
      if (useProvider()) {
        metadataColumns=provider.returnMetadataColumnsFromTable(tableString,metadataconnection);
      }
 else {
        metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableString);
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      removeDoubleQuotes(metadataColumnsValid);
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}","/** 
 * RetreiveShema connection width value of nameText, serverText, loginText, passwordText, tableCombo.
 */
private void pressRetreiveSchemaButton(){
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection());
  if (!checkConnectionIsDone) {
    adaptFormToCheckConnection();
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    boolean doit=true;
    if (tableEditorView.getMetadataEditor().getBeanCount() > 0) {
      doit=MessageDialog.openConfirm(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
    }
    if (doit) {
      tableString=tableCombo.getText();
      if (tableCombo.isEnabled() && tableCombo.getCombo().indexOf(tableString) == -1) {
        MessageDialog.openError(getShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
        return;
      }
      List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
      if (useProvider()) {
        metadataColumns=provider.returnMetadataColumnsFromTable(tableString,metadataconnection);
      }
 else {
        metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableString);
      }
      tableEditorView.getMetadataEditor().removeAll();
      List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
      Iterator iterate=metadataColumns.iterator();
      while (iterate.hasNext()) {
        MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
        if (metadataColumn.getTalendType().equals(JavaTypesManager.DATE.getId()) || metadataColumn.getTalendType().equals(PerlTypesManager.DATE)) {
          if (""String_Node_Str"".equals(metadataColumn.getPattern())) {
            metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
            if (EDatabaseTypeName.MSSQL.getDisplayName().equals(metadataconnection.getDbType())) {
              if (""String_Node_Str"".equals(metadataColumn.getSourceType())) {
                metadataColumn.setPattern(TalendQuoteUtils.addQuotes(""String_Node_Str""));
              }
            }
          }
        }
        String columnLabel=metadataColumn.getLabel();
        metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(columnLabel));
        metadataColumnsValid.add(metadataColumn);
      }
      removeDoubleQuotes(metadataColumnsValid);
      tableEditorView.getMetadataEditor().addAll(metadataColumnsValid);
    }
  }
  updateRetreiveSchemaButton();
  changeTableNavigatorStatus(checkFieldsValue());
}",0.9419127713671036
125767,public List<ComponentProperties> getAllComponentProperties(Connection connection);,"/** 
 * Get all component properties which are related to the <code>connection</code>.
 * @param connection the connection.
 * @param tableLabel the table which need to consider the component properties along.
 * @return
 */
public List<ComponentProperties> getAllComponentProperties(Connection connection,String tableLabel);",0.4029484029484029
125768,"protected void swap(Object[] children,int source,int target){
  if (source != target && source > -1 && target > -1 && source < children.length && target < children.length) {
    if (source > target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i--) {
        children[i]=children[i - 1];
      }
      children[target]=sourceObject;
    }
 else     if (source < target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i++) {
        children[i]=children[i + 1];
      }
      children[target]=sourceObject;
    }
  }
}","protected void swap(Object[] children,int source,int target){
  if (source != target && source > -1 && target > -1 && source < children.length && target < children.length) {
    if (source > target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i--) {
        children[i]=children[i - 1];
      }
      children[target]=sourceObject;
    }
 else     if (source < target) {
      Object sourceObject=children[source];
      for (int i=source; i < target; i++) {
        children[i]=children[i + 1];
      }
      children[target]=sourceObject;
    }
  }
}",0.9983079526226736
125769,"public static void saveResource(Resource resource) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  HashMap options=new HashMap(2);
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  options.put(XMLResource.OPTION_ESCAPE_USING_CDATA,Boolean.TRUE);
  try {
    resource.save(options);
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      resource.save(options);
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}","public static void saveResource(Resource resource,OutputStream outputStream) throws PersistenceException {
  if (resource == null) {
    return;
  }
  if (resource.getURI() == null) {
    return;
  }
  HashMap options=new HashMap(2);
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  options.put(XMLResource.OPTION_ESCAPE_USING_CDATA,Boolean.TRUE);
  try {
    if (outputStream == null) {
      resource.save(options);
    }
 else {
      resource.save(outputStream,options);
    }
  }
 catch (  IOException e) {
    throw new PersistenceException(e);
  }
catch (  RuntimeException e) {
    log.warn(""String_Node_Str"" + resource.getURI() + ""String_Node_Str"",e);
    options.put(XMLResource.OPTION_XML_VERSION,""String_Node_Str"");
    try {
      if (outputStream == null) {
        resource.save(options);
      }
 else {
        resource.save(outputStream,options);
      }
    }
 catch (    IOException e1) {
      throw new PersistenceException(e);
    }
  }
}",0.8677494199535963
125770,"private Set<Relation> getItemsHaveRelationWith(Map<Relation,Set<Relation>> itemsRelations,String itemId){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (id != null) {
        Relation tmpRelatedItem=null;
        if (id.indexOf(""String_Node_Str"") != -1) {
          try {
            tmpRelatedItem=(Relation)relatedItem.clone();
            tmpRelatedItem.setId(id.split(""String_Node_Str"")[0]);
          }
 catch (          CloneNotSupportedException e) {
            log.error(e);
          }
        }
 else {
          tmpRelatedItem=relatedItem;
        }
        if (tmpRelatedItem != null && itemId.equals(id)) {
          relations.add(baseItem);
          break;
        }
      }
    }
  }
  return relations;
}","private Set<Relation> getItemsHaveRelationWith(Map<Relation,Set<Relation>> itemsRelations,String itemId,boolean includeTestCase){
  Set<Relation> relations=new HashSet<Relation>();
  for (  Relation baseItem : itemsRelations.keySet()) {
    for (    Relation relatedItem : itemsRelations.get(baseItem)) {
      String id=relatedItem.getId();
      if (id != null) {
        Relation tmpRelatedItem=null;
        if (id.indexOf(""String_Node_Str"") != -1) {
          try {
            tmpRelatedItem=(Relation)relatedItem.clone();
            tmpRelatedItem.setId(id.split(""String_Node_Str"")[0]);
          }
 catch (          CloneNotSupportedException e) {
            log.error(e);
          }
        }
 else {
          tmpRelatedItem=relatedItem;
        }
        if (tmpRelatedItem != null && itemId.equals(id)) {
          if (!includeTestCase && TEST_RELATION.equals(tmpRelatedItem.getType())) {
            continue;
          }
          relations.add(baseItem);
          break;
        }
      }
    }
  }
  return relations;
}",0.9266528925619836
125771,"private void intitializeRefProject(Project project,Object parent){
  if (parent instanceof IRepositoryNode && ((IRepositoryNode)parent).isBin()) {
    return;
  }
  for (  ProjectReference refProject : (List<ProjectReference>)project.getReferencedProjects()) {
    String parentBranch=ProjectManager.getInstance().getMainProjectBranch(project);
    if (refProject.getBranch() == null || parentBranch.equals(refProject.getBranch())) {
      Project p=refProject.getReferencedProject();
      List<Project> list=nodeAndProject.get(parent);
      if (list == null) {
        list=new ArrayList<Project>();
        nodeAndProject.put(parent,list);
      }
      if (list.contains(p)) {
        return;
      }
 else {
        list.add(p);
      }
      initializeChildren(new org.talend.core.model.general.Project(p),parent);
      intitializeRefProject(p,parent);
    }
  }
}","private void intitializeRefProject(Project project,Object parent){
  if (parent instanceof IRepositoryNode && ((IRepositoryNode)parent).isBin()) {
    return;
  }
  for (  ProjectReference refProject : (List<ProjectReference>)project.getReferencedProjects()) {
    String parentBranch=ProjectManager.getInstance().getMainProjectBranch(project);
    if (refProject.getBranch() == null || parentBranch.equals(refProject.getBranch())) {
      Project p=refProject.getReferencedProject();
      initializeChildren(new org.talend.core.model.general.Project(p),parent);
      intitializeRefProject(p,parent);
    }
  }
}",0.8263795423956931
125772,"/** 
 * DOC matthieu Comment method ""calculateObjectEditable"".
 * @return
 */
private void calculateRepositoryObjectEditable(IRepositoryViewObject repositoryViewObject){
  if (repositoryObject != null && !forceReadOnly) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    repositoryObjectEditable=factory.isEditableAndLockIfPossible(repositoryObject);
    if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      final IRepositoryNode repositoryNode=repositoryViewObject.getRepositoryNode();
      IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
      if (repositoryView != null) {
        repositoryView.expand(repositoryNode);
        repositoryView.getViewer().refresh(repositoryObject.getRepositoryObjectType());
      }
    }
  }
}","/** 
 * DOC matthieu Comment method ""calculateObjectEditable"".
 * @return
 */
private void calculateRepositoryObjectEditable(IRepositoryViewObject repositoryViewObject){
  if (repositoryObject != null && !forceReadOnly) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    repositoryObjectEditable=factory.isEditableAndLockIfPossible(repositoryViewObject);
    if (!CoreRuntimePlugin.getInstance().isDataProfilePerspectiveSelected()) {
      final IRepositoryNode repositoryNode=repositoryViewObject.getRepositoryNode();
      IRepositoryView repositoryView=RepositoryManagerHelper.findRepositoryView();
      if (repositoryView != null) {
        repositoryView.expand(repositoryNode);
        repositoryView.getViewer().refresh(repositoryObject.getRepositoryObjectType());
      }
    }
  }
}",0.9975579975579976
125773,"private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}","private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
        Object mapRTicketDuration=metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
      String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
      String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
      Object mapRTicketDuration=metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}",0.5780869565217391
125774,"public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvroForDynamic(Schema schema){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  String prop;
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_ID))) {
    col.setId(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME))) {
    col.setLabel(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : schema.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,schema.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  col.setTalendType(""String_Node_Str"");
  return col;
}","public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvroForDynamic(Schema schema){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  String prop;
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_ID))) {
    col.setId(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME))) {
    col.setLabel(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : schema.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,schema.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value >= 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value >= 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value >= 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=schema.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  col.setTalendType(""String_Node_Str"");
  return col;
}",0.9995262908574136
125775,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_CUSTOM))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(Talend6SchemaConstants.TALEND6_COLUMN_CUSTOM,prop);
    col.getTaggedValue().add(tv);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SCALE))) {
    Long value=Long.parseLong(prop);
    col.setScale(value > 0 ? value : -1);
  }
 else {
    col.setScale(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,prop);
    col.getTaggedValue().add(tv);
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_CUSTOM))) {
    TaggedValue tv=TaggedValueHelper.createTaggedValue(Talend6SchemaConstants.TALEND6_COLUMN_CUSTOM,prop);
    col.getTaggedValue().add(tv);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    if (!StringUtils.isEmpty(prop)) {
      col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value >= 0 ? value : -1);
  }
 else {
    col.setLength(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value >= 0 ? value : -1);
  }
 else {
    col.setOriginalLength(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value >= 0 ? value : -1);
  }
 else {
    col.setPrecision(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SCALE))) {
    Long value=Long.parseLong(prop);
    col.setScale(value >= 0 ? value : -1);
  }
 else {
    col.setScale(-1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}",0.9996415128159168
125776,"/** 
 * DOC qiang.zhang Comment method ""convert"".
 * @param metadataTable
 * @return
 */
public static MetadataTable convert(IMetadataTable old){
  MetadataTable result=ConnectionFactory.eINSTANCE.createMetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  result.setSourceName(old.getTableName());
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>(old.getListColumns().size());
  for (  IMetadataColumn column : old.getListColumns()) {
    MetadataColumn newColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefaultValue(column.getDefault());
    newColumn.setKey(column.isKey());
    newColumn.setLabel(column.getLabel());
    newColumn.setPattern(column.getPattern());
    if (column.getLength() == null || column.getLength() < 0) {
      newColumn.setLength(-1);
    }
 else {
      newColumn.setLength(column.getLength());
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() == null || column.getPrecision() < 0) {
      newColumn.setPrecision(-1);
    }
 else {
      newColumn.setPrecision(column.getPrecision());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setSourceType(column.getType());
    if (column.getOriginalDbColumnName() == null || column.getOriginalDbColumnName().equals(""String_Node_Str"")) {
      newColumn.setName(column.getLabel());
    }
 else {
      newColumn.setName(column.getOriginalDbColumnName());
    }
  }
  result.getColumns().addAll(columns);
  return result;
}","/** 
 * DOC qiang.zhang Comment method ""convert"".
 * @param metadataTable
 * @return
 */
public static MetadataTable convert(IMetadataTable old){
  MetadataTable result=ConnectionFactory.eINSTANCE.createMetadataTable();
  result.setComment(old.getComment());
  result.setId(old.getId());
  result.setLabel(old.getLabel());
  result.setSourceName(old.getTableName());
  List<MetadataColumn> columns=new ArrayList<MetadataColumn>(old.getListColumns().size());
  for (  IMetadataColumn column : old.getListColumns()) {
    MetadataColumn newColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
    columns.add(newColumn);
    newColumn.setComment(column.getComment());
    newColumn.setDefaultValue(column.getDefault());
    newColumn.setKey(column.isKey());
    newColumn.setLabel(column.getLabel());
    newColumn.setPattern(column.getPattern());
    if (column.getLength() == null || column.getLength() < 0) {
      newColumn.setLength(-1);
    }
 else {
      newColumn.setLength(column.getLength());
    }
    if (column.getOriginalLength() == null || column.getOriginalLength() < 0) {
      newColumn.setOriginalLength(-1);
    }
 else {
      newColumn.setOriginalLength(column.getOriginalLength());
    }
    newColumn.setNullable(column.isNullable());
    if (column.getPrecision() == null || column.getPrecision() < 0) {
      newColumn.setPrecision(-1);
    }
 else {
      newColumn.setPrecision(column.getPrecision());
    }
    newColumn.setTalendType(column.getTalendType());
    newColumn.setSourceType(column.getType());
    if (column.getOriginalDbColumnName() == null || column.getOriginalDbColumnName().equals(""String_Node_Str"")) {
      newColumn.setName(column.getLabel());
    }
 else {
      newColumn.setName(column.getOriginalDbColumnName());
    }
  }
  result.getColumns().addAll(columns);
  return result;
}",0.9418872266973533
125777,"@SuppressWarnings(""String_Node_Str"") private static String getDisplayValue(final IElementParameter param){
  Object value=param.getValue();
  if (value instanceof String) {
    if (""String_Node_Str"".equals(param.getName()) && value.equals(RelationshipItemBuilder.LATEST_VERSION)) {
      String jobId=(String)param.getParentParameter().getChildParameters().get(""String_Node_Str"").getValue();
      ProcessItem processItem=ItemCacheManager.getProcessItem(jobId);
      if (processItem == null) {
        return ""String_Node_Str"";
      }
      return processItem.getProperty().getVersion();
    }
 else     if (""String_Node_Str"".equals(param.getName())) {
      String jobId=(String)param.getParentParameter().getChildParameters().get(""String_Node_Str"").getValue();
      ProcessItem processItem=ItemCacheManager.getProcessItem(jobId);
      if (processItem == null) {
        return ""String_Node_Str"";
      }
      boolean contextExists=false;
      for (      Object object : processItem.getProcess().getContext()) {
        if (object instanceof ContextType) {
          if (((ContextType)object).getName() != null && ((ContextType)object).getName().equals(value)) {
            contextExists=true;
            continue;
          }
        }
      }
      if (!contextExists) {
        return processItem.getProcess().getDefaultContext();
      }
      return (String)value;
    }
 else     if (""String_Node_Str"".equals(param.getName())) {
      String jobId=(String)param.getChildParameters().get(""String_Node_Str"").getValue();
      ProcessItem processItem=ItemCacheManager.getProcessItem(jobId);
      if (processItem == null) {
        return ""String_Node_Str"";
      }
      return processItem.getProperty().getLabel();
    }
 else     if (""String_Node_Str"".equals(param.getRepositoryValue())) {
      IElementParameter propertyParam=param.getElement().getElementParameter(""String_Node_Str"");
      if (propertyParam != null && propertyParam.getValue() != null && !propertyParam.getValue().equals(""String_Node_Str"")) {
        try {
          IRepositoryViewObject object=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getLastVersion((String)propertyParam.getValue());
          if (object != null) {
            Item item=object.getProperty().getItem();
            String extension=null;
            String rule=""String_Node_Str"";
            String processLabelAndVersion=null;
            if (item instanceof RulesItem) {
              RulesItem rulesItem=(RulesItem)item;
              extension=rulesItem.getExtension();
              if (param.getElement() instanceof INode) {
                INode node=(INode)param.getElement();
                IProcess process=node.getProcess();
                String jobLabel=process.getName();
                String jobVersion=process.getVersion();
                processLabelAndVersion=JavaResourcesHelper.getJobFolderName(jobLabel,jobVersion);
              }
              rule=""String_Node_Str"" + processLabelAndVersion + ""String_Node_Str""+ rulesItem.getProperty().getLabel()+ rulesItem.getProperty().getVersion()+ extension;
            }
            return TalendQuoteUtils.addQuotes(rule);
          }
 else {
            return param.getValue().toString();
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
    return (String)value;
  }
  if (param.getFieldType() == EParameterFieldType.RADIO || param.getFieldType() == EParameterFieldType.CHECK || param.getFieldType() == EParameterFieldType.AS400_CHECK) {
    if (value instanceof Boolean) {
      return ((Boolean)param.getValue()).toString();
    }
 else {
      return Boolean.FALSE.toString();
    }
  }
  if (param.getFieldType() == EParameterFieldType.TABLE) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
    String[] items=param.getListItemsDisplayCodeName();
    String stringValues=""String_Node_Str"";
    for (int i=0; i < tableValues.size(); i++) {
      Map<String,Object> lineValues=tableValues.get(i);
      stringValues+=""String_Node_Str"";
      for (int j=0; j < items.length; j++) {
        Object currentValue=lineValues.get(items[j]);
        if (currentValue instanceof Integer) {
          IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[j];
          if (tmpParam.getListItemsDisplayName().length != 0) {
            stringValues+=tmpParam.getListItemsDisplayName()[(Integer)currentValue];
          }
        }
 else {
          stringValues+=currentValue;
        }
        if (j != (items.length - 1)) {
          stringValues+=""String_Node_Str"";
        }
      }
      stringValues+=""String_Node_Str"";
      if (i != (tableValues.size() - 1)) {
        stringValues+=""String_Node_Str"";
      }
    }
    stringValues+=""String_Node_Str"";
    return stringValues;
  }
  return new String(""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") private static String getDisplayValue(final IElementParameter param){
  Object value=param.getValue();
  if (value instanceof String) {
    if (""String_Node_Str"".equals(param.getName()) && value.equals(RelationshipItemBuilder.LATEST_VERSION)) {
      String jobId=(String)param.getParentParameter().getChildParameters().get(""String_Node_Str"").getValue();
      ProcessItem processItem=ItemCacheManager.getProcessItem(jobId);
      if (processItem == null) {
        return ""String_Node_Str"";
      }
      return processItem.getProperty().getVersion();
    }
 else     if (""String_Node_Str"".equals(param.getName())) {
      String jobId=(String)param.getParentParameter().getChildParameters().get(""String_Node_Str"").getValue();
      ProcessItem processItem=ItemCacheManager.getProcessItem(jobId);
      if (processItem == null) {
        return ""String_Node_Str"";
      }
      boolean contextExists=false;
      for (      Object object : processItem.getProcess().getContext()) {
        if (object instanceof ContextType) {
          if (((ContextType)object).getName() != null && ((ContextType)object).getName().equals(value)) {
            contextExists=true;
            continue;
          }
        }
      }
      if (!contextExists) {
        return processItem.getProcess().getDefaultContext();
      }
      return (String)value;
    }
 else     if (""String_Node_Str"".equals(param.getName())) {
      String jobId=(String)param.getChildParameters().get(""String_Node_Str"").getValue();
      ProcessItem processItem=ItemCacheManager.getProcessItem(jobId);
      if (processItem == null) {
        return ""String_Node_Str"";
      }
      return processItem.getProperty().getLabel();
    }
 else     if (""String_Node_Str"".equals(param.getRepositoryValue())) {
      IElementParameter propertyParam=param.getElement().getElementParameter(""String_Node_Str"");
      if (propertyParam != null && propertyParam.getValue() != null && !propertyParam.getValue().equals(""String_Node_Str"")) {
        try {
          IRepositoryViewObject object=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory().getLastVersion((String)propertyParam.getValue());
          if (object != null) {
            Item item=object.getProperty().getItem();
            String extension=null;
            String rule=""String_Node_Str"";
            String processLabelAndVersion=null;
            if (item instanceof RulesItem) {
              RulesItem rulesItem=(RulesItem)item;
              extension=rulesItem.getExtension();
              if (param.getElement() instanceof INode) {
                INode node=(INode)param.getElement();
                IProcess process=node.getProcess();
                String jobLabel=process.getName();
                String jobVersion=process.getVersion();
                processLabelAndVersion=JavaResourcesHelper.getJobFolderName(jobLabel,jobVersion);
              }
              rule=""String_Node_Str"" + processLabelAndVersion + ""String_Node_Str""+ rulesItem.getProperty().getLabel()+ rulesItem.getProperty().getVersion()+ extension;
            }
            return TalendQuoteUtils.addQuotes(rule);
          }
 else {
            return param.getValue().toString();
          }
        }
 catch (        Exception e) {
          ExceptionHandler.process(e);
        }
      }
    }
 else     if (param.getFieldType() == EParameterFieldType.TEXT_AREA) {
      return param.getValue().toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    }
    return (String)value;
  }
  if (param.getFieldType() == EParameterFieldType.RADIO || param.getFieldType() == EParameterFieldType.CHECK || param.getFieldType() == EParameterFieldType.AS400_CHECK) {
    if (value instanceof Boolean) {
      return ((Boolean)param.getValue()).toString();
    }
 else {
      return Boolean.FALSE.toString();
    }
  }
  if (param.getFieldType() == EParameterFieldType.TABLE) {
    List<Map<String,Object>> tableValues=(List<Map<String,Object>>)param.getValue();
    String[] items=param.getListItemsDisplayCodeName();
    String stringValues=""String_Node_Str"";
    for (int i=0; i < tableValues.size(); i++) {
      Map<String,Object> lineValues=tableValues.get(i);
      stringValues+=""String_Node_Str"";
      for (int j=0; j < items.length; j++) {
        Object currentValue=lineValues.get(items[j]);
        if (currentValue instanceof Integer) {
          IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[j];
          if (tmpParam.getListItemsDisplayName().length != 0) {
            stringValues+=tmpParam.getListItemsDisplayName()[(Integer)currentValue];
          }
        }
 else {
          stringValues+=currentValue;
        }
        if (j != (items.length - 1)) {
          stringValues+=""String_Node_Str"";
        }
      }
      stringValues+=""String_Node_Str"";
      if (i != (tableValues.size() - 1)) {
        stringValues+=""String_Node_Str"";
      }
    }
    stringValues+=""String_Node_Str"";
    return stringValues;
  }
  return new String(""String_Node_Str"");
}",0.9790979097909792
125778,"private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
        Object mapRTicketDuration=metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
      String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
      String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
      Object mapRTicketDuration=metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}","private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
        String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
        Long desiredTicketDurInSecs=86400L;
        if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
          desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
        }
        try {
          Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",hiveClassLoader,new Object[]{});
          ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,desiredTicketDurInSecs});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
      String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
      String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
      String mapRTicketDuration=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
      Long desiredTicketDurInSecs=86400L;
      if (mapRTicketDuration != null && StringUtils.isNotBlank(mapRTicketDuration)) {
        desiredTicketDurInSecs=Long.parseLong(mapRTicketDuration);
      }
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        Object mapRClientConfig=ReflectionUtils.newInstance(""String_Node_Str"",hiveClassLoader,new Object[]{});
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{false},boolean.class);
        ReflectionUtils.invokeMethod(mapRClientConfig,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,desiredTicketDurInSecs});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}",0.8116314375802873
125779,"private void addHBaseSettingFieldsListeners(){
  hbaseDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      IHDistribution newDistribution=getHBaseDistribution(hbaseDistributionCombo.getText(),true);
      if (newDistribution == null) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      boolean doSupportMapRTicket=false;
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService != null && newDistribution != null) {
        doSupportMapRTicket=hadoopService.doSupportMapRTicket(newDistribution.getDefaultVersion());
      }
      useMaprTForHBase.setEnabled(doSupportMapRTicket);
      hideControl(useMaprTForHBase,!doSupportMapRTicket);
      hideControl(authenticationMaprTComForHBase,!doSupportMapRTicket);
      hideControl(authenticationUserPassComForHBase,!doSupportMapRTicket);
      if (originalDistribution == null || !newDistribution.getName().equals(originalDistribution.getName())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,newDistribution.getName());
        updateHBaseVersionPart(newDistribution);
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      if (originalDistribution == null) {
        return;
      }
      String newVersionDisplayName=StringUtils.trimToNull(hbaseVersionCombo.getText());
      IHDistributionVersion newVersion=originalDistribution.getHDVersion(newVersionDisplayName,true);
      if (newVersion == null) {
        return;
      }
      String originalVersionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
      IHDistributionVersion originalVersion=originalDistribution.getHDVersion(originalVersionName,false);
      if (originalVersion == null || newVersion.getVersion() != null && !newVersion.getVersion().equals(originalVersion.getVersion())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,newVersion.getVersion());
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseCustomButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleHadoopCustomVersion(ECustomVersionType.HBASE);
    }
  }
);
}","private void addHBaseSettingFieldsListeners(){
  hbaseDistributionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      IHDistribution newDistribution=getHBaseDistribution(hbaseDistributionCombo.getText(),true);
      if (newDistribution == null) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      boolean doSupportMapRTicket=false;
      IHadoopDistributionService hadoopService=getHadoopDistributionService();
      if (hadoopService != null && newDistribution != null) {
        doSupportMapRTicket=hadoopService.doSupportMapRTicket(newDistribution.getDefaultVersion());
      }
      useMaprTForHBase.setEnabled(doSupportMapRTicket);
      hideControl(useMaprTForHBase,!doSupportMapRTicket);
      hideControl(authenticationMaprTComForHBase,!useMaprTForHBase.getSelection());
      hideControl(authenticationUserPassComForHBase,!useMaprTForHBase.getSelection());
      if (originalDistribution == null || !newDistribution.getName().equals(originalDistribution.getName())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION,newDistribution.getName());
        updateHBaseVersionPart(newDistribution);
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseVersionCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (isContextMode()) {
        return;
      }
      String originalDistributionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
      IHDistribution originalDistribution=getHBaseDistribution(originalDistributionName,false);
      if (originalDistribution == null) {
        return;
      }
      String newVersionDisplayName=StringUtils.trimToNull(hbaseVersionCombo.getText());
      IHDistributionVersion newVersion=originalDistribution.getHDVersion(newVersionDisplayName,true);
      if (newVersion == null) {
        return;
      }
      String originalVersionName=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
      IHDistributionVersion originalVersion=originalDistribution.getHDVersion(originalVersionName,false);
      if (originalVersion == null || newVersion.getVersion() != null && !newVersion.getVersion().equals(originalVersion.getVersion())) {
        getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION,newVersion.getVersion());
        fillDefaultsWhenHBaseVersionChanged();
        checkFieldsValue();
      }
    }
  }
);
  hbaseCustomButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      handleHadoopCustomVersion(ECustomVersionType.HBASE);
    }
  }
);
}",0.9713533091866974
125780,"/** 
 * Added by Marvin Wang on Aug 10, 2012.
 */
protected void doHiveDistributionModify(){
  IHDistribution newHiveDistribution=getCurrentHiveDistribution(false);
  if (newHiveDistribution == null) {
    return;
  }
  String distributionObj=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  IHDistribution originalHiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && newHiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(newHiveDistribution.getDefaultVersion());
  }
  useMaprTForHive.setEnabled(doSupportMapRTicket);
  hideControl(useMaprTForHive,!doSupportMapRTicket);
  hideControl(authenticationMaprTComForHive,!doSupportMapRTicket);
  hideControl(authenticationUserPassComForHive,!doSupportMapRTicket);
  if (originalHiveDistribution == null || !newHiveDistribution.equals(originalHiveDistribution)) {
    updateHiveVersionAndMakeSelection(newHiveDistribution,null);
    setHideVersionInfoWidgets(false);
    updateYarnInfo(newHiveDistribution,null);
    updateHiveModeAndMakeSelection(null);
    doHiveModeModify();
    fillDefaultsWhenHiveVersionChanged();
  }
}","/** 
 * Added by Marvin Wang on Aug 10, 2012.
 */
protected void doHiveDistributionModify(){
  IHDistribution newHiveDistribution=getCurrentHiveDistribution(false);
  if (newHiveDistribution == null) {
    return;
  }
  String distributionObj=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  IHDistribution originalHiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && newHiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(newHiveDistribution.getDefaultVersion());
  }
  useMaprTForHive.setEnabled(doSupportMapRTicket);
  hideControl(useMaprTForHive,!doSupportMapRTicket);
  hideControl(authenticationMaprTComForHive,!useMaprTForHive.getSelection());
  hideControl(authenticationUserPassComForHive,!useMaprTForHive.getSelection());
  if (originalHiveDistribution == null || !newHiveDistribution.equals(originalHiveDistribution)) {
    updateHiveVersionAndMakeSelection(newHiveDistribution,null);
    setHideVersionInfoWidgets(false);
    updateYarnInfo(newHiveDistribution,null);
    updateHiveModeAndMakeSelection(null);
    doHiveModeModify();
    fillDefaultsWhenHiveVersionChanged();
  }
}",0.9644746787603932
125781,"/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  IHDistribution hiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  IHDistributionVersion hdVersion=null;
  if (hiveDistribution != null) {
    hdVersion=hiveDistribution.getHDVersion(hiveVersion,false);
    updateHiveDistributionAndMakeSelection(hiveDistribution);
    updateHiveVersionAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveServerAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveModeAndMakeSelection(HiveModeInfo.get(hiveMode));
  }
 else {
    updateHiveDistributionAndMakeSelection(null);
    updateHiveVersionAndMakeSelection(null,null);
    updateHiveServerAndMakeSelection(null,null);
    updateHiveModeAndMakeSelection(null);
  }
  doHiveModeModify();
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hadoopUserName=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    usernameText.setText(hadoopUserName == null ? ""String_Node_Str"" : hadoopUserName);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
  String useKrb=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String hivePrincipla=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
  String metastoreUrl=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
  String driverJarPath=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
  String driverClass=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
  String username=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
  String password=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String Principla=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String additionalJDBCSettings=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
  boolean useSSL=Boolean.parseBoolean(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
  String trustStorePathStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
  String trustStorePasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
  if (Boolean.valueOf(useKrb)) {
    useKerberos.setSelection(true);
    GridData hadoopData=(GridData)authenticationCom.getLayoutData();
    hadoopData.exclude=false;
    authenticationCom.setVisible(true);
    authenticationCom.setLayoutData(hadoopData);
    authenticationCom.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  hivePrincipalTxt.setText(hivePrincipla == null ? ""String_Node_Str"" : hivePrincipla);
  metastoreUrlTxt.setText(metastoreUrl == null ? ""String_Node_Str"" : metastoreUrl);
  driverJarTxt.setText(driverJarPath == null ? ""String_Node_Str"" : driverJarPath);
  driverClassTxt.setText(driverClass == null ? ""String_Node_Str"" : driverClass);
  usernameTxt.setText(username == null ? ""String_Node_Str"" : username);
  passwordTxt.setText(password == null ? ""String_Node_Str"" : password);
  additionalJDBCSettingsText.setText(additionalJDBCSettings == null ? ""String_Node_Str"" : additionalJDBCSettings);
  useSSLEncryption.setSelection(useSSL);
  trustStorePath.setText(trustStorePathStr == null ? ""String_Node_Str"" : trustStorePathStr);
  if (trustStorePasswordStr == null) {
    trustStorePasswordStr=""String_Node_Str"";
  }
 else {
    trustStorePasswordStr=connection.getValue(trustStorePasswordStr,false);
  }
  trustStorePassword.setText(trustStorePasswordStr);
  if (Boolean.valueOf(useKeytabString)) {
    useKeyTab.setSelection(true);
    GridData hadoopData=(GridData)keyTabComponent.getLayoutData();
    hadoopData.exclude=false;
    keyTabComponent.setVisible(true);
    keyTabComponent.setLayoutData(hadoopData);
    keyTabComponent.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  principalTxt.setText(Principla == null ? ""String_Node_Str"" : Principla);
  keytabTxt.setText(keytab == null ? ""String_Node_Str"" : keytab);
  String executionEngine=connection.getParameters().get(ConnParameterKeys.HIVE_EXECUTION_ENGINE);
  EHiveExecutionTypes executionType=EHiveExecutionTypes.getTypeFromValue(executionEngine);
  if (executionType != null) {
    hiveExecutionEngineCombo.setText(executionType.getLabel());
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.HIVE_EXECUTION_ENGINE,null);
  }
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hiveDistribution.getHDVersion(hiveVersion,false));
  }
  String useMaprTForHiveString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHive=Boolean.valueOf(useMaprTForHiveString);
  useMaprTForHive.setEnabled(doSupportMapRTicket);
  useMaprTForHive.setSelection(checkMaprTForHive);
  if (checkMaprTForHive) {
    maprTUsernameForHiveTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHive));
    maprTPasswordForHiveTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHive));
    maprTClusterForHiveTxt.setText(StringUtils.trimToEmpty(maprTClusterForHive));
    maprTDurationForHiveTxt.setText(StringUtils.trimToEmpty(maprTDurationForHive));
  }
  hideControl(authenticationMaprTComForHive,!checkMaprTForHive);
  hideControl(authenticationUserPassComForHive,Boolean.valueOf(useKrb));
  updateYarnStatus();
  updateYarnInfo(hiveDistribution,hdVersion);
  showIfSupportEncryption();
  updateSSLEncryptionDetailsDisplayStatus();
}","/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  IHDistribution hiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  IHDistributionVersion hdVersion=null;
  if (hiveDistribution != null) {
    hdVersion=hiveDistribution.getHDVersion(hiveVersion,false);
    updateHiveDistributionAndMakeSelection(hiveDistribution);
    updateHiveVersionAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveServerAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveModeAndMakeSelection(HiveModeInfo.get(hiveMode));
  }
 else {
    updateHiveDistributionAndMakeSelection(null);
    updateHiveVersionAndMakeSelection(null,null);
    updateHiveServerAndMakeSelection(null,null);
    updateHiveModeAndMakeSelection(null);
  }
  doHiveModeModify();
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hadoopUserName=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    usernameText.setText(hadoopUserName == null ? ""String_Node_Str"" : hadoopUserName);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
  String useKrb=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String hivePrincipla=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
  String metastoreUrl=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
  String driverJarPath=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
  String driverClass=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
  String username=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
  String password=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String Principla=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String additionalJDBCSettings=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_ADDITIONAL_JDBC_SETTINGS);
  boolean useSSL=Boolean.parseBoolean(connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_SSL));
  String trustStorePathStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PATH);
  String trustStorePasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_SSL_TRUST_STORE_PASSWORD);
  if (Boolean.valueOf(useKrb)) {
    useKerberos.setSelection(true);
    GridData hadoopData=(GridData)authenticationCom.getLayoutData();
    hadoopData.exclude=false;
    authenticationCom.setVisible(true);
    authenticationCom.setLayoutData(hadoopData);
    authenticationCom.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  hivePrincipalTxt.setText(hivePrincipla == null ? ""String_Node_Str"" : hivePrincipla);
  metastoreUrlTxt.setText(metastoreUrl == null ? ""String_Node_Str"" : metastoreUrl);
  driverJarTxt.setText(driverJarPath == null ? ""String_Node_Str"" : driverJarPath);
  driverClassTxt.setText(driverClass == null ? ""String_Node_Str"" : driverClass);
  usernameTxt.setText(username == null ? ""String_Node_Str"" : username);
  passwordTxt.setText(password == null ? ""String_Node_Str"" : password);
  additionalJDBCSettingsText.setText(additionalJDBCSettings == null ? ""String_Node_Str"" : additionalJDBCSettings);
  useSSLEncryption.setSelection(useSSL);
  trustStorePath.setText(trustStorePathStr == null ? ""String_Node_Str"" : trustStorePathStr);
  if (trustStorePasswordStr == null) {
    trustStorePasswordStr=""String_Node_Str"";
  }
 else {
    trustStorePasswordStr=connection.getValue(trustStorePasswordStr,false);
  }
  trustStorePassword.setText(trustStorePasswordStr);
  if (Boolean.valueOf(useKeytabString)) {
    useKeyTab.setSelection(true);
    GridData hadoopData=(GridData)keyTabComponent.getLayoutData();
    hadoopData.exclude=false;
    keyTabComponent.setVisible(true);
    keyTabComponent.setLayoutData(hadoopData);
    keyTabComponent.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  principalTxt.setText(Principla == null ? ""String_Node_Str"" : Principla);
  keytabTxt.setText(keytab == null ? ""String_Node_Str"" : keytab);
  String executionEngine=connection.getParameters().get(ConnParameterKeys.HIVE_EXECUTION_ENGINE);
  EHiveExecutionTypes executionType=EHiveExecutionTypes.getTypeFromValue(executionEngine);
  if (executionType != null) {
    hiveExecutionEngineCombo.setText(executionType.getLabel());
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.HIVE_EXECUTION_ENGINE,null);
  }
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hiveDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hiveDistribution.getHDVersion(hiveVersion,false));
  }
  String useMaprTForHiveString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHive=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHive=Boolean.valueOf(useMaprTForHiveString);
  useMaprTForHive.setEnabled(doSupportMapRTicket);
  useMaprTForHive.setSelection(checkMaprTForHive);
  if (checkMaprTForHive) {
    maprTUsernameForHiveTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHive));
    maprTPasswordForHiveTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHive));
    maprTClusterForHiveTxt.setText(StringUtils.trimToEmpty(maprTClusterForHive));
    maprTDurationForHiveTxt.setText(maprTDurationForHive == null ? ""String_Node_Str"" : maprTDurationForHive.trim());
  }
  hideControl(authenticationMaprTComForHive,!checkMaprTForHive);
  hideControl(authenticationUserPassComForHive,Boolean.valueOf(useKrb));
  updateYarnStatus();
  updateYarnInfo(hiveDistribution,hdVersion);
  showIfSupportEncryption();
  updateSSLEncryptionDetailsDisplayStatus();
}",0.9953214347600068
125782,"private void initHBaseSettings(){
  DatabaseConnection connection=getConnection();
  String hadoopDistribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  String hadoopVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  IHDistribution hBaseDistribution=getHBaseDistribution(hadoopDistribution,false);
  if (hBaseDistribution != null) {
    String distributionDisplayName=hBaseDistribution.getDisplayName();
    hbaseDistributionCombo.setText(distributionDisplayName);
    updateHBaseVersionPart(hBaseDistribution);
    IHDistributionVersion hdVersion=hBaseDistribution.getHDVersion(hadoopVersion,false);
    if (hdVersion != null && hdVersion.getDisplayVersion() != null) {
      hbaseVersionCombo.setText(hdVersion.getDisplayVersion());
    }
 else {
      hbaseVersionCombo.select(0);
    }
  }
 else {
    hbaseDistributionCombo.select(0);
    hbaseVersionCombo.select(0);
  }
  String useKrbString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String keytabPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String masterPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
  String regionServerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
  boolean useKrb=Boolean.valueOf(useKrbString);
  boolean useKeytab=Boolean.valueOf(useKeytabString);
  useKerberosForHBase.setSelection(useKrb);
  if (useKrb) {
    useKeyTabForHBase.setSelection(useKeytab);
    if (useKeytab) {
      principalForHBaseTxt.setText(StringUtils.trimToEmpty(keytabPrincipal));
      keytabForHBaseTxt.setText(StringUtils.trimToEmpty(keytab));
    }
    hbaseMasterPrincipalTxt.setText(StringUtils.trimToEmpty(masterPrincipal));
    hbaseRSPrincipalTxt.setText(StringUtils.trimToEmpty(regionServerPrincipal));
  }
  hideControl(keyTabCompoisteForHBase,!useKeytab);
  hideControl(authenticationComForHBase,!useKrb);
  hideControl(authenticationGrpForHBase,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hBaseDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hBaseDistribution.getHDVersion(hadoopVersion,false));
  }
  String useMaprTForHBaseString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHBase=Boolean.valueOf(useMaprTForHBaseString);
  useMaprTForHBase.setEnabled(doSupportMapRTicket);
  useMaprTForHBase.setSelection(checkMaprTForHBase);
  if (checkMaprTForHBase) {
    maprTUsernameForHBaseTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHBase));
    maprTPasswordForHBaseTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHBase));
    maprTClusterForHBaseTxt.setText(StringUtils.trimToEmpty(maprTClusterForHBase));
    maprTDurationForHBaseTxt.setText(StringUtils.trimToEmpty(maprTDurationForHBase));
  }
  hideControl(authenticationMaprTComForHBase,!checkMaprTForHBase);
  hideControl(authenticationUserPassComForHBase,useKrb);
}","private void initHBaseSettings(){
  DatabaseConnection connection=getConnection();
  String hadoopDistribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_DISTRIBUTION);
  String hadoopVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_VERSION);
  IHDistribution hBaseDistribution=getHBaseDistribution(hadoopDistribution,false);
  if (hBaseDistribution != null) {
    String distributionDisplayName=hBaseDistribution.getDisplayName();
    hbaseDistributionCombo.setText(distributionDisplayName);
    updateHBaseVersionPart(hBaseDistribution);
    IHDistributionVersion hdVersion=hBaseDistribution.getHDVersion(hadoopVersion,false);
    if (hdVersion != null && hdVersion.getDisplayVersion() != null) {
      hbaseVersionCombo.setText(hdVersion.getDisplayVersion());
    }
 else {
      hbaseVersionCombo.select(0);
    }
  }
 else {
    hbaseDistributionCombo.select(0);
    hbaseVersionCombo.select(0);
  }
  String useKrbString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String keytabPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  String masterPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
  String regionServerPrincipal=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
  boolean useKrb=Boolean.valueOf(useKrbString);
  boolean useKeytab=Boolean.valueOf(useKeytabString);
  useKerberosForHBase.setSelection(useKrb);
  if (useKrb) {
    useKeyTabForHBase.setSelection(useKeytab);
    if (useKeytab) {
      principalForHBaseTxt.setText(StringUtils.trimToEmpty(keytabPrincipal));
      keytabForHBaseTxt.setText(StringUtils.trimToEmpty(keytab));
    }
    hbaseMasterPrincipalTxt.setText(StringUtils.trimToEmpty(masterPrincipal));
    hbaseRSPrincipalTxt.setText(StringUtils.trimToEmpty(regionServerPrincipal));
  }
  hideControl(keyTabCompoisteForHBase,!useKeytab);
  hideControl(authenticationComForHBase,!useKrb);
  hideControl(authenticationGrpForHBase,false);
  boolean doSupportMapRTicket=false;
  IHadoopDistributionService hadoopService=getHadoopDistributionService();
  if (hadoopService != null && hBaseDistribution != null) {
    doSupportMapRTicket=hadoopService.doSupportMapRTicket(hBaseDistribution.getHDVersion(hadoopVersion,false));
  }
  String useMaprTForHBaseString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USE_MAPRTICKET);
  String maprTUsernameForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_USERNAME);
  String maprTPasswordForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_PASSWORD);
  String maprTClusterForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_CLUSTER);
  String maprTDurationForHBase=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MAPRTICKET_DURATION);
  boolean checkMaprTForHBase=Boolean.valueOf(useMaprTForHBaseString);
  useMaprTForHBase.setEnabled(doSupportMapRTicket);
  useMaprTForHBase.setSelection(checkMaprTForHBase);
  if (checkMaprTForHBase) {
    maprTUsernameForHBaseTxt.setText(StringUtils.trimToEmpty(maprTUsernameForHBase));
    maprTPasswordForHBaseTxt.setText(StringUtils.trimToEmpty(maprTPasswordForHBase));
    maprTClusterForHBaseTxt.setText(StringUtils.trimToEmpty(maprTClusterForHBase));
    maprTDurationForHBaseTxt.setText(maprTDurationForHBase == null ? ""String_Node_Str"" : maprTDurationForHBase.trim());
  }
  hideControl(authenticationMaprTComForHBase,!checkMaprTForHBase);
  hideControl(authenticationUserPassComForHBase,useKrb);
}",0.9896333754740836
125783,"@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          id=EcoreUtil.generateUUID();
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        itemRecord.getProperty().setId(id);
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      service.loadComponentsFromProviders();
    }
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      if (Platform.inDebugMode()) {
        ExceptionHandler.process(e);
      }
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
}","@Override public void run(final IProgressMonitor monitor) throws CoreException {
  preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
  final Set<String> overwriteDeletedItems=new HashSet<String>();
  final Set<String> idDeletedBeforeImport=new HashSet<String>();
  Map<String,String> nameToIdMap=new HashMap<String,String>();
  for (  ImportItem itemRecord : checkedItemRecords) {
    if (monitor.isCanceled()) {
      return;
    }
    if (itemRecord.isValid()) {
      if (itemRecord.getState() == State.ID_EXISTED) {
        String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
        if (id == null) {
          id=EcoreUtil.generateUUID();
          nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
        }
        itemRecord.getProperty().setId(id);
      }
    }
  }
  try {
    importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
  }
 catch (  Exception e) {
    if (Platform.inDebugMode()) {
      ExceptionHandler.process(e);
    }
    throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
  }
  if (PluginChecker.isJobLetPluginLoaded()) {
    IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
    if (service != null) {
      service.loadComponentsFromProviders();
    }
  }
  ImportCacheHelper.getInstance().checkDeletedFolders();
  ImportCacheHelper.getInstance().checkDeletedItems();
  monitor.done();
  TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
    RelationshipItemBuilder.getInstance().saveRelations();
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    try {
      final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
      factory.saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      if (Platform.inDebugMode()) {
        ExceptionHandler.process(e);
      }
      throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
    }
    TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
  }
  List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
  postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
}",0.9901486655919756
125784,"public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if (ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public void importItemRecords(final IProgressMonitor progressMonitor,final ResourcesManager resManager,final List<ImportItem> checkedItemRecords,final boolean overwrite,final ImportItem[] allImportItemRecords,final IPath destinationPath) throws InvocationTargetException {
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  final List<IImportItemsHandler> importItemHandlersList=new ArrayList<IImportItemsHandler>(Arrays.asList(getImportHandlers()));
  Collections.sort(checkedItemRecords,new Comparator<ImportItem>(){
    @Override public int compare(    ImportItem o1,    ImportItem o2){
      IImportItemsHandler importHandler1=o1.getImportHandler();
      IImportItemsHandler importHandler2=o2.getImportHandler();
      if (importHandler1 != null && importHandler2 != null) {
        int index1=importItemHandlersList.indexOf(importHandler1);
        int index2=importItemHandlersList.indexOf(importHandler2);
        if (index1 > -1 && index2 > -1) {
          return index1 - index2;
        }
      }
      return 0;
    }
  }
);
  ImportCacheHelper importCacheHelper=ImportCacheHelper.getInstance();
  try {
    importCacheHelper.beforeImportItems();
    if (resManager == null || checkedItemRecords.isEmpty()) {
      return;
    }
    progressMonitor.beginTask(Messages.getString(""String_Node_Str""),checkedItemRecords.size() * 2 + 1);
    RepositoryWorkUnit repositoryWorkUnit=new RepositoryWorkUnit(Messages.getString(""String_Node_Str"")){
      @Override public void run() throws PersistenceException {
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          @Override public void run(          final IProgressMonitor monitor) throws CoreException {
            preImport(monitor,resManager,checkedItemRecords.toArray(new ImportItem[0]),allImportItemRecords);
            final Set<String> overwriteDeletedItems=new HashSet<String>();
            final Set<String> idDeletedBeforeImport=new HashSet<String>();
            Map<String,String> nameToIdMap=new HashMap<String,String>();
            for (            ImportItem itemRecord : checkedItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isValid()) {
                if (itemRecord.getState() == State.ID_EXISTED) {
                  String id=nameToIdMap.get(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString());
                  if (id == null) {
                    id=EcoreUtil.generateUUID();
                    nameToIdMap.put(itemRecord.getProperty().getLabel() + ERepositoryObjectType.getItemType(itemRecord.getProperty().getItem()).toString(),id);
                  }
                  itemRecord.getProperty().setId(id);
                }
              }
            }
            try {
              importItemRecordsWithRelations(monitor,resManager,checkedItemRecords,overwrite,allImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
            }
 catch (            Exception e) {
              if (Platform.inDebugMode()) {
                ExceptionHandler.process(e);
              }
              throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
            }
            if (PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService service=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (service != null) {
                service.loadComponentsFromProviders();
              }
            }
            ImportCacheHelper.getInstance().checkDeletedFolders();
            ImportCacheHelper.getInstance().checkDeletedItems();
            monitor.done();
            TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            if (RelationshipItemBuilder.getInstance().isNeedSaveRelations()) {
              RelationshipItemBuilder.getInstance().saveRelations();
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              try {
                final IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
                factory.saveProject(ProjectManager.getInstance().getCurrentProject());
              }
 catch (              PersistenceException e) {
                if (Platform.inDebugMode()) {
                  ExceptionHandler.process(e);
                }
                throw new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""),e));
              }
              TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
            }
            List<ImportItem> importedItemRecords=ImportCacheHelper.getInstance().getImportedItemRecords();
            postImport(monitor,resManager,importedItemRecords.toArray(new ImportItem[0]));
          }
          private void importItemRecordsWithRelations(          final IProgressMonitor monitor,          final ResourcesManager manager,          final List<ImportItem> processingItemRecords,          final boolean overwriting,          ImportItem[] allPopulatedImportItemRecords,          IPath destinationPath,          final Set<String> overwriteDeletedItems,          final Set<String> idDeletedBeforeImport) throws Exception {
            boolean hasJoblet=false;
            boolean reloadJoblet=false;
            for (            ImportItem itemRecord : processingItemRecords) {
              if (monitor.isCanceled()) {
                return;
              }
              if (itemRecord.isImported()) {
                continue;
              }
              if (ERepositoryObjectType.JOBLET == itemRecord.getRepositoryType()) {
                hasJoblet=true;
              }
              if (hasJoblet) {
                if (ERepositoryObjectType.JOBLET != itemRecord.getRepositoryType()) {
                  reloadJoblet=true;
                  if (PluginChecker.isJobLetPluginLoaded()) {
                    IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
                    if (jobletService != null) {
                      jobletService.loadComponentsFromProviders();
                    }
                  }
                }
              }
              try {
                final IImportItemsHandler importHandler=itemRecord.getImportHandler();
                if (importHandler != null && itemRecord.isValid()) {
                  List<ImportItem> relatedItemRecord=importHandler.findRelatedImportItems(monitor,manager,itemRecord,allPopulatedImportItemRecords);
                  if (importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  if (monitor.isCanceled()) {
                    return;
                  }
                  importHandler.doImport(monitor,manager,itemRecord,overwriting,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                  if (monitor.isCanceled()) {
                    return;
                  }
                  if (!importHandler.isPriorImportRelatedItem()) {
                    if (!relatedItemRecord.isEmpty()) {
                      importItemRecordsWithRelations(monitor,manager,relatedItemRecord,overwriting,allPopulatedImportItemRecords,destinationPath,overwriteDeletedItems,idDeletedBeforeImport);
                    }
                  }
                  importHandler.afterImportingItems(monitor,manager,itemRecord);
                  ImportCacheHelper.getInstance().getImportedItemRecords().add(itemRecord);
                  monitor.worked(1);
                }
              }
 catch (              Exception e) {
                if (Platform.inDebugMode()) {
                  itemRecord.addError(e.getMessage());
                  ImportCacheHelper.getInstance().setImportingError(true);
                  ExceptionHandler.process(e);
                }
              }
            }
            if (hasJoblet && !reloadJoblet && PluginChecker.isJobLetPluginLoaded()) {
              IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
              if (jobletService != null) {
                jobletService.loadComponentsFromProviders();
              }
            }
          }
        }
;
        IWorkspace workspace=ResourcesPlugin.getWorkspace();
        try {
          ISchedulingRule schedulingRule=workspace.getRoot();
          workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,progressMonitor);
        }
 catch (        CoreException e) {
          if (Platform.inDebugMode()) {
            ExceptionHandler.process(e);
          }
        }
      }
    }
;
    repositoryWorkUnit.setAvoidUnloadResources(true);
    repositoryWorkUnit.setUnloadResourcesAfterRun(true);
    ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(repositoryWorkUnit);
    progressMonitor.done();
    if (ImportCacheHelper.getInstance().hasImportingError()) {
      throw new InvocationTargetException(new CoreException(new Status(IStatus.ERROR,FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),Messages.getString(""String_Node_Str""))));
    }
  }
  finally {
    importCacheHelper.afterImportItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.9967371115907836
125785,"private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}","private Connection createHiveStandloneConnection(IMetadataConnection metadataConn) throws ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException {
  Connection hiveStandaloneConn=null;
  String connURL=metadataConn.getUrl();
  if (connURL != null) {
    boolean useKerberos=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USE_KRB));
    boolean useMaprTicket=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USE_MAPRTICKET));
    String hivePrincipal=(String)metadataConn.getParameter(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    ClassLoader hiveClassLoader=HiveClassLoaderFactory.getInstance().getClassLoader(metadataConn);
    if (useKerberos) {
      System.setProperty(HiveConfKeysForTalend.HIVE_CONF_KEY_HIVE_METASTORE_KERBEROS_PRINCIPAL.getKey(),hivePrincipal);
      String principal=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
      String keytabPath=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
      boolean useKeytab=Boolean.valueOf((String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB));
      if (useKeytab) {
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new String[]{principal,keytabPath});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
      if (useMaprTicket) {
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        System.setProperty(""String_Node_Str"",""String_Node_Str"");
        String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
        Object mapRTicketDuration=metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
        try {
          ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketDuration});
        }
 catch (        Exception e) {
          throw new SQLException(e);
        }
      }
    }
    if (useMaprTicket) {
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      System.setProperty(""String_Node_Str"",""String_Node_Str"");
      String mapRTicketUsername=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_USERNAME);
      String mapRTicketPassword=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_PASSWORD);
      String mapRTicketCluster=(String)metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_CLUSTER);
      Object mapRTicketDuration=metadataConn.getParameter(ConnParameterKeys.CONN_PARA_KEY_HIVE_AUTHENTICATION_MAPRTICKET_DURATION);
      try {
        String decryptedPassword=PasswordEncryptUtil.encryptPassword(mapRTicketPassword);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{false},Boolean.class);
        ReflectionUtils.invokeStaticMethod(""String_Node_Str"",hiveClassLoader,""String_Node_Str"",new Object[]{mapRTicketCluster,mapRTicketUsername,decryptedPassword,mapRTicketDuration});
      }
 catch (      Exception e) {
        throw new SQLException(e);
      }
    }
    if (connURL.startsWith(DatabaseConnConstants.HIVE_2_URL_FORMAT)) {
      hiveStandaloneConn=createHive2StandaloneConnection(metadataConn);
    }
 else     if (connURL.startsWith(DatabaseConnConstants.HIVE_1_URL_FORMAT)) {
      hiveStandaloneConn=createHive1StandaloneConnection(metadataConn);
    }
 else {
    }
  }
  setHiveJDBCProperties(metadataConn,hiveStandaloneConn);
  return hiveStandaloneConn;
}",0.5780869565217391
125786,"/** 
 * DOC hwang Comment method ""getTestCaseParent"".
 * @param repositoryObjectType
 * @param path
 * @return
 */
private RepositoryNode getTestCaseParent(List<IRepositoryNode> rootNodes,String originalID){
  for (  IRepositoryNode node : rootNodes) {
    if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
      if (node.getId().equals(originalID)) {
        return (RepositoryNode)node;
      }
    }
 else     if (node.getType() == ENodeType.SIMPLE_FOLDER) {
      return getTestCaseParent(node.getChildren(),originalID);
    }
  }
  return null;
}","/** 
 * DOC hwang Comment method ""getTestCaseParent"".
 * @param repositoryObjectType
 * @param path
 * @return
 */
private RepositoryNode getTestCaseParent(List<IRepositoryNode> rootNodes,String originalID){
  for (  IRepositoryNode node : rootNodes) {
    if (node.getType() == ENodeType.REPOSITORY_ELEMENT) {
      if (node.getId().equals(originalID)) {
        return (RepositoryNode)node;
      }
    }
 else     if (node.getType() == ENodeType.SIMPLE_FOLDER) {
      RepositoryNode pNode=getTestCaseParent(node.getChildren(),originalID);
      if (pNode != null) {
        return pNode;
      }
    }
  }
  return null;
}",0.9280270956816258
125787,"/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (isDnd && objectToCopy != null && (objectToCopy.getRepositoryObjectType().equals(ERepositoryObjectType.SERVICESOPERATION) || objectToCopy.getRepositoryObjectType().equals(ERepositoryObjectType.SERVICESPORT))) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) == objectToCopy.getRepositoryObjectType();
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}","/** 
 * DOC Administrator Comment method ""validateAction"".
 * @param sourceNode
 * @param targetNode
 * @return
 */
public boolean validateAction(RepositoryNode sourceNode,RepositoryNode targetNode,boolean isDnd){
  if (sourceNode == null) {
    return false;
  }
  IRepositoryViewObject objectToCopy=sourceNode.getObject();
  if (isDnd && objectToCopy != null && ProxyRepositoryFactory.getInstance().getStatus(objectToCopy) == ERepositoryStatus.DELETED) {
    return false;
  }
  if (isDnd && objectToCopy != null && (objectToCopy.getRepositoryObjectType().equals(ERepositoryObjectType.SERVICESOPERATION) || objectToCopy.getRepositoryObjectType().equals(ERepositoryObjectType.SERVICESPORT))) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return false;
  }
  if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER && sourceNode.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return false;
  }
  if (targetNode == null) {
switch (sourceNode.getType()) {
case REPOSITORY_ELEMENT:
case SIMPLE_FOLDER:
      return true;
default :
    return false;
}
}
if (sourceNode.equals(targetNode)) {
return false;
}
sourcePath=RepositoryNodeUtilities.getPath(sourceNode);
targetPath=RepositoryNodeUtilities.getPath(targetNode);
if (sourceNode.getType() == ENodeType.REPOSITORY_ELEMENT) {
isGenericSchema=targetNode.getContentType() == ERepositoryObjectType.METADATA_GENERIC_SCHEMA && sourceNode.getProperties(EProperties.CONTENT_TYPE) != ERepositoryObjectType.METADATA_GENERIC_SCHEMA && (sourceNode.getObject() instanceof MetadataTableRepositoryObject);
if (!isGenericSchema && !ResourceUtils.isCorrectDestination(sourcePath,targetPath,false)) {
  return false;
}
switch (targetNode.getType()) {
case SYSTEM_FOLDER:
case SIMPLE_FOLDER:
  boolean booleanValue=((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)).equals(objectToCopy.getRepositoryObjectType());
if (isGenericSchema) {
  return true;
}
 else {
  return booleanValue;
}
case STABLE_SYSTEM_FOLDER:
boolean isJoblet=sourceNode.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET;
boolean isBin=targetNode.isBin();
if (isBin && isJoblet) {
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
List<JobletReferenceBean> checkRepository=DeleteAction.checkRepositoryNodeFromProcess(factory,null,sourceNode);
DeleteActionCache.getInstance().clearRecords();
if (checkRepository.size() > 0) {
JobletReferenceDialog dialog=new JobletReferenceDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),sourceNode.getObject(),checkRepository);
dialog.open();
return false;
}
}
return isBin;
default :
return false;
}
}
 else if (sourceNode.getType() == ENodeType.SIMPLE_FOLDER) {
if (targetNode.getType() != ENodeType.SIMPLE_FOLDER && targetNode.getType() != ENodeType.SYSTEM_FOLDER) {
return false;
}
ERepositoryObjectType sourceType=(ERepositoryObjectType)sourceNode.getProperties(EProperties.CONTENT_TYPE);
if (((ERepositoryObjectType)targetNode.getProperties(EProperties.CONTENT_TYPE)) != sourceType) {
return false;
}
if (!ResourceUtils.isCorrectDestination(sourcePath,targetPath,true)) {
return false;
}
IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
try {
if (!factory.isPathValid(sourceType,targetPath,sourcePath.lastSegment())) {
return false;
}
}
 catch (PersistenceException e) {
ExceptionHandler.process(e);
return false;
}
return true;
}
 else {
return false;
}
}",0.9981526218559044
125788,"private void addFieldsForGeneralDB(Composite parent){
  generalDbCompositeParent=new Composite(parent,SWT.NULL);
  generalDbCompositeParent.setLayout(new GridLayout(3,false));
  GridLayout layout2=(GridLayout)generalDbCompositeParent.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  generalJdbcUrlText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcDriverjarText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  browseJarFilesButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseJarFilesButton.setText(""String_Node_Str"");
  browseJarFilesButton.setToolTipText(Messages.getString(""String_Node_Str""));
  generalJdbcClassNameText=new LabelledCombo(generalDbCompositeParent,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseClassButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseClassButton.setText(""String_Node_Str"");
  browseClassButton.setToolTipText(""String_Node_Str"");
  generalJdbcUserText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText.getTextControl().setEchoChar('*');
  jDBCschemaText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalMappingFileText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  generalMappingSelectButton=new Button(generalDbCompositeParent,SWT.NONE);
  generalMappingSelectButton.setText(""String_Node_Str"");
  generalMappingSelectButton.setToolTipText(Messages.getString(""String_Node_Str""));
}","private void addFieldsForGeneralDB(Composite parent){
  generalDbCompositeParent=new Composite(parent,SWT.NULL);
  generalDbCompositeParent.setLayout(new GridLayout(3,false));
  GridLayout layout2=(GridLayout)generalDbCompositeParent.getLayout();
  layout2.marginHeight=0;
  layout2.marginTop=0;
  layout2.marginBottom=0;
  generalJdbcUrlText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcDriverjarText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  generalJdbcDriverjarText.setReadOnly(true);
  browseJarFilesButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseJarFilesButton.setText(""String_Node_Str"");
  browseJarFilesButton.setToolTipText(Messages.getString(""String_Node_Str""));
  generalJdbcClassNameText=new LabelledCombo(generalDbCompositeParent,Messages.getString(""String_Node_Str""),""String_Node_Str"",null,1,true,SWT.NONE);
  browseClassButton=new Button(generalDbCompositeParent,SWT.NONE);
  browseClassButton.setText(""String_Node_Str"");
  browseClassButton.setToolTipText(""String_Node_Str"");
  generalJdbcUserText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalJdbcPasswordText.getTextControl().setEchoChar('*');
  jDBCschemaText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),2);
  generalMappingFileText=new LabelledText(generalDbCompositeParent,Messages.getString(""String_Node_Str""),1);
  generalMappingSelectButton=new Button(generalDbCompositeParent,SWT.NONE);
  generalMappingSelectButton.setText(""String_Node_Str"");
  generalMappingSelectButton.setToolTipText(Messages.getString(""String_Node_Str""));
}",0.9871076233183856
125789,"private void deleteTestCases(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final IRepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  if (currentJobNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return;
  }
  if (!(currentJobNode.getObject().getProperty().getItem() instanceof ProcessItem)) {
    return;
  }
  if (currentJobNode.getChildren().isEmpty()) {
    return;
  }
  for (  IRepositoryNode child : currentJobNode.getChildren()) {
    deleteElements(factory,deleteActionCache,(RepositoryNode)child,confirm);
  }
}","private void deleteTestCases(IProxyRepositoryFactory factory,DeleteActionCache deleteActionCache,final IRepositoryNode currentJobNode,Boolean confirm) throws PersistenceException, BusinessException {
  if (currentJobNode.getType() != ENodeType.REPOSITORY_ELEMENT) {
    return;
  }
  if (!(currentJobNode.getObject().getProperty().getItem() instanceof ProcessItem)) {
    return;
  }
  if (!currentJobNode.getChildren().isEmpty()) {
    for (    IRepositoryNode child : currentJobNode.getChildren()) {
      deleteElements(factory,deleteActionCache,(RepositoryNode)child,confirm);
    }
    return;
  }
  if (ERepositoryObjectType.TEST_CONTAINER == null) {
    return;
  }
  IPath path=new Path(currentJobNode.getObjectType().getFolder());
  path=path.append(currentJobNode.getId());
  RootContainer<String,IRepositoryViewObject> junitObjects=ProxyRepositoryFactory.getInstance().getObjectFromFolder(ProjectManager.getInstance().getCurrentProject(),ERepositoryObjectType.TEST_CONTAINER,path.toOSString(),IRepositoryFactory.OPTION_ONLY_LAST_VERSION | IRepositoryFactory.OPTION_DYNAMIC_OBJECTS);
  if (junitObjects.isEmpty() || junitObjects.getMembers().isEmpty()) {
    return;
  }
  for (  IRepositoryViewObject viewNode : junitObjects.getMembers()) {
    if (viewNode.isDeleted()) {
      continue;
    }
    RepositoryNode node=new RepositoryNode(viewNode,(RepositoryNode)currentJobNode,ENodeType.REPOSITORY_ELEMENT);
    node.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.TEST_CONTAINER);
    node.setProperties(EProperties.LABEL,viewNode.getLabel());
    deleteElements(factory,deleteActionCache,node,confirm);
  }
}",0.5210762331838565
125790,"/** 
 * If standard job and base job pom file existed, will use the dependences of job pom directly.
 */
protected void updateDependencies(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateDependencies()) {
    return;
  }
  IFile basePomFile=getBasePomFile();
  if (isStandardJob() && basePomFile != null && basePomFile.getLocation().toFile().exists()) {
    if (!basePomFile.exists()) {
      basePomFile.getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
    }
    Model jobModel=MODEL_MANAGER.readMavenModel(basePomFile);
    List<Dependency> withoutChildrenJobDependencies=new ArrayList<Dependency>(jobModel.getDependencies());
    final String jobGroupPrefix=PomIdsHelper.getJobGroupId((String)null);
    Iterator<Dependency> iterator=withoutChildrenJobDependencies.iterator();
    while (iterator.hasNext()) {
      Dependency d=iterator.next();
      if (d.getGroupId().startsWith(jobGroupPrefix)) {
        iterator.remove();
      }
    }
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,withoutChildrenJobDependencies,false);
  }
 else   if (processor != null) {
    ProcessorDependenciesManager processorDependenciesManager=new ProcessorDependenciesManager(processor);
    processorDependenciesManager.updateDependencies(monitor,projectModel);
  }
 else {
    List<Dependency> routinesDependencies=new ArrayList<Dependency>(PomUtil.getCodesDependencies(projectPomFile));
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,routinesDependencies,true);
  }
}","/** 
 * If standard job and base job pom file existed, will use the dependences of job pom directly.
 */
protected void updateDependencies(IProgressMonitor monitor,IProcessor processor,Model projectModel) throws Exception {
  if (!isUpdateDependencies()) {
    return;
  }
  IFile basePomFile=getBasePomFile();
  if (isStandardJob() && basePomFile != null && basePomFile.getLocation().toFile().exists()) {
    if (!basePomFile.exists()) {
      basePomFile.getParent().refreshLocal(IResource.DEPTH_ONE,monitor);
    }
    Model jobModel=MODEL_MANAGER.readMavenModel(basePomFile);
    List<Dependency> withoutChildrenJobDependencies=new ArrayList<Dependency>(jobModel.getDependencies());
    final String jobGroupPrefix=PomIdsHelper.getJobGroupId((String)null);
    final String testGroupPrefix=PomIdsHelper.getTestGroupId((String)null);
    Iterator<Dependency> iterator=withoutChildrenJobDependencies.iterator();
    while (iterator.hasNext()) {
      Dependency d=iterator.next();
      if (d.getGroupId().startsWith(jobGroupPrefix) || d.getGroupId().startsWith(testGroupPrefix)) {
        iterator.remove();
      }
    }
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,withoutChildrenJobDependencies,false);
  }
 else   if (processor != null) {
    ProcessorDependenciesManager processorDependenciesManager=new ProcessorDependenciesManager(processor);
    processorDependenciesManager.updateDependencies(monitor,projectModel);
  }
 else {
    List<Dependency> routinesDependencies=new ArrayList<Dependency>(PomUtil.getCodesDependencies(projectPomFile));
    ProcessorDependenciesManager.updateDependencies(monitor,projectModel,routinesDependencies,true);
  }
}",0.9625307125307124
125791,"@Override public void perspectivePreDeactivate(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  CheatSheetView cheetSheet=CheatSheetUtils.getInstance().findCheetSheet(""String_Node_Str"");
  if (null != cheetSheet) {
    cheetSheetID=cheetSheet.getCheatSheetID();
    CheatSheetUtils.getInstance().hideCheetSheet(cheetSheet);
  }
  cheetSheetInPerspective.put(perspective.getId(),null != cheetSheet);
  super.perspectivePreDeactivate(page,perspective);
}","@Override public void perspectivePreDeactivate(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  super.perspectivePreDeactivate(page,perspective);
}",0.5072697899838449
125792,"@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  if (null != cheetSheetInPerspective.get(perspective.getId()) && cheetSheetInPerspective.get(perspective.getId())) {
    restoreCheetSheet();
  }
  if (CheatSheetUtils.getInstance().isFirstTime() && perspective.getId().equals(CheatSheetUtils.DQ_PERSPECTIVE_ID)) {
    restoreCheetSheet();
  }
  super.perspectiveActivated(page,perspective);
}","@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  if (!perspective.getId().equals(CheatSheetUtils.DQ_PERSPECTIVE_ID)) {
    CheatSheetView cheetSheet=CheatSheetUtils.getInstance().findCheetSheet(""String_Node_Str"");
    if (null != cheetSheet) {
      CheatSheetUtils.getInstance().hideCheetSheet(cheetSheet);
    }
  }
 else   if (CheatSheetUtils.getInstance().isOpenedCheatSheet()) {
    restoreCheetSheet();
  }
  super.perspectiveActivated(page,perspective);
}",0.4864300626304801
125793,"public static IImage getIcon(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.SVN_ROOT) {
    return ECoreImage.SVN_ROOT_ICON;
  }
 else   if (type == ERepositoryObjectType.BUSINESS_PROCESS) {
    return ECoreImage.BUSINESS_PROCESS_ICON;
  }
 else   if (type == ERepositoryObjectType.PROCESS) {
    return ECoreImage.PROCESS_ICON;
  }
 else   if (type == ERepositoryObjectType.JOBLET) {
    return ECoreImage.JOBLET_ICON;
  }
 else   if (type == ERepositoryObjectType.CONTEXT) {
    return ECoreImage.CONTEXT_ICON;
  }
 else   if (type == ERepositoryObjectType.CODE) {
    return ECoreImage.CODE_ICON;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ECoreImage.ROUTINE_ICON;
  }
 else   if (type == ERepositoryObjectType.PIG_UDF) {
    return ECoreImage.ROUTINE_ICON;
  }
 else   if (type == ERepositoryObjectType.JOB_SCRIPT) {
    return ECoreImage.JOB_SCRIPTS_ICON;
  }
 else   if (type == ERepositoryObjectType.SNIPPETS) {
    return ECoreImage.SNIPPETS_ICON;
  }
 else   if (type == ERepositoryObjectType.DOCUMENTATION || type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC) {
    return ECoreImage.DOCUMENTATION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA) {
    return ECoreImage.METADATA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return ECoreImage.METADATA_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_SAPCONNECTIONS || type == ERepositoryObjectType.METADATA_SAP_FUNCTION) {
    return ECoreImage.METADATA_SAPCONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.SQLPATTERNS) {
    return ECoreImage.METADATA_SQLPATTERN_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_TABLE || type == ERepositoryObjectType.METADATA_SAP_IDOC) {
    return ECoreImage.METADATA_TABLE_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_COLUMN) {
    return ECoreImage.METADATA_COLUMN_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_QUERY) {
    return ECoreImage.METADATA_QUERY_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_VIEW) {
    return ECoreImage.METADATA_VIEW_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_SYNONYM) {
    return ECoreImage.METADATA_SYNONYM_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    return ECoreImage.METADATA_FILE_DELIMITED_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
    return ECoreImage.METADATA_FILE_POSITIONAL_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_REGEXP) {
    return ECoreImage.METADATA_FILE_REGEXP_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    return ECoreImage.METADATA_FILE_XML_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EXCEL) {
    return ECoreImage.METADATA_FILE_EXCEL_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_LDIF) {
    return ECoreImage.METADATA_FILE_LDIF_ICON;
  }
 else   if (type == ERepositoryObjectType.FOLDER) {
    return ECoreImage.FOLDER_OPEN_ICON;
  }
 else   if (type == ERepositoryObjectType.REFERENCED_PROJECTS) {
    return ECoreImage.REFERENCED_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
    return ECoreImage.METADATA_GENERIC_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_FTP) {
    return ECoreImage.FTP_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
    return ECoreImage.METADATA_LDAP_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
    return ECoreImage.METADATA_WSDL_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
    return ECoreImage.METADATA_SALESFORCE_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_MODULE) {
    return ECoreImage.METADATA_SALESFORCE_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
    return ECoreImage.METADATA_EBCDIC_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_HL7) {
    return ECoreImage.METADATA_HL7_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_BRMS) {
    return ECoreImage.METADATA_BRMS_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return ECoreImage.METADATA_MDM_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_RULES) {
    return ECoreImage.METADATA_RULES_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
    return ECoreImage.METADATA_RULES_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_RULES_MANAGEMENT) {
    return ECoreImage.METADATA_RULES_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
    return ECoreImage.METADATA_ICON;
  }
 else   if (type == ERepositoryObjectType.RECYCLE_BIN) {
    return ECoreImage.RECYCLE_BIN_EMPTY_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_EDIFACT) {
    return ECoreImage.METADATA_EDIFACT_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_CDC) {
    return ECoreImage.CDC_SUBSCRIBER;
  }
 else   if (type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT) {
    return ECoreImage.TDQ_ANALYSIS_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_REPORT_ELEMENT) {
    return ECoreImage.TDQ_REPORT_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT) {
    return ECoreImage.TDQ_JRAXML_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_RULES_MATCHER) {
    return ECoreImage.TDQ_MATCH_RULE_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_RULES_PARSER) {
    return ECoreImage.TDQ_RULE_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL) {
    return ECoreImage.TDQ_PATTERN_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT) {
    return ECoreImage.TDQ_SOURCE_FILE_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_SYSTEM_INDICATORS || type == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS || type == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS_LIB || type == ERepositoryObjectType.SYSTEM_INDICATORS_ADVANCED_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_BUSINESS_RULES || type == ERepositoryObjectType.SYSTEM_INDICATORS_CORRELATION || type == ERepositoryObjectType.SYSTEM_INDICATORS_FUNCTIONAL_DEPENDENCY || type == ERepositoryObjectType.SYSTEM_INDICATORS_OVERVIEW || type == ERepositoryObjectType.SYSTEM_INDICATORS_PATTERN_FREQUENCY_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_PATTERN_MATCHING || type == ERepositoryObjectType.SYSTEM_INDICATORS_ROW_COMPARISON || type == ERepositoryObjectType.SYSTEM_INDICATORS_SIMPLE_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_SOUNDEX || type == ERepositoryObjectType.SYSTEM_INDICATORS_SUMMARY_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_TEXT_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_PHONENUMBER_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_FRAUDDETECTION) {
    return ECoreImage.TDQ_INDICATOR_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_DATA_PROFILING) {
    return ECoreImage.TDQ_DATA_PROFILING_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_LIBRARIES) {
    return ECoreImage.TDQ_LIBRARIES_ICON;
  }
 else {
    IImage image=null;
    for (    IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
      image=handler.getIcon(type);
      if (image != null) {
        return image;
      }
    }
    return EImage.DEFAULT_IMAGE;
  }
}","public static IImage getIcon(ERepositoryObjectType type){
  if (type == ERepositoryObjectType.SVN_ROOT) {
    return ECoreImage.SVN_ROOT_ICON;
  }
 else   if (type == ERepositoryObjectType.BUSINESS_PROCESS) {
    return ECoreImage.BUSINESS_PROCESS_ICON;
  }
 else   if (type == ERepositoryObjectType.PROCESS) {
    return ECoreImage.PROCESS_ICON;
  }
 else   if (type == ERepositoryObjectType.JOBLET) {
    return ECoreImage.JOBLET_ICON;
  }
 else   if (type == ERepositoryObjectType.CONTEXT) {
    return ECoreImage.CONTEXT_ICON;
  }
 else   if (type == ERepositoryObjectType.CODE) {
    return ECoreImage.CODE_ICON;
  }
 else   if (type == ERepositoryObjectType.ROUTINES) {
    return ECoreImage.ROUTINE_ICON;
  }
 else   if (type == ERepositoryObjectType.PIG_UDF) {
    return ECoreImage.ROUTINE_ICON;
  }
 else   if (type == ERepositoryObjectType.JOB_SCRIPT) {
    return ECoreImage.JOB_SCRIPTS_ICON;
  }
 else   if (type == ERepositoryObjectType.SNIPPETS) {
    return ECoreImage.SNIPPETS_ICON;
  }
 else   if (type == ERepositoryObjectType.DOCUMENTATION || type == ERepositoryObjectType.JOB_DOC || type == ERepositoryObjectType.JOBLET_DOC) {
    return ECoreImage.DOCUMENTATION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA) {
    return ECoreImage.METADATA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CONNECTIONS) {
    return ECoreImage.METADATA_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_SAPCONNECTIONS || type == ERepositoryObjectType.METADATA_SAP_FUNCTION) {
    return ECoreImage.METADATA_SAPCONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.SQLPATTERNS) {
    return ECoreImage.METADATA_SQLPATTERN_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_TABLE || type == ERepositoryObjectType.METADATA_SAP_IDOC) {
    return ECoreImage.METADATA_TABLE_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_COLUMN) {
    return ECoreImage.METADATA_COLUMN_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_QUERY) {
    return ECoreImage.METADATA_QUERY_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_VIEW) {
    return ECoreImage.METADATA_VIEW_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_SYNONYM) {
    return ECoreImage.METADATA_SYNONYM_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_DELIMITED) {
    return ECoreImage.METADATA_FILE_DELIMITED_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_POSITIONAL) {
    return ECoreImage.METADATA_FILE_POSITIONAL_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_REGEXP) {
    return ECoreImage.METADATA_FILE_REGEXP_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_XML) {
    return ECoreImage.METADATA_FILE_XML_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EXCEL) {
    return ECoreImage.METADATA_FILE_EXCEL_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_LDIF) {
    return ECoreImage.METADATA_FILE_LDIF_ICON;
  }
 else   if (type == ERepositoryObjectType.FOLDER) {
    return ECoreImage.FOLDER_OPEN_ICON;
  }
 else   if (type == ERepositoryObjectType.REFERENCED_PROJECTS) {
    return ECoreImage.REFERENCED_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_GENERIC_SCHEMA) {
    return ECoreImage.METADATA_GENERIC_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_FTP) {
    return ECoreImage.FTP_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_LDAP_SCHEMA) {
    return ECoreImage.METADATA_LDAP_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_WSDL_SCHEMA) {
    return ECoreImage.METADATA_WSDL_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_SCHEMA) {
    return ECoreImage.METADATA_SALESFORCE_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_SALESFORCE_MODULE) {
    return ECoreImage.METADATA_SALESFORCE_SCHEMA_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_EBCDIC) {
    return ECoreImage.METADATA_EBCDIC_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_HL7) {
    return ECoreImage.METADATA_HL7_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_BRMS) {
    return ECoreImage.METADATA_BRMS_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_MDMCONNECTION) {
    return ECoreImage.METADATA_MDM_CONNECTION_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_RULES) {
    return ECoreImage.METADATA_RULES_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_FILE_LINKRULES) {
    return ECoreImage.METADATA_RULES_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_RULES_MANAGEMENT) {
    return ECoreImage.METADATA_RULES_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_VALIDATION_RULES) {
    return ECoreImage.METADATA_ICON;
  }
 else   if (type == ERepositoryObjectType.RECYCLE_BIN) {
    return ECoreImage.RECYCLE_BIN_EMPTY_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_EDIFACT) {
    return ECoreImage.METADATA_EDIFACT_ICON;
  }
 else   if (type == ERepositoryObjectType.METADATA_CON_CDC) {
    return ECoreImage.CDC_SUBSCRIBER;
  }
 else   if (type == ERepositoryObjectType.TDQ_ANALYSIS_ELEMENT) {
    return ECoreImage.TDQ_ANALYSIS_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_REPORT_ELEMENT) {
    return ECoreImage.TDQ_REPORT_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_JRAXML_ELEMENT) {
    return ECoreImage.TDQ_JRAXML_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_RULES_MATCHER) {
    return ECoreImage.TDQ_MATCH_RULE_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_RULES_SQL || type == ERepositoryObjectType.TDQ_RULES_PARSER || type == ERepositoryObjectType.TDQ_RULES) {
    return ECoreImage.TDQ_RULE_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_PATTERN_REGEX || type == ERepositoryObjectType.TDQ_PATTERN_SQL || type == ERepositoryObjectType.TDQ_PATTERN_ELEMENT) {
    return ECoreImage.TDQ_PATTERN_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_SOURCE_FILE_ELEMENT) {
    return ECoreImage.TDQ_SOURCE_FILE_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_SYSTEM_INDICATORS || type == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS || type == ERepositoryObjectType.TDQ_INDICATOR_ELEMENT || type == ERepositoryObjectType.TDQ_USERDEFINE_INDICATORS_LIB || type == ERepositoryObjectType.SYSTEM_INDICATORS_ADVANCED_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_BUSINESS_RULES || type == ERepositoryObjectType.SYSTEM_INDICATORS_CORRELATION || type == ERepositoryObjectType.SYSTEM_INDICATORS_FUNCTIONAL_DEPENDENCY || type == ERepositoryObjectType.SYSTEM_INDICATORS_OVERVIEW || type == ERepositoryObjectType.SYSTEM_INDICATORS_PATTERN_FREQUENCY_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_PATTERN_MATCHING || type == ERepositoryObjectType.SYSTEM_INDICATORS_ROW_COMPARISON || type == ERepositoryObjectType.SYSTEM_INDICATORS_SIMPLE_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_SOUNDEX || type == ERepositoryObjectType.SYSTEM_INDICATORS_SUMMARY_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_TEXT_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_PHONENUMBER_STATISTICS || type == ERepositoryObjectType.SYSTEM_INDICATORS_FRAUDDETECTION) {
    return ECoreImage.TDQ_INDICATOR_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_DATA_PROFILING) {
    return ECoreImage.TDQ_DATA_PROFILING_ICON;
  }
 else   if (type == ERepositoryObjectType.TDQ_LIBRARIES) {
    return ECoreImage.TDQ_LIBRARIES_ICON;
  }
 else {
    IImage image=null;
    for (    IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
      image=handler.getIcon(type);
      if (image != null) {
        return image;
      }
    }
    return EImage.DEFAULT_IMAGE;
  }
}",0.9903322875984378
125794,"@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
  if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
    IRepositoryView view=RepositoryManager.getRepositoryView();
    if (view != null) {
      view.refresh();
      TalendPaletteHelper.checkAndInitToolBar();
    }
  }
 else   if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (tdqRepositoryService != null) {
        tdqRepositoryService.refresh();
      }
    }
  }
}","@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  String pId=perspective.getId();
  if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
    IRepositoryView view=RepositoryManager.getRepositoryView();
    if (view != null) {
      view.refresh();
      TalendPaletteHelper.checkAndInitToolBar();
    }
  }
 else   if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQItemService.class)) {
      ITDQItemService tdqItemService=(ITDQItemService)GlobalServiceRegister.getDefault().getService(ITDQItemService.class);
      if (tdqItemService != null) {
        tdqItemService.createDQStructor();
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      if (tdqRepositoryService != null) {
        tdqRepositoryService.refresh();
      }
    }
  }
}",0.7709677419354839
125795,"private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IRepositoryView view=RepositoryManager.getRepositoryView();
        if (view != null) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
      }
 else       if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (tdqRepositoryService != null) {
            tdqRepositoryService.refresh();
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
  PlatformUI.getWorkbench().addWorkbenchListener(new IWorkbenchListener(){
    @Override public boolean preShutdown(    IWorkbench workbench,    boolean forced){
      TokenCollectorFactory.getFactory().process();
      return true;
    }
    @Override public void postShutdown(    IWorkbench workbench){
      ProxyRepositoryFactory.getInstance().logOffProject();
    }
  }
);
}","private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IRepositoryView view=RepositoryManager.getRepositoryView();
        if (view != null) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
      }
 else       if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQItemService.class)) {
          ITDQItemService tdqItemService=(ITDQItemService)GlobalServiceRegister.getDefault().getService(ITDQItemService.class);
          if (tdqItemService != null) {
            tdqItemService.createDQStructor();
          }
        }
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (tdqRepositoryService != null) {
            tdqRepositoryService.refresh();
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
  PlatformUI.getWorkbench().addWorkbenchListener(new IWorkbenchListener(){
    @Override public boolean preShutdown(    IWorkbench workbench,    boolean forced){
      TokenCollectorFactory.getFactory().process();
      return true;
    }
    @Override public void postShutdown(    IWorkbench workbench){
      ProxyRepositoryFactory.getInstance().logOffProject();
    }
  }
);
}",0.8815298507462687
125796,"public ImportExportHandlersManager(){
  registryReader=new ImportExportHandlersRegistryReader();
  registryReader.init();
}","public ImportExportHandlersManager(){
  registryReader=ImportExportHandlersRegistryReader.getInstance();
}",0.8558951965065502
125797,"public void init(){
  readRegistry();
  List<BasicRegistry> availableImportItemsProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.imortRegistries));
  List<BasicRegistry> availableImportResourcesProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.resImportResistries));
  final Comparator<BasicRegistry> comparator=new Comparator<BasicRegistry>(){
    @Override public int compare(    BasicRegistry arg0,    BasicRegistry arg1){
      return arg1.getPriority().compareTo(arg0.getPriority());
    }
  }
;
  Collections.sort(availableImportItemsProviderRegistries,comparator);
  Collections.sort(availableImportResourcesProviderRegistries,comparator);
  List<IImportItemsHandler> itemsHanders=new ArrayList<IImportItemsHandler>();
  for (  BasicRegistry reg : availableImportItemsProviderRegistries) {
    if (reg instanceof ImportItemsProviderRegistry) {
      itemsHanders.add(((ImportItemsProviderRegistry)reg).getImportItemsHandler());
    }
  }
  importItemsHandlers=itemsHanders.toArray(new IImportItemsHandler[0]);
  List<IImportResourcesHandler> resourcesHanders=new ArrayList<IImportResourcesHandler>();
  for (  BasicRegistry reg : availableImportResourcesProviderRegistries) {
    if (reg instanceof ImportResourcesProviderRegistry) {
      resourcesHanders.add(((ImportResourcesProviderRegistry)reg).getImportResourcesHandler());
    }
  }
  importResourcesHandlers=resourcesHanders.toArray(new IImportResourcesHandler[0]);
}","public void init(){
  clearCache();
  readRegistry();
  List<BasicRegistry> availableImportItemsProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.imortRegistries));
  List<BasicRegistry> availableImportResourcesProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.resImportResistries));
  final Comparator<BasicRegistry> comparator=new Comparator<BasicRegistry>(){
    @Override public int compare(    BasicRegistry arg0,    BasicRegistry arg1){
      return arg1.getPriority().compareTo(arg0.getPriority());
    }
  }
;
  Collections.sort(availableImportItemsProviderRegistries,comparator);
  Collections.sort(availableImportResourcesProviderRegistries,comparator);
  List<IImportItemsHandler> itemsHanders=new ArrayList<IImportItemsHandler>();
  for (  BasicRegistry reg : availableImportItemsProviderRegistries) {
    if (reg instanceof ImportItemsProviderRegistry) {
      itemsHanders.add(((ImportItemsProviderRegistry)reg).getImportItemsHandler());
    }
  }
  importItemsHandlers=itemsHanders.toArray(new IImportItemsHandler[0]);
  List<IImportResourcesHandler> resourcesHanders=new ArrayList<IImportResourcesHandler>();
  for (  BasicRegistry reg : availableImportResourcesProviderRegistries) {
    if (reg instanceof ImportResourcesProviderRegistry) {
      resourcesHanders.add(((ImportResourcesProviderRegistry)reg).getImportResourcesHandler());
    }
  }
  importResourcesHandlers=resourcesHanders.toArray(new IImportResourcesHandler[0]);
}",0.9947746570868712
125798,"public ImportExportHandlersRegistryReader(){
  super(""String_Node_Str"",""String_Node_Str"");
}","private ImportExportHandlersRegistryReader(){
  super(""String_Node_Str"",""String_Node_Str"");
}",0.9513513513513514
125799,"private void setHidHiveEncryption(boolean hide){
  GridData hadoopData=(GridData)encryptionGrp.getLayoutData();
  hadoopData.exclude=hide;
  encryptionGrp.setVisible(!hide);
  encryptionGrp.setLayoutData(hadoopData);
  encryptionGrp.getParent().layout();
  setHiveTrustStoreParameters(hide);
  if (hide) {
    getConnection().getParameters().removeKey(ConnParameterKeys.CONN_PARA_KEY_USE_SSL);
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_SSL,String.valueOf(useSSLEncryption.getSelection()));
  }
  String url=getStringConnection();
  urlConnectionStringText.setText(url);
  getConnection().setURL(url);
}","private void setHidHiveEncryption(boolean hide){
  GridData hadoopData=(GridData)encryptionGrp.getLayoutData();
  hadoopData.exclude=hide;
  encryptionGrp.setVisible(!hide);
  encryptionGrp.setLayoutData(hadoopData);
  encryptionGrp.getParent().layout();
  setHiveTrustStoreParameters(hide);
  if (hide) {
    getConnection().getParameters().removeKey(ConnParameterKeys.CONN_PARA_KEY_USE_SSL);
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_SSL,String.valueOf(useSSLEncryption.getSelection()));
  }
  if (isHiveDBConnSelected()) {
    String url=getStringConnection();
    urlConnectionStringText.setText(url);
    getConnection().setURL(url);
  }
}",0.968609865470852
125800,"/** 
 * Unit tests for   {@link org.talend.core.model.metadata.MetadataToolHelper#convertToAvro(IMetadataTable)}Test a simple MetadataTable.
 */
@Test public void testConvertToAvro_Basic(){
  MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
  table.setLabel(""String_Node_Str"");
  table.setComment(""String_Node_Str"");
  ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn> columns=new ArrayList<>();
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.INTEGER.getId());
    column.setNullable(true);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.STRING.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.BOOLEAN.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(""String_Node_Str"");
    column.setNullable(false);
    columns.add(column);
  }
  table.getColumns().addAll(columns);
  Schema s=MetadataToolAvroHelper.convertToAvro(table);
  assertThat(s.getType(),is(Schema.Type.RECORD));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getFields(),hasSize(3));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COMMENT),is(""String_Node_Str""));
  Schema.Field f=s.getFields().get(0);
  assertTrue(AvroUtils.isNullable(f.schema()));
  assertThat(AvroUtils.unwrapIfNullable(f.schema()).getType(),is(Schema.Type.INT));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(1);
  assertThat(f.schema().getType(),is(Schema.Type.STRING));
  assertThat(f.name(),is(""String_Node_Str""));
  assertFalse(AvroUtils.isNullable(f.schema()));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(2);
  assertThat(f.schema().getType(),is(Schema.Type.BOOLEAN));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  assertThat(s.getProp(SchemaConstants.INCLUDE_ALL_FIELDS),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_POSITION),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
}","/** 
 * Unit tests for   {@link org.talend.core.model.metadata.MetadataToolHelper#convertToAvro(IMetadataTable)}Test a simple MetadataTable.
 */
@Test public void testConvertToAvro_Basic(){
  MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
  table.setLabel(""String_Node_Str"");
  table.setComment(""String_Node_Str"");
  ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn> columns=new ArrayList<>();
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.INTEGER.getId());
    column.setNullable(true);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.STRING.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.BOOLEAN.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(""String_Node_Str"");
    column.setNullable(false);
    columns.add(column);
  }
  table.getColumns().addAll(columns);
  Schema s=MetadataToolAvroHelper.convertToAvro(table);
  assertThat(s.getType(),is(Schema.Type.RECORD));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getFields().size(),is(3));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COMMENT),is(""String_Node_Str""));
  Schema.Field f=s.getFields().get(0);
  assertTrue(AvroUtils.isNullable(f.schema()));
  assertThat(AvroUtils.unwrapIfNullable(f.schema()).getType(),is(Schema.Type.INT));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(1);
  assertThat(f.schema().getType(),is(Schema.Type.STRING));
  assertThat(f.name(),is(""String_Node_Str""));
  assertFalse(AvroUtils.isNullable(f.schema()));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(2);
  assertThat(f.schema().getType(),is(Schema.Type.BOOLEAN));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  assertThat(s.getProp(SchemaConstants.INCLUDE_ALL_FIELDS),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_POSITION),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
}",0.997684515195369
125801,"@SuppressWarnings(""String_Node_Str"") public static IMetadataTable getTableByName(ConnectionItem item,String name){
  if (item == null || name == null) {
    return null;
  }
  final Connection connection=item.getConnection();
  if (connection != null) {
    final EList tables=MetadataToolHelper.getMetadataTableFromConnection(connection,name);
    String tableLable=name;
    if (item instanceof SAPConnectionItem && name.split(""String_Node_Str"").length == 3) {
      tableLable=name.split(""String_Node_Str"")[2];
    }
    if (tables != null && tables.size() > 0) {
      Object tableObject=tables.get(0);
      if (tableObject instanceof MetadataTable) {
        for (        MetadataTable table : (List<MetadataTable>)tables) {
          if (table.getLabel().equals(tableLable)) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
              IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
              return mmService.convertMetadataTable(table);
            }
          }
        }
      }
 else       if (tableObject instanceof EObjectContainmentEList) {
        EObjectContainmentEList eObjectContainmentEList=(EObjectContainmentEList)tableObject;
        for (        MetadataTable table : (List<MetadataTable>)eObjectContainmentEList) {
          if (table.getLabel().equals(tableLable)) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
              IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
              return mmService.convertMetadataTable(table);
            }
          }
        }
      }
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") public static IMetadataTable getTableByName(ConnectionItem item,String name){
  if (item == null || name == null) {
    return null;
  }
  final Connection connection=item.getConnection();
  if (connection != null) {
    List<MetadataTable> tables=null;
    IGenericWizardService wizardService=null;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericWizardService.class)) {
      wizardService=(IGenericWizardService)GlobalServiceRegister.getDefault().getService(IGenericWizardService.class);
    }
    if (wizardService != null && wizardService.isGenericItem(item)) {
      tables=wizardService.getMetadataTables(connection);
    }
 else {
      tables=MetadataToolHelper.getMetadataTableFromConnection(connection,name);
    }
    String tableLable=name;
    if (item instanceof SAPConnectionItem && name.split(""String_Node_Str"").length == 3) {
      tableLable=name.split(""String_Node_Str"")[2];
    }
    if (tables != null && tables.size() > 0) {
      Object tableObject=tables.get(0);
      if (tableObject instanceof MetadataTable) {
        for (        MetadataTable table : tables) {
          if (table.getLabel().equals(tableLable)) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
              IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
              return mmService.convertMetadataTable(table);
            }
          }
        }
      }
 else       if (tableObject instanceof EObjectContainmentEList) {
        EObjectContainmentEList eObjectContainmentEList=(EObjectContainmentEList)tableObject;
        for (        MetadataTable table : (List<MetadataTable>)eObjectContainmentEList) {
          if (table.getLabel().equals(tableLable)) {
            if (GlobalServiceRegister.getDefault().isServiceRegistered(IMetadataManagmentService.class)) {
              IMetadataManagmentService mmService=(IMetadataManagmentService)GlobalServiceRegister.getDefault().getService(IMetadataManagmentService.class);
              return mmService.convertMetadataTable(table);
            }
          }
        }
      }
    }
  }
  return null;
}",0.8844660194174757
125802,"public void copyTestCases(Item newItem,RepositoryNode sourceNode,boolean isDuplicate){
  if (!isAllowedToCopyTestCase(newItem,sourceNode)) {
    return;
  }
  final IPath path=getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      for (      IRepositoryNode testNode : sourceNode.getChildren()) {
        Item testItem=testNode.getObject().getProperty().getItem();
        if (!(testItem instanceof ProcessItem)) {
          continue;
        }
        testContainerService.copyTestCase(newItem,testItem,path,null,false);
      }
    }
  }
}","public void copyTestCases(Item newItem,RepositoryNode sourceNode,boolean isDuplicate){
  if (!isAllowedToCopyTestCase(newItem,sourceNode)) {
    return;
  }
  final IPath path=getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      testContainerService.copyTestCase(newItem,sourceNode.getObject().getProperty().getItem(),path,null,false);
    }
  }
}",0.8083538083538083
125803,"private void duplicateTestCases(Item newItem,final CopyObjectAction copyObjectAction){
  if (!copyObjectAction.isAllowedToCopyTestCase(newItem,sourceNode) || !isAllowDuplicateTest) {
    return;
  }
  final IPath path=copyObjectAction.getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      for (      IRepositoryNode testNode : this.sourceNode.getChildren()) {
        Item testItem=testNode.getObject().getProperty().getItem();
        if (!(testItem instanceof ProcessItem)) {
          continue;
        }
        String initNameValue=""String_Node_Str"" + testItem.getProperty().getDisplayName();
        String jobNameValue=null;
        final TreeSelection selectionInClipboard=(TreeSelection)selection;
        ERepositoryObjectType type=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getRepositoryObjectType();
        try {
          jobNameValue=getDuplicateName((RepositoryNode)testNode,initNameValue,type,selectionInClipboard);
        }
 catch (        BusinessException e) {
          jobNameValue=""String_Node_Str"";
        }
        testContainerService.copyTestCase(newItem,testItem,path,jobNameValue,true);
      }
    }
  }
}","private void duplicateTestCases(Item newItem,final CopyObjectAction copyObjectAction){
  if (!copyObjectAction.isAllowedToCopyTestCase(newItem,sourceNode) || !isAllowDuplicateTest) {
    return;
  }
  final IPath path=copyObjectAction.getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      testContainerService.copyTestCase(newItem,sourceNode.getObject().getProperty().getItem(),path,null,true);
    }
  }
}",0.6328125
125804,"private void setHidHiveEncryption(boolean hide){
  GridData hadoopData=(GridData)encryptionGrp.getLayoutData();
  hadoopData.exclude=hide;
  encryptionGrp.setVisible(!hide);
  encryptionGrp.setLayoutData(hadoopData);
  encryptionGrp.getParent().layout();
  setHiveTrustStoreParameters(hide);
  if (hide) {
    getConnection().getParameters().removeKey(ConnParameterKeys.CONN_PARA_KEY_USE_SSL);
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_SSL,String.valueOf(useSSLEncryption.getSelection()));
  }
  String url=getStringConnection();
  urlConnectionStringText.setText(url);
  getConnection().setURL(url);
}","private void setHidHiveEncryption(boolean hide){
  GridData hadoopData=(GridData)encryptionGrp.getLayoutData();
  hadoopData.exclude=hide;
  encryptionGrp.setVisible(!hide);
  encryptionGrp.setLayoutData(hadoopData);
  encryptionGrp.getParent().layout();
  setHiveTrustStoreParameters(hide);
  if (hide) {
    getConnection().getParameters().removeKey(ConnParameterKeys.CONN_PARA_KEY_USE_SSL);
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_SSL,String.valueOf(useSSLEncryption.getSelection()));
  }
  if (isHiveDBConnSelected()) {
    String url=getStringConnection();
    urlConnectionStringText.setText(url);
    getConnection().setURL(url);
  }
}",0.968609865470852
125805,"public ImportExportHandlersManager(){
  registryReader=new ImportExportHandlersRegistryReader();
  registryReader.init();
}","public ImportExportHandlersManager(){
  registryReader=ImportExportHandlersRegistryReader.getInstance();
}",0.8558951965065502
125806,"public void init(){
  readRegistry();
  List<BasicRegistry> availableImportItemsProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.imortRegistries));
  List<BasicRegistry> availableImportResourcesProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.resImportResistries));
  final Comparator<BasicRegistry> comparator=new Comparator<BasicRegistry>(){
    @Override public int compare(    BasicRegistry arg0,    BasicRegistry arg1){
      return arg1.getPriority().compareTo(arg0.getPriority());
    }
  }
;
  Collections.sort(availableImportItemsProviderRegistries,comparator);
  Collections.sort(availableImportResourcesProviderRegistries,comparator);
  List<IImportItemsHandler> itemsHanders=new ArrayList<IImportItemsHandler>();
  for (  BasicRegistry reg : availableImportItemsProviderRegistries) {
    if (reg instanceof ImportItemsProviderRegistry) {
      itemsHanders.add(((ImportItemsProviderRegistry)reg).getImportItemsHandler());
    }
  }
  importItemsHandlers=itemsHanders.toArray(new IImportItemsHandler[0]);
  List<IImportResourcesHandler> resourcesHanders=new ArrayList<IImportResourcesHandler>();
  for (  BasicRegistry reg : availableImportResourcesProviderRegistries) {
    if (reg instanceof ImportResourcesProviderRegistry) {
      resourcesHanders.add(((ImportResourcesProviderRegistry)reg).getImportResourcesHandler());
    }
  }
  importResourcesHandlers=resourcesHanders.toArray(new IImportResourcesHandler[0]);
}","public void init(){
  clearCache();
  readRegistry();
  List<BasicRegistry> availableImportItemsProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.imortRegistries));
  List<BasicRegistry> availableImportResourcesProviderRegistries=getAvailableImportProviderRegistries(new HashMap<String,BasicRegistry>(this.resImportResistries));
  final Comparator<BasicRegistry> comparator=new Comparator<BasicRegistry>(){
    @Override public int compare(    BasicRegistry arg0,    BasicRegistry arg1){
      return arg1.getPriority().compareTo(arg0.getPriority());
    }
  }
;
  Collections.sort(availableImportItemsProviderRegistries,comparator);
  Collections.sort(availableImportResourcesProviderRegistries,comparator);
  List<IImportItemsHandler> itemsHanders=new ArrayList<IImportItemsHandler>();
  for (  BasicRegistry reg : availableImportItemsProviderRegistries) {
    if (reg instanceof ImportItemsProviderRegistry) {
      itemsHanders.add(((ImportItemsProviderRegistry)reg).getImportItemsHandler());
    }
  }
  importItemsHandlers=itemsHanders.toArray(new IImportItemsHandler[0]);
  List<IImportResourcesHandler> resourcesHanders=new ArrayList<IImportResourcesHandler>();
  for (  BasicRegistry reg : availableImportResourcesProviderRegistries) {
    if (reg instanceof ImportResourcesProviderRegistry) {
      resourcesHanders.add(((ImportResourcesProviderRegistry)reg).getImportResourcesHandler());
    }
  }
  importResourcesHandlers=resourcesHanders.toArray(new IImportResourcesHandler[0]);
}",0.9947746570868712
125807,"public ImportExportHandlersRegistryReader(){
  super(""String_Node_Str"",""String_Node_Str"");
}","private ImportExportHandlersRegistryReader(){
  super(""String_Node_Str"",""String_Node_Str"");
}",0.9513513513513514
125808,"@Override protected void launchIndividualDownload(final AtomicInteger enabledButtonCount,ModuleToInstall data,final Button button){
  button.setEnabled(false);
  enabledButtonCount.decrementAndGet();
  DownloadModuleRunnableWithLicenseDialog downloadModuleRunnable=new DownloadModuleRunnableWithLicenseDialog(Collections.singletonList(data),getShell());
  try {
    run(downloadModuleRunnable);
  }
 catch (  InvocationTargetException e) {
    individualDownloadFailed(enabledButtonCount,button);
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
    individualDownloadFailed(enabledButtonCount,button);
    ExceptionHandler.process(e);
  }
 finally {
    if (getProgressMonitor().isCanceled()) {
      individualDownloadFailed(enabledButtonCount,button);
    }
 else {
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          if (!installAllBtn.isDisposed() && enabledButtonCount.get() == 0) {
            installAllBtn.setEnabled(false);
          }
        }
      }
);
    }
  }
}","@Override protected void launchIndividualDownload(final AtomicInteger enabledButtonCount,ModuleToInstall data,final Button button){
  button.setEnabled(false);
  enabledButtonCount.decrementAndGet();
  DownloadModuleRunnableWithLicenseDialog downloadModuleRunnable=new DownloadModuleRunnableWithLicenseDialog(Collections.singletonList(data),getShell());
  try {
    run(downloadModuleRunnable);
  }
 catch (  InvocationTargetException e) {
    individualDownloadFailed(enabledButtonCount,button);
    ExceptionHandler.process(e);
  }
catch (  InterruptedException e) {
    individualDownloadFailed(enabledButtonCount,button);
    ExceptionHandler.process(e);
  }
 finally {
    if (getProgressMonitor().isCanceled()) {
      individualDownloadFailed(enabledButtonCount,button);
    }
 else {
      Display.getDefault().syncExec(new Runnable(){
        @Override public void run(){
          if (!installAllBtn.isDisposed() && enabledButtonCount.get() == 0) {
            installAllBtn.setEnabled(false);
          }
        }
      }
);
    }
    if (enabledButtonCount.get() == 0) {
      close();
    }
  }
}",0.9712696941612604
125809,"private void exportStudioInfo(File dest){
  StringBuffer info=new StringBuffer();
  info.append(""String_Node_Str"").append(NEW_LINE);
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String productName=brandingService.getFullProductName();
    String productInternalVersion=VersionUtils.getInternalVersion();
    info.append(""String_Node_Str"").append(productName).append(NEW_LINE);
    info.append(""String_Node_Str"").append(productInternalVersion).append(NEW_LINE);
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  IPreferenceStore preferenceStore=CoreUIPlugin.getDefault().getPreferenceStore();
  String addons=preferenceStore.getString(""String_Node_Str"");
  JSONObject jsonObject=null;
  try {
    if (addons != null && !""String_Node_Str"".equals(addons)) {
      jsonObject=new JSONObject(addons);
    }
  }
 catch (  JSONException e) {
    info.append(""String_Node_Str"").append(NEW_LINE);
  }
  if (jsonObject != null) {
    JSONArray jsonArray=jsonObject.names();
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.length(); i++) {
        try {
          String addon=jsonArray.getString(i);
          info.append(addon).append(NEW_LINE);
        }
 catch (        JSONException e) {
          info.append(""String_Node_Str"").append(NEW_LINE);
        }
      }
    }
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericService.class)) {
    IGenericService genericService=(IGenericService)GlobalServiceRegister.getDefault().getService(IGenericService.class);
    List<Map<String,String>> componentsInfo=genericService.getAllGenericComponentsInfo();
    for (    Map<String,String> componentInfo : componentsInfo) {
      for (      Map.Entry<String,String> entry : componentInfo.entrySet()) {
        info.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(BLANK);
      }
      info.append(NEW_LINE);
    }
    info.append(NEW_LINE);
  }
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
    ICoreTisService coreTisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
    List<IUpdateSiteBean> installedPatches=null;
    try {
      installedPatches=coreTisService.getPatchesInstalled();
    }
 catch (    BackingStoreException e) {
      info.append(""String_Node_Str"").append(NEW_LINE);
      ExceptionHandler.process(e);
    }
    if (installedPatches != null) {
      for (      IUpdateSiteBean patch : installedPatches) {
        info.append(""String_Node_Str"").append(patch.getGroupID()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getVersion()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getArtifactID()).append(NEW_LINE);
      }
    }
  }
  writeToFile(dest,""String_Node_Str"",info);
}","private void exportStudioInfo(File dest){
  StringBuffer info=new StringBuffer();
  info.append(""String_Node_Str"").append(NEW_LINE);
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String productName=brandingService.getFullProductName();
    String productInternalVersion=VersionUtils.getInternalVersion();
    info.append(""String_Node_Str"").append(productName).append(NEW_LINE);
    info.append(""String_Node_Str"").append(productInternalVersion).append(NEW_LINE);
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  IPreferenceStore preferenceStore=PlatformUI.getPreferenceStore();
  String addons=preferenceStore.getString(""String_Node_Str"");
  JSONObject jsonObject=null;
  try {
    if (addons != null && !""String_Node_Str"".equals(addons)) {
      jsonObject=new JSONObject(addons);
    }
  }
 catch (  JSONException e) {
    info.append(""String_Node_Str"").append(NEW_LINE);
  }
  if (jsonObject != null) {
    JSONArray jsonArray=jsonObject.names();
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.length(); i++) {
        try {
          String addon=jsonArray.getString(i);
          info.append(addon).append(NEW_LINE);
        }
 catch (        JSONException e) {
          info.append(""String_Node_Str"").append(NEW_LINE);
        }
      }
    }
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericService.class)) {
    IGenericService genericService=(IGenericService)GlobalServiceRegister.getDefault().getService(IGenericService.class);
    List<Map<String,String>> componentsInfo=genericService.getAllGenericComponentsInfo();
    for (    Map<String,String> componentInfo : componentsInfo) {
      for (      Map.Entry<String,String> entry : componentInfo.entrySet()) {
        info.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(BLANK);
      }
      info.append(NEW_LINE);
    }
    info.append(NEW_LINE);
  }
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
    ICoreTisService coreTisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
    List<IUpdateSiteBean> installedPatches=null;
    try {
      installedPatches=coreTisService.getPatchesInstalled();
    }
 catch (    BackingStoreException e) {
      info.append(""String_Node_Str"").append(NEW_LINE);
      ExceptionHandler.process(e);
    }
    if (installedPatches != null) {
      for (      IUpdateSiteBean patch : installedPatches) {
        info.append(""String_Node_Str"").append(patch.getGroupID()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getVersion()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getArtifactID()).append(NEW_LINE);
      }
    }
  }
  writeToFile(dest,""String_Node_Str"",info);
}",0.9951296150824824
125810,"private void exportStudioInfo(File dest){
  StringBuffer info=new StringBuffer();
  info.append(""String_Node_Str"").append(NEW_LINE);
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String productName=brandingService.getFullProductName();
    String productInternalVersion=VersionUtils.getInternalVersion();
    info.append(""String_Node_Str"").append(productName).append(NEW_LINE);
    info.append(""String_Node_Str"").append(productInternalVersion).append(NEW_LINE);
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  IPreferenceStore preferenceStore=CoreUIPlugin.getDefault().getPreferenceStore();
  String addons=preferenceStore.getString(""String_Node_Str"");
  JSONObject jsonObject=null;
  try {
    if (addons != null && !""String_Node_Str"".equals(addons)) {
      jsonObject=new JSONObject(addons);
    }
  }
 catch (  JSONException e) {
    info.append(""String_Node_Str"").append(NEW_LINE);
  }
  if (jsonObject != null) {
    JSONArray jsonArray=jsonObject.names();
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.length(); i++) {
        try {
          String addon=jsonArray.getString(i);
          info.append(addon).append(NEW_LINE);
        }
 catch (        JSONException e) {
          info.append(""String_Node_Str"").append(NEW_LINE);
        }
      }
    }
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericService.class)) {
    IGenericService genericService=(IGenericService)GlobalServiceRegister.getDefault().getService(IGenericService.class);
    List<Map<String,String>> componentsInfo=genericService.getAllGenericComponentsInfo();
    for (    Map<String,String> componentInfo : componentsInfo) {
      for (      Map.Entry<String,String> entry : componentInfo.entrySet()) {
        info.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(BLANK);
      }
      info.append(NEW_LINE);
    }
    info.append(NEW_LINE);
  }
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
    ICoreTisService coreTisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
    List<IUpdateSiteBean> installedPatches=null;
    try {
      installedPatches=coreTisService.getPatchesInstalled();
    }
 catch (    BackingStoreException e) {
      info.append(""String_Node_Str"").append(NEW_LINE);
      ExceptionHandler.process(e);
    }
    if (installedPatches != null) {
      for (      IUpdateSiteBean patch : installedPatches) {
        info.append(""String_Node_Str"").append(patch.getGroupID()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getVersion()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getArtifactID()).append(NEW_LINE);
      }
    }
  }
  writeToFile(dest,""String_Node_Str"",info);
}","private void exportStudioInfo(File dest){
  StringBuffer info=new StringBuffer();
  info.append(""String_Node_Str"").append(NEW_LINE);
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IBrandingService.class)) {
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    String productName=brandingService.getFullProductName();
    String productInternalVersion=VersionUtils.getInternalVersion();
    info.append(""String_Node_Str"").append(productName).append(NEW_LINE);
    info.append(""String_Node_Str"").append(productInternalVersion).append(NEW_LINE);
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  IPreferenceStore preferenceStore=PlatformUI.getPreferenceStore();
  String addons=preferenceStore.getString(""String_Node_Str"");
  JSONObject jsonObject=null;
  try {
    if (addons != null && !""String_Node_Str"".equals(addons)) {
      jsonObject=new JSONObject(addons);
    }
  }
 catch (  JSONException e) {
    info.append(""String_Node_Str"").append(NEW_LINE);
  }
  if (jsonObject != null) {
    JSONArray jsonArray=jsonObject.names();
    if (jsonArray != null) {
      for (int i=0; i < jsonArray.length(); i++) {
        try {
          String addon=jsonArray.getString(i);
          info.append(addon).append(NEW_LINE);
        }
 catch (        JSONException e) {
          info.append(""String_Node_Str"").append(NEW_LINE);
        }
      }
    }
  }
  info.append(NEW_LINE);
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IGenericService.class)) {
    IGenericService genericService=(IGenericService)GlobalServiceRegister.getDefault().getService(IGenericService.class);
    List<Map<String,String>> componentsInfo=genericService.getAllGenericComponentsInfo();
    for (    Map<String,String> componentInfo : componentsInfo) {
      for (      Map.Entry<String,String> entry : componentInfo.entrySet()) {
        info.append(entry.getKey()).append(""String_Node_Str"").append(entry.getValue()).append(BLANK);
      }
      info.append(NEW_LINE);
    }
    info.append(NEW_LINE);
  }
  info.append(""String_Node_Str"").append(NEW_LINE);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
    ICoreTisService coreTisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
    List<IUpdateSiteBean> installedPatches=null;
    try {
      installedPatches=coreTisService.getPatchesInstalled();
    }
 catch (    BackingStoreException e) {
      info.append(""String_Node_Str"").append(NEW_LINE);
      ExceptionHandler.process(e);
    }
    if (installedPatches != null) {
      for (      IUpdateSiteBean patch : installedPatches) {
        info.append(""String_Node_Str"").append(patch.getGroupID()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getVersion()).append(BLANK);
        info.append(""String_Node_Str"").append(patch.getArtifactID()).append(NEW_LINE);
      }
    }
  }
  writeToFile(dest,""String_Node_Str"",info);
}",0.9951296150824824
125811,"public Resource getItemResource(Item item,boolean forceLoad){
  URI itemResourceURI=null;
  if (item.getFileExtension() != null) {
    itemResourceURI=getItemResourceURI(getItemURI(item),item.getFileExtension());
  }
 else   if (item instanceof TDQItem) {
    IPath fileName=new Path(((TDQItem)item).getFilename());
    itemResourceURI=getItemResourceURI(getItemURI(item),fileName.getFileExtension());
  }
 else {
    itemResourceURI=getItemResourceURI(getItemURI(item));
  }
  Resource itemResource=getResourceSet().getResource(itemResourceURI,false);
  if (forceLoad && itemResource == null) {
    if (item instanceof FileItem) {
      itemResource=new ByteArrayResource(itemResourceURI);
      getResourceSet().getResources().add(itemResource);
    }
    itemResource=getResourceSet().getResource(itemResourceURI,true);
  }
  return itemResource;
}","public Resource getItemResource(Item item,boolean forceLoad){
  if (item == null)   return null;
  URI itemResourceURI=null;
  if (item.getFileExtension() != null) {
    itemResourceURI=getItemResourceURI(getItemURI(item),item.getFileExtension());
  }
 else   if (item instanceof TDQItem) {
    IPath fileName=new Path(((TDQItem)item).getFilename());
    itemResourceURI=getItemResourceURI(getItemURI(item),fileName.getFileExtension());
  }
 else {
    itemResourceURI=getItemResourceURI(getItemURI(item));
  }
  Resource itemResource=getResourceSet().getResource(itemResourceURI,false);
  if (forceLoad && itemResource == null) {
    if (item instanceof FileItem) {
      itemResource=new ByteArrayResource(itemResourceURI);
      getResourceSet().getResources().add(itemResource);
    }
    itemResource=getResourceSet().getResource(itemResourceURI,true);
  }
  return itemResource;
}",0.9798503166378814
125812,"@Override public void postWindowOpen(){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    Job myJob=new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
          @Override protected void run() throws LoginException, PersistenceException {
          }
        }
;
        rwu.setAvoidUnloadResources(true);
        rwu.setUnloadResourcesAfterRun(true);
        rwu.setFilesModifiedOutsideOfRWU(true);
        rwu.setForceTransaction(true);
        ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
        return org.eclipse.core.runtime.Status.OK_STATUS;
      }
    }
;
    myJob.schedule();
  }
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId())) {
      menuItem.setVisible(false);
    }
 else     if (""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  perspProvider.closeAllEditors();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}","@Override public void postWindowOpen(){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    Job myJob=new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
          @Override protected void run() throws LoginException, PersistenceException {
          }
        }
;
        rwu.setAvoidUnloadResources(true);
        rwu.setUnloadResourcesAfterRun(true);
        rwu.setFilesModifiedOutsideOfRWU(true);
        rwu.setForceTransaction(true);
        ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
        return org.eclipse.core.runtime.Status.OK_STATUS;
      }
    }
;
    myJob.schedule();
  }
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId())) {
      menuItem.setVisible(false);
    }
 else     if (""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getActiveWorkbenchWindow().getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  perspProvider.closeAllEditors();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}",0.9979618026723032
125813,"/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}","/** 
 * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()
 */
@Override public void initializeDefaultPreferences(){
  IEclipsePreferences node=new DefaultScope().getNode(CorePlugin.getDefault().getBundle().getSymbolicName());
  IPath tempPath=new Path(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"");
  File tempFile=tempPath.toFile();
  if (!tempFile.exists()) {
    tempFile.mkdirs();
  }
  node.put(ITalendCorePrefConstants.FILE_PATH_TEMP,tempPath.toOSString());
  String os=Platform.getOS();
  String javaPath=System.getProperty(""String_Node_Str"");
  if (os.equals(Platform.OS_WIN32)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_WIN32_INTERPRETER);
  }
 else   if (os.equals(Platform.OS_LINUX)) {
    node.put(ITalendCorePrefConstants.JAVA_INTERPRETER,javaPath + JAVA_LINUX_INTERPRETER_PATH);
  }
  node.put(ITalendCorePrefConstants.LANGUAGE_SELECTOR,Locale.getDefault().getLanguage());
  node.put(ITalendCorePrefConstants.PREVIEW_LIMIT,""String_Node_Str"");
  node.putBoolean(ITalendCorePrefConstants.ALWAYS_WELCOME,true);
  String languageType=Locale.getDefault().getLanguage();
  if (Locale.getDefault().equals(Locale.CHINA)) {
    languageType=Locale.SIMPLIFIED_CHINESE.toString();
  }
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.LANGUAGE_SELECTOR,languageType);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_QUOTE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.USE_CSS_TEMPLATE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.CONTEXT_GROUP_BY_SOURCE,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATESOURCECODE,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.DOC_GENERATE_LASTEST_VERSION,false);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.SQL_ADD_WARNING,true);
  CorePlugin.getDefault().getPreferenceStore().setDefault(ITalendCorePrefConstants.FORBIDDEN_MAPPING_LENGTH_PREC_LOGIC,false);
}",0.9733096085409252
125814,"@Override public JSONObject collect() throws Exception {
  JSONObject mergedData=new JSONObject();
  IPreferenceStore preferenceStore=getPreferenceStore();
  String records=preferenceStore.getString(getPreferenceKey());
  JSONObject allProjectRecords=new JSONObject(records);
  Iterator<String> keys=allProjectRecords.keys();
  while (keys.hasNext()) {
    String projectName=keys.next();
    JSONObject object=(JSONObject)allProjectRecords.get(projectName);
    if (object != null) {
      TokenInforUtil.mergeJSON(object,mergedData);
    }
  }
  return getMergedToken(mergedData);
}","@Override public JSONObject collect() throws Exception {
  JSONObject mergedData=new JSONObject();
  IPreferenceStore preferenceStore=getPreferenceStore();
  String records=preferenceStore.getString(getPreferenceKey());
  JSONObject allProjectRecords=null;
  try {
    allProjectRecords=new JSONObject(records);
  }
 catch (  Exception e) {
    allProjectRecords=new JSONObject();
  }
  Iterator<String> keys=allProjectRecords.keys();
  while (keys.hasNext()) {
    String projectName=keys.next();
    JSONObject object=(JSONObject)allProjectRecords.get(projectName);
    if (object != null) {
      TokenInforUtil.mergeJSON(object,mergedData);
    }
  }
  return getMergedToken(mergedData);
}",0.9146436961628818
125815,"public void priorCollect() throws Exception {
  if (isActiveAndValid(false)) {
    for (    TokenInforProvider tip : getProviders()) {
      ITokenCollector collector=tip.getCollector();
      if (collector != null) {
        collector.priorCollect();
      }
    }
  }
}","public void priorCollect() throws Exception {
  if (isActiveAndValid(false)) {
    for (    TokenInforProvider tip : getProviders()) {
      try {
        ITokenCollector collector=tip.getCollector();
        if (collector != null) {
          collector.priorCollect();
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
}",0.8012422360248447
125816,"public JSONObject collectTokenInfors() throws Exception {
  JSONObject result=new JSONObject();
  for (  TokenInforProvider tip : getProviders()) {
    ITokenCollector collector=tip.getCollector();
    if (collector != null) {
      JSONObject collectionObject=collector.collect();
      if (collectionObject != null) {
        TokenInforUtil.mergeJSON(collectionObject,result);
      }
    }
  }
  return result;
}","public JSONObject collectTokenInfors() throws Exception {
  JSONObject result=new JSONObject();
  for (  TokenInforProvider tip : getProviders()) {
    ITokenCollector collector=tip.getCollector();
    if (collector != null) {
      try {
        JSONObject collectionObject=collector.collect();
        if (collectionObject != null) {
          TokenInforUtil.mergeJSON(collectionObject,result);
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
  }
  return result;
}",0.8905579399141631
125817,"/** 
 * Performs the zoom with animation.
 * @param zoom
 * @param finalCenter
 * @param animationModel
 */
private void primAnimateSetZoom(double zoom,Point finalCenter,AnimationModel animationModel){
  double initialZoom=getZoom();
  double finalZoom=zoom;
  Point finalCenterRel=finalCenter.getCopy();
  Point originalViewLocation=getViewport().getViewLocation();
  Dimension centerDiff=originalViewLocation.getDifference(getViewport().getClientArea().getCenter());
  Point finalViewLocation=finalCenterRel.scale(finalZoom / initialZoom).getTranslated(centerDiff);
  LineSeg scrollVector=new LineSeg(originalViewLocation,finalViewLocation);
  float progress=1.0f;
  if (animationModel != null) {
    animationModel.animationStarted();
    progress=animationModel.getProgress();
  }
  boolean finished=false;
  fireAnimatedZoomStarted();
  while (!finished) {
    if (animationModel == null || animationModel.isFinished())     finished=true;
    double currentZoom=initialZoom + ((finalZoom - initialZoom) * progress);
    super.primSetZoom(currentZoom);
    Point currentViewLocation=scrollVector.locatePoint(progress,0,LineSeg.Sign.POSITIVE);
    setViewLocation(currentViewLocation);
    getViewport().getUpdateManager().performUpdate();
    if (animationModel != null)     progress=animationModel.getProgress();
  }
  fireAnimatedZoomEnded();
}","/** 
 * Performs the zoom with animation.
 * @param zoom
 * @param finalCenter
 * @param animationModel
 */
private void primAnimateSetZoom(double zoom,Point finalCenter,AnimationModel animationModel){
  double initialZoom=getZoom();
  double finalZoom=zoom;
  currentZoom=finalZoom;
  Point finalCenterRel=finalCenter.getCopy();
  Point originalViewLocation=getViewport().getViewLocation();
  Dimension centerDiff=originalViewLocation.getDifference(getViewport().getClientArea().getCenter());
  Point finalViewLocation=finalCenterRel.scale(finalZoom / initialZoom).getTranslated(centerDiff);
  LineSeg scrollVector=new LineSeg(originalViewLocation,finalViewLocation);
  float progress=1.0f;
  if (animationModel != null) {
    animationModel.animationStarted();
    progress=animationModel.getProgress();
  }
  boolean finished=false;
  fireAnimatedZoomStarted();
  while (!finished) {
    if (animationModel == null || animationModel.isFinished())     finished=true;
    double currentZoom=initialZoom + ((finalZoom - initialZoom) * progress);
    super.primSetZoom(currentZoom);
    Point currentViewLocation=scrollVector.locatePoint(progress,0,LineSeg.Sign.POSITIVE);
    setViewLocation(currentViewLocation);
    getViewport().getUpdateManager().performUpdate();
    if (animationModel != null)     progress=animationModel.getProgress();
  }
  fireAnimatedZoomEnded();
}",0.9908256880733946
125818,"/** 
 * If the context group or context parameter have existed, just update the attributes. If not existed, will create new one. If not existed any more, will be removed.
 */
@Override public void saveToEmf(EList contextTypeList){
  if (contextTypeList == null) {
    return;
  }
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  EList newcontextTypeList=new BasicEList();
  for (int i=0; i < listContext.size(); i++) {
    IContext context=listContext.get(i);
    String contextGroupName=context.getName();
    ContextType contextType=findContextType(contextTypeList,contextGroupName);
    if (contextType == null) {
      contextType=TalendFileFactory.eINSTANCE.createContextType();
      contextType.setName(contextGroupName);
    }
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    newcontextTypeList.add(contextType);
    EList contextTypeParamList=contextType.getContextParameter();
    List<IContextParameter> contextParameterList=context.getContextParameterList();
    EList newContextTypeParamList=new BasicEList();
    if (contextParameterList != null) {
      for (int j=0; j < contextParameterList.size(); j++) {
        IContextParameter contextParam=contextParameterList.get(j);
        ContextParameterType contextParamType=findContextParameterType(contextTypeParamList,contextParam.getName());
        if (contextParamType == null) {
          contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
          contextParamType.setName(contextParam.getName());
        }
        newContextTypeParamList.add(contextParamType);
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        contextParamType.setRawValue(contextParam.getValue());
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          Item item=ContextUtils.getRepositoryContextItemById(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
        }
      }
      contextTypeParamList.clear();
      contextTypeParamList.addAll(newContextTypeParamList);
    }
  }
  contextTypeList.clear();
  contextTypeList.addAll(newcontextTypeList);
}","/** 
 * If the context group or context parameter have existed, just update the attributes. If not existed, will create new one. If not existed any more, will be removed.
 */
@Override public void saveToEmf(EList contextTypeList){
  if (contextTypeList == null) {
    return;
  }
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  EList newcontextTypeList=new BasicEList();
  for (int i=0; i < listContext.size(); i++) {
    IContext context=listContext.get(i);
    String contextGroupName=renameGroupContext.get(context);
    if (contextGroupName == null) {
      contextGroupName=context.getName();
    }
    ContextType contextType=findContextType(contextTypeList,contextGroupName);
    if (contextType == null) {
      contextType=TalendFileFactory.eINSTANCE.createContextType();
    }
    contextType.setName(context.getName());
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    newcontextTypeList.add(contextType);
    EList contextTypeParamList=contextType.getContextParameter();
    List<IContextParameter> contextParameterList=context.getContextParameterList();
    EList newContextTypeParamList=new BasicEList();
    if (contextParameterList != null) {
      for (int j=0; j < contextParameterList.size(); j++) {
        IContextParameter contextParam=contextParameterList.get(j);
        String contexParameterName=nameMap.get(contextParam.getName());
        if (contexParameterName == null) {
          contexParameterName=contextParam.getName();
        }
        ContextParameterType contextParamType=findContextParameterType(contextTypeParamList,contexParameterName);
        if (contextParamType == null) {
          contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
        }
        newContextTypeParamList.add(contextParamType);
        contextParamType.setName(contextParam.getName());
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        contextParamType.setRawValue(contextParam.getValue());
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          Item item=ContextUtils.getRepositoryContextItemById(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
        }
      }
      contextTypeParamList.clear();
      contextTypeParamList.addAll(newContextTypeParamList);
    }
  }
  contextTypeList.clear();
  contextTypeList.addAll(newcontextTypeList);
}",0.8933625672712776
125819,"@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
      IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
      if (mavenUIService != null) {
        mavenUIService.checkUserSettings(new NullProgressMonitor());
        mavenUIService.updateMavenResolver(false);
        mavenUIService.addMavenConfigurationChangeListener();
      }
    }
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginHelper.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    IPreferenceStore store=PlatformUI.getPreferenceStore();
    String lastProjectType=store.getString(""String_Node_Str"");
    String projectType=ProjectManager.getInstance().getCurrentProject().getEmfProject().getType();
    if (projectType == null) {
      projectType=System.getProperty(""String_Node_Str"");
    }
    if (lastProjectType != null && !""String_Node_Str"".equals(lastProjectType) && !lastProjectType.equals(projectType) || BrandingChecker.isBrandingChanged()) {
      if (projectType != null) {
        store.putValue(""String_Node_Str"",projectType);
      }
      System.setProperty(""String_Node_Str"",Boolean.TRUE.toString());
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}","@Override public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    Object instanceLocationCheck=acquireWorkspaceLock(shell);
    if (instanceLocationCheck != null) {
      shell.dispose();
      return instanceLocationCheck;
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMavenUIService.class)) {
      IMavenUIService mavenUIService=(IMavenUIService)GlobalServiceRegister.getDefault().getService(IMavenUIService.class);
      if (mavenUIService != null) {
        mavenUIService.checkUserSettings(new NullProgressMonitor());
        mavenUIService.updateMavenResolver(false);
        mavenUIService.addMavenConfigurationChangeListener();
      }
    }
    CoreRepositoryPlugin.getDefault().setRCPMode();
    checkBrowserSupport();
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell());
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      shell.dispose();
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginHelper.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.TRUE.toString(),false);
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
    if (brandingService.isPoweredbyTalend()) {
      IPreferenceStore store=PlatformUI.getPreferenceStore();
      store.putValue(IWorkbenchPreferenceConstants.PRESENTATION_FACTORY_ID,""String_Node_Str"");
    }
    IPreferenceStore store=PlatformUI.getPreferenceStore();
    String lastProjectType=store.getString(""String_Node_Str"");
    String projectType=ProjectManager.getInstance().getCurrentProject().getEmfProject().getType();
    if (projectType == null) {
      projectType=System.getProperty(""String_Node_Str"");
    }
    if (lastProjectType != null && !""String_Node_Str"".equals(lastProjectType) && !lastProjectType.equals(projectType) || BrandingChecker.isBrandingChanged()) {
      if (projectType != null) {
        store.putValue(""String_Node_Str"",projectType);
      }
      System.setProperty(""String_Node_Str"",Boolean.TRUE.toString());
    }
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,Boolean.FALSE.toString(),false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND,null,true,true);
      if (Platform.inDevelopmentMode()) {
        return IApplication.EXIT_RESTART;
      }
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    Location instanceLoc=Platform.getInstanceLocation();
    if (instanceLoc != null) {
      instanceLoc.release();
    }
  }
}",0.8899332179074945
125820,"@Override public Object evaluate(Property property,Object storedValue){
  if (connection != null && connection.isContextMode() && storedValue != null) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,connection,true);
    if (contextType != null) {
      return ContextParameterUtils.getOriginalValue(contextType,String.valueOf(storedValue));
    }
  }
  return storedValue;
}","@Override public Object evaluate(Property property,Object storedValue){
  boolean isPropertySupportContext=false;
  if (Boolean.valueOf(String.valueOf(property.getTaggedValue(IComponentConstants.SUPPORT_CONTEXT)))) {
    isPropertySupportContext=true;
  }
  if (connection != null && connection.isContextMode() && isPropertySupportContext && storedValue != null) {
    ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,connection,true);
    if (contextType != null) {
      return ContextParameterUtils.getOriginalValue(contextType,String.valueOf(storedValue));
    }
  }
  return storedValue;
}",0.7965451055662188
125821,"@Override public void createPartControl(Composite parent){
  service=GitContentServiceProviderManager.getGitContentService();
  if (service != null && service.isGIT())   service.createDropdownCombo(parent);
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (service != null && service.isGIT())   viewer.getTree().addListener(SWT.Resize,new Listener(){
    @Override public void handleEvent(    Event event){
      Point viewerPoint=viewer.getTree().getSize();
      Point point=parent.getSize();
      if (viewerPoint.x == point.x - 7 && viewerPoint.y == point.y - 40)       return;
      viewer.getTree().setSize(point.x - 7,point.y - 40);
      viewer.getTree().showSelection();
    }
  }
);
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_CLOSE_ICON));
            }
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_OPEN_ICON));
            }
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  RepositoryNodeFilterHelper.filter(viewer,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}","@Override public void createPartControl(Composite parent){
  service=GitContentServiceProviderManager.getGitContentService();
  if (service != null && service.isGIT())   service.createDropdownCombo(parent);
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (service != null && service.isGIT()) {
    viewer.getTree().addPaintListener(new PaintListener(){
      @Override public void paintControl(      PaintEvent e){
        Point viewerPoint=viewer.getTree().getSize();
        Point point=parent.getSize();
        if (viewerPoint.x == point.x - 7 && viewerPoint.y == point.y - 40)         return;
        viewer.getTree().setSize(point.x - 7,point.y - 40);
        viewer.getTree().showSelection();
      }
    }
);
  }
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_CLOSE_ICON));
            }
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_OPEN_ICON));
            }
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  RepositoryNodeFilterHelper.filter(viewer,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}",0.9928449744463372
125822,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(contextType,jdbcPropertiesString));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(contextType,propertiesString));
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9708415481996472
125823,"@Override public void setupLayout(){
  super.setupLayout();
  Form schemaForm=Form.create(this,Form.MAIN,""String_Node_Str"");
  schemaForm.addRow(widget(schema).setWidgetType(WidgetType.SCHEMA_EDITOR));
  Form schemaRefForm=Form.create(this,Form.REFERENCE,""String_Node_Str"");
  schemaRefForm.addRow(widget(schema).setWidgetType(WidgetType.SCHEMA_REFERENCE));
}","@Override public void setupLayout(){
  super.setupLayout();
  Form schemaForm=Form.create(this,Form.MAIN);
  schemaForm.addRow(widget(schema).setWidgetType(WidgetType.SCHEMA_EDITOR));
  Form schemaRefForm=Form.create(this,Form.REFERENCE);
  schemaRefForm.addRow(widget(schema).setWidgetType(WidgetType.SCHEMA_REFERENCE));
}",0.9472140762463344
125824,"@Override public void setupLayout(){
  super.setupLayout();
  Form form=Form.create(this,Form.MAIN,""String_Node_Str"");
  form.addRow(userName);
  form.addRow(widget(userPassword).setWidgetType(WidgetType.HIDDEN_TEXT));
}","@Override public void setupLayout(){
  super.setupLayout();
  Form form=Form.create(this,Form.MAIN);
  form.addRow(userName);
  form.addRow(widget(userPassword).setWidgetType(WidgetType.HIDDEN_TEXT));
}",0.957345971563981
125825,"@Override public void setupLayout(){
  super.setupLayout();
  Form form=Form.create(this,Form.MAIN,""String_Node_Str"");
  form.addRow(userId);
  form.addRow(nestedProps.getForm(Form.MAIN));
}","@Override public void setupLayout(){
  super.setupLayout();
  Form form=Form.create(this,Form.MAIN);
  form.addRow(userId);
  form.addRow(nestedProps.getForm(Form.MAIN));
}",0.9502762430939228
125826,"public void setCheckedState(){
  List<String> selectedElementLabels=getSelectedElementLabels();
  if (selectedElementLabels != null) {
    List<T> selectedElements=getInitSelectedElements(selectedElementLabels);
    if (selectedElements != null) {
      viewer.setCheckedElements(selectedElements.toArray());
    }
  }
}","public void setCheckedState(){
  List<String> selectedElementLabels=getSelectedElementLabels();
  if (selectedElementLabels != null) {
    List<T> selectedElements=getInitSelectedElements(selectedElementLabels);
    if (selectedElements != null) {
      viewer.setCheckedElements(selectedElements.toArray());
      doSelectionChanged();
    }
  }
}",0.9580838323353292
125827,"public static String[] getDistributionVersionsDisplay(String hiveDistribution,boolean byDisplay){
  List<String> versionsItems=new ArrayList<String>();
  IHDistribution distribution=getDistribution(hiveDistribution,byDisplay);
  if (distribution != null) {
    versionsItems.addAll(Arrays.asList(distribution.getVersionsDisplay()));
  }
  return versionsItems.toArray(new String[versionsItems.size()]);
}","public static String[] getDistributionVersionsDisplay(String hiveDistribution,boolean byDisplay){
  List<String> versionsItems=new ArrayList<String>();
  IHDistribution distribution=getDistribution(hiveDistribution,byDisplay);
  if (distribution != null) {
    IHDistributionVersion[] hdVersions=distribution.getHDVersions();
    for (    IHDistributionVersion v : hdVersions) {
      String[] hiveModesDisplay=getHiveModesDisplay(distribution.getName(),v.getVersion(),null,false);
      if (hiveModesDisplay == null || hiveModesDisplay.length == 0) {
        continue;
      }
      String displayVersion=v.getDisplayVersion();
      if (displayVersion != null) {
        versionsItems.add(displayVersion);
      }
    }
  }
  return versionsItems.toArray(new String[versionsItems.size()]);
}",0.4527986633249791
125828,"private IDistributionsManager getDistributionsManager(){
  if (types != null && types.length == 1) {
    return HadoopVersionControlUtils.getDistributionsManager(types[0]);
  }
  return null;
}","private IDistributionsManager getDistributionsManager(){
  if (types != null && types.length == 1) {
    return HadoopVersionControlUtils.getDistributionsManager(types[0]);
  }
  return HadoopVersionControlUtils.getDistributionsManager(null);
}",0.8649885583524027
125829,"public static void initilializeSchemaFromElementParameters(IMetadataTable metadataTable,List<IElementParameter> elementParameters){
  IElementParameter mappingParameter=getMappingParameter(elementParameters);
  String uniqueName=null;
  for (int i=0; i < elementParameters.size(); i++) {
    IElementParameter param=elementParameters.get(i);
    if ((param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) && param.getContext().equals(metadataTable.getAttachedConnector())) {
      if (param.getValue() instanceof IMetadataTable) {
        param.setValueToDefault(elementParameters);
        IMetadataTable table=(IMetadataTable)param.getValue();
        String metadataTableName=metadataTable.getTableName();
        if (mappingParameter != null) {
          if (mappingParameter.getValue() != null && (!mappingParameter.getValue().equals(""String_Node_Str""))) {
            table.setDbms((String)mappingParameter.getValue());
          }
        }
        metadataTable.setReadOnly(table.isReadOnly());
        metadataTable.setReadOnlyColumnPosition(table.getReadOnlyColumnPosition());
        for (int k=0; k < table.getListColumns().size(); k++) {
          IMetadataColumn newColumn=table.getListColumns().get(k);
          IElement element=param.getElement();
          IMetadataColumn oldColumn=metadataTable.getColumn(newColumn.getLabel());
          if (element instanceof INode && oldColumn == null) {
            INode node=(INode)element;
            if (node.getComponent().getName().equals(""String_Node_Str"")) {
              int lastIndexOf=node.getLabel().lastIndexOf(""String_Node_Str"");
              oldColumn=metadataTable.getColumn(newColumn.getLabel() + node.getLabel().substring(lastIndexOf));
            }
          }
          boolean update=true;
          if (metadataTableName != null && !metadataTableName.equals(table.getTableName())) {
            update=newColumn.isCustom();
          }
          if (oldColumn != null && update) {
            oldColumn.setReadOnly(newColumn.isReadOnly());
            oldColumn.setCustom(newColumn.isCustom());
            oldColumn.setCustomId(newColumn.getCustomId());
            if (newColumn.isReadOnly()) {
              oldColumn.setKey(newColumn.isKey());
              oldColumn.setNullable(newColumn.isNullable());
              oldColumn.setLength(newColumn.getLength());
              oldColumn.setPrecision(newColumn.getPrecision());
              oldColumn.setPattern(newColumn.getPattern());
              oldColumn.setType(newColumn.getType());
              oldColumn.setTalendType(newColumn.getTalendType());
              oldColumn.setComment(newColumn.getComment());
            }
          }
        }
      }
 else       if (param.getValue() instanceof Schema) {
        if (!param.getDefaultValues().isEmpty()) {
          Schema schema=(Schema)param.getDefaultValues().get(0).getDefaultValue();
          org.talend.core.model.metadata.builder.connection.MetadataTable defaultEmfTable=MetadataToolAvroHelper.convertFromAvro(schema);
          IMetadataTable defaultTable=MetadataToolHelper.convert(defaultEmfTable);
          for (          IMetadataColumn currentColumn : metadataTable.getListColumns()) {
            IMetadataColumn defaultColumn=defaultTable.getColumn(currentColumn.getLabel());
            if (defaultColumn != null) {
              currentColumn.setCustom(defaultColumn.isCustom());
              currentColumn.setReadOnly(defaultColumn.isReadOnly());
            }
          }
          metadataTable.setReadOnly(defaultTable.isReadOnly());
        }
      }
    }
  }
  metadataTable.sortCustomColumns();
}","public static void initilializeSchemaFromElementParameters(IMetadataTable metadataTable,List<IElementParameter> elementParameters){
  IElementParameter mappingParameter=getMappingParameter(elementParameters);
  String uniqueName=null;
  for (int i=0; i < elementParameters.size(); i++) {
    IElementParameter param=elementParameters.get(i);
    if ((param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) && param.getContext().equals(metadataTable.getAttachedConnector())) {
      if (param.getValue() instanceof IMetadataTable) {
        param.setValueToDefault(elementParameters);
        IMetadataTable table=(IMetadataTable)param.getValue();
        String metadataTableName=metadataTable.getTableName();
        if (mappingParameter != null) {
          if (mappingParameter.getValue() != null && (!mappingParameter.getValue().equals(""String_Node_Str""))) {
            table.setDbms((String)mappingParameter.getValue());
          }
        }
        metadataTable.setReadOnly(table.isReadOnly());
        metadataTable.setReadOnlyColumnPosition(table.getReadOnlyColumnPosition());
        for (int k=0; k < table.getListColumns().size(); k++) {
          IMetadataColumn newColumn=table.getListColumns().get(k);
          IElement element=param.getElement();
          IMetadataColumn oldColumn=metadataTable.getColumn(newColumn.getLabel());
          if (element instanceof INode && oldColumn == null) {
            INode node=(INode)element;
            if (node.getComponent().getName().equals(""String_Node_Str"")) {
              int lastIndexOf=node.getLabel().lastIndexOf(""String_Node_Str"");
              oldColumn=metadataTable.getColumn(newColumn.getLabel() + node.getLabel().substring(lastIndexOf));
            }
          }
          boolean update=true;
          if (metadataTableName != null && !metadataTableName.equals(table.getTableName())) {
            update=newColumn.isCustom();
          }
          if (oldColumn != null && update) {
            oldColumn.setReadOnly(newColumn.isReadOnly());
            oldColumn.setCustom(newColumn.isCustom());
            oldColumn.setCustomId(newColumn.getCustomId());
            if (newColumn.isReadOnly()) {
              oldColumn.setKey(newColumn.isKey());
              oldColumn.setNullable(newColumn.isNullable());
              oldColumn.setLength(newColumn.getLength());
              oldColumn.setPrecision(newColumn.getPrecision());
              oldColumn.setPattern(newColumn.getPattern());
              oldColumn.setType(newColumn.getType());
              oldColumn.setTalendType(newColumn.getTalendType());
              oldColumn.setComment(newColumn.getComment());
            }
          }
        }
      }
 else       if (param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) {
        if (!param.getDefaultValues().isEmpty()) {
          Schema schema=(Schema)param.getDefaultValues().get(0).getDefaultValue();
          org.talend.core.model.metadata.builder.connection.MetadataTable defaultEmfTable=MetadataToolAvroHelper.convertFromAvro(schema);
          IMetadataTable defaultTable=MetadataToolHelper.convert(defaultEmfTable);
          for (          IMetadataColumn currentColumn : metadataTable.getListColumns()) {
            IMetadataColumn defaultColumn=defaultTable.getColumn(currentColumn.getLabel());
            if (defaultColumn != null) {
              currentColumn.setCustom(defaultColumn.isCustom());
              currentColumn.setReadOnly(defaultColumn.isReadOnly());
            }
          }
          metadataTable.setReadOnly(defaultTable.isReadOnly());
        }
      }
    }
  }
  metadataTable.sortCustomColumns();
}",0.8865534896254379
125830,"/** 
 * for Spark Distribution   {@link SparkComponent}.
 */
IDistributionsManager getHiveDistributionManager();","/** 
 * for Hive Distribution   {@link HiveComponent}.
 */
IDistributionsManager getHiveDistributionManager();",0.918918918918919
125831,"private void updateVersionPart(){
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService != null) {
    final IHDistribution hDistribution=hadoopDistributionService.getHadoopDistribution(distribution,false);
    if (hDistribution != null) {
      boolean isSparkJob=isSparkJob();
      final IHDistributionVersion[] hdVersions=hDistribution.getHDVersions();
      List<String> versionsDisplay=new ArrayList<String>();
      for (      IHDistributionVersion hdv : hdVersions) {
        final String displayVersion=hdv.getDisplayVersion();
        if (displayVersion == null) {
          continue;
        }
        if (isSparkJob) {
          if (hadoopDistributionService.doSupportService(hdv,IHDConstants.SERVICE_SPARK)) {
            versionsDisplay.add(displayVersion);
          }
        }
 else {
          versionsDisplay.add(displayVersion);
        }
      }
      versionCombo.getCombo().setItems(versionsDisplay.toArray(new String[0]));
      IHDistributionVersion defaultVersion=hDistribution.getDefaultVersion();
      if (defaultVersion != null) {
        versionCombo.getCombo().setText(defaultVersion.getDisplayVersion());
      }
 else       if (!versionsDisplay.isEmpty()) {
        versionCombo.getCombo().select(0);
      }
    }
  }
}","private void updateVersionPart(){
  final IHDistribution hadoopDistribution=getHadoopDistribution();
  if (hadoopDistribution != null) {
    String[] versionsDisplay=hadoopDistribution.getVersionsDisplay();
    IHDistributionVersion defaultVersion=hadoopDistribution.getDefaultVersion();
    versionCombo.getCombo().setItems(versionsDisplay);
    if (defaultVersion != null) {
      versionCombo.getCombo().setText(defaultVersion.getDisplayVersion());
    }
 else     if (versionsDisplay.length > 0) {
      versionCombo.getCombo().select(0);
    }
  }
}",0.2242391884676988
125832,"private IHDistribution getHadoopDistribution(){
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService != null) {
    final IHDistribution distributionByDisplay=hadoopDistributionService.getHadoopDistribution(distributionCombo.getText(),true);
    return distributionByDisplay;
  }
  return null;
}","private IHDistribution getHadoopDistribution(){
  IDistributionsManager distributionManager=getDistributionsManager();
  if (distributionManager != null) {
    final IHDistribution distributionByDisplay=distributionManager.getDistribution(distributionCombo.getText(),true);
    return distributionByDisplay;
  }
  return null;
}",0.6666666666666666
125833,"private void init(){
  List<String> distributionsDisplay=new ArrayList<String>();
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService != null) {
    IDistributionsManager distributionManager=null;
    if (isSparkJob()) {
      distributionManager=hadoopDistributionService.getSparkDistributionManager();
    }
 else {
      distributionManager=hadoopDistributionService.getHadoopDistributionManager();
    }
    IHDistribution[] distributions=distributionManager.getDistributions();
    if (distributions != null) {
      for (      IHDistribution d : distributions) {
        if (!d.useCustom()) {
          distributionsDisplay.add(d.getDisplayName());
        }
      }
    }
  }
  distributionCombo.getCombo().setItems(distributionsDisplay.toArray(new String[0]));
  distributionCombo.select(0);
}","private void init(){
  List<String> distributionsDisplay=new ArrayList<String>();
  IDistributionsManager distributionManager=getDistributionsManager();
  if (distributionManager != null) {
    IHDistribution[] distributions=distributionManager.getDistributions();
    if (distributions != null) {
      for (      IHDistribution d : distributions) {
        if (!d.useCustom()) {
          distributionsDisplay.add(d.getDisplayName());
        }
      }
    }
  }
  distributionCombo.getCombo().setItems(distributionsDisplay.toArray(new String[0]));
  distributionCombo.select(0);
}",0.6946933149552033
125834,"private static Map<String,String> copyLine(Map<String,Object> currentLine,IElementParameter param){
  Map<String,String> newLine=new HashMap<String,String>();
  String[] items=param.getListItemsDisplayCodeName();
  for (int i=0; i < items.length; i++) {
    Object o=currentLine.get(items[i]);
    if (o instanceof Integer) {
      IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
      if ((((Integer)o) == -1) || (tmpParam.getListItemsValue().length == 0)) {
        newLine.put(items[i],""String_Node_Str"");
      }
 else {
        newLine.put(items[i],(String)tmpParam.getListItemsValue()[(Integer)o]);
      }
    }
 else {
      if (o instanceof String) {
        if (param.getName().equals(""String_Node_Str"")) {
          SQLPatternItem item=SQLPatternUtils.getItemFromCompoundId(param.getElement(),((String)o));
          if (item != null) {
            newLine.put(items[i],new String(item.getContent().getInnerContent()));
          }
 else {
            newLine.put(items[i],""String_Node_Str"");
          }
        }
 else         if (param.getElement() != null && param.getElement() instanceof INode && ((INode)param.getElement()).getComponent().getName().equals(""String_Node_Str"")) {
          String replacedValue=(String)o;
          if (items[i].equals(""String_Node_Str"")) {
            String inputRow=""String_Node_Str"";
            List connList=((INode)param.getElement()).getIncomingConnections();
            if (connList.size() > 0) {
              inputRow=((IConnection)connList.get(0)).getName();
              replacedValue=replacedValue.replace(""String_Node_Str"",inputRow + ""String_Node_Str"");
            }
          }
          newLine.put(items[i],replacedValue);
        }
 else {
          newLine.put(items[i],(String)o);
          if (param.getListItemsValue() != null && param.getListItemsValue()[i] instanceof IElementParameter) {
            IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
            if (tmpParam.getListItemsValue() != null && tmpParam.getListItemsValue().length > 0) {
              newLine.put(items[i],(String)tmpParam.getListItemsValue()[0]);
            }
          }
        }
      }
 else {
        if (o instanceof Boolean) {
          newLine.put(items[i],((Boolean)o).toString());
        }
 else {
          newLine.put(items[i],""String_Node_Str"");
        }
      }
    }
  }
  return newLine;
}","private static Map<String,String> copyLine(Map<String,Object> currentLine,IElementParameter param){
  Map<String,String> newLine=new HashMap<String,String>();
  String[] items=param.getListItemsDisplayCodeName();
  for (int i=0; i < items.length; i++) {
    Object o=currentLine.get(items[i]);
    if (o instanceof Integer) {
      IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
      if ((((Integer)o) == -1) || (tmpParam.getListItemsValue().length == 0)) {
        newLine.put(items[i],""String_Node_Str"");
      }
 else {
        newLine.put(items[i],(String)tmpParam.getListItemsValue()[(Integer)o]);
      }
    }
 else {
      if (o instanceof String) {
        if (param.getName().equals(""String_Node_Str"")) {
          SQLPatternItem item=SQLPatternUtils.getItemFromCompoundId(param.getElement(),((String)o));
          if (item != null) {
            newLine.put(items[i],new String(item.getContent().getInnerContent()));
          }
 else {
            newLine.put(items[i],""String_Node_Str"");
          }
        }
 else         if (param.getElement() != null && param.getElement() instanceof INode && ((INode)param.getElement()).getComponent().getName().equals(""String_Node_Str"")) {
          String replacedValue=(String)o;
          if (items[i].equals(""String_Node_Str"")) {
            String inputRow=""String_Node_Str"";
            List connList=((INode)param.getElement()).getIncomingConnections();
            if (connList.size() > 0) {
              inputRow=((IConnection)connList.get(0)).getName();
              replacedValue=replacedValue.replace(""String_Node_Str"",inputRow + ""String_Node_Str"");
            }
          }
          newLine.put(items[i],replacedValue);
        }
 else {
          newLine.put(items[i],(String)o);
          if (""String_Node_Str"".equals(o) && param.getListItemsValue() != null && param.getListItemsValue()[i] instanceof IElementParameter) {
            IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
            if (tmpParam.getListItemsValue() != null && tmpParam.getListItemsValue().length > 0) {
              newLine.put(items[i],(String)tmpParam.getListItemsValue()[0]);
            }
          }
        }
      }
 else {
        if (o instanceof Boolean) {
          newLine.put(items[i],((Boolean)o).toString());
        }
 else {
          newLine.put(items[i],""String_Node_Str"");
        }
      }
    }
  }
  return newLine;
}",0.9936305732484076
125835,"@Test public void testGetValueOfHive(){
  DatabaseConnection dbConnection=mock(DatabaseConnection.class);
  when(dbConnection.isContextMode()).thenReturn(true);
  PowerMockito.mockStatic(ContextParameterUtils.class);
  when(ContextParameterUtils.isContainContextParam(anyString())).thenReturn(true);
  EMap<String,String> paramMap=new BasicEMap<>();
  paramMap.put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,""String_Node_Str"");
  paramMap.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,""String_Node_Str"");
  paramMap.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,""String_Node_Str"");
  when(dbConnection.getParameters()).thenReturn(paramMap);
  checkIfWithoutQuotes(dbConnection,""String_Node_Str"");
  checkIfWithoutQuotes(dbConnection,""String_Node_Str"");
  checkIfWithoutQuotes(dbConnection,""String_Node_Str"");
}","@Test public void testGetValueOfHive(){
  DatabaseConnection dbConnection=mock(DatabaseConnection.class);
  when(dbConnection.isContextMode()).thenReturn(true);
  PowerMockito.mockStatic(ContextParameterUtils.class);
  when(ContextParameterUtils.isContainContextParam(anyString())).thenReturn(true);
  EMap<String,String> paramMap=new BasicEMap<>();
  paramMap.put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,""String_Node_Str"");
  paramMap.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,""String_Node_Str"");
  paramMap.put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,""String_Node_Str"");
  paramMap.put(ConnParameterKeys.CONN_PARA_KEY_USE_DATANODE_HOSTNAME,null);
  when(dbConnection.getParameters()).thenReturn(paramMap);
  checkIfWithoutQuotes(dbConnection,""String_Node_Str"");
  checkIfWithoutQuotes(dbConnection,""String_Node_Str"");
  checkIfWithoutQuotes(dbConnection,""String_Node_Str"");
  Object result=RepositoryToComponentProperty.getValue(dbConnection,""String_Node_Str"",null);
  assertTrue(result == null);
}",0.8921409214092141
125836,"private static Map<String,String> copyLine(Map<String,Object> currentLine,IElementParameter param){
  Map<String,String> newLine=new HashMap<String,String>();
  String[] items=param.getListItemsDisplayCodeName();
  for (int i=0; i < items.length; i++) {
    Object o=currentLine.get(items[i]);
    if (o instanceof Integer) {
      IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
      if ((((Integer)o) == -1) || (tmpParam.getListItemsValue().length == 0)) {
        newLine.put(items[i],""String_Node_Str"");
      }
 else {
        newLine.put(items[i],(String)tmpParam.getListItemsValue()[(Integer)o]);
      }
    }
 else {
      if (o instanceof String) {
        if (param.getName().equals(""String_Node_Str"")) {
          SQLPatternItem item=SQLPatternUtils.getItemFromCompoundId(param.getElement(),((String)o));
          if (item != null) {
            newLine.put(items[i],new String(item.getContent().getInnerContent()));
          }
 else {
            newLine.put(items[i],""String_Node_Str"");
          }
        }
 else         if (param.getElement() != null && param.getElement() instanceof INode && ((INode)param.getElement()).getComponent().getName().equals(""String_Node_Str"")) {
          String replacedValue=(String)o;
          if (items[i].equals(""String_Node_Str"")) {
            String inputRow=""String_Node_Str"";
            List connList=((INode)param.getElement()).getIncomingConnections();
            if (connList.size() > 0) {
              inputRow=((IConnection)connList.get(0)).getName();
              replacedValue=replacedValue.replace(""String_Node_Str"",inputRow + ""String_Node_Str"");
            }
          }
          newLine.put(items[i],replacedValue);
        }
 else {
          newLine.put(items[i],(String)o);
        }
      }
 else {
        if (o instanceof Boolean) {
          newLine.put(items[i],((Boolean)o).toString());
        }
 else {
          newLine.put(items[i],""String_Node_Str"");
        }
      }
    }
  }
  return newLine;
}","private static Map<String,String> copyLine(Map<String,Object> currentLine,IElementParameter param){
  Map<String,String> newLine=new HashMap<String,String>();
  String[] items=param.getListItemsDisplayCodeName();
  for (int i=0; i < items.length; i++) {
    Object o=currentLine.get(items[i]);
    if (o instanceof Integer) {
      IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
      if ((((Integer)o) == -1) || (tmpParam.getListItemsValue().length == 0)) {
        newLine.put(items[i],""String_Node_Str"");
      }
 else {
        newLine.put(items[i],(String)tmpParam.getListItemsValue()[(Integer)o]);
      }
    }
 else {
      if (o instanceof String) {
        if (param.getName().equals(""String_Node_Str"")) {
          SQLPatternItem item=SQLPatternUtils.getItemFromCompoundId(param.getElement(),((String)o));
          if (item != null) {
            newLine.put(items[i],new String(item.getContent().getInnerContent()));
          }
 else {
            newLine.put(items[i],""String_Node_Str"");
          }
        }
 else         if (param.getElement() != null && param.getElement() instanceof INode && ((INode)param.getElement()).getComponent().getName().equals(""String_Node_Str"")) {
          String replacedValue=(String)o;
          if (items[i].equals(""String_Node_Str"")) {
            String inputRow=""String_Node_Str"";
            List connList=((INode)param.getElement()).getIncomingConnections();
            if (connList.size() > 0) {
              inputRow=((IConnection)connList.get(0)).getName();
              replacedValue=replacedValue.replace(""String_Node_Str"",inputRow + ""String_Node_Str"");
            }
          }
          newLine.put(items[i],replacedValue);
        }
 else {
          newLine.put(items[i],(String)o);
          if (param.getListItemsValue() != null && param.getListItemsValue()[i] instanceof IElementParameter) {
            IElementParameter tmpParam=(IElementParameter)param.getListItemsValue()[i];
            if (tmpParam.getListItemsValue() != null && tmpParam.getListItemsValue().length > 0) {
              newLine.put(items[i],(String)tmpParam.getListItemsValue()[0]);
            }
          }
        }
      }
 else {
        if (o instanceof Boolean) {
          newLine.put(items[i],((Boolean)o).toString());
        }
 else {
          newLine.put(items[i],""String_Node_Str"");
        }
      }
    }
  }
  return newLine;
}",0.9093369418132612
125837,"public void setCheckedState(){
  List<String> selectedElementLabels=getSelectedElementLabels();
  if (selectedElementLabels != null) {
    List<T> selectedElements=getInitSelectedElements(selectedElementLabels);
    if (selectedElements != null) {
      viewer.setCheckedElements(selectedElements.toArray());
    }
  }
}","public void setCheckedState(){
  List<String> selectedElementLabels=getSelectedElementLabels();
  if (selectedElementLabels != null) {
    List<T> selectedElements=getInitSelectedElements(selectedElementLabels);
    if (selectedElements != null) {
      viewer.setCheckedElements(selectedElements.toArray());
      doSelectionChanged();
    }
  }
}",0.9580838323353292
125838,"/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}","/** 
 * ggu Comment method ""cloneOriginalValueConnection"". only clone the properties of connection.
 * @param selectedContext
 */
public static DatabaseConnection cloneOriginalValueConnection(DatabaseConnection dbConn,boolean defaultContext,String selectedContext){
  if (dbConn == null) {
    return null;
  }
  ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(null,dbConn,selectedContext,defaultContext);
  DatabaseConnection cloneConn=ConnectionFactory.eINSTANCE.createDatabaseConnection();
  String server=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getServerName());
  String username=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUsername());
  String password=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getRawPassword());
  String port=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getPort());
  String sidOrDatabase=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getSID());
  String datasource=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDatasourceName());
  String filePath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getFileFieldName());
  String schemaOracle=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getUiSchema());
  String dbRootPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDBRootPath());
  String additionParam=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getAdditionalParams());
  String url=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
  String className=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverClass());
  String jarPath=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDriverJarPath());
  String dbmsID=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getDbmsId());
  filePath=TalendQuoteUtils.removeQuotes(filePath);
  dbRootPath=TalendQuoteUtils.removeQuotes(dbRootPath);
  cloneConn.setAdditionalParams(additionParam);
  cloneConn.setDatasourceName(datasource);
  cloneConn.setDBRootPath(dbRootPath);
  cloneConn.setFileFieldName(filePath);
  cloneConn.setRawPassword(password);
  cloneConn.setPort(port);
  cloneConn.setUiSchema(schemaOracle);
  cloneConn.setServerName(server);
  cloneConn.setSID(sidOrDatabase);
  cloneConn.setUsername(username);
  cloneConn.setDriverJarPath(jarPath);
  cloneConn.setComment(dbConn.getComment());
  cloneConn.setDatabaseType(dbConn.getDatabaseType());
  cloneConn.setDbmsId(dbmsID);
  cloneConn.setDivergency(dbConn.isDivergency());
  cloneConn.setDbVersionString(dbConn.getDbVersionString());
  cloneConn.setId(dbConn.getId());
  cloneConn.setLabel(dbConn.getLabel());
  cloneConn.setNullChar(dbConn.getNullChar());
  cloneConn.setProductId(dbConn.getProductId());
  cloneConn.setSqlSynthax(dbConn.getSqlSynthax());
  cloneConn.setStandardSQL(dbConn.isStandardSQL());
  cloneConn.setStringQuote(dbConn.getStringQuote());
  cloneConn.setSynchronised(dbConn.isSynchronised());
  cloneConn.setSystemSQL(dbConn.isSystemSQL());
  cloneConn.setVersion(dbConn.getVersion());
  cloneConn.setReadOnly(dbConn.isReadOnly());
  cloneConn.setDriverClass(className);
  cloneConn.setName(dbConn.getName());
  cloneOtherParameters(dbConn,cloneConn);
  if (dbConn.isSetSQLMode()) {
    cloneConn.setSQLMode(dbConn.isSQLMode());
  }
 else {
    cloneConn.setSQLMode(true);
  }
  if (EDatabaseTypeName.HIVE.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String hadoopUserName=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hadoopUserName));
    String jobTracker=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL,ContextParameterUtils.getOriginalValue(contextType,jobTracker));
    String nameNode=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL,ContextParameterUtils.getOriginalValue(contextType,nameNode));
    String hivePrincipal=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA,ContextParameterUtils.getOriginalValue(contextType,hivePrincipal));
    String hiveMetadata=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL,ContextParameterUtils.getOriginalValue(contextType,hiveMetadata));
    String driverPath=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH,ContextParameterUtils.getOriginalValue(contextType,driverPath));
    String driverClass=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS,ContextParameterUtils.getOriginalValue(contextType,driverClass));
    String hiveUserName=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME,ContextParameterUtils.getOriginalValue(contextType,hiveUserName));
    String hivePassword=cloneConn.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
    cloneConn.getParameters().put(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD,ContextParameterUtils.getOriginalValue(contextType,hivePassword));
    String ktPrincipal=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,ktPrincipal));
    String keytab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,keytab));
    String jdbcPropertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_JDBC_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(contextType,jdbcPropertiesString));
    String propertiesString=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_PROPERTIES,HadoopRepositoryUtil.getOriginalValueOfProperties(contextType,propertiesString));
    String template=null;
    String hiveServerVersion=HiveServerVersionInfo.HIVE_SERVER_1.getKey();
    EMap<String,String> parameterMap=dbConn.getParameters();
    if (parameterMap != null) {
      hiveServerVersion=parameterMap.get(ConnParameterKeys.HIVE_SERVER_VERSION);
    }
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServerVersion)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String newURl=DatabaseConnStrUtil.getHiveURLString(cloneConn,server,port,sidOrDatabase,template);
    cloneConn.setURL(newURl);
    return cloneConn;
  }
  if (EDatabaseTypeName.HBASE.equals(EDatabaseTypeName.getTypeFromDbType(cloneConn.getDatabaseType()))) {
    String hbaseMasterPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_MASTERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseMasterPrin));
    String hbaseRegionPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HBASE_AUTHENTICATION_REGIONSERVERPRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseRegionPrin));
    String hbaseKeyTabPrin=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTabPrin));
    String hbaseKeyTab=cloneConn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
    cloneConn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_KEYTAB,ContextParameterUtils.getOriginalValue(contextType,hbaseKeyTab));
  }
  if (EDatabaseTypeName.IBMDB2.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String cursorForDb2=""String_Node_Str"";
    String database=sidOrDatabase + cursorForDb2;
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,database,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (contextType != null && !EDatabaseTypeName.GENERAL_JDBC.equals(EDatabaseTypeName.getTypeFromDbType(dbConn.getDatabaseType()))) {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
    return cloneConn;
  }
  if (dbConn.getURL() != null && !dbConn.getURL().equals(""String_Node_Str"")) {
    cloneConn.setURL(url);
  }
 else {
    String newURL=DatabaseConnStrUtil.getURLString(cloneConn.getDatabaseType(),dbConn.getDbVersionString(),server,username,password,port,sidOrDatabase,filePath.toLowerCase(),datasource,dbRootPath,additionParam);
    cloneConn.setURL(newURL);
  }
  return cloneConn;
}",0.9708415481996472
125839,"public String getMavenUriSnapshot(){
  MavenArtifact artifact=null;
  if (getMavenUri() != null) {
    if (getMavenUri().split(MavenUrlHelper.SEPERATOR).length < 4 && getModuleName().lastIndexOf(""String_Node_Str"") != -1) {
      String extension=getModuleName().substring(getModuleName().lastIndexOf(""String_Node_Str"") + 1,getModuleName().length());
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
      artifact.setType(extension);
    }
 else {
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
    }
  }
  if (artifact != null && !MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId())) {
    return getMavenUri();
  }
  if (StringUtils.isEmpty(mavenUriSnapshot) && artifact != null) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion() + ""String_Node_Str"",artifact.getType(),artifact.getClassifier());
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
    if (mvnUrisFromIndex != null) {
      final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
      String maxVerstion=null;
      for (      String mvnUri : split) {
        if (maxVerstion == null) {
          maxVerstion=mvnUri;
        }
 else {
          MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
          MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
          if (lastArtifact != null && currentArtifact != null) {
            String lastV=lastArtifact.getVersion();
            lastV=lastV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            String currentV=currentArtifact.getVersion();
            currentV=currentV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            if (!lastV.equals(currentV)) {
              Version lastVersion=new Version(lastV);
              Version currentVersion=new Version(currentV);
              if (currentVersion.compareTo(lastVersion) > 0) {
                maxVerstion=mvnUri;
              }
            }
          }
        }
      }
      mavenUriSnapshot=maxVerstion;
    }
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName());
  }
  return mavenUriSnapshot;
}","public String getMavenUriSnapshot(){
  MavenArtifact artifact=null;
  if (getMavenUri() != null) {
    if (getMavenUri().split(MavenUrlHelper.SEPERATOR).length < 4 && getModuleName().lastIndexOf(""String_Node_Str"") != -1) {
      String extension=getModuleName().substring(getModuleName().lastIndexOf(""String_Node_Str"") + 1,getModuleName().length());
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
      if (artifact != null) {
        artifact.setType(extension);
      }
    }
 else {
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
    }
  }
  if (artifact != null && !MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId())) {
    return getMavenUri();
  }
  if (StringUtils.isEmpty(mavenUriSnapshot) && artifact != null) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion() + ""String_Node_Str"",artifact.getType(),artifact.getClassifier());
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
    if (mvnUrisFromIndex != null) {
      final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
      String maxVerstion=null;
      for (      String mvnUri : split) {
        if (maxVerstion == null) {
          maxVerstion=mvnUri;
        }
 else {
          MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
          MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
          if (lastArtifact != null && currentArtifact != null) {
            String lastV=lastArtifact.getVersion();
            lastV=lastV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            String currentV=currentArtifact.getVersion();
            currentV=currentV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            if (!lastV.equals(currentV)) {
              Version lastVersion=new Version(lastV);
              Version currentVersion=new Version(currentV);
              if (currentVersion.compareTo(lastVersion) > 0) {
                maxVerstion=mvnUri;
              }
            }
          }
        }
      }
      mavenUriSnapshot=maxVerstion;
    }
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName());
  }
  return mavenUriSnapshot;
}",0.9919678714859438
125840,"/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  if (node.getObject().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      boolean ret=deleteRepositoryNode(repositoryNode,factory);
      if (!ret) {
        return;
      }
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.getType(""String_Node_Str"") && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType()) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (curItem.getParent() instanceof FolderItem && ((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}","/** 
 * DOC qwei Comment method ""deleteFolder"".
 * @param deleteActionCache
 */
private void deleteFolder(final RepositoryNode node,final IProxyRepositoryFactory factory,final DeleteActionCache deleteActionCache){
  if (node.getObject().isDeleted()) {
    try {
      deleteElements(factory,deleteActionCache,node);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
    return;
  }
  IPath path=RepositoryNodeUtilities.getPath(node);
  ERepositoryObjectType objectType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  List<IRepositoryNode> repositoryList=node.getChildren();
  boolean success=true;
  Exception bex=null;
  for (  IRepositoryNode repositoryNode : repositoryList) {
    try {
      boolean ret=deleteRepositoryNode(repositoryNode,factory);
      if (!ret) {
        return;
      }
    }
 catch (    Exception e) {
      bex=e;
      ExceptionHandler.process(e);
      success=false;
    }
  }
  if (bex != null) {
    final Shell shell=getShell();
    MessageDialog.openWarning(shell,Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
  }
  if (!success) {
    return;
  }
  FolderItem folderItem=factory.getFolderItem(ProjectManager.getInstance().getCurrentProject(),objectType,path);
  folderItem.getState().setDeleted(true);
  String fullPath=""String_Node_Str"";
  FolderItem curItem=folderItem;
  while (curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && ((FolderItem)((Item)curItem.getParent()).getParent()).getType().getValue() == FolderType.FOLDER) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (!objectType.getKey().toString().startsWith(""String_Node_Str"") && objectType != ERepositoryObjectType.SQLPATTERNS && objectType != ERepositoryObjectType.ROUTINES && objectType != ERepositoryObjectType.getType(""String_Node_Str"") && objectType != ERepositoryObjectType.JOB_SCRIPT && curItem.getParent() instanceof FolderItem && ((Item)curItem.getParent()).getParent() instanceof FolderItem && !objectType.isDQItemType() && !isGenericType(objectType)) {
    FolderItem parentFolder=(FolderItem)curItem.getParent();
    if (""String_Node_Str"".equals(fullPath)) {
      fullPath=parentFolder.getProperty().getLabel() + fullPath;
    }
 else {
      fullPath=parentFolder.getProperty().getLabel() + ""String_Node_Str"" + fullPath;
    }
    curItem=parentFolder;
  }
  if (objectType.getKey().toString().startsWith(""String_Node_Str"")) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.ROUTINES) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.JOB_SCRIPT) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType == ERepositoryObjectType.SQLPATTERNS) {
    while (((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
    while (!((FolderItem)curItem.getParent()).getProperty().getLabel().equals(""String_Node_Str"")) {
      fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      curItem=(FolderItem)curItem.getParent();
    }
  }
  if (objectType.isDQItemType()) {
    while (curItem.getParent() instanceof FolderItem && ((FolderItem)curItem.getParent()).getType().getValue() != FolderType.SYSTEM_FOLDER) {
      if (""String_Node_Str"".equals(fullPath)) {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + fullPath;
      }
 else {
        fullPath=((FolderItem)curItem.getParent()).getProperty().getLabel() + ""String_Node_Str"" + fullPath;
      }
      curItem=(FolderItem)curItem.getParent();
    }
  }
  folderItem.getState().setPath(fullPath);
  this.setChildFolderPath(folderItem);
}",0.9972370602320868
125841,"@Override public Image getImage(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getImage((IRepositoryViewObject)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  IImage nodeIcon=node.getIcon();
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
case SYSTEM_FOLDER:
    if (nodeIcon != null) {
      return ImageProvider.getImage(nodeIcon);
    }
  ERepositoryObjectType contentType=node.getContentType();
if (contentType != null) {
  Image image=RepositoryNodeProviderRegistryReader.getInstance().getImage(contentType);
  if (image != null) {
    return image;
  }
}
case SIMPLE_FOLDER:
ECoreImage image=null;
if (getView() != null) {
image=(getView().getExpandedState(obj) ? ECoreImage.FOLDER_OPEN_ICON : ECoreImage.FOLDER_CLOSE_ICON);
}
 else {
image=ECoreImage.FOLDER_OPEN_ICON;
}
return ImageProvider.getImage(image);
default :
if (node.getObject() == null) {
return ImageProvider.getImage(nodeIcon);
}
ERepositoryObjectType repositoryObjectType=node.getObject().getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC) {
return ImageProvider.getImage(nodeIcon);
}
 else if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE) {
Image tableImage=ImageProvider.getImage(nodeIcon);
Item item=node.getObject().getProperty().getItem();
if (item != null && item instanceof DatabaseConnectionItem) {
if (PluginChecker.isCDCPluginLoaded()) {
ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
if (service != null) {
String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)item);
if (cdcLinkId != null) {
if (node.getObject() instanceof MetadataTableRepositoryObject) {
MetadataTable table=((MetadataTableRepositoryObject)node.getObject()).getTable();
String tableType=table.getTableType();
if (tableType != null && ""String_Node_Str"".equals(tableType)) {
  ECDCStatus status=ECDCStatus.NONE;
  if (table.isActivatedCDC()) {
    status=ECDCStatus.ACTIVATED;
  }
 else   if (table.isAttachedCDC()) {
    status=ECDCStatus.ADDED;
  }
  return OverlayImageProvider.getImageWithCDCStatus(tableImage,status).createImage();
}
}
}
}
}
}
return tableImage;
}
 else if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC) {
IImage icon=RepositoryImageProvider.getIcon(repositoryObjectType);
if (icon != null) {
return ImageProvider.getImage(icon);
}
}
return getImage(node.getObject());
}
}","@Override public Image getImage(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getImage((IRepositoryViewObject)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  IImage nodeIcon=node.getIcon();
switch (node.getType()) {
case STABLE_SYSTEM_FOLDER:
case SYSTEM_FOLDER:
    ERepositoryObjectType contentType=node.getContentType();
  if (nodeIcon == null || EImage.DEFAULT_IMAGE.equals(nodeIcon)) {
    Image image=getImageFromFramework(contentType);
    if (image != null) {
      return image;
    }
  }
if (nodeIcon != null) {
  return ImageProvider.getImage(nodeIcon);
}
if (contentType != null) {
Image image=RepositoryNodeProviderRegistryReader.getInstance().getImage(contentType);
if (image != null) {
  return image;
}
}
case SIMPLE_FOLDER:
ECoreImage image=null;
if (getView() != null) {
image=(getView().getExpandedState(obj) ? ECoreImage.FOLDER_OPEN_ICON : ECoreImage.FOLDER_CLOSE_ICON);
}
 else {
image=ECoreImage.FOLDER_OPEN_ICON;
}
return ImageProvider.getImage(image);
default :
if (node.getObject() == null) {
return ImageProvider.getImage(nodeIcon);
}
ERepositoryObjectType repositoryObjectType=node.getObject().getRepositoryObjectType();
if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC) {
return ImageProvider.getImage(nodeIcon);
}
 else if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE) {
Image tableImage=ImageProvider.getImage(nodeIcon);
Item item=node.getObject().getProperty().getItem();
if (item != null && item instanceof DatabaseConnectionItem) {
if (PluginChecker.isCDCPluginLoaded()) {
ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
if (service != null) {
String cdcLinkId=service.getCDCConnectionLinkId((DatabaseConnectionItem)item);
if (cdcLinkId != null) {
if (node.getObject() instanceof MetadataTableRepositoryObject) {
MetadataTable table=((MetadataTableRepositoryObject)node.getObject()).getTable();
String tableType=table.getTableType();
if (tableType != null && ""String_Node_Str"".equals(tableType)) {
ECDCStatus status=ECDCStatus.NONE;
if (table.isActivatedCDC()) {
  status=ECDCStatus.ACTIVATED;
}
 else if (table.isAttachedCDC()) {
  status=ECDCStatus.ADDED;
}
return OverlayImageProvider.getImageWithCDCStatus(tableImage,status).createImage();
}
}
}
}
}
}
return tableImage;
}
 else if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC) {
IImage icon=RepositoryImageProvider.getIcon(repositoryObjectType);
if (icon != null) {
return ImageProvider.getImage(icon);
}
}
return getImage(node.getObject());
}
}",0.9039070749736008
125842,"/** 
 * ftang Comment method ""isForbbidNode"".
 * @param node
 * @return
 */
private boolean isForbidNode(RepositoryNode node){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject nodeObject=node.getObject();
  if (nodeObject == null || nodeObject.getProperty() == null || nodeObject.getProperty().getItem() == null) {
    return false;
  }
  boolean locked=false;
  if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
    if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
      locked=true;
    }
  }
  boolean isTestCaseLocked=isTestCasesLocked(node);
  if ((locked || isTestCaseLocked || RepositoryManager.isOpenedItemInEditor(nodeObject)) && !(DELETE_FOREVER_TITLE.equals(getText()))) {
    final String title=Messages.getString(""String_Node_Str"");
    String nodeName=ERepositoryObjectType.getDeleteFolderName(nodeObject.getRepositoryObjectType());
    String message=""String_Node_Str"";
    if (locked) {
      message=Messages.getString(""String_Node_Str"",nodeName);
    }
 else     if (isTestCaseLocked) {
      message=Messages.getString(""String_Node_Str"",nodeName);
    }
    final String lockMessage=message;
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        MessageDialog dialog=new MessageDialog(new Shell(),title,null,lockMessage,MessageDialog.ERROR,new String[]{IDialogConstants.OK_LABEL},0);
        dialog.open();
      }
    }
);
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOB_DOC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOB_DOC) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.JOBLET_DOC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.JOBLET_DOC) {
    return true;
  }
  if (node.getContentType() == ERepositoryObjectType.GENERATED) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_CDC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_TABLE) {
    final IRepositoryViewObject object=nodeObject;
    if (object != null && object instanceof MetadataTableRepositoryObject) {
      final MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
      if (table != null && table instanceof SubscriberTable) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * ftang Comment method ""isForbbidNode"".
 * @param node
 * @return
 */
private boolean isForbidNode(RepositoryNode node){
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  IRepositoryViewObject nodeObject=node.getObject();
  if (nodeObject == null || nodeObject.getProperty() == null || nodeObject.getProperty().getItem() == null) {
    return false;
  }
  boolean locked=false;
  if (!factory.getRepositoryContext().isEditableAsReadOnly()) {
    if (nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_OTHER || nodeObject.getRepositoryStatus() == ERepositoryStatus.LOCK_BY_USER) {
      locked=true;
    }
  }
  boolean isTestCaseLocked=isTestCasesLocked(node);
  if ((locked || isTestCaseLocked || RepositoryManager.isOpenedItemInEditor(nodeObject)) && !(DELETE_FOREVER_TITLE.equals(getText()))) {
    final String title=Messages.getString(""String_Node_Str"");
    String nodeName=ERepositoryObjectType.getDeleteFolderName(nodeObject.getRepositoryObjectType());
    String message=""String_Node_Str"";
    if (locked) {
      message=Messages.getString(""String_Node_Str"",nodeName);
    }
 else     if (isTestCaseLocked) {
      message=Messages.getString(""String_Node_Str"",nodeName);
    }
    final String lockMessage=message;
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        MessageDialog dialog=new MessageDialog(new Shell(),title,null,lockMessage,MessageDialog.ERROR,new String[]{IDialogConstants.OK_LABEL},0);
        dialog.open();
      }
    }
);
    return true;
  }
  ERepositoryObjectType contentType=node.getContentType();
  if (ERepositoryObjectType.JOB_DOC != null && contentType != null) {
    if (contentType.equals(ERepositoryObjectType.JOB_DOC)) {
      return true;
    }
  }
  if (ERepositoryObjectType.JOB_DOC != null && node.getProperties(EProperties.CONTENT_TYPE) != null) {
    if (node.getProperties(EProperties.CONTENT_TYPE).equals(ERepositoryObjectType.JOB_DOC)) {
      return true;
    }
  }
  if (ERepositoryObjectType.JOBLET_DOC != null && contentType != null) {
    if (contentType.equals(ERepositoryObjectType.JOBLET_DOC)) {
      return true;
    }
  }
  if (ERepositoryObjectType.JOBLET_DOC != null && node.getProperties(EProperties.CONTENT_TYPE) != null) {
    if (node.getProperties(EProperties.CONTENT_TYPE).equals(ERepositoryObjectType.JOBLET_DOC)) {
      return true;
    }
  }
  if (ERepositoryObjectType.GENERATED != null && contentType != null) {
    if (contentType.equals(ERepositoryObjectType.GENERATED)) {
      return true;
    }
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_CDC) {
    return true;
  }
  if (node.getProperties(EProperties.CONTENT_TYPE) == ERepositoryObjectType.METADATA_CON_TABLE) {
    final IRepositoryViewObject object=nodeObject;
    if (object != null && object instanceof MetadataTableRepositoryObject) {
      final MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
      if (table != null && table instanceof SubscriberTable) {
        return true;
      }
    }
  }
  return false;
}",0.8791710572532491
125843,"@Override public void postShutdown(IWorkbench workbench){
}","@Override public void postShutdown(IWorkbench workbench){
  ProxyRepositoryFactory.getInstance().logOffProject();
}",0.6781609195402298
125844,"private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IRepositoryView view=RepositoryManager.getRepositoryView();
        if (view != null) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
      }
 else       if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (tdqRepositoryService != null) {
            tdqRepositoryService.refresh();
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
  PlatformUI.getWorkbench().addWorkbenchListener(new IWorkbenchListener(){
    @Override public boolean preShutdown(    IWorkbench workbench,    boolean forced){
      TokenCollectorFactory.getFactory().process();
      ProxyRepositoryFactory.getInstance().logOffProject();
      return true;
    }
    @Override public void postShutdown(    IWorkbench workbench){
    }
  }
);
}","private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IRepositoryView view=RepositoryManager.getRepositoryView();
        if (view != null) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
      }
 else       if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (tdqRepositoryService != null) {
            tdqRepositoryService.refresh();
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
  PlatformUI.getWorkbench().addWorkbenchListener(new IWorkbenchListener(){
    @Override public boolean preShutdown(    IWorkbench workbench,    boolean forced){
      TokenCollectorFactory.getFactory().process();
      return true;
    }
    @Override public void postShutdown(    IWorkbench workbench){
      ProxyRepositoryFactory.getInstance().logOffProject();
    }
  }
);
}",0.9504800404244568
125845,"@Override public boolean preShutdown(IWorkbench workbench,boolean forced){
  TokenCollectorFactory.getFactory().process();
  ProxyRepositoryFactory.getInstance().logOffProject();
  return true;
}","@Override public boolean preShutdown(IWorkbench workbench,boolean forced){
  TokenCollectorFactory.getFactory().process();
  return true;
}",0.8323353293413174
125846,"public void setViewerData(List<T> nls){
  viewer.setInput(nls);
}","public void setViewerData(List<T> nls){
  this.viewerData=nls;
  viewer.setInput(nls);
}",0.8496732026143791
125847,"@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  if (selectionInClipboard != null) {
    for (    Object currentSource : selectionInClipboard.toArray()) {
      RepositoryNode sourceNode=(RepositoryNode)currentSource;
      if (ProcessConvertManager.getInstance().CheckConvertProcess(sourceNode,target)) {
        String jobNewName=null;
        String jobTypeValue=null;
        String frameworkNewValue=null;
        if (target.getContentType() == ERepositoryObjectType.PROCESS) {
          jobTypeValue=ConvertJobsUtil.JobType.STANDARD.getDisplayName();
        }
 else         if (target.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
          jobTypeValue=ConvertJobsUtil.JobType.BIGDATASTREAMING.getDisplayName();
          frameworkNewValue=ConvertJobsUtil.JobStreamingFramework.SPARKSTREAMINGFRAMEWORK.getDisplayName();
        }
 else         if (target.getContentType() == ERepositoryObjectType.PROCESS_MR) {
          jobTypeValue=ConvertJobsUtil.JobType.BIGDATABATCH.getDisplayName();
          frameworkNewValue=ConvertJobsUtil.JobBatchFramework.MAPREDUCEFRAMEWORK.getDisplayName();
        }
        try {
          jobNewName=ConvertJobsUtil.getDuplicateName(sourceNode,sourceNode.getObject().getLabel());
        }
 catch (        BusinessException e) {
          jobNewName=sourceNode.getObject().getLabel();
        }
        ConvertJobsUtil.createOperation(jobNewName,jobTypeValue,frameworkNewValue,sourceNode.getObject());
      }
 else {
        try {
          if (copyObjectAction.validateAction((RepositoryNode)currentSource,target)) {
            copyObjectAction.execute((RepositoryNode)currentSource,target);
          }
 else {
            MessageDialog.openWarning(new Shell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        Exception e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
    ERepositoryObjectType contentType=target.getContentType();
    if (contentType == null) {
      contentType=target.getObjectType();
    }
    if (contentType != null && contentType == ERepositoryObjectType.JOBLET) {
      if (PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (jobletService != null) {
          jobletService.loadComponentsFromProviders();
        }
      }
    }
  }
}","@Override protected void doRun(){
  IStructuredSelection selection=(IStructuredSelection)getSelection();
  RepositoryNode target=(RepositoryNode)selection.getFirstElement();
  CopyObjectAction copyObjectAction=CopyObjectAction.getInstance();
  TreeSelection selectionInClipboard=(TreeSelection)LocalSelectionTransfer.getTransfer().getSelection();
  if (selectionInClipboard != null) {
    for (    Object currentSource : selectionInClipboard.toArray()) {
      RepositoryNode sourceNode=(RepositoryNode)currentSource;
      if (ProcessConvertManager.getInstance().CheckConvertProcess(sourceNode,target)) {
        String jobNewName=null;
        String jobTypeValue=null;
        String frameworkNewValue=null;
        if (target.getContentType() == ERepositoryObjectType.PROCESS) {
          jobTypeValue=ConvertJobsUtil.JobType.STANDARD.getDisplayName();
        }
 else         if (target.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
          jobTypeValue=ConvertJobsUtil.JobType.BIGDATASTREAMING.getDisplayName();
          frameworkNewValue=ConvertJobsUtil.JobStreamingFramework.SPARKSTREAMINGFRAMEWORK.getDisplayName();
        }
 else         if (target.getContentType() == ERepositoryObjectType.PROCESS_MR) {
          jobTypeValue=ConvertJobsUtil.JobType.BIGDATABATCH.getDisplayName();
          frameworkNewValue=ConvertJobsUtil.JobBatchFramework.MAPREDUCEFRAMEWORK.getDisplayName();
        }
        try {
          jobNewName=ConvertJobsUtil.getDuplicateName(sourceNode,sourceNode.getObject().getLabel());
        }
 catch (        BusinessException e) {
          jobNewName=sourceNode.getObject().getLabel();
        }
        Object sourceFramework=null;
        if (sourceNode.getObject() != null) {
          sourceFramework=sourceNode.getObject().getProperty().getAdditionalProperties().get(ConvertJobsUtil.FRAMEWORK);
        }
        ConvertJobsUtil.createOperation(jobNewName,jobTypeValue,frameworkNewValue,sourceNode.getObject());
        if (sourceNode.getObject() != null) {
          Object currentFramework=sourceNode.getObject().getProperty().getAdditionalProperties().get(ConvertJobsUtil.FRAMEWORK);
          if (sourceFramework != null && currentFramework != null && !sourceFramework.equals(currentFramework)) {
            sourceNode.getObject().getProperty().getAdditionalProperties().put(ConvertJobsUtil.FRAMEWORK,sourceFramework);
          }
        }
      }
 else {
        try {
          if (copyObjectAction.validateAction((RepositoryNode)currentSource,target)) {
            copyObjectAction.execute((RepositoryNode)currentSource,target);
          }
 else {
            MessageDialog.openWarning(new Shell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
          }
        }
 catch (        BusinessException e) {
          MessageBoxExceptionHandler.process(e);
        }
catch (        Exception e) {
          CommonExceptionHandler.process(e);
        }
      }
    }
    ERepositoryObjectType contentType=target.getContentType();
    if (contentType == null) {
      contentType=target.getObjectType();
    }
    if (contentType != null && contentType == ERepositoryObjectType.JOBLET) {
      if (PluginChecker.isJobLetPluginLoaded()) {
        IJobletProviderService jobletService=(IJobletProviderService)GlobalServiceRegister.getDefault().getService(IJobletProviderService.class);
        if (jobletService != null) {
          jobletService.loadComponentsFromProviders();
        }
      }
    }
  }
}",0.8980169971671388
125848,"private boolean doSupportTez(){
  if (isHiveDBConnSelected()) {
    HiveMetadataHelper.doSupportTez(hiveDistributionCombo.getText(),hiveVersionCombo.getText(),true);
  }
  return false;
}","private boolean doSupportTez(){
  if (isHiveDBConnSelected()) {
    return HiveMetadataHelper.doSupportTez(hiveDistributionCombo.getText(),hiveVersionCombo.getText(),true);
  }
  return false;
}",0.9816272965879264
125849,"@Override public boolean performCancel(){
  if (selectorWizardPage != null) {
    selectorWizardPage.performCancel();
  }
  temConnection=null;
  return super.performCancel();
}","@Override public boolean performCancel(){
  if (selectorWizardPage != null) {
    selectorWizardPage.performCancel();
  }
  oldCopiedConnection=null;
  return super.performCancel();
}",0.9722222222222222
125850,"@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
  EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
  if (PluginChecker.isTDQLoaded()) {
    saveMetaData();
    ITDQRepositoryService tdqRepositoryService=null;
    boolean needUpdateAnalysis=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
    generateOriginalColumnsMap(dataPackageFromOrignalConnection);
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    replaceUUidsForColumnsAndTables(copyDataPackage);
    saveMetaData();
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
    }
  }
 else {
    Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
    ConnectionHelper.addPackages(copyDataPackage,connection);
    saveMetaData();
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  temConnection=null;
}","@Override public void run(IProgressMonitor monitor) throws CoreException {
  DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
  ITDQRepositoryService tdqRepositoryService=null;
  boolean needUpdateAnalysis=false;
  if (PluginChecker.isTDQLoaded()) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
      tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
      needUpdateAnalysis=isNeedUpdateDQ(connection,oldCopiedConnection,tdqRepositoryService);
    }
    if (tdqRepositoryService != null && needUpdateAnalysis) {
      if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
        return;
      }
    }
  }
  saveMetaData();
  if (tdqRepositoryService != null && needUpdateAnalysis) {
    tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
  }
  RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
  closeLockStrategy();
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  list.add(repositoryObject);
  CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
  oldCopiedConnection=null;
}",0.6088338099777566
125851,"/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_TABLE_WIZ));
  TableInfoParameters tableInfoParameters=new TableInfoParameters();
  tableWizardpage=new DatabaseTableWizardPage(selectedMetadataTable,managerConnection,connectionItem,isRepositoryObjectEditable(),metadataConnection,temConnection);
  tableWizardpage.setWizard(this);
  if (creation && !skipStep) {
    selectorWizardPage=new SelectorTableWizardPage(connectionItem,isRepositoryObjectEditable(),tableInfoParameters,metadataConnection,temConnection);
    tableFilterWizardPage=new DatabaseTableFilterWizardPage(tableInfoParameters,this.connectionItem,metadataConnection);
    tableFilterWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    tableFilterWizardPage.setPageComplete(true);
    selectorWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + connectionItem.getProperty().getLabel()+ ""String_Node_Str"");
    selectorWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    selectorWizardPage.setPageComplete(true);
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + connectionItem.getProperty().getLabel()+ ""String_Node_Str"");
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
    addPage(tableFilterWizardPage);
    addPage(selectorWizardPage);
    addPage(tableWizardpage);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + connectionItem.getProperty().getLabel()+ ""String_Node_Str"");
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
    addPage(tableWizardpage);
  }
}","/** 
 * Adding the page to the wizard.
 */
@Override public void addPages(){
  setWindowTitle(Messages.getString(""String_Node_Str""));
  setDefaultPageImageDescriptor(ImageProvider.getImageDesc(ECoreImage.METADATA_TABLE_WIZ));
  TableInfoParameters tableInfoParameters=new TableInfoParameters();
  DatabaseConnection curDbConnection=(DatabaseConnection)connectionItem.getConnection();
  tableWizardpage=new DatabaseTableWizardPage(selectedMetadataTable,managerConnection,connectionItem,isRepositoryObjectEditable(),metadataConnection,curDbConnection);
  tableWizardpage.setWizard(this);
  if (creation && !skipStep) {
    selectorWizardPage=new SelectorTableWizardPage(connectionItem,isRepositoryObjectEditable(),tableInfoParameters,metadataConnection,curDbConnection);
    tableFilterWizardPage=new DatabaseTableFilterWizardPage(tableInfoParameters,this.connectionItem,metadataConnection);
    tableFilterWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    tableFilterWizardPage.setPageComplete(true);
    selectorWizardPage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + connectionItem.getProperty().getLabel()+ ""String_Node_Str"");
    selectorWizardPage.setDescription(Messages.getString(""String_Node_Str""));
    selectorWizardPage.setPageComplete(true);
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + connectionItem.getProperty().getLabel()+ ""String_Node_Str"");
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
    addPage(tableFilterWizardPage);
    addPage(selectorWizardPage);
    addPage(tableWizardpage);
  }
 else {
    tableWizardpage.setTitle(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + connectionItem.getProperty().getLabel()+ ""String_Node_Str"");
    tableWizardpage.setDescription(Messages.getString(""String_Node_Str""));
    tableWizardpage.setPageComplete(false);
    addPage(tableWizardpage);
  }
}",0.9728612044455932
125852,"/** 
 * clone a new DB connection
 */
private void cloneBaseDataBaseConnection(DatabaseConnection connection){
  temConnection=EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,temConnection);
}","/** 
 * clone a new DB connection
 */
private void cloneBaseDataBaseConnection(DatabaseConnection connection){
  oldCopiedConnection=EcoreUtil.copy(connection);
  EList<Package> dataPackage=connection.getDataPackage();
  Collection<Package> newDataPackage=EcoreUtil.copyAll(dataPackage);
  ConnectionHelper.addPackages(newDataPackage,oldCopiedConnection);
}",0.9658119658119658
125853,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        EList<Package> dataPackageTemConnection=temConnection.getDataPackage();
        EList<Package> dataPackageFromOrignalConnection=connection.getDataPackage();
        if (PluginChecker.isTDQLoaded()) {
          saveMetaData();
          ITDQRepositoryService tdqRepositoryService=null;
          boolean needUpdateAnalysis=false;
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(temConnection,connection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
          generateOriginalColumnsMap(dataPackageFromOrignalConnection);
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          replaceUUidsForColumnsAndTables(copyDataPackage);
          saveMetaData();
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
          }
        }
 else {
          Collection<Package> copyDataPackage=EcoreUtil.copyAll(dataPackageTemConnection);
          ConnectionHelper.addPackages(copyDataPackage,connection);
          saveMetaData();
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        temConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  if (tableWizardpage.isPageComplete()) {
    IWorkspace workspace=ResourcesPlugin.getWorkspace();
    IWorkspaceRunnable operation=new IWorkspaceRunnable(){
      @Override public void run(      IProgressMonitor monitor) throws CoreException {
        DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
        ITDQRepositoryService tdqRepositoryService=null;
        boolean needUpdateAnalysis=false;
        if (PluginChecker.isTDQLoaded()) {
          if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
            tdqRepositoryService=(ITDQRepositoryService)org.talend.core.GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
            needUpdateAnalysis=isNeedUpdateDQ(connection,oldCopiedConnection,tdqRepositoryService);
          }
          if (tdqRepositoryService != null && needUpdateAnalysis) {
            if (!tdqRepositoryService.confirmUpdateAnalysis(connectionItem)) {
              return;
            }
          }
        }
        saveMetaData();
        if (tdqRepositoryService != null && needUpdateAnalysis) {
          tdqRepositoryService.updateImpactOnAnalysis(connectionItem);
        }
        RepositoryUpdateManager.updateMultiSchema(connectionItem,oldMetadataTable,oldTableMap);
        closeLockStrategy();
        List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
        list.add(repositoryObject);
        CoreRuntimePlugin.getInstance().getRepositoryService().notifySQLBuilder(list);
        oldCopiedConnection=null;
      }
    }
;
    try {
      workspace.run(operation,null);
    }
 catch (    CoreException e) {
      ExceptionHandler.process(e);
    }
    return true;
  }
 else {
    return false;
  }
}",0.7129845371743275
125854,"/** 
 * ggu Comment method ""addInContextModelForProcessItem"".
 */
public static boolean addInContextModelForProcessItem(Item item,Map<String,Set<String>> contextVars,List<ContextItem> allContextItems){
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
 else   if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  boolean added=false;
  if (processType != null) {
    if (allContextItems == null) {
      allContextItems=ContextUtils.getAllContextItem();
    }
    for (    String id : contextVars.keySet()) {
      ConnectionItem connItem=MetadataToolHelper.getConnectionItemByItemId(id,false);
      if (connItem != null) {
        String contextId=connItem.getConnection().getContextId();
        if (contextId != null) {
          Set<String> set=contextVars.get(id);
          if (set != null) {
            ContextItem contextItem=getContextItemById(allContextItems,contextId);
            ContextType contextType=getContextTypeByName(contextItem,contextItem.getDefaultContext(),true);
            JobContextManager processJobManager=new JobContextManager(processType.getContext(),processType.getDefaultContext());
            boolean modified=false;
            for (            String varName : set) {
              ContextParameterType contextParameterType=ContextUtils.getContextParameterTypeByName(contextType,varName);
              IContextParameter contextParameter=processJobManager.getDefaultContext().getContextParameter(varName);
              if (contextParameter == null) {
                addContextParameterType(processJobManager,contextItem,contextParameterType);
                modified=true;
              }
            }
            if (modified) {
              processType.getContext().clear();
              processJobManager.saveToEmf(processType.getContext());
              added=true;
            }
          }
        }
      }
    }
  }
  return added;
}","/** 
 * ggu Comment method ""addInContextModelForProcessItem"".
 */
public static boolean addInContextModelForProcessItem(Item item,Map<String,Set<String>> contextVars,List<ContextItem> allContextItems){
  ProcessType processType=null;
  if (item instanceof ProcessItem) {
    processType=((ProcessItem)item).getProcess();
  }
 else   if (item instanceof JobletProcessItem) {
    processType=((JobletProcessItem)item).getJobletProcess();
  }
  boolean added=false;
  if (processType != null) {
    if (allContextItems == null) {
      allContextItems=ContextUtils.getAllContextItem();
    }
    for (    String id : contextVars.keySet()) {
      ConnectionItem connItem=MetadataToolHelper.getConnectionItemByItemId(id,false);
      if (connItem != null) {
        String contextId=connItem.getConnection().getContextId();
        if (contextId != null) {
          Set<String> set=contextVars.get(id);
          if (set != null) {
            ContextItem contextItem=getContextItemById(allContextItems,contextId);
            ContextType contextType=getContextTypeByName(contextItem,contextItem.getDefaultContext(),true);
            JobContextManager processJobManager=new JobContextManager(processType.getContext(),processType.getDefaultContext());
            boolean modified=false;
            for (            String varName : set) {
              ContextParameterType contextParameterType=ContextUtils.getContextParameterTypeByName(contextType,varName);
              IContextParameter contextParameter=processJobManager.getDefaultContext().getContextParameter(varName);
              if (contextParameter == null) {
                addContextParameterType(processJobManager,contextItem,contextParameterType);
                modified=true;
              }
            }
            if (modified) {
              processJobManager.saveToEmf(processType.getContext());
              added=true;
            }
          }
        }
      }
    }
  }
  return added;
}",0.9879638916750252
125855,"@Override public void saveToEmf(EList contextTypeList){
  ContextType contextType;
  IContext context;
  EList contextTypeParamList;
  ContextParameterType contextParamType;
  IContextParameter contextParam;
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  for (int i=0; i < listContext.size(); i++) {
    contextType=TalendFileFactory.eINSTANCE.createContextType();
    context=listContext.get(i);
    contextType.setName(context.getName());
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    contextTypeParamList=contextType.getContextParameter();
    if (context.getContextParameterList() != null) {
      for (int j=0; j < context.getContextParameterList().size(); j++) {
        contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
        contextParam=context.getContextParameterList().get(j);
        contextParamType.setName(contextParam.getName());
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        contextParamType.setRawValue(contextParam.getValue());
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          Item item=ContextUtils.getRepositoryContextItemById(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
        }
        contextTypeParamList.add(contextParamType);
      }
    }
    contextTypeList.add(contextType);
  }
}","/** 
 * If the context group or context parameter have existed, just update the attributes. If not existed, will create new one. If not existed any more, will be removed.
 */
@Override public void saveToEmf(EList contextTypeList){
  if (contextTypeList == null) {
    return;
  }
  if (listContext.isEmpty()) {
    retrieveDefaultContext();
  }
  EList newcontextTypeList=new BasicEList();
  for (int i=0; i < listContext.size(); i++) {
    IContext context=listContext.get(i);
    String contextGroupName=context.getName();
    ContextType contextType=findContextType(contextTypeList,contextGroupName);
    if (contextType == null) {
      contextType=TalendFileFactory.eINSTANCE.createContextType();
      contextType.setName(contextGroupName);
    }
    contextType.setConfirmationNeeded(context.isConfirmationNeeded());
    newcontextTypeList.add(contextType);
    EList contextTypeParamList=contextType.getContextParameter();
    List<IContextParameter> contextParameterList=context.getContextParameterList();
    EList newContextTypeParamList=new BasicEList();
    if (contextParameterList != null) {
      for (int j=0; j < contextParameterList.size(); j++) {
        IContextParameter contextParam=contextParameterList.get(j);
        ContextParameterType contextParamType=findContextParameterType(contextTypeParamList,contextParam.getName());
        if (contextParamType == null) {
          contextParamType=TalendFileFactory.eINSTANCE.createContextParameterType();
          contextParamType.setName(contextParam.getName());
        }
        newContextTypeParamList.add(contextParamType);
        contextParamType.setPrompt(contextParam.getPrompt());
        contextParamType.setType(contextParam.getType());
        contextParamType.setRawValue(contextParam.getValue());
        contextParamType.setPromptNeeded(contextParam.isPromptNeeded());
        contextParamType.setComment(contextParam.getComment());
        if (!contextParam.isBuiltIn()) {
          Item item=ContextUtils.getRepositoryContextItemById(contextParam.getSource());
          if (item != null) {
            contextParamType.setRepositoryContextId(item.getProperty().getId());
          }
        }
      }
      contextTypeParamList.clear();
      contextTypeParamList.addAll(newContextTypeParamList);
    }
  }
  contextTypeList.clear();
  contextTypeList.addAll(newcontextTypeList);
}",0.4815650865312265
125856,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=contextManager.getListContext().size() != 0;
  if (formIsPerformed) {
    try {
      if (creation) {
        String nextId=factory.getNextId();
        contextProperty.setId(nextId);
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        final IPath path=contextWizardPage0.getDestinationPath();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.create(contextItem,path);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
 else {
        contextItem.getContext().clear();
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        if (contextManager instanceof JobContextManager) {
          JobContextManager manager=(JobContextManager)contextManager;
          if (manager.isModified()) {
            Map<String,String> contextGroupRenamedMap=new HashMap<String,String>();
            Map<IContext,String> renameGroupContextMap=manager.getRenameGroupContext();
            for (            IContext context : renameGroupContextMap.keySet()) {
              String oldContextGroupName=renameGroupContextMap.get(context);
              contextGroupRenamedMap.put(oldContextGroupName,context.getName());
            }
            RepositoryUpdateManager.updateContext((JobContextManager)contextManager,contextItem);
            if (!contextGroupRenamedMap.isEmpty()) {
              SwitchContextGroupNameImpl.getInstance().updateContextForConnectionItems(contextGroupRenamedMap,contextItem);
            }
          }
        }
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(contextItem);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
        updateRelatedView();
      }
      closeLockStrategy();
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
@Override public boolean performFinish(){
  boolean formIsPerformed=contextManager.getListContext().size() != 0;
  if (formIsPerformed) {
    try {
      if (creation) {
        String nextId=factory.getNextId();
        contextProperty.setId(nextId);
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        final IPath path=contextWizardPage0.getDestinationPath();
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.create(contextItem,path);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
      }
 else {
        contextManager.saveToEmf(contextItem.getContext());
        contextItem.setDefaultContext(contextManager.getDefaultContext().getName());
        if (contextManager instanceof JobContextManager) {
          JobContextManager manager=(JobContextManager)contextManager;
          if (manager.isModified()) {
            Map<String,String> contextGroupRenamedMap=new HashMap<String,String>();
            Map<IContext,String> renameGroupContextMap=manager.getRenameGroupContext();
            for (            IContext context : renameGroupContextMap.keySet()) {
              String oldContextGroupName=renameGroupContextMap.get(context);
              contextGroupRenamedMap.put(oldContextGroupName,context.getName());
            }
            RepositoryUpdateManager.updateContext((JobContextManager)contextManager,contextItem);
            if (!contextGroupRenamedMap.isEmpty()) {
              SwitchContextGroupNameImpl.getInstance().updateContextForConnectionItems(contextGroupRenamedMap,contextItem);
            }
          }
        }
        final IWorkspaceRunnable op=new IWorkspaceRunnable(){
          public void run(          IProgressMonitor monitor) throws CoreException {
            try {
              factory.save(contextItem);
            }
 catch (            PersistenceException e) {
              ExceptionHandler.process(e);
            }
          }
        }
;
        IRunnableWithProgress iRunnableWithProgress=new IRunnableWithProgress(){
          public void run(          IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
            IWorkspace workspace=ResourcesPlugin.getWorkspace();
            try {
              ISchedulingRule schedulingRule=workspace.getRoot();
              workspace.run(op,schedulingRule,IWorkspace.AVOID_UPDATE,monitor);
            }
 catch (            CoreException e) {
              throw new InvocationTargetException(e);
            }
          }
        }
;
        try {
          new ProgressMonitorDialog(null).run(true,true,iRunnableWithProgress);
        }
 catch (        InvocationTargetException e) {
          ExceptionHandler.process(e);
        }
catch (        InterruptedException e) {
        }
        updateRelatedView();
      }
      closeLockStrategy();
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.9954702329594478
125857,"/** 
 * DOC YeXiaowei Comment method ""addGeneralDbFieldsListeners"".
 */
private void addGeneralDbFieldsListeners(){
  generalJdbcClassNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcClassNameText.getText())) {
          getConnection().setDriverClass(generalJdbcClassNameText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcDriverjarText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcDriverjarText.getText())) {
          getConnection().setDriverJarPath(generalJdbcDriverjarText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUrlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUrlText.getText())) {
          getConnection().setURL(generalJdbcUrlText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (generalJdbcPasswordText.getText() != null) {
          getConnection().setRawPassword(generalJdbcPasswordText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUserText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUserText.getText())) {
          getConnection().setUsername(generalJdbcUserText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  jDBCschemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String text=jDBCschemaText.getText();
        schemaText.setText(text);
        if (validText(schemaText.getText())) {
          getConnection().setUiSchema(schemaText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  generalMappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalMappingFileText.getText())) {
          getConnection().setDbmsId(generalMappingFileText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  mappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(mappingFileText.getText())) {
          getConnection().setDbmsId(mappingFileText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  browseJarFilesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String value=generalJdbcDriverjarText.getText();
      if (value != null && value.length() > 0) {
        IPath path=Path.fromOSString(value);
        if (path.lastSegment() != null) {
          value=path.lastSegment();
        }
      }
      ModuleListDialog dialog=new ModuleListDialog(getShell(),value,null,true);
      if (dialog.open() == Window.OK) {
        if (dialog.getSelecteModuleArray() != null) {
          String[] moduleArray=dialog.getSelecteModuleArray();
          StringBuffer modeleList=new StringBuffer();
          for (int i=0; i < moduleArray.length; i++) {
            String module=moduleArray[i];
            modeleList.append(module);
            if (i < moduleArray.length - 1) {
              modeleList.append(""String_Node_Str"");
            }
          }
          generalJdbcDriverjarText.setText(modeleList.toString());
        }
 else         if (dialog.getSelecteModule() != null) {
          String selecteModule=dialog.getSelecteModule();
          generalJdbcDriverjarText.setText(selecteModule);
        }
      }
    }
  }
);
  browseClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      generalJdbcClassNameText.removeAll();
      for (      String jarName : generalJdbcDriverjarText.getText().trim().split(""String_Node_Str"")) {
        String stringToFile=getselecteModulePath(jarName);
        if (stringToFile == null) {
          stringToFile=jarName;
        }
        File file=new File(stringToFile);
        if (file != null) {
          try {
            MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
            Class[] classes=cl.getAssignableClasses(Driver.class);
            for (            Class classe : classes) {
              generalJdbcClassNameText.add(classe.getName());
            }
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
      if (generalJdbcClassNameText.getItemCount() > 0) {
        String driverClassName=generalJdbcClassNameText.getItem(0);
        generalJdbcClassNameText.setText(driverClassName);
      }
    }
  }
);
  generalMappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      generalMappingFileText.setText(dialog.getSelectId());
    }
  }
);
  mappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      mappingFileText.setText(dialog.getSelectId());
    }
  }
);
}","/** 
 * DOC YeXiaowei Comment method ""addGeneralDbFieldsListeners"".
 */
private void addGeneralDbFieldsListeners(){
  generalJdbcClassNameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcClassNameText.getText())) {
          getConnection().setDriverClass(generalJdbcClassNameText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcDriverjarText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcDriverjarText.getText())) {
          String jarPath=generalJdbcDriverjarText.getText();
          String[] jarNames=jarPath.split(""String_Node_Str"");
          StringBuffer buffer=new StringBuffer();
          for (int i=0; i < jarNames.length; i++) {
            if (i != 0) {
              buffer.append(""String_Node_Str"");
            }
            String path=jarNames[i];
            IPath ipath=Path.fromOSString(path);
            String lastSegment=ipath.lastSegment();
            buffer.append(lastSegment);
          }
          getConnection().setDriverJarPath(buffer.toString());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUrlText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUrlText.getText())) {
          getConnection().setURL(generalJdbcUrlText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcPasswordText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (generalJdbcPasswordText.getText() != null) {
          getConnection().setRawPassword(generalJdbcPasswordText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  generalJdbcUserText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalJdbcUserText.getText())) {
          getConnection().setUsername(generalJdbcUserText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  jDBCschemaText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String text=jDBCschemaText.getText();
        schemaText.setText(text);
        if (validText(schemaText.getText())) {
          getConnection().setUiSchema(schemaText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  generalMappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(generalMappingFileText.getText())) {
          getConnection().setDbmsId(generalMappingFileText.getText());
        }
        checkFieldsValue();
      }
    }
  }
);
  mappingFileText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (validText(mappingFileText.getText())) {
          getConnection().setDbmsId(mappingFileText.getText());
          checkFieldsValue();
        }
      }
    }
  }
);
  browseJarFilesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      String value=generalJdbcDriverjarText.getText();
      if (value != null && value.length() > 0) {
        IPath path=Path.fromOSString(value);
        if (path.lastSegment() != null) {
          value=path.lastSegment();
        }
      }
      ModuleListDialog dialog=new ModuleListDialog(getShell(),value,null,true);
      if (dialog.open() == Window.OK) {
        if (dialog.getSelecteModuleArray() != null) {
          String[] moduleArray=dialog.getSelecteModuleArray();
          StringBuffer modeleList=new StringBuffer();
          for (int i=0; i < moduleArray.length; i++) {
            String module=moduleArray[i];
            modeleList.append(module);
            if (i < moduleArray.length - 1) {
              modeleList.append(""String_Node_Str"");
            }
          }
          generalJdbcDriverjarText.setText(modeleList.toString());
        }
 else         if (dialog.getSelecteModule() != null) {
          String selecteModule=dialog.getSelecteModule();
          generalJdbcDriverjarText.setText(selecteModule);
        }
      }
    }
  }
);
  browseClassButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      generalJdbcClassNameText.removeAll();
      for (      String jarName : generalJdbcDriverjarText.getText().trim().split(""String_Node_Str"")) {
        String stringToFile=getselecteModulePath(jarName);
        if (stringToFile == null) {
          stringToFile=jarName;
        }
        File file=new File(stringToFile);
        if (file != null) {
          try {
            MyURLClassLoader cl=new MyURLClassLoader(file.toURL());
            Class[] classes=cl.getAssignableClasses(Driver.class);
            for (            Class classe : classes) {
              generalJdbcClassNameText.add(classe.getName());
            }
          }
 catch (          Exception ex) {
            ExceptionHandler.process(ex);
          }
        }
      }
      if (generalJdbcClassNameText.getItemCount() > 0) {
        String driverClassName=generalJdbcClassNameText.getItem(0);
        generalJdbcClassNameText.setText(driverClassName);
      }
    }
  }
);
  generalMappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      generalMappingFileText.setText(dialog.getSelectId());
    }
  }
);
  mappingSelectButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      MappingFileSelectDialog dialog=new MappingFileSelectDialog(getShell());
      dialog.open();
      mappingFileText.setText(dialog.getSelectId());
    }
  }
);
}",0.9549267971705871
125858,"public void copyTestCases(Item newItem,RepositoryNode sourceNode,boolean isDuplicate){
  if (!isAllowedToCopyTestCase(newItem,sourceNode)) {
    return;
  }
  final IPath path=getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode);
      for (      IRepositoryNode testNode : sourceNode.getChildren()) {
        Item testItem=testNode.getObject().getProperty().getItem();
        if (!(testItem instanceof ProcessItem)) {
          continue;
        }
        testContainerService.copyTestCase(newItem,testItem,path,null,false);
      }
    }
  }
}","public void copyTestCases(Item newItem,RepositoryNode sourceNode,boolean isDuplicate){
  if (!isAllowedToCopyTestCase(newItem,sourceNode)) {
    return;
  }
  final IPath path=getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      for (      IRepositoryNode testNode : sourceNode.getChildren()) {
        Item testItem=testNode.getObject().getProperty().getItem();
        if (!(testItem instanceof ProcessItem)) {
          continue;
        }
        testContainerService.copyTestCase(newItem,testItem,path,null,false);
      }
    }
  }
}",0.9955849889624724
125859,"private void duplicateTestCases(Item newItem,final CopyObjectAction copyObjectAction){
  if (!copyObjectAction.isAllowedToCopyTestCase(newItem,sourceNode) || !isAllowDuplicateTest) {
    return;
  }
  final IPath path=copyObjectAction.getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode);
      for (      IRepositoryNode testNode : this.sourceNode.getChildren()) {
        Item testItem=testNode.getObject().getProperty().getItem();
        if (!(testItem instanceof ProcessItem)) {
          continue;
        }
        String initNameValue=""String_Node_Str"" + testItem.getProperty().getDisplayName();
        String jobNameValue=null;
        final TreeSelection selectionInClipboard=(TreeSelection)selection;
        ERepositoryObjectType type=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getRepositoryObjectType();
        try {
          jobNameValue=getDuplicateName((RepositoryNode)testNode,initNameValue,type,selectionInClipboard);
        }
 catch (        BusinessException e) {
          jobNameValue=""String_Node_Str"";
        }
        testContainerService.copyTestCase(newItem,testItem,path,jobNameValue,true);
      }
    }
  }
}","private void duplicateTestCases(Item newItem,final CopyObjectAction copyObjectAction){
  if (!copyObjectAction.isAllowedToCopyTestCase(newItem,sourceNode) || !isAllowDuplicateTest) {
    return;
  }
  final IPath path=copyObjectAction.getTestCasePath(newItem,sourceNode);
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITestContainerProviderService.class)) {
    ITestContainerProviderService testContainerService=(ITestContainerProviderService)GlobalServiceRegister.getDefault().getService(ITestContainerProviderService.class);
    if (testContainerService != null) {
      testContainerService.copyDataFiles(newItem,sourceNode.getId());
      for (      IRepositoryNode testNode : this.sourceNode.getChildren()) {
        Item testItem=testNode.getObject().getProperty().getItem();
        if (!(testItem instanceof ProcessItem)) {
          continue;
        }
        String initNameValue=""String_Node_Str"" + testItem.getProperty().getDisplayName();
        String jobNameValue=null;
        final TreeSelection selectionInClipboard=(TreeSelection)selection;
        ERepositoryObjectType type=((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getRepositoryObjectType();
        try {
          jobNameValue=getDuplicateName((RepositoryNode)testNode,initNameValue,type,selectionInClipboard);
        }
 catch (        BusinessException e) {
          jobNameValue=""String_Node_Str"";
        }
        testContainerService.copyTestCase(newItem,testItem,path,jobNameValue,true);
      }
    }
  }
}",0.9973753280839897
125860,"public void copyDataFiles(Item newItem,RepositoryNode sourceNode);","public void copyDataFiles(Item newItem,String sourceNodeid);",0.8412698412698413
125861,"@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  if (object != null && object.getProperty() != null && object.getProperty().getItem() != null && object.getProperty().getItem() instanceof ProcessItem && PluginChecker.isTIS() && mainPage.jobTypeCCombo != null) {
    Item item=object.getProperty().getItem();
    Object frameworkObj=ConvertJobsUtil.getFramework(item);
    String sourceFramework=null;
    if (frameworkObj != null) {
      sourceFramework=frameworkObj.toString();
    }
    String sourceJobType=ConvertJobsUtil.getJobTypeFromFramework(object.getProperty().getItem());
    boolean isNeedConvert=ConvertJobsUtil.isNeedConvert(item,mainPage.jobTypeCCombo.getText(),mainPage.framework.getText(),true);
    if (sourceJobType != null && !isNeedConvert) {
      return super.performFinish();
    }
    boolean hasTestCase=ConvertJobsUtil.hasTestCase(object.getProperty());
    if (hasTestCase && !MessageDialogWithToggle.openConfirm(null,""String_Node_Str"",""String_Node_Str"")) {
      return super.performFinish();
    }
    boolean convert=true;
    try {
      ConvertJobsUtil.convert(object.getLabel(),mainPage.jobTypeCCombo.getText(),mainPage.framework.getText(),object);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e.getCause());
      convert=false;
    }
    return convert;
  }
 else {
    return super.performFinish();
  }
}","@Override public boolean performFinish(){
  if (alreadyEditedByUser) {
    return false;
  }
  if (object != null && object.getProperty() != null && object.getProperty().getItem() != null && object.getProperty().getItem() instanceof ProcessItem && PluginChecker.isTIS() && mainPage.jobTypeCCombo != null) {
    Item item=object.getProperty().getItem();
    Object frameworkObj=ConvertJobsUtil.getFramework(item);
    String sourceFramework=null;
    if (frameworkObj != null) {
      sourceFramework=frameworkObj.toString();
    }
    String sourceJobType=ConvertJobsUtil.getJobTypeFromFramework(object.getProperty().getItem());
    boolean isNeedConvert=ConvertJobsUtil.isNeedConvert(item,mainPage.jobTypeCCombo.getText(),mainPage.framework.getText(),true);
    if (sourceJobType != null && !isNeedConvert) {
      return super.performFinish();
    }
    boolean convert=true;
    try {
      ConvertJobsUtil.convert(object.getLabel(),mainPage.jobTypeCCombo.getText(),mainPage.framework.getText(),object);
    }
 catch (    Exception e) {
      MessageBoxExceptionHandler.process(e.getCause());
      convert=false;
    }
    return convert;
  }
 else {
    return super.performFinish();
  }
}",0.9149425287356322
125862,"/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  BaseFieldTypeBuilder<Schema> ftb=in.isNullable() ? fb.type().nullable() : fb.type();
  Object defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  Schema type=null;
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    type=AvroTypes._long();
    defaultValue=defaultValue == null ? null : Long.parseLong(defaultValue.toString());
  }
 else   if (JavaTypesManager.INTEGER.getId().equals(tt)) {
    type=AvroTypes._int();
    defaultValue=defaultValue == null ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.SHORT.getId().equals(tt)) {
    type=AvroTypes._short();
    defaultValue=defaultValue == null ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE.getId().equals(tt)) {
    type=AvroTypes._byte();
    defaultValue=defaultValue == null ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    type=AvroTypes._double();
    defaultValue=defaultValue == null ? null : Double.parseDouble(defaultValue.toString());
  }
 else   if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    type=AvroTypes._float();
    defaultValue=defaultValue == null ? null : Float.parseFloat(defaultValue.toString());
  }
 else   if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    type=AvroTypes._decimal();
  }
 else   if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    type=AvroTypes._boolean();
    defaultValue=defaultValue == null ? null : Boolean.parseBoolean(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    type=AvroTypes._bytes();
  }
 else   if (JavaTypesManager.DATE.getId().equals(tt)) {
    type=AvroTypes._date();
  }
 else   if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    type=AvroTypes._string();
  }
  if (JavaTypesManager.OBJECT.getId().equals(tt)) {
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
  }
  if (type == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + tt);
  }
  type=in.isNullable() ? AvroUtils.wrapAsNullable(type) : type;
  return defaultValue == null ? fb.type(type).noDefault() : fb.type(type).withDefault(defaultValue);
}","/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  BaseFieldTypeBuilder<Schema> ftb=in.isNullable() ? fb.type().nullable() : fb.type();
  Object defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  Schema type=null;
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    type=AvroTypes._long();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Long.parseLong(defaultValue.toString());
  }
 else   if (JavaTypesManager.INTEGER.getId().equals(tt)) {
    type=AvroTypes._int();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.SHORT.getId().equals(tt)) {
    type=AvroTypes._short();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE.getId().equals(tt)) {
    type=AvroTypes._byte();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Integer.parseInt(defaultValue.toString());
  }
 else   if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    type=AvroTypes._double();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Double.parseDouble(defaultValue.toString());
  }
 else   if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    type=AvroTypes._float();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Float.parseFloat(defaultValue.toString());
  }
 else   if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    type=AvroTypes._decimal();
  }
 else   if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    type=AvroTypes._boolean();
    defaultValue=StringUtils.isEmpty((String)defaultValue) ? null : Boolean.parseBoolean(defaultValue.toString());
  }
 else   if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    type=AvroTypes._bytes();
  }
 else   if (JavaTypesManager.DATE.getId().equals(tt)) {
    type=AvroTypes._date();
  }
 else   if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    type=AvroTypes._string();
  }
  if (JavaTypesManager.OBJECT.getId().equals(tt)) {
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
  }
  if (type == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + tt);
  }
  type=in.isNullable() ? AvroUtils.wrapAsNullable(type) : type;
  return defaultValue == null ? fb.type(type).noDefault() : fb.type(type).withDefault(defaultValue);
}",0.95571892631219
125863,"/** 
 * return true/false of   {@link HiveComponent#doSupportSecurity}. also, when hive service or embedded
 */
public static boolean doSupportSecurity(String hiveDistribution,String hiveVersion,String hiveMode,String hiveServerVersion,boolean byDisplay){
  HiveModeInfo hiveModeInfo=byDisplay ? HiveModeInfo.getByDisplay(hiveMode) : HiveModeInfo.get(hiveMode);
  HiveServerVersionInfo hiveServerVersionInfo=byDisplay ? HiveServerVersionInfo.getByDisplay(hiveServerVersion) : HiveServerVersionInfo.valueOf(hiveServerVersion);
  boolean supportSecurity=doSupportMethod(hiveDistribution,hiveVersion,byDisplay,""String_Node_Str"");
  if (supportSecurity && (HiveServerVersionInfo.HIVE_SERVER_2 == hiveServerVersionInfo || hiveModeInfo == HiveModeInfo.EMBEDDED)) {
    return true;
  }
  return false;
}","/** 
 * return true/false of   {@link HiveComponent#doSupportSecurity}. also, when hive service or embedded
 */
public static boolean doSupportSecurity(String hiveDistribution,String hiveVersion,String hiveMode,String hiveServerVersion,boolean byDisplay){
  HiveModeInfo hiveModeInfo=byDisplay ? HiveModeInfo.getByDisplay(hiveMode) : HiveModeInfo.get(hiveMode);
  HiveServerVersionInfo hiveServerVersionInfo=byDisplay ? HiveServerVersionInfo.getByDisplay(hiveServerVersion) : HiveServerVersionInfo.getByKey(hiveServerVersion);
  boolean supportSecurity=doSupportMethod(hiveDistribution,hiveVersion,byDisplay,""String_Node_Str"");
  if (supportSecurity && (HiveServerVersionInfo.HIVE_SERVER_2 == hiveServerVersionInfo || hiveModeInfo == HiveModeInfo.EMBEDDED)) {
    return true;
  }
  return false;
}",0.9905956112852664
125864,"private boolean doSupportTez(){
  if (isHiveDBConnSelected()) {
    HiveMetadataHelper.doSupportTez(hiveDistributionCombo.getText(),hiveVersionCombo.getText(),true);
  }
  return false;
}","private boolean doSupportTez(){
  if (isHiveDBConnSelected()) {
    return HiveMetadataHelper.doSupportTez(hiveDistributionCombo.getText(),hiveVersionCombo.getText(),true);
  }
  return false;
}",0.9816272965879264
125865,"/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataToolHelper#copyTable(org.talend.core.model.metadata.IMetadataTable source,org.talend.core.model.metadata.IMetadataTable target)}
 */
@Test public void testCopyMetadataTable(){
  IMetadataTable source=new org.talend.core.model.metadata.MetadataTable();
  IMetadataTable target=new org.talend.core.model.metadata.MetadataTable();
  source.getAdditionalProperties().put(SAPBWTableHelper.SAP_INFOOBJECT_INNER_TYPE,SAPBWTableHelper.IO_INNERTYPE_HIERARCHY);
  MetadataToolHelper.copyTable(source,target);
  String innerType=target.getAdditionalProperties().get(SAPBWTableHelper.SAP_INFOOBJECT_INNER_TYPE);
  assertEquals(SAPBWTableHelper.IO_INNERTYPE_HIERARCHY,innerType);
}","/** 
 * Test method for  {@link org.talend.core.model.metadata.MetadataToolHelper#copyTable(org.talend.core.model.metadata.IMetadataTable source,org.talend.core.model.metadata.IMetadataTable target)}
 */
@Test public void testCopyMetadataTable(){
  IMetadataTable source=new org.talend.core.model.metadata.MetadataTable();
  IMetadataTable target=new org.talend.core.model.metadata.MetadataTable();
  source.getAdditionalProperties().put(SAPBWTableHelper.SAP_INFOOBJECT_INNER_TYPE,SAPBWTableHelper.IO_INNERTYPE_HIERARCHY);
  target.getAdditionalProperties().put(SAPBWTableHelper.SAP_INFOOBJECT_INNER_TYPE,SAPBWTableHelper.IO_INNERTYPE_ATTRIBUTE);
  target.getAdditionalProperties().put(""String_Node_Str"",""String_Node_Str"");
  MetadataToolHelper.copyTable(source,target);
  String innerType=target.getAdditionalProperties().get(SAPBWTableHelper.SAP_INFOOBJECT_INNER_TYPE);
  String test=target.getAdditionalProperties().get(""String_Node_Str"");
  assertEquals(SAPBWTableHelper.IO_INNERTYPE_HIERARCHY,innerType);
  assertEquals(test,""String_Node_Str"");
}",0.7162011173184357
125866,"@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    if (!(object instanceof MetadataTableRepositoryObject)) {
      object.getProperty();
    }
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      object.getProperty();
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}","@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    if (!(object instanceof MetadataTableRepositoryObject)) {
      object.getProperty();
    }
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (object instanceof MetadataTableRepositoryObject) {
        MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
        if (table instanceof SAPBWTable) {
          SAPBWTable bwTable=(SAPBWTable)table;
          if (SAPBWTableHelper.TYPE_INFOOBJECT.equals(bwTable.getModelType())) {
            String innerType=bwTable.getInnerIOType();
            if (innerType != null && !innerType.equals(SAPBWTableHelper.IO_INNERTYPE_BASIC)) {
              label=label + ""String_Node_Str"" + innerType+ ""String_Node_Str"";
            }
          }
        }
      }
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      object.getProperty();
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}",0.9093444909344492
125867,"/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().toUpperCase().contains(""String_Node_Str"") || elemparameter.getFieldType() == EParameterFieldType.PASSWORD) {
        value=ParameterValueUtil.getValue4Doc(elemparameter).toString();
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}","/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=null;
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      if (elemparameter.getFieldType() == EParameterFieldType.LABEL) {
        continue;
      }
      if (elemparameter.getChildParameters() != null && !elemparameter.getChildParameters().isEmpty()) {
        copyElementParameterList=new ArrayList<IElementParameter>(elemparameter.getChildParameters().values());
      }
      Object eleObj=elemparameter.getValue();
      IElementParameter param=null;
      String name=""String_Node_Str"";
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getFieldType() == EParameterFieldType.PROPERTY_TYPE) {
        param=getElementParameter(elemparameter,EParameterFieldType.PROPERTY_TYPE);
        if (param != null) {
          name=param.getDisplayName();
          value=param.getValue().toString();
        }
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getFieldType() == EParameterFieldType.SCHEMA_TYPE) {
        param=getElementParameter(elemparameter,EParameterFieldType.SCHEMA_TYPE);
        if (param != null) {
          name=param.getDisplayName();
          value=param.getValue().toString();
        }
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getFieldType() == EParameterFieldType.QUERYSTORE_TYPE) {
        param=getElementParameter(elemparameter,EParameterFieldType.QUERYSTORE_TYPE);
        if (param != null) {
          name=param.getDisplayName();
          value=param.getValue().toString();
        }
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().toUpperCase().contains(""String_Node_Str"") || elemparameter.getFieldType() == EParameterFieldType.PASSWORD) {
        name=elemparameter.getDisplayName();
        value=ParameterValueUtil.getValue4Doc(elemparameter).toString();
      }
 else {
        name=elemparameter.getDisplayName();
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(name));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}",0.7857251791978038
125868,"private boolean isSAPBWTable(RepositoryNode theNode){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)theNode.getProperties(EProperties.CONTENT_TYPE);
  if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
    RepositoryNode node=theNode.getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  }
 else   if (nodeType == ERepositoryObjectType.METADATA_CON_COLUMN) {
    RepositoryNode node=theNode.getParent().getParent().getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  }
  if (ERepositoryObjectType.METADATA_SAP_BW_DATASOURCE != null) {
    if (nodeType == ERepositoryObjectType.METADATA_SAP_BW_DATASOURCE || nodeType == ERepositoryObjectType.METADATA_SAP_BW_DATASTOREOBJECT || nodeType == ERepositoryObjectType.METADATA_SAP_BW_INFOCUBE || nodeType == ERepositoryObjectType.METADATA_SAP_BW_INFOOBJECT) {
      return true;
    }
  }
  return false;
}","private boolean isSAPBWTable(RepositoryNode theNode,ITreeContextualAction action){
  ERepositoryObjectType nodeType=(ERepositoryObjectType)theNode.getProperties(EProperties.CONTENT_TYPE);
  RepositoryNode node=null;
  if (nodeType == ERepositoryObjectType.METADATA_CON_TABLE) {
    node=theNode.getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  }
 else   if (nodeType == ERepositoryObjectType.METADATA_CON_COLUMN) {
    node=theNode.getParent().getParent().getParent();
    nodeType=(ERepositoryObjectType)node.getProperties(EProperties.CONTENT_TYPE);
  }
  IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
  boolean readOnly=false;
  if (factory.isUserReadOnlyOnCurrentProject() || !ProjectManager.getInstance().isInCurrentMainProject(node)) {
    readOnly=true;
  }
  if ((action.isEditAction() && readOnly) || (action.isReadAction() && !readOnly)) {
    return false;
  }
  if (ERepositoryObjectType.METADATA_SAP_BW_DATASOURCE != null) {
    if (nodeType == ERepositoryObjectType.METADATA_SAP_BW_DATASOURCE || nodeType == ERepositoryObjectType.METADATA_SAP_BW_DATASTOREOBJECT || nodeType == ERepositoryObjectType.METADATA_SAP_BW_INFOCUBE || nodeType == ERepositoryObjectType.METADATA_SAP_BW_INFOOBJECT) {
      return true;
    }
  }
  return false;
}",0.8124725516029864
125869,"private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPTableImpl.class)) {
        return current;
      }
      if (isSAPBWTable(obj) && current.getClassForDoubleClick().equals(SAPBWTableImpl.class)) {
        return current;
      }
      if (isSAPBapiTable(obj) && current.getClassForDoubleClick().equals(MetadataTableImpl.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}","private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPTableImpl.class)) {
        return current;
      }
      if (isSAPBWTable(obj,current) && current.getClassForDoubleClick().equals(SAPBWTableImpl.class)) {
        return current;
      }
      if (isSAPBapiTable(obj) && current.getClassForDoubleClick().equals(MetadataTableImpl.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}",0.9988681380871534
125870,"@Override public String getText(Object element){
  String text=""String_Node_Str"";
  if (element instanceof RepositoryNode) {
    IRepositoryViewObject object=((RepositoryNode)element).getObject();
    if (object instanceof MetadataTableRepositoryObject) {
      MetadataTable table=((MetadataTableRepositoryObject)object).getTable();
      if (table instanceof SAPBWTable) {
        SAPBWTable bwTable=(SAPBWTable)table;
        if (SAPBWTableHelper.TYPE_INFOOBJECT.equals(bwTable.getModelType())) {
          String innerType=bwTable.getInnerIOType();
          if (innerType != null && !innerType.equals(SAPBWTableHelper.IO_INNERTYPE_BASIC)) {
            text=bwTable.getLabel() + ""String_Node_Str"" + innerType+ ""String_Node_Str"";
          }
        }
 else {
          text=repoLabelProv.getText(element);
        }
      }
 else {
        text=repoLabelProv.getText(element);
      }
    }
 else {
      text=repoLabelProv.getText(element);
    }
  }
  return text;
}","@Override public String getText(Object element){
  if (element instanceof RepositoryNode) {
    return repoLabelProv.getText(element);
  }
 else {
    return ""String_Node_Str"";
  }
}",0.2787878787878788
125871,"public String getMavenUriSnapshot(){
  MavenArtifact artifact=null;
  if (getMavenUri() != null) {
    if (getMavenUri().split(MavenUrlHelper.SEPERATOR).length < 4 && getModuleName().lastIndexOf(""String_Node_Str"") != -1) {
      String extension=getModuleName().substring(getModuleName().lastIndexOf(""String_Node_Str"") + 1,getModuleName().length());
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri() + ""String_Node_Str"" + extension);
    }
 else {
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
    }
  }
  if (artifact != null && !MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId())) {
    return getMavenUri();
  }
  if (StringUtils.isEmpty(mavenUriSnapshot) && artifact != null) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion() + ""String_Node_Str"",artifact.getType(),artifact.getClassifier());
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
    if (mvnUrisFromIndex != null) {
      final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
      String maxVerstion=null;
      for (      String mvnUri : split) {
        if (maxVerstion == null) {
          maxVerstion=mvnUri;
        }
 else {
          MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
          MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
          if (lastArtifact != null && currentArtifact != null) {
            String lastV=lastArtifact.getVersion();
            lastV=lastV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            String currentV=currentArtifact.getVersion();
            currentV=currentV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            if (!lastV.equals(currentV)) {
              Version lastVersion=new Version(lastV);
              Version currentVersion=new Version(currentV);
              if (currentVersion.compareTo(lastVersion) > 0) {
                maxVerstion=mvnUri;
              }
            }
          }
        }
      }
      mavenUriSnapshot=maxVerstion;
    }
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName());
  }
  return mavenUriSnapshot;
}","public String getMavenUriSnapshot(){
  MavenArtifact artifact=null;
  if (getMavenUri() != null) {
    if (getMavenUri().split(MavenUrlHelper.SEPERATOR).length < 4 && getModuleName().lastIndexOf(""String_Node_Str"") != -1) {
      String extension=getModuleName().substring(getModuleName().lastIndexOf(""String_Node_Str"") + 1,getModuleName().length());
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
      artifact.setType(extension);
    }
 else {
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
    }
  }
  if (artifact != null && !MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId())) {
    return getMavenUri();
  }
  if (StringUtils.isEmpty(mavenUriSnapshot) && artifact != null) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion() + ""String_Node_Str"",artifact.getType(),artifact.getClassifier());
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
    if (mvnUrisFromIndex != null) {
      final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
      String maxVerstion=null;
      for (      String mvnUri : split) {
        if (maxVerstion == null) {
          maxVerstion=mvnUri;
        }
 else {
          MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
          MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
          if (lastArtifact != null && currentArtifact != null) {
            String lastV=lastArtifact.getVersion();
            lastV=lastV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            String currentV=currentArtifact.getVersion();
            currentV=currentV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            if (!lastV.equals(currentV)) {
              Version lastVersion=new Version(lastV);
              Version currentVersion=new Version(currentV);
              if (currentVersion.compareTo(lastVersion) > 0) {
                maxVerstion=mvnUri;
              }
            }
          }
        }
      }
      mavenUriSnapshot=maxVerstion;
    }
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName());
  }
  return mavenUriSnapshot;
}",0.9900749442981568
125872,"/** 
 * <pre> Updates the parameter of Hive mode in connection. Put the following parameters in <code>DatabaseConnection</code> . <li>Hive distribution, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_DISTRIBUTION}</li> <li>Distro version, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_VERSION}</li> <li>Hive mode, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_MODE}</li> <li>Name node URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_NAME_NODE_URL}</li> <li>Job Tracker URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_JOB_TRACKER_URL}</li> <li>Hive Server version, the key is   {@link ConnParameterKeys#HIVE_SERVER_VERSION}</li>
 */
protected void doUpdateConnection(){
  if (!isContextMode()) {
    IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
    HiveModeInfo hiveMode=HiveModeInfo.getByDisplay(hiveModeCombo.getText());
    HiveServerVersionInfo serverVersion=HiveServerVersionInfo.getByDisplay(hiveServerVersionCombo.getText());
    DatabaseConnection conn=getConnection();
    if (hiveMode != null) {
      conn.setDbVersionString(hiveMode.getName());
    }
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE,EDatabaseConnTemplate.HIVE.getDBTypeName());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hiveDistribution.getName());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hiveVersion.getVersion());
    if (hiveMode != null) {
      conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveMode.getName());
    }
    if (serverVersion != null) {
      conn.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,serverVersion.getKey());
    }
  }
}","/** 
 * <pre> Updates the parameter of Hive mode in connection. Put the following parameters in <code>DatabaseConnection</code> . <li>Hive distribution, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_DISTRIBUTION}</li> <li>Distro version, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_VERSION}</li> <li>Hive mode, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_HIVE_MODE}</li> <li>Name node URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_NAME_NODE_URL}</li> <li>Job Tracker URL, the key is   {@link ConnParameterKeys#CONN_PARA_KEY_JOB_TRACKER_URL}</li> <li>Hive Server version, the key is   {@link ConnParameterKeys#HIVE_SERVER_VERSION}</li>
 */
protected void doUpdateConnection(){
  if (!isContextMode()) {
    IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
    if (hiveDistribution == null) {
      return;
    }
    IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
    HiveModeInfo hiveMode=HiveModeInfo.getByDisplay(hiveModeCombo.getText());
    HiveServerVersionInfo serverVersion=HiveServerVersionInfo.getByDisplay(hiveServerVersionCombo.getText());
    DatabaseConnection conn=getConnection();
    if (hiveMode != null) {
      conn.setDbVersionString(hiveMode.getName());
    }
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_DB_TYPE,EDatabaseConnTemplate.HIVE.getDBTypeName());
    conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION,hiveDistribution.getName());
    if (hiveVersion != null) {
      conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION,hiveVersion.getVersion());
    }
    if (hiveMode != null) {
      conn.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveMode.getName());
    }
    if (serverVersion != null) {
      conn.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,serverVersion.getKey());
    }
  }
}",0.9185145605129575
125873,"public static List<ERepositoryObjectType> getAllTypesOfProcess(){
  List<ERepositoryObjectType> allTypes=new ArrayList<ERepositoryObjectType>();
  if (ERepositoryObjectType.PROCESS != null) {
    allTypes.add(ERepositoryObjectType.PROCESS);
  }
  if (ERepositoryObjectType.PROCESS_MR != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_MR);
  }
  if (ERepositoryObjectType.PROCESS_STORM != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_STORM);
  }
  if (ERepositoryObjectType.PROCESS_SPARK != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_SPARK);
  }
  if (ERepositoryObjectType.PROCESS_SPARKSTREAMING != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_SPARKSTREAMING);
  }
  if (ERepositoryObjectType.PROCESS_ROUTE != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_ROUTE);
  }
  if (ERepositoryObjectType.PROCESS_ROUTELET != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_ROUTELET);
  }
  if (ERepositoryObjectType.TEST_CONTAINER != null) {
    allTypes.add(ERepositoryObjectType.TEST_CONTAINER);
  }
  return allTypes;
}","public static List<ERepositoryObjectType> getAllTypesOfProcess(){
  List<ERepositoryObjectType> allTypes=new ArrayList<ERepositoryObjectType>();
  if (ERepositoryObjectType.PROCESS != null) {
    allTypes.add(ERepositoryObjectType.PROCESS);
  }
  if (ERepositoryObjectType.PROCESS_MR != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_MR);
  }
  if (ERepositoryObjectType.PROCESS_STORM != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_STORM);
  }
  if (ERepositoryObjectType.PROCESS_SPARK != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_SPARK);
  }
  if (ERepositoryObjectType.PROCESS_SPARKSTREAMING != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_SPARKSTREAMING);
  }
  if (ERepositoryObjectType.PROCESS_ROUTE != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_ROUTE);
  }
  if (ERepositoryObjectType.PROCESS_ROUTELET != null) {
    allTypes.add(ERepositoryObjectType.PROCESS_ROUTELET);
  }
  return allTypes;
}",0.9298418972332017
125874,"private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IRepositoryView view=RepositoryManager.getRepositoryView();
        if (view != null) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
      }
 else       if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (tdqRepositoryService != null) {
            tdqRepositoryService.refresh();
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
  PlatformUI.getWorkbench().addWorkbenchListener(new IWorkbenchListener(){
    @Override public boolean preShutdown(    IWorkbench workbench,    boolean forced){
      TokenCollectorFactory.getFactory().process();
      return true;
    }
    @Override public void postShutdown(    IWorkbench workbench){
    }
  }
);
}","private void regisitPerspectiveListener(){
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new PerspectiveAdapter(){
    @Override public void perspectiveActivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IRepositoryView view=RepositoryManager.getRepositoryView();
        if (view != null) {
          view.refresh();
          TalendPaletteHelper.checkAndInitToolBar();
        }
      }
 else       if (IBrandingConfiguration.PERSPECTIVE_DQ_ID.equals(pId)) {
        if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
          ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
          if (tdqRepositoryService != null) {
            tdqRepositoryService.refresh();
          }
        }
      }
    }
    @Override public void perspectiveDeactivated(    IWorkbenchPage page,    IPerspectiveDescriptor perspective){
      String pId=perspective.getId();
      if (IBrandingConfiguration.PERSPECTIVE_DI_ID.equals(pId)) {
        IComponentSettingsView viewer=(IComponentSettingsView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(IComponentSettingsView.ID);
        if (viewer != null) {
          viewer.cleanDisplay();
        }
      }
    }
  }
);
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(new CheatSheetPerspectiveAdapter());
  PlatformUI.getWorkbench().addWorkbenchListener(new IWorkbenchListener(){
    @Override public boolean preShutdown(    IWorkbench workbench,    boolean forced){
      TokenCollectorFactory.getFactory().process();
      ProxyRepositoryFactory.getInstance().logOffProject();
      return true;
    }
    @Override public void postShutdown(    IWorkbench workbench){
    }
  }
);
}",0.9846074910210364
125875,"@Override public boolean preShutdown(IWorkbench workbench,boolean forced){
  TokenCollectorFactory.getFactory().process();
  return true;
}","@Override public boolean preShutdown(IWorkbench workbench,boolean forced){
  TokenCollectorFactory.getFactory().process();
  ProxyRepositoryFactory.getInstance().logOffProject();
  return true;
}",0.8323353293413174
125876,"@Override public void run(){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    boolean closeAllEditors=activePage.closeAllEditors(true);
    if (!closeAllEditors) {
      return;
    }
  }
  ProxyRepositoryFactory.getInstance().logOffProject();
  IWorkbenchWindow workbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (workbenchWindow.getActivePage() != null && GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class) && CorePlugin.getDefault().getDiagramModelService().isBusinessDiagramEditor(workbenchWindow.getActivePage().getActiveEditor())) {
    IViewReference repoViewRef=RepositoryManagerHelper.findRepositoryViewRef();
    if (repoViewRef != null) {
      repoViewRef.getView(false).setFocus();
    }
  }
  LoginHelper.forceShowLogonDialogNextTime();
  PlatformUI.getWorkbench().restart();
}","@Override public void run(){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null) {
    boolean closeAllEditors=activePage.closeAllEditors(true);
    if (!closeAllEditors) {
      return;
    }
  }
  IWorkbenchWindow workbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
  if (workbenchWindow.getActivePage() != null && GlobalServiceRegister.getDefault().isServiceRegistered(IDiagramModelService.class) && CorePlugin.getDefault().getDiagramModelService().isBusinessDiagramEditor(workbenchWindow.getActivePage().getActiveEditor())) {
    IViewReference repoViewRef=RepositoryManagerHelper.findRepositoryViewRef();
    if (repoViewRef != null) {
      repoViewRef.getView(false).setFocus();
    }
  }
  LoginHelper.forceShowLogonDialogNextTime();
  PlatformUI.getWorkbench().restart();
}",0.9688888888888888
125877,"@Test public void testGenerateComponentInfo() throws Exception {
  ProcessItem processItem=null;
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  File srcFile=new File(""String_Node_Str"");
  FileResourcesUnityManager fileUnityManager=ResourcesManagerFactory.getInstance().createFileUnityManager(srcFile);
  ResourcesManager resManager=fileUnityManager.doUnify();
  List<ImportItem> projectRecords=importManager.populateImportingItems(resManager,true,new NullProgressMonitor());
  assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),resManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
  IRepositoryViewObject obj=ProxyRepositoryFactory.getInstance().getLastVersion(""String_Node_Str"");
  Item item=obj.getProperty().getItem();
  assertTrue(item instanceof ProcessItem);
  processItem=(ProcessItem)item;
  processItem.getProcess().getNode();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    List<Map> map=service.getMaps();
    IProcess process=service.getProcessFromProcessItem(processItem);
    Document dom=new DOMDocument();
    Element element=dom.addElement(""String_Node_Str"");
    List allComponentsList=process.getGraphicalNodes();
    InternalNodeComponentHandler handler=new InternalNodeComponentHandler(new HashMap<String,String>(),element,allComponentsList,new HashMap<String,List>(),new HashMap<String,List>(),service,map.get(0),map.get(1),new HashMap<String,Object>());
    handler.generateComponentInfo();
    Element component=(Element)element.content().get(0);
    for (int i=0; i < component.content().size(); i++) {
      Element params=(Element)component.content().get(i);
      if (params.getName().equals(""String_Node_Str"")) {
        List paramList=params.content();
        for (int j=0; j < paramList.size(); j++) {
          Element param=(Element)paramList.get(j);
          String name=param.attributeValue(""String_Node_Str"");
          String value=param.attributeValue(""String_Node_Str"");
          assertFalse(name.startsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str""));
          if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
            assertTrue(value.equals(""String_Node_Str""));
          }
        }
      }
    }
  }
}","@Test public void testGenerateComponentInfo() throws Exception {
  ProcessItem processItem=null;
  URL testJobURL=FileLocator.find(Platform.getBundle(""String_Node_Str""),new Path(""String_Node_Str""),null);
  if (testJobURL != null) {
    testJobURL=FileLocator.toFileURL(testJobURL);
  }
  File srcFile=new File(testJobURL.getFile());
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  FileResourcesUnityManager fileUnityManager=ResourcesManagerFactory.getInstance().createFileUnityManager(srcFile);
  ResourcesManager resManager=fileUnityManager.doUnify();
  List<ImportItem> projectRecords=importManager.populateImportingItems(resManager,true,new NullProgressMonitor());
  assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),resManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
  IRepositoryViewObject obj=ProxyRepositoryFactory.getInstance().getLastVersion(""String_Node_Str"");
  Item item=obj.getProperty().getItem();
  assertTrue(item instanceof ProcessItem);
  processItem=(ProcessItem)item;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    List<Map> map=service.getMaps();
    IProcess process=service.getProcessFromProcessItem(processItem);
    Document dom=new DOMDocument();
    Element element=dom.addElement(""String_Node_Str"");
    List allComponentsList=process.getGraphicalNodes();
    InternalNodeComponentHandler handler=new InternalNodeComponentHandler(new HashMap<String,String>(),element,allComponentsList,new HashMap<String,List>(),new HashMap<String,List>(),service,map.get(0),map.get(1),new HashMap<String,Object>());
    handler.generateComponentInfo();
    Element component=(Element)element.content().get(0);
    for (int i=0; i < component.content().size(); i++) {
      Element params=(Element)component.content().get(i);
      if (params.getName().equals(""String_Node_Str"")) {
        List paramList=params.content();
        for (int j=0; j < paramList.size(); j++) {
          Element param=(Element)paramList.get(j);
          String name=param.attributeValue(""String_Node_Str"");
          String value=param.attributeValue(""String_Node_Str"");
          assertFalse(name.startsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str""));
          if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
            assertTrue(value.equals(""String_Node_Str""));
          }
        }
      }
    }
  }
}",0.9376715013720108
125878,"@Test public void testGenerateComponentInfo() throws Exception {
  ProcessItem processItem=null;
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  File srcFile=new File(""String_Node_Str"");
  FileResourcesUnityManager fileUnityManager=ResourcesManagerFactory.getInstance().createFileUnityManager(srcFile);
  ResourcesManager resManager=fileUnityManager.doUnify();
  List<ImportItem> projectRecords=importManager.populateImportingItems(resManager,true,new NullProgressMonitor());
  assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),resManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
  IRepositoryViewObject obj=ProxyRepositoryFactory.getInstance().getLastVersion(""String_Node_Str"");
  Item item=obj.getProperty().getItem();
  assertTrue(item instanceof ProcessItem);
  processItem=(ProcessItem)item;
  processItem.getProcess().getNode();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    List<Map> map=service.getMaps();
    IProcess process=service.getProcessFromProcessItem(processItem);
    Document dom=new DOMDocument();
    Element element=dom.addElement(""String_Node_Str"");
    List allComponentsList=process.getGraphicalNodes();
    InternalNodeComponentHandler handler=new InternalNodeComponentHandler(new HashMap<String,String>(),element,allComponentsList,new HashMap<String,List>(),new HashMap<String,List>(),service,map.get(0),map.get(1),new HashMap<String,Object>());
    handler.generateComponentInfo();
    Element component=(Element)element.content().get(0);
    for (int i=0; i < component.content().size(); i++) {
      Element params=(Element)component.content().get(i);
      if (params.getName().equals(""String_Node_Str"")) {
        List paramList=params.content();
        for (int j=0; j < paramList.size(); j++) {
          Element param=(Element)paramList.get(j);
          String name=param.attributeValue(""String_Node_Str"");
          String value=param.attributeValue(""String_Node_Str"");
          assertFalse(name.startsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str""));
          if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
            assertTrue(value.equals(""String_Node_Str""));
          }
        }
      }
    }
  }
}","@Test public void testGenerateComponentInfo() throws Exception {
  ProcessItem processItem=null;
  URL testJobURL=FileLocator.find(Platform.getBundle(""String_Node_Str""),new Path(""String_Node_Str""),null);
  if (testJobURL != null) {
    testJobURL=FileLocator.toFileURL(testJobURL);
  }
  File srcFile=new File(testJobURL.getFile());
  ImportExportHandlersManager importManager=new ImportExportHandlersManager();
  FileResourcesUnityManager fileUnityManager=ResourcesManagerFactory.getInstance().createFileUnityManager(srcFile);
  ResourcesManager resManager=fileUnityManager.doUnify();
  List<ImportItem> projectRecords=importManager.populateImportingItems(resManager,true,new NullProgressMonitor());
  assertTrue(projectRecords.size() > 0);
  importManager.importItemRecords(new NullProgressMonitor(),resManager,projectRecords,true,projectRecords.toArray(new ImportItem[0]),null);
  IRepositoryViewObject obj=ProxyRepositoryFactory.getInstance().getLastVersion(""String_Node_Str"");
  Item item=obj.getProperty().getItem();
  assertTrue(item instanceof ProcessItem);
  processItem=(ProcessItem)item;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IDesignerCoreService.class)) {
    IDesignerCoreService service=(IDesignerCoreService)GlobalServiceRegister.getDefault().getService(IDesignerCoreService.class);
    List<Map> map=service.getMaps();
    IProcess process=service.getProcessFromProcessItem(processItem);
    Document dom=new DOMDocument();
    Element element=dom.addElement(""String_Node_Str"");
    List allComponentsList=process.getGraphicalNodes();
    InternalNodeComponentHandler handler=new InternalNodeComponentHandler(new HashMap<String,String>(),element,allComponentsList,new HashMap<String,List>(),new HashMap<String,List>(),service,map.get(0),map.get(1),new HashMap<String,Object>());
    handler.generateComponentInfo();
    Element component=(Element)element.content().get(0);
    for (int i=0; i < component.content().size(); i++) {
      Element params=(Element)component.content().get(i);
      if (params.getName().equals(""String_Node_Str"")) {
        List paramList=params.content();
        for (int j=0; j < paramList.size(); j++) {
          Element param=(Element)paramList.get(j);
          String name=param.attributeValue(""String_Node_Str"");
          String value=param.attributeValue(""String_Node_Str"");
          assertFalse(name.startsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str""));
          if (name.equals(""String_Node_Str"") || name.equals(""String_Node_Str"")) {
            assertTrue(value.equals(""String_Node_Str""));
          }
        }
      }
    }
  }
}",0.9376715013720108
125879,"/** 
 * for Spark Distribution   {@link SparkComponent}.
 */
IDistributionsManager getHiveDistributionManager();","/** 
 * for Hive Distribution   {@link HiveComponent}.
 */
IDistributionsManager getHiveDistributionManager();",0.918918918918919
125880,"private void updateVersionPart(){
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService != null) {
    final IHDistribution hDistribution=hadoopDistributionService.getHadoopDistribution(distribution,false);
    if (hDistribution != null) {
      boolean isSparkJob=isSparkJob();
      final IHDistributionVersion[] hdVersions=hDistribution.getHDVersions();
      List<String> versionsDisplay=new ArrayList<String>();
      for (      IHDistributionVersion hdv : hdVersions) {
        final String displayVersion=hdv.getDisplayVersion();
        if (displayVersion == null) {
          continue;
        }
        if (isSparkJob) {
          if (hadoopDistributionService.doSupportService(hdv,IHDConstants.SERVICE_SPARK)) {
            versionsDisplay.add(displayVersion);
          }
        }
 else {
          versionsDisplay.add(displayVersion);
        }
      }
      versionCombo.getCombo().setItems(versionsDisplay.toArray(new String[0]));
      IHDistributionVersion defaultVersion=hDistribution.getDefaultVersion();
      if (defaultVersion != null) {
        versionCombo.getCombo().setText(defaultVersion.getDisplayVersion());
      }
 else       if (!versionsDisplay.isEmpty()) {
        versionCombo.getCombo().select(0);
      }
    }
  }
}","private void updateVersionPart(){
  final IHDistribution hadoopDistribution=getHadoopDistribution();
  if (hadoopDistribution != null) {
    String[] versionsDisplay=hadoopDistribution.getVersionsDisplay();
    IHDistributionVersion defaultVersion=hadoopDistribution.getDefaultVersion();
    versionCombo.getCombo().setItems(versionsDisplay);
    if (defaultVersion != null) {
      versionCombo.getCombo().setText(defaultVersion.getDisplayVersion());
    }
 else     if (versionsDisplay.length > 0) {
      versionCombo.getCombo().select(0);
    }
  }
}",0.2242391884676988
125881,"private IHDistribution getHadoopDistribution(){
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService != null) {
    final IHDistribution distributionByDisplay=hadoopDistributionService.getHadoopDistribution(distributionCombo.getText(),true);
    return distributionByDisplay;
  }
  return null;
}","private IHDistribution getHadoopDistribution(){
  IDistributionsManager distributionManager=getDistributionsManager();
  if (distributionManager != null) {
    final IHDistribution distributionByDisplay=distributionManager.getDistribution(distributionCombo.getText(),true);
    return distributionByDisplay;
  }
  return null;
}",0.6666666666666666
125882,"private void init(){
  List<String> distributionsDisplay=new ArrayList<String>();
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hadoopDistributionService != null) {
    IDistributionsManager distributionManager=null;
    if (isSparkJob()) {
      distributionManager=hadoopDistributionService.getSparkDistributionManager();
    }
 else {
      distributionManager=hadoopDistributionService.getHadoopDistributionManager();
    }
    IHDistribution[] distributions=distributionManager.getDistributions();
    if (distributions != null) {
      for (      IHDistribution d : distributions) {
        if (!d.useCustom()) {
          distributionsDisplay.add(d.getDisplayName());
        }
      }
    }
  }
  distributionCombo.getCombo().setItems(distributionsDisplay.toArray(new String[0]));
  distributionCombo.select(0);
}","private void init(){
  List<String> distributionsDisplay=new ArrayList<String>();
  IDistributionsManager distributionManager=getDistributionsManager();
  if (distributionManager != null) {
    IHDistribution[] distributions=distributionManager.getDistributions();
    if (distributions != null) {
      for (      IHDistribution d : distributions) {
        if (!d.useCustom()) {
          distributionsDisplay.add(d.getDisplayName());
        }
      }
    }
  }
  distributionCombo.getCombo().setItems(distributionsDisplay.toArray(new String[0]));
  distributionCombo.select(0);
}",0.6946933149552033
125883,"/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}","/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,in.getPattern());
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}",0.9931605471562276
125884,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(field.getProp(Talend6SchemaConstants.TALEND6_ID));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(null);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}",0.9836668027766436
125885,"/** 
 * Copy all of the information from the MetadataTable in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyTableProperties(PropBuilder<T> builder,MetadataTable in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_TABLE_NAME,in.getName());
  }
  if (in.getTableType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_TABLE_TYPE,in.getTableType());
  }
  return builder;
}","/** 
 * Copy all of the information from the MetadataTable in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyTableProperties(PropBuilder<T> builder,MetadataTable in){
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_TABLE_NAME,in.getName());
  }
  if (in.getTableType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_TABLE_TYPE,in.getTableType());
  }
  return builder;
}",0.814974182444062
125886,"/** 
 * Update component schema for node metadata table of node.
 * @param componentProperties
 * @param schemaPropertyName
 * @param metadataTable
 */
public void updateComponentSchema(ComponentProperties componentProperties,String schemaPropertyName,IMetadataTable metadataTable);","/** 
 * Update component schema for node metadata table of node.
 * @param componentProperties
 * @param schemaPropertyName
 * @param metadataTable
 */
public void updateComponentSchema(ComponentProperties componentProperties,String schemaPropertyName,IMetadataTable metadataTable,IElementParameter param);",0.9591836734693876
125887,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(field.getProp(Talend6SchemaConstants.TALEND6_ID));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(null);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(field.getProp(Talend6SchemaConstants.TALEND6_ID));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(field.getProp(Talend6SchemaConstants.TALEND6_LABEL));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}",0.9944584382871536
125888,"/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}","/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,in.getPattern());
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}",0.9931605471562276
125889,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(field.getProp(Talend6SchemaConstants.TALEND6_ID));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(field.getProp(Talend6SchemaConstants.TALEND6_LABEL));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}",0.978969826272478
125890,"public static void initilializeSchemaFromElementParameters(IMetadataTable metadataTable,List<IElementParameter> elementParameters){
  IElementParameter mappingParameter=getMappingParameter(elementParameters);
  String uniqueName=null;
  for (int i=0; i < elementParameters.size(); i++) {
    IElementParameter param=elementParameters.get(i);
    if (param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) && param.getContext().equals(metadataTable.getAttachedConnector())) {
      if (param.getValue() instanceof IMetadataTable) {
        param.setValueToDefault(elementParameters);
        IMetadataTable table=(IMetadataTable)param.getValue();
        String metadataTableName=metadataTable.getTableName();
        if (mappingParameter != null) {
          if (mappingParameter.getValue() != null && (!mappingParameter.getValue().equals(""String_Node_Str""))) {
            table.setDbms((String)mappingParameter.getValue());
          }
        }
        metadataTable.setReadOnly(table.isReadOnly());
        metadataTable.setReadOnlyColumnPosition(table.getReadOnlyColumnPosition());
        for (int k=0; k < table.getListColumns().size(); k++) {
          IMetadataColumn newColumn=table.getListColumns().get(k);
          IElement element=param.getElement();
          IMetadataColumn oldColumn=metadataTable.getColumn(newColumn.getLabel());
          if (element instanceof INode && oldColumn == null) {
            INode node=(INode)element;
            if (node.getComponent().getName().equals(""String_Node_Str"")) {
              int lastIndexOf=node.getLabel().lastIndexOf(""String_Node_Str"");
              oldColumn=metadataTable.getColumn(newColumn.getLabel() + node.getLabel().substring(lastIndexOf));
            }
          }
          boolean update=true;
          if (metadataTableName != null && !metadataTableName.equals(table.getTableName())) {
            update=newColumn.isCustom();
          }
          if (oldColumn != null && update) {
            oldColumn.setReadOnly(newColumn.isReadOnly());
            oldColumn.setCustom(newColumn.isCustom());
            oldColumn.setCustomId(newColumn.getCustomId());
            if (newColumn.isReadOnly()) {
              oldColumn.setKey(newColumn.isKey());
              oldColumn.setNullable(newColumn.isNullable());
              oldColumn.setLength(newColumn.getLength());
              oldColumn.setPrecision(newColumn.getPrecision());
              oldColumn.setPattern(newColumn.getPattern());
              oldColumn.setType(newColumn.getType());
              oldColumn.setTalendType(newColumn.getTalendType());
              oldColumn.setComment(newColumn.getComment());
            }
          }
        }
      }
    }
  }
  metadataTable.sortCustomColumns();
}","public static void initilializeSchemaFromElementParameters(IMetadataTable metadataTable,List<IElementParameter> elementParameters){
  IElementParameter mappingParameter=getMappingParameter(elementParameters);
  String uniqueName=null;
  for (int i=0; i < elementParameters.size(); i++) {
    IElementParameter param=elementParameters.get(i);
    if ((param.getFieldType().equals(EParameterFieldType.SCHEMA_TYPE) || param.getFieldType().equals(EParameterFieldType.SCHEMA_REFERENCE)) && param.getContext().equals(metadataTable.getAttachedConnector())) {
      if (param.getValue() instanceof IMetadataTable) {
        param.setValueToDefault(elementParameters);
        IMetadataTable table=(IMetadataTable)param.getValue();
        String metadataTableName=metadataTable.getTableName();
        if (mappingParameter != null) {
          if (mappingParameter.getValue() != null && (!mappingParameter.getValue().equals(""String_Node_Str""))) {
            table.setDbms((String)mappingParameter.getValue());
          }
        }
        metadataTable.setReadOnly(table.isReadOnly());
        metadataTable.setReadOnlyColumnPosition(table.getReadOnlyColumnPosition());
        for (int k=0; k < table.getListColumns().size(); k++) {
          IMetadataColumn newColumn=table.getListColumns().get(k);
          IElement element=param.getElement();
          IMetadataColumn oldColumn=metadataTable.getColumn(newColumn.getLabel());
          if (element instanceof INode && oldColumn == null) {
            INode node=(INode)element;
            if (node.getComponent().getName().equals(""String_Node_Str"")) {
              int lastIndexOf=node.getLabel().lastIndexOf(""String_Node_Str"");
              oldColumn=metadataTable.getColumn(newColumn.getLabel() + node.getLabel().substring(lastIndexOf));
            }
          }
          boolean update=true;
          if (metadataTableName != null && !metadataTableName.equals(table.getTableName())) {
            update=newColumn.isCustom();
          }
          if (oldColumn != null && update) {
            oldColumn.setReadOnly(newColumn.isReadOnly());
            oldColumn.setCustom(newColumn.isCustom());
            oldColumn.setCustomId(newColumn.getCustomId());
            if (newColumn.isReadOnly()) {
              oldColumn.setKey(newColumn.isKey());
              oldColumn.setNullable(newColumn.isNullable());
              oldColumn.setLength(newColumn.getLength());
              oldColumn.setPrecision(newColumn.getPrecision());
              oldColumn.setPattern(newColumn.getPattern());
              oldColumn.setType(newColumn.getType());
              oldColumn.setTalendType(newColumn.getTalendType());
              oldColumn.setComment(newColumn.getComment());
            }
          }
        }
      }
    }
  }
  metadataTable.sortCustomColumns();
}",0.9872645739910314
125891,"private boolean isRepository(INode node,IMetadataTable currentTable){
  boolean nodeModeFlag=false;
  for (  IElementParameter param : node.getElementParameters()) {
    if (param.getFieldType() == EParameterFieldType.SCHEMA_TYPE && (param.getContext() == null || param.getContext().equals(currentTable.getAttachedConnector()))) {
      IElementParameter schemaParam=param.getChildParameters().get(""String_Node_Str"");
      if (schemaParam.getValue() != null) {
        if (schemaParam.getValue().equals(""String_Node_Str"")) {
          nodeModeFlag=true;
          break;
        }
      }
    }
  }
  if (!nodeModeFlag) {
    IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
    if (schemaParam != null) {
      List schemaType=(List)schemaParam.getValue();
      for (int i=0; i < schemaType.size(); i++) {
        HashMap map=(HashMap)schemaType.get(i);
        Set set=map.keySet();
        Iterator it=set.iterator();
        while (it.hasNext()) {
          String key=(String)it.next();
          if (key.equals(""String_Node_Str"")) {
            String value=(String)map.get(key);
            String tableLabel=this.outputMetaTable.getLabel();
            if (tableLabel != null && tableLabel.equals(TalendQuoteUtils.removeQuotes(value))) {
              if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
                nodeModeFlag=true;
              }
            }
          }
        }
      }
    }
  }
  return nodeModeFlag;
}","private boolean isRepository(INode node,IMetadataTable currentTable){
  boolean nodeModeFlag=false;
  for (  IElementParameter param : node.getElementParameters()) {
    if ((param.getFieldType() == EParameterFieldType.SCHEMA_TYPE || param.getFieldType() == EParameterFieldType.SCHEMA_REFERENCE) && (param.getContext() == null || param.getContext().equals(currentTable.getAttachedConnector()))) {
      IElementParameter schemaParam=param.getChildParameters().get(""String_Node_Str"");
      if (schemaParam.getValue() != null) {
        if (schemaParam.getValue().equals(""String_Node_Str"")) {
          nodeModeFlag=true;
          break;
        }
      }
    }
  }
  if (!nodeModeFlag) {
    IElementParameter schemaParam=node.getElementParameter(""String_Node_Str"");
    if (schemaParam != null) {
      List schemaType=(List)schemaParam.getValue();
      for (int i=0; i < schemaType.size(); i++) {
        HashMap map=(HashMap)schemaType.get(i);
        Set set=map.keySet();
        Iterator it=set.iterator();
        while (it.hasNext()) {
          String key=(String)it.next();
          if (key.equals(""String_Node_Str"")) {
            String value=(String)map.get(key);
            String tableLabel=this.outputMetaTable.getLabel();
            if (tableLabel != null && tableLabel.equals(TalendQuoteUtils.removeQuotes(value))) {
              if (map.containsKey(""String_Node_Str"") && map.containsValue(""String_Node_Str"")) {
                nodeModeFlag=true;
              }
            }
          }
        }
      }
    }
  }
  return nodeModeFlag;
}",0.9784595300261096
125892,"/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(IHDistribution hiveDistribution,IHDistributionVersion hiveVersion){
  if (hiveDistribution == null) {
    hiveDistribution=getCurrentHiveDistribution(true);
  }
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  DatabaseConnection conn=getConnection();
  String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(hiveDistribution.getName(),hiveVersion.getVersion(),false);
  hiveServerVersionCombo.getCombo().setItems(hiveServersDisplay);
  String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  if (hiveServerKey != null) {
    HiveServerVersionInfo serverVersion=HiveServerVersionInfo.getByKey(hiveServerKey);
    if (serverVersion != null) {
      hiveServerVersionCombo.setText(serverVersion.getDisplayName());
    }
 else {
      hiveServerVersionCombo.select(0);
    }
  }
 else {
    hiveServerVersionCombo.select(0);
  }
}","/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(IHDistribution hiveDistribution,IHDistributionVersion hiveVersion){
  if (hiveDistribution == null) {
    hiveDistribution=getCurrentHiveDistribution(true);
  }
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  DatabaseConnection conn=getConnection();
  String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(hiveDistribution.getName(),hiveVersion == null ? null : hiveVersion.getVersion(),false);
  hiveServerVersionCombo.getCombo().setItems(hiveServersDisplay);
  String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  if (hiveServerKey != null) {
    HiveServerVersionInfo serverVersion=HiveServerVersionInfo.getByKey(hiveServerKey);
    if (serverVersion != null) {
      hiveServerVersionCombo.setText(serverVersion.getDisplayName());
    }
 else {
      hiveServerVersionCombo.select(0);
    }
  }
 else {
    hiveServerVersionCombo.select(0);
  }
}",0.9897490279250618
125893,"protected void updateHiveModeAndMakeSelection(HiveModeInfo hiveMode){
  IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  HiveServerVersionInfo hiveServer=null;
  if (doSupportHive2()) {
    hiveServer=HiveServerVersionInfo.getByDisplay(hiveServerVersionCombo.getText());
  }
 else {
    hiveServer=HiveServerVersionInfo.HIVE_SERVER_1;
  }
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(hiveDistribution.getName(),hiveVersion.getVersion(),hiveServer.getKey(),false);
  hiveModeCombo.getCombo().setItems(hiveModesDisplay);
  if (hiveMode != null) {
    hiveModeCombo.setText(hiveMode.getDisplayName());
  }
 else {
    hiveModeCombo.select(0);
  }
}","protected void updateHiveModeAndMakeSelection(HiveModeInfo hiveMode){
  IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  HiveServerVersionInfo hiveServer=HiveServerVersionInfo.HIVE_SERVER_1;
  if (doSupportHive2()) {
    hiveServer=HiveServerVersionInfo.getByDisplay(hiveServerVersionCombo.getText());
  }
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(hiveDistribution.getName(),hiveVersion == null ? null : hiveVersion.getVersion(),hiveServer == null ? null : hiveServer.getKey(),false);
  hiveModeCombo.getCombo().setItems(hiveModesDisplay);
  if (hiveMode != null) {
    hiveModeCombo.setText(hiveMode.getDisplayName());
  }
 else {
    hiveModeCombo.select(0);
  }
}",0.8621908127208481
125894,"public ArtifactsDeployer(){
  init();
}","public ArtifactsDeployer(){
}",0.8529411764705882
125895,"private static Object getValue(Object object,String... args){
  if (args.length > 0) {
    String arg=args[0];
    Object obj=((JSONObject)object).get(arg);
    String[] newArgs=(String[])ArrayUtils.remove(args,0);
    return getValue(obj,newArgs);
  }
 else {
    return object;
  }
}","private static Object getValue(Object object,String... args){
  if (args.length > 0 && object instanceof JSONObject) {
    String arg=args[0];
    Object obj=((JSONObject)object).get(arg);
    String[] newArgs=(String[])ArrayUtils.remove(args,0);
    return getValue(obj,newArgs);
  }
 else {
    return object;
  }
}",0.946843853820598
125896,"/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isHiveEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLStringForStandardalone(template,getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID());
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}","/** 
 * Set up the URL by checking the current hive mode. Added by Marvin Wang on Sep 4, 2012.
 * @return
 */
private String getStringConnection(){
  String s=null;
  String versionStr=dbVersionCombo.getText();
  if (isContextMode()) {
    s=DBConnectionContextUtils.getUrlConnectionString(connectionItem,true);
  }
 else {
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=null;
      if (doSupportHive2() && HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName().equals(hiveServerVersionCombo.getText())) {
        template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      }
 else {
        template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
      }
      if (!isHiveEmbeddedMode()) {
        s=DatabaseConnStrUtil.getHiveURLStringForStandardalone(template,getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID());
      }
 else {
        s=template;
      }
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      String template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
      s=DatabaseConnStrUtil.getImpalaString(getConnection(),getConnection().getServerName(),getConnection().getPort(),getConnection().getSID(),template);
      getConnection().setUiSchema(getConnection().getSID());
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
      s=DatabaseConnStrUtil.getURLString(dbTypeCombo.getText(),versionStr,serverText.getText(),usernameText.getText(),passwordText.getText(),portText.getText(),sidOrDatabaseText.getText(),fileField.getText(),datasourceText.getText(),directoryField.getText(),additionParamText.getText());
    }
  }
  return s;
}",0.9944903581267218
125897,"/** 
 * Added by Marvin Wang on Oct 17, 2012.
 */
protected void doHiveVersionModify(){
  IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
  IHDistributionVersion newVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
  String originalVersion=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  IHDistributionVersion hdVersion=hiveDistribution.getHDVersion(originalVersion,true);
  if (newVersion != null && !newVersion.equals(hdVersion)) {
    setHideVersionInfoWidgets(false);
    updateHiveServerAndMakeSelection(hiveDistribution,hdVersion);
    updateYarnInfo(hiveDistribution,hdVersion);
    updateHiveModeAndMakeSelection(null);
    doHiveModeModify();
    fillDefaultsWhenHiveVersionChanged();
  }
}","/** 
 * Added by Marvin Wang on Oct 17, 2012.
 */
protected void doHiveVersionModify(){
  IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
  IHDistributionVersion newVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
  String originalVersion=getConnection().getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  IHDistributionVersion hdVersion=hiveDistribution.getHDVersion(originalVersion,true);
  if (newVersion != null && !newVersion.equals(hdVersion)) {
    setHideVersionInfoWidgets(false);
    updateHiveModeAndMakeSelection(null);
    updateHiveServerAndMakeSelection(hiveDistribution,newVersion);
    updateYarnInfo(hiveDistribution,newVersion);
    doHiveModeModify();
    fillDefaultsWhenHiveVersionChanged();
  }
}",0.9305019305019304
125898,"protected void swap(Object[] children,int first,int second){
  if (first != second && first > -1 && second > -1 && first < children.length && second < children.length) {
    Object t=children[first];
    children[first]=children[second];
    children[second]=t;
  }
}","protected void swap(Object[] children,int source,int target){
  if (source != target && source > -1 && target > -1 && source < children.length && target < children.length) {
    if (source > target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i--) {
        children[i]=children[i - 1];
      }
      children[target]=sourceObject;
    }
 else     if (source < target) {
      Object sourceObject=children[source];
      for (int i=source; i > target; i++) {
        children[i]=children[i + 1];
      }
      children[target]=sourceObject;
    }
  }
}",0.2237762237762237
125899,"/** 
 * Check the boolean methods for sub class of   {@link org.talend.hadoop.distribution.component.HadoopComponent)If no the method in the HadoopComponent object, won't contain in the result map.}
 */
Map<String,Boolean> doSupportMethods(IHDistributionVersion distributionVersion,String... methods);","/** 
 * Check the boolean methods for sub class of   {@link org.talend.hadoop.distribution.component.HadoopComponent)If no the method in the HadoopComponent object, won't contain in the result map.}
 */
Map<String,Boolean> doSupportMethods(IHDistributionVersion distributionVersion,String... methods) throws Exception ;",0.970967741935484
125900,"public static String[] getDistributionVersionsDisplay(String hiveDistribution,boolean byDisplay){
  List<String> versionsItems=new ArrayList<String>();
  IHDistribution distribution=getDistribution(hiveDistribution,byDisplay);
  if (distribution != null) {
    IHDistributionVersion[] hdVersions=distribution.getHDVersions();
    for (    IHDistributionVersion v : hdVersions) {
      String[] hiveModesDisplay=getHiveModesDisplay(distribution.getName(),v.getVersion(),false);
      if (hiveModesDisplay == null || hiveModesDisplay.length == 0) {
        continue;
      }
      versionsItems.add(v.getDisplayVersion());
    }
  }
  return versionsItems.toArray(new String[versionsItems.size()]);
}","public static String[] getDistributionVersionsDisplay(String hiveDistribution,boolean byDisplay){
  List<String> versionsItems=new ArrayList<String>();
  IHDistribution distribution=getDistribution(hiveDistribution,byDisplay);
  if (distribution != null) {
    IHDistributionVersion[] hdVersions=distribution.getHDVersions();
    for (    IHDistributionVersion v : hdVersions) {
      versionsItems.add(v.getDisplayVersion());
    }
  }
  return versionsItems.toArray(new String[versionsItems.size()]);
}",0.6605657237936772
125901,"public static String[] getHiveServersDisplay(String hiveDistribution,String hiveVersion,String hiveMode,boolean byDisplay){
  List<String> hiveServerItems=new ArrayList<String>();
  if (doSupportHive1(hiveDistribution,hiveVersion,byDisplay)) {
    hiveServerItems.add(HiveServerVersionInfo.HIVE_SERVER_1.getDisplayName());
  }
  if (doSupportHive2(hiveDistribution,hiveVersion,byDisplay)) {
    hiveServerItems.add(HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName());
  }
  return hiveServerItems.toArray(new String[0]);
}","public static String[] getHiveServersDisplay(String hiveDistribution,String hiveVersion,boolean byDisplay){
  List<String> hiveServerItems=new ArrayList<String>();
  if (doSupportHive1(hiveDistribution,hiveVersion,byDisplay)) {
    hiveServerItems.add(HiveServerVersionInfo.HIVE_SERVER_1.getDisplayName());
  }
  if (doSupportHive2(hiveDistribution,hiveVersion,byDisplay)) {
    hiveServerItems.add(HiveServerVersionInfo.HIVE_SERVER_2.getDisplayName());
  }
  return hiveServerItems.toArray(new String[0]);
}",0.9844961240310076
125902,"public static String[] getHiveModesDisplay(String hiveDistribution,String hiveVersion,boolean byDisplay){
  List<String> hiveModeItems=new ArrayList<String>();
  if (doSupportEmbeddedMode(hiveDistribution,hiveVersion,byDisplay)) {
    hiveModeItems.add(HiveModeInfo.EMBEDDED.getDisplayName());
  }
  if (doSupportStandaloneMode(hiveDistribution,hiveVersion,byDisplay)) {
    hiveModeItems.add(HiveModeInfo.STANDALONE.getDisplayName());
  }
  return hiveModeItems.toArray(new String[0]);
}","public static String[] getHiveModesDisplay(String hiveDistribution,String hiveVersion,String hiveServer,boolean byDisplay){
  List<String> hiveModeItems=new ArrayList<String>();
  if (doSupportEmbeddedMode(hiveDistribution,hiveVersion,byDisplay)) {
    hiveModeItems.add(HiveModeInfo.EMBEDDED.getDisplayName());
  }
  if (doSupportStandaloneMode(hiveDistribution,hiveVersion,byDisplay)) {
    HiveServerVersionInfo mode=byDisplay ? HiveServerVersionInfo.getByDisplay(hiveServer) : HiveServerVersionInfo.getByKey(hiveServer);
    if (mode == null) {
      String[] hiveServersDisplay=getHiveServersDisplay(hiveDistribution,hiveVersion,byDisplay);
      if (hiveServersDisplay != null && hiveServersDisplay.length > 0) {
        mode=HiveServerVersionInfo.getByDisplay(hiveServersDisplay[0]);
      }
    }
    if (mode == null || mode == HiveServerVersionInfo.HIVE_SERVER_2 || (HiveServerVersionInfo.HIVE_SERVER_1 == mode && doSupportMethod(hiveDistribution,hiveVersion,byDisplay,""String_Node_Str""))) {
      hiveModeItems.add(HiveModeInfo.STANDALONE.getDisplayName());
    }
  }
  return hiveModeItems.toArray(new String[0]);
}",0.6043343653250774
125903,"public static boolean doSupportMethod(String hiveDistribution,String hiveVersion,boolean byDisplay,String supportMethodName){
  IHDistribution distribution=getDistribution(hiveDistribution,byDisplay);
  if (distribution != null) {
    IHDistributionVersion version=distribution.getHDVersion(hiveVersion,byDisplay);
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (version != null && hadoopDistributionService != null) {
      Map<String,Boolean> doSupportMethods=hadoopDistributionService.doSupportMethods(version,supportMethodName);
      Boolean support=doSupportMethods.get(supportMethodName);
      return support != null && support;
    }
  }
  return false;
}","public static boolean doSupportMethod(String hiveDistribution,String hiveVersion,boolean byDisplay,String supportMethodName){
  IHDistribution distribution=getDistribution(hiveDistribution,byDisplay);
  if (distribution != null) {
    IHDistributionVersion version=distribution.getHDVersion(hiveVersion,byDisplay);
    IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
    if (version != null && hadoopDistributionService != null) {
      try {
        return hadoopDistributionService.doSupportMethod(version,supportMethodName);
      }
 catch (      Exception e) {
      }
    }
  }
  return false;
}",0.7466666666666667
125904,"private void fillDefaultValues(DatabaseConnection connection){
  String distribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String version=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(distribution,version,false);
  HiveModeInfo hiveMode=HiveModeInfo.getByDisplay(hiveModesDisplay[0]);
  boolean isEmbeddedMode=(hiveMode == HiveModeInfo.EMBEDDED);
  connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveMode.getName());
  String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(distribution,version,hiveMode.getName(),false);
  HiveServerVersionInfo server=HiveServerVersionInfo.getByDisplay(hiveServersDisplay[0]);
  String hiveServer=server.getKey();
  connection.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,hiveServer);
  if (StringUtils.isEmpty(connection.getSID())) {
    String defaultDatabase=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(defaultDatabase)) {
      connection.setSID(defaultDatabase);
    }
  }
  if (StringUtils.isEmpty(connection.getPort())) {
    String defaultPort=null;
    if (isEmbeddedMode) {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveModeInfo.EMBEDDED.getName(),EHadoopProperties.PORT.getName());
    }
 else {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveModeInfo.STANDALONE.getName(),EHadoopProperties.PORT.getName());
    }
    if (StringUtils.isNotEmpty(defaultPort)) {
      connection.setPort(defaultPort);
    }
  }
  if (StringUtils.isEmpty(connection.getURL())) {
    String template=null;
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServer)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String url=DatabaseConnStrUtil.getHiveURLString(connection,connection.getServerName(),connection.getPort(),connection.getSID(),template);
    if (StringUtils.isNotEmpty(url)) {
      connection.setURL(url);
    }
  }
}","private void fillDefaultValues(DatabaseConnection connection){
  String distribution=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String version=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(distribution,version,false);
  if (hiveServersDisplay == null || hiveServersDisplay.length == 0) {
    return;
  }
  HiveServerVersionInfo server=HiveServerVersionInfo.getByDisplay(hiveServersDisplay[0]);
  String hiveServer=server.getKey();
  connection.getParameters().put(ConnParameterKeys.HIVE_SERVER_VERSION,hiveServer);
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(distribution,version,hiveServer,false);
  if (hiveModesDisplay == null || hiveModesDisplay.length == 0) {
    return;
  }
  HiveModeInfo hiveMode=HiveModeInfo.getByDisplay(hiveModesDisplay[0]);
  boolean isEmbeddedMode=(hiveMode == HiveModeInfo.EMBEDDED);
  connection.getParameters().put(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE,hiveMode.getName());
  if (StringUtils.isEmpty(connection.getSID())) {
    String defaultDatabase=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),EHadoopProperties.DATABASE.getName());
    if (StringUtils.isNotEmpty(defaultDatabase)) {
      connection.setSID(defaultDatabase);
    }
  }
  if (StringUtils.isEmpty(connection.getPort())) {
    String defaultPort=null;
    if (isEmbeddedMode) {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveModeInfo.EMBEDDED.getName(),EHadoopProperties.PORT.getName());
    }
 else {
      defaultPort=HadoopDefaultConfsManager.getInstance().getDefaultConfValue(distribution,EHadoopCategory.HIVE.getName(),HiveModeInfo.STANDALONE.getName(),EHadoopProperties.PORT.getName());
    }
    if (StringUtils.isNotEmpty(defaultPort)) {
      connection.setPort(defaultPort);
    }
  }
  if (StringUtils.isEmpty(connection.getURL())) {
    String template=null;
    if (HiveServerVersionInfo.HIVE_SERVER_2.getKey().equals(hiveServer)) {
      template=DbConnStrForHive.URL_HIVE_2_TEMPLATE;
    }
 else {
      template=DbConnStrForHive.URL_HIVE_1_TEMPLATE;
    }
    String url=DatabaseConnStrUtil.getHiveURLString(connection,connection.getServerName(),connection.getPort(),connection.getSID(),template);
    if (StringUtils.isNotEmpty(url)) {
      connection.setURL(url);
    }
  }
}",0.8188196450680973
125905,"/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(IHDistribution hiveDistribution,IHDistributionVersion hiveVersion){
  if (hiveDistribution == null) {
    hiveDistribution=getCurrentHiveDistribution(true);
  }
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  if (doSupportHive2()) {
    DatabaseConnection conn=getConnection();
    String mode=conn.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
    HiveModeInfo hiveMode=HiveModeInfo.getByDisplay(mode);
    if (hiveMode == null) {
      String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(hiveDistribution.getName(),hiveVersion.getVersion(),false);
      if (hiveModesDisplay.length > 0) {
        hiveMode=HiveModeInfo.getByDisplay(hiveModesDisplay[0]);
      }
    }
    String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(hiveDistribution.getName(),hiveVersion.getVersion(),hiveMode.getName(),false);
    hiveServerVersionCombo.getCombo().setItems(hiveServersDisplay);
    String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
    if (hiveServerKey != null) {
      HiveServerVersionInfo serverVersion=HiveServerVersionInfo.getByKey(hiveServerKey);
      if (serverVersion != null) {
        hiveServerVersionCombo.setText(serverVersion.getDisplayName());
      }
 else {
        hiveServerVersionCombo.select(0);
      }
    }
 else {
      hiveServerVersionCombo.select(0);
    }
  }
}","/** 
 * Makes sure if the hive server2 UI displays. If displaying it, then check the selection. Added by Marvin Wang on Mar 25, 2013.
 * @param distributionIndex
 * @param hiveVersionIndex
 */
protected void updateHiveServerAndMakeSelection(IHDistribution hiveDistribution,IHDistributionVersion hiveVersion){
  if (hiveDistribution == null) {
    hiveDistribution=getCurrentHiveDistribution(true);
  }
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  DatabaseConnection conn=getConnection();
  String[] hiveServersDisplay=HiveMetadataHelper.getHiveServersDisplay(hiveDistribution.getName(),hiveVersion.getVersion(),false);
  hiveServerVersionCombo.getCombo().setItems(hiveServersDisplay);
  String hiveServerKey=conn.getParameters().get(ConnParameterKeys.HIVE_SERVER_VERSION);
  if (hiveServerKey != null) {
    HiveServerVersionInfo serverVersion=HiveServerVersionInfo.getByKey(hiveServerKey);
    if (serverVersion != null) {
      hiveServerVersionCombo.setText(serverVersion.getDisplayName());
    }
 else {
      hiveServerVersionCombo.select(0);
    }
  }
 else {
    hiveServerVersionCombo.select(0);
  }
}",0.7915151515151515
125906,"private void updateYarnInfo(IHDistribution hiveDistribution,IHDistributionVersion hiveVersion){
  if (hiveDistribution == null) {
    hiveDistribution=getCurrentHiveDistribution(true);
  }
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  String supportYarnMethodName=""String_Node_Str"";
  Map<String,Boolean> doSupportMethods=hadoopDistributionService.doSupportMethods(hiveVersion,supportYarnMethodName);
  Boolean support=doSupportMethods.get(supportYarnMethodName);
  if (support != null && support) {
    getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(Boolean.TRUE));
  }
  updateJobtrackerContent();
}","private void updateYarnInfo(IHDistribution hiveDistribution,IHDistributionVersion hiveVersion){
  if (hiveDistribution == null) {
    hiveDistribution=getCurrentHiveDistribution(true);
  }
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  boolean support=false;
  try {
    support=hadoopDistributionService.doSupportMethod(hiveVersion,""String_Node_Str"");
  }
 catch (  Exception e) {
  }
  if (support) {
    getConnection().getParameters().put(ConnParameterKeys.CONN_PARA_KEY_USE_YARN,String.valueOf(Boolean.TRUE));
  }
  updateJobtrackerContent();
}",0.8072153325817362
125907,"/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  IHDistribution hiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  IHDistributionVersion hdVersion=null;
  if (hiveDistribution != null) {
    hdVersion=hiveDistribution.getHDVersion(hiveVersion,false);
    updateHiveDistributionAndMakeSelection(hiveDistribution);
    updateHiveVersionAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveModeAndMakeSelection(HiveModeInfo.valueOf(hiveMode));
    updateHiveServerAndMakeSelection(hiveDistribution,hdVersion);
  }
 else {
    updateHiveDistributionAndMakeSelection(null);
    updateHiveVersionAndMakeSelection(null,null);
    updateHiveModeAndMakeSelection(null);
    updateHiveServerAndMakeSelection(null,null);
  }
  doHiveModeModify();
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hadoopUserName=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    usernameText.setText(hadoopUserName == null ? ""String_Node_Str"" : hadoopUserName);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
  String useKrb=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String hivePrincipla=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
  String metastoreUrl=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
  String driverJarPath=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
  String driverClass=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
  String username=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
  String password=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String Principla=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  if (Boolean.valueOf(useKrb)) {
    useKerberos.setSelection(true);
    GridData hadoopData=(GridData)authenticationCom.getLayoutData();
    hadoopData.exclude=false;
    authenticationCom.setVisible(true);
    authenticationCom.setLayoutData(hadoopData);
    authenticationCom.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  hivePrincipalTxt.setText(hivePrincipla == null ? ""String_Node_Str"" : hivePrincipla);
  metastoreUrlTxt.setText(metastoreUrl == null ? ""String_Node_Str"" : metastoreUrl);
  driverJarTxt.setText(driverJarPath == null ? ""String_Node_Str"" : driverJarPath);
  driverClassTxt.setText(driverClass == null ? ""String_Node_Str"" : driverClass);
  usernameTxt.setText(username == null ? ""String_Node_Str"" : username);
  passwordTxt.setText(password == null ? ""String_Node_Str"" : password);
  if (Boolean.valueOf(useKeytabString)) {
    useKeyTab.setSelection(true);
    GridData hadoopData=(GridData)keyTabComponent.getLayoutData();
    hadoopData.exclude=false;
    keyTabComponent.setVisible(true);
    keyTabComponent.setLayoutData(hadoopData);
    keyTabComponent.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  principalTxt.setText(Principla == null ? ""String_Node_Str"" : Principla);
  keytabTxt.setText(keytab == null ? ""String_Node_Str"" : keytab);
  String executionEngine=connection.getParameters().get(ConnParameterKeys.HIVE_EXECUTION_ENGINE);
  EHiveExecutionTypes executionType=EHiveExecutionTypes.getTypeFromValue(executionEngine);
  if (executionType != null) {
    hiveExecutionEngineCombo.setText(executionType.getLabel());
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.HIVE_EXECUTION_ENGINE,null);
  }
  updateYarnStatus();
  updateYarnInfo(hiveDistribution,hdVersion);
}","/** 
 * Initializes hive info for Hive UI. If the distribution value from connection is <code>null</code>, the default selected indexs of hive combos like distribution, hive vesion and hive mode are 0. Added by Marvin Wang on Aug 10, 2012.
 */
protected void initHiveInfo(){
  DatabaseConnection connection=getConnection();
  String distributionObj=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_DISTRIBUTION);
  String hiveVersion=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_VERSION);
  String hiveMode=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_HIVE_MODE);
  IHDistribution hiveDistribution=HiveMetadataHelper.getDistribution(distributionObj,false);
  IHDistributionVersion hdVersion=null;
  if (hiveDistribution != null) {
    hdVersion=hiveDistribution.getHDVersion(hiveVersion,false);
    updateHiveDistributionAndMakeSelection(hiveDistribution);
    updateHiveVersionAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveServerAndMakeSelection(hiveDistribution,hdVersion);
    updateHiveModeAndMakeSelection(HiveModeInfo.valueOf(hiveMode));
  }
 else {
    updateHiveDistributionAndMakeSelection(null);
    updateHiveVersionAndMakeSelection(null,null);
    updateHiveServerAndMakeSelection(null,null);
    updateHiveModeAndMakeSelection(null);
  }
  doHiveModeModify();
  if (isHiveEmbeddedMode()) {
    String nameNodeURLstr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_NAME_NODE_URL);
    String jobTrackerURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_JOB_TRACKER_URL);
    String hadoopUserName=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USERNAME);
    String metastoreConnURLStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_URL);
    String metastoreConnUserNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_USERNAME);
    String metastoreConnPasswordStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_PASSWORD);
    String metastoreConnDriverJarStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_JAR);
    String metastoreConnDriverNameStr=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_METASTORE_CONN_DRIVER_NAME);
    nameNodeURLTxt.setText(nameNodeURLstr == null ? ""String_Node_Str"" : nameNodeURLstr);
    jobTrackerURLTxt.setText(jobTrackerURLStr == null ? ""String_Node_Str"" : jobTrackerURLStr);
    usernameText.setText(hadoopUserName == null ? ""String_Node_Str"" : hadoopUserName);
    metastoreConnURLTxt.setText(metastoreConnURLStr == null ? ""String_Node_Str"" : metastoreConnURLStr);
    metastoreConnUserName.setText(metastoreConnUserNameStr == null ? ""String_Node_Str"" : metastoreConnUserNameStr);
    metastoreConnPassword.setText(metastoreConnPasswordStr == null ? ""String_Node_Str"" : metastoreConnPasswordStr);
    metastoreConnDriverJar.setText(metastoreConnDriverJarStr == null ? ""String_Node_Str"" : metastoreConnDriverJarStr);
    metastoreConnDriverName.setText(metastoreConnDriverNameStr == null ? ""String_Node_Str"" : metastoreConnDriverNameStr);
  }
  String useKrb=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USE_KRB);
  String hivePrincipla=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_HIVEPRINCIPLA);
  String metastoreUrl=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_METASTOREURL);
  String driverJarPath=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERJAR_PATH);
  String driverClass=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_DRIVERCLASS);
  String username=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_USERNAME);
  String password=connection.getParameters().get(ConnParameterKeys.HIVE_AUTHENTICATION_PASSWORD);
  String useKeytabString=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_USEKEYTAB);
  String Principla=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB_PRINCIPAL);
  String keytab=connection.getParameters().get(ConnParameterKeys.CONN_PARA_KEY_KEYTAB);
  if (Boolean.valueOf(useKrb)) {
    useKerberos.setSelection(true);
    GridData hadoopData=(GridData)authenticationCom.getLayoutData();
    hadoopData.exclude=false;
    authenticationCom.setVisible(true);
    authenticationCom.setLayoutData(hadoopData);
    authenticationCom.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  hivePrincipalTxt.setText(hivePrincipla == null ? ""String_Node_Str"" : hivePrincipla);
  metastoreUrlTxt.setText(metastoreUrl == null ? ""String_Node_Str"" : metastoreUrl);
  driverJarTxt.setText(driverJarPath == null ? ""String_Node_Str"" : driverJarPath);
  driverClassTxt.setText(driverClass == null ? ""String_Node_Str"" : driverClass);
  usernameTxt.setText(username == null ? ""String_Node_Str"" : username);
  passwordTxt.setText(password == null ? ""String_Node_Str"" : password);
  if (Boolean.valueOf(useKeytabString)) {
    useKeyTab.setSelection(true);
    GridData hadoopData=(GridData)keyTabComponent.getLayoutData();
    hadoopData.exclude=false;
    keyTabComponent.setVisible(true);
    keyTabComponent.setLayoutData(hadoopData);
    keyTabComponent.getParent().layout();
    authenticationGrp.layout();
    authenticationGrp.getParent().layout();
  }
  principalTxt.setText(Principla == null ? ""String_Node_Str"" : Principla);
  keytabTxt.setText(keytab == null ? ""String_Node_Str"" : keytab);
  String executionEngine=connection.getParameters().get(ConnParameterKeys.HIVE_EXECUTION_ENGINE);
  EHiveExecutionTypes executionType=EHiveExecutionTypes.getTypeFromValue(executionEngine);
  if (executionType != null) {
    hiveExecutionEngineCombo.setText(executionType.getLabel());
  }
 else {
    getConnection().getParameters().put(ConnParameterKeys.HIVE_EXECUTION_ENGINE,null);
  }
  updateYarnStatus();
  updateYarnInfo(hiveDistribution,hdVersion);
}",0.9673550966022652
125908,"protected void updateHiveModeAndMakeSelection(HiveModeInfo hiveMode){
  IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(hiveDistribution.getName(),hiveVersion.getVersion(),false);
  hiveModeCombo.getCombo().setItems(hiveModesDisplay);
  if (hiveMode != null) {
    hiveModeCombo.setText(hiveMode.getDisplayName());
  }
 else {
    hiveModeCombo.select(0);
  }
}","protected void updateHiveModeAndMakeSelection(HiveModeInfo hiveMode){
  IHDistribution hiveDistribution=getCurrentHiveDistribution(true);
  IHadoopDistributionService hadoopDistributionService=getHadoopDistributionService();
  if (hiveDistribution == null || hadoopDistributionService == null) {
    return;
  }
  IHDistributionVersion hiveVersion=hiveDistribution.getHDVersion(hiveVersionCombo.getText(),true);
  IHDistributionVersion[] hdVersions=hiveDistribution.getHDVersions();
  if (hiveVersion == null && hdVersions.length > 0) {
    hiveVersion=hdVersions[0];
  }
  HiveServerVersionInfo hiveServer=null;
  if (doSupportHive2()) {
    hiveServer=HiveServerVersionInfo.getByDisplay(hiveServerVersionCombo.getText());
  }
 else {
    hiveServer=HiveServerVersionInfo.HIVE_SERVER_1;
  }
  String[] hiveModesDisplay=HiveMetadataHelper.getHiveModesDisplay(hiveDistribution.getName(),hiveVersion.getVersion(),hiveServer.getKey(),false);
  hiveModeCombo.getCombo().setItems(hiveModesDisplay);
  if (hiveMode != null) {
    hiveModeCombo.setText(hiveMode.getDisplayName());
  }
 else {
    hiveModeCombo.select(0);
  }
}",0.88
125909,"/** 
 * Unit tests for   {@link org.talend.core.model.metadata.MetadataToolHelper#convertToAvro(IMetadataTable)}Test a simple MetadataTable.
 */
@Test public void testConvertToAvro_Basic(){
  MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
  table.setLabel(""String_Node_Str"");
  table.setComment(""String_Node_Str"");
  ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn> columns=new ArrayList<>();
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.INTEGER.getId());
    column.setNullable(true);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.STRING.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.BOOLEAN.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(""String_Node_Str"");
    column.setNullable(false);
    columns.add(column);
  }
  table.getColumns().addAll(columns);
  Schema s=MetadataToolAvroHelper.convertToAvro(table);
  assertThat(s.getType(),is(Schema.Type.RECORD));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getFields(),hasSize(4));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COMMENT),is(""String_Node_Str""));
  Schema.Field f=s.getFields().get(0);
  assertTrue(AvroUtils.isNullable(f.schema()));
  assertThat(AvroUtils.unwrapIfNullable(f.schema()).getType(),is(Schema.Type.INT));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(1);
  assertThat(f.schema().getType(),is(Schema.Type.STRING));
  assertThat(f.name(),is(""String_Node_Str""));
  assertFalse(AvroUtils.isNullable(f.schema()));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(2);
  assertThat(f.schema().getType(),is(Schema.Type.BOOLEAN));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(3);
  assertThat(f.schema().getType(),is(Schema.Type.BYTES));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
}","/** 
 * Unit tests for   {@link org.talend.core.model.metadata.MetadataToolHelper#convertToAvro(IMetadataTable)}Test a simple MetadataTable.
 */
@Test public void testConvertToAvro_Basic(){
  MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
  table.setLabel(""String_Node_Str"");
  table.setComment(""String_Node_Str"");
  ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn> columns=new ArrayList<>();
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.INTEGER.getId());
    column.setNullable(true);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.STRING.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.BOOLEAN.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(""String_Node_Str"");
    column.setNullable(false);
    columns.add(column);
  }
  table.getColumns().addAll(columns);
  Schema s=MetadataToolAvroHelper.convertToAvro(table);
  assertThat(s.getType(),is(Schema.Type.RECORD));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getFields(),hasSize(3));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COMMENT),is(""String_Node_Str""));
  Schema.Field f=s.getFields().get(0);
  assertTrue(AvroUtils.isNullable(f.schema()));
  assertThat(AvroUtils.unwrapIfNullable(f.schema()).getType(),is(Schema.Type.INT));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(1);
  assertThat(f.schema().getType(),is(Schema.Type.STRING));
  assertThat(f.name(),is(""String_Node_Str""));
  assertFalse(AvroUtils.isNullable(f.schema()));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(2);
  assertThat(f.schema().getType(),is(Schema.Type.BOOLEAN));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  assertThat(s.getProp(SchemaConstants.INCLUDE_ALL_FIELDS),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_POSITION),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
}",0.94793799356537
125910,"/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.addQuotesIfNotExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}","/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}",0.9978548444762244
125911,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(in.getProp(Talend6SchemaConstants.TALEND6_ID));
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(null);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : in.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,in.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
  if (AvroTypes.isSameType(nonnullable,AvroTypes._boolean())) {
    col.setTalendType(JavaTypesManager.BOOLEAN.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._byte())) {
    col.setTalendType(JavaTypesManager.BYTE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._bytes())) {
    col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._character())) {
    col.setTalendType(JavaTypesManager.CHARACTER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._date())) {
    col.setTalendType(JavaTypesManager.DATE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._decimal())) {
    col.setTalendType(JavaTypesManager.BIGDECIMAL.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._double())) {
    col.setTalendType(JavaTypesManager.DOUBLE.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._float())) {
    col.setTalendType(JavaTypesManager.FLOAT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._int())) {
    col.setTalendType(JavaTypesManager.INTEGER.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._long())) {
    col.setTalendType(JavaTypesManager.LONG.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._short())) {
    col.setTalendType(JavaTypesManager.SHORT.getId());
  }
 else   if (AvroTypes.isSameType(nonnullable,AvroTypes._string())) {
    col.setTalendType(JavaTypesManager.STRING.getId());
  }
  col.setNullable(AvroUtils.isNullable(in));
  String prop;
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_ID))) {
    col.setId(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
    col.setComment(field.getProp(Talend6SchemaConstants.TALEND6_ID));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
    col.setLabel(null);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
    col.setReadOnly(Boolean.parseBoolean(prop));
  }
  for (  String key : field.getJsonProps().keySet()) {
    if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
      String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
      TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,field.getProp(key));
      col.getTaggedValue().add(tv);
    }
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
    col.setKey(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
    col.setSourceType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
    col.setTalendType(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
    col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
    Long value=Long.parseLong(prop);
    col.setOriginalLength(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
    col.setNullable(Boolean.parseBoolean(prop));
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
    Long value=Long.parseLong(prop);
    col.setPrecision(value > 0 ? value : -1);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
    col.setDefaultValue(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
    col.setName(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
    col.setRelatedEntity(prop);
  }
  if (null != (prop=field.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
    col.setRelationshipType(prop);
  }
  if (col.getTalendType() == null) {
    throw new UnsupportedOperationException(""String_Node_Str"" + in);
  }
  return col;
}",0.9864575908766928
125912,"private static Schema copyDynamicColumnProperties(Schema schema,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  Map<String,String> props=new HashMap<String,String>();
  if (in.getId() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_ID,in.getId());
  }
  if (in.getComment() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME,in.getLabel());
  }
  if (in.isReadOnly()) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.addQuotesIfNotExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return schema;
}","private static Schema copyDynamicColumnProperties(Schema schema,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  Map<String,String> props=new HashMap<String,String>();
  if (in.getId() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_ID,in.getId());
  }
  if (in.getComment() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_COLUMN_NAME,in.getLabel());
  }
  if (in.isReadOnly()) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_DYNAMIC_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.removeQuotesIfExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    schema=AvroUtils.setProperty(schema,Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return schema;
}",0.9979716024340772
125913,"private void createValidationRules(RepositoryNode node,final IRepositoryViewObject repObj,org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable,ERepositoryObjectType repositoryObjectType,List<IRepositoryViewObject> validationRules){
  if (validationRules.isEmpty()) {
    return;
  }
  IRepositoryViewObject vo=node.getObject();
  if (vo instanceof MetadataTableRepositoryObject) {
    vo=((MetadataTableRepositoryObject)vo).getViewObject();
  }
  if (vo != null) {
    String schema=vo.getId();
    schema=schema + ""String_Node_Str"" + metadataTable.getLabel();
    List<IRepositoryViewObject> objs=getValidationRuleObjsFromSchema(validationRules,schema);
    if (objs.size() > 0) {
      int num=objs.size();
      StringBuffer floderName=new StringBuffer();
      floderName.append(Messages.getString(""String_Node_Str""));
      floderName.append(""String_Node_Str"");
      floderName.append(num);
      floderName.append(""String_Node_Str"");
      RepositoryNode validationRulesNode=new StableRepositoryNode(node,floderName.toString(),ECoreImage.FOLDER_CLOSE_ICON);
      validationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER);
      node.getChildren().add(validationRulesNode);
      for (      IRepositoryViewObject obj : objs) {
        addNode(validationRulesNode,ERepositoryObjectType.METADATA_VALIDATION_RULES,obj,validationRules);
      }
    }
  }
}","private void createValidationRules(RepositoryNode node,final IRepositoryViewObject repObj,org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable,ERepositoryObjectType repositoryObjectType,List<IRepositoryViewObject> validationRules){
  if (validationRules.isEmpty()) {
    return;
  }
  IRepositoryViewObject vo=node.getObject();
  if (vo instanceof MetadataTableRepositoryObject) {
    vo=((MetadataTableRepositoryObject)vo).getViewObject();
  }
  if (vo != null) {
    String schema=vo.getId();
    schema=schema + ""String_Node_Str"" + metadataTable.getLabel();
    if (metadataTable instanceof SAPBWTable) {
      String innerIOType=((SAPBWTable)metadataTable).getInnerIOType();
      if (innerIOType != null) {
        schema=schema + ""String_Node_Str"" + innerIOType;
      }
    }
    List<IRepositoryViewObject> objs=getValidationRuleObjsFromSchema(validationRules,schema);
    if (objs.size() > 0) {
      int num=objs.size();
      StringBuffer floderName=new StringBuffer();
      floderName.append(Messages.getString(""String_Node_Str""));
      floderName.append(""String_Node_Str"");
      floderName.append(num);
      floderName.append(""String_Node_Str"");
      RepositoryNode validationRulesNode=new StableRepositoryNode(node,floderName.toString(),ECoreImage.FOLDER_CLOSE_ICON);
      validationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER);
      node.getChildren().add(validationRulesNode);
      for (      IRepositoryViewObject obj : objs) {
        addNode(validationRulesNode,ERepositoryObjectType.METADATA_VALIDATION_RULES,obj,validationRules);
      }
    }
  }
}",0.9285254346426272
125914,"private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class) && !isSAPBWTable(obj)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPTableImpl.class)) {
        return current;
      }
      if (isSAPBWTable(obj) && current.getClassForDoubleClick().equals(SAPBWTableImpl.class)) {
        return current;
      }
      if (isSAPBapiTable(obj) && current.getClassForDoubleClick().equals(MetadataTableImpl.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}","private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPTableImpl.class)) {
        return current;
      }
      if (isSAPBWTable(obj) && current.getClassForDoubleClick().equals(SAPBWTableImpl.class)) {
        return current;
      }
      if (isSAPBapiTable(obj) && current.getClassForDoubleClick().equals(MetadataTableImpl.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}",0.9968935329003108
125915,"private void createValidationRules(RepositoryNode node,final IRepositoryViewObject repObj,org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable,ERepositoryObjectType repositoryObjectType,List<IRepositoryViewObject> validationRules){
  if (validationRules.isEmpty()) {
    return;
  }
  IRepositoryViewObject vo=node.getObject();
  if (vo instanceof MetadataTableRepositoryObject) {
    vo=((MetadataTableRepositoryObject)vo).getViewObject();
  }
  if (vo != null) {
    String schema=vo.getId();
    schema=schema + ""String_Node_Str"" + metadataTable.getLabel();
    List<IRepositoryViewObject> objs=getValidationRuleObjsFromSchema(validationRules,schema);
    if (objs.size() > 0) {
      int num=objs.size();
      StringBuffer floderName=new StringBuffer();
      floderName.append(Messages.getString(""String_Node_Str""));
      floderName.append(""String_Node_Str"");
      floderName.append(num);
      floderName.append(""String_Node_Str"");
      RepositoryNode validationRulesNode=new StableRepositoryNode(node,floderName.toString(),ECoreImage.FOLDER_CLOSE_ICON);
      validationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER);
      node.getChildren().add(validationRulesNode);
      for (      IRepositoryViewObject obj : objs) {
        addNode(validationRulesNode,ERepositoryObjectType.METADATA_VALIDATION_RULES,obj,validationRules);
      }
    }
  }
}","private void createValidationRules(RepositoryNode node,final IRepositoryViewObject repObj,org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable,ERepositoryObjectType repositoryObjectType,List<IRepositoryViewObject> validationRules){
  if (validationRules.isEmpty()) {
    return;
  }
  IRepositoryViewObject vo=node.getObject();
  if (vo instanceof MetadataTableRepositoryObject) {
    vo=((MetadataTableRepositoryObject)vo).getViewObject();
  }
  if (vo != null) {
    String schema=vo.getId();
    schema=schema + ""String_Node_Str"" + metadataTable.getLabel();
    if (metadataTable instanceof SAPBWTable) {
      String innerIOType=((SAPBWTable)metadataTable).getInnerIOType();
      if (innerIOType != null) {
        schema=schema + ""String_Node_Str"" + innerIOType;
      }
    }
    List<IRepositoryViewObject> objs=getValidationRuleObjsFromSchema(validationRules,schema);
    if (objs.size() > 0) {
      int num=objs.size();
      StringBuffer floderName=new StringBuffer();
      floderName.append(Messages.getString(""String_Node_Str""));
      floderName.append(""String_Node_Str"");
      floderName.append(num);
      floderName.append(""String_Node_Str"");
      RepositoryNode validationRulesNode=new StableRepositoryNode(node,floderName.toString(),ECoreImage.FOLDER_CLOSE_ICON);
      validationRulesNode.setProperties(EProperties.CONTENT_TYPE,ERepositoryObjectType.METADATA_VALIDATIONS_RULES_FOLDER);
      node.getChildren().add(validationRulesNode);
      for (      IRepositoryViewObject obj : objs) {
        addNode(validationRulesNode,ERepositoryObjectType.METADATA_VALIDATION_RULES,obj,validationRules);
      }
    }
  }
}",0.9285254346426272
125916,"public static void updatePalette(final boolean isFavorite){
  faState=isFavorite;
  if (skipUpdatePalette) {
    return;
  }
  IComponentsFactory components=ComponentsFactoryProvider.getInstance();
  Display display=DisplayUtils.getDisplay();
  final IDesignerCoreUIService designerCoreUIService=CoreUIPlugin.getDefault().getDesignerCoreUIService();
  if (paletteRoot != null) {
    display.syncExec(new Runnable(){
      @Override public void run(){
        final List oldRoots=new ArrayList(paletteRoot.getChildren());
        for (Iterator it=oldRoots.iterator(); it.hasNext(); ) {
          Object obj=it.next();
          if (obj instanceof TalendPaletteGroup) {
            continue;
          }
          it.remove();
        }
        paletteRoot.setChildren(oldRoots);
      }
    }
);
    paletteRoot=designerCoreUIService.createPalette(components,paletteRoot,isFavorite);
  }
 else {
    paletteRoot=designerCoreUIService.createPalette(components,isFavorite);
  }
  if (extraPaletteEntry == null || extraPaletteEntry.size() == 0) {
    display.syncExec(new Runnable(){
      @Override public void run(){
        extraPaletteEntry=designerCoreUIService.createJobletEtnry();
      }
    }
);
  }
}","public static void updatePalette(final boolean isFavorite){
  faState=isFavorite;
  if (skipUpdatePalette) {
    return;
  }
  IComponentsFactory components=ComponentsFactoryProvider.getInstance();
  Display display=DisplayUtils.getDisplay();
  final IDesignerCoreUIService designerCoreUIService=CoreUIPlugin.getDefault().getDesignerCoreUIService();
  if (paletteRoot != null) {
    display.syncExec(new Runnable(){
      @Override public void run(){
        final List oldRoots=new ArrayList(paletteRoot.getChildren());
        for (Iterator it=oldRoots.iterator(); it.hasNext(); ) {
          Object obj=it.next();
          if (obj instanceof TalendPaletteGroup) {
            continue;
          }
          it.remove();
        }
        paletteRoot.setChildren(oldRoots);
      }
    }
);
    paletteRoot=designerCoreUIService.createPalette(components,paletteRoot,isFavorite);
  }
 else {
    paletteRoot=designerCoreUIService.createPalette(components,isFavorite);
  }
  if (extraPaletteEntry == null || extraPaletteEntry.size() == 0) {
    display.syncExec(new Runnable(){
      @Override public void run(){
        extraPaletteEntry=designerCoreUIService.createPaletteEtnry();
      }
    }
);
  }
}",0.9946125155408204
125917,"public static boolean isGenericRepositoryValue(Connection connection,String paramName){
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      return handler.isGenericRepositoryValue(connection,paramName);
    }
  }
  return false;
}","public static boolean isGenericRepositoryValue(Connection connection,List<ComponentProperties> componentProperties,String paramName){
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      return handler.isGenericRepositoryValue(componentProperties,paramName);
    }
  }
  return false;
}",0.8938714499252616
125918,"@Override public boolean isGenericRepositoryValue(Connection connection,String paramName){
  return false;
}","@Override public boolean isGenericRepositoryValue(List<ComponentProperties> componentProperties,String paramName){
  return false;
}",0.8333333333333334
125919,"/** 
 * DOC hcyi Comment method ""isGenericRepositoryValue"".
 * @param connection
 * @param paramName
 * @return
 */
public boolean isGenericRepositoryValue(Connection connection,String paramName);","/** 
 * DOC hcyi Comment method ""isGenericRepositoryValue"".
 * @param connection
 * @param paramName
 * @return
 */
public boolean isGenericRepositoryValue(List<ComponentProperties> componentProperties,String paramName);",0.8509615384615384
125920,"private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPTableImpl.class)) {
        return current;
      }
      if (isSAPBWTable(obj) && current.getClassForDoubleClick().equals(SAPBWTableImpl.class)) {
        return current;
      }
      if (isSAPBapiTable(obj) && current.getClassForDoubleClick().equals(MetadataTableImpl.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}","private ITreeContextualAction getAction(RepositoryNode obj){
  final boolean isCDC=isLinkCDCNode(obj);
  final ERepositoryObjectType nodeType=(ERepositoryObjectType)obj.getProperties(EProperties.CONTENT_TYPE);
  for (  ITreeContextualAction current : contextualsActions) {
    if (current.getClassForDoubleClick() == null) {
      return null;
    }
    if (isCDC) {
      if (current.getClassForDoubleClick().equals(CDCConnection.class)) {
        return current;
      }
      continue;
    }
    if (nodeType != null && (nodeType.equals(ERepositoryObjectType.METADATA_CON_TABLE) || (nodeType.equals(ERepositoryObjectType.METADATA_CON_COLUMN)))) {
      if (current.getClassForDoubleClick().equals(IMetadataTable.class) && !isSAPBWTable(obj)) {
        return current;
      }
      if (isEBCDICTable(obj) && current.getClassForDoubleClick().equals(EbcdicConnection.class)) {
        return current;
      }
      if (isSAPTable(obj) && current.getClassForDoubleClick().equals(SAPTableImpl.class)) {
        return current;
      }
      if (isSAPBWTable(obj) && current.getClassForDoubleClick().equals(SAPBWTableImpl.class)) {
        return current;
      }
      if (isSAPBapiTable(obj) && current.getClassForDoubleClick().equals(MetadataTableImpl.class)) {
        return current;
      }
      if (isMDMTable(obj) && current.getClassForDoubleClick().equals(MDMConnection.class)) {
        return current;
      }
      if (isHL7Table(obj) && current.getClassForDoubleClick().equals(HL7Connection.class)) {
        return current;
      }
      if (isEDIFACTTable(obj) && current.getClassForDoubleClick().equals(EDIFACTConnection.class)) {
        return current;
      }
      if (isBRMSTable(obj) && current.getClassForDoubleClick().equals(BRMSConnection.class)) {
        return current;
      }
      for (      IRepositoryContentHandler handler : RepositoryContentManager.getHandlers()) {
        if (handler.isOwnTable(obj,current.getClassForDoubleClick())) {
          return current;
        }
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_QUERY)) {
      if (current.getClassForDoubleClick().equals(QueryEMFRepositoryNode.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_CON_CDC)) {
      return null;
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_FUNCTION)) {
      if (current.getClassForDoubleClick().equals(SAPFunctionRepositoryObject.class) || current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SAP_IDOC)) {
      if (current.getClassForDoubleClick().equals(SAPIDocRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.METADATA_SALESFORCE_MODULE)) {
      if (current.getClassForDoubleClick().equals(SalesforceModuleRepositoryObject.class)) {
        return current;
      }
    }
 else     if (nodeType != null && nodeType.equals(ERepositoryObjectType.SERVICESOPERATION)) {
      if (current.getClassForDoubleClick().getSimpleName().equals(Messages.getString(""String_Node_Str""))) {
        return current;
      }
    }
 else     if (obj.getObject() != null && current.getClassForDoubleClick().getSimpleName().equals(obj.getObject().getProperty().getItem().eClass().getName())) {
      return current;
    }
  }
  return null;
}",0.9968935329003108
125921,"/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  BaseFieldTypeBuilder<Schema> ftb=in.isNullable() ? fb.type() : fb.type().nullable();
  String defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    return defaultValue == null ? ftb.longType().noDefault() : ftb.longType().longDefault(Long.parseLong(defaultValue));
  }
  if (JavaTypesManager.INTEGER.getId().equals(tt) || JavaTypesManager.SHORT.getId().equals(tt) || JavaTypesManager.BYTE.getId().equals(tt)) {
    return defaultValue == null ? ftb.intType().noDefault() : ftb.intType().intDefault(Integer.parseInt(defaultValue));
  }
  if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    return defaultValue == null ? ftb.doubleType().noDefault() : ftb.doubleType().doubleDefault(Double.parseDouble(defaultValue));
  }
  if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    return defaultValue == null ? ftb.floatType().noDefault() : ftb.floatType().floatDefault(Float.parseFloat(defaultValue));
  }
  if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    Decimal d=LogicalTypes.decimal((int)in.getLength(),(int)in.getPrecision());
    Schema bigdecimal=d.addToSchema(Schema.create(Schema.Type.BYTES));
    return fb.type(bigdecimal).withDefault(defaultValue);
  }
  if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    return defaultValue == null ? ftb.booleanType().noDefault() : ftb.booleanType().booleanDefault(Boolean.parseBoolean(defaultValue));
  }
  if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.DATE.getId().equals(tt)) {
    return ftb.longType().noDefault();
  }
  if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    return defaultValue == null ? ftb.stringType().noDefault() : ftb.stringType().stringDefault(defaultValue);
  }
  if (JavaTypesManager.OBJECT.getId().equals(tt) || JavaTypesManager.DYNAMIC.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
    return ftb.array().items().bytesType().noDefault();
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + tt);
}","/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  BaseFieldTypeBuilder<Schema> ftb=in.isNullable() ? fb.type().nullable() : fb.type();
  String defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    return defaultValue == null ? ftb.longType().noDefault() : ftb.longType().longDefault(Long.parseLong(defaultValue));
  }
  if (JavaTypesManager.INTEGER.getId().equals(tt) || JavaTypesManager.SHORT.getId().equals(tt) || JavaTypesManager.BYTE.getId().equals(tt)) {
    return defaultValue == null ? ftb.intType().noDefault() : ftb.intType().intDefault(Integer.parseInt(defaultValue));
  }
  if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    return defaultValue == null ? ftb.doubleType().noDefault() : ftb.doubleType().doubleDefault(Double.parseDouble(defaultValue));
  }
  if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    return defaultValue == null ? ftb.floatType().noDefault() : ftb.floatType().floatDefault(Float.parseFloat(defaultValue));
  }
  if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    Decimal d=LogicalTypes.decimal((int)in.getLength(),(int)in.getPrecision());
    Schema bigdecimal=d.addToSchema(Schema.create(Schema.Type.BYTES));
    return defaultValue == null ? fb.type(bigdecimal).noDefault() : fb.type(bigdecimal).withDefault(defaultValue);
  }
  if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    return defaultValue == null ? ftb.booleanType().noDefault() : ftb.booleanType().booleanDefault(Boolean.parseBoolean(defaultValue));
  }
  if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.DATE.getId().equals(tt)) {
    return ftb.longType().noDefault();
  }
  if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    return defaultValue == null ? ftb.stringType().noDefault() : ftb.stringType().stringDefault(defaultValue);
  }
  if (JavaTypesManager.OBJECT.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
    return ftb.array().items().bytesType().noDefault();
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + tt);
}",0.9784320438206092
125922,"/** 
 * Unit tests for   {@link org.talend.core.model.metadata.MetadataToolHelper#convertToAvro(IMetadataTable)}Test a simple MetadataTable.
 */
@Test public void testConvertToAvro_Basic(){
  MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
  table.setLabel(""String_Node_Str"");
  table.setComment(""String_Node_Str"");
  ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn> columns=new ArrayList<>();
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.INTEGER.getId());
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.STRING.getId());
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.BOOLEAN.getId());
    columns.add(column);
  }
  table.getColumns().addAll(columns);
  Schema s=MetadataToolAvroHelper.convertToAvro(table);
  assertThat(s.getType(),is(Schema.Type.RECORD));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getFields(),hasSize(3));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COMMENT),is(""String_Node_Str""));
  Schema.Field f=s.getFields().get(0);
  assertThat(f.schema().getType(),is(Schema.Type.INT));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(1);
  assertThat(f.schema().getType(),is(Schema.Type.STRING));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(2);
  assertThat(f.schema().getType(),is(Schema.Type.BOOLEAN));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
}","/** 
 * Unit tests for   {@link org.talend.core.model.metadata.MetadataToolHelper#convertToAvro(IMetadataTable)}Test a simple MetadataTable.
 */
@Test public void testConvertToAvro_Basic(){
  MetadataTable table=ConnectionFactory.eINSTANCE.createMetadataTable();
  table.setLabel(""String_Node_Str"");
  table.setComment(""String_Node_Str"");
  ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn> columns=new ArrayList<>();
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.INTEGER.getId());
    column.setNullable(true);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.STRING.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(JavaTypesManager.BOOLEAN.getId());
    column.setNullable(false);
    columns.add(column);
  }
{
    org.talend.core.model.metadata.builder.connection.MetadataColumn column=ConnectionFactory.eINSTANCE.createMetadataColumn();
    column.setLabel(""String_Node_Str"");
    column.setTalendType(""String_Node_Str"");
    column.setNullable(false);
    columns.add(column);
  }
  table.getColumns().addAll(columns);
  Schema s=MetadataToolAvroHelper.convertToAvro(table);
  assertThat(s.getType(),is(Schema.Type.RECORD));
  assertThat(s.getName(),is(""String_Node_Str""));
  assertThat(s.getFields(),hasSize(4));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(s.getProp(Talend6SchemaConstants.TALEND6_COMMENT),is(""String_Node_Str""));
  Schema.Field f=s.getFields().get(0);
  assertTrue(AvroUtils.isNullable(f.schema()));
  assertThat(AvroUtils.unwrapIfNullable(f.schema()).getType(),is(Schema.Type.INT));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(1);
  assertThat(f.schema().getType(),is(Schema.Type.STRING));
  assertThat(f.name(),is(""String_Node_Str""));
  assertFalse(AvroUtils.isNullable(f.schema()));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(2);
  assertThat(f.schema().getType(),is(Schema.Type.BOOLEAN));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
  f=s.getFields().get(3);
  assertThat(f.schema().getType(),is(Schema.Type.BYTES));
  assertThat(f.name(),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_LABEL),is(""String_Node_Str""));
  assertThat(f.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE),is(""String_Node_Str""));
}",0.8556597454789016
125923,"public static void removeBWTable(Connection connection,String bwTableType,SAPBWTable table){
  Set<MetadataTable> bwTables=getBWTables(connection,bwTableType);
  if (bwTables.contains(table)) {
    bwTables.remove(table);
  }
}","public static void removeBWTable(Connection connection,String bwTableType,SAPBWTable table){
  List<SAPBWTable> bwTables=getBWTableList(connection,bwTableType);
  if (bwTables.contains(table)) {
    bwTables.remove(table);
  }
}",0.945054945054945
125924,"@Override public InputStream getStream(IPath path) throws IOException {
  return new BufferedInputStream(new FileInputStream((File)path2Object.get(path)));
}","@Override public InputStream getStream(IPath path,ImportItem importItem) throws IOException {
  return new BufferedInputStream(new FileInputStream((File)path2Object.get(path)));
}",0.9345238095238096
125925,"@Override public InputStream getStream(IPath path){
  return provider.getContents(path2Object.get(path));
}","@Override public InputStream getStream(IPath path,ImportItem importItem){
  return provider.getContents(path2Object.get(path));
}",0.9067796610169492
125926,"@Override public InputStream getStream(IPath path) throws IOException {
  return zipFile.getInputStream((ZipEntry)path2Object.get(path));
}","@Override public InputStream getStream(IPath path,ImportItem importItem) throws IOException {
  return zipFile.getInputStream((ZipEntry)path2Object.get(path));
}",0.9266666666666666
125927,"public InputStream getStream(IPath path,ImportItem importItem) throws IOException {
  return getStream(path,null);
}","public abstract InputStream getStream(IPath path,ImportItem importItem) throws IOException ;",0.7980769230769231
125928,"/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,in.getPattern());
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}","/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,TalendQuoteUtils.addQuotesIfNotExist(in.getPattern()));
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}",0.9931605471562276
125929,"/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
switch (nonnullable.getType()) {
case ARRAY:
    col.setTalendType(JavaTypesManager.LIST.getId());
  break;
case BOOLEAN:
col.setTalendType(JavaTypesManager.BOOLEAN.getId());
break;
case BYTES:
case FIXED:
col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
break;
case DOUBLE:
col.setTalendType(JavaTypesManager.DOUBLE.getId());
break;
case FLOAT:
col.setTalendType(JavaTypesManager.FLOAT.getId());
break;
case INT:
col.setTalendType(JavaTypesManager.INTEGER.getId());
break;
case LONG:
String prop=null;
if (null != (prop=nonnullable.getProp(SchemaConstants.TALEND_COLUMN_PATTERN))) {
col.setTalendType(JavaTypesManager.DATE.getId());
col.setPattern(prop);
}
 else {
col.setTalendType(JavaTypesManager.LONG.getId());
}
break;
case ENUM:
case STRING:
col.setTalendType(JavaTypesManager.STRING.getId());
break;
case RECORD:
case NULL:
case MAP:
case UNION:
default :
break;
}
col.setNullable(AvroUtils.isNullable(in));
String prop;
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_ID))) {
col.setId(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
col.setComment(in.getProp(Talend6SchemaConstants.TALEND6_ID));
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
col.setLabel(null);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
col.setReadOnly(Boolean.parseBoolean(prop));
}
for (String key : in.getJsonProps().keySet()) {
if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,in.getProp(key));
col.getTaggedValue().add(tv);
}
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
col.setKey(Boolean.parseBoolean(prop));
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
col.setSourceType(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
col.setTalendType(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
col.setPattern(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
Long value=Long.parseLong(prop);
col.setLength(value > 0 ? value : -1);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
Long value=Long.parseLong(prop);
col.setOriginalLength(value > 0 ? value : -1);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
col.setNullable(Boolean.parseBoolean(prop));
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
Long value=Long.parseLong(prop);
col.setPrecision(value > 0 ? value : -1);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
col.setDefaultValue(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
col.setName(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
col.setRelatedEntity(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
col.setRelationshipType(prop);
}
if (col.getTalendType() == null) {
throw new UnsupportedOperationException(""String_Node_Str"" + in);
}
return col;
}","/** 
 * @param in A field from an incoming schema
 * @return A MetadataColumn containing all the information from the Schema, including any information included theschema as JSON property annotations for Talend 6 generated schemas.
 */
public static org.talend.core.model.metadata.builder.connection.MetadataColumn convertFromAvro(Schema.Field field){
  org.talend.core.model.metadata.builder.connection.MetadataColumn col=ConnectionFactory.eINSTANCE.createMetadataColumn();
  Schema in=field.schema();
  col.setId(field.name());
  col.setLabel(field.name());
  col.setName(field.name());
  Schema nonnullable=AvroUtils.unwrapIfNullable(in);
switch (nonnullable.getType()) {
case ARRAY:
    col.setTalendType(JavaTypesManager.LIST.getId());
  break;
case BOOLEAN:
col.setTalendType(JavaTypesManager.BOOLEAN.getId());
break;
case BYTES:
case FIXED:
col.setTalendType(JavaTypesManager.BYTE_ARRAY.getId());
break;
case DOUBLE:
col.setTalendType(JavaTypesManager.DOUBLE.getId());
break;
case FLOAT:
col.setTalendType(JavaTypesManager.FLOAT.getId());
break;
case INT:
col.setTalendType(JavaTypesManager.INTEGER.getId());
break;
case LONG:
String prop=null;
if (null != (prop=nonnullable.getProp(SchemaConstants.TALEND_COLUMN_PATTERN))) {
col.setTalendType(JavaTypesManager.DATE.getId());
col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
}
 else {
col.setTalendType(JavaTypesManager.LONG.getId());
}
break;
case ENUM:
case STRING:
col.setTalendType(JavaTypesManager.STRING.getId());
break;
case RECORD:
case NULL:
case MAP:
case UNION:
default :
break;
}
col.setNullable(AvroUtils.isNullable(in));
String prop;
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_ID))) {
col.setId(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COMMENT))) {
col.setComment(in.getProp(Talend6SchemaConstants.TALEND6_ID));
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_LABEL))) {
col.setLabel(null);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_IS_READ_ONLY))) {
col.setReadOnly(Boolean.parseBoolean(prop));
}
for (String key : in.getJsonProps().keySet()) {
if (key.startsWith(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES)) {
String originalKey=key.substring(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES.length());
TaggedValue tv=TaggedValueHelper.createTaggedValue(originalKey,in.getProp(key));
col.getTaggedValue().add(tv);
}
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY))) {
col.setKey(Boolean.parseBoolean(prop));
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE))) {
col.setSourceType(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE))) {
col.setTalendType(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN))) {
col.setPattern(TalendQuoteUtils.addQuotesIfNotExist(prop));
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH))) {
Long value=Long.parseLong(prop);
col.setLength(value > 0 ? value : -1);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH))) {
Long value=Long.parseLong(prop);
col.setOriginalLength(value > 0 ? value : -1);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE))) {
col.setNullable(Boolean.parseBoolean(prop));
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION))) {
Long value=Long.parseLong(prop);
col.setPrecision(value > 0 ? value : -1);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT))) {
col.setDefaultValue(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME))) {
col.setName(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY))) {
col.setRelatedEntity(prop);
}
if (null != (prop=in.getProp(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE))) {
col.setRelationshipType(prop);
}
if (col.getTalendType() == null) {
throw new UnsupportedOperationException(""String_Node_Str"" + in);
}
return col;
}",0.9886025768087215
125930,"public static boolean isGenericRepositoryValue(Connection connection,String paramName){
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      return handler.isGenericRepositoryValue(connection,paramName);
    }
  }
  return false;
}","public static boolean isGenericRepositoryValue(Connection connection,List<ComponentProperties> componentProperties,String paramName){
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      return handler.isGenericRepositoryValue(componentProperties,paramName);
    }
  }
  return false;
}",0.8938714499252616
125931,"@Override public boolean isGenericRepositoryValue(Connection connection,String paramName){
  return false;
}","@Override public boolean isGenericRepositoryValue(List<ComponentProperties> componentProperties,String paramName){
  return false;
}",0.8333333333333334
125932,"/** 
 * DOC hcyi Comment method ""isGenericRepositoryValue"".
 * @param connection
 * @param paramName
 * @return
 */
public boolean isGenericRepositoryValue(Connection connection,String paramName);","/** 
 * DOC hcyi Comment method ""isGenericRepositoryValue"".
 * @param connection
 * @param paramName
 * @return
 */
public boolean isGenericRepositoryValue(List<ComponentProperties> componentProperties,String paramName);",0.8509615384615384
125933,"public static boolean isGenericRepositoryValue(Connection connection,String paramName){
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      return handler.isGenericRepositoryValue(connection,paramName);
    }
  }
  return false;
}","public static boolean isGenericRepositoryValue(Connection connection,List<ComponentProperties> componentProperties,String paramName){
  for (  IDragAndDropServiceHandler handler : DragAndDropManager.getHandlers()) {
    if (handler.canHandle(connection)) {
      return handler.isGenericRepositoryValue(componentProperties,paramName);
    }
  }
  return false;
}",0.8938714499252616
125934,"@Override public boolean isGenericRepositoryValue(Connection connection,String paramName){
  return false;
}","@Override public boolean isGenericRepositoryValue(List<ComponentProperties> componentProperties,String paramName){
  return false;
}",0.8333333333333334
125935,"/** 
 * DOC hcyi Comment method ""isGenericRepositoryValue"".
 * @param connection
 * @param paramName
 * @return
 */
public boolean isGenericRepositoryValue(Connection connection,String paramName);","/** 
 * DOC hcyi Comment method ""isGenericRepositoryValue"".
 * @param connection
 * @param paramName
 * @return
 */
public boolean isGenericRepositoryValue(List<ComponentProperties> componentProperties,String paramName);",0.8509615384615384
125936,"/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,in.getPattern());
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}","/** 
 * Copy all of the information from the IMetadataColumn in the form of key/value properties into an Avro object.
 * @param builder Any Avro builder capable of taking key/value in the form of strings.
 * @param in The element to copy information from.
 * @return the instance of the builder passed in.
 */
private static <T extends PropBuilder<T>>PropBuilder<T> copyColumnProperties(PropBuilder<T> builder,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  if (in.getId() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_ID,in.getId());
  }
  if (in.getComment() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COMMENT,in.getComment());
  }
  if (in.getLabel() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_LABEL,in.getLabel());
  }
  if (in.isReadOnly()) {
    builder.prop(Talend6SchemaConstants.TALEND6_IS_READ_ONLY,""String_Node_Str"");
  }
  for (  TaggedValue tv : in.getTaggedValue()) {
    String additionalTag=tv.getTag();
    if (tv.getValue() != null) {
      builder.prop(Talend6SchemaConstants.TALEND6_ADDITIONAL_PROPERTIES + additionalTag,tv.getValue());
    }
  }
  if (in.isKey()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_KEY,""String_Node_Str"");
  }
  if (in.getType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_SOURCE_TYPE,in.getSourceType());
  }
  if (in.getTalendType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_TALEND_TYPE,in.getTalendType());
  }
  if (in.getPattern() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PATTERN,in.getPattern());
  }
  if (in.getLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_LENGTH,String.valueOf((int)in.getLength()));
  }
  if (in.getOriginalLength() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_LENGTH,String.valueOf(in.getOriginalLength()));
  }
  if (in.isNullable()) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_IS_NULLABLE,""String_Node_Str"");
  }
  if (in.getPrecision() >= 0) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_PRECISION,String.valueOf(in.getPrecision()));
  }
  if (in.getInitialValue() != null && in.getInitialValue().getBody() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_DEFAULT,in.getInitialValue().getBody());
  }
  if (in.getName() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_ORIGINAL_DB_COLUMN_NAME,in.getName());
  }
  if (in.getRelatedEntity() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATED_ENTITY,in.getRelatedEntity());
  }
  if (in.getRelationshipType() != null) {
    builder.prop(Talend6SchemaConstants.TALEND6_COLUMN_RELATIONSHIP_TYPE,in.getRelationshipType());
  }
  return builder;
}",0.994166970470288
125937,"/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  BaseFieldTypeBuilder<Schema> ftb=in.isNullable() ? fb.type() : fb.type().nullable();
  String defaultValue=in.getInitialValue().getBody();
  String tt=in.getTalendType();
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    return defaultValue == null ? ftb.longType().noDefault() : ftb.longType().longDefault(Long.parseLong(defaultValue));
  }
  if (JavaTypesManager.INTEGER.getId().equals(tt) || JavaTypesManager.SHORT.getId().equals(tt) || JavaTypesManager.BYTE.getId().equals(tt)) {
    return defaultValue == null ? ftb.intType().noDefault() : ftb.intType().intDefault(Integer.parseInt(defaultValue));
  }
  if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    return defaultValue == null ? ftb.doubleType().noDefault() : ftb.doubleType().doubleDefault(Double.parseDouble(defaultValue));
  }
  if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    return defaultValue == null ? ftb.floatType().noDefault() : ftb.floatType().floatDefault(Float.parseFloat(defaultValue));
  }
  if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    Decimal d=LogicalTypes.decimal((int)in.getLength(),(int)in.getPrecision());
    Schema bigdecimal=d.addToSchema(Schema.create(Schema.Type.BYTES));
    return fb.type(bigdecimal).withDefault(defaultValue);
  }
  if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    return defaultValue == null ? ftb.booleanType().noDefault() : ftb.booleanType().booleanDefault(Boolean.parseBoolean(defaultValue));
  }
  if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.DATE.getId().equals(tt)) {
    return ftb.longType().noDefault();
  }
  if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    return defaultValue == null ? ftb.stringType().noDefault() : ftb.stringType().stringDefault(defaultValue);
  }
  if (JavaTypesManager.OBJECT.getId().equals(tt) || JavaTypesManager.DYNAMIC.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
    return ftb.array().items().bytesType().noDefault();
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + tt);
}","/** 
 * Build a field into a schema using enriched properties from the incoming column.
 */
private static FieldAssembler<Schema> convertToAvro(FieldAssembler<Schema> fa,org.talend.core.model.metadata.builder.connection.MetadataColumn in){
  FieldBuilder<Schema> fb=fa.name(in.getLabel());
  copyColumnProperties(fb,in);
  BaseFieldTypeBuilder<Schema> ftb=in.isNullable() ? fb.type() : fb.type().nullable();
  String defaultValue=null;
  Expression initialValue=in.getInitialValue();
  if (initialValue != null) {
    defaultValue=initialValue.getBody();
  }
  String tt=in.getTalendType();
  if (JavaTypesManager.LONG.getId().equals(tt)) {
    return defaultValue == null ? ftb.longType().noDefault() : ftb.longType().longDefault(Long.parseLong(defaultValue));
  }
  if (JavaTypesManager.INTEGER.getId().equals(tt) || JavaTypesManager.SHORT.getId().equals(tt) || JavaTypesManager.BYTE.getId().equals(tt)) {
    return defaultValue == null ? ftb.intType().noDefault() : ftb.intType().intDefault(Integer.parseInt(defaultValue));
  }
  if (JavaTypesManager.DOUBLE.getId().equals(tt)) {
    return defaultValue == null ? ftb.doubleType().noDefault() : ftb.doubleType().doubleDefault(Double.parseDouble(defaultValue));
  }
  if (JavaTypesManager.FLOAT.getId().equals(tt)) {
    return defaultValue == null ? ftb.floatType().noDefault() : ftb.floatType().floatDefault(Float.parseFloat(defaultValue));
  }
  if (JavaTypesManager.BIGDECIMAL.getId().equals(tt)) {
    Decimal d=LogicalTypes.decimal((int)in.getLength(),(int)in.getPrecision());
    Schema bigdecimal=d.addToSchema(Schema.create(Schema.Type.BYTES));
    return fb.type(bigdecimal).withDefault(defaultValue);
  }
  if (JavaTypesManager.BOOLEAN.getId().equals(tt)) {
    return defaultValue == null ? ftb.booleanType().noDefault() : ftb.booleanType().booleanDefault(Boolean.parseBoolean(defaultValue));
  }
  if (JavaTypesManager.BYTE_ARRAY.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.DATE.getId().equals(tt)) {
    return ftb.longType().noDefault();
  }
  if (JavaTypesManager.STRING.getId().equals(tt) || JavaTypesManager.FILE.getId().equals(tt) || JavaTypesManager.DIRECTORY.getId().equals(tt)|| JavaTypesManager.VALUE_LIST.getId().equals(tt)|| JavaTypesManager.CHARACTER.getId().equals(tt)|| JavaTypesManager.PASSWORD.getId().equals(tt)) {
    return defaultValue == null ? ftb.stringType().noDefault() : ftb.stringType().stringDefault(defaultValue);
  }
  if (JavaTypesManager.OBJECT.getId().equals(tt) || JavaTypesManager.DYNAMIC.getId().equals(tt)) {
    return defaultValue == null ? ftb.bytesType().noDefault() : ftb.bytesType().bytesDefault(defaultValue);
  }
  if (JavaTypesManager.LIST.getId().equals(tt)) {
    return ftb.array().items().bytesType().noDefault();
  }
  throw new UnsupportedOperationException(""String_Node_Str"" + tt);
}",0.979947689625109
125938,"public static boolean isDeleteOrReselectMap(ConnectionItem connItem,List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,EUpdateResult> deletedOrReselectTables){
  for (  IMetadataTable oldTable : oldTables) {
    String prefix;
    boolean isDeleted=true;
    String oldtableLabel=oldTable.getLabel();
    String oldtableId=oldTable.getId();
    for (    IMetadataTable newTable : newTables) {
      String tableLabel=newTable.getLabel();
      String tableId=newTable.getId();
      if (tableLabel.equals(oldtableLabel)) {
        isDeleted=false;
        if (!tableId.equals(oldtableId)) {
          prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
          deletedOrReselectTables.put(prefix + tableLabel,EUpdateResult.RELOAD);
        }
      }
    }
    if (isDeleted) {
      prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
      deletedOrReselectTables.put(prefix + oldtableLabel,EUpdateResult.DELETE);
    }
  }
  return !deletedOrReselectTables.isEmpty();
}","public static boolean isDeleteOrReselectMap(ConnectionItem connItem,List<IMetadataTable> newTables,List<IMetadataTable> oldTables,Map<String,EUpdateResult> deletedOrReselectTables){
  for (  IMetadataTable oldTable : oldTables) {
    String prefix;
    boolean isDeleted=true;
    String oldtableLabel=oldTable.getLabel();
    String oldtableId=oldTable.getId();
    for (    IMetadataTable newTable : newTables) {
      String tableLabel=newTable.getLabel();
      String tableId=newTable.getId();
      if (tableLabel.equals(oldtableLabel)) {
        isDeleted=false;
        String newInnerIOType=newTable.getAdditionalProperties().get(SAPBWTableHelper.SAP_INFOOBJECT_INNER_TYPE);
        String oldInnerIOType=oldTable.getAdditionalProperties().get(SAPBWTableHelper.SAP_INFOOBJECT_INNER_TYPE);
        if (newInnerIOType != null) {
          if (newInnerIOType.equals(oldInnerIOType) && !tableId.equals(oldtableId)) {
            prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
            deletedOrReselectTables.put(prefix + tableLabel,EUpdateResult.RELOAD);
          }
          continue;
        }
        if (!tableId.equals(oldtableId)) {
          prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
          deletedOrReselectTables.put(prefix + tableLabel,EUpdateResult.RELOAD);
        }
      }
    }
    if (isDeleted) {
      prefix=connItem.getProperty().getId() + UpdatesConstants.SEGMENT_LINE;
      deletedOrReselectTables.put(prefix + oldtableLabel,EUpdateResult.DELETE);
    }
  }
  return !deletedOrReselectTables.isEmpty();
}",0.7623762376237624
125939,"public static String resolveSha1(String nexusUrl,final String userName,final String password,String repositoryId,String groupId,String artifactId,String version) throws Exception {
  HttpURLConnection urlConnection=null;
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (userName != null && !""String_Node_Str"".equals(userName)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(userName,password.toCharArray());
      }
    }
);
  }
  try {
    String service=NexusConstants.SERVICES_RESOLVE + ""String_Node_Str"" + artifactId+ ""String_Node_Str""+ groupId+ ""String_Node_Str""+ repositoryId+ ""String_Node_Str""+ version;
    urlConnection=getHttpURLConnection(nexusUrl,service,userName,password);
    SAXReader saxReader=new SAXReader();
    InputStream inputStream=urlConnection.getInputStream();
    Document document=saxReader.read(inputStream);
    Node sha1Node=document.selectSingleNode(""String_Node_Str"");
    String sha1=null;
    if (sha1Node != null) {
      sha1=sha1Node.getText();
    }
    return sha1;
  }
  finally {
    Authenticator.setDefault(defaultAuthenticator);
    if (null != urlConnection) {
      urlConnection.disconnect();
    }
  }
}","public static String resolveSha1(String nexusUrl,final String userName,final String password,String repositoryId,String groupId,String artifactId,String version) throws Exception {
  HttpURLConnection urlConnection=null;
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (userName != null && !""String_Node_Str"".equals(userName)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(userName,password.toCharArray());
      }
    }
);
  }
  try {
    String service=NexusConstants.SERVICES_RESOLVE + ""String_Node_Str"" + artifactId+ ""String_Node_Str""+ groupId+ ""String_Node_Str""+ repositoryId+ ""String_Node_Str""+ version;
    urlConnection=getHttpURLConnection(nexusUrl,service,userName,password);
    SAXReader saxReader=new SAXReader();
    InputStream inputStream=urlConnection.getInputStream();
    Document document=saxReader.read(inputStream);
    Node sha1Node=document.selectSingleNode(""String_Node_Str"");
    String sha1=null;
    if (sha1Node != null) {
      sha1=sha1Node.getText();
    }
    return sha1;
  }
 catch (  FileNotFoundException e) {
    return null;
  }
 finally {
    Authenticator.setDefault(defaultAuthenticator);
    if (null != urlConnection) {
      urlConnection.disconnect();
    }
  }
}",0.9788182831661092
125940,"/** 
 * DOC wchen Comment method ""deployFile"".
 * @param file
 * @param mavenUri snaopshot mvn uri
 * @param monitorWrap
 */
private void deployFile(File file,String snapshotMavenUri,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
          if (snapshotMavenUri == null) {
            String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
            if (urisFromIndex != null) {
              final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
              for (              String uri : mvnUris) {
                sourceAndMavenUri.put(uri,jarFile.getAbsolutePath());
              }
            }
            sourceAndMavenUri.put(defaultMavenUri,jarFile.getAbsolutePath());
          }
 else {
            sourceAndMavenUri.put(snapshotMavenUri,jarFile.getAbsolutePath());
          }
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
      if (snapshotMavenUri == null) {
        String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
        if (urisFromIndex != null) {
          final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
          for (          String uri : mvnUris) {
            sourceAndMavenUri.put(uri,file.getAbsolutePath());
          }
        }
        sourceAndMavenUri.put(defaultMavenUri,file.getAbsolutePath());
      }
 else {
        sourceAndMavenUri.put(snapshotMavenUri,file.getAbsolutePath());
      }
      deployer.deployToLocalMaven(sourceAndMavenUri);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}","/** 
 * DOC wchen Comment method ""deployFile"".
 * @param file
 * @param mavenUri snaopshot mvn uri
 * @param monitorWrap
 */
private void deployFile(File file,String snapshotMavenUri,boolean updateRemoteJar,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
          if (snapshotMavenUri == null) {
            String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
            if (urisFromIndex != null) {
              final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
              for (              String uri : mvnUris) {
                sourceAndMavenUri.put(uri,jarFile.getAbsolutePath());
              }
            }
            sourceAndMavenUri.put(defaultMavenUri,jarFile.getAbsolutePath());
          }
 else {
            sourceAndMavenUri.put(snapshotMavenUri,jarFile.getAbsolutePath());
          }
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
      if (snapshotMavenUri == null) {
        String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
        if (urisFromIndex != null) {
          final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
          for (          String uri : mvnUris) {
            sourceAndMavenUri.put(uri,file.getAbsolutePath());
          }
        }
        sourceAndMavenUri.put(defaultMavenUri,file.getAbsolutePath());
      }
 else {
        sourceAndMavenUri.put(snapshotMavenUri,file.getAbsolutePath());
      }
      deployer.deployToLocalMaven(sourceAndMavenUri,updateRemoteJar);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}",0.9914493373236426
125941,"/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  EMap<String,String> libIndex=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
  EMap<String,String> mavenIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    File fileToDeploy=null;
    String moduleLocation=module.getModuleLocaion();
    Set<String> toDeploy=new HashSet<String>();
    if (module.getMavenUri() == null && mavenIndex.get(module.getModuleName()) != null) {
      final String[] split=mavenIndex.get(module.getModuleName()).split(MavenUrlHelper.MVN_INDEX_SPLITER);
      for (      String mvnUri : split) {
        toDeploy.add(mvnUri);
      }
    }
 else {
      toDeploy.add(module.getMavenUriSnapshot());
    }
    for (    String mavenUri : toDeploy) {
      if (checkJarInstalledInMaven(mavenUri)) {
        continue;
      }
      boolean found=false;
      if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
        if (libIndex.containsKey(module.getModuleName())) {
          String relativePath=libIndex.get(module.getModuleName());
          if (!relativePath.equals(moduleLocation)) {
            if (!urlWarned.contains(moduleLocation)) {
              System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
              urlWarned.add(moduleLocation);
            }
            moduleLocation=relativePath;
          }
        }
        if (checkJarInstalledFromPlatform(moduleLocation)) {
          libIndex.put(module.getModuleName(),moduleLocation);
          modified=true;
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(moduleLocation));
        }
      }
      if (!found) {
        EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
        String relativePath=jarsToRelative.get(module.getModuleName());
        if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(relativePath));
        }
      }
      if (!found) {
        try {
          fileToDeploy=getJarFile(module.getModuleName());
        }
 catch (        MalformedURLException e) {
          ExceptionHandler.process(e);
        }
        if (fileToDeploy != null) {
          found=true;
        }
      }
      if (fileToDeploy != null && !fileToDeploy.exists()) {
        fileToDeploy=null;
        found=false;
      }
      if (!found) {
        ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
      }
      if (fileToDeploy != null) {
        deployFile(fileToDeploy,mavenUri,monitorWrap);
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}","/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  EMap<String,String> libIndex=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
  EMap<String,String> mavenIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    File fileToDeploy=null;
    String moduleLocation=module.getModuleLocaion();
    Set<String> toDeploy=new HashSet<String>();
    if (module.getMavenUri() == null && mavenIndex.get(module.getModuleName()) != null) {
      final String[] split=mavenIndex.get(module.getModuleName()).split(MavenUrlHelper.MVN_INDEX_SPLITER);
      for (      String mvnUri : split) {
        toDeploy.add(mvnUri);
      }
    }
 else {
      toDeploy.add(module.getMavenUriSnapshot());
    }
    for (    String mavenUri : toDeploy) {
      if (checkJarInstalledInMaven(mavenUri)) {
        continue;
      }
      boolean found=false;
      if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
        if (libIndex.containsKey(module.getModuleName())) {
          String relativePath=libIndex.get(module.getModuleName());
          if (!relativePath.equals(moduleLocation)) {
            if (!urlWarned.contains(moduleLocation)) {
              System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
              urlWarned.add(moduleLocation);
            }
            moduleLocation=relativePath;
          }
        }
        if (checkJarInstalledFromPlatform(moduleLocation)) {
          libIndex.put(module.getModuleName(),moduleLocation);
          modified=true;
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(moduleLocation));
        }
      }
      if (!found) {
        EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
        String relativePath=jarsToRelative.get(module.getModuleName());
        if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(relativePath));
        }
      }
      if (!found) {
        try {
          fileToDeploy=getJarFile(module.getModuleName());
        }
 catch (        MalformedURLException e) {
          ExceptionHandler.process(e);
        }
        if (fileToDeploy != null) {
          found=true;
        }
      }
      if (fileToDeploy != null && !fileToDeploy.exists()) {
        fileToDeploy=null;
        found=false;
      }
      if (!found) {
        ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
      }
      if (fileToDeploy != null) {
        deployFile(fileToDeploy,mavenUri,false,monitorWrap);
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}",0.9990003332222592
125942,"public static String resolveSha1(String nexusUrl,final String userName,final String password,String repositoryId,String groupId,String artifactId,String version) throws Exception {
  HttpURLConnection urlConnection=null;
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (userName != null && !""String_Node_Str"".equals(userName)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(userName,password.toCharArray());
      }
    }
);
  }
  try {
    String service=NexusConstants.SERVICES_RESOLVE + ""String_Node_Str"" + artifactId+ ""String_Node_Str""+ groupId+ ""String_Node_Str""+ repositoryId+ ""String_Node_Str""+ version;
    urlConnection=getHttpURLConnection(nexusUrl,service,userName,password);
    SAXReader saxReader=new SAXReader();
    InputStream inputStream=urlConnection.getInputStream();
    Document document=saxReader.read(inputStream);
    Node sha1Node=document.selectSingleNode(""String_Node_Str"");
    String sha1=null;
    if (sha1Node != null) {
      sha1=sha1Node.getText();
    }
    return sha1;
  }
  finally {
    Authenticator.setDefault(defaultAuthenticator);
    if (null != urlConnection) {
      urlConnection.disconnect();
    }
  }
}","public static String resolveSha1(String nexusUrl,final String userName,final String password,String repositoryId,String groupId,String artifactId,String version) throws Exception {
  HttpURLConnection urlConnection=null;
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (userName != null && !""String_Node_Str"".equals(userName)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(userName,password.toCharArray());
      }
    }
);
  }
  try {
    String service=NexusConstants.SERVICES_RESOLVE + ""String_Node_Str"" + artifactId+ ""String_Node_Str""+ groupId+ ""String_Node_Str""+ repositoryId+ ""String_Node_Str""+ version;
    urlConnection=getHttpURLConnection(nexusUrl,service,userName,password);
    SAXReader saxReader=new SAXReader();
    InputStream inputStream=urlConnection.getInputStream();
    Document document=saxReader.read(inputStream);
    Node sha1Node=document.selectSingleNode(""String_Node_Str"");
    String sha1=null;
    if (sha1Node != null) {
      sha1=sha1Node.getText();
    }
    return sha1;
  }
 catch (  FileNotFoundException e) {
    return null;
  }
 finally {
    Authenticator.setDefault(defaultAuthenticator);
    if (null != urlConnection) {
      urlConnection.disconnect();
    }
  }
}",0.9788182831661092
125943,"public static boolean isGeneratedFolder(String label){
  if (label == null) {
    return false;
  }
  return label.equalsIgnoreCase(new Path(ERepositoryObjectType.GENERATED.getFolder()).lastSegment());
}","public static boolean isGeneratedFolder(String label){
  if (label == null) {
    return false;
  }
  return ERepositoryObjectType.GENERATED != null && label.equalsIgnoreCase(new Path(ERepositoryObjectType.GENERATED.getFolder()).lastSegment());
}",0.9042316258351892
125944,"/** 
 * DOC tang Comment method ""isJobletsFolder"".
 * @param label
 * @return
 */
public static boolean isJobletsFolder(String label){
  if (label == null) {
    return false;
  }
  return label.equalsIgnoreCase(new Path(ERepositoryObjectType.JOBLET_DOC.getFolder()).lastSegment());
}","/** 
 * DOC tang Comment method ""isJobletsFolder"".
 * @param label
 * @return
 */
public static boolean isJobletsFolder(String label){
  if (label == null) {
    return false;
  }
  return ERepositoryObjectType.JOBLET_DOC != null && label.equalsIgnoreCase(new Path(ERepositoryObjectType.JOBLET_DOC.getFolder()).lastSegment());
}",0.8235294117647058
125945,"public static boolean isJobsFolder(String label){
  if (label == null) {
    return false;
  }
  return label.equalsIgnoreCase(new Path(ERepositoryObjectType.JOB_DOC.getFolder()).lastSegment());
}","public static boolean isJobsFolder(String label){
  if (label == null) {
    return false;
  }
  return ERepositoryObjectType.JOB_DOC != null && label.equalsIgnoreCase(new Path(ERepositoryObjectType.JOB_DOC.getFolder()).lastSegment());
}",0.7575057736720554
125946,"/** 
 * DOC wchen Comment method ""deployFile"".
 * @param file
 * @param mavenUri snaopshot mvn uri
 * @param monitorWrap
 */
private void deployFile(File file,String snapshotMavenUri,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
          if (snapshotMavenUri == null) {
            String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
            if (urisFromIndex != null) {
              final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
              for (              String uri : mvnUris) {
                sourceAndMavenUri.put(uri,jarFile.getAbsolutePath());
              }
            }
            sourceAndMavenUri.put(defaultMavenUri,jarFile.getAbsolutePath());
          }
 else {
            sourceAndMavenUri.put(snapshotMavenUri,jarFile.getAbsolutePath());
          }
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
      if (snapshotMavenUri == null) {
        String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
        if (urisFromIndex != null) {
          final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
          for (          String uri : mvnUris) {
            sourceAndMavenUri.put(uri,file.getAbsolutePath());
          }
        }
        sourceAndMavenUri.put(defaultMavenUri,file.getAbsolutePath());
      }
 else {
        sourceAndMavenUri.put(snapshotMavenUri,file.getAbsolutePath());
      }
      deployer.deployToLocalMaven(sourceAndMavenUri);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}","/** 
 * DOC wchen Comment method ""deployFile"".
 * @param file
 * @param mavenUri snaopshot mvn uri
 * @param monitorWrap
 */
private void deployFile(File file,String snapshotMavenUri,boolean updateRemoteJar,IProgressMonitor... monitorWrap){
  try {
    listToUpdate=true;
    if (file.isDirectory()) {
      List<File> jarFiles=FilesUtils.getJarFilesFromFolder(file,null);
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      if (!jarFiles.isEmpty()) {
        for (        File jarFile : jarFiles) {
          String jarName=jarFile.getName();
          String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(jarName);
          if (snapshotMavenUri == null) {
            String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(jarName);
            if (urisFromIndex != null) {
              final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
              for (              String uri : mvnUris) {
                sourceAndMavenUri.put(uri,jarFile.getAbsolutePath());
              }
            }
            sourceAndMavenUri.put(defaultMavenUri,jarFile.getAbsolutePath());
          }
 else {
            sourceAndMavenUri.put(snapshotMavenUri,jarFile.getAbsolutePath());
          }
        }
        deployer.deployToLocalMaven(sourceAndMavenUri);
      }
    }
 else {
      Map<String,String> sourceAndMavenUri=new HashMap<String,String>();
      String defaultMavenUri=MavenUrlHelper.generateMvnUrlForJarName(file.getName());
      if (snapshotMavenUri == null) {
        String urisFromIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath().get(file.getName());
        if (urisFromIndex != null) {
          final String[] mvnUris=urisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
          for (          String uri : mvnUris) {
            sourceAndMavenUri.put(uri,file.getAbsolutePath());
          }
        }
        sourceAndMavenUri.put(defaultMavenUri,file.getAbsolutePath());
      }
 else {
        sourceAndMavenUri.put(snapshotMavenUri,file.getAbsolutePath());
      }
      deployer.deployToLocalMaven(sourceAndMavenUri,updateRemoteJar);
    }
  }
 catch (  IOException e) {
    CommonExceptionHandler.process(e);
  }
catch (  Exception e) {
    CommonExceptionHandler.process(e);
  }
}",0.9914493373236426
125947,"/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  EMap<String,String> libIndex=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
  EMap<String,String> mavenIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    File fileToDeploy=null;
    String moduleLocation=module.getModuleLocaion();
    Set<String> toDeploy=new HashSet<String>();
    if (module.getMavenUri() == null && mavenIndex.get(module.getModuleName()) != null) {
      final String[] split=mavenIndex.get(module.getModuleName()).split(MavenUrlHelper.MVN_INDEX_SPLITER);
      for (      String mvnUri : split) {
        toDeploy.add(mvnUri);
      }
    }
 else {
      toDeploy.add(module.getMavenUriSnapshot());
    }
    for (    String mavenUri : toDeploy) {
      if (checkJarInstalledInMaven(mavenUri)) {
        continue;
      }
      boolean found=false;
      if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
        if (libIndex.containsKey(module.getModuleName())) {
          String relativePath=libIndex.get(module.getModuleName());
          if (!relativePath.equals(moduleLocation)) {
            if (!urlWarned.contains(moduleLocation)) {
              System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
              urlWarned.add(moduleLocation);
            }
            moduleLocation=relativePath;
          }
        }
        if (checkJarInstalledFromPlatform(moduleLocation)) {
          libIndex.put(module.getModuleName(),moduleLocation);
          modified=true;
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(moduleLocation));
        }
      }
      if (!found) {
        EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
        String relativePath=jarsToRelative.get(module.getModuleName());
        if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(relativePath));
        }
      }
      if (!found) {
        try {
          fileToDeploy=getJarFile(module.getModuleName());
        }
 catch (        MalformedURLException e) {
          ExceptionHandler.process(e);
        }
        if (fileToDeploy != null) {
          found=true;
        }
      }
      if (fileToDeploy != null && !fileToDeploy.exists()) {
        fileToDeploy=null;
        found=false;
      }
      if (!found) {
        ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
      }
      if (fileToDeploy != null) {
        deployFile(fileToDeploy,mavenUri,monitorWrap);
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}","/** 
 * deploy needed modules with snapshot version
 */
@Override public void deployModules(Collection<ModuleNeeded> modules,IProgressMonitor monitorWrap){
  boolean modified=false;
  EMap<String,String> libIndex=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
  EMap<String,String> mavenIndex=LibrariesIndexManager.getInstance().getMavenLibIndex().getJarsToRelativePath();
  for (  ModuleNeeded module : modules) {
    File fileToDeploy=null;
    String moduleLocation=module.getModuleLocaion();
    Set<String> toDeploy=new HashSet<String>();
    if (module.getMavenUri() == null && mavenIndex.get(module.getModuleName()) != null) {
      final String[] split=mavenIndex.get(module.getModuleName()).split(MavenUrlHelper.MVN_INDEX_SPLITER);
      for (      String mvnUri : split) {
        toDeploy.add(mvnUri);
      }
    }
 else {
      toDeploy.add(module.getMavenUriSnapshot());
    }
    for (    String mavenUri : toDeploy) {
      if (checkJarInstalledInMaven(mavenUri)) {
        continue;
      }
      boolean found=false;
      if (moduleLocation != null && moduleLocation.startsWith(""String_Node_Str"")) {
        if (libIndex.containsKey(module.getModuleName())) {
          String relativePath=libIndex.get(module.getModuleName());
          if (!relativePath.equals(moduleLocation)) {
            if (!urlWarned.contains(moduleLocation)) {
              System.out.println(module.getModuleName() + ""String_Node_Str"" + relativePath+ ""String_Node_Str""+ moduleLocation);
              urlWarned.add(moduleLocation);
            }
            moduleLocation=relativePath;
          }
        }
        if (checkJarInstalledFromPlatform(moduleLocation)) {
          libIndex.put(module.getModuleName(),moduleLocation);
          modified=true;
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(moduleLocation));
        }
      }
      if (!found) {
        EMap<String,String> jarsToRelative=LibrariesIndexManager.getInstance().getStudioLibIndex().getJarsToRelativePath();
        String relativePath=jarsToRelative.get(module.getModuleName());
        if (relativePath != null && checkJarInstalledFromPlatform(relativePath)) {
          found=true;
          fileToDeploy=new File(studioJarInstalled.get(relativePath));
        }
      }
      if (!found) {
        try {
          fileToDeploy=getJarFile(module.getModuleName());
        }
 catch (        MalformedURLException e) {
          ExceptionHandler.process(e);
        }
        if (fileToDeploy != null) {
          found=true;
        }
      }
      if (fileToDeploy != null && !fileToDeploy.exists()) {
        fileToDeploy=null;
        found=false;
      }
      if (!found) {
        ExceptionHandler.log(""String_Node_Str"" + module.getModuleName());
      }
      if (fileToDeploy != null) {
        deployFile(fileToDeploy,mavenUri,false,monitorWrap);
      }
    }
  }
  if (modified) {
    LibrariesIndexManager.getInstance().saveStudioIndexResource();
  }
}",0.9990003332222592
125948,"private boolean checkJarInstalledInMaven(String mvnUri){
  if (mavenJarInstalled.containsKey(mvnUri)) {
    return mavenJarInstalled.get(mvnUri) != null;
  }
  String artifactPath=PomUtil.getAbsArtifactPath(MavenUrlHelper.parseMvnUrl(mvnUri));
  if (artifactPath != null) {
    mavenJarInstalled.put(mvnUri,artifactPath);
    return true;
  }
  return false;
}","private boolean checkJarInstalledInMaven(String mvnUri){
  if (mavenJarInstalled.containsKey(mvnUri)) {
    if (!new File(mavenJarInstalled.get(mvnUri)).exists()) {
      mavenJarInstalled.remove(mvnUri);
      return false;
    }
    return mavenJarInstalled.get(mvnUri) != null;
  }
  String artifactPath=PomUtil.getAbsArtifactPath(MavenUrlHelper.parseMvnUrl(mvnUri));
  if (artifactPath != null) {
    mavenJarInstalled.put(mvnUri,artifactPath);
    return true;
  }
  return false;
}",0.8500590318772137
125949,"/** 
 * DOC nrousseau LocalLibraryManager constructor comment.
 */
public LocalLibraryManager(){
  super();
}","/** 
 * DOC nrousseau LocalLibraryManager constructor comment.
 */
public LocalLibraryManager(){
  super();
  deployer=new ArtifactsDeployer();
}",0.8582677165354331
125950,"@Override public void createPartControl(Composite parent){
  service=GitContentServiceProviderManager.getGitContentService();
  if (service != null && service.isGIT())   service.createDropdownCombo(parent);
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_CLOSE_ICON));
            }
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_OPEN_ICON));
            }
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  RepositoryNodeFilterHelper.filter(viewer,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}","@Override public void createPartControl(Composite parent){
  service=GitContentServiceProviderManager.getGitContentService();
  if (service != null && service.isGIT())   service.createDropdownCombo(parent);
  super.createPartControl(parent);
  viewer=getCommonViewer();
  if (service != null && service.isGIT())   viewer.getTree().addListener(SWT.Resize,new Listener(){
    @Override public void handleEvent(    Event event){
      Point point=parent.getSize();
      viewer.getTree().setSize(point.x,point.y - 42);
    }
  }
);
  if (viewer instanceof ITreeViewerListener) {
    viewer.addTreeListener((ITreeViewerListener)viewer);
  }
  getSite().setSelectionProvider(viewer);
  viewer.addTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_CLOSE_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_CLOSE_ICON));
            }
          }
        }
      }
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      Object element=event.getElement();
      if (element instanceof RepositoryNode) {
        RepositoryNode node=(RepositoryNode)element;
        TreeItem item=getObject(viewer.getTree(),event.getElement());
        if (item != null) {
          if (node.getType().equals(ENodeType.SIMPLE_FOLDER)) {
            item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
          }
 else           if (ENodeType.SYSTEM_FOLDER == node.getType()) {
            if (node.getContentType() == ERepositoryObjectType.PROCESS) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STANDARD_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_STORM) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_STREAMING_GENERIC_CATEGORY_OPEN_ICON));
            }
 else             if (node.getContentType() == ERepositoryObjectType.PROCESS_MR) {
              item.setImage(ImageProvider.getImage(ECoreImage.PROCESS_BATCH_GENERIC_CATEGORY_OPEN_ICON));
            }
          }
        }
      }
    }
  }
);
  createTreeTooltip(viewer.getTree());
  viewer.getTree().addFocusListener(new FocusListener(){
    @Override public void focusGained(    FocusEvent e){
      log.trace(""String_Node_Str"");
      IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
      ca=contextService.activateContext(""String_Node_Str"");
    }
    @Override public void focusLost(    FocusEvent e){
      log.trace(""String_Node_Str"");
      if (ca != null) {
        IContextService contextService=(IContextService)RepositoryViewPlugin.getDefault().getWorkbench().getAdapter(IContextService.class);
        contextService.deactivateContext(ca);
      }
    }
  }
);
  if (listenersNeedTobeAddedIntoTreeviewer.size() > 0) {
    for (    ISelectionChangedListener listener : listenersNeedTobeAddedIntoTreeviewer) {
      viewer.addSelectionChangedListener(listener);
    }
    listenersNeedTobeAddedIntoTreeviewer.clear();
  }
  CoreRepositoryPlugin.getDefault().registerRepositoryChangedListenerAsFirst(this);
  if (!CoreRepositoryPlugin.getDefault().isRCPMode()) {
    boolean pluginModel=true;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IMigrationToolService.class)) {
      IMigrationToolService migrationService=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
      if (migrationService != null) {
        migrationService.executeMigration(pluginModel);
      }
    }
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRunProcessService.class)) {
      IRunProcessService runProcessService=(IRunProcessService)GlobalServiceRegister.getDefault().getService(IRunProcessService.class);
      if (runProcessService != null) {
        runProcessService.deleteAllJobs(pluginModel);
      }
    }
    final RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
    final Project project=repositoryContext.getProject();
    final IWorkbenchWindow activedWorkbenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
    activedWorkbenchWindow.getPartService().addPartListener(new IPartListener(){
      @Override public void partActivated(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
      @Override public void partBroughtToTop(      IWorkbenchPart part){
      }
      @Override public void partClosed(      IWorkbenchPart part){
      }
      @Override public void partDeactivated(      IWorkbenchPart part){
      }
      @Override public void partOpened(      IWorkbenchPart part){
        if (part instanceof RepoViewCommonNavigator) {
          String title=activedWorkbenchWindow.getShell().getText();
          if (!title.contains(""String_Node_Str"")) {
            title+=""String_Node_Str"" + repositoryContext.getUser() + ""String_Node_Str""+ project.getLabel();
            activedWorkbenchWindow.getShell().setText(title);
          }
        }
      }
    }
);
  }
  expandTreeRootIfOnlyOneRoot();
  viewer.setSorter(new CommonViewerSorter());
  refreshContentDescription();
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().addPerspectiveListener(getRepoViewPerspectiveListener());
  RepositoryNodeFilterHelper.filter(viewer,RepositoryNodeFilterHelper.isActivedFilter(),PerspectiveFilterHelper.isActivedPerspectiveFilter());
  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService().addPartListener(getRepoViewPartListener());
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  if (workspace != null) {
    workspace.addResourceChangeListener(getResourcePostChangerRunnableListener(),IResourceChangeEvent.POST_CHANGE);
  }
}",0.981527708437344
125951,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),connection.isContextMode(),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),hadoopClusterConnection.isContextMode(),true);
    }
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.947823580282502
125952,"/** 
 * looks for an adapter on the input that adapts to INavigatorDescriptor and then changes the view descritor string
 */
public void refreshContentDescription(){
  INavigatorDescriptor navDesc=getNavDesc();
  final String descriptor=navDesc.getDescriptor();
  if (navDesc == null) {
    setContentDescription(""String_Node_Str"");
  }
 else   if (service.isGIT()) {
    service.configureCombo(descriptor);
  }
 else {
    setContentDescription(descriptor);
  }
}","/** 
 * looks for an adapter on the input that adapts to INavigatorDescriptor and then changes the view descritor string
 */
public void refreshContentDescription(){
  INavigatorDescriptor navDesc=getNavDesc();
  final String descriptor=navDesc.getDescriptor();
  if (navDesc == null) {
    setContentDescription(""String_Node_Str"");
  }
 else   if (service != null && service.isGIT()) {
    service.configureCombo(descriptor);
  }
 else {
    setContentDescription(descriptor);
  }
}",0.9799366420274552
125953,"/** 
 * looks for an adapter on the input that adapts to INavigatorDescriptor and then changes the view descritor string
 */
public void refreshContentDescription(){
  INavigatorDescriptor navDesc=getNavDesc();
  final String descriptor=navDesc.getDescriptor();
  if (navDesc == null) {
    setContentDescription(""String_Node_Str"");
  }
 else   if (service.isGIT()) {
    service.configureCombo(descriptor);
  }
 else {
    setContentDescription(descriptor);
  }
}","/** 
 * looks for an adapter on the input that adapts to INavigatorDescriptor and then changes the view descritor string
 */
public void refreshContentDescription(){
  INavigatorDescriptor navDesc=getNavDesc();
  final String descriptor=navDesc.getDescriptor();
  if (navDesc == null) {
    setContentDescription(""String_Node_Str"");
  }
 else   if (service != null && service.isGIT()) {
    service.configureCombo(descriptor);
  }
 else {
    setContentDescription(descriptor);
  }
}",0.9799366420274552
125954,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),connection.isContextMode(),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    Connection hadoopClusterConnection=hadoopClusterService.getHadoopClusterConnectionBySubConnection(connection);
    if (hadoopClusterConnection != null) {
      parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),hadoopClusterConnection.isContextMode(),true);
    }
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.947823580282502
125955,"/** 
 * DOC bqian Comment method ""getJobletCustomIcon"".
 * @param property
 * @return
 */
public static Image getJobletCustomIcon(Property property){
  JobletProcessItem item=(JobletProcessItem)property.getItem();
  Image image=null;
  if (item.getIcon() == null || item.getIcon().getInnerContent() == null || item.getIcon().getInnerContent().length == 0) {
    image=getDefaultJobletImage();
  }
 else {
    ImageDescriptor imageDesc=ImageUtils.createImageFromData(item.getIcon().getInnerContent());
    imageDesc=ImageUtils.scale(imageDesc,ICON_SIZE.ICON_32);
    image=cachedImages.get(item.getIcon().getInnerContent());
    if (image == null || image.isDisposed()) {
      image=imageDesc.createImage();
      cachedImages.put(item.getIcon().getInnerContent(),image);
    }
 else {
    }
  }
  return image;
}","/** 
 * DOC bqian Comment method ""getJobletCustomIcon"".
 * @param property
 * @return
 */
public static Image getJobletCustomIcon(Property property){
  JobletProcessItem item=(JobletProcessItem)property.getItem();
  Image image=null;
  if (item.getIcon() == null || item.getIcon().getInnerContent() == null || item.getIcon().getInnerContent().length == 0) {
    image=getDefaultJobletImage();
  }
 else {
    ImageDescriptor imageDesc=ImageUtils.createImageFromData(item.getIcon().getInnerContent());
    imageDesc=ImageUtils.scale(imageDesc,ICON_SIZE.ICON_32);
    String md5Desc=MD5.getMD5(item.getIcon().getInnerContent());
    image=cachedImages.get(md5Desc);
    if (image == null || image.isDisposed()) {
      image=imageDesc.createImage();
      cachedImages.put(md5Desc,image);
    }
 else {
    }
  }
  return image;
}",0.9128580134064594
125956,"private static HttpURLConnection getHttpURLConnection(String nexusUrl,String restService,String userName,String password) throws Exception {
  if (!nexusUrl.endsWith(NexusConstants.SLASH)) {
    nexusUrl=nexusUrl + NexusConstants.SLASH;
  }
  URL url=new URL(nexusUrl + restService);
  HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
  if (urlConnection instanceof HttpsURLConnection) {
    String userDir=Platform.getInstallLocation().getURL().getPath();
    final SSLSocketFactory socketFactory=SSLUtils.getSSLContext(userDir).getSocketFactory();
    HttpsURLConnection httpsConnection=(HttpsURLConnection)urlConnection;
    httpsConnection.setSSLSocketFactory(socketFactory);
    httpsConnection.setHostnameVerifier(new HostnameVerifier(){
      @Override public boolean verify(      String arg0,      SSLSession arg1){
        return true;
      }
    }
);
  }
  urlConnection.setConnectTimeout(10000);
  return urlConnection;
}","private static HttpURLConnection getHttpURLConnection(String nexusUrl,String restService,String userName,String password) throws Exception {
  if (!nexusUrl.endsWith(NexusConstants.SLASH)) {
    nexusUrl=nexusUrl + NexusConstants.SLASH;
  }
  URL url=new URL(nexusUrl + restService);
  HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
  if (urlConnection instanceof HttpsURLConnection) {
    String userDir=Platform.getInstallLocation().getURL().getPath();
    final SSLSocketFactory socketFactory=SSLUtils.getSSLContext(userDir).getSocketFactory();
    HttpsURLConnection httpsConnection=(HttpsURLConnection)urlConnection;
    httpsConnection.setSSLSocketFactory(socketFactory);
    httpsConnection.setHostnameVerifier(new HostnameVerifier(){
      @Override public boolean verify(      String arg0,      SSLSession arg1){
        return true;
      }
    }
);
  }
  IEclipsePreferences node=InstanceScope.INSTANCE.getNode(ORG_TALEND_DESIGNER_CORE);
  int timeout=node.getInt(ITalendCorePrefConstants.NEXUS_TIMEOUT,10000);
  urlConnection.setConnectTimeout(timeout);
  return urlConnection;
}",0.8987463837994214
125957,"/** 
 * DOC check if the repository exist or not
 * @param nexusUrl
 * @param repositoryId
 * @param userName
 * @param password
 * @return
 */
public static boolean checkConnectionStatus(String nexusUrl,String repositoryId,final String userName,final String password){
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (userName != null && !""String_Node_Str"".equals(userName)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(userName,password.toCharArray());
      }
    }
);
  }
  int status=-1;
  try {
    if (nexusUrl == null || ""String_Node_Str"".equals(nexusUrl) || repositoryId == null || ""String_Node_Str"".equals(repositoryId)) {
      return false;
    }
    String newUrl=nexusUrl;
    if (newUrl.endsWith(NexusConstants.SLASH)) {
      newUrl=newUrl.substring(0,newUrl.length() - 1);
    }
    String urlToCheck=newUrl + NexusConstants.CONTENT_REPOSITORIES + repositoryId;
    URL url=new URL(urlToCheck);
    HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
    if (urlConnection instanceof HttpsURLConnection) {
      String userDir=Platform.getInstallLocation().getURL().getPath();
      final SSLSocketFactory socketFactory=SSLUtils.getSSLContext(userDir).getSocketFactory();
      HttpsURLConnection httpsConnection=(HttpsURLConnection)urlConnection;
      httpsConnection.setSSLSocketFactory(socketFactory);
      httpsConnection.setHostnameVerifier(new HostnameVerifier(){
        @Override public boolean verify(        String arg0,        SSLSession arg1){
          return true;
        }
      }
);
    }
    urlConnection.setConnectTimeout(10000);
    urlConnection.setReadTimeout(10000);
    status=urlConnection.getResponseCode();
    if (status == CONNECTION_OK) {
      return true;
    }
  }
 catch (  Exception e) {
  }
 finally {
    Authenticator.setDefault(defaultAuthenticator);
  }
  return false;
}","/** 
 * DOC check if the repository exist or not
 * @param nexusUrl
 * @param repositoryId
 * @param userName
 * @param password
 * @return
 */
public static boolean checkConnectionStatus(String nexusUrl,String repositoryId,final String userName,final String password){
  if (StringUtils.isEmpty(nexusUrl)) {
    return false;
  }
  final Authenticator defaultAuthenticator=NetworkUtil.getDefaultAuthenticator();
  if (userName != null && !""String_Node_Str"".equals(userName)) {
    Authenticator.setDefault(new Authenticator(){
      @Override protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(userName,password.toCharArray());
      }
    }
);
  }
  int status=-1;
  try {
    if (nexusUrl == null || ""String_Node_Str"".equals(nexusUrl) || repositoryId == null || ""String_Node_Str"".equals(repositoryId)) {
      return false;
    }
    String newUrl=nexusUrl;
    if (newUrl.endsWith(NexusConstants.SLASH)) {
      newUrl=newUrl.substring(0,newUrl.length() - 1);
    }
    String urlToCheck=newUrl + NexusConstants.CONTENT_REPOSITORIES + repositoryId;
    URL url=new URL(urlToCheck);
    HttpURLConnection urlConnection=(HttpURLConnection)url.openConnection();
    if (urlConnection instanceof HttpsURLConnection) {
      String userDir=Platform.getInstallLocation().getURL().getPath();
      final SSLSocketFactory socketFactory=SSLUtils.getSSLContext(userDir).getSocketFactory();
      HttpsURLConnection httpsConnection=(HttpsURLConnection)urlConnection;
      httpsConnection.setSSLSocketFactory(socketFactory);
      httpsConnection.setHostnameVerifier(new HostnameVerifier(){
        @Override public boolean verify(        String arg0,        SSLSession arg1){
          return true;
        }
      }
);
    }
    IEclipsePreferences node=InstanceScope.INSTANCE.getNode(ORG_TALEND_DESIGNER_CORE);
    int timeout=node.getInt(ITalendCorePrefConstants.NEXUS_TIMEOUT,10000);
    urlConnection.setConnectTimeout(timeout);
    urlConnection.setReadTimeout(timeout);
    status=urlConnection.getResponseCode();
    if (status == CONNECTION_OK) {
      return true;
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
 finally {
    Authenticator.setDefault(defaultAuthenticator);
  }
  return false;
}",0.925512104283054
125958,"public void updateLibraries(Set<ModuleNeeded> jobModuleList,IProcess process);","public void updateLibraries(Set<ModuleNeeded> jobModuleList,IProcess process,Set<ModuleNeeded> alreadyRetrievedModules);",0.7878787878787878
125959,"public static void removeComponentImage(String name){
  if (name != null && !name.equals(""String_Node_Str"")) {
    for (    IComponent component : ComponentsFactoryProvider.getInstance().getComponents()) {
      if (name.equals(component.getName())) {
        Image image=componentCachedImages.get(component.getIcon16());
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(component.getIcon16());
        image=componentCachedImages.get(component.getIcon24());
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(component.getIcon24());
        image=componentCachedImages.get(component.getIcon32());
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(component.getIcon32());
      }
    }
  }
}","public static void removeComponentImage(String name){
  if (name != null && !name.equals(""String_Node_Str"")) {
    for (    IComponent component : ComponentsFactoryProvider.getInstance().getComponents()) {
      if (name.equals(component.getName())) {
        String md5Desc16=MD5.getMD5(component.getIcon16().getImageData().data);
        Image image=componentCachedImages.get(md5Desc16);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc16);
        String md5Desc24=MD5.getMD5(component.getIcon24().getImageData().data);
        image=componentCachedImages.get(md5Desc24);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc24);
        String md5Desc32=MD5.getMD5(component.getIcon32().getImageData().data);
        image=componentCachedImages.get(md5Desc32);
        if (image != null && !image.isDisposed()) {
          image.dispose();
        }
        componentCachedImages.remove(md5Desc32);
      }
    }
  }
}",0.678963110667996
125960,"public static Image getComponentImageFromDesc(ImageDescriptor imageDescriptor){
  Image image=null;
  image=componentCachedImages.get(imageDescriptor);
  if (image == null || image.isDisposed()) {
    image=imageDescriptor.createImage();
    componentCachedImages.put(imageDescriptor,image);
  }
  return image;
}","public static Image getComponentImageFromDesc(ImageDescriptor imageDescriptor){
  String md5Desc=MD5.getMD5(imageDescriptor.getImageData().data);
  Image image=componentCachedImages.get(md5Desc);
  if (image == null || image.isDisposed()) {
    image=imageDescriptor.createImage();
    componentCachedImages.put(md5Desc,image);
  }
  return image;
}",0.6435045317220544
125961,"private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor,int option) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    if (codeModified && !BitwiseOptionUtils.containOption(option,GENERATE_WITHOUT_COMPILING)) {
      try {
        processor.build(progressMonitor);
      }
 catch (      Exception e) {
        throw new ProcessorException(e);
      }
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    codeModified=false;
  }
}","private static void generateBuildInfo(JobInfo jobInfo,IProgressMonitor progressMonitor,boolean isMainJob,IProcess currentProcess,String currentJobName,IProcessor processor,int option) throws ProcessorException {
  if (isMainJob) {
    progressMonitor.subTask(Messages.getString(""String_Node_Str"") + currentJobName);
    if (codeModified && !BitwiseOptionUtils.containOption(option,GENERATE_WITHOUT_COMPILING)) {
      try {
        processor.build(progressMonitor);
      }
 catch (      Exception e) {
        throw new ProcessorException(e);
      }
      processor.syntaxCheck();
    }
    needContextInCurrentGeneration=true;
    retrievedJarsForCurrentBuild.clear();
    codeModified=false;
  }
}",0.9691176470588236
125962,"@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  try {
    List<ModuleToInstall> mti=modulesToInstall;
    if (mti == null) {
      mti=new ArrayList<ModuleToInstall>();
    }
    Map<String,License> typeToLicense=new HashMap<String,License>();
    for (    ModuleToInstall moduleToInstall : mti) {
      String licenseType=moduleToInstall.getLicenseType();
      if (licenseType == null) {
        licenseType=UNKNOWN_LICENSE;
      }
      boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(licenseType);
      if (isLicenseAccepted) {
        continue;
      }
      License license=typeToLicense.get(licenseType);
      if (license == null) {
        license=new License();
        String licenseUrl=RemoteModulesHelper.getInstance().getLicenseUrl(licenseType);
        license.setName(licenseType);
        license.setType(licenseType);
        license.setUrl(licenseUrl);
        license.setParent(licenseRoot);
        licenseRoot.addChild(license);
        typeToLicense.put(licenseType,license);
        licenseTypeToStatus.put(licenseType,false);
      }
      Module module=new Module();
      module.setName(moduleToInstall.getName());
      module.setParent(license);
      license.addChild(module);
    }
  }
  finally {
    monitor.done();
  }
}","@Override public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
  monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
  try {
    List<ModuleToInstall> mti=modulesToInstall;
    if (mti == null) {
      mti=new ArrayList<ModuleToInstall>();
    }
    Map<String,License> typeToLicense=new HashMap<String,License>();
    for (    ModuleToInstall moduleToInstall : mti) {
      if (moduleToInstall.isFromCustomNexus()) {
        continue;
      }
      String licenseType=moduleToInstall.getLicenseType();
      if (licenseType == null) {
        licenseType=UNKNOWN_LICENSE;
      }
      boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(licenseType);
      if (isLicenseAccepted) {
        continue;
      }
      License license=typeToLicense.get(licenseType);
      if (license == null) {
        license=new License();
        String licenseUrl=RemoteModulesHelper.getInstance().getLicenseUrl(licenseType);
        license.setName(licenseType);
        license.setType(licenseType);
        license.setUrl(licenseUrl);
        license.setParent(licenseRoot);
        licenseRoot.addChild(license);
        typeToLicense.put(licenseType,license);
        licenseTypeToStatus.put(licenseType,false);
      }
      Module module=new Module();
      module.setName(moduleToInstall.getName());
      module.setParent(license);
      license.addChild(module);
    }
  }
  finally {
    monitor.done();
  }
}",0.974721941354904
125963,"private void retrieveLicensesModel(){
  final Element licenseRoot=new Element();
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      try {
        List<ModuleToInstall> mti=modulesToInstall;
        if (mti == null) {
          mti=new ArrayList<ModuleToInstall>();
        }
        Map<String,License> typeToLicense=new HashMap<String,License>();
        for (        ModuleToInstall moduleToInstall : mti) {
          String licenseType=moduleToInstall.getLicenseType();
          if (licenseType == null) {
            licenseType=UNKNOWN_LICENSE;
          }
          boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(licenseType);
          if (isLicenseAccepted) {
            continue;
          }
          License license=typeToLicense.get(licenseType);
          if (license == null) {
            license=new License();
            String licenseUrl=RemoteModulesHelper.getInstance().getLicenseUrl(licenseType);
            license.setName(licenseType);
            license.setType(licenseType);
            license.setUrl(licenseUrl);
            license.setParent(licenseRoot);
            licenseRoot.addChild(license);
            typeToLicense.put(licenseType,license);
            licenseTypeToStatus.put(licenseType,false);
          }
          Module module=new Module();
          module.setName(moduleToInstall.getName());
          module.setParent(license);
          license.addChild(module);
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  licenseTypeViewer.setInput(licenseRoot);
  if (licenseTypeViewer.getTree().getItems().length > 0) {
    TreeItem item=licenseTypeViewer.getTree().getItem(0);
    if (item != null) {
      licenseTypeViewer.setSelection(new StructuredSelection(item.getData()),true);
    }
  }
}","private void retrieveLicensesModel(){
  final Element licenseRoot=new Element();
  IRunnableWithProgress runnableWithProgress=new IRunnableWithProgress(){
    @Override public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(Messages.getString(""String_Node_Str""),IProgressMonitor.UNKNOWN);
      try {
        List<ModuleToInstall> mti=modulesToInstall;
        if (mti == null) {
          mti=new ArrayList<ModuleToInstall>();
        }
        Map<String,License> typeToLicense=new HashMap<String,License>();
        for (        ModuleToInstall moduleToInstall : mti) {
          if (moduleToInstall.isFromCustomNexus()) {
            continue;
          }
          String licenseType=moduleToInstall.getLicenseType();
          if (licenseType == null) {
            licenseType=UNKNOWN_LICENSE;
          }
          boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(licenseType);
          if (isLicenseAccepted) {
            continue;
          }
          License license=typeToLicense.get(licenseType);
          if (license == null) {
            license=new License();
            String licenseUrl=RemoteModulesHelper.getInstance().getLicenseUrl(licenseType);
            license.setName(licenseType);
            license.setType(licenseType);
            license.setUrl(licenseUrl);
            license.setParent(licenseRoot);
            licenseRoot.addChild(license);
            typeToLicense.put(licenseType,license);
            licenseTypeToStatus.put(licenseType,false);
          }
          Module module=new Module();
          module.setName(moduleToInstall.getName());
          module.setParent(license);
          license.addChild(module);
        }
      }
  finally {
        monitor.done();
      }
    }
  }
;
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
  try {
    dialog.run(true,true,runnableWithProgress);
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
  licenseTypeViewer.setInput(licenseRoot);
  if (licenseTypeViewer.getTree().getItems().length > 0) {
    TreeItem item=licenseTypeViewer.getTree().getItem(0);
    if (item != null) {
      licenseTypeViewer.setSelection(new StructuredSelection(item.getData()),true);
    }
  }
}",0.9813744380218368
125964,"protected boolean hasLicensesToAccept(){
  if (toDownload != null && toDownload.size() > 0) {
    for (    ModuleToInstall module : toDownload) {
      String licenseType=module.getLicenseType();
      if (licenseType != null) {
        boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        if (!isLicenseAccepted) {
          return true;
        }
      }
    }
  }
  return false;
}","protected boolean hasLicensesToAccept(){
  if (toDownload != null && toDownload.size() > 0) {
    for (    ModuleToInstall module : toDownload) {
      if (module.isFromCustomNexus()) {
        continue;
      }
      String licenseType=module.getLicenseType();
      if (licenseType != null) {
        boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        if (!isLicenseAccepted) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9323770491803278
125965,"private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size() + 1);
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress();
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
          }
        }
 else {
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
        }
        String snapshotUri=MavenUrlHelper.generateSnapshotMavenUri(module.getMavenUri());
        customUriToAdd.put(module.getName(),snapshotUri);
        installedModules.add(module.getName());
      }
 catch (      SocketTimeoutException e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(e);
        continue;
      }
catch (      Exception e) {
        downloadFailed.add(module.getName());
        MessageBoxExceptionHandler.process(e);
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!customUriToAdd.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
    LibManagerUiPlugin.getDefault().getLibrariesService().resetModulesNeeded();
  }
  subMonitor.worked(1);
}","private void downLoad(final IProgressMonitor monitor){
  SubMonitor subMonitor=SubMonitor.convert(monitor,Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + toDownload.size()+ ""String_Node_Str"",toDownload.size());
  Map<String,String> customUriToAdd=new HashMap<String,String>();
  boolean connectionTimeOut=false;
  for (  final ModuleToInstall module : toDownload) {
    if (!monitor.isCanceled() && !connectionTimeOut) {
      monitor.subTask(module.getName());
      boolean accepted;
      try {
        boolean isLicenseAccepted=module.isFromCustomNexus() || LibManagerUiPlugin.getDefault().getPreferenceStore().getBoolean(module.getLicenseType());
        accepted=isLicenseAccepted;
        if (!accepted) {
          subMonitor.worked(1);
          continue;
        }
        NexusDownloadHelperWithProgress downloader=new NexusDownloadHelperWithProgress(module);
        if (!module.getMavenUris().isEmpty()) {
          for (          String mvnUri : module.getMavenUris()) {
            downloader.download(new URL(null,mvnUri,new Handler()),null,subMonitor.newChild(1));
            final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
            statusMap.put(MavenUrlHelper.generateSnapshotMavenUri(mvnUri),ELibraryInstallStatus.INSTALLED);
          }
        }
 else {
          downloader.download(new URL(null,module.getMavenUri(),new Handler()),null,subMonitor.newChild(1));
          final Map<String,ELibraryInstallStatus> statusMap=ModuleStatusProvider.getStatusMap();
          statusMap.put(MavenUrlHelper.generateSnapshotMavenUri(module.getMavenUri()),ELibraryInstallStatus.INSTALLED);
        }
        String snapshotUri=MavenUrlHelper.generateSnapshotMavenUri(module.getMavenUri());
        customUriToAdd.put(module.getName(),snapshotUri);
        installedModules.add(module.getName());
      }
 catch (      SocketTimeoutException e) {
        downloadFailed.add(module.getName());
        connectionTimeOut=true;
        MessageBoxExceptionHandler.process(e);
        continue;
      }
catch (      Exception e) {
        downloadFailed.add(module.getName());
        MessageBoxExceptionHandler.process(e);
        continue;
      }
      accepted=false;
    }
 else {
      downloadFailed.add(module.getName());
    }
  }
  if (!customUriToAdd.isEmpty()) {
    ILibraryManagerService libraryManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    libraryManagerService.forceListUpdate();
  }
}",0.8796610169491526
125966,"@Override public List<ComponentDefinition> getPossibleComponents(ComponentProperties properties) throws Throwable {
  return service.getPossibleComponents(properties);
}","@Override public List<ComponentDefinition> getPossibleComponents(ComponentProperties... properties) throws Throwable {
  return service.getPossibleComponents(properties);
}",0.9912023460410556
125967,"@Override public String storeProperties(ComponentProperties properties,String name,String repositoryLocation,Schema schema){
  return service.storeProperties(properties,name,repositoryLocation,schema);
}","@Override public String storeProperties(ComponentProperties properties,String name,String repositoryLocation,String schemaPropertyName){
  return service.storeProperties(properties,name,repositoryLocation,schemaPropertyName);
}",0.9116279069767442
125968,"/** 
 * DOC bqian Comment method ""getJobletCustomIcon"".
 * @param property
 * @return
 */
public static Image getJobletCustomIcon(Property property){
  JobletProcessItem item=(JobletProcessItem)property.getItem();
  Image image=null;
  if (item.getIcon() == null || item.getIcon().getInnerContent() == null || item.getIcon().getInnerContent().length == 0) {
    image=getDefaultJobletImage();
  }
 else {
    ImageDescriptor imageDesc=ImageUtils.createImageFromData(item.getIcon().getInnerContent());
    imageDesc=ImageUtils.scale(imageDesc,ICON_SIZE.ICON_32);
    image=cachedImages.get(item.getIcon().getInnerContent());
    if (image == null || image.isDisposed()) {
      image=imageDesc.createImage();
      cachedImages.put(item.getIcon().getInnerContent(),image);
    }
 else {
    }
  }
  return image;
}","/** 
 * DOC bqian Comment method ""getJobletCustomIcon"".
 * @param property
 * @return
 */
public static Image getJobletCustomIcon(Property property){
  JobletProcessItem item=(JobletProcessItem)property.getItem();
  Image image=null;
  if (item.getIcon() == null || item.getIcon().getInnerContent() == null || item.getIcon().getInnerContent().length == 0) {
    image=getDefaultJobletImage();
  }
 else {
    ImageDescriptor imageDesc=ImageUtils.createImageFromData(item.getIcon().getInnerContent());
    imageDesc=ImageUtils.scale(imageDesc,ICON_SIZE.ICON_32);
    String md5Desc=MD5.getMD5(item.getIcon().getInnerContent());
    image=cachedImages.get(md5Desc);
    if (image == null || image.isDisposed()) {
      image=imageDesc.createImage();
      cachedImages.put(md5Desc,image);
    }
 else {
    }
  }
  return image;
}",0.9128580134064594
125969,"@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    object.getProperty();
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      object.getProperty();
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}","@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    if (!(object instanceof MetadataTableRepositoryObject)) {
      object.getProperty();
    }
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      object.getProperty();
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}",0.9879268713349432
125970,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),connection.isContextMode(),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.9833127317676144
125971,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesList"". <p> Get the list type of hadoop properties from json string. </p>
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 * @throws JSONException
 */
public static List<Map<String,Object>> getHadoopPropertiesList(String propertiesJsonStr,boolean includeQuotes){
  List<Map<String,Object>> properties=new ArrayList<Map<String,Object>>();
  try {
    if (StringUtils.isNotEmpty(propertiesJsonStr)) {
      JSONArray jsonArr=new JSONArray(propertiesJsonStr);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<String> it=object.keys();
        while (it.hasNext()) {
          String key=it.next();
          String value=String.valueOf(object.get(key));
          if (includeQuotes) {
            value=TalendQuoteUtils.addQuotesIfNotExist(value);
          }
 else {
            value=TalendQuoteUtils.removeQuotesIfExist(value);
          }
          map.put(key,value);
        }
        properties.add(map);
      }
    }
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesList"". <p> Get the list type of hadoop properties from json string. </p>
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 * @throws JSONException
 */
public static List<Map<String,Object>> getHadoopPropertiesList(String propertiesJsonStr,boolean isContextMode,boolean includeQuotes){
  List<Map<String,Object>> properties=new ArrayList<Map<String,Object>>();
  try {
    if (StringUtils.isNotEmpty(propertiesJsonStr)) {
      JSONArray jsonArr=new JSONArray(propertiesJsonStr);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<String> it=object.keys();
        while (it.hasNext()) {
          String key=it.next();
          String value=String.valueOf(object.get(key));
          if (includeQuotes) {
            if (isContextMode && ""String_Node_Str"".equals(key)) {
              value=TalendQuoteUtils.removeQuotesIfExist(value);
            }
 else {
              value=TalendQuoteUtils.addQuotesIfNotExist(value);
            }
          }
 else {
            value=TalendQuoteUtils.removeQuotesIfExist(value);
          }
          map.put(key,value);
        }
        properties.add(map);
      }
    }
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return properties;
}",0.8776210446054137
125972,"public static ERepositoryObjectType getType(String typeName){
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])values()) {
    if (type.getType().equals(typeName)) {
      return type;
    }
  }
  return null;
}","public static ERepositoryObjectType getType(Property property){
  String itemId=property.getId();
  ERepositoryObjectType type=typeCacheById.get(itemId);
  if (type == null) {
    Item item=property.getItem();
    type=getItemType(item);
    if (type != null) {
      typeCacheById.put(itemId,type);
    }
  }
  return type;
}",0.3666061705989111
125973,"public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object casePigudfItem(    PigudfItem object){
      return PIG_UDF;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      return null;
    }
  }
.doSwitch(item);
}","/** 
 * Please use instead the method : public static ERepositoryObjectType getType(Property property)<br> This method might change to private in the future, since many calls will have low performance.
 * @param item
 * @return
 */
public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object casePigudfItem(    PigudfItem object){
      return PIG_UDF;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      return null;
    }
  }
.doSwitch(item);
}",0.9787234042553192
125974,"@Override public String storeProperties(ComponentProperties properties,String name,String repositoryLocation,Schema schema){
  return service.storeProperties(properties,name,repositoryLocation,schema);
}","@Override public String storeProperties(ComponentProperties properties,String name,String repositoryLocation,String schemaPropertyName){
  return service.storeProperties(properties,name,repositoryLocation,schemaPropertyName);
}",0.9116279069767442
125975,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),connection.isContextMode(),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.9833127317676144
125976,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesList"". <p> Get the list type of hadoop properties from json string. </p>
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 * @throws JSONException
 */
public static List<Map<String,Object>> getHadoopPropertiesList(String propertiesJsonStr,boolean includeQuotes){
  List<Map<String,Object>> properties=new ArrayList<Map<String,Object>>();
  try {
    if (StringUtils.isNotEmpty(propertiesJsonStr)) {
      JSONArray jsonArr=new JSONArray(propertiesJsonStr);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<String> it=object.keys();
        while (it.hasNext()) {
          String key=it.next();
          String value=String.valueOf(object.get(key));
          if (includeQuotes) {
            value=TalendQuoteUtils.addQuotesIfNotExist(value);
          }
 else {
            value=TalendQuoteUtils.removeQuotesIfExist(value);
          }
          map.put(key,value);
        }
        properties.add(map);
      }
    }
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesList"". <p> Get the list type of hadoop properties from json string. </p>
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 * @throws JSONException
 */
public static List<Map<String,Object>> getHadoopPropertiesList(String propertiesJsonStr,boolean isContextMode,boolean includeQuotes){
  List<Map<String,Object>> properties=new ArrayList<Map<String,Object>>();
  try {
    if (StringUtils.isNotEmpty(propertiesJsonStr)) {
      JSONArray jsonArr=new JSONArray(propertiesJsonStr);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<String> it=object.keys();
        while (it.hasNext()) {
          String key=it.next();
          String value=String.valueOf(object.get(key));
          if (includeQuotes) {
            if (isContextMode && ""String_Node_Str"".equals(key)) {
              value=TalendQuoteUtils.removeQuotesIfExist(value);
            }
 else {
              value=TalendQuoteUtils.addQuotesIfNotExist(value);
            }
          }
 else {
            value=TalendQuoteUtils.removeQuotesIfExist(value);
          }
          map.put(key,value);
        }
        properties.add(map);
      }
    }
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return properties;
}",0.8776210446054137
125977,"@Override public List<ComponentDefinition> getPossibleComponents(ComponentProperties properties) throws Throwable {
  return service.getPossibleComponents(properties);
}","@Override public List<ComponentDefinition> getPossibleComponents(ComponentProperties... properties) throws Throwable {
  return service.getPossibleComponents(properties);
}",0.9912023460410556
125978,"@Override public List<ComponentDefinition> getPossibleComponents(ComponentProperties properties) throws Throwable {
  return service.getPossibleComponents(properties);
}","@Override public List<ComponentDefinition> getPossibleComponents(ComponentProperties... properties) throws Throwable {
  return service.getPossibleComponents(properties);
}",0.9912023460410556
125979,"@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  CommonsPlugin.setWorkbenchCreated(true);
  Job myJob=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
        @Override protected void run() throws LoginException, PersistenceException {
        }
      }
;
      rwu.setAvoidUnloadResources(true);
      rwu.setUnloadResourcesAfterRun(true);
      rwu.setFilesModifiedOutsideOfRWU(true);
      rwu.setForceTransaction(true);
      ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
      return org.eclipse.core.runtime.Status.OK_STATUS;
    }
  }
;
  myJob.schedule();
}","@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  CommonsPlugin.setWorkbenchCreated(true);
}",0.4769101595298068
125980,"@Override public void postWindowOpen(){
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      IWorkbenchWindow workBenchWindow=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      IWorkbenchPage activePage=workBenchWindow.getActivePage();
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId())) {
      menuItem.setVisible(false);
    }
 else     if (""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  IWorkbenchPage activePage=getWindowConfigurer().getWindow().getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  perspProvider.closeAllEditors();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}","@Override public void postWindowOpen(){
  IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
  if (activePage != null && !(activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    Job myJob=new Job(""String_Node_Str""){
      @Override protected IStatus run(      IProgressMonitor monitor){
        RepositoryWorkUnit rwu=new RepositoryWorkUnit<Object>(""String_Node_Str""){
          @Override protected void run() throws LoginException, PersistenceException {
          }
        }
;
        rwu.setAvoidUnloadResources(true);
        rwu.setUnloadResourcesAfterRun(true);
        rwu.setFilesModifiedOutsideOfRWU(true);
        rwu.setForceTransaction(true);
        ProxyRepositoryFactory.getInstance().executeRepositoryWorkUnit(rwu);
        return org.eclipse.core.runtime.Status.OK_STATUS;
      }
    }
;
    myJob.schedule();
  }
  try {
    JavaHomeUtil.initializeJavaHome();
  }
 catch (  CoreException e1) {
    CommonExceptionHandler.process(e1);
  }
  createActions();
  registerActions();
  adviser.getHelper().postWindowOpen();
  IBrandingService service=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  getWindowConfigurer().setTitle(getWindowConfigurer().getTitle() + service.getBrandingConfiguration().getAdditionalTitle());
  if (!PluginChecker.isRefProjectLoaded()) {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),true);
  }
 else {
    String[] prefsId={""String_Node_Str""};
    ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),Arrays.asList(prefsId),false);
  }
  List<HidePreferencePageProvider> providers=HidePreferencePagesManager.getInstance().getProviders();
  List<String> needRemovedPrefs=new ArrayList<String>();
  for (  HidePreferencePageProvider provider : providers) {
    String prefPageId=provider.getPrefPageId();
    IHidePreferencePageValidator validator=provider.getValidator();
    if (prefPageId != null && (validator == null || validator.validate())) {
      needRemovedPrefs.add(prefPageId);
    }
  }
  ApplicationDeletionUtil.removeAndResetPreferencePages(this.getWindowConfigurer().getWindow(),needRemovedPrefs,false);
  showStarting();
  regisitPerspectiveListener();
  if (PluginChecker.isBPMloaded()) {
    IPath path=WorkbenchPlugin.getDefault().getDataLocation();
    if (path == null) {
      return;
    }
    final File stateFile=path.append(""String_Node_Str"").toFile();
    if (stateFile.exists()) {
      FileInputStream input;
      try {
        input=new FileInputStream(stateFile);
        BufferedReader reader=new BufferedReader(new InputStreamReader(input,""String_Node_Str""));
        IMemento memento=XMLMemento.createReadRoot(reader);
        IMemento[] hideMenuArray=memento.getChild(IWorkbenchConstants.TAG_WINDOW).getChild(IWorkbenchConstants.TAG_PAGE).getChild(IWorkbenchConstants.TAG_PERSPECTIVES).getChild(IWorkbenchConstants.TAG_PERSPECTIVE).getChildren(IWorkbenchConstants.TAG_HIDE_MENU);
        if (hideMenuArray.length == 0) {
          activePage.resetPerspective();
        }
 else {
          String bonitaMenues=""String_Node_Str"";
          boolean isBPMFilterWork=false;
          for (int i=0; hideMenuArray != null && i < hideMenuArray.length; i++) {
            IMemento hideMenu=hideMenuArray[i];
            String string=hideMenu.getString(IWorkbenchConstants.TAG_ID);
            if (string != null && string.startsWith(bonitaMenues)) {
              isBPMFilterWork=true;
              break;
            }
          }
          if (!isBPMFilterWork) {
            activePage.resetPerspective();
          }
        }
      }
 catch (      Exception e) {
      }
    }
  }
  final IPreferenceStore store=CoreUIPlugin.getDefault().getPreferenceStore();
  if (!store.getBoolean(ITalendCorePrefConstants.DATA_COLLECTOR)) {
    TokenCollectorFactory.getFactory().send(true);
    store.setValue(ITalendCorePrefConstants.DATA_COLLECTOR,true);
    if (store instanceof ScopedPreferenceStore) {
      try {
        ((ScopedPreferenceStore)store).save();
      }
 catch (      IOException e) {
        ExceptionHandler.process(e);
      }
    }
  }
  IWorkbenchActivitySupport activitySupport=getWindowConfigurer().getWindow().getWorkbench().getActivitySupport();
  String hideUpdateSiteId=""String_Node_Str"";
  Set<String> enabledActivities=new HashSet<String>();
  enabledActivities.addAll(activitySupport.getActivityManager().getEnabledActivityIds());
  if (!PluginChecker.isSVNProviderPluginLoaded()) {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.remove(hideUpdateSiteId);
    }
  }
 else {
    if (activitySupport.getActivityManager().getActivity(hideUpdateSiteId).isDefined()) {
      enabledActivities.add(hideUpdateSiteId);
    }
  }
  activitySupport.setEnabledActivityIds(enabledActivities);
  IWorkbenchWindowConfigurer workbenchWindowConfigurer=getWindowConfigurer();
  IActionBarConfigurer actionBarConfigurer=workbenchWindowConfigurer.getActionBarConfigurer();
  IMenuManager menuManager=actionBarConfigurer.getMenuManager();
  IContributionItem[] menuItems=menuManager.getItems();
  for (  IContributionItem menuItem : menuItems) {
    if (""String_Node_Str"".equals(menuItem.getId())) {
      menuItem.setVisible(false);
    }
 else     if (""String_Node_Str"".equals(menuItem.getId())) {
      menuManager.remove(menuItem);
    }
  }
  menuManager.update(true);
  RestoreAllRegisteredPerspectivesProvider perspProvider=new RestoreAllRegisteredPerspectivesProvider();
  IWorkbench workbench=PlatformUI.getWorkbench();
  IEclipseContext activeContext=((IEclipseContext)workbench.getService(IEclipseContext.class)).getActiveLeaf();
  ContextInjectionFactory.inject(perspProvider,activeContext);
  if (activePage != null && !(activePage.getActivePart() instanceof org.eclipse.ui.internal.ViewIntroAdapterPart && activePage.getPerspective().getId().equals(ProductUtils.PERSPECTIVE_DQ_ID))) {
    perspProvider.restoreAlwaysVisiblePerspectives();
  }
  perspProvider.closeAllEditors();
  if (GlobalServiceRegister.getDefault().isServiceRegistered(ITDQRepositoryService.class)) {
    ITDQRepositoryService tdqRepositoryService=(ITDQRepositoryService)GlobalServiceRegister.getDefault().getService(ITDQRepositoryService.class);
    if (tdqRepositoryService != null) {
      tdqRepositoryService.addPartListener();
      tdqRepositoryService.addSoftwareSystemUpdateListener();
    }
  }
}",0.9093643631758094
125981,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesFullList"". <p> Get the full list type of hadoop properties (with the parent properties of the hadoop cluster it belongs) from json string. </p>
 * @param connection
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 */
public static List<Map<String,Object>> getHadoopPropertiesFullList(Connection connection,String propertiesJsonStr,boolean includeQuotes){
  IHadoopClusterService hadoopClusterService=null;
  if (GlobalServiceRegister.getDefault().isServiceRegistered(IHadoopClusterService.class)) {
    hadoopClusterService=(IHadoopClusterService)GlobalServiceRegister.getDefault().getService(IHadoopClusterService.class);
  }
  List<Map<String,Object>> parentProperties=null;
  if (hadoopClusterService != null) {
    parentProperties=getHadoopPropertiesList(hadoopClusterService.getHadoopClusterProperties(connection),connection.isContextMode(),true);
  }
  List<Map<String,Object>> properties=getHadoopPropertiesList(propertiesJsonStr,connection.isContextMode(),true);
  Map<String,Map<String,Object>> propertiesMap=new HashMap<String,Map<String,Object>>();
  for (  Map<String,Object> proMap : properties) {
    String property=String.valueOf(proMap.get(""String_Node_Str""));
    propertiesMap.put(property,proMap);
  }
  if (parentProperties != null) {
    for (    Map<String,Object> parentProMap : parentProperties) {
      String property=String.valueOf(parentProMap.get(""String_Node_Str""));
      if (!propertiesMap.containsKey(property)) {
        propertiesMap.put(property,parentProMap);
        properties.add(parentProMap);
      }
    }
  }
  return properties;
}",0.9833127317676144
125982,"/** 
 * DOC ycbai Comment method ""getHadoopPropertiesList"". <p> Get the list type of hadoop properties from json string. </p>
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 * @throws JSONException
 */
public static List<Map<String,Object>> getHadoopPropertiesList(String propertiesJsonStr,boolean includeQuotes){
  List<Map<String,Object>> properties=new ArrayList<Map<String,Object>>();
  try {
    if (StringUtils.isNotEmpty(propertiesJsonStr)) {
      JSONArray jsonArr=new JSONArray(propertiesJsonStr);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<String> it=object.keys();
        while (it.hasNext()) {
          String key=it.next();
          String value=String.valueOf(object.get(key));
          if (includeQuotes) {
            value=TalendQuoteUtils.addQuotesIfNotExist(value);
          }
 else {
            value=TalendQuoteUtils.removeQuotesIfExist(value);
          }
          map.put(key,value);
        }
        properties.add(map);
      }
    }
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return properties;
}","/** 
 * DOC ycbai Comment method ""getHadoopPropertiesList"". <p> Get the list type of hadoop properties from json string. </p>
 * @param propertiesJsonStr
 * @param includeQuotes
 * @return
 * @throws JSONException
 */
public static List<Map<String,Object>> getHadoopPropertiesList(String propertiesJsonStr,boolean isContextMode,boolean includeQuotes){
  List<Map<String,Object>> properties=new ArrayList<Map<String,Object>>();
  try {
    if (StringUtils.isNotEmpty(propertiesJsonStr)) {
      JSONArray jsonArr=new JSONArray(propertiesJsonStr);
      for (int i=0; i < jsonArr.length(); i++) {
        HashMap<String,Object> map=new HashMap<String,Object>();
        JSONObject object=jsonArr.getJSONObject(i);
        Iterator<String> it=object.keys();
        while (it.hasNext()) {
          String key=it.next();
          String value=String.valueOf(object.get(key));
          if (includeQuotes) {
            if (isContextMode && ""String_Node_Str"".equals(key)) {
              value=TalendQuoteUtils.removeQuotesIfExist(value);
            }
 else {
              value=TalendQuoteUtils.addQuotesIfNotExist(value);
            }
          }
 else {
            value=TalendQuoteUtils.removeQuotesIfExist(value);
          }
          map.put(key,value);
        }
        properties.add(map);
      }
    }
  }
 catch (  JSONException e) {
    ExceptionHandler.process(e);
  }
  return properties;
}",0.8776210446054137
125983,"@Override public ComponentProperties commitFormValues(ComponentProperties properties,String formName){
  return service.commitFormValues(properties,formName);
}","@Deprecated public ComponentProperties commitFormValues(ComponentProperties properties,String formName){
  return null;
}",0.7900355871886121
125984,"public ELibraryInstallStatus getStatus(){
  final ELibraryInstallStatus eLibraryInstallStatus=ModuleStatusProvider.getStatusMap().get(getMavenUri(true));
  if (eLibraryInstallStatus != null) {
    return eLibraryInstallStatus;
  }
 else {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
    }
 else {
      String localMavenUri=getMavenUriSnapshot().replace(""String_Node_Str"",""String_Node_Str"" + MavenConstants.LOCAL_RESOLUTION_URL + ""String_Node_Str"");
      try {
        getMavenResolver().resolve(localMavenUri);
        status=ELibraryInstallStatus.INSTALLED;
      }
 catch (      IOException e) {
        status=ELibraryInstallStatus.NOT_INSTALLED;
      }
    }
    ModuleStatusProvider.getStatusMap().put(getMavenUri(true),status);
  }
  return this.status;
}","public ELibraryInstallStatus getStatus(){
  final ELibraryInstallStatus eLibraryInstallStatus=ModuleStatusProvider.getStatusMap().get(getMavenUriSnapshot());
  if (eLibraryInstallStatus != null) {
    return eLibraryInstallStatus;
  }
 else {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    Set<String> existLibraries=libManagerService.list();
    if (existLibraries.contains(getModuleName())) {
      status=ELibraryInstallStatus.INSTALLED;
    }
 else {
      String localMavenUri=getMavenUriSnapshot().replace(""String_Node_Str"",""String_Node_Str"" + MavenConstants.LOCAL_RESOLUTION_URL + ""String_Node_Str"");
      try {
        getMavenResolver().resolve(localMavenUri);
        status=ELibraryInstallStatus.INSTALLED;
      }
 catch (      IOException e) {
        status=ELibraryInstallStatus.NOT_INSTALLED;
      }
    }
    ModuleStatusProvider.getStatusMap().put(getMavenUriSnapshot(),status);
  }
  return this.status;
}",0.986341463414634
125985,"public String getMavenUriSnapshot(){
  MavenArtifact artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
  if (artifact != null && !MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId())) {
    return getMavenUri();
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    String configuredUri=getMavenUri();
    if (!StringUtils.isEmpty(configuredUri)) {
      mavenUriSnapshot=MavenUrlHelper.generateSnapshotMavenUri(configuredUri);
    }
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
    if (mvnUrisFromIndex != null) {
      final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
      String maxVerstion=null;
      for (      String mvnUri : split) {
        if (maxVerstion == null) {
          maxVerstion=mvnUri;
        }
 else {
          MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
          MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
          if (lastArtifact != null && currentArtifact != null) {
            String lastV=lastArtifact.getVersion();
            lastV=lastV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            String currentV=currentArtifact.getVersion();
            currentV=currentV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            if (!lastV.equals(currentV)) {
              Version lastVersion=new Version(lastV);
              Version currentVersion=new Version(currentV);
              if (currentVersion.compareTo(lastVersion) > 0) {
                maxVerstion=mvnUri;
              }
            }
          }
        }
      }
      mavenUriSnapshot=maxVerstion;
    }
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName());
  }
  return mavenUriSnapshot;
}","public String getMavenUriSnapshot(){
  MavenArtifact artifact=null;
  if (getMavenUri() != null) {
    if (getMavenUri().split(MavenUrlHelper.SEPERATOR).length < 4 && getModuleName().lastIndexOf(""String_Node_Str"") != -1) {
      String extension=getModuleName().substring(getModuleName().lastIndexOf(""String_Node_Str"") + 1,getModuleName().length());
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri() + ""String_Node_Str"" + extension);
    }
 else {
      artifact=MavenUrlHelper.parseMvnUrl(getMavenUri());
    }
  }
  if (artifact != null && !MavenConstants.DEFAULT_LIB_GROUP_ID.equals(artifact.getGroupId())) {
    return getMavenUri();
  }
  if (StringUtils.isEmpty(mavenUriSnapshot) && artifact != null) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrl(artifact.getGroupId(),artifact.getArtifactId(),artifact.getVersion() + ""String_Node_Str"",artifact.getType(),artifact.getClassifier());
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    ILibraryManagerService libManagerService=(ILibraryManagerService)GlobalServiceRegister.getDefault().getService(ILibraryManagerService.class);
    String mvnUrisFromIndex=libManagerService.getMavenUriFromIndex(getModuleName());
    if (mvnUrisFromIndex != null) {
      final String[] split=mvnUrisFromIndex.split(MavenUrlHelper.MVN_INDEX_SPLITER);
      String maxVerstion=null;
      for (      String mvnUri : split) {
        if (maxVerstion == null) {
          maxVerstion=mvnUri;
        }
 else {
          MavenArtifact lastArtifact=MavenUrlHelper.parseMvnUrl(maxVerstion);
          MavenArtifact currentArtifact=MavenUrlHelper.parseMvnUrl(mvnUri);
          if (lastArtifact != null && currentArtifact != null) {
            String lastV=lastArtifact.getVersion();
            lastV=lastV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            String currentV=currentArtifact.getVersion();
            currentV=currentV.replace(MavenConstants.SNAPSHOT,""String_Node_Str"");
            if (!lastV.equals(currentV)) {
              Version lastVersion=new Version(lastV);
              Version currentVersion=new Version(currentV);
              if (currentVersion.compareTo(lastVersion) > 0) {
                maxVerstion=mvnUri;
              }
            }
          }
        }
      }
      mavenUriSnapshot=maxVerstion;
    }
  }
  if (StringUtils.isEmpty(mavenUriSnapshot)) {
    mavenUriSnapshot=MavenUrlHelper.generateMvnUrlForJarName(getModuleName());
  }
  return mavenUriSnapshot;
}",0.8159714476912782
125986,"/** 
 * DOC ggu Comment method ""restorePerspective"". try to find and create the perspective. if the existed custom perspective, will use the custom one. won't create original one.
 */
protected void restorePerspective(MPerspectiveStack mPerspStack,String id){
  if (id != null && mPerspStack != null) {
    MPerspective mPersp=null;
    IPerspectiveRegistry perspectiveRegistry=workbench.getPerspectiveRegistry();
    for (    MPerspective mp : mPerspStack.getChildren()) {
      if (mp.getElementId().equals(id)) {
        mPersp=mp;
        break;
      }
 else {
        IPerspectiveDescriptor persp=perspectiveRegistry.findPerspectiveWithId(mp.getElementId());
        if (persp != null && persp instanceof PerspectiveDescriptor) {
          PerspectiveDescriptor pd=(PerspectiveDescriptor)persp;
          if (!pd.getOriginalId().equals(pd.getId()) && pd.getOriginalId().equals(id)) {
            mPersp=mp;
            break;
          }
        }
      }
    }
    IPerspectiveDescriptor perspDesc=perspectiveRegistry.findPerspectiveWithId(id);
    if (perspDesc == null) {
      if (mPersp != null) {
        mPerspStack.getChildren().remove(mPersp);
      }
      return;
    }
    if (mPersp == null) {
      String perspId=perspDesc.getId();
      WorkbenchPage workbenchPage=(WorkbenchPage)workbench.getActiveWorkbenchWindow().getActivePage();
      mPersp=(MPerspective)fModelService.cloneSnippet(fApp,perspId,fWindow);
      if (mPersp == null) {
        mPersp=fModelService.createModelElement(MPerspective.class);
        mPersp.setElementId(perspDesc.getId());
        IPerspectiveFactory factory=((PerspectiveDescriptor)perspDesc).createFactory();
        ModeledPageLayout modelLayout=new ModeledPageLayout(fWindow,fModelService,fPartService,mPersp,perspDesc,workbenchPage,true);
        factory.createInitialLayout(modelLayout);
        PerspectiveTagger.tagPerspective(mPersp,fModelService);
        PerspectiveExtensionReader reader=new PerspectiveExtensionReader();
        reader.extendLayout(getExtensionTracker(workbenchPage.getWorkbenchWindow().getShell().getDisplay()),perspDesc.getId(),modelLayout);
      }
      mPersp.setLabel(perspDesc.getLabel());
      ImageDescriptor imageDescriptor=perspDesc.getImageDescriptor();
      if (imageDescriptor != null) {
        String imageURL=MenuHelper.getImageUrl(imageDescriptor);
        mPersp.setIconURI(imageURL);
      }
      fModelService.hideLocalPlaceholders(fWindow,mPersp);
      mPerspStack.getChildren().add(mPersp);
    }
 else {
      mPerspStack.getChildren().remove(mPersp);
      mPerspStack.getChildren().add(mPersp);
    }
  }
}","/** 
 * DOC ggu Comment method ""restorePerspective"". try to find and create the perspective. if the existed custom perspective, will use the custom one. won't create original one.
 */
protected void restorePerspective(MPerspectiveStack mPerspStack,String id){
  if (id != null && mPerspStack != null) {
    MPerspective mPersp=null;
    IPerspectiveRegistry perspectiveRegistry=workbench.getPerspectiveRegistry();
    for (    MPerspective mp : mPerspStack.getChildren()) {
      if (mp.getElementId().equals(id)) {
        mPersp=mp;
        break;
      }
 else {
        IPerspectiveDescriptor persp=perspectiveRegistry.findPerspectiveWithId(mp.getElementId());
        if (persp != null && persp instanceof PerspectiveDescriptor) {
          PerspectiveDescriptor pd=(PerspectiveDescriptor)persp;
          if (!pd.getOriginalId().equals(pd.getId()) && pd.getOriginalId().equals(id)) {
            mPersp=mp;
            break;
          }
        }
      }
    }
    IPerspectiveDescriptor perspDesc=perspectiveRegistry.findPerspectiveWithId(id);
    if (perspDesc == null) {
      if (mPersp != null) {
        mPerspStack.getChildren().remove(mPersp);
      }
      return;
    }
    if (mPersp == null) {
      if (fWindow == null) {
        return;
      }
      String perspId=perspDesc.getId();
      WorkbenchPage workbenchPage=(WorkbenchPage)workbench.getActiveWorkbenchWindow().getActivePage();
      mPersp=(MPerspective)fModelService.cloneSnippet(fApp,perspId,fWindow);
      if (mPersp == null) {
        mPersp=fModelService.createModelElement(MPerspective.class);
        mPersp.setElementId(perspDesc.getId());
        IPerspectiveFactory factory=((PerspectiveDescriptor)perspDesc).createFactory();
        ModeledPageLayout modelLayout=new ModeledPageLayout(fWindow,fModelService,fPartService,mPersp,perspDesc,workbenchPage,true);
        factory.createInitialLayout(modelLayout);
        PerspectiveTagger.tagPerspective(mPersp,fModelService);
        PerspectiveExtensionReader reader=new PerspectiveExtensionReader();
        reader.extendLayout(getExtensionTracker(workbenchPage.getWorkbenchWindow().getShell().getDisplay()),perspDesc.getId(),modelLayout);
      }
      mPersp.setLabel(perspDesc.getLabel());
      ImageDescriptor imageDescriptor=perspDesc.getImageDescriptor();
      if (imageDescriptor != null) {
        String imageURL=MenuHelper.getImageUrl(imageDescriptor);
        mPersp.setIconURI(imageURL);
      }
      fModelService.hideLocalPlaceholders(fWindow,mPersp);
      mPerspStack.getChildren().add(mPersp);
    }
 else {
      mPerspStack.getChildren().remove(mPersp);
      mPerspStack.getChildren().add(mPersp);
    }
  }
}",0.9899905571293672
125987,"@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    object.getProperty();
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      object.getProperty();
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}","@Override public String getText(Object obj){
  if (obj instanceof IRepositoryViewObject) {
    return getText((IRepositoryViewObject)obj);
  }
  if (obj instanceof Property) {
    return getText((Property)obj);
  }
  RepositoryNode node=(RepositoryNode)obj;
  if (node.getType() == ENodeType.REPOSITORY_ELEMENT || node.getType() == ENodeType.SIMPLE_FOLDER) {
    IRepositoryViewObject object=node.getObject();
    String label=""String_Node_Str"";
    if (!(object instanceof MetadataTableRepositoryObject)) {
      object.getProperty();
    }
    if (object.isModified()) {
      label=""String_Node_Str"";
    }
    org.talend.core.model.properties.Project mainProject=ProjectManager.getInstance().getCurrentProject().getEmfProject();
    String projectLabel=object.getProjectLabel();
    ERepositoryObjectType repositoryObjectType=object.getRepositoryObjectType();
    if (repositoryObjectType == ERepositoryObjectType.METADATA_CON_QUERY || repositoryObjectType == ERepositoryObjectType.SNIPPETS || repositoryObjectType == ERepositoryObjectType.METADATA_CON_SYNONYM || repositoryObjectType == ERepositoryObjectType.METADATA_CON_TABLE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_VIEW || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_CON_CDC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_IDOC || repositoryObjectType == ERepositoryObjectType.METADATA_SAP_FUNCTION || repositoryObjectType == ERepositoryObjectType.METADATA_SALESFORCE_MODULE || repositoryObjectType == ERepositoryObjectType.METADATA_CON_COLUMN) {
      label=label + object.getLabel();
      if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
        IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
        if (service != null && service.isMergeRefProject()) {
          label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
        }
      }
      return label;
    }
    if (repositoryObjectType == ERepositoryObjectType.JOB_DOC || repositoryObjectType == ERepositoryObjectType.JOBLET_DOC || repositoryObjectType == ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"")) {
      object.getProperty();
      if (object.isModified()) {
        label=""String_Node_Str"";
      }
    }
    label=label + getText(object);
    if (!mainProject.getLabel().equals(projectLabel) && PluginChecker.isRefProjectLoaded()) {
      IReferencedProjectService service=(IReferencedProjectService)GlobalServiceRegister.getDefault().getService(IReferencedProjectService.class);
      if (service != null && service.isMergeRefProject()) {
        label=label + ""String_Node_Str"" + projectLabel+ ""String_Node_Str"";
      }
    }
    return label;
  }
 else {
    String label=node.getLabel();
    return label;
  }
}",0.9879268713349432
125988,"public static ERepositoryObjectType getType(String typeName){
  for (  ERepositoryObjectType type : (ERepositoryObjectType[])values()) {
    if (type.getType().equals(typeName)) {
      return type;
    }
  }
  return null;
}","public static ERepositoryObjectType getType(Property property){
  String itemId=property.getId();
  ERepositoryObjectType type=typeCacheById.get(itemId);
  if (type == null) {
    Item item=property.getItem();
    type=getItemType(item);
    if (type != null) {
      typeCacheById.put(itemId,type);
    }
  }
  return type;
}",0.3666061705989111
125989,"public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object casePigudfItem(    PigudfItem object){
      return PIG_UDF;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      return null;
    }
  }
.doSwitch(item);
}","/** 
 * Please use instead the method : public static ERepositoryObjectType getType(Property property)<br> This method might change to private in the future, since many calls will have low performance.
 * @param item
 * @return
 */
public static ERepositoryObjectType getItemType(Item item){
  ERepositoryObjectType repObjType=getTDQRepObjType(item);
  if (repObjType != null) {
    return repObjType;
  }
  repObjType=getRepositoryObjectType(item);
  if (repObjType != null) {
    return repObjType;
  }
  return (ERepositoryObjectType)new PropertiesSwitch(){
    @Override public Object caseFolderItem(    FolderItem object){
      return FOLDER;
    }
    @Override public Object caseDocumentationItem(    DocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseLinkDocumentationItem(    LinkDocumentationItem object){
      return DOCUMENTATION;
    }
    @Override public Object caseRulesItem(    RulesItem object){
      return METADATA_FILE_RULES;
    }
    @Override public Object caseLinkRulesItem(    LinkRulesItem object){
      return METADATA_FILE_LINKRULES;
    }
    @Override public Object caseJobDocumentationItem(    JobDocumentationItem object){
      return JOB_DOC;
    }
    @Override public Object caseJobletDocumentationItem(    JobletDocumentationItem object){
      return JOBLET_DOC;
    }
    @Override public Object casePigudfItem(    PigudfItem object){
      return PIG_UDF;
    }
    @Override public Object caseRoutineItem(    RoutineItem object){
      return ROUTINES;
    }
    @Override public Object caseJobScriptItem(    JobScriptItem object){
      return JOB_SCRIPT;
    }
    @Override public Object caseSQLPatternItem(    SQLPatternItem object){
      return SQLPATTERNS;
    }
    @Override public Object caseProcessItem(    ProcessItem object){
      return PROCESS;
    }
    @Override public Object caseJobletProcessItem(    JobletProcessItem object){
      return JOBLET;
    }
    @Override public Object caseContextItem(    ContextItem object){
      return CONTEXT;
    }
    @Override public Object caseSnippetItem(    SnippetItem object){
      return SNIPPETS;
    }
    @Override public Object caseSnippetVariable(    SnippetVariable object){
      return SNIPPETS;
    }
    @Override public Object caseBusinessProcessItem(    BusinessProcessItem object){
      return BUSINESS_PROCESS;
    }
    @Override public Object caseCSVFileConnectionItem(    CSVFileConnectionItem object){
      throw new IllegalStateException(Messages.getString(""String_Node_Str""));
    }
    @Override public Object caseDatabaseConnectionItem(    DatabaseConnectionItem object){
      return METADATA_CONNECTIONS;
    }
    @Override public Object caseSAPConnectionItem(    SAPConnectionItem object){
      return METADATA_SAPCONNECTIONS;
    }
    @Override public Object caseDelimitedFileConnectionItem(    DelimitedFileConnectionItem object){
      return METADATA_FILE_DELIMITED;
    }
    @Override public Object casePositionalFileConnectionItem(    PositionalFileConnectionItem object){
      return METADATA_FILE_POSITIONAL;
    }
    @Override public Object caseRegExFileConnectionItem(    RegExFileConnectionItem object){
      return METADATA_FILE_REGEXP;
    }
    @Override public Object caseXmlFileConnectionItem(    XmlFileConnectionItem object){
      return METADATA_FILE_XML;
    }
    @Override public Object caseExcelFileConnectionItem(    ExcelFileConnectionItem object){
      return METADATA_FILE_EXCEL;
    }
    @Override public Object caseLdifFileConnectionItem(    LdifFileConnectionItem object){
      return METADATA_FILE_LDIF;
    }
    @Override public Object caseLDAPSchemaConnectionItem(    LDAPSchemaConnectionItem object){
      return METADATA_LDAP_SCHEMA;
    }
    @Override public Object caseGenericSchemaConnectionItem(    GenericSchemaConnectionItem object){
      return METADATA_GENERIC_SCHEMA;
    }
    @Override public Object caseSalesforceSchemaConnectionItem(    SalesforceSchemaConnectionItem object){
      return METADATA_SALESFORCE_SCHEMA;
    }
    @Override public Object caseWSDLSchemaConnectionItem(    WSDLSchemaConnectionItem object){
      return METADATA_WSDL_SCHEMA;
    }
    @Override public Object caseEDIFACTConnectionItem(    EDIFACTConnectionItem object){
      return METADATA_EDIFACT;
    }
    @Override public Object caseEbcdicConnectionItem(    EbcdicConnectionItem object){
      return METADATA_FILE_EBCDIC;
    }
    @Override public Object caseHL7ConnectionItem(    HL7ConnectionItem object){
      return METADATA_FILE_HL7;
    }
    @Override public Object caseFTPConnectionItem(    FTPConnectionItem object){
      return METADATA_FILE_FTP;
    }
    @Override public Object caseBRMSConnectionItem(    BRMSConnectionItem object){
      return METADATA_FILE_BRMS;
    }
    @Override public Object caseMDMConnectionItem(    MDMConnectionItem object){
      return METADATA_MDMCONNECTION;
    }
    @Override public Object caseSVGBusinessProcessItem(    SVGBusinessProcessItem object){
      return SVG_BUSINESS_PROCESS;
    }
    @Override public Object caseHeaderFooterConnectionItem(    HeaderFooterConnectionItem object){
      return METADATA_HEADER_FOOTER;
    }
    @Override public Object caseTDQItem(    TDQItem object){
      return TDQ_ELEMENT;
    }
    @Override public Object caseValidationRulesConnectionItem(    ValidationRulesConnectionItem object){
      return METADATA_VALIDATION_RULES;
    }
    @Override public Object defaultCase(    EObject object){
      return null;
    }
  }
.doSwitch(item);
}",0.9787234042553192
125990,"@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  if (null != cheetSheetInPerspective.get(perspective.getId()) && cheetSheetInPerspective.get(perspective.getId())) {
    restoreCheetSheet();
  }
  if (!PrefUtil.getAPIPreferenceStore().getBoolean(this.getClass().getName()) && perspective.getId().equals(CheatSheetUtils.DQ_PERSPECTIVE_ID)) {
    PrefUtil.getAPIPreferenceStore().setValue(this.getClass().getName(),true);
    restoreCheetSheet();
  }
  super.perspectiveActivated(page,perspective);
}","@Override public void perspectiveActivated(IWorkbenchPage page,IPerspectiveDescriptor perspective){
  if (null != cheetSheetInPerspective.get(perspective.getId()) && cheetSheetInPerspective.get(perspective.getId())) {
    restoreCheetSheet();
  }
  if (CheatSheetUtils.getInstance().isFirstTime() && perspective.getId().equals(CheatSheetUtils.DQ_PERSPECTIVE_ID)) {
    restoreCheetSheet();
  }
  super.perspectiveActivated(page,perspective);
}",0.6868076535750252
125991,"/** 
 * DOC talend Comment method ""restoreOtherViewAndEditor"".
 * @param part
 */
protected void restoreOtherViewAndEditor(IWorkbenchPart part){
  if (part instanceof org.eclipse.ui.internal.cheatsheets.views.CheatSheetView) {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    for (    IViewReference ref : activePage.getViewReferences()) {
      if (part != ref.getView(false)) {
        activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
      }
    }
    for (    IEditorReference ref : activePage.getEditorReferences()) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
    }
    CheatSheetUtils.getInstance().setMaxCheatSheetHasSHow(false);
    if (partListener2 != null) {
      activePage.removePartListener(partListener2);
    }
  }
}","/** 
 * DOC talend Comment method ""restoreOtherViewAndEditor"".
 * @param part
 */
protected void restoreOtherViewAndEditor(IWorkbenchPart part){
  if (part instanceof org.eclipse.ui.internal.cheatsheets.views.CheatSheetView) {
    IWorkbenchPage activePage=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
    if (activePage == null) {
      return;
    }
    for (    IViewReference ref : activePage.getViewReferences()) {
      if (part != ref.getView(false)) {
        activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
      }
    }
    for (    IEditorReference ref : activePage.getEditorReferences()) {
      activePage.setPartState(ref,IWorkbenchPage.STATE_RESTORED);
    }
    CheatSheetUtils.getInstance().setMaxCheatSheetHasSHow(false);
    if (partListener2 != null) {
      activePage.removePartListener(partListener2);
    }
  }
}",0.9705188679245284
125992,"public void initNewWorkspaceTasks(){
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  for (  IWorkspaceMigrationTask task : toExecute) {
    coreService.addWorkspaceTaskDone(task.getId());
  }
}","public void initNewWorkspaceTasks(){
  final ICoreService coreService=getCoreService();
  if (coreService == null) {
    return;
  }
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  for (  IWorkspaceMigrationTask task : toExecute) {
    coreService.addWorkspaceTaskDone(task.getId());
  }
}",0.8241758241758241
125993,"@Override public void executeWorspaceTasks(){
  log.trace(""String_Node_Str"");
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  List<String> done=coreService.readWorkspaceTasksDone();
  String lastUser=coreService.getLastUser();
  if (lastUser == null || lastUser.length() == 0) {
    if (done.isEmpty()) {
      initNewWorkspaceTasks();
      done=coreService.readWorkspaceTasksDone();
    }
  }
  Collections.sort(toExecute,new Comparator<IWorkspaceMigrationTask>(){
    @Override public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  for (  IWorkspaceMigrationTask task : toExecute) {
    if (!done.contains(task.getId())) {
      if (task.execute()) {
        coreService.addWorkspaceTaskDone(task.getId());
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
 else {
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
    }
  }
}","@Override public void executeWorspaceTasks(){
  log.trace(""String_Node_Str"");
  List<IWorkspaceMigrationTask> toExecute=GetTasksHelper.getWorkspaceTasks();
  final ICoreService coreService=getCoreService();
  if (coreService == null) {
    return;
  }
  List<String> done=coreService.readWorkspaceTasksDone();
  String lastUser=coreService.getLastUser();
  if (lastUser == null || lastUser.length() == 0) {
    if (done.isEmpty()) {
      initNewWorkspaceTasks();
      done=coreService.readWorkspaceTasksDone();
    }
  }
  Collections.sort(toExecute,new Comparator<IWorkspaceMigrationTask>(){
    @Override public int compare(    IWorkspaceMigrationTask o1,    IWorkspaceMigrationTask o2){
      return o1.getOrder().compareTo(o2.getOrder());
    }
  }
);
  for (  IWorkspaceMigrationTask task : toExecute) {
    if (!done.contains(task.getId())) {
      if (task.execute()) {
        coreService.addWorkspaceTaskDone(task.getId());
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
 else {
        log.debug(""String_Node_Str"" + task.getName() + ""String_Node_Str"");
      }
    }
  }
}",0.9552238805970148
125994,"@Test public void testCurrentProject3() throws PersistenceException {
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  IProject project=ResourceUtils.getProject(currentProject);
  testExist(new ProjectPreferenceManager(project,getTestQualifier(currentProject.getTechnicalLabel())));
}","@Test public void testCurrentProject3() throws PersistenceException {
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  IProject project=ResourceUtils.getProject(currentProject);
  testExist(new ProjectPreferenceManager(project,'C' + getTestQualifier(currentProject.getTechnicalLabel())));
}",0.9904761904761904
125995,"@Test public void testCurrentProject(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  testExist(new ProjectPreferenceManager(getTestQualifier(currentProject.getTechnicalLabel())));
}","@Test public void testCurrentProject(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  testExist(new ProjectPreferenceManager('A' + getTestQualifier(currentProject.getTechnicalLabel())));
}",0.9861111111111112
125996,"@Test public void testCurrentProject2(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  testExist(new ProjectPreferenceManager(currentProject,getTestQualifier(currentProject.getTechnicalLabel())));
}","@Test public void testCurrentProject2(){
  Project currentProject=ProjectManager.getInstance().getCurrentProject();
  testExist(new ProjectPreferenceManager(currentProject,'B' + getTestQualifier(currentProject.getTechnicalLabel())));
}",0.9870689655172412
125997,"@Override public void done(IJobChangeEvent jobEvent){
  MultiStatus results=(MultiStatus)jobEvent.getResult();
  IStatus[] installStatus=results.getChildren();
  boolean hasAnyFailure=false;
  boolean hasAnySuccess=false;
  boolean hasCancel=false;
  for (  IStatus status : installStatus) {
    if (!status.isOK()) {
      if (status.getSeverity() == IStatus.CANCEL) {
        hasCancel=true;
      }
 else {
        hasAnyFailure=true;
      }
    }
 else {
      hasAnySuccess=true;
    }
  }
  if (hasCancel) {
    return;
  }
  String firstPartOfMessage=Messages.getString(""String_Node_Str"");
  if (hasAnySuccess) {
    if (hasAnyFailure) {
      firstPartOfMessage=Messages.getString(""String_Node_Str"");
    }
    final String finalMessage=firstPartOfMessage + Messages.getString(""String_Node_Str"");
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        boolean isOkToRestart=MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),finalMessage);
        if (isOkToRestart) {
          PlatformUI.getWorkbench().restart();
        }
      }
    }
);
  }
}","@Override public void done(IJobChangeEvent jobEvent){
  MultiStatus results=(MultiStatus)jobEvent.getResult();
  IStatus[] installStatus=results.getChildren();
  boolean hasAnyFailure=false;
  boolean hasAnySuccess=false;
  boolean hasCancel=false;
  for (  IStatus status : installStatus) {
    if (!status.isOK()) {
      if (status.getSeverity() == IStatus.CANCEL) {
        hasCancel=true;
      }
 else {
        hasAnyFailure=true;
      }
    }
 else {
      hasAnySuccess=true;
    }
  }
  if (hasCancel) {
    return;
  }
  String firstPartOfMessage=Messages.getString(""String_Node_Str"");
  if (hasAnySuccess) {
    if (hasAnyFailure) {
      firstPartOfMessage=Messages.getString(""String_Node_Str"");
    }
    final String finalMessage=firstPartOfMessage + Messages.getString(""String_Node_Str"");
    Display.getDefault().syncExec(new Runnable(){
      @Override public void run(){
        IPreferenceStore store=PlatformUI.getPreferenceStore();
        store.putValue(""String_Node_Str"",""String_Node_Str"");
        boolean isOkToRestart=MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),finalMessage);
        if (isOkToRestart) {
          PlatformUI.getWorkbench().restart();
        }
      }
    }
);
  }
}",0.9471458773784356
125998,"@SuppressWarnings(""String_Node_Str"") @Override public boolean performFinish(){
  storeDoNotShowAgainPref();
  InstallNewFeatureJob installNewFeatureJob=new InstallNewFeatureJob(new HashSet<ExtraFeature>(updateWizardModel.selectedExtraFeatures),updateWizardModel.getFeatureRepositories());
  installNewFeatureJob.schedule();
  installNewFeatureJob.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent jobEvent){
      MultiStatus results=(MultiStatus)jobEvent.getResult();
      IStatus[] installStatus=results.getChildren();
      boolean hasAnyFailure=false;
      boolean hasAnySuccess=false;
      boolean hasCancel=false;
      for (      IStatus status : installStatus) {
        if (!status.isOK()) {
          if (status.getSeverity() == IStatus.CANCEL) {
            hasCancel=true;
          }
 else {
            hasAnyFailure=true;
          }
        }
 else {
          hasAnySuccess=true;
        }
      }
      if (hasCancel) {
        return;
      }
      String firstPartOfMessage=Messages.getString(""String_Node_Str"");
      if (hasAnySuccess) {
        if (hasAnyFailure) {
          firstPartOfMessage=Messages.getString(""String_Node_Str"");
        }
        final String finalMessage=firstPartOfMessage + Messages.getString(""String_Node_Str"");
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            boolean isOkToRestart=MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),finalMessage);
            if (isOkToRestart) {
              PlatformUI.getWorkbench().restart();
            }
          }
        }
);
      }
    }
  }
);
  return true;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean performFinish(){
  storeDoNotShowAgainPref();
  InstallNewFeatureJob installNewFeatureJob=new InstallNewFeatureJob(new HashSet<ExtraFeature>(updateWizardModel.selectedExtraFeatures),updateWizardModel.getFeatureRepositories());
  installNewFeatureJob.schedule();
  installNewFeatureJob.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent jobEvent){
      MultiStatus results=(MultiStatus)jobEvent.getResult();
      IStatus[] installStatus=results.getChildren();
      boolean hasAnyFailure=false;
      boolean hasAnySuccess=false;
      boolean hasCancel=false;
      for (      IStatus status : installStatus) {
        if (!status.isOK()) {
          if (status.getSeverity() == IStatus.CANCEL) {
            hasCancel=true;
          }
 else {
            hasAnyFailure=true;
          }
        }
 else {
          hasAnySuccess=true;
        }
      }
      if (hasCancel) {
        return;
      }
      String firstPartOfMessage=Messages.getString(""String_Node_Str"");
      if (hasAnySuccess) {
        if (hasAnyFailure) {
          firstPartOfMessage=Messages.getString(""String_Node_Str"");
        }
        final String finalMessage=firstPartOfMessage + Messages.getString(""String_Node_Str"");
        Display.getDefault().syncExec(new Runnable(){
          @Override public void run(){
            IPreferenceStore store=PlatformUI.getPreferenceStore();
            store.putValue(""String_Node_Str"",""String_Node_Str"");
            boolean isOkToRestart=MessageDialog.openQuestion(getShell(),Messages.getString(""String_Node_Str""),finalMessage);
            if (isOkToRestart) {
              PlatformUI.getWorkbench().restart();
            }
          }
        }
);
      }
    }
  }
);
  return true;
}",0.9620974636648618
125999,"public static boolean isJavaProject(){
  RepositoryContext repositoryContext=(RepositoryContext)CoreRuntimePlugin.getInstance().getContext().getProperty(Context.REPOSITORY_CONTEXT_KEY);
  ECodeLanguage codeLanguage=repositoryContext.getProject().getLanguage();
  return (codeLanguage == ECodeLanguage.JAVA);
}","public static boolean isJavaProject(){
  return true;
}",0.2857142857142857
126000,"private static List<ModuleNeeded> collectModuleNeeded(List<IRepositoryViewObject> routineItems,Set<String> routineIdOrNames,boolean system){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  if (!routineItems.isEmpty()) {
    for (    IRepositoryViewObject object : routineItems) {
      if (routineIdOrNames.contains(object.getLabel()) && system || routineIdOrNames.contains(object.getId()) && !system) {
        Item item=object.getProperty().getItem();
        if (item instanceof RoutineItem) {
          RoutineItem routine=(RoutineItem)item;
          importNeedsList.addAll(createModuleNeededFromRoutine(routine));
        }
      }
    }
  }
  if (system) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerUIService.class)) {
      ILibraryManagerUIService libUiService=(ILibraryManagerUIService)GlobalServiceRegister.getDefault().getService(ILibraryManagerUIService.class);
      Set<String> routinesName=new HashSet<>();
      for (      IRoutinesProvider routineProvider : libUiService.getRoutinesProviders(ECodeLanguage.JAVA)) {
        for (        URL url : routineProvider.getSystemRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
        for (        URL url : routineProvider.getTalendRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
      }
      Map<String,List<LibraryInfo>> routineAndJars=libUiService.getRoutineAndJars();
      Iterator<Map.Entry<String,List<LibraryInfo>>> iter=routineAndJars.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,List<LibraryInfo>> entry=iter.next();
        String routineName=entry.getKey();
        if (!routinesName.contains(routineName)) {
          continue;
        }
        List<LibraryInfo> needJars=entry.getValue();
        for (        LibraryInfo jar : needJars) {
          ModuleNeeded toAdd=new ModuleNeeded(""String_Node_Str"" + routineName,jar.getLibName(),""String_Node_Str"",true);
          String bundleId=jar.getBundleId();
          if (bundleId != null) {
            String bundleName=null;
            String bundleVersion=null;
            if (bundleId.contains(""String_Node_Str"")) {
              String[] nameAndVersion=bundleId.split(""String_Node_Str"");
              bundleName=nameAndVersion[0];
              bundleVersion=nameAndVersion[1];
            }
 else {
              bundleName=bundleId;
            }
            toAdd.setBundleName(bundleName);
            toAdd.setBundleVersion(bundleVersion);
          }
          importNeedsList.add(toAdd);
        }
      }
    }
  }
  return importNeedsList;
}","private static List<ModuleNeeded> collectModuleNeeded(List<IRepositoryViewObject> routineItems,Set<String> routineIdOrNames,boolean system){
  List<ModuleNeeded> importNeedsList=new ArrayList<ModuleNeeded>();
  if (org.talend.commons.utils.platform.PluginChecker.isOnlyTopLoaded()) {
    return importNeedsList;
  }
  if (!routineItems.isEmpty()) {
    for (    IRepositoryViewObject object : routineItems) {
      if (routineIdOrNames.contains(object.getLabel()) && system || routineIdOrNames.contains(object.getId()) && !system) {
        Item item=object.getProperty().getItem();
        if (item instanceof RoutineItem) {
          RoutineItem routine=(RoutineItem)item;
          importNeedsList.addAll(createModuleNeededFromRoutine(routine));
        }
      }
    }
  }
  if (system) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ILibraryManagerUIService.class)) {
      ILibraryManagerUIService libUiService=(ILibraryManagerUIService)GlobalServiceRegister.getDefault().getService(ILibraryManagerUIService.class);
      Set<String> routinesName=new HashSet<>();
      for (      IRoutinesProvider routineProvider : libUiService.getRoutinesProviders(ECodeLanguage.JAVA)) {
        for (        URL url : routineProvider.getSystemRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
        for (        URL url : routineProvider.getTalendRoutines()) {
          String[] fragments=url.toString().split(""String_Node_Str"");
          String label=fragments[fragments.length - 1];
          String[] tmp=label.split(""String_Node_Str"");
          String routineName=tmp[0];
          routinesName.add(routineName);
        }
      }
      Map<String,List<LibraryInfo>> routineAndJars=libUiService.getRoutineAndJars();
      Iterator<Map.Entry<String,List<LibraryInfo>>> iter=routineAndJars.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<String,List<LibraryInfo>> entry=iter.next();
        String routineName=entry.getKey();
        if (!routinesName.contains(routineName)) {
          continue;
        }
        List<LibraryInfo> needJars=entry.getValue();
        for (        LibraryInfo jar : needJars) {
          ModuleNeeded toAdd=new ModuleNeeded(""String_Node_Str"" + routineName,jar.getLibName(),""String_Node_Str"",true);
          String bundleId=jar.getBundleId();
          if (bundleId != null) {
            String bundleName=null;
            String bundleVersion=null;
            if (bundleId.contains(""String_Node_Str"")) {
              String[] nameAndVersion=bundleId.split(""String_Node_Str"");
              bundleName=nameAndVersion[0];
              bundleVersion=nameAndVersion[1];
            }
 else {
              bundleName=bundleId;
            }
            toAdd.setBundleName(bundleName);
            toAdd.setBundleVersion(bundleVersion);
          }
          importNeedsList.add(toAdd);
        }
      }
    }
  }
  return importNeedsList;
}",0.9827335807648864
