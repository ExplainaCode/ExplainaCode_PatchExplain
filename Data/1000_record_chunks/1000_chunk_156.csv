record_number,buggy_code,fixed_code,code_similarity
155001,"public synchronized void applyLog(ReadableByteChannel byteChannel) throws IOException {
  if (!backupSlave) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (xidIdentMap.size() > 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  buffer.clear();
  buffer.limit(8);
  if (byteChannel.read(buffer) != 8) {
    throw new IOException(""String_Node_Str"");
  }
  buffer.flip();
  logVersion=buffer.getLong();
  if (logVersion != xaTf.getCurrentVersion()) {
    throw new IllegalStateException(""String_Node_Str"" + logVersion + ""String_Node_Str""+ xaTf.getCurrentVersion());
  }
  log.fine(""String_Node_Str"" + logVersion);
  long logEntriesFound=0;
  LogApplier logApplier=new LogApplier(byteChannel,buffer,xaTf,xaRm,cf,xidIdentMap,recoveredTxMap);
  while (logApplier.readAndApplyEntry()) {
    logEntriesFound++;
  }
  byteChannel.close();
  xaTf.flushAll();
  xaTf.getAndSetNewVersion();
  xaRm.reset();
  log.info(""String_Node_Str"" + logVersion + ""String_Node_Str"");
}","public synchronized void applyLog(ReadableByteChannel byteChannel) throws IOException {
  if (!backupSlave) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (xidIdentMap.size() > 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  buffer.clear();
  buffer.limit(8);
  if (byteChannel.read(buffer) != 8) {
    throw new IOException(""String_Node_Str"");
  }
  buffer.flip();
  logVersion=buffer.getLong();
  if (logVersion != xaTf.getCurrentVersion()) {
    throw new IllegalStateException(""String_Node_Str"" + logVersion + ""String_Node_Str""+ xaTf.getCurrentVersion());
  }
  log.fine(""String_Node_Str"" + logVersion);
  long logEntriesFound=0;
  LogApplier logApplier=new LogApplier(byteChannel,buffer,xaTf,xaRm,cf,xidIdentMap,recoveredTxMap);
  while (logApplier.readAndApplyEntry()) {
    logEntriesFound++;
  }
  byteChannel.close();
  xaTf.flushAll();
  xaTf.getAndSetNewVersion();
  xaRm.reset();
  log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ logVersion+ ""String_Node_Str"");
}",0.9846610588817416
155002,"private void deleteCurrentLogFile(String logFileName) throws IOException {
  releaseCurrentLogFile();
  File file=new File(logFileName);
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  }
  boolean deleted=FileUtils.deleteFile(file);
  if (!deleted) {
    log.warning(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  }
}","private void deleteCurrentLogFile(String logFileName) throws IOException {
  File file=new File(logFileName);
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  }
  boolean deleted=FileUtils.deleteFile(file);
  if (!deleted) {
    log.warning(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  }
}",0.9635627530364372
155003,"public synchronized void close() throws IOException {
  if (fileChannel == null || !fileChannel.isOpen()) {
    log.fine(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size() + ""String_Node_Str"");
    writeBuffer.force();
    writeBuffer=null;
    fileChannel.close();
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog+ ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  if (!keepLogs || backupSlave) {
    if (currentLog == CLEAN) {
      deleteCurrentLogFile(fileName);
    }
 else {
      deleteCurrentLogFile(fileName + ""String_Node_Str"" + currentLog);
    }
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + currentLog,endPosition);
  }
  if (currentLog != CLEAN) {
    setActiveLog(CLEAN);
  }
}","public synchronized void close() throws IOException {
  if (fileChannel == null || !fileChannel.isOpen()) {
    log.fine(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size() + ""String_Node_Str"");
    writeBuffer.force();
    writeBuffer=null;
    fileChannel.close();
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog+ ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  releaseCurrentLogFile();
  char logWas=currentLog;
  if (currentLog != CLEAN) {
    setActiveLog(CLEAN);
  }
  if (!keepLogs || backupSlave) {
    if (logWas == CLEAN) {
      deleteCurrentLogFile(fileName);
    }
 else {
      deleteCurrentLogFile(fileName + ""String_Node_Str"" + logWas);
    }
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + logWas,endPosition);
  }
}",0.8848806366047746
155004,"private void renameCurrentLogFileAndIncrementVersion(String logFileName,long endPosition) throws IOException {
  releaseCurrentLogFile();
  File file=new File(logFileName);
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  }
  String newName=fileName + ""String_Node_Str"" + xaTf.getAndSetNewVersion();
  File newFile=new File(newName);
  boolean renamed=FileUtils.renameFile(file,newFile);
  if (!renamed) {
    throw new IOException(""String_Node_Str"" + newName);
  }
 else {
    try {
      FileChannel channel=new RandomAccessFile(newName,""String_Node_Str"").getChannel();
      FileUtils.truncateFile(channel,endPosition);
    }
 catch (    IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}","private void renameCurrentLogFileAndIncrementVersion(String logFileName,long endPosition) throws IOException {
  File file=new File(logFileName);
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  }
  String newName=fileName + ""String_Node_Str"" + xaTf.getAndSetNewVersion();
  File newFile=new File(newName);
  boolean renamed=FileUtils.renameFile(file,newFile);
  if (!renamed) {
    throw new IOException(""String_Node_Str"" + newName);
  }
 else {
    try {
      FileChannel channel=new RandomAccessFile(newName,""String_Node_Str"").getChannel();
      FileUtils.truncateFile(channel,endPosition);
    }
 catch (    IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
    }
  }
}",0.9822950819672132
155005,"private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < xaDs.getCurrentLogVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!xaDs.hasLogicalLog(version)) {
        try {
          logVersionWriting=version;
          tempFile=new File(xaDs.getName() + ""String_Node_Str"" + Long.toString(version));
          if (tempFile.exists()) {
            log(tempFile.getName() + ""String_Node_Str"");
            tempFile.delete();
          }
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
          logToWrite.truncate(0);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}","private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < xaDs.getCurrentLogVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!xaDs.hasLogicalLog(version)) {
        try {
          logVersionWriting=version;
          do {
            tempFile=new File(xaDs.getName() + ""String_Node_Str"" + Long.toString(version)+ ""String_Node_Str""+ r.nextLong());
          }
 while (tempFile.exists());
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
          logToWrite.truncate(0);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}",0.9413589823146136
155006,"public void run(){
  try {
    while (run) {
      Long logVersion=queue.poll();
      if (logVersion != null) {
        if (logVersion == xaDs.getCurrentLogVersion()) {
          ReadableByteChannel logChannel=xaDs.getLogicalLog(logVersion);
          xaDs.applyLog(logChannel);
        }
      }
 else {
synchronized (this) {
          try {
            this.wait(250);
          }
 catch (          InterruptedException e) {
            interrupted();
          }
        }
      }
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    e.printStackTrace();
  }
 finally {
    run=false;
  }
}","public void run(){
  try {
    while (run) {
      long logVersion=xaDs.getCurrentLogVersion();
      if (xaDs.hasLogicalLog(logVersion)) {
        ReadableByteChannel logChannel=xaDs.getLogicalLog(logVersion);
        xaDs.applyLog(logChannel);
      }
 else {
synchronized (this) {
          try {
            this.wait(250);
          }
 catch (          InterruptedException e) {
            interrupted();
          }
        }
      }
    }
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"" + e);
    e.printStackTrace();
  }
 finally {
    run=false;
  }
}",0.7462932454695222
155007,"public void rotateLogAndPushToSlaves() throws IOException {
  long version=getVersion();
  xaDs.rotateLogicalLog();
  for (  HandleSlaveConnection slave : slaveList) {
    if (!slave.offerLogToSlave(version)) {
      System.out.println(""String_Node_Str"" + slave);
    }
  }
}","public void rotateLogAndPushToSlaves() throws IOException {
  if (slaveList.size() == 0) {
    return;
  }
  long version=getVersion();
  xaDs.rotateLogicalLog();
  ArrayList<HandleSlaveConnection> newList=new ArrayList<HandleSlaveConnection>();
  for (  HandleSlaveConnection slave : slaveList) {
    if (!slave.offerLogToSlave(version)) {
      System.out.println(""String_Node_Str"" + slave);
    }
 else {
      newList.add(slave);
    }
  }
  slaveList=newList;
}",0.7098515519568152
155008,"public ReadOnlySlave(String path,Map<String,String> params,String masterIp,int masterPort){
  this.graphDb=new EmbeddedReadOnlyGraphDatabase(path,params);
  this.xaDs=(NeoStoreXaDataSource)graphDb.getConfig().getTxModule().getXaDataSourceManager().getXaDataSource(""String_Node_Str"");
  this.xaDs.makeBackupSlave();
  recover();
  jobEater=new JobEater();
  logApplier=new LogApplier(xaDs);
  jobEater.start();
  logApplier.start();
  this.masterIp=masterIp;
  this.masterPort=masterPort;
  masterConnection=new Connection(masterIp,masterPort);
  if (!masterConnection.connected()) {
    if (masterConnection.connectionRefused()) {
      throw new SocketException(""String_Node_Str"" + masterIp + ""String_Node_Str""+ masterPort+ ""String_Node_Str"");
    }
  }
  jobEater.addJob(new ConnectToMasterJob(masterConnection,this));
}","public ReadOnlySlave(String path,Map<String,String> params,String masterIp,int masterPort){
  this.graphDb=new EmbeddedGraphDatabase(path,params);
  this.xaDs=(NeoStoreXaDataSource)graphDb.getConfig().getTxModule().getXaDataSourceManager().getXaDataSource(""String_Node_Str"");
  this.xaDs.makeBackupSlave();
  recover();
  jobEater=new JobEater();
  logApplier=new LogApplier(xaDs);
  jobEater.start();
  logApplier.start();
  this.masterIp=masterIp;
  this.masterPort=masterPort;
  masterConnection=new Connection(masterIp,masterPort);
  while (!masterConnection.connected()) {
    if (masterConnection.connectionRefused()) {
      throw new SocketException(""String_Node_Str"" + masterIp + ""String_Node_Str""+ masterPort+ ""String_Node_Str"");
    }
  }
  jobEater.addJob(new ConnectToMasterJob(masterConnection,this));
}",0.9908480780964004
155009,"public boolean connected(){
  if (!channel.isBlocking() && !channel.isConnected() && channel.isConnectionPending()) {
    try {
      channel.finishConnect();
    }
 catch (    IOException e) {
      connectionRefused=true;
    }
  }
  return channel.isConnected();
}","public boolean connected(){
  if (!channel.isBlocking() && !channel.isConnected() && channel.isConnectionPending()) {
    try {
      return channel.finishConnect();
    }
 catch (    IOException e) {
      connectionRefused=true;
    }
  }
  return channel.isConnected();
}",0.9870609981515712
155010,"private boolean setupRequest(){
  long version=slave.getVersion() + 1;
  while (version < masterVersion) {
    if (slave.hasLog(version)) {
      version++;
    }
 else {
      break;
    }
  }
  if (version == masterVersion) {
    setStatus(Status.GET_MESSAGE);
    return true;
  }
  if (retries > 20) {
    close();
  }
  if (!acquireWriteBuffer()) {
    retries++;
    return false;
  }
  buffer.put(HeaderConstants.REQUEST_LOG);
  buffer.putLong(version);
  buffer.flip();
  log(""String_Node_Str"" + version);
  setStatus(Status.SEND_REQUEST);
  retries=0;
  return true;
}","private boolean setupRequest(){
  long version=slave.getVersion();
  while (version < masterVersion) {
    if (slave.hasLog(version)) {
      version++;
    }
 else {
      break;
    }
  }
  if (version == masterVersion) {
    setStatus(Status.GET_MESSAGE);
    return true;
  }
  if (retries > 20) {
    close();
  }
  if (!acquireWriteBuffer()) {
    retries++;
    return false;
  }
  buffer.put(HeaderConstants.REQUEST_LOG);
  buffer.putLong(version);
  buffer.flip();
  log(""String_Node_Str"" + version);
  setStatus(Status.SEND_REQUEST);
  retries=0;
  return true;
}",0.9965217391304348
155011,"private boolean getLog(){
  if (!acquireReadBuffer()) {
    return false;
  }
  log(""String_Node_Str"");
  try {
    int read=connection.read();
    if (read > 0) {
      buffer.flip();
      if (logToWrite.position() + read <= logLength) {
        logToWrite.write(buffer);
      }
 else {
        int readLimit=buffer.limit();
        int logLimit=(int)(logLength - logToWrite.position());
        buffer.limit(logLimit);
        logToWrite.write(buffer);
        buffer.limit(readLimit);
        byte[] pushData=new byte[readLimit - logLimit];
        buffer.get(pushData);
        connection.pushBackReadData(pushData);
      }
      if (logToWrite.position() >= logLength) {
        log(""String_Node_Str"");
        if (slave.getVersion() < (masterVersion - 1)) {
          setStatus(Status.SETUP_REQUEST);
        }
 else {
          setStatus(Status.GET_MESSAGE);
        }
        logToWrite.close();
        tempFile.renameTo(new File(slave.getLogName(logVersionWriting)));
        logVersionWriting=-1;
        tempFile=null;
        logToWrite=null;
        slave.tryApplyNewLog();
      }
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    close();
    log(""String_Node_Str"",e);
    return true;
  }
 finally {
    releaseReadBuffer();
  }
}","private boolean getLog(){
  if (!acquireReadBuffer()) {
    return false;
  }
  log(""String_Node_Str"");
  try {
    int read=connection.read();
    if (read > 0) {
      buffer.flip();
      if (logToWrite.position() + read <= logLength) {
        logToWrite.write(buffer);
      }
 else {
        int readLimit=buffer.limit();
        int logLimit=(int)(logLength - logToWrite.position());
        buffer.limit(logLimit);
        logToWrite.write(buffer);
        buffer.limit(readLimit);
        byte[] pushData=new byte[readLimit - logLimit];
        buffer.get(pushData);
        connection.pushBackReadData(pushData);
      }
      if (logToWrite.position() >= logLength) {
        log(""String_Node_Str"");
        if (slave.getVersion() < (masterVersion - 1)) {
          setStatus(Status.SETUP_REQUEST);
        }
 else {
          setStatus(Status.GET_MESSAGE);
        }
        logToWrite.close();
        String newName=slave.getLogName(logVersionWriting);
        File newLog=new File(newName);
        if (newLog.exists()) {
          log(""String_Node_Str"" + newName + ""String_Node_Str"");
          close();
        }
        if (!tempFile.renameTo(new File(newName))) {
          log(""String_Node_Str"" + newName);
          close();
        }
        logVersionWriting=-1;
        tempFile=null;
        logToWrite=null;
      }
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    close();
    log(""String_Node_Str"",e);
    return true;
  }
 finally {
    releaseReadBuffer();
  }
}",0.8675379724478983
155012,"private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < slave.getVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!slave.hasLog(version)) {
        try {
          logVersionWriting=version;
          tempFile=File.createTempFile(""String_Node_Str"",Long.toString(version));
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}","private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < slave.getVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!slave.hasLog(version)) {
        try {
          logVersionWriting=version;
          tempFile=new File(""String_Node_Str"" + Long.toString(version));
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
          logToWrite.truncate(0);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}",0.9219663114472328
155013,"public HandleSlaveConnection(Connection connection,Master master,long slaveVersion){
  super(connection,master);
  this.master=master;
  if (master.hasLog(slaveVersion)) {
    logVersionToSend=slaveVersion;
    logLength=master.getLogLength(slaveVersion);
    try {
      logToSend=master.getLog(slaveVersion);
    }
 catch (    IOException e) {
      throw new SocketException(""String_Node_Str"",e);
    }
  }
  setStatus(Status.GET_MESSAGE);
}","public HandleSlaveConnection(Connection connection,Master master,long slaveVersion){
  super(connection,master);
  this.master=master;
  setStatus(Status.GET_MESSAGE);
}",0.5513866231647635
155014,"public synchronized boolean offerLogToSlave(long version){
  if (logLength != -1 || logVersionToSend != -1 || logToSend != null) {
    return false;
  }
  try {
    logToSend=master.getLog(version);
    logLength=master.getLogLength(version);
    logVersionToSend=version;
    return true;
  }
 catch (  IOException e) {
    throw new SocketException(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"",e);
  }
}","public synchronized boolean offerLogToSlave(long version){
  if (!getConnection().connected()) {
    System.out.println(""String_Node_Str"");
    return false;
  }
  if (logLength != -1 || logVersionToSend != -1 || logToSend != null) {
    return true;
  }
  try {
    if (getStatus() == Status.GET_MESSAGE) {
      logToSend=master.getLog(version);
      logLength=master.getLogLength(version);
      logVersionToSend=version;
      setStatus(Status.SETUP_OFFER_LOG);
    }
    return true;
  }
 catch (  IOException e) {
    throw new SocketException(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"",e);
  }
}",0.562862669245648
155015,"private synchronized boolean getMessage(){
  if (logVersionToSend > -1 && logLength > -1 && logToSend != null) {
    setStatus(Status.SETUP_OFFER_LOG);
    return true;
  }
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(9);
    int read=connection.read();
    if (read == 9) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.REQUEST_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      logVersionToSend=buffer.getLong();
      if (logVersionToSend > master.getVersion()) {
        log(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"");
        return true;
      }
      log(""String_Node_Str"" + logVersionToSend);
      if (master.hasLog(logVersionToSend)) {
        try {
          logToSend=master.getLog(logVersionToSend);
          logLength=master.getLogLength(logVersionToSend);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OFFER_LOG);
      }
 else {
        log(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"");
        return true;
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}","private synchronized boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(9);
    int read=connection.read();
    if (read == 9) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.REQUEST_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      logVersionToSend=buffer.getLong();
      if (logVersionToSend > master.getVersion()) {
        log(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"");
        return true;
      }
      log(""String_Node_Str"" + logVersionToSend);
      if (master.hasLog(logVersionToSend)) {
        try {
          logToSend=master.getLog(logVersionToSend);
          logLength=master.getLogLength(logVersionToSend);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OFFER_LOG);
      }
 else {
        log(""String_Node_Str"" + logVersionToSend + ""String_Node_Str"");
        return true;
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}",0.9525893508388038
155016,"private boolean sendLog(){
  if (retries > 20) {
    close();
  }
  connection.write();
  log(""String_Node_Str"" + logVersionToSend);
  if (!buffer.hasRemaining()) {
    buffer.clear();
    try {
      if (logToSend.read(buffer) <= 0) {
        releaseWriteBuffer();
        setStatus(Status.GET_MESSAGE);
        if (master.hasLog(logVersionToSend + 1)) {
          logVersionToSend=logVersionToSend++;
          logLength=master.getLogLength(logVersionToSend);
          logToSend=master.getLog(logVersionToSend);
        }
 else {
          logLength=-1;
          logVersionToSend=-1;
          logToSend=null;
        }
        return true;
      }
      buffer.flip();
    }
 catch (    IOException e) {
      log(""String_Node_Str"",e);
      close();
      return true;
    }
  }
  retries++;
  return false;
}","private boolean sendLog(){
  if (retries > 20) {
    close();
  }
  connection.write();
  log(""String_Node_Str"" + logVersionToSend);
  if (!buffer.hasRemaining()) {
    buffer.clear();
    try {
      if (logToSend.read(buffer) <= 0) {
        releaseWriteBuffer();
        setStatus(Status.GET_MESSAGE);
        logLength=-1;
        logVersionToSend=-1;
        logToSend=null;
        return true;
      }
      buffer.flip();
    }
 catch (    IOException e) {
      log(""String_Node_Str"",e);
      close();
      return true;
    }
  }
  retries++;
  return false;
}",0.823953823953824
155017,"public LogBuffer put(char[] chars) throws IOException {
  if (mappedBuffer == null || (MAPPED_SIZE - mappedBuffer.position()) < (chars.length * 2)) {
    getNewMappedBuffer();
    if (mappedBuffer == null) {
      fallbackBuffer.clear();
      fallbackBuffer.asCharBuffer().put(chars);
      fallbackBuffer.limit(chars.length * 2);
      fileChannel.write(fallbackBuffer,mappedStartPosition);
      mappedStartPosition+=(chars.length * 2);
      return this;
    }
  }
  int oldPos=mappedBuffer.position();
  mappedBuffer.asCharBuffer().put(chars);
  mappedBuffer.position(oldPos + chars.length * 2);
  return this;
}","private void put(char[] chars,int offset) throws IOException {
  int charsToWrite=chars.length - offset;
  if (charsToWrite * 2 > MAPPED_SIZE) {
    charsToWrite=MAPPED_SIZE / 2;
  }
  if (mappedBuffer == null || (MAPPED_SIZE - mappedBuffer.position()) < (charsToWrite * 2)) {
    getNewMappedBuffer();
    if (mappedBuffer == null) {
      int bytesToWrite=(chars.length - offset) * 2;
      ByteBuffer buf=ByteBuffer.allocate(bytesToWrite);
      buf.asCharBuffer().put(chars,offset,chars.length - offset);
      buf.limit(chars.length * 2);
      int count=fileChannel.write(buf,mappedStartPosition);
      if (count != bytesToWrite) {
        throw new UnderlyingStorageException(""String_Node_Str"" + offset + ""String_Node_Str""+ bytesToWrite+ ""String_Node_Str""+ count);
      }
      mappedStartPosition+=bytesToWrite;
      return;
    }
  }
  int oldPos=mappedBuffer.position();
  mappedBuffer.asCharBuffer().put(chars,offset,charsToWrite);
  mappedBuffer.position(oldPos + (charsToWrite * 2));
  offset+=charsToWrite;
  if (offset < chars.length) {
    put(chars,offset);
  }
}",0.3647058823529411
155018,"public void rotateLogAndPushToSlaves() throws IOException {
  if (slaveList.size() == 0) {
    return;
  }
  ArrayList<HandleSlaveConnection> newList=new ArrayList<HandleSlaveConnection>();
  for (  HandleSlaveConnection slave : slaveList) {
    XaDataSource xaDs=xaDsMgr.getXaDataSource(slave.getXaDsName());
    if (xaDs != null) {
      long version=xaDs.getCurrentLogVersion();
      xaDs.rotateLogicalLog();
      if (!slave.offerLogToSlave(version)) {
        System.out.println(""String_Node_Str"" + slave);
      }
 else {
        newList.add(slave);
      }
    }
  }
  slaveList=newList;
}","public void rotateLogAndPushToSlaves() throws IOException {
  if (slaveList.size() == 0) {
    return;
  }
  List<HandleSlaveConnection> newList=new CopyOnWriteArrayList<HandleSlaveConnection>();
  for (  HandleSlaveConnection slave : slaveList) {
    XaDataSource xaDs=xaDsMgr.getXaDataSource(slave.getXaDsName());
    if (xaDs != null) {
      long version=xaDs.getCurrentLogVersion();
      xaDs.rotateLogicalLog();
      if (!slave.offerLogToSlave(version)) {
        System.out.println(""String_Node_Str"" + slave);
      }
 else {
        newList.add(slave);
      }
    }
  }
  slaveList=newList;
}",0.9866666666666668
155019,"private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < xaDs.getCurrentLogVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!xaDs.hasLogicalLog(version)) {
        try {
          logVersionWriting=version;
          tempFile=new File(""String_Node_Str"" + Long.toString(version));
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
          logToWrite.truncate(0);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}","private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < xaDs.getCurrentLogVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!xaDs.hasLogicalLog(version)) {
        try {
          logVersionWriting=version;
          tempFile=new File(xaDs.getName() + ""String_Node_Str"" + Long.toString(version));
          if (tempFile.exists()) {
            log(tempFile.getName() + ""String_Node_Str"");
            tempFile.delete();
          }
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
          logToWrite.truncate(0);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}",0.9409499358151476
155020,"public HandleSlaveConnection(Connection connection,Master master,long slaveVersion,String xaDsName){
  super(connection,master);
  this.master=master;
  this.xaDsName=xaDsName;
  setStatus(Status.GET_MESSAGE);
}","public HandleSlaveConnection(Connection connection,Master master,long slaveVersion,String xaDsName){
  super(connection,master);
  this.master=master;
  this.xaDsName=xaDsName;
  this.slaveVersion=slaveVersion;
  setStatus(Status.GET_MESSAGE);
}",0.925438596491228
155021,"private boolean sendLog(){
  if (retries > 20) {
    close();
  }
  connection.write();
  log(""String_Node_Str"" + logVersionToSend);
  if (!buffer.hasRemaining()) {
    buffer.clear();
    try {
      if (logToSend.read(buffer) <= 0) {
        releaseWriteBuffer();
        setStatus(Status.GET_MESSAGE);
        logLength=-1;
        logVersionToSend=-1;
        logToSend=null;
        return true;
      }
      buffer.flip();
    }
 catch (    IOException e) {
      log(""String_Node_Str"",e);
      close();
      return true;
    }
  }
  retries++;
  return false;
}","private boolean sendLog(){
  if (retries > 20) {
    close();
  }
  connection.write();
  log(""String_Node_Str"" + logVersionToSend);
  if (!buffer.hasRemaining()) {
    buffer.clear();
    try {
      if (logToSend.read(buffer) <= 0) {
        releaseWriteBuffer();
        setStatus(Status.GET_MESSAGE);
        logLength=-1;
        logVersionToSend=-1;
        logToSend=null;
        if (logVersionToSend >= slaveVersion) {
          slaveVersion=logVersionToSend + 1;
        }
        return true;
      }
      buffer.flip();
    }
 catch (    IOException e) {
      log(""String_Node_Str"",e);
      close();
      return true;
    }
  }
  retries++;
  return false;
}",0.9172690763052208
155022,"private boolean sendGreeting(){
  if (retries > 20) {
    close();
  }
  log(""String_Node_Str"");
  connection.write();
  if (!buffer.hasRemaining()) {
    releaseWriteBuffer();
    setNoRequeue();
    setChainJob(new HandleSlaveConnection(connection,master,slaveVersion,xaDsName));
    return true;
  }
  retries++;
  return false;
}","private boolean sendGreeting(){
  if (retries > 20) {
    close();
  }
  log(""String_Node_Str"");
  connection.write();
  if (!buffer.hasRemaining()) {
    releaseWriteBuffer();
    setNoRequeue();
    setChainJob(new HandleSlaveConnection(connection,master,xaDsName));
    return true;
  }
  retries++;
  return false;
}",0.9800918836140888
155023,"private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < xaDs.getCurrentLogVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!xaDs.hasLogicalLog(version)) {
        try {
          logVersionWriting=version;
          do {
            tempFile=new File(xaDs.getName() + ""String_Node_Str"" + Long.toString(version)+ ""String_Node_Str""+ r.nextLong());
          }
 while (tempFile.exists());
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
          logToWrite.truncate(0);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}","private boolean getMessage(){
  if (!acquireReadBuffer()) {
    return false;
  }
  try {
    buffer.limit(17);
    int read=connection.read();
    if (read == 17) {
      buffer.flip();
      byte request=buffer.get();
      if (request != HeaderConstants.OFFER_LOG) {
        log(""String_Node_Str"" + request);
        close();
        return true;
      }
      long version=buffer.getLong();
      if (version < xaDs.getCurrentLogVersion()) {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
        return true;
      }
      if (version > masterVersion) {
        masterVersion=version;
      }
      logLength=buffer.getLong();
      log(""String_Node_Str"" + version + ""String_Node_Str""+ logLength);
      if (!xaDs.hasLogicalLog(version)) {
        try {
          logVersionWriting=version;
          do {
            tempFile=new File(xaDs.getName() + ""String_Node_Str"" + Long.toString(version)+ ""String_Node_Str""+ r.nextLong());
          }
 while (tempFile.exists());
          logToWrite=new RandomAccessFile(tempFile,""String_Node_Str"").getChannel();
          logToWrite.truncate(0);
        }
 catch (        IOException e) {
          close();
          throw new SocketException(""String_Node_Str"" + version + ""String_Node_Str"",e);
        }
        setStatus(Status.SETUP_OK);
      }
 else {
        log(""String_Node_Str"" + version + ""String_Node_Str"");
        setStatus(Status.SETUP_NOT_OK);
      }
      retries=0;
      return true;
    }
 else {
      if (read > 0) {
        connection.pushBackAllReadData();
      }
      return false;
    }
  }
  finally {
    releaseReadBuffer();
  }
}",0.9766441303011678
155024,"public HandleSlaveConnection(Connection connection,Master master,long slaveVersion,String xaDsName){
  super(connection,master);
  this.master=master;
  this.xaDsName=xaDsName;
  this.slaveVersion=slaveVersion;
  setStatus(Status.GET_MESSAGE);
}","public HandleSlaveConnection(Connection connection,Master master,String xaDsName){
  super(connection,master);
  this.master=master;
  this.xaDsName=xaDsName;
  setStatus(Status.GET_MESSAGE);
}",0.8812785388127854
155025,"private boolean sendLog(){
  if (retries > 20) {
    close();
  }
  connection.write();
  log(""String_Node_Str"" + logVersionToSend);
  if (!buffer.hasRemaining()) {
    buffer.clear();
    try {
      if (logToSend.read(buffer) <= 0) {
        releaseWriteBuffer();
        setStatus(Status.GET_MESSAGE);
        logLength=-1;
        logVersionToSend=-1;
        logToSend=null;
        if (logVersionToSend >= slaveVersion) {
          slaveVersion=logVersionToSend + 1;
        }
        return true;
      }
      buffer.flip();
    }
 catch (    IOException e) {
      log(""String_Node_Str"",e);
      close();
      return true;
    }
  }
  retries++;
  return false;
}","private boolean sendLog(){
  if (retries > 20) {
    close();
  }
  connection.write();
  log(""String_Node_Str"" + logVersionToSend);
  if (!buffer.hasRemaining()) {
    buffer.clear();
    try {
      if (logToSend.read(buffer) <= 0) {
        releaseWriteBuffer();
        if (nextLogVersion != -1) {
          logToSend=master.getLog(xaDsName,nextLogVersion);
          logLength=master.getLogLength(xaDsName,nextLogVersion);
          logVersionToSend=nextLogVersion;
          nextLogVersion=-1;
          setStatus(Status.SETUP_OFFER_LOG);
        }
 else {
          setStatus(Status.GET_MESSAGE);
        }
        logLength=-1;
        logVersionToSend=-1;
        logToSend=null;
        return true;
      }
      buffer.flip();
    }
 catch (    IOException e) {
      log(""String_Node_Str"",e);
      close();
      return true;
    }
  }
  retries++;
  return false;
}",0.7348777348777349
155026,"public void rotateLogAndPushToSlaves() throws IOException {
  if (slaveList.size() == 0) {
    return;
  }
  List<HandleSlaveConnection> newList=new CopyOnWriteArrayList<HandleSlaveConnection>();
  for (  HandleSlaveConnection slave : slaveList) {
    XaDataSource xaDs=xaDsMgr.getXaDataSource(slave.getXaDsName());
    if (xaDs != null) {
      long version=xaDs.getCurrentLogVersion();
      xaDs.rotateLogicalLog();
      if (!slave.offerLogToSlave(version)) {
        System.out.println(""String_Node_Str"" + slave);
      }
 else {
        newList.add(slave);
      }
    }
  }
  slaveList=newList;
}","public synchronized void rotateLogAndPushToSlaves() throws IOException {
  if (slaveList.size() == 0) {
    return;
  }
  for (  XaDataSource xaDs : xaDsMgr.getAllRegisteredDataSources()) {
    xaDs.rotateLogicalLog();
  }
  List<HandleSlaveConnection> newList=new CopyOnWriteArrayList<HandleSlaveConnection>();
  for (  HandleSlaveConnection slave : slaveList) {
    XaDataSource xaDs=xaDsMgr.getXaDataSource(slave.getXaDsName());
    if (xaDs != null) {
      long version=xaDs.getCurrentLogVersion() - 1;
      if (!slave.offerLogToSlave(version)) {
        System.out.println(""String_Node_Str"" + slave);
      }
 else {
        newList.add(slave);
      }
    }
  }
  slaveList=newList;
}",0.8833976833976834
155027,"@Override @SuppressWarnings(""String_Node_Str"") protected void setupBackup(EmbeddedGraphDatabase neo,String location) throws IOException {
  Backup backupComp=new Neo4jBackup(neo,location,new ArrayList<String>(){
{
      add(""String_Node_Str"");
      add(""String_Node_Str"");
    }
  }
);
  backupComp.doBackup();
}","@Override @SuppressWarnings(""String_Node_Str"") protected void setupBackup(EmbeddedGraphDatabase graphDb,String location) throws IOException {
  Backup backupComp=new Neo4jBackup(graphDb,location,new ArrayList<String>(){
{
      add(""String_Node_Str"");
      add(""String_Node_Str"");
    }
  }
);
  backupComp.doBackup();
}",0.9684542586750788
155028,"@Test public void backup() throws IOException {
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase neo=Util.startNeoInstance(STORE_LOCATION_DIR);
  ((NeoStoreXaDataSource)neo.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource()).keepLogicalLogs(true);
  IndexService indexService=new LuceneIndexService(neo);
  XaDataSourceManager xaDsm=neo.getConfig().getTxModule().getXaDataSourceManager();
  XaDataSource ds=xaDsm.getXaDataSource(""String_Node_Str"");
  ((LuceneDataSource)ds).keepLogicalLogs(true);
  System.out.println(""String_Node_Str"");
  tryBackup(neo,BACKUP_LOCATION_DIR,1);
  Transaction tx=neo.beginTx();
  try {
    indexService.index(addNode(neo),""String_Node_Str"",2);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(neo,BACKUP_LOCATION_DIR,2);
  tx=neo.beginTx();
  try {
    indexService.index(addNode(neo),""String_Node_Str"",3);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tx=neo.beginTx();
  try {
    indexService.index(addNode(neo),""String_Node_Str"",4);
    System.out.println(""String_Node_Str"");
    tryBackup(neo,BACKUP_LOCATION_DIR,3);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(neo,BACKUP_LOCATION_DIR,4);
  Util.stopNeo(neo,indexService);
}","@Test public void backup() throws IOException {
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase graphDb=Util.startGraphDbInstance(STORE_LOCATION_DIR);
  ((NeoStoreXaDataSource)graphDb.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource()).keepLogicalLogs(true);
  IndexService indexService=new LuceneIndexService(graphDb);
  XaDataSourceManager xaDsm=graphDb.getConfig().getTxModule().getXaDataSourceManager();
  XaDataSource ds=xaDsm.getXaDataSource(""String_Node_Str"");
  ((LuceneDataSource)ds).keepLogicalLogs(true);
  System.out.println(""String_Node_Str"");
  tryBackup(graphDb,BACKUP_LOCATION_DIR,1);
  Transaction tx=graphDb.beginTx();
  try {
    indexService.index(addNode(graphDb),""String_Node_Str"",2);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(graphDb,BACKUP_LOCATION_DIR,2);
  tx=graphDb.beginTx();
  try {
    indexService.index(addNode(graphDb),""String_Node_Str"",3);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tx=graphDb.beginTx();
  try {
    indexService.index(addNode(graphDb),""String_Node_Str"",4);
    System.out.println(""String_Node_Str"");
    tryBackup(graphDb,BACKUP_LOCATION_DIR,3);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(graphDb,BACKUP_LOCATION_DIR,4);
  Util.stopGraphDb(graphDb,indexService);
}",0.94006968641115
155029,"protected void tryBackup(EmbeddedGraphDatabase neo,String location,int relCount) throws IOException {
  setupBackup(neo,location);
  EmbeddedGraphDatabase bNeo=Util.startNeoInstance(location);
  IndexService bIndexService=new LuceneIndexService(bNeo);
  Transaction bTx=bNeo.beginTx();
  try {
    List<Relationship> rels=new ArrayList<Relationship>();
    for (    Relationship rel : bNeo.getReferenceNode().getRelationships()) {
      rels.add(rel);
    }
    assertEquals(relCount,rels.size());
    Node node=bIndexService.getSingleNode(""String_Node_Str"",relCount);
    assertEquals(true,node != null);
    assertEquals(node.getId(),(long)(Long)node.getProperty(""String_Node_Str"",-1L));
    bTx.success();
  }
  finally {
    bTx.finish();
  }
  Util.stopNeo(bNeo,bIndexService);
}","protected void tryBackup(EmbeddedGraphDatabase graphDb,String location,int relCount) throws IOException {
  setupBackup(graphDb,location);
  EmbeddedGraphDatabase bDb=Util.startGraphDbInstance(location);
  IndexService bIndexService=new LuceneIndexService(bDb);
  Transaction bTx=bDb.beginTx();
  try {
    List<Relationship> rels=new ArrayList<Relationship>();
    for (    Relationship rel : bDb.getReferenceNode().getRelationships()) {
      rels.add(rel);
    }
    assertEquals(relCount,rels.size());
    Node node=bIndexService.getSingleNode(""String_Node_Str"",relCount);
    assertEquals(true,node != null);
    assertEquals(node.getId(),(long)(Long)node.getProperty(""String_Node_Str"",-1L));
    bTx.success();
  }
  finally {
    bTx.finish();
  }
  Util.stopGraphDb(bDb,bIndexService);
}",0.9563014566181128
155030,"private Node addNode(EmbeddedGraphDatabase neo){
  Node referenceNode=neo.getReferenceNode();
  Node node=neo.createNode();
  node.setProperty(""String_Node_Str"",node.getId());
  referenceNode.createRelationshipTo(node,MyRels.TEST);
  return node;
}","private Node addNode(EmbeddedGraphDatabase graphDb){
  Node referenceNode=graphDb.getReferenceNode();
  Node node=graphDb.createNode();
  node.setProperty(""String_Node_Str"",node.getId());
  referenceNode.createRelationshipTo(node,MyRels.TEST);
  return node;
}",0.9409448818897638
155031,"@Before public void setup(){
  Util.deleteDir(new File(VAR));
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase neo=Util.startNeoInstance(STORE_LOCATION_DIR);
  XaDataSource neoStoreXaDataSource=neo.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource();
  neoStoreXaDataSource.keepLogicalLogs(true);
  IndexService indexService=new LuceneIndexService(neo);
  XaDataSourceManager xaDsm=neo.getConfig().getTxModule().getXaDataSourceManager();
  XaDataSource ds=xaDsm.getXaDataSource(""String_Node_Str"");
  ((LuceneDataSource)ds).keepLogicalLogs(true);
  Transaction tx=neo.beginTx();
  try {
    indexService.index(addNode(neo),""String_Node_Str"",1);
    tx.success();
  }
  finally {
    tx.finish();
  }
  Util.stopNeo(neo,indexService);
  Util.copyDir(STORE_LOCATION_DIR,BACKUP_LOCATION_DIR);
}","@Before public void setup(){
  Util.deleteDir(new File(VAR));
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase graphDb=Util.startGraphDbInstance(STORE_LOCATION_DIR);
  XaDataSource neoStoreXaDataSource=graphDb.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource();
  neoStoreXaDataSource.keepLogicalLogs(true);
  IndexService indexService=new LuceneIndexService(graphDb);
  XaDataSourceManager xaDsm=graphDb.getConfig().getTxModule().getXaDataSourceManager();
  XaDataSource ds=xaDsm.getXaDataSource(""String_Node_Str"");
  ((LuceneDataSource)ds).keepLogicalLogs(true);
  Transaction tx=graphDb.beginTx();
  try {
    indexService.index(addNode(graphDb),""String_Node_Str"",1);
    tx.success();
  }
  finally {
    tx.finish();
  }
  Util.stopGraphDb(graphDb,indexService);
  Util.copyDir(STORE_LOCATION_DIR,BACKUP_LOCATION_DIR);
}",0.9472477064220184
155032,"@SuppressWarnings(""String_Node_Str"") protected void setupBackup(EmbeddedGraphDatabase neo,String location) throws IOException {
  EmbeddedGraphDatabase bNeo=Util.startNeoInstance(location);
  IndexService bIndexService=new LuceneIndexService(bNeo);
  Backup backupComp=new Neo4jBackup(neo,bNeo,new ArrayList<String>(){
{
      add(""String_Node_Str"");
      add(""String_Node_Str"");
    }
  }
);
  backupComp.enableFileLogger();
  backupComp.doBackup();
  Util.stopNeo(bNeo,bIndexService);
}","@SuppressWarnings(""String_Node_Str"") protected void setupBackup(EmbeddedGraphDatabase graphDb,String location) throws IOException {
  EmbeddedGraphDatabase bDb=Util.startGraphDbInstance(location);
  IndexService bIndexService=new LuceneIndexService(bDb);
  Backup backupComp=new Neo4jBackup(graphDb,bDb,new ArrayList<String>(){
{
      add(""String_Node_Str"");
      add(""String_Node_Str"");
    }
  }
);
  backupComp.enableFileLogger();
  backupComp.doBackup();
  Util.stopGraphDb(bDb,bIndexService);
}",0.9353535353535354
155033,"@Override protected void tryBackup(EmbeddedGraphDatabase neo,String location,int relCount) throws IOException {
  System.out.println(""String_Node_Str"");
  Backup backupComp=new Neo4jBackup(neo,location);
  backupComp.doBackup();
  EmbeddedGraphDatabase bNeo=Util.startNeoInstance(location);
  Transaction bTx=bNeo.beginTx();
  try {
    List<Relationship> rels=new ArrayList<Relationship>();
    for (    Relationship rel : bNeo.getReferenceNode().getRelationships()) {
      rels.add(rel);
    }
    assertEquals(relCount,rels.size());
    bTx.success();
  }
  finally {
    bTx.finish();
  }
  Util.stopNeo(bNeo);
}","@Override protected void tryBackup(EmbeddedGraphDatabase graphDb,String location,int relCount) throws IOException {
  System.out.println(""String_Node_Str"");
  Backup backupComp=new Neo4jBackup(graphDb,location);
  backupComp.doBackup();
  EmbeddedGraphDatabase bDb=Util.startGraphDbInstance(location);
  Transaction bTx=bDb.beginTx();
  try {
    List<Relationship> rels=new ArrayList<Relationship>();
    for (    Relationship rel : bDb.getReferenceNode().getRelationships()) {
      rels.add(rel);
    }
    assertEquals(relCount,rels.size());
    bTx.success();
  }
  finally {
    bTx.finish();
  }
  Util.stopGraphDb(bDb);
}",0.9486356340288924
155034,"@Test public void backup() throws IOException {
  EmbeddedGraphDatabase neo=Util.startNeoInstance(STORE_LOCATION_DIR);
  ((NeoStoreXaDataSource)neo.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource()).keepLogicalLogs(true);
  System.out.println(""String_Node_Str"");
  tryBackup(neo,BACKUP_LOCATION_DIR,1);
  Transaction tx=neo.beginTx();
  try {
    addNode(neo);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(neo,BACKUP_LOCATION_DIR,2);
  tx=neo.beginTx();
  try {
    addNode(neo);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tx=neo.beginTx();
  try {
    addNode(neo);
    System.out.println(""String_Node_Str"");
    tryBackup(neo,BACKUP_LOCATION_DIR,3);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(neo,BACKUP_LOCATION_DIR,4);
  Util.stopNeo(neo);
}","@Test public void backup() throws IOException {
  EmbeddedGraphDatabase graphDb=Util.startGraphDbInstance(STORE_LOCATION_DIR);
  ((NeoStoreXaDataSource)graphDb.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource()).keepLogicalLogs(true);
  System.out.println(""String_Node_Str"");
  tryBackup(graphDb,BACKUP_LOCATION_DIR,1);
  Transaction tx=graphDb.beginTx();
  try {
    addNode(graphDb);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(graphDb,BACKUP_LOCATION_DIR,2);
  tx=graphDb.beginTx();
  try {
    addNode(graphDb);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tx=graphDb.beginTx();
  try {
    addNode(graphDb);
    System.out.println(""String_Node_Str"");
    tryBackup(graphDb,BACKUP_LOCATION_DIR,3);
    tx.success();
  }
  finally {
    tx.finish();
  }
  System.out.println(""String_Node_Str"");
  tryBackup(graphDb,BACKUP_LOCATION_DIR,4);
  Util.stopGraphDb(graphDb);
}",0.9246031746031746
155035,"protected void tryBackup(EmbeddedGraphDatabase neo,String location,int relCount) throws IOException {
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase bNeo=Util.startNeoInstance(location);
  Backup backupComp=new Neo4jBackup(neo,bNeo);
  backupComp.enableFileLogger();
  backupComp.doBackup();
  Util.stopNeo(bNeo);
  bNeo=Util.startNeoInstance(location);
  Transaction bTx=bNeo.beginTx();
  try {
    List<Relationship> rels=new ArrayList<Relationship>();
    for (    Relationship rel : bNeo.getReferenceNode().getRelationships()) {
      rels.add(rel);
    }
    assertEquals(relCount,rels.size());
    bTx.success();
  }
  finally {
    bTx.finish();
  }
  Util.stopNeo(bNeo);
}","protected void tryBackup(EmbeddedGraphDatabase graphDb,String location,int relCount) throws IOException {
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase bDb=Util.startGraphDbInstance(location);
  Backup backupComp=new Neo4jBackup(graphDb,bDb);
  backupComp.enableFileLogger();
  backupComp.doBackup();
  Util.stopGraphDb(bDb);
  bDb=Util.startGraphDbInstance(location);
  Transaction bTx=bDb.beginTx();
  try {
    List<Relationship> rels=new ArrayList<Relationship>();
    for (    Relationship rel : bDb.getReferenceNode().getRelationships()) {
      rels.add(rel);
    }
    assertEquals(relCount,rels.size());
    bTx.success();
  }
  finally {
    bTx.finish();
  }
  Util.stopGraphDb(bDb);
}",0.91861288039632
155036,"private void addNode(EmbeddedGraphDatabase neo){
  Node referenceNode=neo.getReferenceNode();
  Node node=neo.createNode();
  referenceNode.createRelationshipTo(node,MyRels.TEST);
}","private void addNode(EmbeddedGraphDatabase graphDb){
  Node referenceNode=graphDb.getReferenceNode();
  Node node=graphDb.createNode();
  referenceNode.createRelationshipTo(node,MyRels.TEST);
}",0.9197860962566844
155037,"@Before public void clean(){
  Util.deleteDir(new File(VAR));
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase neo=Util.startNeoInstance(STORE_LOCATION_DIR);
  ((NeoStoreXaDataSource)neo.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource()).keepLogicalLogs(true);
  Transaction tx=neo.beginTx();
  try {
    addNode(neo);
    tx.success();
  }
  finally {
    tx.finish();
  }
  Util.stopNeo(neo);
  Util.copyDir(STORE_LOCATION_DIR,BACKUP_LOCATION_DIR);
}","@Before public void clean(){
  Util.deleteDir(new File(VAR));
  System.out.println(""String_Node_Str"");
  EmbeddedGraphDatabase graphDb=Util.startGraphDbInstance(STORE_LOCATION_DIR);
  ((NeoStoreXaDataSource)graphDb.getConfig().getPersistenceModule().getPersistenceManager().getPersistenceSource().getXaDataSource()).keepLogicalLogs(true);
  Transaction tx=graphDb.beginTx();
  try {
    addNode(graphDb);
    tx.success();
  }
  finally {
    tx.finish();
  }
  Util.stopGraphDb(graphDb);
  Util.copyDir(STORE_LOCATION_DIR,BACKUP_LOCATION_DIR);
}",0.9323308270676692
155038,"/** 
 * @param graphDb the {@link GraphDatabaseService} instance to use with theshell server.
 * @throws RemoteException if an RMI error occurs.
 */
public GraphDatabaseShellServer(GraphDatabaseService graphDb) throws RemoteException {
  super();
  addNeoApps();
  this.graphDb=graphDb;
  this.bashInterpreter=new BashVariableInterpreter();
  this.bashInterpreter.addReplacer(""String_Node_Str"",new WorkingDirReplacer());
  this.setProperty(AbstractClient.PROMPT_KEY,getShellPrompt());
  this.setProperty(AbstractClient.TITLE_KEYS_KEY,""String_Node_Str"");
  this.setProperty(AbstractClient.TITLE_MAX_LENGTH,""String_Node_Str"");
}","/** 
 * @param graphDb the {@link GraphDatabaseService} instance to use with theshell server.
 * @throws RemoteException if an RMI error occurs.
 */
public GraphDatabaseShellServer(GraphDatabaseService graphDb) throws RemoteException {
  super();
  addGraphDbApps();
  this.graphDb=graphDb;
  this.bashInterpreter=new BashVariableInterpreter();
  this.bashInterpreter.addReplacer(""String_Node_Str"",new WorkingDirReplacer());
  this.setProperty(AbstractClient.PROMPT_KEY,getShellPrompt());
  this.setProperty(AbstractClient.TITLE_KEYS_KEY,""String_Node_Str"");
  this.setProperty(AbstractClient.TITLE_MAX_LENGTH,""String_Node_Str"");
}",0.9920382165605096
155039,"/** 
 * Constructs a new application which can create relationships in neo.
 */
public Mkrel(){
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.MUST,""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.MUST,""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.MUST,""String_Node_Str"" + this.directionAlternatives() + ""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.NONE,""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.NONE,""String_Node_Str""));
}","/** 
 * Constructs a new application which can create relationships in Neo4j.
 */
public Mkrel(){
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.MUST,""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.MUST,""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.MUST,""String_Node_Str"" + this.directionAlternatives() + ""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.NONE,""String_Node_Str""));
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.NONE,""String_Node_Str""));
}",0.9937402190923318
155040,"/** 
 * Constructs a new application which can delete relationships in neo.
 */
public Rmrel(){
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.NONE,""String_Node_Str"" + ""String_Node_Str""));
}","/** 
 * Constructs a new application which can delete relationships in Neo4j.
 */
public Rmrel(){
  this.addValueType(""String_Node_Str"",new OptionContext(OptionValueType.NONE,""String_Node_Str"" + ""String_Node_Str""));
}",0.9814814814814816
155041,"BasicConnection(BasicGraphDatabaseServer server,GraphDatabaseService neo){
  this.server=server;
  this.neo=neo;
}","BasicConnection(BasicGraphDatabaseServer server,GraphDatabaseService graphDb){
  this.server=server;
  this.graphDb=graphDb;
}",0.875
155042,"ResponseBuilder response(){
  ResponseBuilder builder=new ResponseBuilder();
  server.buildResponse(neo,builder);
  return builder;
}","ResponseBuilder response(){
  ResponseBuilder builder=new ResponseBuilder();
  server.buildResponse(graphDb,builder);
  return builder;
}",0.9629629629629628
155043,"long createNode(GraphDatabaseService neo){
  return neo.createNode().getId();
}","long createNode(GraphDatabaseService graphDb){
  return graphDb.createNode().getId();
}",0.8795180722891566
155044,"public long getTotalNumberOfNodes(GraphDatabaseService neo){
  if (neo instanceof EmbeddedGraphDatabase) {
    EmbeddedGraphDatabase embedded=(EmbeddedGraphDatabase)neo;
    return embedded.getConfig().getNeoModule().getNodeManager().getNumberOfIdsInUse(Node.class);
  }
 else {
    return -1;
  }
}","public long getTotalNumberOfNodes(GraphDatabaseService graphDb){
  if (graphDb instanceof EmbeddedGraphDatabase) {
    EmbeddedGraphDatabase embedded=(EmbeddedGraphDatabase)graphDb;
    return embedded.getConfig().getNeoModule().getNodeManager().getNumberOfIdsInUse(Node.class);
  }
 else {
    return -1;
  }
}",0.9508196721311476
155045,"long createRelationship(GraphDatabaseService neo,String relationshipTypeName,long startNodeId,long endNodeId){
  return neo.getNodeById(startNodeId).createRelationshipTo(neo.getNodeById(endNodeId),new RelType(relationshipTypeName)).getId();
}","long createRelationship(GraphDatabaseService graphDb,String relationshipTypeName,long startNodeId,long endNodeId){
  return graphDb.getNodeById(startNodeId).createRelationshipTo(graphDb.getNodeById(endNodeId),new RelType(relationshipTypeName)).getId();
}",0.939516129032258
155046,"boolean hasNodeWithId(GraphDatabaseService neo,long nodeId){
  Node node=null;
  try {
    node=neo.getNodeById(nodeId);
  }
 catch (  Exception ex) {
  }
  ;
  return node != null;
}","boolean hasNodeWithId(GraphDatabaseService graphDb,long nodeId){
  Node node=null;
  try {
    node=graphDb.getNodeById(nodeId);
  }
 catch (  Exception ex) {
  }
  ;
  return node != null;
}",0.946524064171123
155047,"SimpleIterator<RelationshipSpecification> getRelationships(GraphDatabaseService neo,final long nodeId,final Direction direction,String[] relationshipTypeNames){
  RelationshipType[] types=new RelationshipType[relationshipTypeNames.length];
  for (int i=0; i < types.length; i++) {
    types[i]=new RelType(relationshipTypeNames[i]);
  }
  final Iterator<Relationship> relationships=neo.getNodeById(nodeId).getRelationships(types).iterator();
  return new SimpleIterator<RelationshipSpecification>(){
    Relationship next=null;
    @Override boolean hasNext(){
      while (next == null && relationships.hasNext()) {
        Relationship candidate=relationships.next();
switch (direction) {
case OUTGOING:
          if (candidate.getStartNode().getId() == nodeId) {
            next=candidate;
            return true;
          }
        break;
case INCOMING:
      if (candidate.getEndNode().getId() == nodeId) {
        next=candidate;
        return true;
      }
    break;
case BOTH:
  next=candidate;
return true;
default :
throw new IllegalArgumentException();
}
}
return next != null;
}
@Override RelationshipSpecification getNext(){
try {
return new RelationshipSpecification(next);
}
  finally {
next=null;
}
}
}
;
}","SimpleIterator<RelationshipSpecification> getRelationships(GraphDatabaseService graphDb,final long nodeId,final Direction direction,String[] relationshipTypeNames){
  RelationshipType[] types=new RelationshipType[relationshipTypeNames.length];
  for (int i=0; i < types.length; i++) {
    types[i]=new RelType(relationshipTypeNames[i]);
  }
  final Iterator<Relationship> relationships=graphDb.getNodeById(nodeId).getRelationships(types).iterator();
  return new SimpleIterator<RelationshipSpecification>(){
    Relationship next=null;
    @Override boolean hasNext(){
      while (next == null && relationships.hasNext()) {
        Relationship candidate=relationships.next();
switch (direction) {
case OUTGOING:
          if (candidate.getStartNode().getId() == nodeId) {
            next=candidate;
            return true;
          }
        break;
case INCOMING:
      if (candidate.getEndNode().getId() == nodeId) {
        next=candidate;
        return true;
      }
    break;
case BOTH:
  next=candidate;
return true;
default :
throw new IllegalArgumentException();
}
}
return next != null;
}
@Override RelationshipSpecification getNext(){
try {
return new RelationshipSpecification(next);
}
  finally {
next=null;
}
}
}
;
}",0.991876523151909
155048,"SimpleIterator<NodeSpecification> getAllNodes(GraphDatabaseService neo){
  final Iterator<Node> nodes=neo.getAllNodes().iterator();
  return new SimpleIterator<NodeSpecification>(){
    @Override boolean hasNext(){
      return nodes.hasNext();
    }
    @Override NodeSpecification getNext(){
      return new NodeSpecification(nodes.next().getId());
    }
  }
;
}","SimpleIterator<NodeSpecification> getAllNodes(GraphDatabaseService graphDb){
  final Iterator<Node> nodes=graphDb.getAllNodes().iterator();
  return new SimpleIterator<NodeSpecification>(){
    @Override boolean hasNext(){
      return nodes.hasNext();
    }
    @Override NodeSpecification getNext(){
      return new NodeSpecification(nodes.next().getId());
    }
  }
;
}",0.97289972899729
155049,"Object removeNodeProperty(GraphDatabaseService neo,long nodeId,String key){
  return neo.getNodeById(nodeId).removeProperty(key);
}","Object removeNodeProperty(GraphDatabaseService graphDb,long nodeId,String key){
  return graphDb.getNodeById(nodeId).removeProperty(key);
}",0.925925925925926
155050,"SimpleIterator<RelationshipSpecification> getAllRelationships(GraphDatabaseService neo,long nodeId,Direction direction){
  final Iterator<Relationship> relationships=neo.getNodeById(nodeId).getRelationships(direction).iterator();
  return new SimpleIterator<RelationshipSpecification>(){
    @Override boolean hasNext(){
      return relationships.hasNext();
    }
    @Override RelationshipSpecification getNext(){
      return new RelationshipSpecification(relationships.next());
    }
  }
;
}","SimpleIterator<RelationshipSpecification> getAllRelationships(GraphDatabaseService graphDb,long nodeId,Direction direction){
  final Iterator<Relationship> relationships=graphDb.getNodeById(nodeId).getRelationships(direction).iterator();
  return new SimpleIterator<RelationshipSpecification>(){
    @Override boolean hasNext(){
      return relationships.hasNext();
    }
    @Override RelationshipSpecification getNext(){
      return new RelationshipSpecification(relationships.next());
    }
  }
;
}",0.9799599198396792
155051,"Object getRelationshipProperty(GraphDatabaseService neo,long relationshipId,String key){
  return neo.getRelationshipById(relationshipId).getProperty(key,null);
}","Object getRelationshipProperty(GraphDatabaseService graphDb,long relationshipId,String key){
  return graphDb.getRelationshipById(relationshipId).getProperty(key,null);
}",0.9397590361445785
155052,"boolean hasNodeProperty(GraphDatabaseService neo,long nodeId,String key){
  return neo.getNodeById(nodeId).hasProperty(key);
}","boolean hasNodeProperty(GraphDatabaseService graphDb,long nodeId,String key){
  return graphDb.getNodeById(nodeId).hasProperty(key);
}",0.9230769230769232
155053,"boolean hasRelationshipProperty(GraphDatabaseService neo,long relationshiId,String key){
  return neo.getRelationshipById(relationshiId).hasProperty(key);
}","boolean hasRelationshipProperty(GraphDatabaseService graphDb,long relationshiId,String key){
  return graphDb.getRelationshipById(relationshiId).hasProperty(key);
}",0.9375
155054,"Object removeRelationshipProperty(GraphDatabaseService neo,long relationshipId,String key){
  return neo.getRelationshipById(relationshipId).removeProperty(key);
}","Object removeRelationshipProperty(GraphDatabaseService graphDb,long relationshipId,String key){
  return graphDb.getRelationshipById(relationshipId).removeProperty(key);
}",0.940119760479042
155055,"void buildResponse(GraphDatabaseService neo,Object transactionId,ResponseVisitor responseState){
}","void buildResponse(GraphDatabaseService graphDb,Object transactionId,ResponseVisitor responseState){
}",0.95
155056,"Object setRelationshipProperty(GraphDatabaseService neo,long relationshipId,String key,Object value){
  neo.getRelationshipById(relationshipId).setProperty(key,value);
  return null;
}","Object setRelationshipProperty(GraphDatabaseService graphDb,long relationshipId,String key,Object value){
  graphDb.getRelationshipById(relationshipId).setProperty(key,value);
  return null;
}",0.946808510638298
155057,"SimpleIterator<NodeSpecification> getIndexNodes(GraphDatabaseService neo,int indexId,String key,Object value){
  final IndexHits<Node> nodes=indexes[indexId].index.getNodes(key,value);
  return new SimpleIterator<NodeSpecification>(nodes.size()){
    Iterator<Node> iter=nodes.iterator();
    @Override NodeSpecification getNext(){
      return new NodeSpecification(iter.next().getId());
    }
    @Override boolean hasNext(){
      return iter.hasNext();
    }
  }
;
}","SimpleIterator<NodeSpecification> getIndexNodes(GraphDatabaseService graphDb,int indexId,String key,Object value){
  final IndexHits<Node> nodes=indexes[indexId].index.getNodes(key,value);
  return new SimpleIterator<NodeSpecification>(nodes.size()){
    Iterator<Node> iter=nodes.iterator();
    @Override NodeSpecification getNext(){
      return new NodeSpecification(iter.next().getId());
    }
    @Override boolean hasNext(){
      return iter.hasNext();
    }
  }
;
}",0.989406779661017
155058,"Object getNodeProperty(GraphDatabaseService neo,long nodeId,String key){
  return neo.getNodeById(nodeId).getProperty(key,null);
}","Object getNodeProperty(GraphDatabaseService graphDb,long nodeId,String key){
  return graphDb.getNodeById(nodeId).getProperty(key,null);
}",0.9253731343283582
155059,"RelationshipSpecification getRelationshipById(GraphDatabaseService neo,long relationshipId){
  return new RelationshipSpecification(neo.getRelationshipById(relationshipId));
}","RelationshipSpecification getRelationshipById(GraphDatabaseService graphDb,long relationshipId){
  return new RelationshipSpecification(graphDb.getRelationshipById(relationshipId));
}",0.9441340782122905
155060,"void deleteNode(GraphDatabaseService neo,long nodeId){
  neo.getNodeById(nodeId).delete();
}","void deleteNode(GraphDatabaseService graphDb,long nodeId){
  graphDb.getNodeById(nodeId).delete();
}",0.8958333333333334
155061,"void removeIndexNode(GraphDatabaseService neo,int indexId,long nodeId,String key,Object value){
  indexes[indexId].index.removeIndex(neo.getNodeById(nodeId),key,value);
}","void removeIndexNode(GraphDatabaseService graphDb,int indexId,long nodeId,String key,Object value){
  indexes[indexId].index.removeIndex(graphDb.getNodeById(nodeId),key,value);
}",0.942528735632184
155062,"Object setNodeProperty(GraphDatabaseService neo,long nodeId,String key,Object value){
  neo.getNodeById(nodeId).setProperty(key,value);
  return null;
}","Object setNodeProperty(GraphDatabaseService graphDb,long nodeId,String key,Object value){
  graphDb.getNodeById(nodeId).setProperty(key,value);
  return null;
}",0.935897435897436
155063,"SimpleIterator<String> getRelationshipPropertyKeys(GraphDatabaseService neo,long relationshipId){
  final Iterator<String> keys=neo.getRelationshipById(relationshipId).getPropertyKeys().iterator();
  return new SimpleIterator<String>(){
    @Override boolean hasNext(){
      return keys.hasNext();
    }
    @Override String getNext(){
      return keys.next();
    }
  }
;
}","SimpleIterator<String> getRelationshipPropertyKeys(GraphDatabaseService graphDb,long relationshipId){
  final Iterator<String> keys=graphDb.getRelationshipById(relationshipId).getPropertyKeys().iterator();
  return new SimpleIterator<String>(){
    @Override boolean hasNext(){
      return keys.hasNext();
    }
    @Override String getNext(){
      return keys.next();
    }
  }
;
}",0.9736842105263158
155064,"void indexNode(GraphDatabaseService neo,int indexId,long nodeId,String key,Object value){
  indexes[indexId].index.index(neo.getNodeById(nodeId),key,value);
}","void indexNode(GraphDatabaseService graphDb,int indexId,long nodeId,String key,Object value){
  indexes[indexId].index.index(graphDb.getNodeById(nodeId),key,value);
}",0.9382716049382716
155065,"SimpleIterator<String> getRelationshipTypes(GraphDatabaseService neo){
  final Iterator<RelationshipType> types;
  if (neo instanceof EmbeddedGraphDatabase) {
    types=((EmbeddedGraphDatabase)neo).getRelationshipTypes().iterator();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return new SimpleIterator<String>(){
    @Override boolean hasNext(){
      return types.hasNext();
    }
    @Override String getNext(){
      return types.next().name();
    }
  }
;
}","SimpleIterator<String> getRelationshipTypes(GraphDatabaseService graphDb){
  final Iterator<RelationshipType> types;
  if (graphDb instanceof EmbeddedGraphDatabase) {
    types=((EmbeddedGraphDatabase)graphDb).getRelationshipTypes().iterator();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  return new SimpleIterator<String>(){
    @Override boolean hasNext(){
      return types.hasNext();
    }
    @Override String getNext(){
      return types.next().name();
    }
  }
;
}",0.9703557312252964
155066,"SimpleIterator<String> getNodePropertyKeys(GraphDatabaseService neo,long nodeId){
  final Iterator<String> keys=neo.getNodeById(nodeId).getPropertyKeys().iterator();
  return new SimpleIterator<String>(){
    @Override boolean hasNext(){
      return keys.hasNext();
    }
    @Override String getNext(){
      return keys.next();
    }
  }
;
}","SimpleIterator<String> getNodePropertyKeys(GraphDatabaseService graphDb,long nodeId){
  final Iterator<String> keys=graphDb.getNodeById(nodeId).getPropertyKeys().iterator();
  return new SimpleIterator<String>(){
    @Override boolean hasNext(){
      return keys.hasNext();
    }
    @Override String getNext(){
      return keys.next();
    }
  }
;
}",0.971264367816092
155067,"long getReferenceNode(GraphDatabaseService neo){
  return neo.getReferenceNode().getId();
}","long getReferenceNode(GraphDatabaseService graphDb){
  return graphDb.getReferenceNode().getId();
}",0.8947368421052632
155068,"void deleteRelationship(GraphDatabaseService neo,long relationshipId){
  neo.getRelationshipById(relationshipId).delete();
}","void deleteRelationship(GraphDatabaseService graphDb,long relationshipId){
  graphDb.getRelationshipById(relationshipId).delete();
}",0.921875
155069,"private void doInternalRecovery(String logFileName) throws IOException {
  log.info(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  buffer.clear();
  buffer.limit(8);
  if (fileChannel.read(buffer) != 8) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    fileChannel.close();
    boolean success=FileUtils.renameFile(new File(logFileName),new File(logFileName + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str""));
    assert success;
    fileChannel=new RandomAccessFile(logFileName,""String_Node_Str"").getChannel();
    return;
  }
  buffer.flip();
  logVersion=buffer.getLong();
  log.fine(""String_Node_Str"" + logVersion);
  long logEntriesFound=0;
  while (readEntry()) {
    logEntriesFound++;
  }
  scanIsComplete=true;
  log.fine(""String_Node_Str"" + logEntriesFound + ""String_Node_Str"");
  xaRm.checkXids();
  if (xidIdentMap.size() == 0) {
    log.fine(""String_Node_Str"");
  }
 else {
    log.fine(""String_Node_Str"" + logFileName + ""String_Node_Str""+ xidIdentMap.size()+ ""String_Node_Str"");
    for (    StartEntry entry : xidIdentMap.values()) {
      log.fine(""String_Node_Str"" + logFileName + ""String_Node_Str""+ entry.getXid()+ ""String_Node_Str"");
    }
  }
  recoveredTxMap.clear();
}","private void doInternalRecovery(String logFileName) throws IOException {
  log.info(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  buffer.clear();
  buffer.limit(8);
  if (fileChannel.read(buffer) != 8) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    fileChannel.close();
    boolean success=FileUtils.renameFile(new File(logFileName),new File(logFileName + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str""));
    assert success;
    fileChannel=new RandomAccessFile(logFileName,""String_Node_Str"").getChannel();
    return;
  }
  buffer.flip();
  logVersion=buffer.getLong();
  log.fine(""String_Node_Str"" + logVersion);
  long logEntriesFound=0;
  long lastEntryPos=fileChannel.position();
  while (readEntry()) {
    logEntriesFound++;
    lastEntryPos=fileChannel.position();
  }
  fileChannel.position(lastEntryPos);
  scanIsComplete=true;
  log.fine(""String_Node_Str"" + logEntriesFound + ""String_Node_Str"");
  xaRm.checkXids();
  if (xidIdentMap.size() == 0) {
    log.fine(""String_Node_Str"");
  }
 else {
    log.fine(""String_Node_Str"" + logFileName + ""String_Node_Str""+ xidIdentMap.size()+ ""String_Node_Str"");
    for (    StartEntry entry : xidIdentMap.values()) {
      log.fine(""String_Node_Str"" + logFileName + ""String_Node_Str""+ entry.getXid()+ ""String_Node_Str"");
    }
  }
  recoveredTxMap.clear();
}",0.9522700814901048
155070,"static Command readCommand(NeoStore neoStore,ReadableByteChannel byteChannel,ByteBuffer buffer) throws IOException {
  buffer.clear();
  buffer.limit(1);
  if (byteChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  byte commandType=buffer.get();
switch (commandType) {
case NODE_COMMAND:
    return NodeCommand.readCommand(neoStore,byteChannel,buffer);
case PROP_COMMAND:
  return PropertyCommand.readCommand(neoStore,byteChannel,buffer);
case PROP_INDEX_COMMAND:
return PropertyIndexCommand.readCommand(neoStore,byteChannel,buffer);
case REL_COMMAND:
return RelationshipCommand.readCommand(neoStore,byteChannel,buffer);
case REL_TYPE_COMMAND:
return RelationshipTypeCommand.readCommand(neoStore,byteChannel,buffer);
default :
throw new IOException(""String_Node_Str"" + commandType + ""String_Node_Str"");
}
}","static Command readCommand(NeoStore neoStore,ReadableByteChannel byteChannel,ByteBuffer buffer) throws IOException {
  buffer.clear();
  buffer.limit(1);
  if (byteChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  byte commandType=buffer.get();
switch (commandType) {
case NODE_COMMAND:
    return NodeCommand.readCommand(neoStore,byteChannel,buffer);
case PROP_COMMAND:
  return PropertyCommand.readCommand(neoStore,byteChannel,buffer);
case PROP_INDEX_COMMAND:
return PropertyIndexCommand.readCommand(neoStore,byteChannel,buffer);
case REL_COMMAND:
return RelationshipCommand.readCommand(neoStore,byteChannel,buffer);
case REL_TYPE_COMMAND:
return RelationshipTypeCommand.readCommand(neoStore,byteChannel,buffer);
case NONE:
return null;
default :
throw new IOException(""String_Node_Str"" + commandType + ""String_Node_Str"");
}
}",0.9858657243816256
155071,"private void truncateLogicalLog(int size) throws IOException {
  char active='1';
  FileChannel af=new RandomAccessFile(""String_Node_Str"",""String_Node_Str"").getChannel();
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  af.read(buffer);
  af.close();
  buffer.flip();
  active=buffer.asCharBuffer().get();
  buffer.clear();
  FileChannel fileChannel=new RandomAccessFile(""String_Node_Str"" + active,""String_Node_Str"").getChannel();
  if (size < 0) {
    fileChannel.truncate(fileChannel.size() - 3);
  }
 else {
    fileChannel.truncate(size);
  }
  fileChannel.force(false);
  fileChannel.close();
}","private void truncateLogicalLog(int size) throws IOException {
  char active='1';
  FileChannel af=new RandomAccessFile(""String_Node_Str"",""String_Node_Str"").getChannel();
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  af.read(buffer);
  af.close();
  buffer.flip();
  active=buffer.asCharBuffer().get();
  buffer.clear();
  FileChannel fileChannel=new RandomAccessFile(""String_Node_Str"" + active,""String_Node_Str"").getChannel();
  if (fileChannel.size() > size) {
    fileChannel.truncate(size);
  }
 else {
    fileChannel.position(size);
    ByteBuffer buf=ByteBuffer.allocate(1);
    buf.put((byte)0).flip();
    fileChannel.write(buf);
  }
  fileChannel.force(false);
  fileChannel.close();
}",0.6969930609097919
155072,"public void testBrokenCommand(){
  try {
    Xid xid=new XidImpl(new byte[4],new byte[4]);
    XAResource xaRes=xaCon.getXaResource();
    xaRes.start(xid,XAResource.TMNOFLAGS);
    int node1=ds.nextId(Node.class);
    xaCon.getNodeConsumer().createNode(node1);
    int node2=ds.nextId(Node.class);
    xaCon.getNodeConsumer().createNode(node2);
    int n1prop1=ds.nextId(PropertyStore.class);
    xaCon.getNodeConsumer().addProperty(node1,n1prop1,index(""String_Node_Str""),""String_Node_Str"");
    copyLogicalLog();
    xaCon.clearAllTransactions();
    ds.close();
    deleteLogicalLogIfExist();
    renameCopiedLogicalLog();
    truncateLogicalLog(-3);
    ds=new NeoStoreXaDataSource(""String_Node_Str"",""String_Node_Str"",lockManager,lockReleaser);
    xaCon=(NeoStoreXaConnection)ds.getXaConnection();
    xaRes=xaCon.getXaResource();
    assertEquals(0,xaRes.recover(XAResource.TMNOFLAGS).length);
    xaCon.clearAllTransactions();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + e);
  }
}","public void testBrokenCommand(){
  try {
    Xid xid=new XidImpl(new byte[4],new byte[4]);
    XAResource xaRes=xaCon.getXaResource();
    xaRes.start(xid,XAResource.TMNOFLAGS);
    int node1=ds.nextId(Node.class);
    xaCon.getNodeConsumer().createNode(node1);
    xaRes.end(xid,XAResource.TMSUCCESS);
    xaRes.prepare(xid);
    xaCon.clearAllTransactions();
    copyLogicalLog();
    xaCon.clearAllTransactions();
    ds.close();
    deleteLogicalLogIfExist();
    renameCopiedLogicalLog();
    truncateLogicalLog(32);
    truncateLogicalLog(40);
    ds=new NeoStoreXaDataSource(""String_Node_Str"",""String_Node_Str"",lockManager,lockReleaser);
    xaCon=(NeoStoreXaConnection)ds.getXaConnection();
    xaRes=xaCon.getXaResource();
    assertEquals(0,xaRes.recover(XAResource.TMNOFLAGS).length);
    xaCon.clearAllTransactions();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + e);
  }
}",0.8254620123203286
155073,"private static PropertyType getType(int type){
switch (type) {
case 1:
    return PropertyType.INT;
case 2:
  return PropertyType.STRING;
case 3:
return PropertyType.BOOL;
case 4:
return PropertyType.DOUBLE;
case 5:
return PropertyType.FLOAT;
case 6:
return PropertyType.LONG;
case 7:
return PropertyType.BYTE;
case 8:
return PropertyType.CHAR;
case 9:
return PropertyType.ARRAY;
case 10:
return PropertyType.SHORT;
}
throw new InvalidRecordException(""String_Node_Str"" + type);
}","private static PropertyType getType(int type){
switch (type) {
case 1:
    return PropertyType.INT;
case 2:
  return PropertyType.STRING;
case 3:
return PropertyType.BOOL;
case 4:
return PropertyType.DOUBLE;
case 5:
return PropertyType.FLOAT;
case 6:
return PropertyType.LONG;
case 7:
return PropertyType.BYTE;
case 8:
return PropertyType.CHAR;
case 9:
return PropertyType.ARRAY;
case 10:
return PropertyType.SHORT;
case 0:
return null;
}
throw new InvalidRecordException(""String_Node_Str"" + type);
}",0.9785495403472932
155074,"private void commit(Thread thread,TransactionImpl tx) throws SystemException, HeuristicMixedException, HeuristicRollbackException {
  StoreFailureException sfe=null;
  int xaErrorCode=-1;
  if (tx.getResourceCount() == 0) {
    tx.setStatus(Status.STATUS_COMMITTED);
  }
 else {
    try {
      tx.doCommit();
    }
 catch (    XAException e) {
      xaErrorCode=e.errorCode;
      e.printStackTrace();
      log.severe(""String_Node_Str"" + getTxStatusAsString(tx.getStatus()) + ""String_Node_Str""+ xaErrorCode);
      if (tx.getStatus() == Status.STATUS_COMMITTED) {
        tmOk=false;
        throw new TransactionFailureException(""String_Node_Str"",e);
      }
    }
catch (    StoreFailureException e) {
      sfe=e;
      e.printStackTrace();
      log.severe(""String_Node_Str"" + getTxStatusAsString(tx.getStatus()) + ""String_Node_Str""+ e);
    }
  }
  if (tx.getStatus() != Status.STATUS_COMMITTED) {
    try {
      tx.doRollback();
    }
 catch (    XAException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      tmOk=false;
      throw new HeuristicMixedException(""String_Node_Str"" + xaErrorCode + ""String_Node_Str""+ e.errorCode);
    }
    tx.doAfterCompletion();
    txThreadMap.remove(thread);
    try {
      if (tx.isGlobalStartRecordWritten()) {
        getTxLog().txDone(tx.getGlobalId());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"");
      tmOk=false;
      throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
    }
    tx.setStatus(Status.STATUS_NO_TRANSACTION);
    if (sfe == null) {
      throw new HeuristicRollbackException(""String_Node_Str"" + ""String_Node_Str"" + xaErrorCode);
    }
 else {
      throw new HeuristicRollbackException(""String_Node_Str"" + sfe);
    }
  }
  tx.doAfterCompletion();
  txThreadMap.remove(thread);
  try {
    if (tx.isGlobalStartRecordWritten()) {
      getTxLog().txDone(tx.getGlobalId());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    tmOk=false;
    throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
  }
  tx.setStatus(Status.STATUS_NO_TRANSACTION);
}","private void commit(Thread thread,TransactionImpl tx) throws SystemException, HeuristicMixedException, HeuristicRollbackException {
  StoreFailureException sfe=null;
  int xaErrorCode=-1;
  if (tx.getResourceCount() == 0) {
    tx.setStatus(Status.STATUS_COMMITTED);
  }
 else {
    try {
      tx.doCommit();
    }
 catch (    XAException e) {
      xaErrorCode=e.errorCode;
      e.printStackTrace();
      log.severe(""String_Node_Str"" + getTxStatusAsString(tx.getStatus()) + ""String_Node_Str""+ xaErrorCode);
      if (tx.getStatus() == Status.STATUS_COMMITTED) {
        tmOk=false;
        throw new TransactionFailureException(""String_Node_Str"",e);
      }
    }
catch (    StoreFailureException e) {
      sfe=e;
    }
  }
  if (tx.getStatus() != Status.STATUS_COMMITTED) {
    try {
      tx.doRollback();
    }
 catch (    XAException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      tmOk=false;
      if (sfe != null) {
        sfe.printStackTrace();
      }
      throw new HeuristicMixedException(""String_Node_Str"" + xaErrorCode + ""String_Node_Str""+ e.errorCode);
    }
    tx.doAfterCompletion();
    txThreadMap.remove(thread);
    try {
      if (tx.isGlobalStartRecordWritten()) {
        getTxLog().txDone(tx.getGlobalId());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"");
      tmOk=false;
      throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
    }
    tx.setStatus(Status.STATUS_NO_TRANSACTION);
    if (sfe == null) {
      throw new HeuristicRollbackException(""String_Node_Str"" + ""String_Node_Str"" + xaErrorCode);
    }
 else {
      throw new HeuristicRollbackException(""String_Node_Str"" + sfe);
    }
  }
  tx.doAfterCompletion();
  txThreadMap.remove(thread);
  try {
    if (tx.isGlobalStartRecordWritten()) {
      getTxLog().txDone(tx.getGlobalId());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    tmOk=false;
    throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
  }
  tx.setStatus(Status.STATUS_NO_TRANSACTION);
}",0.9572881355932203
155075,"private XaDataSource registerLuceneDataSource(String className,TxModule txModule,String luceneDirectory,LockManager lockManager){
  byte resourceId[]=""String_Node_Str"".getBytes();
  Map<Object,Object> params=new HashMap<Object,Object>();
  params.put(""String_Node_Str"",luceneDirectory);
  params.put(LockManager.class,lockManager);
  return txModule.registerDataSource(""String_Node_Str"",className,resourceId,params,true);
}","private XaDataSource registerLuceneDataSource(String name,String className,TxModule txModule,String luceneDirectory,LockManager lockManager,byte[] resourceId){
  Map<Object,Object> params=new HashMap<Object,Object>();
  params.put(""String_Node_Str"",luceneDirectory);
  params.put(LockManager.class,lockManager);
  return txModule.registerDataSource(name,className,resourceId,params,true);
}",0.3960639606396064
155076,"/** 
 * Starts Neo4j with default configuration
 * @param storeDir path to directory where Neo4j store is located
 * @param create if true a new Neo4j store will be created if no store existat <CODE>storeDir</CODE>
 * @param configuration parameters
 * @throws StartupFailedException if unable to start
 */
public synchronized void start(Map<String,String> stringParams){
  if (started) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Map<Object,Object> params=getDefaultParams();
  for (  Map.Entry<String,String> entry : stringParams.entrySet()) {
    params.put(entry.getKey(),entry.getValue());
  }
  config=new Config(storeDir,params);
  storeDir=FileUtils.fixSeparatorsInPath(storeDir);
  String separator=System.getProperty(""String_Node_Str"");
  String store=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",storeDir);
  params.put(""String_Node_Str"",store);
  params.put(""String_Node_Str"",String.valueOf(create));
  String logicalLog=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",logicalLog);
  byte resourceId[]=""String_Node_Str"".getBytes();
  params.put(LockManager.class,config.getLockManager());
  params.put(LockReleaser.class,config.getLockReleaser());
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  XaDataSource lucene=null;
  if (!config.isReadOnly()) {
    try {
      Class clazz=Class.forName(LUCENE_DS_CLASS);
      cleanWriteLocksInLuceneDirectory(storeDir + ""String_Node_Str"");
      lucene=registerLuceneDataSource(clazz.getName(),config.getTxModule(),storeDir + ""String_Node_Str"",config.getLockManager());
    }
 catch (    ClassNotFoundException e) {
    }
  }
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start(config.getTxModule().getTxManager(),persistenceSource);
  persistenceSource.start(config.getTxModule().getXaDataSourceManager());
  config.getIdGeneratorModule().start();
  config.getNeoModule().start(config.getLockReleaser(),config.getPersistenceModule().getPersistenceManager(),params);
  if (lucene != null) {
    config.getTxModule().getXaDataSourceManager().unregisterDataSource(""String_Node_Str"");
    lucene=null;
  }
  started=true;
}","/** 
 * Starts Neo4j with default configuration
 * @param storeDir path to directory where Neo4j store is located
 * @param create if true a new Neo4j store will be created if no store existat <CODE>storeDir</CODE>
 * @param configuration parameters
 * @throws StartupFailedException if unable to start
 */
public synchronized void start(Map<String,String> stringParams){
  if (started) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Map<Object,Object> params=getDefaultParams();
  for (  Map.Entry<String,String> entry : stringParams.entrySet()) {
    params.put(entry.getKey(),entry.getValue());
  }
  config=new Config(storeDir,params);
  storeDir=FileUtils.fixSeparatorsInPath(storeDir);
  String separator=System.getProperty(""String_Node_Str"");
  String store=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",storeDir);
  params.put(""String_Node_Str"",store);
  params.put(""String_Node_Str"",String.valueOf(create));
  String logicalLog=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",logicalLog);
  byte resourceId[]=""String_Node_Str"".getBytes();
  params.put(LockManager.class,config.getLockManager());
  params.put(LockReleaser.class,config.getLockReleaser());
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  XaDataSource lucene=null;
  XaDataSource luceneFulltext=null;
  if (!config.isReadOnly()) {
    try {
      Class clazz=Class.forName(LUCENE_DS_CLASS);
      cleanWriteLocksInLuceneDirectory(storeDir + ""String_Node_Str"");
      byte luceneId[]=""String_Node_Str"".getBytes();
      lucene=registerLuceneDataSource(""String_Node_Str"",clazz.getName(),config.getTxModule(),storeDir + ""String_Node_Str"",config.getLockManager(),luceneId);
      clazz=Class.forName(LUCENE_FULLTEXT_DS_CLASS);
      cleanWriteLocksInLuceneDirectory(storeDir + ""String_Node_Str"");
      luceneId=""String_Node_Str"".getBytes();
      luceneFulltext=registerLuceneDataSource(""String_Node_Str"",clazz.getName(),config.getTxModule(),storeDir + ""String_Node_Str"",config.getLockManager(),luceneId);
    }
 catch (    ClassNotFoundException e) {
    }
  }
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start(config.getTxModule().getTxManager(),persistenceSource);
  persistenceSource.start(config.getTxModule().getXaDataSourceManager());
  config.getIdGeneratorModule().start();
  config.getNeoModule().start(config.getLockReleaser(),config.getPersistenceModule().getPersistenceManager(),params);
  if (lucene != null) {
    config.getTxModule().getXaDataSourceManager().unregisterDataSource(""String_Node_Str"");
    lucene=null;
  }
  if (luceneFulltext != null) {
    config.getTxModule().getXaDataSourceManager().unregisterDataSource(""String_Node_Str"");
    luceneFulltext=null;
  }
  started=true;
}",0.8923751686909581
155077,"private Object instantiateOrGetIndexServiceObject(Session session,Output out) throws Exception {
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new ShellException(""String_Node_Str"");
  }
  String className=(String)safeGet(session,KEY_INDEX_CLASS_NAME);
  if (className == null) {
    return null;
  }
  IndexServiceContext context=null;
synchronized (this.contexts) {
    context=this.contexts.get(className);
    if (context == null) {
      if (session instanceof SameJvmSession) {
        context=new IndexServiceContext(Class.forName(className).getConstructor(GraphDatabaseService.class).newInstance(this.getServer().getDb()),true);
      }
 else {
        XaDataSourceManager xaManager=((EmbeddedGraphDatabase)getServer().getDb()).getConfig().getTxModule().getXaDataSourceManager();
        String xaName=DATA_SOURCE_NAMES.get(className);
        if (xaName == null) {
          throw new ShellException(""String_Node_Str"" + className);
        }
        if (!xaManager.hasDataSource(xaName)) {
          throw new ShellException(""String_Node_Str"" + className + ""String_Node_Str"");
        }
        XaDataSource dataSource=xaManager.getXaDataSource(xaName);
        Method getterMethod=dataSource.getClass().getDeclaredMethod(""String_Node_Str"");
        getterMethod.setAccessible(true);
        context=new IndexServiceContext(getterMethod.invoke(dataSource),false);
      }
      this.contexts.put(className,context);
    }
  }
  return context.indexService;
}","private Object instantiateOrGetIndexServiceObject(Session session,Output out) throws Exception {
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new ShellException(""String_Node_Str"");
  }
  String className=(String)safeGet(session,KEY_INDEX_CLASS_NAME);
  if (className == null) {
    return null;
  }
  IndexServiceContext context=null;
synchronized (this.contexts) {
    context=this.contexts.get(className);
    if (context == null) {
      if (session instanceof SameJvmSession) {
        context=new IndexServiceContext(Class.forName(className).getConstructor(GraphDatabaseService.class).newInstance(this.getServer().getDb()),true);
      }
 else {
        XaDataSourceManager xaManager=((EmbeddedGraphDatabase)getServer().getDb()).getConfig().getTxModule().getXaDataSourceManager();
        String xaName=DATA_SOURCE_NAMES.get(className);
        if (xaName == null) {
          throw new ShellException(""String_Node_Str"" + className);
        }
        if (!xaManager.hasDataSource(xaName)) {
          throw new ShellException(""String_Node_Str"" + className + ""String_Node_Str"");
        }
        XaDataSource dataSource=xaManager.getXaDataSource(xaName);
        Method getterMethod=dataSource.getClass().getMethod(""String_Node_Str"");
        getterMethod.setAccessible(true);
        context=new IndexServiceContext(getterMethod.invoke(dataSource),false);
      }
      this.contexts.put(className,context);
    }
  }
  return context.indexService;
}",0.9973351099267156
155078,"private boolean ensureFullRelationships(){
  if (relationshipMap == null) {
    this.relChainPosition=nodeManager.getRelationshipChainPosition(this);
    this.relationshipMap=new ArrayMap<String,IntArray>();
    getMoreRelationships();
    return true;
  }
  return false;
}","private boolean ensureFullRelationships(){
  if (relChainPosition == null) {
    setupMapAndChainPosition();
    getMoreRelationships();
    return true;
  }
  return false;
}",0.6993318485523385
155079,"public Relationship getRelationshipById(long id){
  return nodeManager.getRelationshipById((int)id);
}","public Relationship getRelationshipById(long id){
  if (id < 0 || id > Integer.MAX_VALUE * 2l) {
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  return nodeManager.getRelationshipById((int)id);
}",0.6144578313253012
155080,"public Node getNodeById(long id){
  return nodeManager.getNodeById((int)id);
}","public Node getNodeById(long id){
  if (id < 0 || id > Integer.MAX_VALUE * 2l) {
    throw new NotFoundException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  return nodeManager.getNodeById((int)id);
}",0.5492957746478874
155081,"public Node getNodeById(int nodeId) throws NotFoundException {
  if (nodeId < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + nodeId);
  }
  NodeImpl node=nodeCache.get(nodeId);
  if (node != null) {
    return new NodeProxy(nodeId,this);
  }
  node=new NodeImpl(nodeId,this);
  ReentrantLock loadLock=lockId(nodeId);
  try {
    if (nodeCache.get(nodeId) != null) {
      return new NodeProxy(nodeId,this);
    }
    if (!persistenceManager.loadLightNode(nodeId)) {
      throw new NotFoundException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
    nodeCache.put(nodeId,node);
    return new NodeProxy(nodeId,this);
  }
  finally {
    loadLock.unlock();
  }
}","public Node getNodeById(int nodeId) throws NotFoundException {
  NodeImpl node=nodeCache.get(nodeId);
  if (node != null) {
    return new NodeProxy(nodeId,this);
  }
  node=new NodeImpl(nodeId,this);
  ReentrantLock loadLock=lockId(nodeId);
  try {
    if (nodeCache.get(nodeId) != null) {
      return new NodeProxy(nodeId,this);
    }
    if (!persistenceManager.loadLightNode(nodeId)) {
      throw new NotFoundException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
    nodeCache.put(nodeId,node);
    return new NodeProxy(nodeId,this);
  }
  finally {
    loadLock.unlock();
  }
}",0.3400936037441497
155082,"private ReentrantLock lockId(int id){
  ReentrantLock lock=loadLocks[id % LOCK_STRIPE_COUNT];
  lock.lock();
  return lock;
}","private ReentrantLock lockId(int id){
  int stripe=id % LOCK_STRIPE_COUNT;
  if (stripe < 0) {
    stripe*=-1;
  }
  ReentrantLock lock=loadLocks[stripe];
  lock.lock();
  return lock;
}",0.6688102893890675
155083,"public Relationship getRelationshipById(int relId) throws NotFoundException {
  if (relId < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + relId);
  }
  RelationshipImpl relationship=relCache.get(relId);
  if (relationship != null) {
    return new RelationshipProxy(relId,this);
  }
  relationship=new RelationshipImpl(relId,this);
  ReentrantLock loadLock=lockId(relId);
  try {
    if (relCache.get(relId) != null) {
      relationship=relCache.get(relId);
      return new RelationshipProxy(relId,this);
    }
    RelationshipData data=persistenceManager.loadLightRelationship(relId);
    if (data == null) {
      throw new NotFoundException(""String_Node_Str"" + relId + ""String_Node_Str"");
    }
    int typeId=data.relationshipType();
    RelationshipType type=getRelationshipTypeById(typeId);
    if (type == null) {
      throw new NotFoundException(""String_Node_Str"" + data.getId() + ""String_Node_Str""+ typeId+ ""String_Node_Str"");
    }
    final int startNodeId=data.firstNode();
    final int endNodeId=data.secondNode();
    relationship=new RelationshipImpl(relId,startNodeId,endNodeId,type,false,this);
    relCache.put(relId,relationship);
    return new RelationshipProxy(relId,this);
  }
  finally {
    loadLock.unlock();
  }
}","public Relationship getRelationshipById(int relId) throws NotFoundException {
  RelationshipImpl relationship=relCache.get(relId);
  if (relationship != null) {
    return new RelationshipProxy(relId,this);
  }
  relationship=new RelationshipImpl(relId,this);
  ReentrantLock loadLock=lockId(relId);
  try {
    if (relCache.get(relId) != null) {
      relationship=relCache.get(relId);
      return new RelationshipProxy(relId,this);
    }
    RelationshipData data=persistenceManager.loadLightRelationship(relId);
    if (data == null) {
      throw new NotFoundException(""String_Node_Str"" + relId + ""String_Node_Str"");
    }
    int typeId=data.relationshipType();
    RelationshipType type=getRelationshipTypeById(typeId);
    if (type == null) {
      throw new NotFoundException(""String_Node_Str"" + data.getId() + ""String_Node_Str""+ typeId+ ""String_Node_Str"");
    }
    final int startNodeId=data.firstNode();
    final int endNodeId=data.secondNode();
    relationship=new RelationshipImpl(relId,startNodeId,endNodeId,type,false,this);
    relCache.put(relId,relationship);
    return new RelationshipProxy(relId,this);
  }
  finally {
    loadLock.unlock();
  }
}",0.4609695973705834
155084,"private List<PropertyContainer> constructPath(boolean includeNodes,boolean includeRels){
  LinkedList<PropertyContainer> path=new LinkedList<PropertyContainer>();
  Relationship rel=firstSet.get(matchNode);
  Node currentNode=matchNode;
  while (rel != null) {
    if (includeRels) {
      path.addFirst(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(matchNode) && !currentNode.equals(startNode)) {
      path.addFirst(currentNode);
    }
    rel=firstSet.get(currentNode);
  }
  if (includeNodes) {
    path.addFirst(startNode);
    if (!matchNode.equals(startNode)) {
      path.addLast(matchNode);
    }
  }
  rel=secondSet.get(matchNode);
  currentNode=matchNode;
  while (rel != null) {
    if (includeRels) {
      path.addLast(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(endNode)) {
      path.addLast(currentNode);
    }
    rel=firstSet.get(currentNode);
  }
  if (includeNodes && !endNode.equals(matchNode)) {
    path.addLast(endNode);
  }
  return path;
}","private List<PropertyContainer> constructPath(boolean includeNodes,boolean includeRels){
  LinkedList<PropertyContainer> path=new LinkedList<PropertyContainer>();
  Relationship rel=firstSet.get(matchNode);
  Node currentNode=matchNode;
  while (rel != NULL_REL && rel != null) {
    if (includeRels) {
      path.addFirst(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(matchNode) && !currentNode.equals(startNode)) {
      path.addFirst(currentNode);
    }
    rel=firstSet.get(currentNode);
  }
  if (includeNodes) {
    path.addFirst(startNode);
    if (!matchNode.equals(startNode)) {
      path.addLast(matchNode);
    }
  }
  rel=secondSet.get(matchNode);
  currentNode=matchNode;
  while (rel != NULL_REL && rel != null) {
    if (includeRels) {
      path.addLast(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(endNode)) {
      path.addLast(currentNode);
    }
    rel=firstSet.get(currentNode);
  }
  if (includeNodes && !endNode.equals(matchNode)) {
    path.addLast(endNode);
  }
  return path;
}",0.6439600363306085
155085,"private boolean calculate(){
  if (doneCalculation) {
    return true;
  }
  if (startNode.equals(endNode)) {
    matchNode=startNode;
    doneCalculation=true;
    return true;
  }
  List<Node> firstList=new ArrayList<Node>();
  firstList.add(startNode);
  List<Node> secondList=new ArrayList<Node>();
  secondList.add(endNode);
  int firstDepth=maxDepth / 2;
  int secondDepth=firstDepth + (maxDepth % 2);
  List<Node> nextFirstList=new ArrayList<Node>();
  List<Node> nextSecondList=new ArrayList<Node>();
  Iterator<Node> firstItr=firstList.iterator();
  Iterator<Node> secondItr=secondList.iterator();
  int currentFirstDepth=0;
  int currentSecondDepth=0;
  firstSet.put(startNode,null);
  secondSet.put(endNode,null);
  while (firstItr.hasNext() || secondItr.hasNext()) {
    if (firstItr.hasNext()) {
      Node node=firstItr.next();
      if (secondSet.containsKey(node)) {
        matchNode=node;
        doneCalculation=true;
        return true;
      }
      if (currentFirstDepth + 1 <= firstDepth) {
        for (int i=0; i < relTypesAndDirections.length / 2; i++) {
          RelationshipType type=(RelationshipType)relTypesAndDirections[i * 2];
          Direction dir=(Direction)relTypesAndDirections[i * 2 + 1];
          for (          Relationship rel : node.getRelationships(type,dir)) {
            Node otherNode=rel.getOtherNode(node);
            Relationship oldRel=firstSet.put(otherNode,rel);
            if (oldRel == null) {
              nextFirstList.add(otherNode);
            }
 else {
              firstSet.put(otherNode,oldRel);
            }
          }
        }
      }
    }
    if (secondItr.hasNext()) {
      Node node=secondItr.next();
      if (firstSet.containsKey(node)) {
        matchNode=node;
        doneCalculation=true;
        return true;
      }
      if (currentSecondDepth + 1 <= secondDepth) {
        for (int i=0; i < relTypesAndDirections.length / 2; i++) {
          RelationshipType type=(RelationshipType)relTypesAndDirections[i * 2];
          Direction dir=(Direction)relTypesAndDirections[i * 2 + 1];
          for (          Relationship rel : node.getRelationships(type,dir)) {
            Node otherNode=rel.getOtherNode(node);
            Relationship oldRel=secondSet.put(otherNode,rel);
            if (oldRel == null) {
              nextSecondList.add(otherNode);
            }
 else {
              secondSet.put(otherNode,oldRel);
            }
          }
        }
      }
    }
    if (!firstItr.hasNext() && currentFirstDepth + 1 <= firstDepth) {
      currentFirstDepth++;
      firstList=nextFirstList;
      nextFirstList=new ArrayList<Node>();
      firstItr=firstList.iterator();
    }
    if (!secondItr.hasNext() && currentSecondDepth + 1 <= secondDepth) {
      currentSecondDepth++;
      secondList=nextSecondList;
      nextSecondList=new ArrayList<Node>();
      secondItr=secondList.iterator();
    }
  }
  doneCalculation=true;
  return false;
}","private boolean calculate(){
  if (doneCalculation) {
    return true;
  }
  if (startNode.equals(endNode)) {
    matchNode=startNode;
    doneCalculation=true;
    return true;
  }
  List<Node> firstList=new ArrayList<Node>();
  firstList.add(startNode);
  List<Node> secondList=new ArrayList<Node>();
  secondList.add(endNode);
  int firstDepth=maxDepth / 2;
  int secondDepth=firstDepth + (maxDepth % 2);
  List<Node> nextFirstList=new ArrayList<Node>();
  List<Node> nextSecondList=new ArrayList<Node>();
  Iterator<Node> firstItr=firstList.iterator();
  Iterator<Node> secondItr=secondList.iterator();
  int currentFirstDepth=0;
  int currentSecondDepth=0;
  firstSet.put(startNode,NULL_REL);
  secondSet.put(endNode,NULL_REL);
  while (firstItr.hasNext() || secondItr.hasNext()) {
    if (firstItr.hasNext()) {
      Node node=firstItr.next();
      if (secondSet.containsKey(node)) {
        matchNode=node;
        doneCalculation=true;
        return true;
      }
      if (currentFirstDepth + 1 <= firstDepth) {
        for (int i=0; i < relTypesAndDirections.length / 2; i++) {
          RelationshipType type=(RelationshipType)relTypesAndDirections[i * 2];
          Direction dir=(Direction)relTypesAndDirections[i * 2 + 1];
          for (          Relationship rel : node.getRelationships(type,dir)) {
            Node otherNode=rel.getOtherNode(node);
            Relationship oldRel=firstSet.put(otherNode,rel);
            if (oldRel == null) {
              nextFirstList.add(otherNode);
            }
 else {
              firstSet.put(otherNode,oldRel);
            }
          }
        }
      }
    }
    if (secondItr.hasNext()) {
      Node node=secondItr.next();
      if (firstSet.containsKey(node)) {
        matchNode=node;
        doneCalculation=true;
        return true;
      }
      if (currentSecondDepth + 1 <= secondDepth) {
        for (int i=0; i < relTypesAndDirections.length / 2; i++) {
          RelationshipType type=(RelationshipType)relTypesAndDirections[i * 2];
          Direction dir=(Direction)relTypesAndDirections[i * 2 + 1];
          for (          Relationship rel : node.getRelationships(type,dir)) {
            Node otherNode=rel.getOtherNode(node);
            Relationship oldRel=secondSet.put(otherNode,rel);
            if (oldRel == null) {
              nextSecondList.add(otherNode);
            }
 else {
              secondSet.put(otherNode,oldRel);
            }
          }
        }
      }
    }
    if (!firstItr.hasNext() && currentFirstDepth + 1 <= firstDepth) {
      currentFirstDepth++;
      firstList=nextFirstList;
      nextFirstList=new ArrayList<Node>();
      firstItr=firstList.iterator();
    }
    if (!secondItr.hasNext() && currentSecondDepth + 1 <= secondDepth) {
      currentSecondDepth++;
      secondList=nextSecondList;
      nextSecondList=new ArrayList<Node>();
      secondItr=secondList.iterator();
    }
  }
  doneCalculation=true;
  return false;
}",0.9959308240081384
155086,"/** 
 * /--2--A--7--B--2--\ S E \----7---C---7----/
 */
public void testPathConstruct(){
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  FindSingleShortestPath findPath=getFindPath(graph,""String_Node_Str"",""String_Node_Str"",Integer.MAX_VALUE);
  assertTrue(findPath.getPathAsNodes() != null);
  assertTrue(findPath.getPathAsNodes().size() == 3);
}","/** 
 * /--2--A--7--B--2--\ S E \----7---C---7----/
 */
public void testPathConstruct(){
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  graph.makeEdge(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",(double)1);
  FindSingleShortestPath findPath=getFindPath(graph,""String_Node_Str"",""String_Node_Str"",Integer.MAX_VALUE);
  assertTrue(findPath.getPathAsNodes() != null);
  assertTrue(findPath.getPathAsNodes().size() == 4);
}",0.9988649262202044
155087,"private List<PropertyContainer> constructPath(boolean includeNodes,boolean includeRels){
  LinkedList<PropertyContainer> path=new LinkedList<PropertyContainer>();
  Relationship rel=firstSet.get(matchNode);
  Node currentNode=matchNode;
  while (rel != NULL_REL && rel != null) {
    if (includeRels) {
      path.addFirst(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(matchNode) && !currentNode.equals(startNode)) {
      path.addFirst(currentNode);
    }
    rel=firstSet.get(currentNode);
  }
  if (includeNodes) {
    path.addFirst(startNode);
    if (!matchNode.equals(startNode)) {
      path.addLast(matchNode);
    }
  }
  rel=secondSet.get(matchNode);
  currentNode=matchNode;
  while (rel != NULL_REL && rel != null) {
    if (includeRels) {
      path.addLast(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(endNode)) {
      path.addLast(currentNode);
    }
    rel=firstSet.get(currentNode);
  }
  if (includeNodes && !endNode.equals(matchNode)) {
    path.addLast(endNode);
  }
  return path;
}","private List<PropertyContainer> constructPath(boolean includeNodes,boolean includeRels){
  LinkedList<PropertyContainer> path=new LinkedList<PropertyContainer>();
  Relationship rel=firstSet.get(matchNode);
  Node currentNode=matchNode;
  while (rel != NULL_REL && rel != null) {
    if (includeRels) {
      path.addFirst(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(matchNode) && !currentNode.equals(startNode)) {
      path.addFirst(currentNode);
    }
    rel=firstSet.get(currentNode);
  }
  if (includeNodes) {
    path.addFirst(startNode);
    if (!matchNode.equals(startNode)) {
      path.addLast(matchNode);
    }
  }
  rel=secondSet.get(matchNode);
  currentNode=matchNode;
  while (rel != NULL_REL && rel != null) {
    if (includeRels) {
      path.addLast(rel);
    }
    currentNode=rel.getOtherNode(currentNode);
    if (includeNodes && !currentNode.equals(endNode)) {
      path.addLast(currentNode);
    }
    rel=secondSet.get(currentNode);
  }
  if (includeNodes && !endNode.equals(matchNode)) {
    path.addLast(endNode);
  }
  return path;
}",0.995091477019188
155088,"public String getReplacement(ShellServer server,Session session) throws ShellException {
  return GraphDatabaseApp.getDisplayName((GraphDatabaseShellServer)server,session,GraphDatabaseApp.getCurrent((GraphDatabaseShellServer)server,session)).toString();
}","public String getReplacement(ShellServer server,Session session) throws ShellException {
  return GraphDatabaseApp.getDisplayName((GraphDatabaseShellServer)server,session,GraphDatabaseApp.getCurrent((GraphDatabaseShellServer)server,session),false).toString();
}",0.9883720930232558
155089,"@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  List<TypedId> paths=readPaths(session);
  NodeOrRelationship current=getCurrent(session);
  NodeOrRelationship newThing=null;
  if (parser.arguments().isEmpty()) {
    newThing=NodeOrRelationship.wrap(getServer().getDb().getReferenceNode());
    paths.clear();
  }
 else {
    String arg=parser.arguments().get(0);
    TypedId newId=current.getTypedId();
    if (arg.equals(""String_Node_Str"")) {
      if (paths.size() > 0) {
        newId=paths.remove(paths.size() - 1);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      newId=getStartOrEnd(current,arg);
      paths.add(current.getTypedId());
    }
 else {
      long suppliedId=Long.parseLong(arg);
      if (parser.options().containsKey(""String_Node_Str"")) {
        newId=new TypedId(NodeOrRelationship.TYPE_RELATIONSHIP,suppliedId);
      }
 else {
        newId=new TypedId(NodeOrRelationship.TYPE_NODE,suppliedId);
      }
      if (newId.equals(current.getTypedId())) {
        throw new ShellException(""String_Node_Str"");
      }
      boolean absolute=parser.options().containsKey(""String_Node_Str"");
      if (!absolute && !this.isConnected(current,newId)) {
        throw new ShellException(getDisplayName(getServer(),session,newId) + ""String_Node_Str"" + ""String_Node_Str"");
      }
      paths.add(current.getTypedId());
    }
    newThing=this.getThingById(newId);
  }
  setCurrent(session,newThing);
  session.set(WORKING_DIR_KEY,this.makePath(paths));
  return null;
}","@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  List<TypedId> paths=readPaths(session);
  NodeOrRelationship current=getCurrent(session);
  NodeOrRelationship newThing=null;
  if (parser.arguments().isEmpty()) {
    newThing=NodeOrRelationship.wrap(getServer().getDb().getReferenceNode());
    paths.clear();
  }
 else {
    String arg=parser.arguments().get(0);
    TypedId newId=current.getTypedId();
    if (arg.equals(""String_Node_Str"")) {
      if (paths.size() > 0) {
        newId=paths.remove(paths.size() - 1);
      }
    }
 else     if (arg.equals(""String_Node_Str"")) {
    }
 else     if (arg.equals(""String_Node_Str"") || arg.equals(""String_Node_Str"")) {
      newId=getStartOrEnd(current,arg);
      paths.add(current.getTypedId());
    }
 else {
      long suppliedId=Long.parseLong(arg);
      if (parser.options().containsKey(""String_Node_Str"")) {
        newId=new TypedId(NodeOrRelationship.TYPE_RELATIONSHIP,suppliedId);
      }
 else {
        newId=new TypedId(NodeOrRelationship.TYPE_NODE,suppliedId);
      }
      if (newId.equals(current.getTypedId())) {
        throw new ShellException(""String_Node_Str"");
      }
      boolean absolute=parser.options().containsKey(""String_Node_Str"");
      if (!absolute && !this.isConnected(current,newId)) {
        throw new ShellException(getDisplayName(getServer(),session,newId,false) + ""String_Node_Str"" + ""String_Node_Str"");
      }
      paths.add(current.getTypedId());
    }
    newThing=this.getThingById(newId);
  }
  setCurrent(session,newThing);
  session.set(WORKING_DIR_KEY,this.makePath(paths));
  return null;
}",0.9982014388489208
155090,"protected String getDisplayNameForCurrent(Session session) throws ShellException {
  NodeOrRelationship current=getCurrent(session);
  return current.isNode() ? ""String_Node_Str"" : ""String_Node_Str"";
}","private static String getDisplayNameForCurrent(GraphDatabaseShellServer server,Session session) throws ShellException {
  NodeOrRelationship current=getCurrent(server,session);
  return current.isNode() ? ""String_Node_Str"" : ""String_Node_Str"";
}",0.8699551569506726
155091,"/** 
 * @param server the {@link GraphDatabaseShellServer} to run at.
 * @param session the {@link Session} used by the client.
 * @param relationship the {@link Relationship} to get a display name for.
 * @param verbose whether or not to include the relationship id as well.
 * @return a display string for the {@code relationship}.
 */
public static String getDisplayName(GraphDatabaseShellServer server,Session session,Relationship relationship,boolean verbose){
  StringBuffer result=new StringBuffer(""String_Node_Str"");
  if (verbose) {
    result.append(relationship.getId() + ""String_Node_Str"");
  }
  result.append(relationship.getType().name() + ""String_Node_Str"");
  return result.toString();
}","/** 
 * @param server the {@link GraphDatabaseShellServer} to run at.
 * @param session the {@link Session} used by the client.
 * @param relationship the {@link Relationship} to get a display name for.
 * @param verbose whether or not to include the relationship id as well.
 * @return a display string for the {@code relationship}.
 */
public static String getDisplayName(GraphDatabaseShellServer server,Session session,Relationship relationship,boolean verbose,boolean checkForMe) throws ShellException {
  if (checkForMe && isCurrent(session,NodeOrRelationship.wrap(relationship))) {
    return getDisplayNameForCurrent(server,session);
  }
  StringBuffer result=new StringBuffer(""String_Node_Str"");
  if (verbose) {
    result.append(relationship.getId() + ""String_Node_Str"");
  }
  result.append(relationship.getType().name() + ""String_Node_Str"");
  return result.toString();
}",0.8859483301827347
155092,"private void displayRelationships(NodeOrRelationship thing,Session session,Output out,boolean verbose,Direction direction,String prefixString,String postfixString,Map<String,Object> filterMap,boolean caseInsensitiveFilters,boolean looseFilters) throws ShellException, RemoteException {
  for (  Relationship rel : sortRelationships(thing.getRelationships(direction))) {
    String type=rel.getType().name();
    boolean matches=filterMap.isEmpty();
    for (    String filter : filterMap.keySet()) {
      if (matches(newPattern(filter,caseInsensitiveFilters),type,caseInsensitiveFilters,looseFilters)) {
        matches=true;
        break;
      }
    }
    if (!matches) {
      continue;
    }
    StringBuffer buf=new StringBuffer(getDisplayNameForCurrent(session));
    buf.append(""String_Node_Str"" + prefixString).append(getDisplayName(getServer(),session,rel,verbose));
    buf.append(postfixString + ""String_Node_Str"");
    buf.append(getDisplayName(getServer(),session,direction == Direction.OUTGOING ? rel.getEndNode() : rel.getStartNode()));
    out.println(buf);
  }
}","private void displayRelationships(NodeOrRelationship thing,Session session,Output out,boolean verbose,Direction direction,String prefixString,String postfixString,Map<String,Object> filterMap,boolean caseInsensitiveFilters,boolean looseFilters) throws ShellException, RemoteException {
  for (  Relationship rel : sortRelationships(thing.getRelationships(direction))) {
    String type=rel.getType().name();
    boolean matches=filterMap.isEmpty();
    for (    String filter : filterMap.keySet()) {
      if (matches(newPattern(filter,caseInsensitiveFilters),type,caseInsensitiveFilters,looseFilters)) {
        matches=true;
        break;
      }
    }
    if (!matches) {
      continue;
    }
    StringBuffer buf=new StringBuffer(getDisplayName(getServer(),session,thing,true));
    buf.append(""String_Node_Str"" + prefixString).append(getDisplayName(getServer(),session,rel,verbose,true));
    buf.append(postfixString + ""String_Node_Str"");
    buf.append(getDisplayName(getServer(),session,direction == Direction.OUTGOING ? rel.getEndNode() : rel.getStartNode(),true));
    out.println(buf);
  }
}",0.9729977116704804
155093,"@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  assertCurrentIsNode(session);
  boolean createNode=parser.options().containsKey(""String_Node_Str"");
  boolean suppliedNode=parser.options().containsKey(""String_Node_Str"");
  Node node=null;
  if (createNode) {
    node=getServer().getDb().createNode();
  }
 else   if (suppliedNode) {
    node=getNodeById(Long.parseLong(parser.options().get(""String_Node_Str"")));
  }
 else {
    throw new ShellException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (parser.options().get(""String_Node_Str"") == null) {
    throw new ShellException(""String_Node_Str"" + ""String_Node_Str"");
  }
  RelationshipType type=this.getRelationshipType(parser.options().get(""String_Node_Str""));
  Direction direction=this.getDirection(parser.options().get(""String_Node_Str""));
  Node currentNode=getCurrent(session).asNode();
  Node startNode=direction == Direction.OUTGOING ? currentNode : node;
  Node endNode=direction == Direction.OUTGOING ? node : currentNode;
  Relationship relationship=startNode.createRelationshipTo(endNode,type);
  boolean verbose=parser.options().containsKey(""String_Node_Str"");
  if (createNode && verbose) {
    out.println(""String_Node_Str"" + getDisplayName(getServer(),session,node) + ""String_Node_Str"");
  }
  if (verbose) {
    out.println(""String_Node_Str"" + getDisplayName(getServer(),session,relationship,true) + ""String_Node_Str"");
  }
  return null;
}","@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  assertCurrentIsNode(session);
  boolean createNode=parser.options().containsKey(""String_Node_Str"");
  boolean suppliedNode=parser.options().containsKey(""String_Node_Str"");
  Node node=null;
  if (createNode) {
    node=getServer().getDb().createNode();
  }
 else   if (suppliedNode) {
    node=getNodeById(Long.parseLong(parser.options().get(""String_Node_Str"")));
  }
 else {
    throw new ShellException(""String_Node_Str"" + ""String_Node_Str"");
  }
  if (parser.options().get(""String_Node_Str"") == null) {
    throw new ShellException(""String_Node_Str"" + ""String_Node_Str"");
  }
  RelationshipType type=this.getRelationshipType(parser.options().get(""String_Node_Str""));
  Direction direction=this.getDirection(parser.options().get(""String_Node_Str""));
  Node currentNode=getCurrent(session).asNode();
  Node startNode=direction == Direction.OUTGOING ? currentNode : node;
  Node endNode=direction == Direction.OUTGOING ? node : currentNode;
  Relationship relationship=startNode.createRelationshipTo(endNode,type);
  boolean verbose=parser.options().containsKey(""String_Node_Str"");
  if (createNode && verbose) {
    out.println(""String_Node_Str"" + getDisplayName(getServer(),session,node,false) + ""String_Node_Str"");
  }
  if (verbose) {
    out.println(""String_Node_Str"" + getDisplayName(getServer(),session,relationship,true,false) + ""String_Node_Str"");
  }
  return null;
}",0.9959946595460614
155094,"@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  NodeOrRelationship current=this.getCurrent(session);
  out.println(""String_Node_Str"" + getDisplayName(getServer(),session,current));
  String path=stringifyPath(Cd.readPaths(session),session);
  if (path.length() > 0) {
    out.println(path);
  }
  return null;
}","@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  NodeOrRelationship current=this.getCurrent(session);
  out.println(""String_Node_Str"" + getDisplayName(getServer(),session,current,false));
  String path=stringifyPath(Cd.readPaths(session),session);
  if (path.length() > 0) {
    out.println(path);
  }
  return null;
}",0.9923664122137404
155095,"private String stringifyPath(List<TypedId> pathIds,Session session) throws ShellException {
  if (pathIds.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder path=new StringBuilder();
  for (  TypedId id : pathIds) {
    path.append(getDisplayName(getServer(),session,id)).append(""String_Node_Str"");
  }
  return path.append(getDisplayNameForCurrent(session)).toString();
}","private String stringifyPath(List<TypedId> pathIds,Session session) throws ShellException {
  if (pathIds.isEmpty()) {
    return ""String_Node_Str"";
  }
  StringBuilder path=new StringBuilder();
  for (  TypedId id : pathIds) {
    path.append(getDisplayName(getServer(),session,id,false)).append(""String_Node_Str"");
  }
  return path.append(getDisplayName(getServer(),session,getCurrent(session),true)).toString();
}",0.951310861423221
155096,"@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException {
  assertCurrentIsNode(session);
  if (parser.arguments().isEmpty()) {
    throw new ShellException(""String_Node_Str"");
  }
  Node currentNode=this.getCurrent(session).asNode();
  Relationship rel=findRel(currentNode,Long.parseLong(parser.arguments().get(0)));
  rel.delete();
  if (!currentNode.equals(getServer().getDb().getReferenceNode()) && !currentNode.getRelationships().iterator().hasNext()) {
    throw new ShellException(""String_Node_Str"" + currentNode + ""String_Node_Str"");
  }
  Node otherNode=rel.getOtherNode(currentNode);
  if (!otherNode.getRelationships().iterator().hasNext()) {
    boolean deleteOtherNodeWhenEmpty=parser.options().containsKey(""String_Node_Str"");
    if (!deleteOtherNodeWhenEmpty) {
      throw new ShellException(""String_Node_Str"" + getDisplayName(getServer(),session,otherNode) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode+ ""String_Node_Str"");
    }
    otherNode.delete();
  }
 else {
    if (!this.hasPathToRefNode(otherNode)) {
      throw new ShellException(""String_Node_Str"" + otherNode + ""String_Node_Str"");
    }
    if (!this.hasPathToRefNode(currentNode)) {
      throw new ShellException(""String_Node_Str"" + currentNode + ""String_Node_Str"");
    }
  }
  return null;
}","@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException {
  assertCurrentIsNode(session);
  if (parser.arguments().isEmpty()) {
    throw new ShellException(""String_Node_Str"");
  }
  Node currentNode=this.getCurrent(session).asNode();
  Relationship rel=findRel(currentNode,Long.parseLong(parser.arguments().get(0)));
  rel.delete();
  if (!currentNode.equals(getServer().getDb().getReferenceNode()) && !currentNode.getRelationships().iterator().hasNext()) {
    throw new ShellException(""String_Node_Str"" + currentNode + ""String_Node_Str"");
  }
  Node otherNode=rel.getOtherNode(currentNode);
  if (!otherNode.getRelationships().iterator().hasNext()) {
    boolean deleteOtherNodeWhenEmpty=parser.options().containsKey(""String_Node_Str"");
    if (!deleteOtherNodeWhenEmpty) {
      throw new ShellException(""String_Node_Str"" + getDisplayName(getServer(),session,otherNode,false) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ otherNode+ ""String_Node_Str"");
    }
    otherNode.delete();
  }
 else {
    if (!this.hasPathToRefNode(otherNode)) {
      throw new ShellException(""String_Node_Str"" + otherNode + ""String_Node_Str"");
    }
    if (!this.hasPathToRefNode(currentNode)) {
      throw new ShellException(""String_Node_Str"" + currentNode + ""String_Node_Str"");
    }
  }
  return null;
}",0.997779422649889
155097,"@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  assertCurrentIsNode(session);
  Node node=this.getCurrent(session).asNode();
  boolean caseInsensitiveFilters=parser.options().containsKey(""String_Node_Str"");
  boolean looseFilters=parser.options().containsKey(""String_Node_Str"");
  Object[] relationshipTypes=parseRelationshipTypes(parser,out,caseInsensitiveFilters,looseFilters);
  if (relationshipTypes.length == 0) {
    out.println(""String_Node_Str"");
    return null;
  }
  StopEvaluator stopEvaluator=parseStopEvaluator(parser);
  ReturnableEvaluator returnableEvaluator=parseReturnableEvaluator(parser);
  Order order=parseOrder(parser);
  String filterString=parser.options().get(""String_Node_Str"");
  Map<String,Object> filterMap=filterString != null ? parseFilter(filterString,out) : null;
  String commandToRun=parser.options().get(""String_Node_Str"");
  String[] commandsToRun=commandToRun != null ? commandToRun.split(Pattern.quote(""String_Node_Str"")) : new String[0];
  for (  Node traversedNode : node.traverse(order,stopEvaluator,returnableEvaluator,relationshipTypes)) {
    boolean hit=false;
    if (filterMap == null) {
      hit=true;
    }
 else {
      Map<String,Boolean> matchPerFilterKey=new HashMap<String,Boolean>();
      for (      String key : traversedNode.getPropertyKeys()) {
        for (        Map.Entry<String,Object> filterEntry : filterMap.entrySet()) {
          String filterKey=filterEntry.getKey();
          if (matchPerFilterKey.containsKey(filterKey)) {
            continue;
          }
          if (matches(newPattern(filterKey,caseInsensitiveFilters),key,caseInsensitiveFilters,looseFilters)) {
            Object value=traversedNode.getProperty(key);
            String filterPattern=filterEntry.getValue() != null ? filterEntry.getValue().toString() : null;
            if (matches(newPattern(filterPattern,caseInsensitiveFilters),value.toString(),caseInsensitiveFilters,looseFilters)) {
              matchPerFilterKey.put(filterKey,true);
            }
          }
        }
      }
      if (matchPerFilterKey.size() == filterMap.size()) {
        hit=true;
      }
    }
    if (hit) {
      out.println(getDisplayName(getServer(),session,traversedNode));
      Map<String,Object> data=new HashMap<String,Object>();
      data.put(""String_Node_Str"",traversedNode.getId());
      for (      String command : commandsToRun) {
        String line=templateString(command,""String_Node_Str"",data);
        getServer().interpretLine(line,session,out);
      }
      out.println();
    }
  }
  return null;
}","@Override protected String exec(AppCommandParser parser,Session session,Output out) throws ShellException, RemoteException {
  assertCurrentIsNode(session);
  Node node=this.getCurrent(session).asNode();
  boolean caseInsensitiveFilters=parser.options().containsKey(""String_Node_Str"");
  boolean looseFilters=parser.options().containsKey(""String_Node_Str"");
  Object[] relationshipTypes=parseRelationshipTypes(parser,out,caseInsensitiveFilters,looseFilters);
  if (relationshipTypes.length == 0) {
    out.println(""String_Node_Str"");
    return null;
  }
  StopEvaluator stopEvaluator=parseStopEvaluator(parser);
  ReturnableEvaluator returnableEvaluator=parseReturnableEvaluator(parser);
  Order order=parseOrder(parser);
  String filterString=parser.options().get(""String_Node_Str"");
  Map<String,Object> filterMap=filterString != null ? parseFilter(filterString,out) : null;
  String commandToRun=parser.options().get(""String_Node_Str"");
  String[] commandsToRun=commandToRun != null ? commandToRun.split(Pattern.quote(""String_Node_Str"")) : new String[0];
  for (  Node traversedNode : node.traverse(order,stopEvaluator,returnableEvaluator,relationshipTypes)) {
    boolean hit=false;
    if (filterMap == null) {
      hit=true;
    }
 else {
      Map<String,Boolean> matchPerFilterKey=new HashMap<String,Boolean>();
      for (      String key : traversedNode.getPropertyKeys()) {
        for (        Map.Entry<String,Object> filterEntry : filterMap.entrySet()) {
          String filterKey=filterEntry.getKey();
          if (matchPerFilterKey.containsKey(filterKey)) {
            continue;
          }
          if (matches(newPattern(filterKey,caseInsensitiveFilters),key,caseInsensitiveFilters,looseFilters)) {
            Object value=traversedNode.getProperty(key);
            String filterPattern=filterEntry.getValue() != null ? filterEntry.getValue().toString() : null;
            if (matches(newPattern(filterPattern,caseInsensitiveFilters),value.toString(),caseInsensitiveFilters,looseFilters)) {
              matchPerFilterKey.put(filterKey,true);
            }
          }
        }
      }
      if (matchPerFilterKey.size() == filterMap.size()) {
        hit=true;
      }
    }
    if (hit) {
      out.println(getDisplayName(getServer(),session,traversedNode,true));
      Map<String,Object> data=new HashMap<String,Object>();
      data.put(""String_Node_Str"",traversedNode.getId());
      for (      String command : commandsToRun) {
        String line=templateString(command,""String_Node_Str"",data);
        getServer().interpretLine(line,session,out);
      }
      out.println();
    }
  }
  return null;
}",0.9990517731841456
155098,"public void setProperty(String key,Object value){
  if (key == null || value == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str""+ value);
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    ensureFullProperties();
    ArrayMap<Integer,PropertyData> addMap=nodeManager.getCowPropertyAddMap(this,true);
    ArrayMap<Integer,PropertyData> skipMap=nodeManager.getCowPropertyRemoveMap(this);
    PropertyIndex index=null;
    PropertyData property=null;
    boolean foundInSkipMap=false;
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (skipMap != null) {
        if (skipMap.remove(cachedIndex.getKeyId()) != null) {
          foundInSkipMap=true;
        }
      }
      index=cachedIndex;
      property=addMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      for (      int keyId : addMap.keySet()) {
        if (!nodeManager.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            if (skipMap != null) {
              skipMap.remove(indexToCheck.getKeyId());
            }
            index=indexToCheck;
            property=addMap.get(indexToCheck.getKeyId());
            if (property != null) {
              break;
            }
          }
        }
      }
      if (property == null) {
        for (        int keyId : propertyMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              if (skipMap != null) {
                skipMap.remove(indexToCheck.getKeyId());
              }
              index=indexToCheck;
              property=propertyMap.get(indexToCheck.getKeyId());
              if (property != null) {
                break;
              }
            }
          }
        }
      }
    }
    if (index == null) {
      index=nodeManager.createPropertyIndex(key);
    }
    if (property != null && !foundInSkipMap) {
      int propertyId=property.getId();
      changeProperty(propertyId,value);
      property.setNewValue(value);
    }
 else {
      int propertyId=addProperty(index,value);
      property=new PropertyData(propertyId,value);
    }
    addMap.put(index.getKeyId(),property);
    success=true;
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}","public void setProperty(String key,Object value){
  if (key == null || value == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str""+ value);
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    ensureFullProperties();
    ArrayMap<Integer,PropertyData> addMap=nodeManager.getCowPropertyAddMap(this,true);
    ArrayMap<Integer,PropertyData> skipMap=nodeManager.getCowPropertyRemoveMap(this);
    PropertyIndex index=null;
    PropertyData property=null;
    boolean foundInSkipMap=false;
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (skipMap != null) {
        if (skipMap.remove(cachedIndex.getKeyId()) != null) {
          foundInSkipMap=true;
        }
      }
      index=cachedIndex;
      property=addMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      for (      int keyId : addMap.keySet()) {
        if (!nodeManager.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            if (skipMap != null) {
              skipMap.remove(indexToCheck.getKeyId());
            }
            index=indexToCheck;
            property=addMap.get(indexToCheck.getKeyId());
            if (property != null) {
              break;
            }
          }
        }
      }
      if (property == null) {
        for (        int keyId : propertyMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              if (skipMap != null) {
                skipMap.remove(indexToCheck.getKeyId());
              }
              index=indexToCheck;
              property=propertyMap.get(indexToCheck.getKeyId());
              if (property != null) {
                break;
              }
            }
          }
        }
      }
    }
    if (index == null) {
      index=nodeManager.createPropertyIndex(key);
    }
    if (property != null && !foundInSkipMap) {
      int propertyId=property.getId();
      changeProperty(propertyId,value);
      property=new PropertyData(propertyId,value);
    }
 else {
      int propertyId=addProperty(index,value);
      property=new PropertyData(propertyId,value);
    }
    addMap.put(index.getKeyId(),property);
    success=true;
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}",0.9636298163485776
155099,"public void commit(){
  if (tx != null) {
    tx.success();
    tx.finish();
  }
}","public void commit(){
  if (tx != null) {
    tx.success();
    tx.finish();
    tx=null;
  }
}",0.9265536723163842
155100,"public void tearDown(){
  tx.finish();
  graphDb.shutdown();
}","public void tearDown(){
  if (tx != null) {
    tx.finish();
  }
  graphDb.shutdown();
}",0.8266666666666667
155101,"/** 
 * A non-standard Convenience method that loads a standard property file and converts it into a generic <Code>Map<String,String></CODE>. Will most  likely be removed in future releases.
 * @param file the property file to load
 * @return a map containing the properties from the file
 * @throws IllegalArgumentException if file does not exist
 */
public static Map<String,String> loadConfigurations(String file){
  Properties props=new Properties();
  try {
    FileInputStream stream=new FileInputStream(new File(file));
    try {
      props.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + file,e);
  }
  Set<Entry<Object,Object>> entries=props.entrySet();
  Map<String,String> stringProps=new HashMap<String,String>();
  for (  Entry entry : entries) {
    String key=(String)entry.getKey();
    String value=(String)entry.getValue();
    stringProps.put(key,value);
  }
  return stringProps;
}","/** 
 * A non-standard Convenience method that loads a standard property file and converts it into a generic <Code>Map<String,String></CODE>. Will most  likely be removed in future releases.
 * @param file the property file to load
 * @return a map containing the properties from the file
 * @throws IllegalArgumentException if file does not exist
 */
public static Map<String,String> loadConfigurations(String file){
  Properties props=new Properties();
  try {
    FileInputStream stream=new FileInputStream(new File(file));
    try {
      props.load(stream);
    }
  finally {
      stream.close();
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(""String_Node_Str"" + file,e);
  }
  Set<Entry<Object,Object>> entries=props.entrySet();
  Map<String,String> stringProps=new HashMap<String,String>();
  for (  Entry<Object,Object> entry : entries) {
    String key=(String)entry.getKey();
    String value=(String)entry.getValue();
    stringProps.put(key,value);
  }
  return stringProps;
}",0.9925705794947994
155102,"public synchronized void registerCache(Cache<?,?> cache,float ratio,int minSize){
  if (cache == null || ratio >= 1 || ratio <= 0 || minSize < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + cache + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize);
  }
  if (cache instanceof SoftLruCache) {
    softCaches.add((SoftLruCache<?,?>)cache);
    return;
  }
  for (  AdaptiveCacheElement element : caches) {
    if (element.getCache() == cache) {
      log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str"");
      return;
    }
  }
  AdaptiveCacheElement element=new AdaptiveCacheElement(cache,ratio,minSize);
  caches.add(element);
  cache.setAdaptiveStatus(true);
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize+ ""String_Node_Str"");
}","public synchronized void registerCache(Cache<?,?> cache,float ratio,int minSize){
  if (cache == null || ratio >= 1 || ratio <= 0 || minSize < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + cache + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize);
  }
  if (cache instanceof SoftLruCache<?,?>) {
    softCaches.add((SoftLruCache<?,?>)cache);
    return;
  }
  for (  AdaptiveCacheElement element : caches) {
    if (element.getCache() == cache) {
      log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str"");
      return;
    }
  }
  AdaptiveCacheElement element=new AdaptiveCacheElement(cache,ratio,minSize);
  caches.add(element);
  cache.setAdaptiveStatus(true);
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize+ ""String_Node_Str"");
}",0.953134510042605
155103,"public synchronized void unregisterCache(Cache<?,?> cache){
  if (cache == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (cache instanceof SoftLruCache) {
    softCaches.remove(cache);
    return;
  }
  Iterator<AdaptiveCacheElement> itr=caches.iterator();
  while (itr.hasNext()) {
    AdaptiveCacheElement element=itr.next();
    if (element.getCache() == cache) {
      itr.remove();
      break;
    }
  }
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str"");
}","public synchronized void unregisterCache(Cache<?,?> cache){
  if (cache == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (cache instanceof SoftLruCache<?,?>) {
    softCaches.remove(cache);
    return;
  }
  Iterator<AdaptiveCacheElement> itr=caches.iterator();
  while (itr.hasNext()) {
    AdaptiveCacheElement element=itr.next();
    if (element.getCache() == cache) {
      itr.remove();
      break;
    }
  }
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str"");
}",0.9951219512195122
155104,"public void pollAll(){
  SoftValue cv;
  while ((cv=(SoftValue)refQueue.poll()) != null) {
    cache.remove(cv.key);
  }
}","public void pollAll(){
  SoftValue<?,?> cv;
  while ((cv=(SoftValue<?,?>)refQueue.poll()) != null) {
    cache.remove(cv.key);
  }
}",0.9606299212598424
155105,"TxCommitHook(Transaction tx){
  this.tx=tx;
}","TxCommitHook(){
}",0.5483870967741935
155106,"PropertyIndex createPropertyIndex(String key){
  Transaction tx=getTransaction();
  if (tx == null) {
    throw new NotInTransactionException(""String_Node_Str"" + key);
  }
  TxCommitHook hook=txCommitHooks.get(tx);
  if (hook == null) {
    hook=new TxCommitHook(tx);
    txCommitHooks.put(tx,hook);
  }
  PropertyIndex index=hook.getIndex(key);
  if (index != null) {
    return index;
  }
  int id=idGenerator.nextId(PropertyIndex.class);
  index=new PropertyIndex(key,id);
  hook.addIndex(index);
  persistenceManager.createPropertyIndex(key,id);
  return index;
}","PropertyIndex createPropertyIndex(String key){
  Transaction tx=getTransaction();
  if (tx == null) {
    throw new NotInTransactionException(""String_Node_Str"" + key);
  }
  TxCommitHook hook=txCommitHooks.get(tx);
  if (hook == null) {
    hook=new TxCommitHook();
    txCommitHooks.put(tx,hook);
  }
  PropertyIndex index=hook.getIndex(key);
  if (index != null) {
    return index;
  }
  int id=idGenerator.nextId(PropertyIndex.class);
  index=new PropertyIndex(key,id);
  hook.addIndex(index);
  persistenceManager.createPropertyIndex(key,id);
  return index;
}",0.9982332155477032
155107,"RelationshipTypeEventConsumerImpl(NeoStoreXaConnection xaCon){
  this.xaCon=xaCon;
  this.relTypeStore=getRelationshipTypeStore();
}","RelationshipTypeEventConsumerImpl(NeoStoreXaConnection xaCon){
  this.xaCon=xaCon;
  this.relTypeStore=xaCon.getRelationshipTypeStore();
}",0.9777777777777776
155108,"public RelationshipEventConsumerImpl(NeoStoreXaConnection xaCon){
  this.xaCon=xaCon;
  this.relStore=getRelationshipStore();
}","public RelationshipEventConsumerImpl(NeoStoreXaConnection xaCon){
  this.xaCon=xaCon;
}",0.8130841121495327
155109,"public NodeEventConsumerImpl(NeoStoreXaConnection xaCon){
  this.xaCon=xaCon;
  nodeStore=getNodeStore();
}","public NodeEventConsumerImpl(NeoStoreXaConnection xaCon){
  this.xaCon=xaCon;
}",0.8494623655913979
155110,"private void commit(Thread thread,TransactionImpl tx) throws SystemException, HeuristicMixedException, HeuristicRollbackException {
  StoreFailureException sfe=null;
  int xaErrorCode=-1;
  int result=Status.STATUS_UNKNOWN;
  if (tx.getResourceCount() == 0) {
    tx.setStatus(Status.STATUS_COMMITTED);
    result=Status.STATUS_COMMITTED;
  }
 else {
    try {
      tx.doCommit();
      result=Status.STATUS_COMMITTED;
    }
 catch (    XAException e) {
      xaErrorCode=e.errorCode;
      e.printStackTrace();
      log.severe(""String_Node_Str"" + getTxStatusAsString(tx.getStatus()) + ""String_Node_Str""+ xaErrorCode);
      if (tx.getStatus() == Status.STATUS_COMMITTED) {
        tmOk=false;
        throw new TransactionFailureException(""String_Node_Str"",e);
      }
    }
catch (    StoreFailureException e) {
      sfe=e;
    }
  }
  if (tx.getStatus() != Status.STATUS_COMMITTED) {
    try {
      tx.doRollback();
      result=Status.STATUS_ROLLEDBACK;
    }
 catch (    XAException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      tmOk=false;
      throw new HeuristicMixedException(""String_Node_Str"" + xaErrorCode + ""String_Node_Str""+ e.errorCode);
    }
    tx.doAfterCompletion();
    txThreadMap.remove(thread);
    try {
      if (tx.isGlobalStartRecordWritten()) {
        getTxLog().txDone(tx.getGlobalId());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"");
      tmOk=false;
      throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
    }
    tx.setStatus(Status.STATUS_NO_TRANSACTION);
    if (sfe == null) {
      throw new HeuristicRollbackException(""String_Node_Str"" + ""String_Node_Str"" + xaErrorCode);
    }
 else {
      throw new HeuristicRollbackException(""String_Node_Str"" + sfe);
    }
  }
  tx.doAfterCompletion();
  txThreadMap.remove(thread);
  try {
    if (tx.isGlobalStartRecordWritten()) {
      getTxLog().txDone(tx.getGlobalId());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    tmOk=false;
    throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
  }
  tx.setStatus(Status.STATUS_NO_TRANSACTION);
}","private void commit(Thread thread,TransactionImpl tx) throws SystemException, HeuristicMixedException, HeuristicRollbackException {
  StoreFailureException sfe=null;
  int xaErrorCode=-1;
  if (tx.getResourceCount() == 0) {
    tx.setStatus(Status.STATUS_COMMITTED);
  }
 else {
    try {
      tx.doCommit();
    }
 catch (    XAException e) {
      xaErrorCode=e.errorCode;
      e.printStackTrace();
      log.severe(""String_Node_Str"" + getTxStatusAsString(tx.getStatus()) + ""String_Node_Str""+ xaErrorCode);
      if (tx.getStatus() == Status.STATUS_COMMITTED) {
        tmOk=false;
        throw new TransactionFailureException(""String_Node_Str"",e);
      }
    }
catch (    StoreFailureException e) {
      sfe=e;
    }
  }
  if (tx.getStatus() != Status.STATUS_COMMITTED) {
    try {
      tx.doRollback();
    }
 catch (    XAException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      tmOk=false;
      throw new HeuristicMixedException(""String_Node_Str"" + xaErrorCode + ""String_Node_Str""+ e.errorCode);
    }
    tx.doAfterCompletion();
    txThreadMap.remove(thread);
    try {
      if (tx.isGlobalStartRecordWritten()) {
        getTxLog().txDone(tx.getGlobalId());
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
      log.severe(""String_Node_Str"");
      tmOk=false;
      throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
    }
    tx.setStatus(Status.STATUS_NO_TRANSACTION);
    if (sfe == null) {
      throw new HeuristicRollbackException(""String_Node_Str"" + ""String_Node_Str"" + xaErrorCode);
    }
 else {
      throw new HeuristicRollbackException(""String_Node_Str"" + sfe);
    }
  }
  tx.doAfterCompletion();
  txThreadMap.remove(thread);
  try {
    if (tx.isGlobalStartRecordWritten()) {
      getTxLog().txDone(tx.getGlobalId());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    tmOk=false;
    throw new SystemException(""String_Node_Str"" + ""String_Node_Str"" + e);
  }
  tx.setStatus(Status.STATUS_NO_TRANSACTION);
}",0.4862029646522235
155111,"public Relationship createRelationshipTo(Node otherNode,RelationshipType type){
  long relId=neoService.getBatchInserter().createRelationship(id,otherNode.getId(),type,null);
  RelationshipBatchImpl rel=new RelationshipBatchImpl(new SimpleRelationship((int)relId,(int)id,(int)otherNode.getId(),type),neoService,emptyProps());
  neoService.addRelationshipToCache(id,rel);
  return rel;
}","public Relationship createRelationshipTo(Node otherNode,RelationshipType type){
  long relId=neoService.getBatchInserter().createRelationship(id,otherNode.getId(),type,null);
  RelationshipBatchImpl rel=new RelationshipBatchImpl(new SimpleRelationship((int)relId,(int)id,(int)otherNode.getId(),type),neoService,emptyProps());
  neoService.addRelationshipToCache(relId,rel);
  return rel;
}",0.9935483870967742
155112,"private static void createExampleNodeSpace(){
  Transaction tx=neo.beginTx();
  try {
    System.out.println(""String_Node_Str"");
    Node usersReferenceNode=neo.createNode();
    neo.getReferenceNode().createRelationshipTo(usersReferenceNode,RelTypes.USERS_REFERENCE);
    for (int id=0; id < 100; id++) {
      Node userNode=createUser(formUserName(id));
      usersReferenceNode.createRelationshipTo(userNode,RelTypes.USER);
    }
    tx.success();
  }
  finally {
    tx.finish();
  }
}","private static void createExampleNodeSpace(){
  Transaction tx=neo.beginTx();
  try {
    System.out.println(""String_Node_Str"");
    Random random=new Random();
    Node usersReferenceNode=neo.createNode();
    neo.getReferenceNode().createRelationshipTo(usersReferenceNode,RelTypes.USERS_REFERENCE);
    List<Node> users=new ArrayList<Node>();
    for (int id=0; id < 100; id++) {
      Node userNode=createUser(formUserName(id));
      usersReferenceNode.createRelationshipTo(userNode,RelTypes.USER);
      if (id > 10) {
        int numberOfFriends=random.nextInt(5);
        Set<Node> knows=new HashSet<Node>();
        for (int i=0; i < numberOfFriends; i++) {
          Node friend=users.get(random.nextInt(users.size()));
          if (knows.add(friend)) {
            userNode.createRelationshipTo(friend,RelTypes.KNOWS);
          }
        }
      }
      users.add(userNode);
    }
    tx.success();
  }
  finally {
    tx.finish();
  }
}",0.6801112656467315
155113,"public static void main(String[] args) throws Exception {
  neo=new EmbeddedNeo(NEO_DB_PATH);
  registerShutdownHookForNeo();
  createExampleNodeSpace();
  boolean trueForLocal=waitForUserInput(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"");
  if (trueForLocal) {
    startLocalShell();
  }
 else {
    startRemoteShellAndWait();
  }
  deleteExampleNodeSpace();
  System.out.println(""String_Node_Str"");
  shutdown();
}","public static void main(String[] args) throws Exception {
  registerShutdownHookForNeo();
  startNeo();
  createExampleNodeSpace();
  boolean trueForLocal=waitForUserInput(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"");
  if (trueForLocal) {
    startLocalShell();
  }
 else {
    startRemoteShellAndWait();
  }
  System.out.println(""String_Node_Str"");
  shutdown();
}",0.91156462585034
155114,"private static void deleteExampleNodeSpace(){
  Transaction tx=neo.beginTx();
  try {
    System.out.println(""String_Node_Str"");
    Node usersReferenceNode=neo.getReferenceNode().getSingleRelationship(RelTypes.USERS_REFERENCE,Direction.OUTGOING).getEndNode();
    for (    Relationship relationship : usersReferenceNode.getRelationships(RelTypes.USER,Direction.OUTGOING)) {
      Node user=relationship.getEndNode();
      user.delete();
      relationship.delete();
    }
    usersReferenceNode.getSingleRelationship(RelTypes.USERS_REFERENCE,Direction.INCOMING).delete();
    usersReferenceNode.delete();
    tx.success();
  }
  finally {
    tx.finish();
  }
}","private static void deleteExampleNodeSpace(){
  Transaction tx=neo.beginTx();
  try {
    System.out.println(""String_Node_Str"");
    Node usersReferenceNode=neo.getReferenceNode().getSingleRelationship(RelTypes.USERS_REFERENCE,Direction.OUTGOING).getEndNode();
    for (    Relationship relationship : usersReferenceNode.getRelationships(RelTypes.USER,Direction.OUTGOING)) {
      Node user=relationship.getEndNode();
      for (      Relationship knowsRelationship : user.getRelationships(RelTypes.KNOWS)) {
        knowsRelationship.delete();
      }
      user.delete();
      relationship.delete();
    }
    usersReferenceNode.getSingleRelationship(RelTypes.USERS_REFERENCE,Direction.INCOMING).delete();
    usersReferenceNode.delete();
    tx.success();
  }
  finally {
    tx.finish();
  }
}",0.9075975359342916
155115,"private static void startLocalShell() throws Exception {
  ShellServer shellServer=new LocalNeoShellServer(neo);
  new SameJvmClient(shellServer).grabPrompt();
  shellServer.shutdown();
}","private static void startLocalShell() throws Exception {
  shutdownNeo();
  ShellServer shellServer=new LocalNeoShellServer(NEO_DB_PATH,false);
  new SameJvmClient(shellServer).grabPrompt();
  shellServer.shutdown();
  startNeo();
}",0.8782816229116945
155116,"private static void shutdown(){
  neo.shutdown();
}","private static void shutdown(){
  if (neo != null) {
    deleteExampleNodeSpace();
    shutdownNeo();
  }
}",0.6329113924050633
155117,"private void getNextElement(){
  while (nextElement == null && relItr.hasNext()) {
    Relationship possibleRel=neoService.getRelationshipById(relItr.next());
    if (dir == Direction.OUTGOING && possibleRel.getEndNode().getId() == nodeId) {
      continue;
    }
    if (dir == Direction.INCOMING && possibleRel.getStartNode().getId() == nodeId) {
      continue;
    }
    if (types != null) {
      for (      RelationshipType type : types) {
        if (type.name().equals(possibleRel.getType().name())) {
          nextElement=possibleRel;
          break;
        }
      }
    }
    nextElement=possibleRel;
  }
}","private void getNextElement(){
  while (nextElement == null && relItr.hasNext()) {
    Relationship possibleRel=neoService.getRelationshipById(relItr.next());
    if (dir == Direction.OUTGOING && possibleRel.getEndNode().getId() == nodeId) {
      continue;
    }
    if (dir == Direction.INCOMING && possibleRel.getStartNode().getId() == nodeId) {
      continue;
    }
    if (types != null) {
      for (      RelationshipType type : types) {
        if (type.name().equals(possibleRel.getType().name())) {
          nextElement=possibleRel;
          break;
        }
      }
    }
 else {
      nextElement=possibleRel;
    }
  }
}",0.982484076433121
155118,"public EmbeddedReadOnlyNeo(String storeDir,Map<String,String> params){
  this.neoImpl=new EmbeddedNeoImpl(storeDir,params,this);
}","public EmbeddedReadOnlyNeo(String storeDir,Map<String,String> params){
  params.put(""String_Node_Str"",""String_Node_Str"");
  this.neoImpl=new EmbeddedNeoImpl(storeDir,params,this);
}",0.8360128617363344
155119,"private void sendUdpPingStarted(){
  sessionId=r.nextLong();
  sendUdpPing(NEO_STARTED,sessionId);
  timer.schedule(new TimerTask(){
    @Override public void run(){
      sendUdpPingRunning();
    }
  }
,UDP_PING_DELAY);
}","private void sendUdpPingStarted(){
  sessionId=r.nextLong();
  final ByteBuffer buf=setupUdpPing(NEO_STARTED,sessionId);
  timer.schedule(new TimerTask(){
    @Override public void run(){
      SocketAddress host=new InetSocketAddress(UDP_HOST,UDP_PORT);
      new UdpPinger(buf,host).sendPing();
    }
  }
,0);
  timer.schedule(new TimerTask(){
    @Override public void run(){
      ByteBuffer buffer=setupUdpPing(NEO_RUNNING,sessionId);
      SocketAddress host=new InetSocketAddress(UDP_HOST,UDP_PORT);
      new UdpPinger(buffer,host).sendPing();
    }
  }
,UDP_PING_DELAY,UDP_PING_DELAY);
}",0.5006105006105006
155120,"@Override public void run(){
  sendUdpPingRunning();
}","@Override public void run(){
  ByteBuffer buffer=setupUdpPing(NEO_RUNNING,sessionId);
  SocketAddress host=new InetSocketAddress(UDP_HOST,UDP_PORT);
  new UdpPinger(buffer,host).sendPing();
}",0.4163265306122449
155121,"private void sendUdpPingShutdown(){
  sendUdpPing(NEO_SHUTDOWN,sessionId);
}","private void sendUdpPingShutdown(){
  ByteBuffer buf=setupUdpPing(NEO_SHUTDOWN,sessionId);
  SocketAddress host=new InetSocketAddress(UDP_HOST,UDP_PORT);
  new UdpPinger(buf,host).sendPing();
}",0.550185873605948
155122,"public void sendPing(){
  new Thread(){
    public void run(){
      try {
        DatagramChannel sendChannel=DatagramChannel.open();
        sendChannel.send(buf,host);
        sendChannel.close();
      }
 catch (      Exception e) {
      }
    }
  }
.start();
}","public void sendPing(){
  try {
    DatagramChannel sendChannel=DatagramChannel.open();
    sendChannel.send(buf,host);
    sendChannel.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.6723404255319149
155123,"/** 
 * Sets the highest id in use (use this when rebuilding id generator).
 * @param highId The high id to set.
 */
protected void setHighId(long highId){
  idGenerator.setHighId(highId);
}","/** 
 * Sets the highest id in use (use this when rebuilding id generator).
 * @param highId The high id to set.
 */
protected void setHighId(long highId){
  if (idGenerator != null) {
    idGenerator.setHighId(highId);
  }
}",0.9156626506024096
155124,"private void commitRecovered(){
  try {
    committed=true;
    CommandSorter sorter=new CommandSorter();
    java.util.Collections.sort(relTypeCommands,sorter);
    for (    Command.RelationshipTypeCommand command : relTypeCommands) {
      command.execute();
      addRelationshipType(command.getKey());
    }
    java.util.Collections.sort(nodeCommands,sorter);
    for (    Command.NodeCommand command : nodeCommands) {
      command.execute();
      removeNodeFromCache(command.getKey());
    }
    java.util.Collections.sort(relCommands,sorter);
    for (    Command.RelationshipCommand command : relCommands) {
      command.execute();
      removeRelationshipFromCache(command.getKey());
    }
    java.util.Collections.sort(propIndexCommands,sorter);
    for (    Command.PropertyIndexCommand command : propIndexCommands) {
      command.execute();
      addPropertyIndexCommand(command.getKey());
    }
    java.util.Collections.sort(propCommands,sorter);
    for (    Command.PropertyCommand command : propCommands) {
      command.execute();
    }
    if (!isRecovered()) {
      lockReleaser.commit();
    }
  }
  finally {
    nodeRecords.clear();
    propertyRecords.clear();
    relRecords.clear();
    relTypeRecords.clear();
    propIndexRecords.clear();
    nodeCommands.clear();
    propCommands.clear();
    propIndexCommands.clear();
    relCommands.clear();
    relTypeCommands.clear();
  }
}","private void commitRecovered(){
  try {
    committed=true;
    CommandSorter sorter=new CommandSorter();
    java.util.Collections.sort(relTypeCommands,sorter);
    for (    Command.RelationshipTypeCommand command : relTypeCommands) {
      command.execute();
      addRelationshipType(command.getKey());
    }
    java.util.Collections.sort(nodeCommands,sorter);
    for (    Command.NodeCommand command : nodeCommands) {
      command.execute();
      removeNodeFromCache(command.getKey());
    }
    java.util.Collections.sort(relCommands,sorter);
    for (    Command.RelationshipCommand command : relCommands) {
      command.execute();
      removeRelationshipFromCache(command.getKey());
    }
    java.util.Collections.sort(propIndexCommands,sorter);
    for (    Command.PropertyIndexCommand command : propIndexCommands) {
      command.execute();
      addPropertyIndexCommand(command.getKey());
    }
    java.util.Collections.sort(propCommands,sorter);
    for (    Command.PropertyCommand command : propCommands) {
      command.execute();
      removePropertyFromCache(command);
    }
    neoStore.updateIdGenerators();
    if (!isRecovered()) {
      lockReleaser.commit();
    }
  }
  finally {
    nodeRecords.clear();
    propertyRecords.clear();
    relRecords.clear();
    relTypeRecords.clear();
    propIndexRecords.clear();
    nodeCommands.clear();
    propCommands.clear();
    propIndexCommands.clear();
    relCommands.clear();
    relTypeCommands.clear();
  }
}",0.974182444061962
155125,"public void recoveryComplete(){
  logger.fine(""String_Node_Str"" + ""String_Node_Str"");
  logger.fine(""String_Node_Str"" + ""String_Node_Str"");
  neoStore.makeStoreOk();
  logger.fine(""String_Node_Str"");
}","public void recoveryComplete(){
  logger.fine(""String_Node_Str"" + ""String_Node_Str"");
  logger.fine(""String_Node_Str"" + ""String_Node_Str"");
  neoStore.flushAll();
  neoStore.makeStoreOk();
  logger.fine(""String_Node_Str"");
}",0.9458823529411764
155126,"@Override public Iterable<String> getAllAvailableCommands(){
  return this.apps.keySet();
}","@Override public Iterable<String> getAllAvailableCommands(){
  return new ArrayList<String>(apps.keySet());
}",0.88
155127,"public void removeRelationshipTypeFromCache(int id){
  nodeManager.removeRelationshipTypeFromCache(id);
}","public void removeRelationshipTypeFromCache(int id){
  if (nodeManager != null) {
    nodeManager.removeRelationshipTypeFromCache(id);
  }
}",0.8571428571428571
155128,"public void addPropertyIndex(PropertyIndexData index){
  nodeManager.addPropertyIndex(index);
}","public void addPropertyIndex(PropertyIndexData index){
  if (nodeManager != null) {
    nodeManager.addPropertyIndex(index);
  }
}",0.8444444444444444
155129,"public void removeNodeFromCache(int nodeId){
  nodeManager.removeNodeFromCache(nodeId);
}","public void removeNodeFromCache(int nodeId){
  if (nodeManager != null) {
    nodeManager.removeNodeFromCache(nodeId);
  }
}",0.8356807511737089
155130,"public void removeRelationshipFromCache(int id){
  nodeManager.removeRelationshipFromCache(id);
}","public void removeRelationshipFromCache(int id){
  if (nodeManager != null) {
    nodeManager.removeRelationshipFromCache(id);
  }
}",0.8471615720524017
155131,"public void addRelationshipType(RelationshipTypeData type){
  nodeManager.addRelationshipType(type);
}","public void addRelationshipType(RelationshipTypeData type){
  if (nodeManager != null) {
    nodeManager.addRelationshipType(type);
  }
}",0.8535564853556485
155132,"public PropertyIndexData getPropertyIndex(int id){
  PropertyIndexRecord record=getRecord(id);
  return new PropertyIndexData(record.getId(),getStringFor(record));
}","public PropertyIndexData getPropertyIndex(int id,boolean recovered){
  assert recovered;
  try {
    setRecovered();
    PropertyIndexRecord record=getRecord(id);
    return new PropertyIndexData(record.getId(),getStringFor(record));
  }
  finally {
    unsetRecovered();
  }
}",0.746606334841629
155133,"private void addPropertyIndexCommand(int id){
  PropertyIndexData index=neoStore.getPropertyStore().getIndexStore().getPropertyIndex(id);
  lockReleaser.addPropertyIndex(index);
}","private void addPropertyIndexCommand(int id){
  PropertyIndexData index;
  if (isRecovered()) {
    index=neoStore.getPropertyStore().getIndexStore().getPropertyIndex(id,true);
  }
 else {
    index=neoStore.getPropertyStore().getIndexStore().getPropertyIndex(id);
  }
  lockReleaser.addPropertyIndex(index);
}",0.7321063394683026
155134,"private void addRelationshipType(int id){
  RelationshipTypeData type=neoStore.getRelationshipTypeStore().getRelationshipType(id);
  lockReleaser.addRelationshipType(type);
}","private void addRelationshipType(int id){
  setRecovered();
  RelationshipTypeData type;
  if (isRecovered()) {
    type=neoStore.getRelationshipTypeStore().getRelationshipType(id,true);
  }
 else {
    type=neoStore.getRelationshipTypeStore().getRelationshipType(id);
  }
  lockReleaser.addRelationshipType(type);
}",0.7020408163265306
155135,"private static String findTitle(NeoShellServer server,Session session,Node node){
  String keys=(String)safeGet(session,AbstractClient.TITLE_KEYS_KEY);
  if (keys == null) {
    return null;
  }
  String[] titleKeys=keys.split(Pattern.quote(""String_Node_Str""));
  Pattern[] patterns=new Pattern[titleKeys.length];
  for (int i=0; i < titleKeys.length; i++) {
    patterns[i]=Pattern.compile(titleKeys[i]);
  }
  for (  String nodeKey : node.getPropertyKeys()) {
    for (    Pattern pattern : patterns) {
      if (matches(pattern,nodeKey,false,false)) {
        return trimLength(session,Ls.format(node.getProperty(nodeKey),false));
      }
    }
  }
  return null;
}","private static String findTitle(NeoShellServer server,Session session,Node node){
  String keys=(String)safeGet(session,AbstractClient.TITLE_KEYS_KEY);
  if (keys == null) {
    return null;
  }
  String[] titleKeys=keys.split(Pattern.quote(""String_Node_Str""));
  Pattern[] patterns=new Pattern[titleKeys.length];
  for (int i=0; i < titleKeys.length; i++) {
    patterns[i]=Pattern.compile(titleKeys[i]);
  }
  for (  Pattern pattern : patterns) {
    for (    String nodeKey : node.getPropertyKeys()) {
      if (matches(pattern,nodeKey,false,false)) {
        return trimLength(session,Ls.format(node.getProperty(nodeKey),false));
      }
    }
  }
  return null;
}",0.9146706586826348
155136,"public void createNode(long id,Map<String,Object> properties){
  if (id < 0 || id > 0xFFFFFFFFL) {
    throw new IllegalArgumentException(""String_Node_Str"" + id);
  }
  int nodeId=(int)(id & 0xFFFFFFFF);
  NodeStore nodeStore=neoStore.getNodeStore();
  if (neoStore.getNodeStore().loadLightNode(nodeId)) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  long highId=nodeStore.getHighId();
  if (highId <= id) {
    nodeStore.setHighId(nodeId + 1);
  }
  NodeRecord nodeRecord=new NodeRecord(nodeId);
  nodeRecord.setInUse(true);
  nodeRecord.setCreated();
  nodeRecord.setNextProp(createPropertyChain(properties));
}","public void createNode(long id,Map<String,Object> properties){
  if (id < 0 || id > 0xFFFFFFFFL) {
    throw new IllegalArgumentException(""String_Node_Str"" + id);
  }
  int nodeId=(int)(id & 0xFFFFFFFF);
  NodeStore nodeStore=neoStore.getNodeStore();
  if (neoStore.getNodeStore().loadLightNode(nodeId)) {
    throw new IllegalArgumentException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  long highId=nodeStore.getHighId();
  if (highId <= id) {
    nodeStore.setHighId(nodeId + 1);
  }
  NodeRecord nodeRecord=new NodeRecord(nodeId);
  nodeRecord.setInUse(true);
  nodeRecord.setCreated();
  nodeRecord.setNextProp(createPropertyChain(properties));
  getNodeStore().updateRecord(nodeRecord);
}",0.9683590875643856
155137,"public String toString(){
  return ""String_Node_Str"" + buf + ""String_Node_Str""+ persistenceWindow+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + buf.position() + ""String_Node_Str""+ buf.capacity()+ ""String_Node_Str""+ persistenceWindow+ ""String_Node_Str"";
}",0.8380281690140845
155138,"EventElement getNextEventElement(){
synchronized (eventElements) {
    if (eventElements == null) {
      return null;
    }
    if (!eventElements.isEmpty()) {
      try {
        return eventElements.removeFirst();
      }
 catch (      NoSuchElementException e) {
      }
    }
  }
  return null;
}","EventElement getNextEventElement(){
synchronized (eventElements) {
    if (!eventElements.isEmpty()) {
      try {
        return eventElements.removeFirst();
      }
 catch (      NoSuchElementException e) {
      }
    }
  }
  return null;
}",0.3125
155139,"void readPosition(){
  try {
    long fileSize=getFileChannel().size();
    long recordCount=fileSize / recordSize;
    if (position > recordCount) {
      return;
    }
    ByteBuffer byteBuffer=buffer.getBuffer();
    byteBuffer.clear();
    int count=getFileChannel().read(byteBuffer,position * recordSize);
    byteBuffer.clear();
  }
 catch (  IOException e) {
    throw new StoreFailureException(""String_Node_Str"" + position + ""String_Node_Str""+ position * recordSize + ""String_Node_Str"",e);
  }
}","void readPosition(){
  try {
    long fileSize=getFileChannel().size();
    long recordCount=fileSize / recordSize;
    if (position > recordCount) {
      return;
    }
    ByteBuffer byteBuffer=buffer.getBuffer();
    byteBuffer.clear();
    getFileChannel().read(byteBuffer,position * recordSize);
    byteBuffer.clear();
  }
 catch (  IOException e) {
    throw new StoreFailureException(""String_Node_Str"" + position + ""String_Node_Str""+ position * recordSize + ""String_Node_Str"",e);
  }
}",0.9899598393574296
155140,"@Override protected boolean versionFound(String version){
  if (!version.startsWith(""String_Node_Str"")) {
    return false;
  }
  if (version.equals(""String_Node_Str"")) {
    ByteBuffer buffer=ByteBuffer.wrap(new byte[3 * RECORD_SIZE]);
    long time=System.currentTimeMillis();
    long random=new Random(time).nextLong();
    buffer.put(Record.IN_USE.byteValue()).putLong(time);
    buffer.put(Record.IN_USE.byteValue()).putLong(random);
    buffer.put(Record.IN_USE.byteValue()).putLong(0);
    buffer.flip();
    try {
      getFileChannel().write(buffer,0);
    }
 catch (    IOException e) {
      throw new StoreFailureException(e);
    }
    rebuildIdGenerator();
    closeIdGenerator();
    return true;
  }
 else   if (version.equals(""String_Node_Str"")) {
    rebuildIdGenerator();
    closeIdGenerator();
    return true;
  }
  throw new RuntimeException(""String_Node_Str"" + version + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override protected boolean versionFound(String version){
  if (!version.startsWith(""String_Node_Str"")) {
    return false;
  }
  if (version.equals(""String_Node_Str"")) {
    ByteBuffer buffer=ByteBuffer.wrap(new byte[3 * RECORD_SIZE]);
    long time=System.currentTimeMillis();
    long random=r.nextLong();
    buffer.put(Record.IN_USE.byteValue()).putLong(time);
    buffer.put(Record.IN_USE.byteValue()).putLong(random);
    buffer.put(Record.IN_USE.byteValue()).putLong(0);
    buffer.flip();
    try {
      getFileChannel().write(buffer,0);
    }
 catch (    IOException e) {
      throw new StoreFailureException(e);
    }
    rebuildIdGenerator();
    closeIdGenerator();
    return true;
  }
 else   if (version.equals(""String_Node_Str"")) {
    rebuildIdGenerator();
    closeIdGenerator();
    return true;
  }
  throw new RuntimeException(""String_Node_Str"" + version + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.991029023746702
155141,"/** 
 * Creates the neo,node,relationship,property and relationship type stores.
 * @param fileName The name of neo store
 * @throws IOException If unable to create stores or name null
 */
public static void createStore(String fileName){
  createEmptyStore(fileName,VERSION);
  NodeStore.createStore(fileName + ""String_Node_Str"");
  RelationshipStore.createStore(fileName + ""String_Node_Str"");
  PropertyStore.createStore(fileName + ""String_Node_Str"");
  RelationshipTypeStore.createStore(fileName + ""String_Node_Str"");
  NeoStore neoStore=new NeoStore(fileName);
  neoStore.nextId();
  neoStore.nextId();
  neoStore.nextId();
  long time=System.currentTimeMillis();
  neoStore.setCreationTime(time);
  neoStore.setRandomNumber(new Random(time).nextLong());
  neoStore.setVersion(0);
  neoStore.close();
}","/** 
 * Creates the neo,node,relationship,property and relationship type stores.
 * @param fileName The name of neo store
 * @throws IOException If unable to create stores or name null
 */
public static void createStore(String fileName){
  createEmptyStore(fileName,VERSION);
  NodeStore.createStore(fileName + ""String_Node_Str"");
  RelationshipStore.createStore(fileName + ""String_Node_Str"");
  PropertyStore.createStore(fileName + ""String_Node_Str"");
  RelationshipTypeStore.createStore(fileName + ""String_Node_Str"");
  NeoStore neoStore=new NeoStore(fileName);
  neoStore.nextId();
  neoStore.nextId();
  neoStore.nextId();
  long time=System.currentTimeMillis();
  neoStore.setCreationTime(time);
  neoStore.setRandomNumber(r.nextLong());
  neoStore.setVersion(0);
  neoStore.close();
}",0.9893416927899686
155142,"private RelationshipRecord getRelationshipRecord(long id){
  if (id < 0 || id >= getNodeStore().getHighId()) {
    throw new IllegalArgumentException(""String_Node_Str"" + id);
  }
  return getRelationshipStore().getRecord((int)(id & 0xFFFFFFFF));
}","private RelationshipRecord getRelationshipRecord(long id){
  if (id < 0 || id >= getRelationshipStore().getHighId()) {
    throw new IllegalArgumentException(""String_Node_Str"" + id);
  }
  return getRelationshipStore().getRecord((int)(id & 0xFFFFFFFF));
}",0.9681274900398408
155143,"public synchronized Node next(){
  Node nextNode=currentNode;
  currentNode=null;
  if (nextNode == null) {
    throw new NoSuchElementException();
  }
  return nextNode;
}","public synchronized Node next(){
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  Node nextNode=currentNode;
  currentNode=null;
  return nextNode;
}",0.6035502958579881
155144,"public void testGetAllNode(){
  long highId=getNodeManager().getHighestPossibleIdInUse(Node.class);
  if (highId >= 0 && highId < 10000) {
    int count=0;
    for (    Node node : getEmbeddedNeo().getAllNodes()) {
      count++;
    }
    boolean found=false;
    Node newNode=getNeo().createNode();
    newTransaction();
    int oldCount=count;
    count=0;
    for (    Node node : getEmbeddedNeo().getAllNodes()) {
      count++;
      if (node.equals(newNode)) {
        found=true;
      }
    }
    assertTrue(found);
    assertEquals(count,oldCount + 1);
    newNode.delete();
    newTransaction();
    found=false;
    count=0;
    for (    Node node : getEmbeddedNeo().getAllNodes()) {
      count++;
      if (node.equals(newNode)) {
        found=true;
      }
    }
    assertTrue(!found);
    assertEquals(count,oldCount);
  }
}","public void testGetAllNode(){
  long highId=getNodeManager().getHighestPossibleIdInUse(Node.class);
  if (highId >= 0 && highId < 10000) {
    int count=0;
    for (    Node node : getEmbeddedNeo().getAllNodes()) {
      count++;
    }
    boolean found=false;
    Node newNode=getNeo().createNode();
    newTransaction();
    int oldCount=count;
    count=0;
    for (    Node node : getEmbeddedNeo().getAllNodes()) {
      count++;
      if (node.equals(newNode)) {
        found=true;
      }
    }
    assertTrue(found);
    assertEquals(count,oldCount + 1);
    Iterator<Node> allNodesIterator=getEmbeddedNeo().getAllNodes().iterator();
    assertNotNull(allNodesIterator.next());
    newNode.delete();
    newTransaction();
    found=false;
    count=0;
    for (    Node node : getEmbeddedNeo().getAllNodes()) {
      count++;
      if (node.equals(newNode)) {
        found=true;
      }
    }
    assertTrue(!found);
    assertEquals(count,oldCount);
  }
}",0.8267847260653016
155145,"public Object removeProperty(String key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    ensureFullProperties();
    PropertyData property=null;
    ArrayMap<Integer,PropertyData> addMap=nodeManager.getCowPropertyAddMap(this);
    ArrayMap<Integer,PropertyData> removeMap=nodeManager.getCowPropertyRemoveMap(this,true);
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (addMap != null) {
        property=addMap.remove(cachedIndex.getKeyId());
        if (property != null) {
          removeMap.put(cachedIndex.getKeyId(),property);
          break;
        }
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        removeMap.put(cachedIndex.getKeyId(),property);
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      if (addMap != null) {
        for (        int keyId : addMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              property=addMap.remove(indexToCheck.getKeyId());
              if (property != null) {
                removeMap.put(indexToCheck.getKeyId(),property);
                break;
              }
            }
          }
        }
        if (property == null) {
          for (          int keyId : propertyMap.keySet()) {
            if (!nodeManager.hasIndexFor(keyId)) {
              PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
              if (indexToCheck.getKey().equals(key)) {
                property=propertyMap.get(indexToCheck.getKeyId());
                if (property != null) {
                  removeMap.put(indexToCheck.getKeyId(),property);
                  break;
                }
              }
            }
          }
        }
      }
    }
    if (property == null) {
      success=true;
      return null;
    }
    removeProperty(property.getId());
    success=true;
    return getPropertyValue(property);
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}","public Object removeProperty(String key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    ensureFullProperties();
    PropertyData property=null;
    ArrayMap<Integer,PropertyData> addMap=nodeManager.getCowPropertyAddMap(this);
    ArrayMap<Integer,PropertyData> removeMap=nodeManager.getCowPropertyRemoveMap(this,true);
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (addMap != null) {
        property=addMap.remove(cachedIndex.getKeyId());
        if (property != null) {
          removeMap.put(cachedIndex.getKeyId(),property);
          break;
        }
      }
      if (removeMap.get(cachedIndex.getKeyId()) != null) {
        success=true;
        return null;
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        removeMap.put(cachedIndex.getKeyId(),property);
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      if (addMap != null) {
        for (        int keyId : addMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              property=addMap.remove(indexToCheck.getKeyId());
              if (property != null) {
                removeMap.put(indexToCheck.getKeyId(),property);
                break;
              }
            }
          }
        }
        if (property == null) {
          for (          int keyId : propertyMap.keySet()) {
            if (!nodeManager.hasIndexFor(keyId)) {
              PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
              if (indexToCheck.getKey().equals(key)) {
                property=propertyMap.get(indexToCheck.getKeyId());
                if (property != null) {
                  removeMap.put(indexToCheck.getKeyId(),property);
                  break;
                }
              }
            }
          }
        }
      }
    }
    if (property == null) {
      success=true;
      return null;
    }
    removeProperty(property.getId());
    success=true;
    return getPropertyValue(property);
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}",0.9766056997022544
155146,"void nodeChangeProperty(int nodeId,int propertyId,Object value){
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId);
  }
  if (!nodeRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
  }
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId);
    addPropertyRecord(propertyRecord);
  }
  propertyRecord.setNodeId(nodeId);
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}","void nodeChangeProperty(int nodeId,int propertyId,Object value){
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId);
  }
  if (!nodeRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
  }
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId);
    addPropertyRecord(propertyRecord);
  }
  if (!propertyRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + propertyId + ""String_Node_Str"");
  }
  propertyRecord.setNodeId(nodeId);
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}",0.950432730133753
155147,"void relRemoveProperty(int relId,int propertyId){
  RelationshipRecord relRecord=getRelationshipRecord(relId);
  if (relRecord == null) {
    relRecord=getRelationshipStore().getRecord(relId);
  }
  if (!relRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + relId + ""String_Node_Str"");
  }
  PropertyRecord propRecord=getPropertyRecord(propertyId);
  if (propRecord == null) {
    propRecord=getPropertyStore().getRecord(propertyId);
    addPropertyRecord(propRecord);
  }
  propRecord.setRelId(relId);
  if (propRecord.isLight()) {
    getPropertyStore().makeHeavy(propRecord);
  }
  propRecord.setInUse(false);
  for (  DynamicRecord valueRecord : propRecord.getValueRecords()) {
    if (valueRecord.inUse()) {
      valueRecord.setInUse(false,propRecord.getType().intValue());
    }
  }
  int prevProp=propRecord.getPrevProp();
  int nextProp=propRecord.getNextProp();
  if (relRecord.getNextProp() == propertyId) {
    relRecord.setNextProp(nextProp);
    addRelationshipRecord(relRecord);
  }
  if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord prevPropRecord=getPropertyRecord(prevProp);
    if (prevPropRecord == null) {
      prevPropRecord=getPropertyStore().getLightRecord(prevProp);
      addPropertyRecord(prevPropRecord);
    }
    prevPropRecord.setNextProp(nextProp);
  }
  if (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord nextPropRecord=getPropertyRecord(nextProp);
    if (nextPropRecord == null) {
      nextPropRecord=getPropertyStore().getLightRecord(nextProp);
      addPropertyRecord(nextPropRecord);
    }
    nextPropRecord.setPrevProp(prevProp);
  }
}","void relRemoveProperty(int relId,int propertyId){
}",0.0599647266313932
155148,"void relChangeProperty(int relId,int propertyId,Object value){
  RelationshipRecord relRecord=getRelationshipRecord(relId);
  if (relRecord == null) {
    relRecord=getRelationshipStore().getRecord(relId);
  }
  if (!relRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + relId + ""String_Node_Str"");
  }
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId);
    addPropertyRecord(propertyRecord);
  }
  propertyRecord.setRelId(relId);
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}","void relChangeProperty(int relId,int propertyId,Object value){
  RelationshipRecord relRecord=getRelationshipRecord(relId);
  if (relRecord == null) {
    relRecord=getRelationshipStore().getRecord(relId);
  }
  if (!relRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + relId + ""String_Node_Str"");
  }
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId);
    addPropertyRecord(propertyRecord);
  }
  if (!propertyRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + propertyId + ""String_Node_Str"");
  }
  propertyRecord.setRelId(relId);
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}",0.9509345794392524
155149,"void nodeRemoveProperty(int nodeId,int propertyId){
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId);
  }
  if (!nodeRecord.inUse()) {
    throw new IllegalStateException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
  }
  PropertyRecord propRecord=getPropertyRecord(propertyId);
  if (propRecord == null) {
    propRecord=getPropertyStore().getRecord(propertyId);
    addPropertyRecord(propRecord);
  }
  propRecord.setNodeId(nodeId);
  if (propRecord.isLight()) {
    getPropertyStore().makeHeavy(propRecord);
  }
  propRecord.setInUse(false);
  for (  DynamicRecord valueRecord : propRecord.getValueRecords()) {
    if (valueRecord.inUse()) {
      valueRecord.setInUse(false,propRecord.getType().intValue());
    }
  }
  int prevProp=propRecord.getPrevProp();
  int nextProp=propRecord.getNextProp();
  if (nodeRecord.getNextProp() == propertyId) {
    nodeRecord.setNextProp(nextProp);
    addNodeRecord(nodeRecord);
  }
  if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord prevPropRecord=getPropertyRecord(prevProp);
    if (prevPropRecord == null) {
      prevPropRecord=getPropertyStore().getLightRecord(prevProp);
    }
    prevPropRecord.setNextProp(nextProp);
    addPropertyRecord(prevPropRecord);
  }
  if (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord nextPropRecord=getPropertyRecord(nextProp);
    if (nextPropRecord == null) {
      nextPropRecord=getPropertyStore().getLightRecord(nextProp);
    }
    nextPropRecord.setPrevProp(prevProp);
    addPropertyRecord(nextPropRecord);
  }
}","void nodeRemoveProperty(int nodeId,int propertyId){
}",0.0630577037477691
155150,"public boolean hasNext(){
  if (nextElement != null) {
    return true;
  }
  do {
    if (currentTypeIterator.hasNext()) {
      int nextId=currentTypeIterator.next();
      try {
        Relationship possibleElement=nodeManager.getRelationshipById(nextId);
        if (direction == Direction.INCOMING && possibleElement.getEndNode().equals(fromNode)) {
          nextElement=possibleElement;
          return true;
        }
 else         if (direction == Direction.OUTGOING && possibleElement.getStartNode().equals(fromNode)) {
          nextElement=possibleElement;
          return true;
        }
 else         if (direction == Direction.BOTH) {
          nextElement=possibleElement;
          return true;
        }
      }
 catch (      NotFoundException e) {
        log.log(Level.FINE,""String_Node_Str"" + nextId,e);
      }
    }
    while (!currentTypeIterator.hasNext() && typeIterator.hasNext()) {
      currentTypeIterator=typeIterator.next();
    }
  }
 while (currentTypeIterator.hasNext());
  return nextElement != null;
}","public boolean hasNext(){
  if (nextElement != null) {
    return true;
  }
  do {
    if (currentTypeIterator.hasNext()) {
      int nextId=currentTypeIterator.next();
      try {
        Relationship possibleElement=nodeManager.getRelationshipById(nextId);
        if (direction == Direction.INCOMING && possibleElement.getEndNode().equals(fromNode)) {
          nextElement=possibleElement;
          return true;
        }
 else         if (direction == Direction.OUTGOING && possibleElement.getStartNode().equals(fromNode)) {
          nextElement=possibleElement;
          return true;
        }
 else         if (direction == Direction.BOTH) {
          nextElement=possibleElement;
          return true;
        }
      }
 catch (      NotFoundException e) {
        log.log(Level.FINE,""String_Node_Str"" + nextId,e);
      }
    }
    while (!currentTypeIterator.hasNext() && typeIterator.hasNext()) {
      currentTypeIterator=typeIterator.next();
    }
  }
 while (currentTypeIterator.hasNext());
  return false;
}",0.9883833494675702
155151,"public Node getNodeById(int nodeId) throws NotFoundException {
  if (nodeId < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + nodeId);
  }
  NodeImpl node=nodeCache.get(nodeId);
  if (node != null) {
    return new NodeProxy(nodeId,this);
  }
  node=new NodeImpl(nodeId,this);
  ReentrantLock loadLock=lockId(nodeId);
  try {
    if (nodeCache.get(nodeId) != null) {
      node=nodeCache.get(nodeId);
      return new NodeProxy(nodeId,this);
    }
    if (!persistenceManager.loadLightNode(nodeId)) {
      throw new NotFoundException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
    nodeCache.add(nodeId,node);
    return new NodeProxy(nodeId,this);
  }
  finally {
    loadLock.unlock();
  }
}","public Node getNodeById(int nodeId) throws NotFoundException {
  if (nodeId < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + nodeId);
  }
  NodeImpl node=nodeCache.get(nodeId);
  if (node != null) {
    return new NodeProxy(nodeId,this);
  }
  node=new NodeImpl(nodeId,this);
  ReentrantLock loadLock=lockId(nodeId);
  try {
    if (nodeCache.get(nodeId) != null) {
      return new NodeProxy(nodeId,this);
    }
    if (!persistenceManager.loadLightNode(nodeId)) {
      throw new NotFoundException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
    nodeCache.add(nodeId,node);
    return new NodeProxy(nodeId,this);
  }
  finally {
    loadLock.unlock();
  }
}",0.9758522727272728
155152,"/** 
 * Acquires a windows for <CODE>position</CODE> and <CODE>operationType</CODE> locking the window preventing other threads from using it.
 * @param position The position the needs to be encapsulated by the window
 * @param operationType The type of operation (READ or WRITE)
 * @return A locked window encapsulating the position
 * @throws IOException If unable to acquire the window
 */
PersistenceWindow acquire(long position,OperationType operationType){
  LockableWindow window=null;
synchronized (activeRowWindows) {
    if (brickMiss >= REFRESH_BRICK_COUNT) {
      brickMiss=0;
      refreshBricks();
    }
    if (brickSize > 0) {
      int brickIndex=(int)(position * blockSize / brickSize);
      if (brickIndex < brickArray.length) {
        window=brickArray[brickIndex].getWindow();
        if (window != null && !window.encapsulates(position)) {
          log.severe(""String_Node_Str"" + position + ""String_Node_Str""+ brickIndex+ ""String_Node_Str""+ blockSize+ ""String_Node_Str""+ brickSize+ ""String_Node_Str""+ window);
          throw new RuntimeException(""String_Node_Str"");
        }
        brickArray[brickIndex].setHit();
      }
 else {
        expandBricks(brickIndex + 1);
        window=brickArray[brickIndex].getWindow();
      }
    }
    if (window == null) {
      miss++;
      brickMiss++;
      PersistenceRow dpw=activeRowWindows.get(position);
      if (dpw == null) {
        dpw=new PersistenceRow(position,blockSize,fileChannel);
        if (operationType == OperationType.READ) {
          dpw.readPosition();
        }
      }
      window=dpw;
      activeRowWindows.put((int)position,dpw);
    }
 else {
      hit++;
    }
    window.mark();
  }
  window.lock();
  window.setOperationType(operationType);
  return window;
}","/** 
 * Acquires a windows for <CODE>position</CODE> and <CODE>operationType</CODE> locking the window preventing other threads from using it.
 * @param position The position the needs to be encapsulated by the window
 * @param operationType The type of operation (READ or WRITE)
 * @return A locked window encapsulating the position
 * @throws IOException If unable to acquire the window
 */
PersistenceWindow acquire(long position,OperationType operationType){
  LockableWindow window=null;
synchronized (activeRowWindows) {
    if (brickMiss >= REFRESH_BRICK_COUNT) {
      brickMiss=0;
      refreshBricks();
    }
    if (brickSize > 0) {
      int brickIndex=(int)(position * blockSize / brickSize);
      if (brickIndex < brickArray.length) {
        window=brickArray[brickIndex].getWindow();
        if (window != null && !window.encapsulates(position)) {
          log.severe(""String_Node_Str"" + position + ""String_Node_Str""+ brickIndex+ ""String_Node_Str""+ blockSize+ ""String_Node_Str""+ brickSize+ ""String_Node_Str""+ window);
          throw new RuntimeException(""String_Node_Str"");
        }
        brickArray[brickIndex].setHit();
      }
 else {
        expandBricks(brickIndex + 1);
        window=brickArray[brickIndex].getWindow();
      }
    }
    if (window == null) {
      miss++;
      brickMiss++;
      PersistenceRow dpw=activeRowWindows.get((int)position);
      if (dpw == null) {
        dpw=new PersistenceRow(position,blockSize,fileChannel);
        if (operationType == OperationType.READ) {
          dpw.readPosition();
        }
      }
      window=dpw;
      activeRowWindows.put((int)position,dpw);
    }
 else {
      hit++;
    }
    window.mark();
  }
  window.lock();
  window.setOperationType(operationType);
  return window;
}",0.9985855728429984
155153,"public synchronized void close() throws IOException {
  if (fileChannel == null || !fileChannel.isOpen()) {
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size() + ""String_Node_Str"");
    if (writeBuffer != null) {
      writeBuffer.force();
    }
    writeBuffer=null;
    fileChannel.close();
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog+ ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  if (!keepLogs || backupSlave) {
    if (currentLog == CLEAN) {
      deleteCurrentLogFile(fileName);
    }
 else {
      deleteCurrentLogFile(fileName + ""String_Node_Str"" + currentLog);
    }
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + currentLog,endPosition);
  }
  if (currentLog != CLEAN) {
    setActiveLog(CLEAN);
  }
}","public synchronized void close() throws IOException {
  if (fileChannel == null || !fileChannel.isOpen()) {
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size() + ""String_Node_Str"");
    writeBuffer.force();
    writeBuffer=null;
    fileChannel.close();
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog+ ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  if (!keepLogs || backupSlave) {
    if (currentLog == CLEAN) {
      deleteCurrentLogFile(fileName);
    }
 else {
      deleteCurrentLogFile(fileName + ""String_Node_Str"" + currentLog);
    }
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + currentLog,endPosition);
  }
  if (currentLog != CLEAN) {
    setActiveLog(CLEAN);
  }
}",0.4216675517790759
155154,"public BatchInserter(String storeDir,Map<String,String> stringParams){
  Map<Object,Object> params=getDefaultParams();
  for (  Map.Entry<String,String> entry : stringParams.entrySet()) {
    params.put(entry.getKey(),entry.getValue());
  }
  this.storeDir=storeDir;
  Map<Object,Object> config=getDefaultParams();
  String store=fixPath(storeDir);
  config.put(""String_Node_Str"",store);
  neoStore=new NeoStore(config);
  neoStore.makeStoreOk();
  PropertyIndexData[] indexes=getPropertyIndexStore().getPropertyIndexes(10000);
  indexHolder=new PropertyIndexHolder(indexes);
  RelationshipTypeData[] types=getRelationshipTypeStore().getRelationshipTypes();
  typeHolder=new RelationshipTypeHolder(types);
}","public BatchInserter(String storeDir,Map<String,String> stringParams){
  Map<Object,Object> params=getDefaultParams();
  for (  Map.Entry<String,String> entry : stringParams.entrySet()) {
    params.put(entry.getKey(),entry.getValue());
  }
  this.storeDir=storeDir;
  String store=fixPath(storeDir);
  params.put(""String_Node_Str"",store);
  neoStore=new NeoStore(params);
  neoStore.makeStoreOk();
  PropertyIndexData[] indexes=getPropertyIndexStore().getPropertyIndexes(10000);
  indexHolder=new PropertyIndexHolder(indexes);
  RelationshipTypeData[] types=getRelationshipTypeStore().getRelationshipTypes();
  typeHolder=new RelationshipTypeHolder(types);
}",0.9019033674963396
155155,"private void dumpStatus(){
  try {
    log.finest(""String_Node_Str"" + storeName + ""String_Node_Str""+ brickCount+ ""String_Node_Str""+ brickSize+ ""String_Node_Str""+ mappedMem+ ""String_Node_Str""+ fileChannel.size()+ ""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new StoreFailureException(""String_Node_Str"" + storeName,e);
  }
}","private void dumpStatus(){
  try {
    log.fine(""String_Node_Str"" + storeName + ""String_Node_Str""+ brickCount+ ""String_Node_Str""+ brickSize+ ""String_Node_Str""+ mappedMem+ ""String_Node_Str""+ fileChannel.size()+ ""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new StoreFailureException(""String_Node_Str"" + storeName,e);
  }
}",0.9970326409495548
155156,"private LockableWindow allocateNewWindow(long brick){
  if (!useDirect) {
    return new MappedPersistenceWindow(brick * brickSize / blockSize,blockSize,brickSize,fileChannel);
  }
  DirectPersistenceWindow dpw=new DirectPersistenceWindow(brick * brickSize / blockSize,blockSize,brickSize,fileChannel);
  dpw.readPosition();
  return dpw;
}","private LockableWindow allocateNewWindow(long brick){
  if (useMemoryMapped) {
    return new MappedPersistenceWindow(brick * brickSize / blockSize,blockSize,brickSize,fileChannel);
  }
  DirectPersistenceWindow dpw=new DirectPersistenceWindow(brick * brickSize / blockSize,blockSize,brickSize,fileChannel);
  dpw.readPosition();
  return dpw;
}",0.9722627737226276
155157,"private static void checkRelationshipList(int i,int node,int prev,int next,FileChannel fileChannel,ByteBuffer buffer) throws IOException {
  long fileSize=fileChannel.size();
  int recordSize=33;
  if (next != NO_NEXT_BLOCK) {
    if ((next + 1) * recordSize > fileSize || next < 0) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    buffer.clear();
    fileChannel.position((long)next * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse != RECORD_IN_USE + NOT_DIRECTED && inUse != RECORD_IN_USE + DIRECTED) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    int firstNode=buffer.getInt();
    int secondNode=buffer.getInt();
    buffer.getInt();
    int firstPrev=buffer.getInt();
    buffer.getInt();
    int secondPrev=buffer.getInt();
    buffer.getInt();
    if (firstNode != node && secondNode != node) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    if (firstNode == node && firstPrev != i) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    if (secondNode == node && secondPrev != i) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
  }
  if (prev != NO_PREV_BLOCK) {
    if ((prev + 1) * recordSize > fileSize || prev < 0) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
    buffer.clear();
    fileChannel.position((long)prev * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse != RECORD_IN_USE + NOT_DIRECTED && inUse != RECORD_IN_USE + DIRECTED) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
    int firstNode=buffer.getInt();
    int secondNode=buffer.getInt();
    buffer.getInt();
    buffer.getInt();
    int firstNext=buffer.getInt();
    buffer.getInt();
    int secondNext=buffer.getInt();
    if (firstNode != node && secondNode != node) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    if (firstNode == node && firstNext != i) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
    if (secondNode == node && secondNext != i) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
  }
}","private static void checkRelationshipList(int i,int node,int prev,int next,FileChannel fileChannel,ByteBuffer buffer) throws IOException {
  long fileSize=fileChannel.size();
  int recordSize=33;
  if (next != NO_NEXT_BLOCK) {
    if ((long)(next + 1) * recordSize > fileSize || next < 0) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    buffer.clear();
    fileChannel.position((long)next * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse != RECORD_IN_USE + NOT_DIRECTED && inUse != RECORD_IN_USE + DIRECTED) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    int firstNode=buffer.getInt();
    int secondNode=buffer.getInt();
    buffer.getInt();
    int firstPrev=buffer.getInt();
    buffer.getInt();
    int secondPrev=buffer.getInt();
    buffer.getInt();
    if (firstNode != node && secondNode != node) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    if (firstNode == node && firstPrev != i) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    if (secondNode == node && secondPrev != i) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
  }
  if (prev != NO_PREV_BLOCK) {
    if ((long)(prev + 1) * recordSize > fileSize || prev < 0) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
    buffer.clear();
    fileChannel.position((long)prev * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse != RECORD_IN_USE + NOT_DIRECTED && inUse != RECORD_IN_USE + DIRECTED) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
    int firstNode=buffer.getInt();
    int secondNode=buffer.getInt();
    buffer.getInt();
    buffer.getInt();
    int firstNext=buffer.getInt();
    buffer.getInt();
    int secondNext=buffer.getInt();
    if (firstNode != node && secondNode != node) {
      throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
    }
    if (firstNode == node && firstNext != i) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
    if (secondNode == node && secondNext != i) {
      throw new IOException(""String_Node_Str"" + prev + ""String_Node_Str""+ i);
    }
  }
}",0.9975031210986268
155158,"private static void checkRelationshipStore(String storeName,Set<Integer> propertySet,Set<Integer> relTypeSet,Set<Integer> nodeSet) throws IOException {
  File relStore=new File(storeName);
  if (!relStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  int recordSize=33;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(relStore,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  int i=0;
  int inUseCount=0;
  for (i=0; (i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE + NOT_DIRECTED || inUse == RECORD_IN_USE + DIRECTED) {
      inUseCount++;
      int firstNode=buffer.getInt();
      int secondNode=buffer.getInt();
      int type=buffer.getInt();
      int firstPrev=buffer.getInt();
      int firstNext=buffer.getInt();
      int secondPrev=buffer.getInt();
      int secondNext=buffer.getInt();
      int prop=buffer.getInt();
      if (firstPrev == NO_PREVIOUS_RELATIONSHIP && !nodeSet.remove(firstNode)) {
        throw new IOException(""String_Node_Str"" + firstNode + ""String_Node_Str""+ ""String_Node_Str""+ i);
      }
      if (secondPrev == NO_PREVIOUS_RELATIONSHIP && !nodeSet.remove(secondNode)) {
        throw new IOException(""String_Node_Str"" + secondNode + ""String_Node_Str""+ ""String_Node_Str""+ i);
      }
      checkRelationshipList(i,firstNode,firstPrev,firstNext,fileChannel,buffer);
      checkRelationshipList(i,secondNode,secondPrev,secondNext,fileChannel,buffer);
      if (prop != NO_NEXT_PROPERTY && !propertySet.remove(prop)) {
        throw new IOException(""String_Node_Str"" + prop + ""String_Node_Str""+ i);
      }
      if (!relTypeSet.contains(type)) {
        throw new IOException(""String_Node_Str"" + type + ""String_Node_Str""+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  fileChannel.close();
  System.out.println(""String_Node_Str"");
}","private static void checkRelationshipStore(String storeName,Set<Integer> propertySet,Set<Integer> relTypeSet,Set<Integer> nodeSet) throws IOException {
  File relStore=new File(storeName);
  if (!relStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  int recordSize=33;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(relStore,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  int i=0;
  int inUseCount=0;
  for (i=0; (long)(i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    if (fileChannel.read(buffer) == 0) {
      break;
    }
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE + NOT_DIRECTED || inUse == RECORD_IN_USE + DIRECTED) {
      inUseCount++;
      int firstNode=buffer.getInt();
      int secondNode=buffer.getInt();
      int type=buffer.getInt();
      int firstPrev=buffer.getInt();
      int firstNext=buffer.getInt();
      int secondPrev=buffer.getInt();
      int secondNext=buffer.getInt();
      int prop=buffer.getInt();
      if (firstPrev == NO_PREVIOUS_RELATIONSHIP && !nodeSet.remove(firstNode)) {
        throw new IOException(""String_Node_Str"" + firstNode + ""String_Node_Str""+ ""String_Node_Str""+ i);
      }
      if (secondPrev == NO_PREVIOUS_RELATIONSHIP && !nodeSet.remove(secondNode)) {
        throw new IOException(""String_Node_Str"" + secondNode + ""String_Node_Str""+ ""String_Node_Str""+ i);
      }
      checkRelationshipList(i,firstNode,firstPrev,firstNext,fileChannel,buffer);
      checkRelationshipList(i,secondNode,secondPrev,secondNext,fileChannel,buffer);
      if (prop != NO_NEXT_PROPERTY && !propertySet.remove(prop)) {
        throw new IOException(""String_Node_Str"" + prop + ""String_Node_Str""+ i);
      }
      if (!relTypeSet.contains(type)) {
        throw new IOException(""String_Node_Str"" + type + ""String_Node_Str""+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  fileChannel.close();
  System.out.println(""String_Node_Str"");
}",0.9926866820631256
155159,"private static Set<Integer> checkPropertyIndexStore(String storeName) throws IOException {
  File indexStore=new File(storeName);
  if (!indexStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  Set<Integer> keyStartBlocks=checkDynamicStore(storeName + ""String_Node_Str"");
  int recordSize=9;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      buffer.getInt();
      int key=buffer.getInt();
      if (!keyStartBlocks.remove(key)) {
        throw new IOException(""String_Node_Str"" + key + ""String_Node_Str""+ i);
      }
      startBlocks.add(i);
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  if (!keyStartBlocks.isEmpty()) {
    System.out.println(""String_Node_Str"" + keyStartBlocks.size());
  }
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return startBlocks;
}","private static Set<Integer> checkPropertyIndexStore(String storeName) throws IOException {
  File indexStore=new File(storeName);
  if (!indexStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  Set<Integer> keyStartBlocks=checkDynamicStore(storeName + ""String_Node_Str"");
  int recordSize=9;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (long)(i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    if (fileChannel.read(buffer) == 0) {
      break;
    }
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      buffer.getInt();
      int key=buffer.getInt();
      if (!keyStartBlocks.remove(key)) {
        throw new IOException(""String_Node_Str"" + key + ""String_Node_Str""+ i);
      }
      startBlocks.add(i);
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  if (!keyStartBlocks.isEmpty()) {
    System.out.println(""String_Node_Str"" + keyStartBlocks.size());
  }
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return startBlocks;
}",0.9896739130434784
155160,"private static Set<Integer> checkNodeStore(String storeName,Set<Integer> propertySet) throws IOException {
  File nodeStore=new File(storeName);
  if (!nodeStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  int recordSize=9;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> nodeSet=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      int nextRel=buffer.getInt();
      int nextProp=buffer.getInt();
      if (nextRel != NO_NEXT_RELATIONSHIP) {
        nodeSet.add(i);
      }
      if (nextProp != NO_NEXT_PROPERTY && !propertySet.remove(nextProp)) {
        throw new IOException(""String_Node_Str"" + nextProp + ""String_Node_Str""+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return nodeSet;
}","private static Set<Integer> checkNodeStore(String storeName,Set<Integer> propertySet) throws IOException {
  File nodeStore=new File(storeName);
  if (!nodeStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  int recordSize=9;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> nodeSet=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (long)(i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    if (fileChannel.read(buffer) == 0) {
      break;
    }
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      int nextRel=buffer.getInt();
      int nextProp=buffer.getInt();
      if (nextRel != NO_NEXT_RELATIONSHIP) {
        nodeSet.add(i);
      }
      if (nextProp != NO_NEXT_PROPERTY && !propertySet.remove(nextProp)) {
        throw new IOException(""String_Node_Str"" + nextProp + ""String_Node_Str""+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return nodeSet;
}",0.989247311827957
155161,"private static Set<Integer> checkDynamicStore(String storeName) throws IOException {
  File dynamicStore=new File(storeName);
  if (!dynamicStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  System.out.print(storeName);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  ByteBuffer buffer=ByteBuffer.allocate(4);
  fileChannel.position(0);
  if (fileChannel.read(buffer) != 4) {
    throw new IOException(""String_Node_Str"");
  }
  buffer.flip();
  int blockSize=buffer.getInt();
  int dataSize=blockSize - BLOCK_HEADER_SIZE;
  long fileSize=fileChannel.size();
  buffer=ByteBuffer.allocate(BLOCK_HEADER_SIZE);
  ByteBuffer inUseBuffer=ByteBuffer.allocate(1);
  long dot=fileSize / blockSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=1; (i + 1) * blockSize <= fileSize; i++) {
    inUseBuffer.clear();
    fileChannel.position((long)i * blockSize);
    fileChannel.read(inUseBuffer);
    inUseBuffer.flip();
    byte inUse=inUseBuffer.get();
    if (inUse == BLOCK_IN_USE) {
      inUseCount++;
      buffer.clear();
      fileChannel.read(buffer);
      buffer.flip();
      int previous=buffer.getInt();
      int bytes=buffer.getInt();
      int next=buffer.getInt();
      if (next != NO_NEXT_BLOCK && bytes != dataSize || bytes > dataSize || bytes < 0) {
        throw new IOException(""String_Node_Str"" + bytes + ""String_Node_Str""+ i+ ""String_Node_Str""+ storeName);
      }
 else       if (next != NO_NEXT_BLOCK) {
        if ((next + 1) * blockSize > fileSize || next < 0) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)next * blockSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != BLOCK_IN_USE) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        int prev=buffer.getInt();
        if (prev != i) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
      }
      if (previous == NO_PREV_BLOCK) {
        startBlocks.add(i);
      }
 else {
        if ((previous + 1) * blockSize > fileSize || previous < 0) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)previous * blockSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != BLOCK_IN_USE) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.getInt();
        buffer.getInt();
        int nxt=buffer.getInt();
        if (nxt != i) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
      }
    }
 else     if (inUse != BLOCK_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return startBlocks;
}","private static Set<Integer> checkDynamicStore(String storeName) throws IOException {
  File dynamicStore=new File(storeName);
  if (!dynamicStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  System.out.print(storeName);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  ByteBuffer buffer=ByteBuffer.allocate(4);
  fileChannel.position(0);
  if (fileChannel.read(buffer) != 4) {
    throw new IOException(""String_Node_Str"");
  }
  buffer.flip();
  int blockSize=buffer.getInt();
  int dataSize=blockSize - BLOCK_HEADER_SIZE;
  long fileSize=fileChannel.size();
  buffer=ByteBuffer.allocate(BLOCK_HEADER_SIZE);
  ByteBuffer inUseBuffer=ByteBuffer.allocate(1);
  long dot=fileSize / blockSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=1; (long)(i + 1) * blockSize <= fileSize; i++) {
    inUseBuffer.clear();
    fileChannel.position((long)i * blockSize);
    if (fileChannel.read(inUseBuffer) == 0) {
      break;
    }
    inUseBuffer.flip();
    byte inUse=inUseBuffer.get();
    if (inUse == BLOCK_IN_USE) {
      inUseCount++;
      buffer.clear();
      fileChannel.read(buffer);
      buffer.flip();
      int previous=buffer.getInt();
      int bytes=buffer.getInt();
      int next=buffer.getInt();
      if (next != NO_NEXT_BLOCK && bytes != dataSize || bytes > dataSize || bytes < 0) {
        throw new IOException(""String_Node_Str"" + bytes + ""String_Node_Str""+ i+ ""String_Node_Str""+ storeName);
      }
 else       if (next != NO_NEXT_BLOCK) {
        if ((long)(next + 1) * blockSize > fileSize || next < 0) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)next * blockSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != BLOCK_IN_USE) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        int prev=buffer.getInt();
        if (prev != i) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
      }
      if (previous == NO_PREV_BLOCK) {
        startBlocks.add(i);
      }
 else {
        if ((long)(previous + 1) * blockSize > fileSize || previous < 0) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)previous * blockSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != BLOCK_IN_USE) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.getInt();
        buffer.getInt();
        int nxt=buffer.getInt();
        if (nxt != i) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
      }
    }
 else     if (inUse != BLOCK_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return startBlocks;
}",0.9927849927849928
155162,"private static Set<Integer> checkPropertyStore(String storeName,Set<Integer> propertyIndex) throws IOException {
  File propStore=new File(storeName);
  if (!propStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  Set<Integer> arrayStartBlocks=checkDynamicStore(storeName + ""String_Node_Str"");
  Set<Integer> stringStartBlocks=checkDynamicStore(storeName + ""String_Node_Str"");
  int recordSize=25;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    fileChannel.read(buffer);
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      int type=buffer.getInt();
      int key=buffer.getInt();
      long prop=buffer.getLong();
      int previous=buffer.getInt();
      int next=buffer.getInt();
      if (next != NO_NEXT_BLOCK) {
        if ((next + 1) * recordSize > fileSize || next < 0) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)next * recordSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != RECORD_IN_USE) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        buffer.getInt();
        buffer.getInt();
        buffer.getLong();
        int prev=buffer.getInt();
        if (prev != i) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
      }
      if (previous == NO_PREV_BLOCK) {
        startBlocks.add(i);
      }
 else {
        if ((previous + 1) * recordSize > fileSize || previous < 0) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)previous * recordSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != RECORD_IN_USE) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.getInt();
        buffer.getInt();
        buffer.getLong();
        buffer.getInt();
        int nxt=buffer.getInt();
        if (nxt != i) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
      }
      if (type < 1 || type > 10) {
        throw new IOException(""String_Node_Str"" + type + ""String_Node_Str""+ i);
      }
      if (!propertyIndex.contains(key)) {
        throw new IOException(""String_Node_Str"" + key + ""String_Node_Str""+ i);
      }
      if (type == 9 && !arrayStartBlocks.remove((int)prop)) {
        throw new IOException(""String_Node_Str"" + prop + ""String_Node_Str""+ i);
      }
      if (type == 2 && !stringStartBlocks.remove((int)prop)) {
        throw new IOException(""String_Node_Str"" + prop + ""String_Node_Str""+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  if (!stringStartBlocks.isEmpty()) {
    System.out.println(""String_Node_Str"" + stringStartBlocks.size());
  }
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return startBlocks;
}","private static Set<Integer> checkPropertyStore(String storeName,Set<Integer> propertyIndex) throws IOException {
  File propStore=new File(storeName);
  if (!propStore.exists()) {
    throw new IOException(""String_Node_Str"" + storeName);
  }
  File idGenerator=new File(storeName + ""String_Node_Str"");
  if (idGenerator.exists()) {
    boolean success=idGenerator.delete();
    assert success;
  }
  Set<Integer> arrayStartBlocks=checkDynamicStore(storeName + ""String_Node_Str"");
  Set<Integer> stringStartBlocks=checkDynamicStore(storeName + ""String_Node_Str"");
  int recordSize=25;
  System.out.print(storeName);
  ByteBuffer buffer=ByteBuffer.allocate(recordSize);
  FileChannel fileChannel=new RandomAccessFile(storeName,""String_Node_Str"").getChannel();
  long fileSize=fileChannel.size();
  fileChannel.position(0);
  long dot=fileSize / recordSize / 20;
  Set<Integer> startBlocks=new java.util.HashSet<Integer>();
  int i=0;
  int inUseCount=0;
  for (i=0; (long)(i + 1) * recordSize <= fileSize; i++) {
    buffer.clear();
    fileChannel.position((long)i * recordSize);
    if (fileChannel.read(buffer) == 0) {
      break;
    }
    buffer.flip();
    byte inUse=buffer.get();
    if (inUse == RECORD_IN_USE) {
      inUseCount++;
      int type=buffer.getInt();
      int key=buffer.getInt();
      long prop=buffer.getLong();
      int previous=buffer.getInt();
      int next=buffer.getInt();
      if (next != NO_NEXT_BLOCK) {
        if ((next + 1) * recordSize > fileSize || next < 0) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)next * recordSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != RECORD_IN_USE) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
        buffer.getInt();
        buffer.getInt();
        buffer.getLong();
        int prev=buffer.getInt();
        if (prev != i) {
          throw new IOException(""String_Node_Str"" + next + ""String_Node_Str""+ i);
        }
      }
      if (previous == NO_PREV_BLOCK) {
        startBlocks.add(i);
      }
 else {
        if ((long)(previous + 1) * recordSize > fileSize || previous < 0) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.clear();
        fileChannel.position((long)previous * recordSize);
        fileChannel.read(buffer);
        buffer.flip();
        if (buffer.get() != RECORD_IN_USE) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
        buffer.getInt();
        buffer.getInt();
        buffer.getLong();
        buffer.getInt();
        int nxt=buffer.getInt();
        if (nxt != i) {
          throw new IOException(""String_Node_Str"" + previous + ""String_Node_Str""+ i);
        }
      }
      if (type < 1 || type > 10) {
        throw new IOException(""String_Node_Str"" + type + ""String_Node_Str""+ i);
      }
      if (!propertyIndex.contains(key)) {
        throw new IOException(""String_Node_Str"" + key + ""String_Node_Str""+ i);
      }
      if (type == 9 && !arrayStartBlocks.remove((int)prop)) {
        throw new IOException(""String_Node_Str"" + prop + ""String_Node_Str""+ i);
      }
      if (type == 2 && !stringStartBlocks.remove((int)prop)) {
        throw new IOException(""String_Node_Str"" + prop + ""String_Node_Str""+ i);
      }
    }
 else     if (inUse != RECORD_NOT_IN_USE) {
      System.out.println(""String_Node_Str"" + i);
      System.out.println(""String_Node_Str"" + inUse);
    }
    if (dot != 0 && i % dot == 0) {
      System.out.print(""String_Node_Str"");
    }
  }
  System.out.print(""String_Node_Str"" + i + ""String_Node_Str""+ inUseCount);
  if (!stringStartBlocks.isEmpty()) {
    System.out.println(""String_Node_Str"" + stringStartBlocks.size());
  }
  fileChannel.close();
  System.out.println(""String_Node_Str"");
  return startBlocks;
}",0.9944360141628732
155163,"private Map<String,Object> getPropertyChain(int propertyId){
  PropertyStore propStore=getPropertyStore();
  PropertyRecord propertyRecord=propStore.getRecord(propertyId);
  int nextProperty=propertyRecord.getNextProp();
  Map<String,Object> properties=new HashMap<String,Object>();
  do {
    propStore.makeHeavy(propertyRecord);
    String key=indexHolder.getStringKey(propertyRecord.getKeyIndexId());
    Object value=propStore.getValue(propertyRecord);
    properties.put(key,value);
    if (nextProperty != Record.NO_NEXT_PROPERTY.intValue()) {
      propertyRecord=propStore.getRecord(propertyRecord.getNextProp());
    }
  }
 while (nextProperty != Record.NO_NEXT_PROPERTY.intValue());
  return properties;
}","private Map<String,Object> getPropertyChain(int propertyId){
  PropertyStore propStore=getPropertyStore();
  PropertyRecord propertyRecord=propStore.getRecord(propertyId);
  int nextProperty=-1;
  Map<String,Object> properties=new HashMap<String,Object>();
  do {
    nextProperty=propertyRecord.getNextProp();
    propStore.makeHeavy(propertyRecord);
    String key=indexHolder.getStringKey(propertyRecord.getKeyIndexId());
    Object value=propStore.getValue(propertyRecord);
    properties.put(key,value);
    if (nextProperty != Record.NO_NEXT_PROPERTY.intValue()) {
      propertyRecord=propStore.getRecord(propertyRecord.getNextProp());
    }
  }
 while (nextProperty != Record.NO_NEXT_PROPERTY.intValue());
  return properties;
}",0.9469331495520332
155164,"public static IntArray composeNew(IntArray src,IntArray add,IntArray remove){
  if (remove == null) {
    if (src == null) {
      return add;
    }
    if (add != null) {
      IntArray newArray=new IntArray(add.length() + src.length());
      newArray.addAll(src);
      newArray.addAll(add);
      return newArray;
    }
    return src;
  }
 else {
    if (src == null && add == null) {
      return null;
    }
    int newLength=0;
    if (add != null) {
      newLength+=add.length();
    }
    if (src != null) {
      newLength+=src.length();
    }
    IntArray newArray=new IntArray(newLength);
    Set<Integer> set=new HashSet<Integer>(remove.length() + 1,1.0f);
    for (int i=0; i < remove.length(); i++) {
      set.add(remove.get(i));
    }
    newArray.addAll(src);
    for (int i=0; i < newArray.length(); i++) {
      int value=newArray.get(i);
      if (set.contains(value)) {
        boolean swapSuccessful=false;
        for (int j=newArray.length() - 1; j > i + 1; j--) {
          int backValue=newArray.get(j);
          newArray.arrayCount--;
          if (!set.contains(backValue)) {
            newArray.getArray()[i]=backValue;
            swapSuccessful=true;
            break;
          }
        }
        if (!swapSuccessful) {
          newArray.arrayCount--;
        }
      }
    }
    if (add != null) {
      for (int i=0; i < add.length(); i++) {
        int value=add.get(i);
        if (!set.contains(value)) {
          newArray.add(value);
        }
      }
    }
    return newArray;
  }
}","public static IntArray composeNew(IntArray src,IntArray add,IntArray remove){
  if (remove == null) {
    if (src == null) {
      return add;
    }
    if (add != null) {
      IntArray newArray=new IntArray(add.length() + src.length());
      newArray.addAll(src);
      newArray.addAll(add);
      return newArray;
    }
    return src;
  }
 else {
    if (src == null && add == null) {
      return null;
    }
    int newLength=0;
    if (add != null) {
      newLength+=add.length();
    }
    if (src != null) {
      newLength+=src.length();
    }
    IntArray newArray=new IntArray(newLength);
    Set<Integer> set=new HashSet<Integer>(remove.length() + 1,1.0f);
    for (int i=0; i < remove.length(); i++) {
      set.add(remove.get(i));
    }
    newArray.addAll(src);
    for (int i=0; i < newArray.length(); i++) {
      int value=newArray.get(i);
      if (set.contains(value)) {
        boolean swapSuccessful=false;
        for (int j=newArray.length() - 1; j >= i + 1; j--) {
          int backValue=newArray.get(j);
          newArray.arrayCount--;
          if (!set.contains(backValue)) {
            newArray.getArray()[i]=backValue;
            swapSuccessful=true;
            break;
          }
        }
        if (!swapSuccessful) {
          newArray.arrayCount--;
        }
      }
    }
    if (add != null) {
      for (int i=0; i < add.length(); i++) {
        int value=add.get(i);
        if (!set.contains(value)) {
          newArray.add(value);
        }
      }
    }
    return newArray;
  }
}",0.9996735226901732
155165,"public void testSimple3(){
  Node node1=getNeo().createNode();
  Node node2=getNeo().createNode();
  for (int i=0; i < 1; i++) {
    node1.createRelationshipTo(node2,MyRelTypes.TEST);
    node1.createRelationshipTo(node2,MyRelTypes.TEST_TRAVERSAL);
    node1.createRelationshipTo(node2,MyRelTypes.TEST2);
  }
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  newTransaction();
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  node1.getRelationships(MyRelTypes.TEST,Direction.OUTGOING).iterator().next().delete();
  node1.getRelationships(MyRelTypes.TEST_TRAVERSAL,Direction.OUTGOING).iterator().next().delete();
  node1.getRelationships(MyRelTypes.TEST2,Direction.OUTGOING).iterator().next().delete();
  node1.createRelationshipTo(node2,MyRelTypes.TEST);
  node1.createRelationshipTo(node2,MyRelTypes.TEST_TRAVERSAL);
  node1.createRelationshipTo(node2,MyRelTypes.TEST2);
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  newTransaction();
  Node node3=getNeo().createNode();
  Node node4=getNeo().createNode();
  for (int i=0; i < 10000; i++) {
    node3.createRelationshipTo(node4,MyRelTypes.TEST);
  }
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  for (  Relationship rel : node1.getRelationships()) {
    rel.delete();
  }
  node1.delete();
  node2.delete();
}","public void testSimple3(){
  Node node1=getNeo().createNode();
  Node node2=getNeo().createNode();
  for (int i=0; i < 1; i++) {
    node1.createRelationshipTo(node2,MyRelTypes.TEST);
    node1.createRelationshipTo(node2,MyRelTypes.TEST_TRAVERSAL);
    node1.createRelationshipTo(node2,MyRelTypes.TEST2);
  }
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  newTransaction();
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  node1.getRelationships(MyRelTypes.TEST,Direction.OUTGOING).iterator().next().delete();
  node1.getRelationships(MyRelTypes.TEST_TRAVERSAL,Direction.OUTGOING).iterator().next().delete();
  node1.getRelationships(MyRelTypes.TEST2,Direction.OUTGOING).iterator().next().delete();
  node1.createRelationshipTo(node2,MyRelTypes.TEST);
  node1.createRelationshipTo(node2,MyRelTypes.TEST_TRAVERSAL);
  node1.createRelationshipTo(node2,MyRelTypes.TEST2);
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  newTransaction();
  allGetRelationshipMethods2(node1,Direction.OUTGOING);
  allGetRelationshipMethods2(node2,Direction.INCOMING);
  for (  Relationship rel : node1.getRelationships()) {
    rel.delete();
  }
  node1.delete();
  node2.delete();
}",0.8013864818024263
155166,"public RelationshipData[] nodeGetRelationships(int nodeId){
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId);
  }
 else {
    if (!nodeRecord.inUse()) {
      throw new StoreFailureException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
  }
  int nextRel=nodeRecord.getNextRel();
  List<RelationshipData> rels=new ArrayList<RelationshipData>();
  while (nextRel != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    RelationshipRecord relRecord=getRelationshipRecord(nextRel);
    if (relRecord == null) {
      relRecord=getRelationshipStore().getRecord(nextRel);
    }
    int firstNode=relRecord.getFirstNode();
    int secondNode=relRecord.getSecondNode();
    rels.add(new RelationshipData(nextRel,firstNode,secondNode,relRecord.getType()));
    if (firstNode == nodeId) {
      nextRel=relRecord.getFirstNextRel();
    }
 else     if (secondNode == nodeId) {
      nextRel=relRecord.getSecondNextRel();
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return rels.toArray(new RelationshipData[rels.size()]);
}","public RelationshipData[] nodeGetRelationships(int nodeId){
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId);
  }
 else {
    if (!nodeRecord.inUse()) {
      throw new StoreFailureException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
  }
  int nextRel=nodeRecord.getNextRel();
  List<RelationshipData> rels=new ArrayList<RelationshipData>();
  while (nextRel != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    RelationshipRecord relRecord=getRelationshipRecord(nextRel);
    if (relRecord == null) {
      relRecord=getRelationshipStore().getRecord(nextRel);
    }
    int firstNode=relRecord.getFirstNode();
    int secondNode=relRecord.getSecondNode();
    if (!relRecord.isCreated()) {
      rels.add(new RelationshipData(nextRel,firstNode,secondNode,relRecord.getType()));
    }
    if (firstNode == nodeId) {
      nextRel=relRecord.getFirstNextRel();
    }
 else     if (secondNode == nodeId) {
      nextRel=relRecord.getSecondNextRel();
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  return rels.toArray(new RelationshipData[rels.size()]);
}",0.9816433566433568
155167,"public PropertyData[] relGetProperties(int relId){
  RelationshipRecord relRecord=getRelationshipRecord(relId);
  if (relRecord == null) {
    relRecord=getRelationshipStore().getRecord(relId);
  }
  if (!relRecord.inUse()) {
    throw new StoreFailureException(""String_Node_Str"" + relId + ""String_Node_Str"");
  }
  int nextProp=relRecord.getNextProp();
  List<PropertyData> properties=new ArrayList<PropertyData>();
  while (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord propRecord=getPropertyRecord(nextProp);
    if (propRecord == null) {
      propRecord=getPropertyStore().getLightRecord(nextProp);
    }
    properties.add(new PropertyData(propRecord.getId(),propRecord.getKeyIndexId(),propertyGetValueOrNull(propRecord)));
    nextProp=propRecord.getNextProp();
  }
  return properties.toArray(new PropertyData[properties.size()]);
}","public PropertyData[] relGetProperties(int relId){
  RelationshipRecord relRecord=getRelationshipRecord(relId);
  if (relRecord == null) {
    relRecord=getRelationshipStore().getRecord(relId);
  }
  if (!relRecord.inUse()) {
    throw new StoreFailureException(""String_Node_Str"" + relId + ""String_Node_Str"");
  }
  int nextProp=relRecord.getNextProp();
  List<PropertyData> properties=new ArrayList<PropertyData>();
  while (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord propRecord=getPropertyRecord(nextProp);
    if (propRecord == null) {
      propRecord=getPropertyStore().getLightRecord(nextProp);
    }
    if (!propRecord.isCreated()) {
      properties.add(new PropertyData(propRecord.getId(),propRecord.getKeyIndexId(),propertyGetValueOrNull(propRecord)));
    }
    nextProp=propRecord.getNextProp();
  }
  return properties.toArray(new PropertyData[properties.size()]);
}",0.9756924816280385
155168,"public PropertyData[] nodeGetProperties(int nodeId){
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId);
  }
 else   if (!nodeRecord.inUse()) {
    throw new StoreFailureException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
  }
  int nextProp=nodeRecord.getNextProp();
  List<PropertyData> properties=new ArrayList<PropertyData>();
  while (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord propRecord=getPropertyRecord(nextProp);
    if (propRecord == null) {
      propRecord=getPropertyStore().getLightRecord(nextProp);
    }
    properties.add(new PropertyData(propRecord.getId(),propRecord.getKeyIndexId(),propertyGetValueOrNull(propRecord)));
    nextProp=propRecord.getNextProp();
  }
  return properties.toArray(new PropertyData[properties.size()]);
}","public PropertyData[] nodeGetProperties(int nodeId){
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId);
  }
 else   if (!nodeRecord.inUse()) {
    throw new StoreFailureException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
  }
  int nextProp=nodeRecord.getNextProp();
  List<PropertyData> properties=new ArrayList<PropertyData>();
  while (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord propRecord=getPropertyRecord(nextProp);
    if (propRecord == null) {
      propRecord=getPropertyStore().getLightRecord(nextProp);
    }
    if (!propRecord.isCreated()) {
      properties.add(new PropertyData(propRecord.getId(),propRecord.getKeyIndexId(),propertyGetValueOrNull(propRecord)));
    }
    nextProp=propRecord.getNextProp();
  }
  return properties.toArray(new PropertyData[properties.size()]);
}",0.975470621791215
155169,"public void testCreateNeoStore(){
  try {
    initializeStores();
    startTx();
    int node1=ds.nextId(Node.class);
    nStore.createNode(node1);
    int node2=ds.nextId(Node.class);
    nStore.createNode(node2);
    int n1prop1=pStore.nextId();
    int n1prop2=pStore.nextId();
    int n1prop3=pStore.nextId();
    nStore.addProperty(node1,n1prop1,index(""String_Node_Str""),""String_Node_Str"");
    nStore.addProperty(node1,n1prop2,index(""String_Node_Str""),new Integer(1));
    nStore.addProperty(node1,n1prop3,index(""String_Node_Str""),new Boolean(true));
    int n2prop1=pStore.nextId();
    int n2prop2=pStore.nextId();
    int n2prop3=pStore.nextId();
    nStore.addProperty(node2,n2prop1,index(""String_Node_Str""),""String_Node_Str"");
    nStore.addProperty(node2,n2prop2,index(""String_Node_Str""),new Integer(2));
    nStore.addProperty(node2,n2prop3,index(""String_Node_Str""),new Boolean(false));
    int relType1=ds.nextId(RelationshipType.class);
    relTypeStore.addRelationshipType(relType1,""String_Node_Str"");
    int relType2=ds.nextId(RelationshipType.class);
    relTypeStore.addRelationshipType(relType2,""String_Node_Str"");
    int rel1=ds.nextId(Relationship.class);
    rStore.createRelationship(rel1,node1,node2,relType1);
    int rel2=ds.nextId(Relationship.class);
    rStore.createRelationship(rel2,node2,node1,relType2);
    int r1prop1=pStore.nextId();
    int r1prop2=pStore.nextId();
    int r1prop3=pStore.nextId();
    rStore.addProperty(rel1,r1prop1,index(""String_Node_Str""),""String_Node_Str"");
    rStore.addProperty(rel1,r1prop2,index(""String_Node_Str""),new Integer(1));
    rStore.addProperty(rel1,r1prop3,index(""String_Node_Str""),new Boolean(true));
    int r2prop1=pStore.nextId();
    int r2prop2=pStore.nextId();
    int r2prop3=pStore.nextId();
    rStore.addProperty(rel2,r2prop1,index(""String_Node_Str""),""String_Node_Str"");
    rStore.addProperty(rel2,r2prop2,index(""String_Node_Str""),new Integer(2));
    rStore.addProperty(rel2,r2prop3,index(""String_Node_Str""),new Boolean(false));
    commitTx();
    ds.close();
    initializeStores();
    startTx();
    validateNodeRel1(node1,n1prop1,n1prop2,n1prop3,rel1,rel2,relType1,relType2);
    validateNodeRel2(node2,n2prop1,n2prop2,n2prop3,rel1,rel2,relType1,relType2);
    validateRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
    validateRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
    validateRelTypes(relType1,relType2);
    validateRelTypes(relType1,relType2);
    commitTx();
    ds.close();
    initializeStores();
    startTx();
    deleteRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
    deleteRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
    deleteNode1(node1,n1prop1,n1prop2,n1prop3);
    deleteNode2(node2,n2prop1,n2prop2,n2prop3);
    commitTx();
    ds.close();
    initializeStores();
    startTx();
    assertEquals(false,nStore.loadLightNode(node1));
    assertEquals(false,nStore.loadLightNode(node2));
    testGetRels(new int[]{rel1,rel2});
    int nodeIds[]=new int[10];
    for (int i=0; i < 3; i++) {
      nodeIds[i]=ds.nextId(Node.class);
      nStore.createNode(nodeIds[i]);
      nStore.addProperty(nodeIds[i],pStore.nextId(),index(""String_Node_Str""),new Integer(10 - i));
    }
    for (int i=0; i < 2; i++) {
      rStore.createRelationship(ds.nextId(Relationship.class),nodeIds[i],nodeIds[i + 1],relType1);
    }
    for (int i=0; i < 3; i++) {
      RelationshipData rels[]=nStore.getRelationships(nodeIds[i]);
      for (int j=0; j < rels.length; j++) {
        rStore.deleteRelationship(rels[j].getId());
      }
      nStore.deleteNode(nodeIds[i]);
    }
    commitTx();
    ds.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + e);
  }
}","public void testCreateNeoStore(){
  try {
    initializeStores();
    startTx();
    int node1=ds.nextId(Node.class);
    nStore.createNode(node1);
    int node2=ds.nextId(Node.class);
    nStore.createNode(node2);
    int n1prop1=pStore.nextId();
    int n1prop2=pStore.nextId();
    int n1prop3=pStore.nextId();
    nStore.addProperty(node1,n1prop1,index(""String_Node_Str""),""String_Node_Str"");
    nStore.addProperty(node1,n1prop2,index(""String_Node_Str""),new Integer(1));
    nStore.addProperty(node1,n1prop3,index(""String_Node_Str""),new Boolean(true));
    int n2prop1=pStore.nextId();
    int n2prop2=pStore.nextId();
    int n2prop3=pStore.nextId();
    nStore.addProperty(node2,n2prop1,index(""String_Node_Str""),""String_Node_Str"");
    nStore.addProperty(node2,n2prop2,index(""String_Node_Str""),new Integer(2));
    nStore.addProperty(node2,n2prop3,index(""String_Node_Str""),new Boolean(false));
    int relType1=ds.nextId(RelationshipType.class);
    relTypeStore.addRelationshipType(relType1,""String_Node_Str"");
    int relType2=ds.nextId(RelationshipType.class);
    relTypeStore.addRelationshipType(relType2,""String_Node_Str"");
    int rel1=ds.nextId(Relationship.class);
    rStore.createRelationship(rel1,node1,node2,relType1);
    int rel2=ds.nextId(Relationship.class);
    rStore.createRelationship(rel2,node2,node1,relType2);
    int r1prop1=pStore.nextId();
    int r1prop2=pStore.nextId();
    int r1prop3=pStore.nextId();
    rStore.addProperty(rel1,r1prop1,index(""String_Node_Str""),""String_Node_Str"");
    rStore.addProperty(rel1,r1prop2,index(""String_Node_Str""),new Integer(1));
    rStore.addProperty(rel1,r1prop3,index(""String_Node_Str""),new Boolean(true));
    int r2prop1=pStore.nextId();
    int r2prop2=pStore.nextId();
    int r2prop3=pStore.nextId();
    rStore.addProperty(rel2,r2prop1,index(""String_Node_Str""),""String_Node_Str"");
    rStore.addProperty(rel2,r2prop2,index(""String_Node_Str""),new Integer(2));
    rStore.addProperty(rel2,r2prop3,index(""String_Node_Str""),new Boolean(false));
    commitTx();
    ds.close();
    initializeStores();
    startTx();
    validateNodeRel1(node1,n1prop1,n1prop2,n1prop3,rel1,rel2,relType1,relType2);
    validateNodeRel2(node2,n2prop1,n2prop2,n2prop3,rel1,rel2,relType1,relType2);
    validateRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
    validateRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
    validateRelTypes(relType1,relType2);
    validateRelTypes(relType1,relType2);
    commitTx();
    ds.close();
    initializeStores();
    startTx();
    deleteRel1(rel1,r1prop1,r1prop2,r1prop3,node1,node2,relType1);
    deleteRel2(rel2,r2prop1,r2prop2,r2prop3,node2,node1,relType2);
    deleteNode1(node1,n1prop1,n1prop2,n1prop3);
    deleteNode2(node2,n2prop1,n2prop2,n2prop3);
    commitTx();
    ds.close();
    initializeStores();
    startTx();
    assertEquals(false,nStore.loadLightNode(node1));
    assertEquals(false,nStore.loadLightNode(node2));
    testGetRels(new int[]{rel1,rel2});
    int nodeIds[]=new int[10];
    for (int i=0; i < 3; i++) {
      nodeIds[i]=ds.nextId(Node.class);
      nStore.createNode(nodeIds[i]);
      nStore.addProperty(nodeIds[i],pStore.nextId(),index(""String_Node_Str""),new Integer(10 - i));
    }
    for (int i=0; i < 2; i++) {
      int id=ds.nextId(Relationship.class);
      rStore.createRelationship(id,nodeIds[i],nodeIds[i + 1],relType1);
      rStore.deleteRelationship(id);
    }
    for (int i=0; i < 3; i++) {
      RelationshipData rels[]=nStore.getRelationships(nodeIds[i]);
      for (int j=0; j < rels.length; j++) {
        rStore.deleteRelationship(rels[j].getId());
      }
      nStore.deleteNode(nodeIds[i]);
    }
    commitTx();
    ds.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + e);
  }
}",0.9779723991507432
155170,"public String readLine(){
  try {
    grabAvailableCommands();
    return (String)consoleReader.getClass().getMethod(""String_Node_Str"").invoke(consoleReader);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
}","public String readLine(){
  try {
    grabAvailableCommands();
    successfulGrabAvailableCommands=true;
  }
 catch (  Exception e) {
    if (successfulGrabAvailableCommands) {
      System.err.println(""String_Node_Str"" + e.toString());
      successfulGrabAvailableCommands=false;
    }
  }
  try {
    return (String)consoleReader.getClass().getMethod(""String_Node_Str"").invoke(consoleReader);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.4099216710182767
155171,"/** 
 * @return the next line read from the console (user input).
 */
public String readLine(){
  try {
    StringBuffer text=new StringBuffer();
    while (true) {
      int charRead=System.in.read();
      if (charRead == '\r' || charRead == '\n') {
        System.in.skip(System.in.available());
        break;
      }
      text.append((char)charRead);
    }
    return text.toString();
  }
 catch (  java.io.IOException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * @return the next line read from the console (user input).
 */
public String readLine(){
  try {
    if (consoleReader == null) {
      consoleReader=new BufferedReader(new InputStreamReader(System.in));
    }
    return consoleReader.readLine();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.5031446540880503
155172,"public void recoveryComplete(){
  logger.info(""String_Node_Str"" + ""String_Node_Str"");
  logger.info(""String_Node_Str"" + ""String_Node_Str"");
  neoStore.makeStoreOk();
  logger.info(""String_Node_Str"");
}","public void recoveryComplete(){
  logger.fine(""String_Node_Str"" + ""String_Node_Str"");
  logger.fine(""String_Node_Str"" + ""String_Node_Str"");
  neoStore.makeStoreOk();
  logger.fine(""String_Node_Str"");
}",0.9552238805970148
155173,"/** 
 * Creates a data source with minimum (no memory mapped) configuration.
 * @param neoStoreFileName The file name of the neo store
 * @param logicalLogPath The file name of the logical log
 * @throws IOException If unable to open store
 */
public NeoStoreXaDataSource(String neoStoreFileName,String logicalLogPath,LockManager lockManager,LockReleaser lockReleaser) throws IOException, InstantiationException {
  super(null);
  this.lockManager=lockManager;
  this.lockReleaser=lockReleaser;
  storeDir=logicalLogPath;
  neoStore=new NeoStore(neoStoreFileName);
  xaContainer=XaContainer.create(logicalLogPath,new CommandFactory(neoStore),new TransactionFactory());
  xaContainer.openLogicalLog();
  if (!xaContainer.getResourceManager().hasRecoveredTransactions()) {
    neoStore.makeStoreOk();
  }
 else {
    logger.info(""String_Node_Str"");
  }
  idGenerators=new ArrayMap<Class<?>,Store>(5,false,false);
  this.idGenerators.put(Node.class,neoStore.getNodeStore());
  this.idGenerators.put(Relationship.class,neoStore.getRelationshipStore());
  this.idGenerators.put(RelationshipType.class,neoStore.getRelationshipTypeStore());
  this.idGenerators.put(PropertyStore.class,neoStore.getPropertyStore());
  this.idGenerators.put(PropertyIndex.class,neoStore.getPropertyStore().getIndexStore());
}","/** 
 * Creates a data source with minimum (no memory mapped) configuration.
 * @param neoStoreFileName The file name of the neo store
 * @param logicalLogPath The file name of the logical log
 * @throws IOException If unable to open store
 */
public NeoStoreXaDataSource(String neoStoreFileName,String logicalLogPath,LockManager lockManager,LockReleaser lockReleaser) throws IOException, InstantiationException {
  super(null);
  this.lockManager=lockManager;
  this.lockReleaser=lockReleaser;
  storeDir=logicalLogPath;
  neoStore=new NeoStore(neoStoreFileName);
  xaContainer=XaContainer.create(logicalLogPath,new CommandFactory(neoStore),new TransactionFactory());
  xaContainer.openLogicalLog();
  if (!xaContainer.getResourceManager().hasRecoveredTransactions()) {
    neoStore.makeStoreOk();
  }
 else {
    logger.info(""String_Node_Str"" + ""String_Node_Str"");
  }
  idGenerators=new ArrayMap<Class<?>,Store>(5,false,false);
  this.idGenerators.put(Node.class,neoStore.getNodeStore());
  this.idGenerators.put(Relationship.class,neoStore.getRelationshipStore());
  this.idGenerators.put(RelationshipType.class,neoStore.getRelationshipTypeStore());
  this.idGenerators.put(PropertyStore.class,neoStore.getPropertyStore());
  this.idGenerators.put(PropertyIndex.class,neoStore.getPropertyStore().getIndexStore());
}",0.9923605805958748
155174,"void init(XaDataSourceManager xaDsManagerToUse){
  this.xaDsManager=xaDsManagerToUse;
  txThreadMap=new ArrayMap<Thread,TransactionImpl>(5,true,true);
  separator=System.getProperty(""String_Node_Str"");
  logSwitcherFileName=txLogDir + separator + ""String_Node_Str"";
  txLog1FileName=""String_Node_Str"";
  txLog2FileName=""String_Node_Str"";
  try {
    if (new File(logSwitcherFileName).exists()) {
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      byte fileName[]=new byte[256];
      ByteBuffer buf=ByteBuffer.wrap(fileName);
      fc.read(buf);
      fc.close();
      String currentTxLog=txLogDir + separator + new String(fileName).trim();
      if (!new File(currentTxLog).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + currentTxLog + ""String_Node_Str"");
      }
      txLog=new TxLog(currentTxLog);
    }
 else {
      if (new File(txLogDir + separator + txLog1FileName).exists() || new File(txLogDir + separator + txLog2FileName).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + txLog1FileName + ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      ByteBuffer buf=ByteBuffer.wrap(txLog1FileName.getBytes(""String_Node_Str""));
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      fc.write(buf);
      txLog=new TxLog(txLogDir + separator + txLog1FileName);
      fc.force(true);
      fc.close();
    }
    Iterator<List<TxLog.Record>> danglingRecordList=txLog.getDanglingRecords();
    if (danglingRecordList.hasNext()) {
      log.warning(""String_Node_Str"" + ""String_Node_Str"");
      recover(danglingRecordList);
    }
    getTxLog().truncate();
    tmOk=true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    throw new RuntimeException(e);
  }
}","void init(XaDataSourceManager xaDsManagerToUse){
  this.xaDsManager=xaDsManagerToUse;
  txThreadMap=new ArrayMap<Thread,TransactionImpl>(5,true,true);
  separator=System.getProperty(""String_Node_Str"");
  logSwitcherFileName=txLogDir + separator + ""String_Node_Str"";
  txLog1FileName=""String_Node_Str"";
  txLog2FileName=""String_Node_Str"";
  try {
    if (new File(logSwitcherFileName).exists()) {
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      byte fileName[]=new byte[256];
      ByteBuffer buf=ByteBuffer.wrap(fileName);
      fc.read(buf);
      fc.close();
      String currentTxLog=txLogDir + separator + new String(fileName).trim();
      if (!new File(currentTxLog).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + currentTxLog + ""String_Node_Str"");
      }
      txLog=new TxLog(currentTxLog);
    }
 else {
      if (new File(txLogDir + separator + txLog1FileName).exists() || new File(txLogDir + separator + txLog2FileName).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + txLog1FileName + ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      ByteBuffer buf=ByteBuffer.wrap(txLog1FileName.getBytes(""String_Node_Str""));
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      fc.write(buf);
      txLog=new TxLog(txLogDir + separator + txLog1FileName);
      fc.force(true);
      fc.close();
    }
    Iterator<List<TxLog.Record>> danglingRecordList=txLog.getDanglingRecords();
    if (danglingRecordList.hasNext()) {
      log.info(""String_Node_Str"" + ""String_Node_Str"");
      recover(danglingRecordList);
      log.info(""String_Node_Str"" + ""String_Node_Str"");
    }
    getTxLog().truncate();
    tmOk=true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    throw new RuntimeException(e);
  }
}",0.9829457364341084
155175,"private void recover(Iterator<List<TxLog.Record>> danglingRecordList){
  try {
    log.info(""String_Node_Str"");
    List<NonCompletedTransaction> commitList=new ArrayList<NonCompletedTransaction>();
    List<Xid> rollbackList=new LinkedList<Xid>();
    Map<Resource,XAResource> resourceMap=new HashMap<Resource,XAResource>();
    buildRecoveryInfo(commitList,rollbackList,resourceMap,danglingRecordList);
    Iterator<Resource> resourceItr=resourceMap.keySet().iterator();
    List<Xid> recoveredXidsList=new LinkedList<Xid>();
    while (resourceItr.hasNext()) {
      XAResource xaRes=resourceMap.get(resourceItr.next());
      Xid xids[]=xaRes.recover(XAResource.TMNOFLAGS);
      for (int i=0; i < xids.length; i++) {
        if (XidImpl.isThisTm(xids[i].getGlobalTransactionId())) {
          if (rollbackList.contains(xids[i])) {
            log.info(""String_Node_Str"" + xids[i] + ""String_Node_Str"");
            rollbackList.remove(xids[i]);
            xaRes.rollback(xids[i]);
          }
 else {
            recoveredXidsList.add(xids[i]);
          }
        }
 else {
          log.warning(""String_Node_Str"" + xids[i]);
        }
      }
    }
    Collections.sort(commitList,new Comparator<NonCompletedTransaction>(){
      public int compare(      NonCompletedTransaction r1,      NonCompletedTransaction r2){
        return r1.getSequenceNumber() - r2.getSequenceNumber();
      }
    }
);
    Iterator<NonCompletedTransaction> commitItr=commitList.iterator();
    while (commitItr.hasNext()) {
      NonCompletedTransaction nct=commitItr.next();
      int seq=nct.getSequenceNumber();
      Xid xids[]=nct.getXids();
      log.info(""String_Node_Str"" + seq + ""String_Node_Str""+ xids.length);
      for (int i=0; i < xids.length; i++) {
        if (!recoveredXidsList.contains(xids[i])) {
          log.info(""String_Node_Str"" + seq + ""String_Node_Str""+ xids[i]+ ""String_Node_Str""+ ""String_Node_Str"");
          continue;
        }
        recoveredXidsList.remove(xids[i]);
        Resource resource=new Resource(xids[i].getBranchQualifier());
        if (!resourceMap.containsKey(resource)) {
          throw new RuntimeException(""String_Node_Str"" + xids[i]);
        }
        log.info(""String_Node_Str"" + seq + ""String_Node_Str""+ xids[i]+ ""String_Node_Str"");
        resourceMap.get(resource).commit(xids[i],false);
      }
    }
    Iterator<Xid> rollbackItr=recoveredXidsList.iterator();
    while (rollbackItr.hasNext()) {
      Xid xid=rollbackItr.next();
      Resource resource=new Resource(xid.getBranchQualifier());
      if (!resourceMap.containsKey(resource)) {
        throw new RuntimeException(""String_Node_Str"" + xid);
      }
      log.info(""String_Node_Str"" + xid + ""String_Node_Str"");
      resourceMap.get(resource).rollback(xid);
    }
    if (rollbackList.size() > 0) {
      log.warning(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + rollbackList.size() + ""String_Node_Str"");
    }
  }
 catch (  XAException e) {
    throw new RuntimeException(e);
  }
}","private void recover(Iterator<List<TxLog.Record>> danglingRecordList){
  try {
    List<NonCompletedTransaction> commitList=new ArrayList<NonCompletedTransaction>();
    List<Xid> rollbackList=new LinkedList<Xid>();
    Map<Resource,XAResource> resourceMap=new HashMap<Resource,XAResource>();
    buildRecoveryInfo(commitList,rollbackList,resourceMap,danglingRecordList);
    Iterator<Resource> resourceItr=resourceMap.keySet().iterator();
    List<Xid> recoveredXidsList=new LinkedList<Xid>();
    while (resourceItr.hasNext()) {
      XAResource xaRes=resourceMap.get(resourceItr.next());
      Xid xids[]=xaRes.recover(XAResource.TMNOFLAGS);
      for (int i=0; i < xids.length; i++) {
        if (XidImpl.isThisTm(xids[i].getGlobalTransactionId())) {
          if (rollbackList.contains(xids[i])) {
            log.fine(""String_Node_Str"" + xids[i] + ""String_Node_Str"");
            rollbackList.remove(xids[i]);
            xaRes.rollback(xids[i]);
          }
 else {
            recoveredXidsList.add(xids[i]);
          }
        }
 else {
          log.warning(""String_Node_Str"" + xids[i]);
        }
      }
    }
    Collections.sort(commitList,new Comparator<NonCompletedTransaction>(){
      public int compare(      NonCompletedTransaction r1,      NonCompletedTransaction r2){
        return r1.getSequenceNumber() - r2.getSequenceNumber();
      }
    }
);
    Iterator<NonCompletedTransaction> commitItr=commitList.iterator();
    while (commitItr.hasNext()) {
      NonCompletedTransaction nct=commitItr.next();
      int seq=nct.getSequenceNumber();
      Xid xids[]=nct.getXids();
      log.fine(""String_Node_Str"" + seq + ""String_Node_Str""+ xids.length);
      for (int i=0; i < xids.length; i++) {
        if (!recoveredXidsList.contains(xids[i])) {
          log.fine(""String_Node_Str"" + seq + ""String_Node_Str""+ xids[i]+ ""String_Node_Str""+ ""String_Node_Str"");
          continue;
        }
        recoveredXidsList.remove(xids[i]);
        Resource resource=new Resource(xids[i].getBranchQualifier());
        if (!resourceMap.containsKey(resource)) {
          throw new RuntimeException(""String_Node_Str"" + xids[i]);
        }
        log.fine(""String_Node_Str"" + seq + ""String_Node_Str""+ xids[i]+ ""String_Node_Str"");
        resourceMap.get(resource).commit(xids[i],false);
      }
    }
    Iterator<Xid> rollbackItr=recoveredXidsList.iterator();
    while (rollbackItr.hasNext()) {
      Xid xid=rollbackItr.next();
      Resource resource=new Resource(xid.getBranchQualifier());
      if (!resourceMap.containsKey(resource)) {
        throw new RuntimeException(""String_Node_Str"" + xid);
      }
      log.fine(""String_Node_Str"" + xid + ""String_Node_Str"");
      resourceMap.get(resource).rollback(xid);
    }
    if (rollbackList.size() > 0) {
      log.fine(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + rollbackList.size() + ""String_Node_Str"");
    }
  }
 catch (  XAException e) {
    throw new RuntimeException(e);
  }
}",0.9876871880199668
155176,"private void doInternalRecovery(String logFileName) throws IOException {
  log.info(""String_Node_Str"" + logFileName + ""String_Node_Str""+ ""String_Node_Str"");
  buffer.clear();
  buffer.limit(8);
  if (fileChannel.read(buffer) != 8) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    fileChannel.close();
    boolean success=new File(logFileName).renameTo(new File(logFileName + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str""));
    assert success;
    fileChannel=new RandomAccessFile(logFileName,""String_Node_Str"").getChannel();
    return;
  }
  buffer.flip();
  logVersion=buffer.getLong();
  log.fine(""String_Node_Str"" + logVersion);
  long logEntriesFound=0;
  while (readEntry()) {
    logEntriesFound++;
  }
  scanIsComplete=true;
  log.fine(""String_Node_Str"" + logEntriesFound + ""String_Node_Str"");
  log.info(""String_Node_Str"" + logFileName + ""String_Node_Str""+ xidIdentMap.size()+ ""String_Node_Str"");
  xaRm.checkXids();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + logFileName + ""String_Node_Str""+ xidIdentMap.size()+ ""String_Node_Str"");
    for (    StartEntry entry : xidIdentMap.values()) {
      log.info(""String_Node_Str"" + logFileName + ""String_Node_Str""+ entry.getXid()+ ""String_Node_Str"");
    }
  }
  recoveredTxMap.clear();
}","private void doInternalRecovery(String logFileName) throws IOException {
  log.info(""String_Node_Str"" + logFileName + ""String_Node_Str"");
  buffer.clear();
  buffer.limit(8);
  if (fileChannel.read(buffer) != 8) {
    log.info(""String_Node_Str"" + ""String_Node_Str"");
    fileChannel.close();
    boolean success=new File(logFileName).renameTo(new File(logFileName + ""String_Node_Str"" + System.currentTimeMillis()+ ""String_Node_Str""));
    assert success;
    fileChannel=new RandomAccessFile(logFileName,""String_Node_Str"").getChannel();
    return;
  }
  buffer.flip();
  logVersion=buffer.getLong();
  log.fine(""String_Node_Str"" + logVersion);
  long logEntriesFound=0;
  while (readEntry()) {
    logEntriesFound++;
  }
  scanIsComplete=true;
  log.fine(""String_Node_Str"" + logEntriesFound + ""String_Node_Str"");
  xaRm.checkXids();
  if (xidIdentMap.size() == 0) {
    log.fine(""String_Node_Str"");
  }
 else {
    log.fine(""String_Node_Str"" + logFileName + ""String_Node_Str""+ xidIdentMap.size()+ ""String_Node_Str"");
    for (    StartEntry entry : xidIdentMap.values()) {
      log.fine(""String_Node_Str"" + logFileName + ""String_Node_Str""+ entry.getXid()+ ""String_Node_Str"");
    }
  }
  recoveredTxMap.clear();
}",0.9254088552054248
155177,"public synchronized void close() throws IOException {
  if (fileChannel == null || !fileChannel.isOpen()) {
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size());
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog);
    if (writeBuffer != null) {
      writeBuffer.force();
    }
    writeBuffer=null;
    fileChannel.close();
    return;
  }
  if (!keepLogs || backupSlave) {
    if (currentLog == CLEAN) {
      deleteCurrentLogFile(fileName);
    }
 else {
      deleteCurrentLogFile(fileName + ""String_Node_Str"" + currentLog);
    }
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + currentLog,endPosition);
  }
  if (currentLog != CLEAN) {
    setActiveLog(CLEAN);
  }
}","public synchronized void close() throws IOException {
  if (fileChannel == null || !fileChannel.isOpen()) {
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size() + ""String_Node_Str"");
    if (writeBuffer != null) {
      writeBuffer.force();
    }
    writeBuffer=null;
    fileChannel.close();
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog+ ""String_Node_Str""+ ""String_Node_Str"");
    return;
  }
  if (!keepLogs || backupSlave) {
    if (currentLog == CLEAN) {
      deleteCurrentLogFile(fileName);
    }
 else {
      deleteCurrentLogFile(fileName + ""String_Node_Str"" + currentLog);
    }
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + currentLog,endPosition);
  }
  if (currentLog != CLEAN) {
    setActiveLog(CLEAN);
  }
}",0.8873390557939914
155178,"synchronized void checkXids() throws IOException {
  Iterator<Xid> keyIterator=xidMap.keySet().iterator();
  LinkedList<Xid> xids=new LinkedList<Xid>();
  while (keyIterator.hasNext()) {
    xids.add(keyIterator.next());
  }
  Collections.sort(xids,new Comparator<Xid>(){
    public int compare(    Xid o1,    Xid o2){
      Integer id1=txOrderMap.get(o1);
      Integer id2=txOrderMap.get(o2);
      if (id1 == null && id2 == null) {
        return 0;
      }
      if (id1 == null) {
        return Integer.MAX_VALUE;
      }
      if (id2 == null) {
        return Integer.MIN_VALUE;
      }
      return id1 - id2;
    }
  }
);
  txOrderMap=null;
  Logger logger=Logger.getLogger(tf.getClass().getName());
  while (!xids.isEmpty()) {
    Xid xid=xids.removeFirst();
    XidStatus status=xidMap.get(xid);
    TransactionStatus txStatus=status.getTransactionStatus();
    XaTransaction xaTransaction=txStatus.getTransaction();
    int identifier=xaTransaction.getIdentifier();
    if (xaTransaction.isRecovered()) {
      if (txStatus.commitStarted()) {
        logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
        log.doneInternal(identifier);
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else       if (!txStatus.prepared()) {
        logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ identifier+ ""String_Node_Str"");
        log.doneInternal(xaTransaction.getIdentifier());
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else {
        logger.info(""String_Node_Str"" + name + ""String_Node_Str""+ txStatus+ ""String_Node_Str""+ identifier+ ""String_Node_Str"");
      }
    }
  }
  checkIfRecoveryComplete();
}","synchronized void checkXids() throws IOException {
  Iterator<Xid> keyIterator=xidMap.keySet().iterator();
  LinkedList<Xid> xids=new LinkedList<Xid>();
  while (keyIterator.hasNext()) {
    xids.add(keyIterator.next());
  }
  Collections.sort(xids,new Comparator<Xid>(){
    public int compare(    Xid o1,    Xid o2){
      Integer id1=txOrderMap.get(o1);
      Integer id2=txOrderMap.get(o2);
      if (id1 == null && id2 == null) {
        return 0;
      }
      if (id1 == null) {
        return Integer.MAX_VALUE;
      }
      if (id2 == null) {
        return Integer.MIN_VALUE;
      }
      return id1 - id2;
    }
  }
);
  txOrderMap=null;
  Logger logger=Logger.getLogger(tf.getClass().getName());
  while (!xids.isEmpty()) {
    Xid xid=xids.removeFirst();
    XidStatus status=xidMap.get(xid);
    TransactionStatus txStatus=status.getTransactionStatus();
    XaTransaction xaTransaction=txStatus.getTransaction();
    int identifier=xaTransaction.getIdentifier();
    if (xaTransaction.isRecovered()) {
      if (txStatus.commitStarted()) {
        logger.fine(""String_Node_Str"" + name + ""String_Node_Str""+ identifier+ ""String_Node_Str"");
        log.doneInternal(identifier);
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else       if (!txStatus.prepared()) {
        logger.fine(""String_Node_Str"" + name + ""String_Node_Str""+ ""String_Node_Str""+ identifier+ ""String_Node_Str"");
        log.doneInternal(xaTransaction.getIdentifier());
        xidMap.remove(xid);
        recoveredTxCount--;
      }
 else {
        logger.fine(""String_Node_Str"" + name + ""String_Node_Str""+ txStatus+ ""String_Node_Str""+ identifier+ ""String_Node_Str"");
      }
    }
  }
  checkIfRecoveryComplete();
}",0.9947582993593476
155179,"private Node traverseToNextNode(){
  Node nodeToReturn=null;
  while (!this.listIsEmpty() && nodeToReturn == null) {
    TraversalPositionImpl currentPos=this.getNextPositionFromList();
    traversalPosition=currentPos;
    Node currentNode=currentPos.currentNode();
    if (visitedNodes.add(currentNode)) {
      currentPos.setReturnedNodesCount(this.returnedNodesCount);
      try {
        if (!this.stopEvaluator.isStopNode(currentPos)) {
          this.addEndNodesToList(currentPos,this.traversableRels,this.traversableDirs);
          this.addEndNodesToList(currentPos,this.preservingRels,this.preservingDirs);
        }
        if (this.returnableEvaluator.isReturnableNode(currentPos)) {
          this.returnedNodesCount++;
          nodeToReturn=currentPos.currentNode();
        }
      }
 catch (      NotFoundException e) {
      }
    }
  }
  return nodeToReturn;
}","private Node traverseToNextNode(){
  Node nodeToReturn=null;
  while (!this.listIsEmpty() && nodeToReturn == null) {
    TraversalPositionImpl currentPos=this.getNextPositionFromList();
    traversalPosition=currentPos;
    Node currentNode=currentPos.currentNode();
    if (visitedNodes.add(currentNode)) {
      currentPos.setReturnedNodesCount(this.returnedNodesCount);
      if (!this.stopEvaluator.isStopNode(currentPos)) {
        try {
          this.addEndNodesToList(currentPos,this.traversableRels,this.traversableDirs);
          this.addEndNodesToList(currentPos,this.preservingRels,this.preservingDirs);
        }
 catch (        NotFoundException e) {
          continue;
        }
      }
      if (this.returnableEvaluator.isReturnableNode(currentPos)) {
        this.returnedNodesCount++;
        nodeToReturn=currentPos.currentNode();
      }
    }
  }
  return nodeToReturn;
}",0.8838782412626832
155180,"/** 
 * Invoking this method with no transaction running will cause the lock to  be released right away.
 * @param resource the resource on which the lock is taken
 * @param type type of lock (READ or WRITE)
 * @throws NotInTransactionException
 */
public void addLockToTransaction(Object resource,LockType type) throws NotInTransactionException {
  Transaction tx=getTransaction();
  List<LockElement> lockElements=lockMap.get(tx);
  if (lockElements != null) {
    lockElements.add(new LockElement(resource,type));
  }
 else {
    if (tx == null) {
      if (type == LockType.WRITE) {
        lockManager.releaseWriteLock(resource);
      }
 else       if (type == LockType.READ) {
        lockManager.releaseReadLock(resource);
      }
      return;
    }
    lockElements=new ArrayList<LockElement>();
    lockMap.put(tx,lockElements);
    lockElements.add(new LockElement(resource,type));
  }
}","/** 
 * Invoking this method with no transaction running will cause the lock to  be released right away.
 * @param resource the resource on which the lock is taken
 * @param type type of lock (READ or WRITE)
 * @throws NotInTransactionException
 */
public void addLockToTransaction(Object resource,LockType type) throws NotInTransactionException {
  Transaction tx=getTransaction();
  List<LockElement> lockElements=lockMap.get(tx);
  if (lockElements != null) {
    lockElements.add(new LockElement(resource,type));
  }
 else {
    if (tx == null) {
      if (type == LockType.WRITE) {
        lockManager.releaseWriteLock(resource);
      }
 else       if (type == LockType.READ) {
        lockManager.releaseReadLock(resource);
      }
      return;
    }
    lockElements=new ArrayList<LockElement>();
    lockMap.put(tx,lockElements);
    lockElements.add(new LockElement(resource,type));
    try {
      tx.registerSynchronization(new ReadOnlyTxReleaser(tx));
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}",0.9239465570400822
155181,"private void displayRelationships(NodeOrRelationship thing,Output out,boolean verbose,Direction direction,String prefixString,String postfixString,String filter,boolean caseSensitiveFilters,boolean exactFilterMatch) throws ShellException, RemoteException {
  Pattern typeFilter=newPattern(filter,caseSensitiveFilters);
  for (  Relationship rel : thing.getRelationships(direction)) {
    String type=rel.getType().name();
    if (!matches(typeFilter,type,caseSensitiveFilters,exactFilterMatch)) {
      continue;
    }
    StringBuffer buf=new StringBuffer(getDisplayNameForCurrentNode());
    buf.append(""String_Node_Str"" + prefixString).append(rel.getType().name());
    if (verbose) {
      buf.append(""String_Node_Str"").append(rel.getId());
    }
    buf.append(postfixString + ""String_Node_Str"");
    buf.append(getDisplayNameForNode(rel.getEndNode()));
    out.println(buf);
  }
}","private void displayRelationships(NodeOrRelationship thing,Output out,boolean verbose,Direction direction,String prefixString,String postfixString,String filter,boolean caseSensitiveFilters,boolean exactFilterMatch) throws ShellException, RemoteException {
  Pattern typeFilter=newPattern(filter,caseSensitiveFilters);
  for (  Relationship rel : thing.getRelationships(direction)) {
    String type=rel.getType().name();
    if (!matches(typeFilter,type,caseSensitiveFilters,exactFilterMatch)) {
      continue;
    }
    StringBuffer buf=new StringBuffer(getDisplayNameForCurrentNode());
    buf.append(""String_Node_Str"" + prefixString).append(rel.getType().name());
    if (verbose) {
      buf.append(""String_Node_Str"").append(rel.getId());
    }
    buf.append(postfixString + ""String_Node_Str"");
    buf.append(getDisplayNameForNode(direction == Direction.OUTGOING ? rel.getEndNode() : rel.getStartNode()));
    out.println(buf);
  }
}",0.969896004378763
155182,"public long createRelationship(long node1,long node2,RelationshipType type,Map<String,Object> properties){
  int firstNodeId=(int)(node1 & 0xFFFFFFFF);
  int secondNodeId=(int)(node2 & 0xFFFFFFFF);
  NodeRecord firstNode=getNodeRecord(node1);
  NodeRecord secondNode=getNodeRecord(secondNodeId);
  int typeId=typeHolder.getTypeId(type.name());
  if (typeId == -1) {
    typeId=createNewRelationshipType(type.name());
  }
  int id=getRelationshipStore().nextId();
  RelationshipRecord record=new RelationshipRecord(id,firstNodeId,secondNodeId,typeId);
  record.setInUse(true);
  record.setCreated();
  connectRelationship(firstNode,secondNode,record);
  getNodeStore().updateRecord(firstNode);
  getNodeStore().updateRecord(secondNode);
  record.setNextProp(createPropertyChain(properties));
  getRelationshipStore().updateRecord(record);
  return id & 0xFFFFFFFFL;
}","public long createRelationship(long node1,long node2,RelationshipType type,Map<String,Object> properties){
  int firstNodeId=(int)(node1 & 0xFFFFFFFF);
  int secondNodeId=(int)(node2 & 0xFFFFFFFF);
  NodeRecord firstNode=getNodeRecord(node1);
  NodeRecord secondNode=getNodeRecord(node2);
  int typeId=typeHolder.getTypeId(type.name());
  if (typeId == -1) {
    typeId=createNewRelationshipType(type.name());
  }
  int id=getRelationshipStore().nextId();
  RelationshipRecord record=new RelationshipRecord(id,firstNodeId,secondNodeId,typeId);
  record.setInUse(true);
  record.setCreated();
  connectRelationship(firstNode,secondNode,record);
  getNodeStore().updateRecord(firstNode);
  getNodeStore().updateRecord(secondNode);
  record.setNextProp(createPropertyChain(properties));
  getRelationshipStore().updateRecord(record);
  return id & 0xFFFFFFFFL;
}",0.9901449275362318
155183,"private int createPropertyChain(Map<String,Object> properties){
  if (properties == null) {
    return Record.NO_NEXT_PROPERTY.intValue();
  }
  PropertyStore propStore=getPropertyStore();
  List<PropertyRecord> propRecords=new ArrayList<PropertyRecord>();
  PropertyRecord prevRecord=null;
  for (  Entry<String,Object> entry : properties.entrySet()) {
    int keyId=indexHolder.getKeyId(entry.getKey());
    if (keyId == -1) {
      keyId=createNewPropertyIndex(entry.getKey());
    }
    int propertyId=propStore.nextId();
    PropertyRecord propertyRecord=new PropertyRecord(propertyId);
    propertyRecord.setInUse(true);
    propertyRecord.setCreated();
    propStore.encodeValue(propertyRecord,entry.getValue());
    if (prevRecord != null) {
      prevRecord.setPrevProp(propertyId);
      propertyRecord.setNextProp(prevRecord.getId());
    }
    propRecords.add(propertyRecord);
    prevRecord=propertyRecord;
  }
  for (int i=propRecords.size() - 1; i >= 0; i--) {
    propStore.updateRecord(propRecords.get(i));
  }
  if (prevRecord != null) {
    return prevRecord.getId();
  }
  return Record.NO_NEXT_PROPERTY.intValue();
}","private int createPropertyChain(Map<String,Object> properties){
  if (properties == null) {
    return Record.NO_NEXT_PROPERTY.intValue();
  }
  PropertyStore propStore=getPropertyStore();
  List<PropertyRecord> propRecords=new ArrayList<PropertyRecord>();
  PropertyRecord prevRecord=null;
  for (  Entry<String,Object> entry : properties.entrySet()) {
    int keyId=indexHolder.getKeyId(entry.getKey());
    if (keyId == -1) {
      keyId=createNewPropertyIndex(entry.getKey());
    }
    int propertyId=propStore.nextId();
    PropertyRecord propertyRecord=new PropertyRecord(propertyId);
    propertyRecord.setInUse(true);
    propertyRecord.setCreated();
    propertyRecord.setKeyIndexId(keyId);
    propStore.encodeValue(propertyRecord,entry.getValue());
    if (prevRecord != null) {
      prevRecord.setPrevProp(propertyId);
      propertyRecord.setNextProp(prevRecord.getId());
    }
    propRecords.add(propertyRecord);
    prevRecord=propertyRecord;
  }
  for (int i=propRecords.size() - 1; i >= 0; i--) {
    propStore.updateRecord(propRecords.get(i));
  }
  if (prevRecord != null) {
    return prevRecord.getId();
  }
  return Record.NO_NEXT_PROPERTY.intValue();
}",0.9822894168466524
155184,"private void connectRelationship(NodeRecord firstNode,NodeRecord secondNode,RelationshipRecord rel){
  rel.setFirstNextRel(firstNode.getNextRel());
  rel.setSecondNextRel(secondNode.getNextRel());
  if (firstNode.getNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    RelationshipRecord nextRel=getRelationshipRecord(firstNode.getNextRel() & 0xFFFFFFFFL);
    if (nextRel.getFirstNode() == firstNode.getId()) {
      nextRel.setFirstPrevRel(rel.getId());
    }
 else     if (nextRel.getSecondNode() == firstNode.getId()) {
      nextRel.setSecondPrevRel(rel.getId());
    }
 else {
      throw new RuntimeException(firstNode + ""String_Node_Str"" + nextRel);
    }
  }
  if (secondNode.getNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    RelationshipRecord nextRel=getRelationshipRecord(secondNode.getNextRel() & 0xFFFFFFFFL);
    if (nextRel.getFirstNode() == secondNode.getId()) {
      nextRel.setFirstPrevRel(rel.getId());
    }
 else     if (nextRel.getSecondNode() == secondNode.getId()) {
      nextRel.setSecondPrevRel(rel.getId());
    }
 else {
      throw new RuntimeException(firstNode + ""String_Node_Str"" + nextRel);
    }
  }
  firstNode.setNextRel(rel.getId());
  secondNode.setNextRel(rel.getId());
}","private void connectRelationship(NodeRecord firstNode,NodeRecord secondNode,RelationshipRecord rel){
  rel.setFirstNextRel(firstNode.getNextRel());
  rel.setSecondNextRel(secondNode.getNextRel());
  if (firstNode.getNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    RelationshipRecord nextRel=getRelationshipStore().getRecord(firstNode.getNextRel());
    if (nextRel.getFirstNode() == firstNode.getId()) {
      nextRel.setFirstPrevRel(rel.getId());
    }
 else     if (nextRel.getSecondNode() == firstNode.getId()) {
      nextRel.setSecondPrevRel(rel.getId());
    }
 else {
      throw new RuntimeException(firstNode + ""String_Node_Str"" + nextRel);
    }
    getRelationshipStore().updateRecord(nextRel);
  }
  if (secondNode.getNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    RelationshipRecord nextRel=getRelationshipStore().getRecord(secondNode.getNextRel());
    if (nextRel.getFirstNode() == secondNode.getId()) {
      nextRel.setFirstPrevRel(rel.getId());
    }
 else     if (nextRel.getSecondNode() == secondNode.getId()) {
      nextRel.setSecondPrevRel(rel.getId());
    }
 else {
      throw new RuntimeException(firstNode + ""String_Node_Str"" + nextRel);
    }
    getRelationshipStore().updateRecord(nextRel);
  }
  firstNode.setNextRel(rel.getId());
  secondNode.setNextRel(rel.getId());
}",0.8951486697965572
155185,"public synchronized void close() throws IOException {
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size());
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog);
    if (writeBuffer != null) {
      writeBuffer.force();
    }
    writeBuffer=null;
    fileChannel.close();
    return;
  }
  if (!keepLogs || backupSlave) {
    deleteCurrentLogFile(fileName + ""String_Node_Str"" + currentLog);
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + currentLog,endPosition);
  }
  setActiveLog(CLEAN);
}","public synchronized void close() throws IOException {
  if (fileChannel == null || !fileChannel.isOpen()) {
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str"");
    return;
  }
  long endPosition=writeBuffer.getFileChannelPosition();
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size());
    log.info(""String_Node_Str"" + fileName + ""String_Node_Str""+ currentLog);
    if (writeBuffer != null) {
      writeBuffer.force();
    }
    writeBuffer=null;
    fileChannel.close();
    return;
  }
  if (!keepLogs || backupSlave) {
    deleteCurrentLogFile(fileName + ""String_Node_Str"" + currentLog);
  }
 else {
    renameCurrentLogFileAndIncrementVersion(fileName + ""String_Node_Str"" + currentLog,endPosition);
  }
  setActiveLog(CLEAN);
}",0.9056338028169014
155186,"protected void commitPropertyMaps(ArrayMap<Integer,Property> cowPropertyAddMap,ArrayMap<Integer,Property> cowPropertyRemoveMap){
  if (cowPropertyAddMap != null) {
    if (propertyMap == null) {
      propertyMap=new ArrayMap<Integer,Property>();
    }
    for (    Integer index : cowPropertyAddMap.keySet()) {
      propertyMap.put(index,cowPropertyAddMap.get(index));
    }
  }
  if (cowPropertyRemoveMap != null && propertyMap != null) {
    for (    Integer index : cowPropertyRemoveMap.keySet()) {
      propertyMap.remove(index);
    }
  }
}","protected void commitPropertyMaps(ArrayMap<Integer,Property> cowPropertyAddMap,ArrayMap<Integer,Property> cowPropertyRemoveMap){
  if (propertyMap == null) {
    return;
  }
  if (cowPropertyAddMap != null) {
    for (    Integer index : cowPropertyAddMap.keySet()) {
      propertyMap.put(index,cowPropertyAddMap.get(index));
    }
  }
  if (cowPropertyRemoveMap != null && propertyMap != null) {
    for (    Integer index : cowPropertyRemoveMap.keySet()) {
      propertyMap.remove(index);
    }
  }
}",0.8726235741444867
155187,"private boolean ensureFullProperties(){
}","private boolean ensureFullProperties(){
  if (propertyMap == null) {
    RawPropertyData[] rawProperties=loadProperties();
    ArrayMap<Integer,Property> newPropertyMap=new ArrayMap<Integer,Property>(9,false,true);
    for (    RawPropertyData propData : rawProperties) {
      int propId=propData.getId();
      Property property=new Property(propId,propData.getValue());
      newPropertyMap.put(propData.getIndex(),property);
    }
    this.propertyMap=newPropertyMap;
    return true;
  }
  return false;
}",0.1488203266787658
155188,"protected void commitRelationshipMaps(ArrayMap<String,ArrayIntSet> cowRelationshipAddMap,ArrayMap<String,ArrayIntSet> cowRelationshipRemoveMap){
  if (cowRelationshipAddMap != null) {
    if (relationshipMap == null) {
      return;
    }
    for (    String type : cowRelationshipAddMap.keySet()) {
      ArrayIntSet source=cowRelationshipAddMap.get(type);
      if (source.size() == 0) {
        continue;
      }
      ArrayIntSet dest=new ArrayIntSet();
      ArrayIntSet orig=relationshipMap.get(type);
      if (orig != null) {
        for (        int relId : orig.values()) {
          dest.add(relId);
        }
      }
      for (      int relId : source.values()) {
        dest.add(relId);
      }
      relationshipMap.put(type,dest);
    }
  }
  if (cowRelationshipRemoveMap != null && relationshipMap != null) {
    for (    String type : cowRelationshipRemoveMap.keySet()) {
      ArrayIntSet source=cowRelationshipRemoveMap.get(type);
      if (source.size() == 0) {
        continue;
      }
      ArrayIntSet dest=new ArrayIntSet();
      ArrayIntSet orig=relationshipMap.get(type);
      if (orig != null) {
        for (        int relId : orig.values()) {
          if (!source.contains(relId)) {
            dest.add(relId);
          }
        }
        relationshipMap.put(type,dest);
      }
    }
  }
}","protected void commitRelationshipMaps(ArrayMap<String,ArrayIntSet> cowRelationshipAddMap,ArrayMap<String,ArrayIntSet> cowRelationshipRemoveMap){
  if (relationshipMap == null) {
    return;
  }
  if (cowRelationshipAddMap != null) {
    for (    String type : cowRelationshipAddMap.keySet()) {
      ArrayIntSet source=cowRelationshipAddMap.get(type);
      if (source.size() == 0) {
        continue;
      }
      ArrayIntSet dest=new ArrayIntSet();
      ArrayIntSet orig=relationshipMap.get(type);
      if (orig != null) {
        for (        int relId : orig.values()) {
          dest.add(relId);
        }
      }
      for (      int relId : source.values()) {
        dest.add(relId);
      }
      relationshipMap.put(type,dest);
    }
  }
  if (cowRelationshipRemoveMap != null && relationshipMap != null) {
    for (    String type : cowRelationshipRemoveMap.keySet()) {
      ArrayIntSet source=cowRelationshipRemoveMap.get(type);
      if (source.size() == 0) {
        continue;
      }
      ArrayIntSet dest=new ArrayIntSet();
      ArrayIntSet orig=relationshipMap.get(type);
      if (orig != null) {
        for (        int relId : orig.values()) {
          if (!source.contains(relId)) {
            dest.add(relId);
          }
        }
        relationshipMap.put(type,dest);
      }
    }
  }
}",0.9607843137254902
155189,"private void checkLogRotation() throws IOException {
  if (autoRotate && writeBuffer.getFileChannelPosition() >= rotateAtSize) {
    rotate();
  }
}","private void checkLogRotation() throws IOException {
  if (autoRotate && writeBuffer.getFileChannelPosition() >= rotateAtSize) {
    long currentPos=writeBuffer.getFileChannelPosition();
    long firstStartEntry=getFirstStartEntry(currentPos);
    if ((currentPos - firstStartEntry) < rotateAtSize / 2) {
      rotate();
    }
  }
}",0.5916666666666667
155190,"public boolean contains(int id){
  for (int i=0; i < arrayCount; i++) {
    if (rels[i] == id) {
      return true;
    }
  }
  if (arrayCount == -1) {
    return relationshipSet.remove(id);
  }
  return false;
}","public boolean contains(int id){
  for (int i=0; i < arrayCount; i++) {
    if (rels[i] == id) {
      return true;
    }
  }
  if (arrayCount == -1) {
    return relationshipSet.contains(id);
  }
  return false;
}",0.9671361502347418
155191,"public Iterable<PropertyIndex> index(String key){
  List<PropertyIndex> list=indexMap.get(key);
  TxCommitHook hook=txCommitHooks.get(getTransaction());
  if (hook != null) {
    PropertyIndex index=hook.getIndex(key);
    if (index != null) {
      if (list == null) {
        list=new ArrayList<PropertyIndex>();
      }
      list.add(index);
    }
  }
  if (list == null) {
    list=Collections.emptyList();
  }
  return list;
}","public Iterable<PropertyIndex> index(String key){
  List<PropertyIndex> list=indexMap.get(key);
  TxCommitHook hook=txCommitHooks.get(getTransaction());
  if (hook != null) {
    PropertyIndex index=hook.getIndex(key);
    if (index != null) {
      List<PropertyIndex> added=new ArrayList<PropertyIndex>();
      if (list != null) {
        added.addAll(list);
      }
      added.add(index);
      return added;
    }
  }
  if (list == null) {
    list=Collections.emptyList();
  }
  return list;
}",0.8261802575107297
155192,"private synchronized void addPropertyIndex(PropertyIndex index){
  List<PropertyIndex> list=indexMap.get(index.getKey());
  if (list == null) {
    list=new ArrayList<PropertyIndex>();
    indexMap.put(index.getKey(),list);
  }
  list.add(index);
  idToIndexMap.put(index.getKeyId(),index);
}","private synchronized void addPropertyIndex(PropertyIndex index){
  List<PropertyIndex> list=indexMap.get(index.getKey());
  if (list == null) {
    list=new CopyOnWriteArrayList<PropertyIndex>();
    indexMap.put(index.getKey(),list);
  }
  list.add(index);
  idToIndexMap.put(index.getKeyId(),index);
}",0.9815126050420168
155193,"public void setProperty(String key,Object value){
  if (key == null || value == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str""+ value);
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    if (cowTxId == null) {
      setupCowTx();
    }
    ensureFullProperties();
    ArrayMap<Integer,Property> addMap=nodeManager.getCowPropertyAddMap(this,true);
    ArrayMap<Integer,Property> skipMap=nodeManager.getCowPropertyRemoveMap(this);
    PropertyIndex index=null;
    Property property=null;
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (skipMap != null) {
        skipMap.remove(cachedIndex.getKeyId());
      }
      index=cachedIndex;
      property=addMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      for (      int keyId : addMap.keySet()) {
        if (!nodeManager.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            if (skipMap != null) {
              skipMap.remove(indexToCheck.getKeyId());
            }
            index=indexToCheck;
            property=addMap.get(indexToCheck.getKeyId());
            if (property != null) {
              break;
            }
          }
        }
      }
      if (property == null) {
        for (        int keyId : propertyMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              if (skipMap != null) {
                skipMap.remove(indexToCheck.getKeyId());
              }
              index=indexToCheck;
              property=propertyMap.get(indexToCheck.getKeyId());
              if (property != null) {
                break;
              }
            }
          }
        }
      }
    }
    if (index == null) {
      index=nodeManager.createPropertyIndex(key);
    }
    if (property != null) {
      int propertyId=property.getId();
      changeProperty(propertyId,value);
      property.setNewValue(value);
    }
 else {
      int propertyId=addProperty(index,value);
      property=new Property(propertyId,value);
    }
    addMap.put(index.getKeyId(),property);
    success=true;
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}","public void setProperty(String key,Object value){
  if (key == null || value == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"" + key + ""String_Node_Str""+ ""String_Node_Str""+ value);
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    setupCowTx();
    ensureFullProperties();
    ArrayMap<Integer,Property> addMap=nodeManager.getCowPropertyAddMap(this,true);
    ArrayMap<Integer,Property> skipMap=nodeManager.getCowPropertyRemoveMap(this);
    PropertyIndex index=null;
    Property property=null;
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (skipMap != null) {
        skipMap.remove(cachedIndex.getKeyId());
      }
      index=cachedIndex;
      property=addMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      for (      int keyId : addMap.keySet()) {
        if (!nodeManager.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            if (skipMap != null) {
              skipMap.remove(indexToCheck.getKeyId());
            }
            index=indexToCheck;
            property=addMap.get(indexToCheck.getKeyId());
            if (property != null) {
              break;
            }
          }
        }
      }
      if (property == null) {
        for (        int keyId : propertyMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              if (skipMap != null) {
                skipMap.remove(indexToCheck.getKeyId());
              }
              index=indexToCheck;
              property=propertyMap.get(indexToCheck.getKeyId());
              if (property != null) {
                break;
              }
            }
          }
        }
      }
    }
    if (index == null) {
      index=nodeManager.createPropertyIndex(key);
    }
    if (property != null) {
      int propertyId=property.getId();
      changeProperty(propertyId,value);
      property.setNewValue(value);
    }
 else {
      int propertyId=addProperty(index,value);
      property=new Property(propertyId,value);
    }
    addMap.put(index.getKeyId(),property);
    success=true;
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}",0.9901137847416528
155194,"public Object removeProperty(String key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    if (cowTxId == null) {
      setupCowTx();
    }
    ensureFullProperties();
    Property property=null;
    ArrayMap<Integer,Property> addMap=nodeManager.getCowPropertyAddMap(this);
    ArrayMap<Integer,Property> removeMap=nodeManager.getCowPropertyRemoveMap(this,true);
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (addMap != null) {
        property=addMap.remove(cachedIndex.getKeyId());
        if (property != null) {
          removeMap.put(cachedIndex.getKeyId(),property);
          break;
        }
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        removeMap.put(cachedIndex.getKeyId(),property);
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      if (addMap != null) {
        for (        int keyId : addMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              property=addMap.remove(indexToCheck.getKeyId());
              if (property != null) {
                removeMap.put(indexToCheck.getKeyId(),property);
                break;
              }
            }
          }
        }
        if (property == null) {
          for (          int keyId : propertyMap.keySet()) {
            if (!nodeManager.hasIndexFor(keyId)) {
              PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
              if (indexToCheck.getKey().equals(key)) {
                property=propertyMap.get(indexToCheck.getKeyId());
                if (property != null) {
                  removeMap.put(indexToCheck.getKeyId(),property);
                  break;
                }
              }
            }
          }
        }
      }
    }
    if (property == null) {
      success=true;
      return null;
    }
    removeProperty(property.getId());
    success=true;
    return getPropertyValue(property);
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}","public Object removeProperty(String key){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  nodeManager.acquireLock(this,LockType.WRITE);
  boolean success=false;
  try {
    setupCowTx();
    ensureFullProperties();
    Property property=null;
    ArrayMap<Integer,Property> addMap=nodeManager.getCowPropertyAddMap(this);
    ArrayMap<Integer,Property> removeMap=nodeManager.getCowPropertyRemoveMap(this,true);
    for (    PropertyIndex cachedIndex : nodeManager.index(key)) {
      if (addMap != null) {
        property=addMap.remove(cachedIndex.getKeyId());
        if (property != null) {
          removeMap.put(cachedIndex.getKeyId(),property);
          break;
        }
      }
      property=propertyMap.get(cachedIndex.getKeyId());
      if (property != null) {
        removeMap.put(cachedIndex.getKeyId(),property);
        break;
      }
    }
    if (property == null && !nodeManager.hasAllPropertyIndexes()) {
      if (addMap != null) {
        for (        int keyId : addMap.keySet()) {
          if (!nodeManager.hasIndexFor(keyId)) {
            PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
            if (indexToCheck.getKey().equals(key)) {
              property=addMap.remove(indexToCheck.getKeyId());
              if (property != null) {
                removeMap.put(indexToCheck.getKeyId(),property);
                break;
              }
            }
          }
        }
        if (property == null) {
          for (          int keyId : propertyMap.keySet()) {
            if (!nodeManager.hasIndexFor(keyId)) {
              PropertyIndex indexToCheck=nodeManager.getIndexFor(keyId);
              if (indexToCheck.getKey().equals(key)) {
                property=propertyMap.get(indexToCheck.getKeyId());
                if (property != null) {
                  removeMap.put(indexToCheck.getKeyId(),property);
                  break;
                }
              }
            }
          }
        }
      }
    }
    if (property == null) {
      success=true;
      return null;
    }
    removeProperty(property.getId());
    success=true;
    return getPropertyValue(property);
  }
  finally {
    nodeManager.releaseLock(this,LockType.WRITE);
    if (!success) {
      setRollbackOnly();
    }
  }
}",0.9885751239491268
155195,"void removeRelationship(RelationshipType type,int relId){
  if (getCowTxId() == null) {
    setupCowTx();
  }
  ArrayIntSet addedSet=nodeManager.getCowRelationshipAddMap(this,type.name());
  if (addedSet != null) {
    addedSet.remove(relId);
  }
  ArrayIntSet relationshipSet=nodeManager.getCowRelationshipRemoveMap(this,type.name(),true);
  relationshipSet.add(relId);
}","void removeRelationship(RelationshipType type,int relId){
  setupCowTx();
  ArrayIntSet addedSet=nodeManager.getCowRelationshipAddMap(this,type.name());
  if (addedSet != null) {
    addedSet.remove(relId);
  }
  ArrayIntSet relationshipSet=nodeManager.getCowRelationshipRemoveMap(this,type.name(),true);
  relationshipSet.add(relId);
}",0.9265536723163842
155196,"void addRelationship(RelationshipType type,int relId){
  if (getCowTxId() == null) {
    setupCowTx();
  }
  ArrayIntSet relationshipSet=nodeManager.getCowRelationshipAddMap(this,type.name(),true);
  relationshipSet.add(relId);
}","void addRelationship(RelationshipType type,int relId){
  setupCowTx();
  ArrayIntSet relationshipSet=nodeManager.getCowRelationshipAddMap(this,type.name(),true);
  relationshipSet.add(relId);
}",0.914691943127962
155197,"@Override protected void commitCowMaps(){
  super.commitCowMaps();
  if (cowRelationshipMap != null) {
    relationshipMap=cowRelationshipMap;
    cowRelationshipMap=null;
  }
}","@Override protected void commitCowMaps(){
  super.commitCowMaps();
  ArrayMap<String,ArrayIntSet> newMap=new ArrayMap<String,ArrayIntSet>();
  if (relationshipMap != null) {
    for (    String type : relationshipMap.keySet()) {
      ArrayIntSet source=relationshipMap.get(type);
      ArrayIntSet dest=new ArrayIntSet();
      ArrayIntSet skip=null;
      if (cowRelationshipRemoveMap != null) {
        skip=cowRelationshipRemoveMap.get(type);
      }
      for (      int relId : source.values()) {
        if (skip == null || !skip.contains(relId)) {
          dest.add(relId);
        }
      }
      if (dest.size() > 0) {
        newMap.put(type,dest);
      }
    }
  }
  if (cowRelationshipAddMap != null) {
    for (    String type : cowRelationshipAddMap.keySet()) {
      ArrayIntSet source=cowRelationshipAddMap.get(type);
      ArrayIntSet dest=newMap.get(type);
      if (dest == null) {
        dest=new ArrayIntSet();
        newMap.put(type,dest);
      }
      for (      int relId : source.values()) {
        dest.add(relId);
      }
    }
  }
  cowRelationshipAddMap=null;
  cowRelationshipRemoveMap=null;
  relationshipMap=newMap;
}",0.2265566391597899
155198,"/** 
 * If object <CODE>node</CODE> is a node, 0 is returned if <CODE>this</CODE> node id equals <CODE>node's</CODE> node id, 1 if <CODE>this</CODE>  node id is greater and -1 else. <p> If <CODE>node</CODE> isn't a node a ClassCastException will be thrown.
 * @param node the node to compare this node with
 * @return 0 if equal id, 1 if this id is greater else -1
 */
public int compareTo(Node n){
  long ourId=(long)this.getId(), theirId=(long)n.getId();
  if (ourId < theirId) {
    return -1;
  }
 else   if (ourId > theirId) {
    return 1;
  }
 else {
    return 0;
  }
}","/** 
 * If object <CODE>node</CODE> is a node, 0 is returned if <CODE>this</CODE> node id equals <CODE>node's</CODE> node id, 1 if <CODE>this</CODE>  node id is greater and -1 else. <p> If <CODE>node</CODE> isn't a node a ClassCastException will be thrown.
 * @param node the node to compare this node with
 * @return 0 if equal id, 1 if this id is greater else -1
 */
public int compareTo(Node n){
  long ourId=this.getId(), theirId=n.getId();
  if (ourId < theirId) {
    return -1;
  }
 else   if (ourId > theirId) {
    return 1;
  }
 else {
    return 0;
  }
}",0.989492119089317
155199,"public Iterable<Relationship> getRelationships(RelationshipType type,Direction dir){
  if (dir == Direction.BOTH) {
    return getRelationships(type);
  }
  ArrayMap<String,ArrayIntSet> mapToCheck=null;
  if (cowRelationshipMap != null && cowTxId == nodeManager.getTransaction()) {
    mapToCheck=cowRelationshipMap;
  }
 else {
    ensureFullRelationships();
    mapToCheck=relationshipMap;
  }
  ArrayIntSet relationshipSet=mapToCheck.get(type.name());
  if (relationshipSet == null) {
    return Collections.emptyList();
  }
  int[] ids=new int[relationshipSet.size()];
  int position=0;
  for (  int relId : relationshipSet.values()) {
    ids[position++]=relId;
  }
  return new RelationshipIterator(ids,this,dir,nodeManager);
}","public Iterable<Relationship> getRelationships(RelationshipType type,Direction dir){
  boolean checkCow=false;
  if (cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  ArrayIntSet source=relationshipMap.get(type.name());
  if (source != null) {
    for (    int relId : source.values()) {
      if (checkCow && cowRelationshipRemoveMap != null) {
        ArrayIntSet skip=cowRelationshipRemoveMap.get(type.name());
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      relIds.add(relId);
    }
  }
  if (checkCow && cowRelationshipAddMap != null) {
    source=cowRelationshipAddMap.get(type.name());
    if (source != null) {
      for (      int relId : source.values()) {
        relIds.add(relId);
      }
    }
  }
  return new RelationshipArrayIntSetIterator(relIds,this,dir,nodeManager);
}",0.1618357487922705
155200,"@Override protected void rollbackCowMaps(){
  super.rollbackCowMaps();
  cowRelationshipMap=null;
}","@Override protected void rollbackCowMaps(){
  super.rollbackCowMaps();
  cowRelationshipAddMap=null;
  cowRelationshipRemoveMap=null;
}",0.8461538461538461
155201,"boolean internalHasRelationships(){
  ArrayMap<String,ArrayIntSet> mapToCheck=null;
  if (cowRelationshipMap != null && cowTxId == nodeManager.getTransaction()) {
    mapToCheck=cowRelationshipMap;
  }
 else {
    ensureFullRelationships();
    mapToCheck=relationshipMap;
  }
  if (mapToCheck != null) {
    return (mapToCheck.size() > 0);
  }
  return false;
}","boolean internalHasRelationships(){
  boolean checkCow=false;
  if (cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  for (  String type : relationshipMap.keySet()) {
    ArrayIntSet source=relationshipMap.get(type);
    for (    int relId : source.values()) {
      if (checkCow && cowRelationshipRemoveMap != null) {
        ArrayIntSet skip=cowRelationshipRemoveMap.get(type);
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      return true;
    }
  }
  if (checkCow && cowRelationshipAddMap != null) {
    for (    String type : cowRelationshipAddMap.keySet()) {
      ArrayIntSet source=cowRelationshipAddMap.get(type);
      if (source.size() > 0) {
        return true;
      }
    }
  }
  return false;
}",0.2290456431535269
155202,"NeoStoreXaConnection(NeoStore neoStore,XaResourceManager xaRm){
  super(xaRm);
  this.neoStore=neoStore;
  this.nodeConsumer=new NodeEventConsumerImpl(this);
  this.relConsumer=new RelationshipEventConsumerImpl(this);
  this.relTypeConsumer=new RelationshipTypeEventConsumerImpl(this);
  this.propIndexConsumer=new PropertyIndexEventConsumerImpl(this);
  this.xaResource=new NeoStoreXaResource(neoStore.getStorageFileName(),xaRm);
}","NeoStoreXaConnection(NeoStore neoStore,XaResourceManager xaRm,byte branchId[]){
  super(xaRm);
  this.neoStore=neoStore;
  this.nodeConsumer=new NodeEventConsumerImpl(this);
  this.relConsumer=new RelationshipEventConsumerImpl(this);
  this.relTypeConsumer=new RelationshipTypeEventConsumerImpl(this);
  this.propIndexConsumer=new PropertyIndexEventConsumerImpl(this);
  this.xaResource=new NeoStoreXaResource(neoStore.getStorageFileName(),xaRm,branchId);
}",0.9718785151856018
155203,"NeoStoreXaResource(Object identifier,XaResourceManager xaRm){
  super(xaRm);
  this.identifier=identifier;
}","NeoStoreXaResource(Object identifier,XaResourceManager xaRm,byte branchId[]){
  super(xaRm,branchId);
  this.identifier=identifier;
}",0.8962655601659751
155204,"public XaConnection getXaConnection(){
  return new NeoStoreXaConnection(neoStore,xaContainer.getResourceManager());
}","public XaConnection getXaConnection(){
  return new NeoStoreXaConnection(neoStore,xaContainer.getResourceManager(),branchId);
}",0.963265306122449
155205,"byte[] getBranchId(XAResource xaRes){
  return xaDsManager.getBranchId(xaRes);
}","byte[] getBranchId(XAResource xaRes){
  if (xaRes instanceof XaResource) {
    byte branchId[]=((XaResource)xaRes).getBranchId();
    if (branchId != null) {
      return branchId;
    }
  }
  return xaDsManager.getBranchId(xaRes);
}",0.5111821086261981
155206,"synchronized byte[] getBranchId(XAResource xaResource){
  Iterator<Map.Entry<String,XaDataSource>> itr=dataSources.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry<String,XaDataSource> entry=itr.next();
    XaDataSource dataSource=entry.getValue();
    XAResource resource=dataSource.getXaConnection().getXaResource();
    try {
      if (resource.isSameRM(xaResource)) {
        String name=entry.getKey();
        return sourceIdMapping.get(name);
      }
    }
 catch (    XAException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  throw new RuntimeException(""String_Node_Str"" + xaResource + ""String_Node_Str"");
}","synchronized byte[] getBranchId(XAResource xaResource){
  if (xaResource instanceof XaResource) {
    byte branchId[]=((XaResource)xaResource).getBranchId();
    if (branchId != null) {
      return branchId;
    }
  }
  Iterator<Map.Entry<String,XaDataSource>> itr=dataSources.entrySet().iterator();
  while (itr.hasNext()) {
    Map.Entry<String,XaDataSource> entry=itr.next();
    XaDataSource dataSource=entry.getValue();
    XAResource resource=dataSource.getXaConnection().getXaResource();
    try {
      if (resource.isSameRM(xaResource)) {
        String name=entry.getKey();
        return sourceIdMapping.get(name);
      }
    }
 catch (    XAException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
  throw new RuntimeException(""String_Node_Str"" + xaResource + ""String_Node_Str"");
}",0.8893414799728445
155207,"/** 
 * Public for testing purpose. Do not use.
 */
public synchronized void registerDataSource(String name,XaDataSource dataSource,byte branchId[]){
  dataSources.put(name,dataSource);
  branchIdMapping.put(new String(branchId),dataSource);
  sourceIdMapping.put(name,branchId);
}","/** 
 * Public for testing purpose. Do not use.
 */
public synchronized void registerDataSource(String name,XaDataSource dataSource,byte branchId[]){
  dataSource.setBranchId(branchId);
  dataSources.put(name,dataSource);
  branchIdMapping.put(new String(branchId),dataSource);
  sourceIdMapping.put(name,branchId);
}",0.939799331103679
155208,"protected XaResourceHelpImpl(XaResourceManager xaRm){
  this.xaRm=xaRm;
}","protected XaResourceHelpImpl(XaResourceManager xaRm,byte branchId[]){
  this.xaRm=xaRm;
  this.branchId=branchId;
}",0.776595744680851
155209,"DummyXaResource(XaResourceManager xaRm){
  super(xaRm);
}","DummyXaResource(XaResourceManager xaRm){
  super(xaRm,null);
}",0.957983193277311
155210,"public void releaseCows(Transaction cowTxId,int param){
  NeoPrimitiveElement element=cowMap.get(cowTxId);
  if (element == null) {
    return;
  }
  ArrayMap<Integer,CowNodeElement> cowNodeElements=element.nodes;
  for (  int nodeId : cowNodeElements.keySet()) {
    NodeImpl node=nodeManager.getNodeIfCached(nodeId);
    if (node != null && node.getCowTxId() != null) {
      if (param == Status.STATUS_COMMITTED) {
        node.commitCowMaps();
      }
 else       if (param == Status.STATUS_ROLLEDBACK) {
        node.rollbackCowMaps();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + param);
      }
    }
  }
  ArrayMap<Integer,CowRelElement> cowRelElements=element.relationships;
  for (  int relId : cowRelElements.keySet()) {
    RelationshipImpl rel=nodeManager.getRelIfCached(relId);
    if (rel != null && rel.getCowTxId() != null) {
      if (param == Status.STATUS_COMMITTED) {
        rel.commitCowMaps();
      }
 else       if (param == Status.STATUS_ROLLEDBACK) {
        rel.rollbackCowMaps();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + param);
      }
    }
  }
  cowMap.remove(cowTxId);
}","public void releaseCows(Transaction cowTxId,int param){
  NeoPrimitiveElement element=cowMap.get(cowTxId);
  if (element == null) {
    return;
  }
  ArrayMap<Integer,CowNodeElement> cowNodeElements=element.nodes;
  for (  int nodeId : cowNodeElements.keySet()) {
    NodeImpl node=nodeManager.getNodeIfCached(nodeId);
    if (node != null) {
      if (param == Status.STATUS_COMMITTED) {
        node.commitCowMaps();
      }
 else       if (param == Status.STATUS_ROLLEDBACK) {
        node.rollbackCowMaps();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + param);
      }
    }
  }
  ArrayMap<Integer,CowRelElement> cowRelElements=element.relationships;
  for (  int relId : cowRelElements.keySet()) {
    RelationshipImpl rel=nodeManager.getRelIfCached(relId);
    if (rel != null) {
      if (param == Status.STATUS_COMMITTED) {
        rel.commitCowMaps();
      }
 else       if (param == Status.STATUS_ROLLEDBACK) {
        rel.rollbackCowMaps();
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + param);
      }
    }
  }
  cowMap.remove(cowTxId);
}",0.9748121961997348
155211,"private void adaptCaches(){
  for (  AdaptiveCacheElement element : getCaches()) {
    adaptCache(element.getCache());
  }
}","public void adaptCaches(){
  List<AdaptiveCacheElement> copy=new LinkedList<AdaptiveCacheElement>();
synchronized (this) {
    copy.addAll(caches);
  }
  for (  AdaptiveCacheElement element : copy) {
    adaptCache(element);
  }
}",0.4406779661016949
155212,"int getAdaptiveCacheElementIndex(Cache<?,?> cache){
  int i=0;
  for (  AdaptiveCacheElement element : caches) {
    if (element.getCache() == cache) {
      return i;
    }
    i++;
  }
  return -1;
}","synchronized AdaptiveCacheElement getAdaptiveCacheElementIndex(Cache<?,?> cache){
  for (  AdaptiveCacheElement element : caches) {
    if (element.getCache() == cache) {
      return element;
    }
  }
  return null;
}",0.7904761904761904
155213,"public synchronized void registerCache(Cache<?,?> cache,float ratio,int minSize){
  if (cache == null || ratio >= 1 || ratio <= 0 || minSize < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + cache + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize);
  }
  AdaptiveCacheElement element=new AdaptiveCacheElement(cache,ratio,minSize);
  int elementIndex=getAdaptiveCacheElementIndex(cache);
  if (elementIndex == -1) {
    caches.add(element);
  }
  cache.setAdaptiveStatus(true);
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize+ ""String_Node_Str"");
}","public synchronized void registerCache(Cache<?,?> cache,float ratio,int minSize){
  if (cache == null || ratio >= 1 || ratio <= 0 || minSize < 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + cache + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize);
  }
  for (  AdaptiveCacheElement element : caches) {
    if (element.getCache() == cache) {
      log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str"");
      return;
    }
  }
  AdaptiveCacheElement element=new AdaptiveCacheElement(cache,ratio,minSize);
  caches.add(element);
  cache.setAdaptiveStatus(true);
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str""+ ratio+ ""String_Node_Str""+ minSize+ ""String_Node_Str"");
}",0.744776119402985
155214,"public synchronized void unregisterCache(Cache<?,?> cache){
  if (cache == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int elementIndex=getAdaptiveCacheElementIndex(cache);
  if (elementIndex != -1) {
    caches.remove(elementIndex);
  }
  cache.setAdaptiveStatus(false);
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str"");
}","public synchronized void unregisterCache(Cache<?,?> cache){
  if (cache == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Iterator<AdaptiveCacheElement> itr=caches.iterator();
  while (itr.hasNext()) {
    AdaptiveCacheElement element=itr.next();
    if (element.getCache() == cache) {
      itr.remove();
      break;
    }
  }
  log.fine(""String_Node_Str"" + cache.getName() + ""String_Node_Str"");
}",0.6834170854271356
155215,"public Object getProperty(String key,Object defaultValue){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  for (  PropertyIndex index : nodeManager.index(key)) {
    if (skipMap != null && skipMap.get(index.getKeyId()) != null) {
      return defaultValue;
    }
    if (addMap != null) {
      Property property=addMap.get(index.getKeyId());
      if (property != null) {
        return getPropertyValue(property);
      }
    }
    Property property=propertyMap.get(index.getKeyId());
    if (property != null) {
      return getPropertyValue(property);
    }
  }
  Property property=getSlowProperty(addMap,skipMap,key);
  if (property != null) {
    return getPropertyValue(property);
  }
  return defaultValue;
}","public Object getProperty(String key,Object defaultValue){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId != null && cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  for (  PropertyIndex index : nodeManager.index(key)) {
    if (skipMap != null && skipMap.get(index.getKeyId()) != null) {
      return defaultValue;
    }
    if (addMap != null) {
      Property property=addMap.get(index.getKeyId());
      if (property != null) {
        return getPropertyValue(property);
      }
    }
    Property property=propertyMap.get(index.getKeyId());
    if (property != null) {
      return getPropertyValue(property);
    }
  }
  Property property=getSlowProperty(addMap,skipMap,key);
  if (property != null) {
    return getPropertyValue(property);
  }
  return defaultValue;
}",0.9908079342041606
155216,"public Iterable<Object> getPropertyValues(){
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  List<Object> values=new ArrayList<Object>();
  for (  Integer index : propertyMap.keySet()) {
    if (skipMap != null && skipMap.get(index) != null) {
      continue;
    }
    if (addMap != null && addMap.get(index) != null) {
      continue;
    }
    values.add(propertyMap.get(index).getValue());
  }
  if (addMap != null) {
    for (    Property property : addMap.values()) {
      values.add(property.getValue());
    }
  }
  return values;
}","public Iterable<Object> getPropertyValues(){
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId != null && cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  List<Object> values=new ArrayList<Object>();
  for (  Integer index : propertyMap.keySet()) {
    if (skipMap != null && skipMap.get(index) != null) {
      continue;
    }
    if (addMap != null && addMap.get(index) != null) {
      continue;
    }
    values.add(propertyMap.get(index).getValue());
  }
  if (addMap != null) {
    for (    Property property : addMap.values()) {
      values.add(property.getValue());
    }
  }
  return values;
}",0.9877340219496448
155217,"public boolean hasProperty(String key){
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  for (  PropertyIndex index : nodeManager.index(key)) {
    if (skipMap != null && skipMap.get(index.getKeyId()) != null) {
      return false;
    }
    if (addMap != null) {
      Property property=addMap.get(index.getKeyId());
      if (property != null) {
        return true;
      }
    }
    Property property=propertyMap.get(index.getKeyId());
    if (property != null) {
      return true;
    }
  }
  Property property=getSlowProperty(addMap,skipMap,key);
  if (property != null) {
    return true;
  }
  return false;
}","public boolean hasProperty(String key){
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId != null && cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  for (  PropertyIndex index : nodeManager.index(key)) {
    if (skipMap != null && skipMap.get(index.getKeyId()) != null) {
      return false;
    }
    if (addMap != null) {
      Property property=addMap.get(index.getKeyId());
      if (property != null) {
        return true;
      }
    }
    Property property=propertyMap.get(index.getKeyId());
    if (property != null) {
      return true;
    }
  }
  Property property=getSlowProperty(addMap,skipMap,key);
  if (property != null) {
    return true;
  }
  return false;
}",0.7019400352733686
155218,"public Iterable<String> getPropertyKeys(){
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  List<String> keys=new ArrayList<String>();
  for (  Integer index : propertyMap.keySet()) {
    if (skipMap != null && skipMap.get(index) != null) {
      continue;
    }
    if (addMap != null && addMap.get(index) != null) {
      continue;
    }
    keys.add(nodeManager.getIndexFor(index).getKey());
  }
  if (addMap != null) {
    for (    Integer index : addMap.keySet()) {
      keys.add(nodeManager.getIndexFor(index).getKey());
    }
  }
  return keys;
}","public Iterable<String> getPropertyKeys(){
  ArrayMap<Integer,Property> skipMap=null;
  ArrayMap<Integer,Property> addMap=null;
  if (cowTxId != null && cowTxId == nodeManager.getTransaction()) {
    skipMap=nodeManager.getCowPropertyRemoveMap(this);
    addMap=nodeManager.getCowPropertyAddMap(this);
  }
  ensureFullProperties();
  List<String> keys=new ArrayList<String>();
  for (  Integer index : propertyMap.keySet()) {
    if (skipMap != null && skipMap.get(index) != null) {
      continue;
    }
    if (addMap != null && addMap.get(index) != null) {
      continue;
    }
    keys.add(nodeManager.getIndexFor(index).getKey());
  }
  if (addMap != null) {
    for (    Integer index : addMap.keySet()) {
      keys.add(nodeManager.getIndexFor(index).getKey());
    }
  }
  return keys;
}",0.9879211697393516
155219,"public Iterable<Relationship> getRelationships(RelationshipType type,Direction dir){
  boolean checkCow=false;
  if (cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  ArrayIntSet source=relationshipMap.get(type.name());
  if (source != null) {
    for (    int relId : source.values()) {
      if (checkCow) {
        ArrayIntSet skip=nodeManager.getCowRelationshipRemoveMap(this,type.name());
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      relIds.add(relId);
    }
  }
  if (checkCow) {
    source=nodeManager.getCowRelationshipAddMap(this,type.name());
    if (source != null) {
      for (      int relId : source.values()) {
        relIds.add(relId);
      }
    }
  }
  return new RelationshipArrayIntSetIterator(relIds,this,dir,nodeManager);
}","public Iterable<Relationship> getRelationships(RelationshipType type,Direction dir){
  boolean checkCow=false;
  if (cowTxId != null && cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  ArrayIntSet source=relationshipMap.get(type.name());
  if (source != null) {
    for (    int relId : source.values()) {
      if (checkCow) {
        ArrayIntSet skip=nodeManager.getCowRelationshipRemoveMap(this,type.name());
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      relIds.add(relId);
    }
  }
  if (checkCow) {
    source=nodeManager.getCowRelationshipAddMap(this,type.name());
    if (source != null) {
      for (      int relId : source.values()) {
        relIds.add(relId);
      }
    }
  }
  return new RelationshipArrayIntSetIterator(relIds,this,dir,nodeManager);
}",0.989391401451703
155220,"boolean internalHasRelationships(){
  boolean checkCow=false;
  if (cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  for (  String type : relationshipMap.keySet()) {
    ArrayIntSet source=relationshipMap.get(type);
    for (    int relId : source.values()) {
      if (checkCow) {
        ArrayIntSet skip=nodeManager.getCowRelationshipRemoveMap(this,type);
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      return true;
    }
  }
  if (checkCow) {
    ArrayMap<String,ArrayIntSet> cowRelationshipAddMap=nodeManager.getCowRelationshipAddMap(this);
    if (cowRelationshipAddMap != null) {
      for (      String type : cowRelationshipAddMap.keySet()) {
        ArrayIntSet source=cowRelationshipAddMap.get(type);
        if (source.size() > 0) {
          return true;
        }
      }
    }
  }
  return false;
}","boolean internalHasRelationships(){
  boolean checkCow=false;
  if (cowTxId != null && cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  for (  String type : relationshipMap.keySet()) {
    ArrayIntSet source=relationshipMap.get(type);
    for (    int relId : source.values()) {
      if (checkCow) {
        ArrayIntSet skip=nodeManager.getCowRelationshipRemoveMap(this,type);
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      return true;
    }
  }
  if (checkCow) {
    ArrayMap<String,ArrayIntSet> cowRelationshipAddMap=nodeManager.getCowRelationshipAddMap(this);
    if (cowRelationshipAddMap != null) {
      for (      String type : cowRelationshipAddMap.keySet()) {
        ArrayIntSet source=cowRelationshipAddMap.get(type);
        if (source.size() > 0) {
          return true;
        }
      }
    }
  }
  return false;
}",0.99009900990099
155221,"@Override protected void commitCowMaps(){
  super.commitCowMaps();
  ArrayMap<String,ArrayIntSet> newMap=new ArrayMap<String,ArrayIntSet>();
  if (relationshipMap != null) {
    for (    String type : relationshipMap.keySet()) {
      ArrayIntSet source=relationshipMap.get(type);
      ArrayIntSet dest=new ArrayIntSet();
      ArrayIntSet skip=null;
      if (cowRelationshipRemoveMap != null) {
        skip=cowRelationshipRemoveMap.get(type);
      }
      for (      int relId : source.values()) {
        if (skip == null || !skip.contains(relId)) {
          dest.add(relId);
        }
      }
      if (dest.size() > 0) {
        newMap.put(type,dest);
      }
    }
  }
  if (cowRelationshipAddMap != null) {
    for (    String type : cowRelationshipAddMap.keySet()) {
      ArrayIntSet source=cowRelationshipAddMap.get(type);
      ArrayIntSet dest=newMap.get(type);
      if (dest == null) {
        dest=new ArrayIntSet();
        newMap.put(type,dest);
      }
      for (      int relId : source.values()) {
        dest.add(relId);
      }
    }
  }
  cowRelationshipAddMap=null;
  cowRelationshipRemoveMap=null;
  relationshipMap=newMap;
}","@Override protected void commitCowMaps(){
  super.commitCowMaps();
  lock.writeLock().lock();
  try {
    if (relationshipMap == null) {
      relationshipMap=new ArrayMap<String,ArrayIntSet>();
    }
    if (cowRelationshipAddMap != null) {
      for (      String type : cowRelationshipAddMap.keySet()) {
        ArrayIntSet source=cowRelationshipAddMap.get(type);
        if (source.size() == 0) {
          continue;
        }
        ArrayIntSet dest=relationshipMap.get(type);
        if (dest == null) {
          dest=new ArrayIntSet();
          relationshipMap.put(type,dest);
        }
        for (        int relId : source.values()) {
          dest.add(relId);
        }
      }
    }
    if (cowRelationshipRemoveMap != null && relationshipMap != null) {
      for (      String type : cowRelationshipRemoveMap.keySet()) {
        ArrayIntSet source=cowRelationshipRemoveMap.get(type);
        ArrayIntSet dest=relationshipMap.get(type);
        if (dest == null) {
          continue;
        }
        for (        int relId : source.values()) {
          dest.remove(relId);
        }
      }
    }
    cowRelationshipAddMap=null;
    cowRelationshipRemoveMap=null;
  }
  finally {
    lock.writeLock().unlock();
  }
}",0.1303802758044296
155222,"public Iterable<Relationship> getRelationships(RelationshipType type,Direction dir){
  boolean checkCow=false;
  if (cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  ArrayIntSet source=relationshipMap.get(type.name());
  if (source != null) {
    for (    int relId : source.values()) {
      if (checkCow && cowRelationshipRemoveMap != null) {
        ArrayIntSet skip=cowRelationshipRemoveMap.get(type.name());
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      relIds.add(relId);
    }
  }
  if (checkCow && cowRelationshipAddMap != null) {
    source=cowRelationshipAddMap.get(type.name());
    if (source != null) {
      for (      int relId : source.values()) {
        relIds.add(relId);
      }
    }
  }
  return new RelationshipArrayIntSetIterator(relIds,this,dir,nodeManager);
}","public Iterable<Relationship> getRelationships(RelationshipType type,Direction dir){
  lock.readLock().lock();
  try {
    boolean checkCow=false;
    if (cowTxId == nodeManager.getTransaction()) {
      checkCow=true;
    }
    ensureFullRelationships();
    ArrayIntSet relIds=new ArrayIntSet();
    ArrayIntSet source=relationshipMap.get(type.name());
    if (source != null) {
      for (      int relId : source.values()) {
        if (checkCow && cowRelationshipRemoveMap != null) {
          ArrayIntSet skip=cowRelationshipRemoveMap.get(type.name());
          if (skip != null && skip.contains(relId)) {
            continue;
          }
        }
        relIds.add(relId);
      }
    }
    if (checkCow && cowRelationshipAddMap != null) {
      source=cowRelationshipAddMap.get(type.name());
      if (source != null) {
        for (        int relId : source.values()) {
          relIds.add(relId);
        }
      }
    }
    return new RelationshipArrayIntSetIterator(relIds,this,dir,nodeManager);
  }
  finally {
    lock.readLock().unlock();
  }
}",0.8802816901408451
155223,"boolean internalHasRelationships(){
  boolean checkCow=false;
  if (cowTxId == nodeManager.getTransaction()) {
    checkCow=true;
  }
  ensureFullRelationships();
  ArrayIntSet relIds=new ArrayIntSet();
  for (  String type : relationshipMap.keySet()) {
    ArrayIntSet source=relationshipMap.get(type);
    for (    int relId : source.values()) {
      if (checkCow && cowRelationshipRemoveMap != null) {
        ArrayIntSet skip=cowRelationshipRemoveMap.get(type);
        if (skip != null && skip.contains(relId)) {
          continue;
        }
      }
      return true;
    }
  }
  if (checkCow && cowRelationshipAddMap != null) {
    for (    String type : cowRelationshipAddMap.keySet()) {
      ArrayIntSet source=cowRelationshipAddMap.get(type);
      if (source.size() > 0) {
        return true;
      }
    }
  }
  return false;
}","boolean internalHasRelationships(){
  lock.readLock().lock();
  try {
    boolean checkCow=false;
    if (cowTxId == nodeManager.getTransaction()) {
      checkCow=true;
    }
    ensureFullRelationships();
    ArrayIntSet relIds=new ArrayIntSet();
    for (    String type : relationshipMap.keySet()) {
      ArrayIntSet source=relationshipMap.get(type);
      for (      int relId : source.values()) {
        if (checkCow && cowRelationshipRemoveMap != null) {
          ArrayIntSet skip=cowRelationshipRemoveMap.get(type);
          if (skip != null && skip.contains(relId)) {
            continue;
          }
        }
        return true;
      }
    }
    if (checkCow && cowRelationshipAddMap != null) {
      for (      String type : cowRelationshipAddMap.keySet()) {
        ArrayIntSet source=cowRelationshipAddMap.get(type);
        if (source.size() > 0) {
          return true;
        }
      }
    }
    return false;
  }
  finally {
    lock.readLock().unlock();
  }
}",0.7879781420765027
155224,"Config(){
  eventModule=new EventModule();
  cacheManager=new AdaptiveCacheManager();
  txModule=new TxModule(eventModule.getEventManager());
  lockManager=new LockManager();
  lockReleaser=new LockReleaser(lockManager,txModule.getTxManager());
  persistenceModule=new PersistenceModule(txModule.getTxManager());
  idGeneratorModule=new IdGeneratorModule();
  neoModule=new NeoModule(cacheManager,lockManager,txModule.getTxManager(),lockReleaser,eventModule.getEventManager(),persistenceModule.getPersistenceManager(),idGeneratorModule.getIdGenerator());
}","Config(String storeDir){
  this.storeDir=storeDir;
  eventModule=new EventModule();
  cacheManager=new AdaptiveCacheManager();
  txModule=new TxModule(eventModule.getEventManager(),storeDir);
  lockManager=new LockManager();
  lockReleaser=new LockReleaser(lockManager,txModule.getTxManager());
  persistenceModule=new PersistenceModule(txModule.getTxManager());
  idGeneratorModule=new IdGeneratorModule();
  neoModule=new NeoModule(cacheManager,lockManager,txModule.getTxManager(),lockReleaser,eventModule.getEventManager(),persistenceModule.getPersistenceManager(),idGeneratorModule.getIdGenerator());
}",0.9569707401032702
155225,"/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @param configuration parameters
 * @throws StartupFailedException if unable to start
 */
public void start(Map<String,String> stringParams){
  if (started) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Map<Object,Object> params=getDefaultParams();
  for (  String key : stringParams.keySet()) {
    params.put(key,stringParams.get(key));
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  storeDir=convertFileSeparators(storeDir);
  String separator=System.getProperty(""String_Node_Str"");
  String store=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",store);
  params.put(""String_Node_Str"",String.valueOf(create));
  String logicalLog=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",logicalLog);
  byte resourceId[]=""String_Node_Str"".getBytes();
  params.put(EventManager.class,config.getEventModule().getEventManager());
  params.put(LockManager.class,config.getLockManager());
  params.put(LockReleaser.class,config.getLockReleaser());
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start(persistenceSource);
  persistenceSource.start(config.getTxModule().getXaDataSourceManager());
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}","/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @param configuration parameters
 * @throws StartupFailedException if unable to start
 */
public void start(Map<String,String> stringParams){
  if (started) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  Map<Object,Object> params=getDefaultParams();
  for (  String key : stringParams.keySet()) {
    params.put(key,stringParams.get(key));
  }
  config=new Config(storeDir);
  storeDir=convertFileSeparators(storeDir);
  String separator=System.getProperty(""String_Node_Str"");
  String store=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",store);
  params.put(""String_Node_Str"",String.valueOf(create));
  String logicalLog=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",logicalLog);
  byte resourceId[]=""String_Node_Str"".getBytes();
  params.put(EventManager.class,config.getEventModule().getEventManager());
  params.put(LockManager.class,config.getLockManager());
  params.put(LockReleaser.class,config.getLockReleaser());
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start(persistenceSource);
  persistenceSource.start(config.getTxModule().getXaDataSourceManager());
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}",0.9896713615023476
155226,"public boolean hasNext(){
  if (nextElement != null) {
    return true;
  }
  do {
    if (nextPosition < relIds.length) {
      try {
        Relationship possibleElement=nodeManager.getRelationshipById(relIds[nextPosition++]);
        if (direction == Direction.INCOMING && possibleElement.getEndNode().equals(fromNode)) {
          nextElement=possibleElement;
        }
 else         if (direction == Direction.OUTGOING && possibleElement.getStartNode().equals(fromNode)) {
          nextElement=possibleElement;
        }
 else         if (direction == Direction.BOTH) {
          nextElement=possibleElement;
        }
      }
 catch (      Throwable t) {
        log.log(Level.INFO,""String_Node_Str"" + relIds[nextPosition - 1],t);
      }
    }
  }
 while (nextElement == null && nextPosition < relIds.length);
  return nextElement != null;
}","public boolean hasNext(){
  if (nextElement != null) {
    return true;
  }
  do {
    if (nextPosition < relIds.length) {
      try {
        Relationship possibleElement=nodeManager.getRelationshipById(relIds[nextPosition++]);
        if (direction == Direction.INCOMING && possibleElement.getEndNode().equals(fromNode)) {
          nextElement=possibleElement;
        }
 else         if (direction == Direction.OUTGOING && possibleElement.getStartNode().equals(fromNode)) {
          nextElement=possibleElement;
        }
 else         if (direction == Direction.BOTH) {
          nextElement=possibleElement;
        }
      }
 catch (      Throwable t) {
        log.log(Level.FINE,""String_Node_Str"" + relIds[nextPosition - 1],t);
      }
    }
  }
 while (nextElement == null && nextPosition < relIds.length);
  return nextElement != null;
}",0.9976442873969376
155227,"synchronized TxLog getTxLog() throws IOException {
  if (txLog.getRecordCount() > maxTxLogRecordCount) {
    if (txLog.getName().equals(txLog1FileName)) {
      txLog.switchToLogFile(txLog2FileName);
      changeActiveLog(txLog2FileName);
    }
 else     if (txLog.getName().equals(txLog2FileName)) {
      txLog.switchToLogFile(txLog1FileName);
      changeActiveLog(txLog1FileName);
    }
 else {
      tmOk=false;
      log.severe(""String_Node_Str"" + txLog.getName() + ""String_Node_Str"");
      throw new IOException(""String_Node_Str"" + txLog.getName() + ""String_Node_Str""+ txLog1FileName+ ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str"");
    }
  }
  return txLog;
}","synchronized TxLog getTxLog() throws IOException {
  if (txLog.getRecordCount() > maxTxLogRecordCount) {
    if (txLog.getName().endsWith(txLog1FileName)) {
      txLog.switchToLogFile(txLogDir + separator + txLog2FileName);
      changeActiveLog(txLog2FileName);
    }
 else     if (txLog.getName().endsWith(txLog2FileName)) {
      txLog.switchToLogFile(txLogDir + separator + txLog1FileName);
      changeActiveLog(txLog1FileName);
    }
 else {
      tmOk=false;
      log.severe(""String_Node_Str"" + txLog.getName() + ""String_Node_Str"");
      throw new IOException(""String_Node_Str"" + txLog.getName() + ""String_Node_Str""+ txLog1FileName+ ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str"");
    }
  }
  return txLog;
}",0.95
155228,"void init(XaDataSourceManager xaDsManager){
  this.xaDsManager=xaDsManager;
  txThreadMap=new ArrayMap<Thread,TransactionImpl>(5,true,true);
  String txLogDir=System.getProperty(""String_Node_Str"");
  if (txLogDir == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String separator=System.getProperty(""String_Node_Str"");
  logSwitcherFileName=txLogDir + separator + ""String_Node_Str"";
  txLog1FileName=txLogDir + separator + ""String_Node_Str"";
  txLog2FileName=txLogDir + separator + ""String_Node_Str"";
  try {
    if (new File(logSwitcherFileName).exists()) {
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      byte fileName[]=new byte[256];
      ByteBuffer buf=ByteBuffer.wrap(fileName);
      fc.read(buf);
      String currentTxLog=new String(fileName).trim();
      if (!new File(currentTxLog).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + currentTxLog + ""String_Node_Str"");
      }
      txLog=new TxLog(currentTxLog);
    }
 else {
      if (new File(txLog1FileName).exists() || new File(txLog2FileName).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + txLog1FileName + ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      ByteBuffer buf=ByteBuffer.wrap(txLog1FileName.getBytes(""String_Node_Str""));
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      fc.write(buf);
      txLog=new TxLog(txLog1FileName);
      fc.force(true);
      fc.close();
    }
    Iterator<List<TxLog.Record>> danglingRecordList=txLog.getDanglingRecords();
    if (danglingRecordList.hasNext()) {
      log.warning(""String_Node_Str"" + ""String_Node_Str"");
      recover(danglingRecordList);
    }
    getTxLog().truncate();
    tmOk=true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    throw new RuntimeException(e);
  }
}","void init(XaDataSourceManager xaDsManager){
  this.xaDsManager=xaDsManager;
  txThreadMap=new ArrayMap<Thread,TransactionImpl>(5,true,true);
  separator=System.getProperty(""String_Node_Str"");
  logSwitcherFileName=txLogDir + separator + ""String_Node_Str"";
  txLog1FileName=""String_Node_Str"";
  txLog2FileName=""String_Node_Str"";
  try {
    if (new File(logSwitcherFileName).exists()) {
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      byte fileName[]=new byte[256];
      ByteBuffer buf=ByteBuffer.wrap(fileName);
      fc.read(buf);
      String currentTxLog=txLogDir + separator + new String(fileName).trim();
      if (!new File(currentTxLog).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + currentTxLog + ""String_Node_Str"");
      }
      txLog=new TxLog(currentTxLog);
    }
 else {
      if (new File(txLogDir + separator + txLog1FileName).exists() || new File(txLogDir + separator + txLog2FileName).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + txLog1FileName + ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      ByteBuffer buf=ByteBuffer.wrap(txLog1FileName.getBytes(""String_Node_Str""));
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      fc.write(buf);
      txLog=new TxLog(txLogDir + separator + txLog1FileName);
      fc.force(true);
      fc.close();
    }
    Iterator<List<TxLog.Record>> danglingRecordList=txLog.getDanglingRecords();
    if (danglingRecordList.hasNext()) {
      log.warning(""String_Node_Str"" + ""String_Node_Str"");
      recover(danglingRecordList);
    }
    getTxLog().truncate();
    tmOk=true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    throw new RuntimeException(e);
  }
}",0.841535686678691
155229,"TxManager(EventManager eventManager){
  this.eventManager=eventManager;
}","TxManager(EventManager eventManager,String txLogDir){
  this.eventManager=eventManager;
  this.txLogDir=txLogDir;
}",0.776595744680851
155230,"public TxModule(EventManager eventManager){
  this.txManager=new TxManager(eventManager);
  this.xaDsManager=new XaDataSourceManager();
}","public TxModule(EventManager eventManager,String txLogDir){
  this.txLogDir=txLogDir;
  this.txManager=new TxManager(eventManager,txLogDir);
  this.xaDsManager=new XaDataSourceManager();
}",0.8430769230769231
155231,"Traverser createTraverser(Order traversalOrder,NodeImpl node,RelationshipType[] types,Direction[] dirs,StopEvaluator stopEvaluator,ReturnableEvaluator returnableEvaluator){
  return traverserFactory.createTraverser(traversalOrder,node,types,dirs,stopEvaluator,returnableEvaluator);
}","Traverser createTraverser(Order traversalOrder,NodeImpl node,RelationshipType[] types,Direction[] dirs,StopEvaluator stopEvaluator,ReturnableEvaluator returnableEvaluator){
  return traverserFactory.createTraverser(traversalOrder,new NodeProxy((int)node.getId(),this),types,dirs,stopEvaluator,returnableEvaluator);
}",0.9348914858096828
155232,"private static <T>void collectClasses(Collection<Class<? extends T>> classes,Class<T> superClass,Collection<String> lookInThesePackages,String classPathToken){
  File directory=new File(classPathToken);
  if (!directory.exists()) {
    return;
  }
  try {
    if (directory.isDirectory()) {
      collectFromDirectory(classes,superClass,lookInThesePackages,""String_Node_Str"",directory);
    }
 else {
      JarFile jarFile=new JarFile(directory);
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=entries.nextElement();
        String entryName=fixJarEntryClassName(entry.getName());
        tryCollectClass(classes,superClass,lookInThesePackages,entryName);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + classPathToken,e);
  }
}","private static <T>void collectClasses(Collection<Class<? extends T>> classes,Class<? extends T> superClass,Collection<String> lookInThesePackages,String classPathToken){
  File directory=new File(classPathToken);
  if (!directory.exists()) {
    return;
  }
  try {
    if (directory.isDirectory()) {
      collectFromDirectory(classes,superClass,lookInThesePackages,""String_Node_Str"",directory);
    }
 else {
      JarFile jarFile=new JarFile(directory);
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=entries.nextElement();
        String entryName=fixJarEntryClassName(entry.getName());
        tryCollectClass(classes,superClass,lookInThesePackages,entryName);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"" + classPathToken,e);
  }
}",0.9941451990632318
155233,"private static <T>void collectFromDirectory(Collection<Class<? extends T>> classes,Class<T> superClass,Collection<String> lookInThesePackages,String prefix,File directory){
  boolean botherToBrowseFurtherDown=false;
  if (lookInThesePackages != null) {
    for (    String packageName : lookInThesePackages) {
      if (packageName.startsWith(prefix)) {
        botherToBrowseFurtherDown=true;
        break;
      }
    }
  }
 else {
    botherToBrowseFurtherDown=true;
  }
  if (!botherToBrowseFurtherDown) {
    return;
  }
  File[] files=directory.listFiles();
  if (files == null) {
    return;
  }
  for (  File file : files) {
    if (file.isDirectory()) {
      collectFromDirectory(classes,superClass,lookInThesePackages,addToPrefix(prefix,file.getName()),file);
    }
 else {
      String className=addToPrefix(prefix,file.getName());
      className=trimFromClassEnding(className);
      tryCollectClass(classes,superClass,lookInThesePackages,className);
    }
  }
}","private static <T>void collectFromDirectory(Collection<Class<? extends T>> classes,Class<? extends T> superClass,Collection<String> lookInThesePackages,String prefix,File directory){
  boolean botherToBrowseFurtherDown=false;
  if (lookInThesePackages != null) {
    for (    String packageName : lookInThesePackages) {
      if (packageName.startsWith(prefix)) {
        botherToBrowseFurtherDown=true;
        break;
      }
    }
  }
 else {
    botherToBrowseFurtherDown=true;
  }
  if (!botherToBrowseFurtherDown) {
    return;
  }
  File[] files=directory.listFiles();
  if (files == null) {
    return;
  }
  for (  File file : files) {
    if (file.isDirectory()) {
      collectFromDirectory(classes,superClass,lookInThesePackages,addToPrefix(prefix,file.getName()),file);
    }
 else {
      String className=addToPrefix(prefix,file.getName());
      className=trimFromClassEnding(className);
      tryCollectClass(classes,superClass,lookInThesePackages,className);
    }
  }
}",0.994908350305499
155234,"/** 
 * @param < T > the class type.
 * @param superClass the class which the resulting classes must implementor extend.
 * @param lookInThesePackages an optional collection of which java packagesto search in. If null is specified then all packages are searched.
 * @return all classes (in the class path) which extends or implementsa certain class.
 */
public static <T>Collection<Class<? extends T>> listClassesExtendingOrImplementing(Class<T> superClass,Collection<String> lookInThesePackages){
  String classPath=System.getProperty(""String_Node_Str"");
  StringTokenizer tokenizer=new StringTokenizer(classPath,File.pathSeparator);
  Collection<Class<? extends T>> classes=new HashSet<Class<? extends T>>();
  while (tokenizer.hasMoreTokens()) {
    collectClasses(classes,superClass,lookInThesePackages,tokenizer.nextToken());
  }
  return Collections.unmodifiableCollection(classes);
}","/** 
 * @param < T > the class type.
 * @param superClass the class which the resulting classes must implementor extend.
 * @param lookInThesePackages an optional collection of which java packagesto search in. If null is specified then all packages are searched.
 * @return all classes (in the class path) which extends or implementsa certain class.
 */
public static <T>Collection<Class<? extends T>> listClassesExtendingOrImplementing(Class<? extends T> superClass,Collection<String> lookInThesePackages){
  String classPath=System.getProperty(""String_Node_Str"");
  StringTokenizer tokenizer=new StringTokenizer(classPath,File.pathSeparator);
  Collection<Class<? extends T>> classes=new HashSet<Class<? extends T>>();
  while (tokenizer.hasMoreTokens()) {
    collectClasses(classes,superClass,lookInThesePackages,tokenizer.nextToken());
  }
  return Collections.unmodifiableCollection(classes);
}",0.994413407821229
155235,"private static <T>void tryCollectClass(Collection<Class<? extends T>> classes,Class<T> superClass,Collection<String> lookInThesePackages,String className){
  try {
    if (!classNameIsInPackage(className,lookInThesePackages)) {
      return;
    }
    Class<? extends T> cls=(Class<? extends T>)Class.forName(className);
    if (cls.isInterface() || Modifier.isAbstract(cls.getModifiers())) {
      return;
    }
    if (superClass.isAssignableFrom(cls)) {
      classes.add(cls);
    }
  }
 catch (  Throwable e) {
  }
}","private static <T>void tryCollectClass(Collection<Class<? extends T>> classes,Class<? extends T> superClass,Collection<String> lookInThesePackages,String className){
  try {
    if (!classNameIsInPackage(className,lookInThesePackages)) {
      return;
    }
    Class<? extends T> cls=Class.forName(className).asSubclass(superClass);
    if (cls.isInterface() || Modifier.isAbstract(cls.getModifiers())) {
      return;
    }
    if (superClass.isAssignableFrom(cls)) {
      classes.add(cls);
    }
  }
 catch (  Throwable e) {
  }
}",0.9497630331753556
155236,"@Override public String getDescription(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + GshExecutor.PATH_STRING + ""String_Node_Str""+ GshExecutor.DEFAULT_PATHS+ ""String_Node_Str"";
}","@Override public String getDescription(){
  GshExecutor anExecutor=new GshExecutor();
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + anExecutor.getPathKey() + ""String_Node_Str""+ anExecutor.getDefaultPaths()+ ""String_Node_Str"";
}",0.3245149911816578
155237,"@Override protected String getPathKey(){
  return PATH_STRING;
}","@Override protected String getPathKey(){
  return ""String_Node_Str"";
}",0.8208955223880597
155238,"@Override public String getDescription(){
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + JshExecutor.PATH_STRING + ""String_Node_Str""+ JshExecutor.DEFAULT_PATHS+ ""String_Node_Str"";
}","@Override public String getDescription(){
  JshExecutor anExecutor=new JshExecutor();
  return ""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + anExecutor.getPathKey() + ""String_Node_Str""+ anExecutor.getDefaultPaths()+ ""String_Node_Str"";
}",0.3245149911816578
155239,"@Override protected String getPathKey(){
  return PATH_STRING;
}","@Override protected String getPathKey(){
  return ""String_Node_Str"";
}",0.8208955223880597
155240,"/** 
 * Executes a groovy script (with arguments) defined in   {@code line}. 
 * @param line the line which defines the groovy script with arguments.
 * @param session the {@link Session} to include as argument in groovy.
 * @param out the {@link Output} to include as argument in groovy.
 * @throws ShellException if the execution of a groovy script fails.
 */
public void execute(String line,Session session,Output out) throws ShellException {
  this.ensureDependenciesAreInClasspath();
  if (line == null || line.trim().length() == 0) {
    throw new ShellException(""String_Node_Str"");
  }
  List<String> pathList=this.getEnvPaths(session);
  String[] paths=pathList.toArray(new String[pathList.size()]);
  Object interpreter=this.newInterpreter(paths);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",out);
  properties.put(""String_Node_Str"",session);
  this.runScripts(interpreter,properties,line,paths);
}","/** 
 * Executes a groovy script (with arguments) defined in   {@code line}. 
 * @param line the line which defines the groovy script with arguments.
 * @param session the {@link Session} to include as argument in groovy.
 * @param out the {@link Output} to include as argument in groovy.
 * @throws ShellException if the execution of a groovy script fails.
 */
public void execute(String line,Session session,Output out) throws ShellException {
  this.ensureDependenciesAreInClasspath();
  if (line == null || line.trim().length() == 0) {
    return;
  }
  List<String> pathList=this.getEnvPaths(session);
  String[] paths=pathList.toArray(new String[pathList.size()]);
  Object interpreter=this.newInterpreter(paths);
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",out);
  properties.put(""String_Node_Str"",session);
  this.runScripts(interpreter,properties,line,paths);
}",0.9739776951672864
155241,protected abstract String getDefaultPaths();,"protected String getDefaultPaths(){
  return ""String_Node_Str"" + File.separator + ""String_Node_Str"";
}",0.4794520547945205
155242,"private List<String> getEnvPaths(Session session) throws ShellException {
  try {
    List<String> list=new ArrayList<String>();
    collectPaths(list,(String)session.get(PATH_STRING));
    collectPaths(list,DEFAULT_PATHS);
    return list;
  }
 catch (  RemoteException e) {
    throw new ShellException(e);
  }
}","private List<String> getEnvPaths(Session session) throws ShellException {
  try {
    List<String> list=new ArrayList<String>();
    collectPaths(list,(String)session.get(getPathKey()));
    collectPaths(list,getDefaultPaths());
    return list;
  }
 catch (  RemoteException e) {
    throw new ShellException(e);
  }
}",0.919431279620853
155243,"public Object getArray(int blockId){
}","public Object getArray(int blockId){
  byte bArray[]=get(blockId);
  return getRightArray(bArray);
}",0.5507246376811594
155244,"public Object getStringFor(PropertyRecord propRecord,ReadFromBuffer buffer){
  int recordToFind=(int)propRecord.getPropBlock();
  Iterator<DynamicRecord> records=propRecord.getValueRecords().iterator();
  List<char[]> charList=new LinkedList<char[]>();
  int totalSize=0;
  while (recordToFind != Record.NO_NEXT_BLOCK.intValue() && records.hasNext()) {
    DynamicRecord record=records.next();
    if (record.inUse() && record.getId() == recordToFind) {
      if (record.isLight()) {
        stringPropertyStore.makeHeavy(record,buffer);
      }
      if (!record.isCharData()) {
        ByteBuffer buf=ByteBuffer.wrap(record.getData());
        char[] chars=new char[record.getData().length / 2];
        totalSize+=chars.length;
        buf.asCharBuffer().get(chars);
        charList.add(chars);
      }
 else {
        charList.add(record.getDataAsChar());
      }
      recordToFind=record.getNextBlock();
      records=propRecord.getValueRecords().iterator();
    }
  }
  StringBuffer buf=new StringBuffer();
  for (  char[] str : charList) {
    buf.append(str);
  }
  return buf.toString();
}","public Object getStringFor(PropertyRecord propRecord,ReadFromBuffer buffer){
  int recordToFind=(int)propRecord.getPropBlock();
  Iterator<DynamicRecord> records=propRecord.getValueRecords().iterator();
  List<char[]> charList=new LinkedList<char[]>();
  int totalSize=0;
  while (recordToFind != Record.NO_NEXT_BLOCK.intValue() && records.hasNext()) {
    DynamicRecord record=records.next();
    if (record.getId() == recordToFind) {
      if (record.isLight()) {
        stringPropertyStore.makeHeavy(record,buffer);
      }
      if (!record.isCharData()) {
        ByteBuffer buf=ByteBuffer.wrap(record.getData());
        char[] chars=new char[record.getData().length / 2];
        totalSize+=chars.length;
        buf.asCharBuffer().get(chars);
        charList.add(chars);
      }
 else {
        charList.add(record.getDataAsChar());
      }
      recordToFind=record.getNextBlock();
      records=propRecord.getValueRecords().iterator();
    }
  }
  StringBuffer buf=new StringBuffer();
  for (  char[] str : charList) {
    buf.append(str);
  }
  return buf.toString();
}",0.9917506874427132
155245,"public Object getArrayFor(PropertyRecord propertyRecord,ReadFromBuffer buffer){
  return arrayPropertyStore.getArray((int)propertyRecord.getPropBlock());
}","public Object getArrayFor(PropertyRecord propertyRecord,ReadFromBuffer buffer){
  int recordToFind=(int)propertyRecord.getPropBlock();
  Iterator<DynamicRecord> records=propertyRecord.getValueRecords().iterator();
  List<byte[]> byteList=new LinkedList<byte[]>();
  int totalSize=0;
  while (recordToFind != Record.NO_NEXT_BLOCK.intValue() && records.hasNext()) {
    DynamicRecord record=records.next();
    if (record.getId() == recordToFind) {
      if (record.isLight()) {
        arrayPropertyStore.makeHeavy(record,buffer);
      }
      if (!record.isCharData()) {
        ByteBuffer buf=ByteBuffer.wrap(record.getData());
        byte[] bytes=new byte[record.getData().length];
        totalSize+=bytes.length;
        buf.get(bytes);
        byteList.add(bytes);
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
      recordToFind=record.getNextBlock();
      records=propertyRecord.getValueRecords().iterator();
    }
  }
  byte[] bArray=new byte[totalSize];
  int offset=0;
  for (  byte[] currentArray : byteList) {
    System.arraycopy(currentArray,0,bArray,offset,currentArray.length);
    offset+=currentArray.length;
  }
  return arrayPropertyStore.getRightArray(bArray);
}",0.1411935953420669
155246,"private static String fixJarEntryClassName(String entryName){
  entryName=entryName.replace(File.separatorChar,'.');
  return trimFromClassEnding(entryName);
}","private static String fixJarEntryClassName(String entryName){
  entryName=entryName.replace(File.separatorChar,'.');
  entryName=entryName.replace('/','.');
  return trimFromClassEnding(entryName);
}",0.888268156424581
155247,"public void stop(){
  XaDataSourceManager.getManager().unregisterAllDataSources();
}","public void stop(){
  XaDataSourceManager.getManager().unregisterAllDataSources();
  TxManager.getManager().stop();
}",0.835820895522388
155248,"/** 
 * Returns an array of lists, each list contains dangling records  (transactions that han't been completed yet) grouped after global by transaction id.
 */
public synchronized Iterator<List<Record>> getDanglingRecords() throws IOException {
  fileChannel.position(0);
  buffer.clear();
  fileChannel.read(buffer);
  buffer.flip();
  long nextPosition=0;
  int seqNr=0;
  Map<Xid,List<Record>> recordMap=new HashMap<Xid,List<Record>>();
  while (buffer.hasRemaining()) {
    byte recordType=buffer.get();
    if (recordType == TX_START) {
      byte globalId[]=new byte[buffer.get()];
      buffer.get(globalId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + xid + ""String_Node_Str"");
      }
      List<Record> recordList=new LinkedList<Record>();
      recordList.add(new Record(recordType,globalId,null,seqNr++));
      recordMap.put(xid,recordList);
      nextPosition+=2 + globalId.length;
    }
 else     if (recordType == BRANCH_ADD) {
      byte globalId[]=new byte[buffer.get()];
      byte branchId[]=new byte[buffer.get()];
      buffer.get(globalId);
      buffer.get(branchId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (!recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + new String(branchId) + ""String_Node_Str""+ xid+ ""String_Node_Str"");
      }
      recordMap.get(xid).add(new Record(recordType,globalId,branchId,seqNr++));
      nextPosition+=3 + globalId.length + branchId.length;
    }
 else     if (recordType == MARK_COMMIT) {
      byte globalId[]=new byte[buffer.get()];
      buffer.get(globalId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (!recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + xid + ""String_Node_Str"");
      }
      List<Record> recordList=recordMap.get(xid);
      recordList.add(new Record(recordType,globalId,null,seqNr++));
      recordMap.put(xid,recordList);
      nextPosition+=2 + globalId.length;
    }
 else     if (recordType == TX_DONE) {
      byte globalId[]=new byte[buffer.get()];
      buffer.get(globalId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (!recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + xid + ""String_Node_Str"");
      }
      recordMap.remove(xid);
      nextPosition+=2 + globalId.length;
    }
 else {
      throw new IOException(""String_Node_Str"" + recordType);
    }
    if ((buffer.limit() - buffer.position()) < (3 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE)) {
      buffer.clear();
      fileChannel.position(nextPosition);
      fileChannel.read(buffer);
      buffer.flip();
    }
  }
  return recordMap.values().iterator();
}","/** 
 * Returns an array of lists, each list contains dangling records  (transactions that han't been completed yet) grouped after global by transaction id.
 */
public synchronized Iterator<List<Record>> getDanglingRecords() throws IOException {
  fileChannel.position(0);
  buffer.clear();
  fileChannel.read(buffer);
  buffer.flip();
  long nextPosition=0;
  int seqNr=0;
  Map<Xid,List<Record>> recordMap=new HashMap<Xid,List<Record>>();
  while (buffer.hasRemaining()) {
    byte recordType=buffer.get();
    if (recordType == TX_START) {
      byte globalId[]=new byte[buffer.get()];
      buffer.get(globalId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + xid + ""String_Node_Str"");
      }
      List<Record> recordList=new LinkedList<Record>();
      recordList.add(new Record(recordType,globalId,null,seqNr++));
      recordMap.put(xid,recordList);
      nextPosition+=2 + globalId.length;
    }
 else     if (recordType == BRANCH_ADD) {
      byte globalId[]=new byte[buffer.get()];
      byte branchId[]=new byte[buffer.get()];
      buffer.get(globalId);
      buffer.get(branchId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (!recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + new String(branchId) + ""String_Node_Str""+ xid+ ""String_Node_Str"");
      }
      recordMap.get(xid).add(new Record(recordType,globalId,branchId,seqNr++));
      nextPosition+=3 + globalId.length + branchId.length;
    }
 else     if (recordType == MARK_COMMIT) {
      byte globalId[]=new byte[buffer.get()];
      buffer.get(globalId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (!recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + xid + ""String_Node_Str"");
      }
      List<Record> recordList=recordMap.get(xid);
      recordList.add(new Record(recordType,globalId,null,seqNr++));
      recordMap.put(xid,recordList);
      nextPosition+=2 + globalId.length;
    }
 else     if (recordType == TX_DONE) {
      byte globalId[]=new byte[buffer.get()];
      buffer.get(globalId);
      Xid xid=new XidImpl(globalId,new byte[0]);
      if (!recordMap.containsKey(xid)) {
        throw new IOException(""String_Node_Str"" + xid + ""String_Node_Str"");
      }
      recordMap.remove(xid);
      nextPosition+=2 + globalId.length;
    }
 else     if (recordType == 0) {
      continue;
    }
 else {
      throw new IOException(""String_Node_Str"" + recordType);
    }
    if ((buffer.limit() - buffer.position()) < (3 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE)) {
      buffer.clear();
      fileChannel.position(nextPosition);
      fileChannel.read(buffer);
      buffer.flip();
    }
  }
  return recordMap.values().iterator();
}",0.9900596421471172
155249,"public void execute(String line,Session session,Output out) throws ShellException {
  this.ensureGroovyIsInClasspath();
  if (line == null || line.trim().length() == 0) {
    throw new ShellException(""String_Node_Str"");
  }
  List<String> pathList=this.getEnvPaths(session);
  Object groovyScriptEngine=this.newGroovyScriptEngine(pathList.toArray(new String[pathList.size()]));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",out);
  properties.put(""String_Node_Str"",session);
  this.runGroovyScripts(groovyScriptEngine,properties,line);
}","public void execute(String line,Session session,Output out) throws ShellException {
  this.ensureGroovyIsInClasspath();
  if (line == null || line.trim().length() == 0) {
    throw new ShellException(""String_Node_Str"");
  }
  List<String> pathList=this.getEnvPaths(session);
  Object groovyScriptEngine=this.newGroovyScriptEngine(pathList.toArray(new String[pathList.size()]));
  Map<String,Object> properties=new HashMap<String,Object>();
  properties.put(""String_Node_Str"",new GshOutput(out));
  properties.put(""String_Node_Str"",session);
  this.runGroovyScripts(groovyScriptEngine,properties,line);
}",0.982367758186398
155250,"private void runGroovyScript(Object groovyScriptEngine,String scriptName,Object groovyBinding) throws ShellException {
  try {
    Method runMethod=groovyScriptEngine.getClass().getMethod(""String_Node_Str"",String.class,groovyBinding.getClass());
    runMethod.invoke(groovyScriptEngine,scriptName + ""String_Node_Str"",groovyBinding);
  }
 catch (  Exception e) {
    throw new ShellException(""String_Node_Str"" + this.findProperMessage(e),e);
  }
}","private void runGroovyScript(Object groovyScriptEngine,String scriptName,Object groovyBinding) throws ShellException {
  try {
    Method runMethod=groovyScriptEngine.getClass().getMethod(""String_Node_Str"",String.class,groovyBinding.getClass());
    runMethod.invoke(groovyScriptEngine,scriptName + ""String_Node_Str"",groovyBinding);
  }
 catch (  Exception e) {
    throw new ShellException(""String_Node_Str"" + this.findProperMessage(e));
  }
}",0.997752808988764
155251,"private String findProperMessage(Throwable e){
  String message=e.getMessage();
  if ((message == null || message.length() == 0) && e.getCause() != null) {
    message=this.findProperMessage(e.getCause());
  }
  return message;
}","private String findProperMessage(Throwable e){
  String message=e.getMessage();
  if (e.getCause() != null) {
    message=this.findProperMessage(e.getCause());
  }
  return message;
}",0.8883495145631068
155252,"/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @throws StartupFailedException if unable to start
 */
public static void start(Class<? extends RelationshipType> clazz,String storeDir,boolean create){
  if (started) {
    throw new RuntimeException(""String_Node_Str"");
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  Map<String,String> params=new java.util.HashMap<String,String>();
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",String.valueOf(create));
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  byte resourceId[]=""String_Node_Str"".getBytes();
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getNeoModule().setRelationshipTypes(clazz);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start();
  persistenceSource.start();
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}","/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @throws StartupFailedException if unable to start
 */
public static void start(Class<? extends RelationshipType> clazz,String storeDir,boolean create){
  if (started) {
    throw new RuntimeException(""String_Node_Str"");
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  Map<String,String> params=new java.util.HashMap<String,String>();
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",String.valueOf(create));
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  byte resourceId[]=""String_Node_Str"".getBytes();
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getNeoModule().setRelationshipTypes(clazz);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start();
  persistenceSource.start();
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}",0.9746142359382778
155253,"/** 
 * Depending on transaction isolation level a lock may be released  as soon as possible or it may be held throughout the whole transaction. Invoking this method will trigger a release lock of   {@link LockType} <CODE>type</CODE> on the <CODE>resource</CODE> when the transaction  commits or rollbacks.
 * @param resource the resource on which the lock is taken
 * @param type type of lock (READ or WRITE)
 * @throws NotInTransactionException
 */
public void addLockToTransaction(Object resource,LockType type) throws NotInTransactionException {
  Thread currentThread=Thread.currentThread();
  List<LockElement> lockElements=lockMap.get(currentThread);
  if (lockElements != null) {
    lockElements.add(new LockElement(resource,type));
  }
 else {
    Transaction tx=null;
    try {
      tx=TransactionFactory.getTransactionManager().getTransaction();
      if (tx == null) {
        if (type == LockType.WRITE) {
          lockManager.releaseWriteLock(resource);
        }
 else         if (type == LockType.READ) {
          lockManager.releaseReadLock(resource);
        }
        throw new NotInTransactionException();
      }
      tx.registerSynchronization(txCommitHook);
    }
 catch (    javax.transaction.SystemException e) {
      throw new NotInTransactionException(e);
    }
catch (    Exception e) {
      throw new NotInTransactionException(e);
    }
    lockElements=new ArrayList<LockElement>();
    lockMap.put(currentThread,lockElements);
    lockElements.add(new LockElement(resource,type));
  }
}","/** 
 * Depending on transaction isolation level a lock may be released  as soon as possible or it may be held throughout the whole transaction. Invoking this method will trigger a release lock of   {@link LockType} <CODE>type</CODE> on the <CODE>resource</CODE> when the transaction  commits or rollbacks.
 * @param resource the resource on which the lock is taken
 * @param type type of lock (READ or WRITE)
 * @throws NotInTransactionException
 */
public void addLockToTransaction(Object resource,LockType type) throws NotInTransactionException {
  Thread currentThread=Thread.currentThread();
  List<LockElement> lockElements=lockMap.get(currentThread);
  if (lockElements != null) {
    lockElements.add(new LockElement(resource,type));
  }
 else {
    Transaction tx=null;
    try {
      tx=transactionManager.getTransaction();
      if (tx == null) {
        if (type == LockType.WRITE) {
          lockManager.releaseWriteLock(resource);
        }
 else         if (type == LockType.READ) {
          lockManager.releaseReadLock(resource);
        }
        throw new NotInTransactionException();
      }
      tx.registerSynchronization(txCommitHook);
    }
 catch (    javax.transaction.SystemException e) {
      throw new NotInTransactionException(e);
    }
catch (    Exception e) {
      throw new NotInTransactionException(e);
    }
    lockElements=new ArrayList<LockElement>();
    lockMap.put(currentThread,lockElements);
    lockElements.add(new LockElement(resource,type));
  }
}",0.9814814814814816
155254,"NodeImpl getNodeForProxy(int nodeId){
  Node node=nodeCache.get(nodeId);
  if (node != null) {
    return (NodeImpl)node;
  }
  node=new NodeImpl(nodeId);
  acquireLock(node,LockType.READ);
  try {
    if (nodeCache.get(nodeId) != null) {
      node=nodeCache.get(nodeId);
      return (NodeImpl)node;
    }
    if (PersistenceManager.getManager().loadLightNode(nodeId) == null) {
      throw new RuntimeException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
    nodeCache.add(nodeId,node);
    return (NodeImpl)node;
  }
 catch (  PersistenceException pe) {
    log.severe(""String_Node_Str"" + nodeId + ""String_Node_Str""+ pe);
    throw new RuntimeException(""String_Node_Str"",pe);
  }
 finally {
    forceReleaseReadLock(node);
  }
}","NodeImpl getNodeForProxy(int nodeId){
  Node node=nodeCache.get(nodeId);
  if (node != null) {
    return (NodeImpl)node;
  }
  node=new NodeImpl(nodeId);
  acquireLock(node,LockType.READ);
  try {
    if (nodeCache.get(nodeId) != null) {
      node=nodeCache.get(nodeId);
      return (NodeImpl)node;
    }
    if (PersistenceManager.getManager().loadLightNode(nodeId) == null) {
      throw new NotFoundException(""String_Node_Str"" + nodeId + ""String_Node_Str"");
    }
    nodeCache.add(nodeId,node);
    return (NodeImpl)node;
  }
 catch (  PersistenceException pe) {
    log.severe(""String_Node_Str"" + nodeId + ""String_Node_Str""+ pe);
    throw new RuntimeException(""String_Node_Str"",pe);
  }
 finally {
    forceReleaseReadLock(node);
  }
}",0.9899125756556826
155255,"static PropertyIndex createPropertyIndex(String key){
  int id=IdGenerator.getGenerator().nextId(PropertyIndex.class);
  PropertyIndex index=new PropertyIndex(key,id);
  EventManager em=EventManager.getManager();
  EventData eventData=new EventData(new PropIndexOpData(index));
  if (!em.generateProActiveEvent(Event.PROPERTY_INDEX_CREATE,eventData)) {
    setRollbackOnly();
    throw new CreateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  addPropertyIndex(index);
  em.generateReActiveEvent(Event.PROPERTY_INDEX_CREATE,eventData);
  return index;
}","static PropertyIndex createPropertyIndex(String key){
  int id=IdGenerator.getGenerator().nextId(PropertyIndex.class);
  PropertyIndex index=new PropertyIndex(key,id);
  EventManager em=EventManager.getManager();
  EventData eventData=new EventData(new PropIndexOpData(index));
  if (!em.generateProActiveEvent(Event.PROPERTY_INDEX_CREATE,eventData)) {
    setRollbackOnly();
    throw new CreateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  Transaction tx=null;
  try {
    tx=transactionManager.getTransaction();
    if (tx == null) {
      throw new NotInTransactionException(""String_Node_Str"" + index.getKey());
    }
    tx.registerSynchronization(new TxCommitHook(index));
  }
 catch (  javax.transaction.SystemException e) {
    throw new NotInTransactionException(e);
  }
catch (  Exception e) {
    throw new NotInTransactionException(e);
  }
  em.generateReActiveEvent(Event.PROPERTY_INDEX_CREATE,eventData);
  return index;
}",0.7126741871267419
155256,"static void addPropertyIndex(PropertyIndex index){
  List<PropertyIndex> list=indexMap.get(index.getKey());
  if (list == null) {
    list=new LinkedList<PropertyIndex>();
    indexMap.put(index.getKey(),list);
  }
  list.add(index);
  idToIndexMap.put(index.getKeyId(),index);
}","private static synchronized void addPropertyIndex(PropertyIndex index){
  List<PropertyIndex> list=indexMap.get(index.getKey());
  if (list == null) {
    list=new LinkedList<PropertyIndex>();
    indexMap.put(index.getKey(),list);
  }
  list.add(index);
  idToIndexMap.put(index.getKeyId(),index);
}",0.9637305699481864
155257,"public void setInUse(boolean inUse){
  super.setInUse(inUse);
  if (!inUse) {
    data=null;
  }
}","public void setInUse(boolean inUse,int type){
  this.type=type;
  this.setInUse(inUse);
}",0.6524064171122995
155258,"void unmap(){
  AccessController.doPrivileged(new PrivilegedAction(){
    public Object run(){
      try {
        Class[] argument=new Class[1];
        argument[0]=MappedByteBuffer.class;
        Method unmapMethod=getFileChannel().getClass().getMethod(""String_Node_Str"",argument);
        unmapMethod.setAccessible(true);
        unmapMethod.invoke(getFileChannel(),(MappedByteBuffer)buffer.getBuffer());
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      return null;
    }
  }
);
}","void unmap(){
}",0.0566037735849056
155259,"public Object getProperty(String key,Object defaultValue){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  acquireLock(this,LockType.READ);
  try {
    for (    PropertyIndex index : PropertyIndex.index(key)) {
      Property property=null;
      if (propertyMap != null) {
        property=propertyMap.get(index.getKeyId());
      }
      if (property != null) {
        return property.getValue();
      }
      if (ensureFullProperties()) {
        property=propertyMap.get(index.getKeyId());
        if (property != null) {
          return property.getValue();
        }
      }
    }
    if (!PropertyIndex.hasAll()) {
      ensureFullProperties();
      for (      int keyId : propertyMap.keySet()) {
        if (!PropertyIndex.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=PropertyIndex.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            return propertyMap.get(indexToCheck.getKeyId());
          }
        }
      }
    }
  }
  finally {
    releaseLock(this,LockType.READ);
  }
  return defaultValue;
}","public Object getProperty(String key,Object defaultValue){
  if (key == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  acquireLock(this,LockType.READ);
  try {
    for (    PropertyIndex index : PropertyIndex.index(key)) {
      Property property=null;
      if (propertyMap != null) {
        property=propertyMap.get(index.getKeyId());
      }
      if (property != null) {
        return property.getValue();
      }
      if (ensureFullProperties()) {
        property=propertyMap.get(index.getKeyId());
        if (property != null) {
          return property.getValue();
        }
      }
    }
    if (!PropertyIndex.hasAll()) {
      ensureFullProperties();
      for (      int keyId : propertyMap.keySet()) {
        if (!PropertyIndex.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=PropertyIndex.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            return propertyMap.get(indexToCheck.getKeyId()).getValue();
          }
        }
      }
    }
  }
  finally {
    releaseLock(this,LockType.READ);
  }
  return defaultValue;
}",0.9950022716946842
155260,"public Object getProperty(String key,Object defaultValue){
  acquireLock(this,LockType.READ);
  try {
    for (    PropertyIndex index : PropertyIndex.index(key)) {
      Property property=null;
      if (propertyMap != null) {
        property=propertyMap.get(index.getKeyId());
      }
      if (property != null) {
        return property.getValue();
      }
      if (ensureFullRelationship()) {
        property=propertyMap.get(index.getKeyId());
        if (property != null) {
          return property.getValue();
        }
      }
    }
    if (!PropertyIndex.hasAll()) {
      ensureFullRelationship();
      for (      int keyId : propertyMap.keySet()) {
        if (!PropertyIndex.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=PropertyIndex.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            return propertyMap.get(indexToCheck.getKeyId());
          }
        }
      }
    }
  }
  finally {
    releaseLock(this,LockType.READ);
  }
  return defaultValue;
}","public Object getProperty(String key,Object defaultValue){
  acquireLock(this,LockType.READ);
  try {
    for (    PropertyIndex index : PropertyIndex.index(key)) {
      Property property=null;
      if (propertyMap != null) {
        property=propertyMap.get(index.getKeyId());
      }
      if (property != null) {
        return property.getValue();
      }
      if (ensureFullRelationship()) {
        property=propertyMap.get(index.getKeyId());
        if (property != null) {
          return property.getValue();
        }
      }
    }
    if (!PropertyIndex.hasAll()) {
      ensureFullRelationship();
      for (      int keyId : propertyMap.keySet()) {
        if (!PropertyIndex.hasIndexFor(keyId)) {
          PropertyIndex indexToCheck=PropertyIndex.getIndexFor(keyId);
          if (indexToCheck.getKey().equals(key)) {
            return propertyMap.get(indexToCheck.getKeyId()).getValue();
          }
        }
      }
    }
  }
  finally {
    releaseLock(this,LockType.READ);
  }
  return defaultValue;
}",0.994610485056345
155261,"public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(TestArrayMap.suite());
  return new TestSetup(suite);
}","public static Test suite(){
  TestSuite suite=new TestSuite();
  suite.addTest(TestArrayMap.suite());
  suite.addTest(TestArrayIntSet.suite());
  return new TestSetup(suite);
}",0.864516129032258
155262,"private static void performRequest(String[] args) throws IOException, InstantiationException {
  for (int i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      createStore(args[++i]);
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      Properties properties=new Properties();
      FileInputStream inputStream=new FileInputStream(args[++i]);
      try {
        properties.load(inputStream);
        new NeoStoreXaDataSource(properties).close();
      }
  finally {
        inputStream.close();
      }
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      fsckStore(args[++i]);
    }
 else {
      usage();
      return;
    }
  }
}","private static void performRequest(String[] args) throws IOException, InstantiationException {
  for (int i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
      createStore(args[++i]);
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      Properties properties=new Properties();
      FileInputStream inputStream=new FileInputStream(args[++i]);
      try {
        properties.load(inputStream);
        new NeoStoreXaDataSource(properties).close();
      }
  finally {
        inputStream.close();
      }
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      dumpRelTypes(args[++i]);
    }
 else     if (args[i].equals(""String_Node_Str"")) {
      fsckStore(args[++i]);
    }
 else {
      usage();
      return;
    }
  }
}",0.9421052631578948
155263,"static void writeDynamicRecord(LogBuffer buffer,DynamicRecord record) throws IOException {
  record.setTransferStartPosition(buffer.getFileChannel(),buffer.getFileChannelPosition() + 8);
  if (record.inUse()) {
    byte inUse=Record.IN_USE.byteValue();
    buffer.putInt(record.getId()).putInt(record.getType()).put(inUse).putInt(record.getPrevBlock()).putInt(record.getLength()).putInt(record.getNextBlock());
    if (!record.isLight()) {
      if (!record.isCharData()) {
        byte[] data=record.getData();
        buffer.put(data);
        record.setTransferCount(13 + data.length);
      }
 else {
        char[] chars=record.getDataAsChar();
        buffer.put(chars);
        record.setTransferCount(13 + chars.length / 2);
      }
    }
 else {
      record.setTransferCount(13);
    }
  }
 else {
    byte inUse=Record.NOT_IN_USE.byteValue();
    buffer.putInt(record.getId()).putInt(record.getType()).put(inUse);
    record.setTransferCount(1);
  }
}","static void writeDynamicRecord(LogBuffer buffer,DynamicRecord record) throws IOException {
  record.setTransferStartPosition(buffer.getFileChannel(),buffer.getFileChannelPosition() + 8);
  if (record.inUse()) {
    byte inUse=Record.IN_USE.byteValue();
    buffer.putInt(record.getId()).putInt(record.getType()).put(inUse).putInt(record.getPrevBlock()).putInt(record.getLength()).putInt(record.getNextBlock());
    if (!record.isLight()) {
      if (!record.isCharData()) {
        byte[] data=record.getData();
        buffer.put(data);
        record.setTransferCount(13 + data.length);
      }
 else {
        char[] chars=record.getDataAsChar();
        buffer.put(chars);
        record.setTransferCount(13 + chars.length * 2);
      }
    }
 else {
      record.setTransferCount(13);
    }
  }
 else {
    byte inUse=Record.NOT_IN_USE.byteValue();
    buffer.putInt(record.getId()).putInt(record.getType()).put(inUse);
    record.setTransferCount(1);
  }
}",0.998960498960499
155264,"private void transferRecord(NodeRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    throw new RuntimeException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
}","private boolean transferRecord(NodeRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    return false;
  }
  return true;
}",0.8585987261146497
155265,"private void transferRecord(PropertyIndexRecord record) throws IOException {
  int id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    throw new RuntimeException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
}","private boolean transferRecord(PropertyIndexRecord record) throws IOException {
  int id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    return false;
  }
  return true;
}",0.8614232209737828
155266,"private void transferRecord(PropertyRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    throw new RuntimeException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
}","private boolean transferRecord(PropertyRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    return false;
  }
  return true;
}",0.8600252206809584
155267,"private void transferRecord(RelationshipRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    throw new RuntimeException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
}","private boolean transferRecord(RelationshipRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    return false;
  }
  return true;
}",0.8614232209737828
155268,"private void transferRecord(RelationshipTypeRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    throw new RuntimeException(""String_Node_Str"" + count + ""String_Node_Str"");
  }
}","private boolean transferRecord(RelationshipTypeRecord record) throws IOException {
  long id=record.getId();
  long count=record.getTransferCount();
  FileChannel fileChannel=getFileChannel();
  fileChannel.position(id * getRecordSize());
  if (count != record.getFromChannel().transferTo(record.getTransferStartPosition(),count,fileChannel)) {
    return false;
  }
  return true;
}",0.8627935723114957
155269,"public synchronized void close() throws IOException {
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size());
    log.info(""String_Node_Str"" + fileName);
    writeBuffer.force();
    fileChannel.close();
    return;
  }
  writeBuffer.force();
  long truncateAt=writeBuffer.getFileChannelPosition();
  writeBuffer=null;
  fileChannel.truncate(truncateAt);
  fileChannel.close();
  File file=new File(fileName);
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
  file.delete();
}","public synchronized void close() throws IOException {
  if (xidIdentMap.size() > 0) {
    log.info(""String_Node_Str"" + xidIdentMap.size());
    log.info(""String_Node_Str"" + fileName);
    writeBuffer.force();
    fileChannel.close();
    return;
  }
  writeBuffer.force();
  writeBuffer=null;
  fileChannel.close();
  File file=new File(fileName);
  if (!file.exists()) {
    throw new IOException(""String_Node_Str"" + fileName + ""String_Node_Str"");
  }
  try {
    file.delete();
  }
 catch (  Exception e) {
    try {
      Thread.sleep(500);
      file.delete();
    }
 catch (    Throwable t) {
      log.warning(""String_Node_Str"" + fileName + ""String_Node_Str""+ e);
      log.info(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.6959199384141648
155270,"public boolean isReadOnly(){
  if (isRecovered()) {
    if (nodeCommands.size() == 0 && propCommands.size() == 0 && relCommands.size() == 0 && relTypeCommands.size() == 0 && propIndexCommands.size() == 0) {
      return true;
    }
    return false;
  }
  if (nodeRecords.size() == 0 && relRecords.size() == 0 && relTypeRecords.size() == 0 && propertyRecords.size() == 0) {
    return true;
  }
  return false;
}","public boolean isReadOnly(){
  if (isRecovered()) {
    if (nodeCommands.size() == 0 && propCommands.size() == 0 && relCommands.size() == 0 && relTypeCommands.size() == 0 && propIndexCommands.size() == 0) {
      return true;
    }
    return false;
  }
  if (nodeRecords.size() == 0 && relRecords.size() == 0 && relTypeRecords.size() == 0 && propertyRecords.size() == 0 && propIndexRecords.size() == 0) {
    return true;
  }
  return false;
}",0.9626168224299064
155271,"public void changeProperty(int relId,int propertyId,Object value) throws IOException {
  xaCon.getNeoTransaction().relChangeProperty(propertyId,value);
}","public void changeProperty(int relId,int propertyId,Object value) throws IOException {
  xaCon.getNeoTransaction().relChangeProperty(relId,propertyId,value);
}",0.9807692307692308
155272,"public void doRollback() throws XAException {
  if (committed) {
    throw new XAException(""String_Node_Str"" + ""String_Node_Str"" + getIdentifier() + ""String_Node_Str""+ ""String_Node_Str"");
  }
  try {
    NodeManager nm=NodeManager.getManager();
    for (    RelationshipTypeRecord record : relTypeRecords.values()) {
      if (record.isCreated()) {
        getRelationshipTypeStore().freeId(record.getId());
        for (        DynamicRecord dynamicRecord : record.getTypeRecords()) {
          if (dynamicRecord.isCreated()) {
            getRelationshipTypeStore().freeBlockId(dynamicRecord.getId());
          }
        }
      }
      nm.removeRelationshipTypeFromCache(record.getId());
    }
    for (    NodeRecord record : nodeRecords.values()) {
      if (record.isCreated()) {
        getNodeStore().freeId(record.getId());
      }
      nm.removeNodeFromCache(record.getId());
    }
    for (    RelationshipRecord record : relRecords.values()) {
      if (record.isCreated()) {
        getRelationshipStore().freeId(record.getId());
      }
      nm.removeRelationshipFromCache(record.getId());
    }
    for (    PropertyIndexRecord record : propIndexRecords.values()) {
      if (record.isCreated()) {
        getPropertyStore().getIndexStore().freeId(record.getId());
        for (        DynamicRecord dynamicRecord : record.getKeyRecords()) {
          if (dynamicRecord.isCreated()) {
            getPropertyStore().getIndexStore().freeBlockId(dynamicRecord.getId());
          }
        }
      }
    }
    for (    PropertyRecord record : propertyRecords.values()) {
      if (record.isCreated()) {
        getPropertyStore().freeId(record.getId());
        for (        DynamicRecord dynamicRecord : record.getValueRecords()) {
          if (dynamicRecord.isCreated()) {
            if (dynamicRecord.getType() == PropertyType.STRING.intValue()) {
              getPropertyStore().freeStringBlockId(dynamicRecord.getId());
            }
 else             if (dynamicRecord.getType() == PropertyType.ARRAY.intValue()) {
              getPropertyStore().freeArrayBlockId(dynamicRecord.getId());
            }
 else {
              throw new RuntimeException(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new XAException(""String_Node_Str"" + getIdentifier() + ""String_Node_Str""+ e);
  }
  nodeRecords=null;
  propertyRecords=null;
  relRecords=null;
  relTypeRecords=null;
  propIndexRecords=null;
  nodeCommands=null;
  propCommands=null;
  propIndexCommands=null;
  relCommands=null;
  relTypeCommands=null;
}","public void doRollback() throws XAException {
  if (committed) {
    throw new XAException(""String_Node_Str"" + ""String_Node_Str"" + getIdentifier() + ""String_Node_Str""+ ""String_Node_Str"");
  }
  try {
    NodeManager nm=NodeManager.getManager();
    for (    RelationshipTypeRecord record : relTypeRecords.values()) {
      if (record.isCreated()) {
        getRelationshipTypeStore().freeId(record.getId());
        for (        DynamicRecord dynamicRecord : record.getTypeRecords()) {
          if (dynamicRecord.isCreated()) {
            getRelationshipTypeStore().freeBlockId(dynamicRecord.getId());
          }
        }
      }
      nm.removeRelationshipTypeFromCache(record.getId());
    }
    for (    NodeRecord record : nodeRecords.values()) {
      if (record.isCreated()) {
        getNodeStore().freeId(record.getId());
      }
      nm.removeNodeFromCache(record.getId());
    }
    for (    RelationshipRecord record : relRecords.values()) {
      if (record.isCreated()) {
        getRelationshipStore().freeId(record.getId());
      }
      nm.removeRelationshipFromCache(record.getId());
    }
    for (    PropertyIndexRecord record : propIndexRecords.values()) {
      if (record.isCreated()) {
        getPropertyStore().getIndexStore().freeId(record.getId());
        for (        DynamicRecord dynamicRecord : record.getKeyRecords()) {
          if (dynamicRecord.isCreated()) {
            getPropertyStore().getIndexStore().freeBlockId(dynamicRecord.getId());
          }
        }
      }
    }
    for (    PropertyRecord record : propertyRecords.values()) {
      if (record.getNodeId() != -1) {
        nm.removeNodeFromCache(record.getNodeId());
      }
 else       if (record.getRelId() != -1) {
        nm.removeRelationshipFromCache(record.getRelId());
      }
      if (record.isCreated()) {
        getPropertyStore().freeId(record.getId());
        for (        DynamicRecord dynamicRecord : record.getValueRecords()) {
          if (dynamicRecord.isCreated()) {
            if (dynamicRecord.getType() == PropertyType.STRING.intValue()) {
              getPropertyStore().freeStringBlockId(dynamicRecord.getId());
            }
 else             if (dynamicRecord.getType() == PropertyType.ARRAY.intValue()) {
              getPropertyStore().freeArrayBlockId(dynamicRecord.getId());
            }
 else {
              throw new RuntimeException(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,""String_Node_Str"",e);
    throw new XAException(""String_Node_Str"" + getIdentifier() + ""String_Node_Str""+ e);
  }
  nodeRecords=null;
  propertyRecords=null;
  relRecords=null;
  relTypeRecords=null;
  propIndexRecords=null;
  nodeCommands=null;
  propCommands=null;
  propIndexCommands=null;
  relCommands=null;
  relTypeCommands=null;
}",0.9621405169275572
155273,"void nodeChangeProperty(int propertyId,Object value) throws IOException {
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propertyRecord);
  }
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord,readFromBuffer);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}","void nodeChangeProperty(int nodeId,int propertyId,Object value) throws IOException {
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propertyRecord);
  }
  propertyRecord.setNodeId(nodeId);
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord,readFromBuffer);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}",0.9762266059686392
155274,"void relRemoveProperty(int relId,int propertyId) throws IOException {
  RelationshipRecord relRecord=getRelationshipRecord(relId);
  if (relRecord == null) {
    relRecord=getRelationshipStore().getRecord(relId,readFromBuffer);
  }
  PropertyRecord propRecord=getPropertyRecord(propertyId);
  if (propRecord == null) {
    propRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propRecord);
  }
  if (propRecord.isLight()) {
    getPropertyStore().makeHeavy(propRecord,readFromBuffer);
  }
  propRecord.setInUse(false);
  for (  DynamicRecord valueRecord : propRecord.getValueRecords()) {
    if (valueRecord.inUse()) {
      valueRecord.setInUse(false,propRecord.getType().intValue());
    }
  }
  int prevProp=propRecord.getPrevProp();
  int nextProp=propRecord.getNextProp();
  if (relRecord.getNextProp() == propertyId) {
    relRecord.setNextProp(nextProp);
    addRelationshipRecord(relRecord);
  }
  if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord prevPropRecord=getPropertyRecord(prevProp);
    if (prevPropRecord == null) {
      prevPropRecord=getPropertyStore().getLightRecord(prevProp,readFromBuffer);
      addPropertyRecord(prevPropRecord);
    }
    prevPropRecord.setNextProp(nextProp);
  }
  if (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord nextPropRecord=getPropertyRecord(nextProp);
    if (nextPropRecord == null) {
      nextPropRecord=getPropertyStore().getLightRecord(nextProp,readFromBuffer);
      addPropertyRecord(nextPropRecord);
    }
    nextPropRecord.setPrevProp(prevProp);
  }
}","void relRemoveProperty(int relId,int propertyId) throws IOException {
  RelationshipRecord relRecord=getRelationshipRecord(relId);
  if (relRecord == null) {
    relRecord=getRelationshipStore().getRecord(relId,readFromBuffer);
  }
  PropertyRecord propRecord=getPropertyRecord(propertyId);
  if (propRecord == null) {
    propRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propRecord);
  }
  propRecord.setRelId(relId);
  if (propRecord.isLight()) {
    getPropertyStore().makeHeavy(propRecord,readFromBuffer);
  }
  propRecord.setInUse(false);
  for (  DynamicRecord valueRecord : propRecord.getValueRecords()) {
    if (valueRecord.inUse()) {
      valueRecord.setInUse(false,propRecord.getType().intValue());
    }
  }
  int prevProp=propRecord.getPrevProp();
  int nextProp=propRecord.getNextProp();
  if (relRecord.getNextProp() == propertyId) {
    relRecord.setNextProp(nextProp);
    addRelationshipRecord(relRecord);
  }
  if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord prevPropRecord=getPropertyRecord(prevProp);
    if (prevPropRecord == null) {
      prevPropRecord=getPropertyStore().getLightRecord(prevProp,readFromBuffer);
      addPropertyRecord(prevPropRecord);
    }
    prevPropRecord.setNextProp(nextProp);
  }
  if (nextProp != Record.NO_NEXT_PROPERTY.intValue()) {
    PropertyRecord nextPropRecord=getPropertyRecord(nextProp);
    if (nextPropRecord == null) {
      nextPropRecord=getPropertyStore().getLightRecord(nextProp,readFromBuffer);
      addPropertyRecord(nextPropRecord);
    }
    nextPropRecord.setPrevProp(prevProp);
  }
}",0.9907063197026024
155275,"void relChangeProperty(int propertyId,Object value) throws IOException {
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propertyRecord);
  }
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord,readFromBuffer);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}","void relChangeProperty(int relId,int propertyId,Object value) throws IOException {
  PropertyRecord propertyRecord=getPropertyRecord(propertyId);
  if (propertyRecord == null) {
    propertyRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propertyRecord);
  }
  propertyRecord.setRelId(relId);
  if (propertyRecord.isLight()) {
    getPropertyStore().makeHeavy(propertyRecord,readFromBuffer);
  }
  if (propertyRecord.getType() == PropertyType.STRING) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.STRING.intValue());
      }
    }
  }
 else   if (propertyRecord.getType() == PropertyType.ARRAY) {
    for (    DynamicRecord record : propertyRecord.getValueRecords()) {
      if (record.inUse()) {
        record.setInUse(false,PropertyType.ARRAY.intValue());
      }
    }
  }
  getPropertyStore().encodeValue(propertyRecord,value);
  addPropertyRecord(propertyRecord);
}",0.977687626774848
155276,"void nodeRemoveProperty(int nodeId,int propertyId) throws IOException {
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId,readFromBuffer);
  }
  PropertyRecord propRecord=getPropertyRecord(propertyId);
  if (propRecord == null) {
    propRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propRecord);
  }
  if (propRecord.isLight()) {
    getPropertyStore().makeHeavy(propRecord,readFromBuffer);
  }
  propRecord.setInUse(false);
  for (  DynamicRecord valueRecord : propRecord.getValueRecords()) {
    if (valueRecord.inUse()) {
      valueRecord.setInUse(false,propRecord.getType().intValue());
    }
  }
  int prevProp=propRecord.getPrevProp();
  int nextProp=propRecord.getNextProp();
  if (nodeRecord.getNextProp() == propertyId) {
    nodeRecord.setNextProp(nextProp);
    addNodeRecord(nodeRecord);
  }
  if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord prevPropRecord=getPropertyRecord(prevProp);
    if (prevPropRecord == null) {
      prevPropRecord=getPropertyStore().getLightRecord(prevProp,readFromBuffer);
    }
    prevPropRecord.setNextProp(nextProp);
    addPropertyRecord(prevPropRecord);
  }
  if (nextProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord nextPropRecord=getPropertyRecord(nextProp);
    if (nextPropRecord == null) {
      nextPropRecord=getPropertyStore().getLightRecord(nextProp,readFromBuffer);
    }
    nextPropRecord.setPrevProp(prevProp);
    addPropertyRecord(nextPropRecord);
  }
}","void nodeRemoveProperty(int nodeId,int propertyId) throws IOException {
  NodeRecord nodeRecord=getNodeRecord(nodeId);
  if (nodeRecord == null) {
    nodeRecord=getNodeStore().getRecord(nodeId,readFromBuffer);
  }
  PropertyRecord propRecord=getPropertyRecord(propertyId);
  if (propRecord == null) {
    propRecord=getPropertyStore().getRecord(propertyId,readFromBuffer);
    addPropertyRecord(propRecord);
  }
  propRecord.setNodeId(nodeId);
  if (propRecord.isLight()) {
    getPropertyStore().makeHeavy(propRecord,readFromBuffer);
  }
  propRecord.setInUse(false);
  for (  DynamicRecord valueRecord : propRecord.getValueRecords()) {
    if (valueRecord.inUse()) {
      valueRecord.setInUse(false,propRecord.getType().intValue());
    }
  }
  int prevProp=propRecord.getPrevProp();
  int nextProp=propRecord.getNextProp();
  if (nodeRecord.getNextProp() == propertyId) {
    nodeRecord.setNextProp(nextProp);
    addNodeRecord(nodeRecord);
  }
  if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord prevPropRecord=getPropertyRecord(prevProp);
    if (prevPropRecord == null) {
      prevPropRecord=getPropertyStore().getLightRecord(prevProp,readFromBuffer);
    }
    prevPropRecord.setNextProp(nextProp);
    addPropertyRecord(prevPropRecord);
  }
  if (nextProp != Record.NO_PREVIOUS_PROPERTY.intValue()) {
    PropertyRecord nextPropRecord=getPropertyRecord(nextProp);
    if (nextPropRecord == null) {
      nextPropRecord=getPropertyStore().getLightRecord(nextProp,readFromBuffer);
    }
    nextPropRecord.setPrevProp(prevProp);
    addPropertyRecord(nextPropRecord);
  }
}",0.989956057752668
155277,"private void releaseCommands(int param){
  if (param == Status.STATUS_COMMITTED || param == Status.STATUS_ROLLEDBACK) {
    LockReleaser.getManager().releaseLocks();
  }
 else {
switch (param) {
case Status.STATUS_ACTIVE:
      log.severe(""String_Node_Str"" + ""String_Node_Str"");
    break;
case Status.STATUS_COMMITTING:
  log.severe(""String_Node_Str"" + ""String_Node_Str"");
break;
case Status.STATUS_MARKED_ROLLBACK:
log.severe(""String_Node_Str"" + ""String_Node_Str"");
break;
case Status.STATUS_NO_TRANSACTION:
log.severe(""String_Node_Str"" + ""String_Node_Str"");
break;
case Status.STATUS_PREPARED:
log.severe(""String_Node_Str"" + ""String_Node_Str"");
break;
case Status.STATUS_PREPARING:
log.severe(""String_Node_Str"" + ""String_Node_Str"");
break;
case Status.STATUS_ROLLING_BACK:
log.severe(""String_Node_Str"" + ""String_Node_Str"");
break;
case Status.STATUS_UNKNOWN:
log.severe(""String_Node_Str"" + ""String_Node_Str"");
break;
default :
log.severe(""String_Node_Str"" + ""String_Node_Str"" + param + ""String_Node_Str"");
}
throw new RuntimeException();
}
}","private void releaseCommands(int param){
  LockReleaser.getManager().releaseLocks();
}",0.1522123893805309
155278,"private void disconnectRelationship(RelationshipRecord rel) throws IOException {
  if (rel.getFirstPrevRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getFirstPrevRel());
    lockManager.getWriteLock(lockableRel);
    RelationshipRecord prevRel=getRelationshipRecord(rel.getFirstPrevRel());
    if (prevRel == null) {
      prevRel=getRelationshipStore().getRecord(rel.getFirstPrevRel(),readFromBuffer);
      addRelationshipRecord(prevRel);
    }
    if (prevRel.getFirstNode() == rel.getFirstNode()) {
      prevRel.setFirstNextRel(rel.getFirstNextRel());
    }
 else     if (prevRel.getSecondNode() == rel.getFirstNode()) {
      prevRel.setSecondNextRel(rel.getFirstNextRel());
    }
 else {
      throw new RuntimeException(prevRel + ""String_Node_Str"" + rel);
    }
    addRelationshipLockToTransaction(lockableRel);
  }
  if (rel.getFirstNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getFirstNextRel());
    lockManager.getWriteLock(lockableRel);
    RelationshipRecord nextRel=getRelationshipRecord(rel.getFirstNextRel());
    if (nextRel == null) {
      nextRel=getRelationshipStore().getRecord(rel.getFirstNextRel(),readFromBuffer);
      addRelationshipRecord(nextRel);
    }
    if (nextRel.getFirstNode() == rel.getFirstNode()) {
      nextRel.setFirstPrevRel(rel.getFirstPrevRel());
    }
 else     if (nextRel.getSecondNode() == rel.getFirstNode()) {
      nextRel.setSecondPrevRel(rel.getFirstPrevRel());
    }
 else {
      throw new RuntimeException(nextRel + ""String_Node_Str"" + rel);
    }
    addRelationshipLockToTransaction(lockableRel);
  }
  if (rel.getSecondPrevRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getSecondPrevRel());
    lockManager.getWriteLock(lockableRel);
    RelationshipRecord prevRel=getRelationshipRecord(rel.getSecondPrevRel());
    if (prevRel == null) {
      prevRel=getRelationshipStore().getRecord(rel.getSecondPrevRel(),readFromBuffer);
      addRelationshipRecord(prevRel);
    }
    if (prevRel.getFirstNode() == rel.getSecondNode()) {
      prevRel.setFirstNextRel(rel.getSecondNextRel());
    }
 else     if (prevRel.getSecondNode() == rel.getSecondNode()) {
      prevRel.setSecondNextRel(rel.getSecondNextRel());
    }
 else {
      throw new RuntimeException(prevRel + ""String_Node_Str"" + rel);
    }
    addRelationshipLockToTransaction(lockableRel);
  }
  if (rel.getSecondNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getSecondNextRel());
    lockManager.getWriteLock(lockableRel);
    RelationshipRecord nextRel=getRelationshipRecord(rel.getSecondNextRel());
    if (nextRel == null) {
      nextRel=getRelationshipStore().getRecord(rel.getSecondNextRel(),readFromBuffer);
      addRelationshipRecord(nextRel);
    }
    if (nextRel.getFirstNode() == rel.getSecondNode()) {
      nextRel.setFirstPrevRel(rel.getSecondPrevRel());
    }
 else     if (nextRel.getSecondNode() == rel.getSecondNode()) {
      nextRel.setSecondPrevRel(rel.getSecondPrevRel());
    }
 else {
      throw new RuntimeException(nextRel + ""String_Node_Str"" + rel);
    }
    addRelationshipLockToTransaction(lockableRel);
  }
}","private void disconnectRelationship(RelationshipRecord rel) throws IOException {
  if (rel.getFirstPrevRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getFirstPrevRel());
    getWriteLock(lockableRel);
    RelationshipRecord prevRel=getRelationshipRecord(rel.getFirstPrevRel());
    if (prevRel == null) {
      prevRel=getRelationshipStore().getRecord(rel.getFirstPrevRel(),readFromBuffer);
      addRelationshipRecord(prevRel);
    }
    if (prevRel.getFirstNode() == rel.getFirstNode()) {
      prevRel.setFirstNextRel(rel.getFirstNextRel());
    }
 else     if (prevRel.getSecondNode() == rel.getFirstNode()) {
      prevRel.setSecondNextRel(rel.getFirstNextRel());
    }
 else {
      throw new RuntimeException(prevRel + ""String_Node_Str"" + rel);
    }
  }
  if (rel.getFirstNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getFirstNextRel());
    getWriteLock(lockableRel);
    RelationshipRecord nextRel=getRelationshipRecord(rel.getFirstNextRel());
    if (nextRel == null) {
      nextRel=getRelationshipStore().getRecord(rel.getFirstNextRel(),readFromBuffer);
      addRelationshipRecord(nextRel);
    }
    if (nextRel.getFirstNode() == rel.getFirstNode()) {
      nextRel.setFirstPrevRel(rel.getFirstPrevRel());
    }
 else     if (nextRel.getSecondNode() == rel.getFirstNode()) {
      nextRel.setSecondPrevRel(rel.getFirstPrevRel());
    }
 else {
      throw new RuntimeException(nextRel + ""String_Node_Str"" + rel);
    }
  }
  if (rel.getSecondPrevRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getSecondPrevRel());
    getWriteLock(lockableRel);
    RelationshipRecord prevRel=getRelationshipRecord(rel.getSecondPrevRel());
    if (prevRel == null) {
      prevRel=getRelationshipStore().getRecord(rel.getSecondPrevRel(),readFromBuffer);
      addRelationshipRecord(prevRel);
    }
    if (prevRel.getFirstNode() == rel.getSecondNode()) {
      prevRel.setFirstNextRel(rel.getSecondNextRel());
    }
 else     if (prevRel.getSecondNode() == rel.getSecondNode()) {
      prevRel.setSecondNextRel(rel.getSecondNextRel());
    }
 else {
      throw new RuntimeException(prevRel + ""String_Node_Str"" + rel);
    }
  }
  if (rel.getSecondNextRel() != Record.NO_NEXT_RELATIONSHIP.intValue()) {
    Relationship lockableRel=new LockableRelationship(rel.getSecondNextRel());
    getWriteLock(lockableRel);
    RelationshipRecord nextRel=getRelationshipRecord(rel.getSecondNextRel());
    if (nextRel == null) {
      nextRel=getRelationshipStore().getRecord(rel.getSecondNextRel(),readFromBuffer);
      addRelationshipRecord(nextRel);
    }
    if (nextRel.getFirstNode() == rel.getSecondNode()) {
      nextRel.setFirstPrevRel(rel.getSecondPrevRel());
    }
 else     if (nextRel.getSecondNode() == rel.getSecondNode()) {
      nextRel.setSecondPrevRel(rel.getSecondPrevRel());
    }
 else {
      throw new RuntimeException(nextRel + ""String_Node_Str"" + rel);
    }
  }
}",0.960575719649562
155279,"synchronized void dumpStack(){
  System.out.println(""String_Node_Str"" + readCount + ""String_Node_Str""+ writeCount);
  System.out.println(""String_Node_Str"");
  java.util.Iterator itr=waitingThreadList.iterator();
  while (itr.hasNext()) {
    WaitElement we=(WaitElement)itr.next();
    System.out.print(""String_Node_Str"" + we.element.thread + ""String_Node_Str""+ we.element.readCount+ ""String_Node_Str""+ we.element.writeCount+ ""String_Node_Str""+ we.lockType+ ""String_Node_Str"");
    if (itr.hasNext()) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.println();
    }
  }
  System.out.println(""String_Node_Str"");
  itr=threadLockElementMap.values().iterator();
  while (itr.hasNext()) {
    ThreadLockElement tle=(ThreadLockElement)itr.next();
    System.out.println(""String_Node_Str"" + tle.thread + ""String_Node_Str""+ tle.readCount+ ""String_Node_Str""+ tle.writeCount+ ""String_Node_Str"");
  }
}","synchronized void dumpStack(){
  System.out.println(""String_Node_Str"" + readCount + ""String_Node_Str""+ writeCount+ ""String_Node_Str""+ resource);
  System.out.println(""String_Node_Str"");
  java.util.Iterator itr=waitingThreadList.iterator();
  while (itr.hasNext()) {
    WaitElement we=(WaitElement)itr.next();
    System.out.print(""String_Node_Str"" + we.element.thread + ""String_Node_Str""+ we.element.readCount+ ""String_Node_Str""+ we.element.writeCount+ ""String_Node_Str""+ we.lockType+ ""String_Node_Str"");
    if (itr.hasNext()) {
      System.out.print(""String_Node_Str"");
    }
 else {
      System.out.println();
    }
  }
  System.out.println(""String_Node_Str"");
  itr=threadLockElementMap.values().iterator();
  while (itr.hasNext()) {
    ThreadLockElement tle=(ThreadLockElement)itr.next();
    System.out.println(""String_Node_Str"" + tle.thread + ""String_Node_Str""+ tle.readCount+ ""String_Node_Str""+ tle.writeCount+ ""String_Node_Str"");
  }
}",0.9844836811128946
155280,"public void testBrokenDone(){
  try {
    Xid xid=new XidImpl(new byte[4],new byte[4]);
    XAResource xaRes=xaCon.getXaResource();
    xaRes.start(xid,XAResource.TMNOFLAGS);
    int node1=ds.nextId(Node.class);
    xaCon.getNodeConsumer().createNode(node1);
    int node2=ds.nextId(Node.class);
    xaCon.getNodeConsumer().createNode(node2);
    int n1prop1=ds.nextId(PropertyStore.class);
    xaCon.getNodeConsumer().addProperty(node1,n1prop1,index(""String_Node_Str""),""String_Node_Str"");
    xaRes.end(xid,XAResource.TMSUCCESS);
    xaRes.prepare(xid);
    xaRes.commit(xid,false);
    ds=new NeoStoreXaDataSource(""String_Node_Str"",""String_Node_Str"");
    xaCon=(NeoStoreXaConnection)ds.getXaConnection();
    xaRes=xaCon.getXaResource();
    assertEquals(1,xaRes.recover(XAResource.TMNOFLAGS).length);
    xaCon.clearAllTransactions();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + e);
  }
}","public void testBrokenDone(){
  try {
    Xid xid=new XidImpl(new byte[4],new byte[4]);
    XAResource xaRes=xaCon.getXaResource();
    xaRes.start(xid,XAResource.TMNOFLAGS);
    int node1=ds.nextId(Node.class);
    xaCon.getNodeConsumer().createNode(node1);
    int node2=ds.nextId(Node.class);
    xaCon.getNodeConsumer().createNode(node2);
    int n1prop1=ds.nextId(PropertyStore.class);
    xaCon.getNodeConsumer().addProperty(node1,n1prop1,index(""String_Node_Str""),""String_Node_Str"");
    xaRes.end(xid,XAResource.TMSUCCESS);
    xaRes.prepare(xid);
    copyLogicalLog();
    xaRes.commit(xid,false);
    ds.truncateLogicalLog();
    copyLogicalLog();
    ds.close();
    renameLogicalLog();
    ds=new NeoStoreXaDataSource(""String_Node_Str"",""String_Node_Str"");
    xaCon=(NeoStoreXaConnection)ds.getXaConnection();
    xaRes=xaCon.getXaResource();
    assertEquals(1,xaRes.recover(XAResource.TMNOFLAGS).length);
    xaCon.clearAllTransactions();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(""String_Node_Str"" + e);
  }
}",0.9427848101265824
155281,"public void testRelationshipChangeProperty(){
  try {
    Integer int1=new Integer(1);
    Integer int2=new Integer(2);
    String string1=new String(""String_Node_Str"");
    String string2=new String(""String_Node_Str"");
    Node node1=NodeManager.getManager().createNode();
    Node node2=NodeManager.getManager().createNode();
    Relationship rel1=NodeManager.getManager().createRelationship(node1,node2,MyRelTypes.TEST);
    Relationship rel2=NodeManager.getManager().createRelationship(node2,node1,MyRelTypes.TEST);
    rel1.setProperty(key1,int1);
    rel2.setProperty(key1,string1);
    rel1.setProperty(key2,string2);
    rel2.setProperty(key2,int2);
    try {
      rel1.setProperty(null,null);
      fail(""String_Node_Str"");
    }
 catch (    IllegalValueException e) {
    }
catch (    NotFoundException e) {
      fail(""String_Node_Str"");
    }
    try {
      rel2.setProperty(key1,int1);
      fail(""String_Node_Str"");
    }
 catch (    IllegalValueException e) {
    }
  }
 catch (  IllegalValueException e) {
    fail(""String_Node_Str"" + e);
  }
catch (  NotFoundException e) {
    fail(""String_Node_Str"" + e);
  }
}","public void testRelationshipChangeProperty(){
  try {
    Integer int1=new Integer(1);
    Integer int2=new Integer(2);
    String string1=new String(""String_Node_Str"");
    String string2=new String(""String_Node_Str"");
    Node node1=NodeManager.getManager().createNode();
    Node node2=NodeManager.getManager().createNode();
    Relationship rel1=NodeManager.getManager().createRelationship(node1,node2,MyRelTypes.TEST);
    Relationship rel2=NodeManager.getManager().createRelationship(node2,node1,MyRelTypes.TEST);
    rel1.setProperty(key1,int1);
    rel2.setProperty(key1,string1);
    rel1.setProperty(key2,string2);
    rel2.setProperty(key2,int2);
    try {
      rel1.setProperty(null,null);
      fail(""String_Node_Str"");
    }
 catch (    IllegalValueException e) {
    }
catch (    NotFoundException e) {
      fail(""String_Node_Str"");
    }
    rel2.setProperty(key1,int1);
  }
 catch (  IllegalValueException e) {
    fail(""String_Node_Str"" + e);
  }
catch (  NotFoundException e) {
    fail(""String_Node_Str"" + e);
  }
}",0.9215867158671588
155282,"/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @throws StartupFailedException if unable to start
 */
public static void start(Class<? extends RelationshipType> clazz,String storeDir,boolean create){
  if (started) {
    throw new RuntimeException(""String_Node_Str"");
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  Map<String,String> params=new java.util.HashMap<String,String>();
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",String.valueOf(create));
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  byte resourceId[]=""String_Node_Str"".getBytes();
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getNeoModule().setRelationshipTypes(clazz);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start();
  persistenceSource.start();
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}","/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @throws StartupFailedException if unable to start
 */
public static void start(Class<? extends RelationshipType> clazz,String storeDir,boolean create){
  if (started) {
    throw new RuntimeException(""String_Node_Str"");
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  Map<String,String> params=new java.util.HashMap<String,String>();
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",String.valueOf(create));
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  byte resourceId[]=""String_Node_Str"".getBytes();
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getNeoModule().setRelationshipTypes(clazz);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start();
  persistenceSource.start();
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}",0.987143937484245
155283,"public void beforeCompletion(){
  getListener().removeThisEvaluator();
  if (deletedNodes != null) {
    Iterator<NodeImpl> itr=deletedNodes.values().iterator();
    while (itr.hasNext()) {
      NodeImpl node=itr.next();
      if (node.hasRelationships()) {
        log.severe(""String_Node_Str"" + node + ""String_Node_Str"");
        setRollbackOnly();
      }
    }
  }
}","public void beforeCompletion(){
  getListener().removeThisEvaluator();
  if (getTransactionStatus() == Status.STATUS_MARKED_ROLLBACK) {
    return;
  }
  if (deletedNodes != null) {
    Iterator<NodeImpl> itr=deletedNodes.values().iterator();
    while (itr.hasNext()) {
      NodeImpl node=itr.next();
      if (node.hasRelationships()) {
        log.severe(""String_Node_Str"" + node + ""String_Node_Str"");
        StringBuffer buf=new StringBuffer(""String_Node_Str"");
        int count=0;
        for (        Relationship rel : node.getRelationships()) {
          if (count == 10) {
            buf.append(""String_Node_Str"");
            break;
          }
          buf.append(rel.getType()).append(""String_Node_Str"");
        }
        log.severe(buf.toString());
        setRollbackOnly();
      }
    }
  }
}",0.6261603375527426
155284,"public void stop(){
  NeoConstraintsListener.getListener().unregisterEventListeners();
  AdaptiveCacheManager.getManager().stop();
}","public void stop(){
  RelationshipTypeHolder rth=RelationshipTypeHolder.getHolder();
  rth.clear();
  NodeManager.getManager().clearCache();
  NeoConstraintsListener.getListener().unregisterEventListeners();
  AdaptiveCacheManager.getManager().stop();
}",0.6857142857142857
155285,"@Override public void writeToFile(FileChannel fileChannel,ByteBuffer buffer) throws IOException {
  buffer.clear();
  byte inUse=record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();
  buffer.put(REL_TYPE_COMMAND);
  buffer.putInt(record.getId()).put(inUse).putInt(record.getTypeBlock());
  Collection<DynamicRecord> typeRecords=record.getTypeRecords();
  buffer.putInt(typeRecords.size());
  buffer.flip();
  fileChannel.write(buffer);
  for (  DynamicRecord typeRecord : typeRecords) {
    writeDynamicRecord(typeRecord,fileChannel,buffer);
  }
}","@Override public void writeToFile(FileChannel fileChannel,ByteBuffer buffer) throws IOException {
  buffer.clear();
  byte inUse=record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();
  buffer.put(REL_TYPE_COMMAND);
  buffer.putInt(record.getId()).put(inUse).putInt(record.getTypeBlock());
  Collection<DynamicRecord> typeRecords=record.getTypeRecords();
  buffer.putInt(typeRecords.size());
  for (  DynamicRecord typeRecord : typeRecords) {
    if ((buffer.capacity() - buffer.position()) < typeRecord.getLength()) {
      buffer.flip();
      fileChannel.write(buffer);
      buffer.flip();
    }
    writeDynamicRecord(typeRecord,buffer);
  }
  buffer.flip();
  fileChannel.write(buffer);
}",0.7517509727626459
155286,"static void writeDynamicRecord(DynamicRecord record,FileChannel fileChannel,ByteBuffer buffer) throws IOException {
  buffer.clear();
  byte inUse=record.inUse() ? Record.IN_USE.byteValue() : Record.NOT_IN_USE.byteValue();
  buffer.putInt(record.getId()).put(inUse).putInt(record.getPrevBlock()).putInt(record.getLength()).putInt(record.getNextBlock()).put(record.getData());
  buffer.flip();
  fileChannel.write(buffer);
}","static void writeDynamicRecord(DynamicRecord record,ByteBuffer buffer){
  if (record.inUse()) {
    byte inUse=Record.IN_USE.byteValue();
    buffer.putInt(record.getId()).put(inUse).putInt(record.getPrevBlock()).putInt(record.getLength()).putInt(record.getNextBlock()).put(record.getData());
  }
 else {
    byte inUse=Record.NOT_IN_USE.byteValue();
    buffer.putInt(record.getId()).put(inUse);
  }
}",0.3660606060606061
155287,"static DynamicRecord readDynamicRecord(FileChannel fileChannel,ByteBuffer buffer) throws IOException {
  buffer.clear();
  buffer.limit(17);
  if (fileChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  int id=buffer.getInt();
  byte inUseFlag=buffer.get();
  boolean inUse=false;
  if (inUseFlag == Record.IN_USE.byteValue()) {
    inUse=true;
  }
 else   if (inUseFlag != Record.NOT_IN_USE.byteValue()) {
    throw new IOException(""String_Node_Str"" + inUseFlag);
  }
  DynamicRecord record=new DynamicRecord(id);
  record.setInUse(inUse);
  record.setPrevBlock(buffer.getInt());
  int nrOfBytes=buffer.getInt();
  record.setNextBlock(buffer.getInt());
  buffer.clear();
  buffer.limit(nrOfBytes);
  if (fileChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  byte data[]=new byte[nrOfBytes];
  buffer.get(data);
  record.setData(data);
  return record;
}","static DynamicRecord readDynamicRecord(FileChannel fileChannel,ByteBuffer buffer) throws IOException {
  buffer.clear();
  buffer.limit(17);
  if (fileChannel.read(buffer) != buffer.limit()) {
    return null;
  }
  buffer.flip();
  int id=buffer.getInt();
  byte inUseFlag=buffer.get();
  boolean inUse=false;
  if (inUseFlag == Record.IN_USE.byteValue()) {
    inUse=true;
  }
 else   if (inUseFlag != Record.NOT_IN_USE.byteValue()) {
    throw new IOException(""String_Node_Str"" + inUseFlag);
  }
  DynamicRecord record=new DynamicRecord(id);
  record.setInUse(inUse);
  if (inUse) {
    record.setPrevBlock(buffer.getInt());
    int nrOfBytes=buffer.getInt();
    record.setNextBlock(buffer.getInt());
    buffer.clear();
    buffer.limit(nrOfBytes);
    if (fileChannel.read(buffer) != buffer.limit()) {
      return null;
    }
    buffer.flip();
    byte data[]=new byte[nrOfBytes];
    buffer.get(data);
    record.setData(data);
  }
  return record;
}",0.9109333333333334
155288,"private TxManager(){
  String txLogDir=System.getProperty(""String_Node_Str"");
  if (txLogDir == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  logSwitcherFileName=txLogDir + ""String_Node_Str"";
  txLog1FileName=txLogDir + ""String_Node_Str"";
  txLog2FileName=txLogDir + ""String_Node_Str"";
  try {
    if (new File(logSwitcherFileName).exists()) {
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      byte fileName[]=new byte[256];
      ByteBuffer buf=ByteBuffer.wrap(fileName);
      fc.read(buf);
      String currentTxLog=new String(fileName).trim();
      if (!new File(currentTxLog).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + currentTxLog + ""String_Node_Str"");
      }
      txLog=new TxLog(currentTxLog);
    }
 else {
      if (new File(txLog1FileName).exists() || new File(txLog2FileName).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + txLog1FileName + ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      ByteBuffer buf=ByteBuffer.wrap(txLog1FileName.getBytes(""String_Node_Str""));
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      fc.write(buf);
      txLog=new TxLog(txLog1FileName);
      fc.force(true);
      fc.close();
    }
    Iterator<List<TxLog.Record>> danglingRecordList=txLog.getDanglingRecords();
    if (danglingRecordList.hasNext()) {
      log.warning(""String_Node_Str"" + ""String_Node_Str"");
      recover(danglingRecordList);
    }
    getTxLog().truncate();
    tmOk=true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    throw new RuntimeException(e);
  }
}","private TxManager(){
}",0.0243362831858407
155289,"public void start(){
  if (!startIsOk) {
    return;
  }
  if (dataSourceConfigFile != null) {
    new XaDataSourceConfigFileParser().parse(dataSourceConfigFile);
  }
  startIsOk=false;
}","public void start(){
  if (!startIsOk) {
    return;
  }
  if (dataSourceConfigFile != null) {
    new XaDataSourceConfigFileParser().parse(dataSourceConfigFile);
  }
  TxManager.getManager().init();
  startIsOk=false;
}",0.918918918918919
155290,"void force() throws IOException {
  fileChannel.force(true);
}","void force() throws IOException {
  fileChannel.force(false);
}",0.944
155291,"void open() throws IOException {
  fileChannel=new RandomAccessFile(fileName,""String_Node_Str"").getChannel();
  buffer=ByteBuffer.allocateDirect(9 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE);
  if (fileChannel.size() != 0) {
    doInternalRecovery();
  }
 else {
    scanIsComplete=true;
    logCreated=System.currentTimeMillis();
    buffer.clear();
    buffer.putLong(logCreated);
    buffer.flip();
    fileChannel.write(buffer);
  }
}","void open() throws IOException {
  fileChannel=new RandomAccessFile(fileName,""String_Node_Str"").getChannel();
  buffer=ByteBuffer.allocateDirect(9 + Xid.MAXGTRIDSIZE + Xid.MAXBQUALSIZE * 10);
  if (fileChannel.size() != 0) {
    doInternalRecovery();
  }
 else {
    scanIsComplete=true;
    logCreated=System.currentTimeMillis();
    buffer.clear();
    buffer.putLong(logCreated);
    buffer.flip();
    fileChannel.write(buffer);
  }
}",0.9942594718714122
155292,"RelationshipType getRelationshipType(int id){
  return new RelationshipTypeImpl(relTranslation.get(id));
}","RelationshipType getRelationshipType(int id){
  String name=relTranslation.get(id);
  if (name != null) {
    return new RelationshipTypeImpl(name);
  }
  return null;
}",0.6181818181818182
155293,"/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @throws StartupFailedException if unable to start
 */
public static void start(Class<? extends RelationshipType> clazz,String storeDir,boolean create){
  if (started) {
    throw new RuntimeException(""String_Node_Str"");
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  Map<String,String> params=new java.util.HashMap<String,String>();
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",String.valueOf(create));
  params.put(""String_Node_Str"",storeDir + ""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  byte resourceId[]=""String_Node_Str"".getBytes();
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getNeoModule().setRelationshipTypes(clazz);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start();
  persistenceSource.start();
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}","/** 
 * Starts Neo with default configuration using NioNeo DB as persistence  store. 
 * @param storeDir path to directory where NionNeo DB store is located
 * @param create if true a new NioNeo DB store will be created if nostore exist at <CODE>storeDir</CODE>
 * @throws StartupFailedException if unable to start
 */
public static void start(Class<? extends RelationshipType> clazz,String storeDir,boolean create){
  if (started) {
    throw new RuntimeException(""String_Node_Str"");
  }
  config=new Config();
  config.getTxModule().setTxLogDirectory(storeDir);
  Map<String,String> params=new java.util.HashMap<String,String>();
  storeDir=convertFileSeparators(storeDir);
  String separator=System.getProperty(""String_Node_Str"");
  String store=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",store);
  params.put(""String_Node_Str"",String.valueOf(create));
  String logicalLog=storeDir + separator + ""String_Node_Str"";
  params.put(""String_Node_Str"",logicalLog);
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",""String_Node_Str"");
  byte resourceId[]=""String_Node_Str"".getBytes();
  config.getTxModule().registerDataSource(DEFAULT_DATA_SOURCE_NAME,NIO_NEO_DB_CLASS,resourceId,params);
  System.setProperty(""String_Node_Str"",storeDir);
  persistenceSource=new NioNeoDbPersistenceSource();
  config.setNeoPersistenceSource(DEFAULT_DATA_SOURCE_NAME,create);
  config.getNeoModule().setRelationshipTypes(clazz);
  config.getIdGeneratorModule().setPersistenceSourceInstance(persistenceSource);
  config.getEventModule().init();
  config.getTxModule().init();
  config.getPersistenceModule().init();
  persistenceSource.init();
  config.getIdGeneratorModule().init();
  config.getNeoModule().init();
  config.getEventModule().start();
  config.getTxModule().start();
  config.getPersistenceModule().start();
  persistenceSource.start();
  config.getIdGeneratorModule().start();
  config.getNeoModule().start();
  started=true;
}",0.9066222010481182
155294,"private void autoCreatePath(String store) throws IOException {
  String dirs=store.substring(0,store.lastIndexOf('/'));
  File directories=new File(dirs);
  if (!directories.exists()) {
    if (!directories.mkdirs()) {
      throw new IOException(""String_Node_Str"" + dirs + ""String_Node_Str"");
    }
  }
}","private void autoCreatePath(String store) throws IOException {
  String fileSeparator=System.getProperty(""String_Node_Str"");
  int index=store.lastIndexOf(fileSeparator);
  String dirs=store.substring(0,index);
  File directories=new File(dirs);
  if (!directories.exists()) {
    if (!directories.mkdirs()) {
      throw new IOException(""String_Node_Str"" + dirs + ""String_Node_Str"");
    }
  }
}",0.8074179743223966
155295,"void init(){
  txThreadMap=java.util.Collections.synchronizedMap(new HashMap<Thread,Transaction>());
  String txLogDir=System.getProperty(""String_Node_Str"");
  if (txLogDir == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  logSwitcherFileName=txLogDir + ""String_Node_Str"";
  txLog1FileName=txLogDir + ""String_Node_Str"";
  txLog2FileName=txLogDir + ""String_Node_Str"";
  try {
    if (new File(logSwitcherFileName).exists()) {
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      byte fileName[]=new byte[256];
      ByteBuffer buf=ByteBuffer.wrap(fileName);
      fc.read(buf);
      String currentTxLog=new String(fileName).trim();
      if (!new File(currentTxLog).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + currentTxLog + ""String_Node_Str"");
      }
      txLog=new TxLog(currentTxLog);
    }
 else {
      if (new File(txLog1FileName).exists() || new File(txLog2FileName).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + txLog1FileName + ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      ByteBuffer buf=ByteBuffer.wrap(txLog1FileName.getBytes(""String_Node_Str""));
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      fc.write(buf);
      txLog=new TxLog(txLog1FileName);
      fc.force(true);
      fc.close();
    }
    Iterator<List<TxLog.Record>> danglingRecordList=txLog.getDanglingRecords();
    if (danglingRecordList.hasNext()) {
      log.warning(""String_Node_Str"" + ""String_Node_Str"");
      recover(danglingRecordList);
    }
    getTxLog().truncate();
    tmOk=true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    throw new RuntimeException(e);
  }
}","void init(){
  txThreadMap=java.util.Collections.synchronizedMap(new HashMap<Thread,Transaction>());
  String txLogDir=System.getProperty(""String_Node_Str"");
  if (txLogDir == null) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  String separator=System.getProperty(""String_Node_Str"");
  logSwitcherFileName=txLogDir + separator + ""String_Node_Str"";
  txLog1FileName=txLogDir + separator + ""String_Node_Str"";
  txLog2FileName=txLogDir + separator + ""String_Node_Str"";
  try {
    if (new File(logSwitcherFileName).exists()) {
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      byte fileName[]=new byte[256];
      ByteBuffer buf=ByteBuffer.wrap(fileName);
      fc.read(buf);
      String currentTxLog=new String(fileName).trim();
      if (!new File(currentTxLog).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + currentTxLog + ""String_Node_Str"");
      }
      txLog=new TxLog(currentTxLog);
    }
 else {
      if (new File(txLog1FileName).exists() || new File(txLog2FileName).exists()) {
        throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + txLog1FileName + ""String_Node_Str""+ txLog2FileName+ ""String_Node_Str""+ ""String_Node_Str"");
      }
      ByteBuffer buf=ByteBuffer.wrap(txLog1FileName.getBytes(""String_Node_Str""));
      FileChannel fc=new RandomAccessFile(logSwitcherFileName,""String_Node_Str"").getChannel();
      fc.write(buf);
      txLog=new TxLog(txLog1FileName);
      fc.force(true);
      fc.close();
    }
    Iterator<List<TxLog.Record>> danglingRecordList=txLog.getDanglingRecords();
    if (danglingRecordList.hasNext()) {
      log.warning(""String_Node_Str"" + ""String_Node_Str"");
      recover(danglingRecordList);
    }
    getTxLog().truncate();
    tmOk=true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    log.severe(""String_Node_Str"");
    throw new RuntimeException(e);
  }
}",0.9754312598013593
155296,"/** 
 * Boots OWB and creates and returns a CDIContainerImpl instance, through which beans and events can be accessed.
 */
public boolean initialize(CDIContainer container,CDIContainers containers){
  started=false;
  ClassLoader old=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
  boolean set=CDIOSGiExtension.currentBundle.get() != null;
  CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
  try {
    Enumeration beansXml=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",true);
    if (beansXml == null) {
      return started;
    }
    lifecycle=WebBeansContext.currentInstance().getService(ContainerLifecycle.class);
    OSGiScanner service=(OSGiScanner)WebBeansContext.currentInstance().getScannerService();
    service.setBundle(bundle);
    lifecycle.startApplication(bundle);
    System.out.println(""String_Node_Str"" + bundle.getSymbolicName());
    manager=lifecycle.getBeanManager();
    Set<Class<?>> classes=service.getBeanClasses();
    Set<String> classesName=new HashSet<String>();
    for (    Class<?> clazz : classes) {
      classesName.add(clazz.getName());
    }
    beanClasses=classesName;
    service.release2();
    AnnotatedType annoted=manager.createAnnotatedType(InstanceHolder.class);
    InjectionTarget it=manager.createInjectionTarget(annoted);
    CreationalContext<?> cc=manager.createCreationalContext(null);
    InstanceHolder h=(InstanceHolder)it.produce(cc);
    it.inject(instance,cc);
    it.postConstruct(instance);
    instance=h.getInstance();
    instance.select(BundleHolder.class).get().setBundle(bundle);
    instance.select(BundleHolder.class).get().setContext(bundle.getBundleContext());
    instance.select(ContainerObserver.class).get().setContainers(containers);
    instance.select(ContainerObserver.class).get().setCurrentContainer(container);
    manager.fireEvent(new BundleContainerInitialized(bundle.getBundleContext()));
    started=true;
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
 finally {
    if (!set) {
      CDIOSGiExtension.currentBundle.remove();
    }
    Thread.currentThread().setContextClassLoader(old);
  }
  return started;
}","/** 
 * Boots OWB and creates and returns a CDIContainerImpl instance, through which beans and events can be accessed.
 */
public boolean initialize(CDIContainer container,CDIContainers containers){
  started=false;
  ClassLoader old=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
  boolean set=CDIOSGiExtension.currentBundle.get() != null;
  CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
  try {
    Enumeration beansXml=bundle.findEntries(""String_Node_Str"",""String_Node_Str"",true);
    if (beansXml == null) {
      return started;
    }
    lifecycle=WebBeansContext.currentInstance().getService(ContainerLifecycle.class);
    OSGiScanner service=(OSGiScanner)WebBeansContext.currentInstance().getScannerService();
    service.setBundle(bundle);
    lifecycle.startApplication(bundle);
    System.out.println(""String_Node_Str"" + bundle.getSymbolicName());
    manager=lifecycle.getBeanManager();
    Set<Class<?>> classes=service.getBeanClasses();
    Set<String> classesName=new HashSet<String>();
    for (    Class<?> clazz : classes) {
      classesName.add(clazz.getName());
    }
    beanClasses=classesName;
    service.release2();
    AnnotatedType annoted=manager.createAnnotatedType(InstanceHolder.class);
    InjectionTarget it=manager.createInjectionTarget(annoted);
    CreationalContext<?> cc=manager.createCreationalContext(null);
    InstanceHolder h=(InstanceHolder)it.produce(cc);
    it.inject(h,cc);
    it.postConstruct(h);
    instance=h.getInstance();
    instance.select(BundleHolder.class).get().setBundle(bundle);
    instance.select(BundleHolder.class).get().setContext(bundle.getBundleContext());
    instance.select(ContainerObserver.class).get().setContainers(containers);
    instance.select(ContainerObserver.class).get().setCurrentContainer(container);
    manager.fireEvent(new BundleContainerInitialized(bundle.getBundleContext()));
    started=true;
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
 finally {
    if (!set) {
      CDIOSGiExtension.currentBundle.remove();
    }
    Thread.currentThread().setContextClassLoader(old);
  }
  return started;
}",0.9959128065395096
155297,"public InterBundleEvent(Object event){
  this.event=event;
}","public InterBundleEvent(Object event,Class<?> type){
  this.event=event;
  this.type=type;
}",0.7894736842105263
155298,"public boolean isTyped(Class<?> type){
  return event.getClass().equals(type);
}","public boolean isTyped(Class<?> type){
  if (this.type != null) {
    return this.type.equals(type);
  }
 else {
    return event.getClass().equals(type);
  }
}",0.6666666666666666
155299,"public Class<?> type(){
  return event.getClass();
}","public Class<?> type(){
  if (type != null) {
    return type;
  }
 else {
    return event.getClass();
  }
}",0.6459627329192547
155300,"private <T>T getProxy(Class<T> clazz,Annotation[] qualifiers,Bundle bundle){
  return clazz.cast(Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},new LazyService(clazz,qualifiers,bundle)));
}","private <T>T getProxy(Class<T> interf,Class<? extends T> clazz,Annotation[] qualifiers,Bundle bundle){
  return interf.cast(Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{interf},new LazyService(clazz,qualifiers,bundle)));
}",0.8914027149321267
155301,"private void publish(Class<?> clazz,Object service,List<Annotation> qualifiers){
  Annotation[] annotations=qualifiers.toArray(new Annotation[qualifiers.size()]);
  ServiceRegistration registration=null;
  if (service != null) {
    Publish publish=clazz.getAnnotation(Publish.class);
    Class[] contracts=publish.contracts();
    Properties properties=getServiceProperties(publish,qualifiers);
    if (contracts.length != 0) {
      for (      Class contract : contracts) {
        System.out.println(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ contract.getName());
        registration=bundle.getBundleContext().registerService(contract.getName(),getProxy(contract,annotations,bundle),properties);
      }
    }
 else {
      if (service.getClass().getInterfaces().length > 0) {
        for (        Class interf : service.getClass().getInterfaces()) {
          if (!blackList.contains(interf.getName())) {
            System.out.println(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ interf.getName());
            registration=bundle.getBundleContext().registerService(interf.getName(),getProxy(interf,annotations,bundle),properties);
          }
        }
      }
 else {
        System.out.println(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ clazz.getName());
        registration=bundle.getBundleContext().registerService(clazz.getName(),service,properties);
      }
    }
  }
  if (registration != null) {
    CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
    instance.select(RegistrationsHolder.class).get().addRegistration(registration);
  }
}","private void publish(Class<?> clazz,Object service,List<Annotation> qualifiers){
  Annotation[] annotations=qualifiers.toArray(new Annotation[qualifiers.size()]);
  ServiceRegistration registration=null;
  if (service != null) {
    Publish publish=clazz.getAnnotation(Publish.class);
    Class[] contracts=publish.contracts();
    Properties properties=getServiceProperties(publish,qualifiers);
    if (contracts.length != 0) {
      for (      Class contract : contracts) {
        System.out.println(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ contract.getName());
        registration=bundle.getBundleContext().registerService(contract.getName(),getProxy(contract,clazz,annotations,bundle),properties);
      }
    }
 else {
      if (service.getClass().getInterfaces().length > 0) {
        for (        Class interf : service.getClass().getInterfaces()) {
          if (!blackList.contains(interf.getName())) {
            System.out.println(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ interf.getName());
            registration=bundle.getBundleContext().registerService(interf.getName(),getProxy(interf,clazz,annotations,bundle),properties);
          }
        }
      }
 else {
        System.out.println(""String_Node_Str"" + clazz.getName() + ""String_Node_Str""+ clazz.getName());
        registration=bundle.getBundleContext().registerService(clazz.getName(),service,properties);
      }
    }
  }
  if (registration != null) {
    CDIOSGiExtension.currentBundle.set(bundle.getBundleId());
    instance.select(RegistrationsHolder.class).get().addRegistration(registration);
  }
}",0.9962709757613424
155302,"private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  while (!successfull && (endTime - System.currentTimeMillis()) > 0) {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}","private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  do {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
 while (!successfull && (endTime - System.currentTimeMillis()) > 0);
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}",0.8918532634587899
155303,"private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  while (!successfull && (endTime - System.currentTimeMillis()) > 0) {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}","private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  do {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
 while (!successfull && (endTime - System.currentTimeMillis()) > 0);
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}",0.8918532634587899
155304,"private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  while (!successfull && (endTime - System.currentTimeMillis()) > 0) {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}","private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  do {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
 while (!successfull && (endTime - System.currentTimeMillis()) > 0);
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}",0.8918532634587899
155305,"private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  while (!successfull && (endTime - System.currentTimeMillis()) > 0) {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}","private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  do {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
 while (!successfull && (endTime - System.currentTimeMillis()) > 0);
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}",0.8918532634587899
155306,"private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  while (!successfull && (endTime - System.currentTimeMillis()) > 0) {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}","private void findOrFail(String xpath,String tag,String attribute,String value,String currentUrl,int waitAtMost) throws InterruptedException {
  boolean successfull=false;
  long endTime=System.currentTimeMillis() + waitAtMost;
  log(""String_Node_Str"" + tag + ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath);
  do {
    webClient.waitForBackgroundJavaScriptStartingBefore(100);
    successfull=find(xpath,tag,attribute,value);
    if (!successfull) {
      log(""String_Node_Str"" + tag + ""String_Node_Str"");
      logAllTags((List<DomNode>)page.getByXPath(xpath),tag);
    }
  }
 while (!successfull && (endTime - System.currentTimeMillis()) > 0);
  if (successfull)   log(""String_Node_Str"" + (System.currentTimeMillis() - endTime + waitAtMost) + ""String_Node_Str"");
  if (!successfull) {
    log(page.asXml());
    findClosestXpath(xpath);
    fail(step + ""String_Node_Str"" + tag+ ""String_Node_Str""+ attribute+ ""String_Node_Str""+ value+ ""String_Node_Str""+ xpath+ ""String_Node_Str""+ currentUrl+ ""String_Node_Str"");
  }
}",0.8918532634587899
155307,"public Window getWindow(String name){
  if (super.getWindow(name) == null && repository.contains(name)) {
    PDFDocument doc=repository.get(name);
    PDFViewerView pvv=new PDFViewerView(name);
    PDFViewerPresenter pvp=new PDFViewerPresenter(pvv,doc);
    Window pdfWindow=pvp.go(this);
    addWindow(pdfWindow);
    return pdfWindow;
  }
  return super.getWindow(name);
}","public Window getWindow(String name){
  if (super.getWindow(name) == null && repository.contains(name)) {
    PDFDocument doc=repository.get(name);
    PDFViewerView pvv=new PDFViewerView(name,this);
    PDFViewerPresenter pvp=new PDFViewerPresenter(pvv,doc);
    Window pdfWindow=pvp.go(this);
    addWindow(pdfWindow);
    return pdfWindow;
  }
  return super.getWindow(name);
}",0.8450331125827815
155308,"public PDFViewerPresenter(Display display,PDFDocument doc){
  this.display=display;
  pdfDoc=new Document();
  InputStream in=new ByteArrayInputStream(doc.getDocument());
  try {
    pdfDoc.setInputStream(in,""String_Node_Str"");
  }
 catch (  PDFException e) {
    e.printStackTrace();
  }
catch (  PDFSecurityException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  bind();
  Image im=pdfDoc.getPageImage(2,GraphicsRenderingHints.SCREEN,Page.BOUNDARY_CROPBOX,0,1);
  display.setPage(im);
}","public PDFViewerPresenter(Display display,PDFDocument doc){
  this.display=display;
  pdfDoc=new Document();
  InputStream in=new ByteArrayInputStream(doc.getDocument());
  try {
    pdfDoc.setInputStream(in,""String_Node_Str"");
  }
 catch (  PDFException e) {
    e.printStackTrace();
  }
catch (  PDFSecurityException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  bind();
  Image im=pdfDoc.getPageImage(pdfDoc.getNumberOfPages() - 1,GraphicsRenderingHints.SCREEN,Page.BOUNDARY_CROPBOX,0,1);
  display.setPage(im);
}",0.9725776965265084
155309,"public PDFViewerView(String name){
  super(name);
  setTheme(""String_Node_Str"");
  Label label=new Label(""String_Node_Str"");
  addComponent(label);
  setLayout(new HorizontalLayout());
  final Panel marginalRight=new Panel();
  marginalRight.setLayout(new VerticalLayout());
  addComponent(marginalRight);
}","public PDFViewerView(String name,Application app){
  super(name);
  setTheme(""String_Node_Str"");
  Label label=new Label(""String_Node_Str"");
  addComponent(label);
  HorizontalLayout hl=new HorizontalLayout();
  ground.setHeight(""String_Node_Str"");
  ground.setWidth(""String_Node_Str"");
  hl.addComponent(ground);
  final Panel marginalRight=new Panel();
  hl.addComponent(marginalRight);
  addComponent(hl);
  addComponent(marginalRight);
  this.app=app;
}",0.5654450261780105
155310,"private Resource createStreamResource(final Image im){
  StreamResource.StreamSource curIm=new StreamResource.StreamSource(){
    private ByteArrayOutputStream imagebuffer=null;
    public InputStream getStream(){
      imagebuffer=new ByteArrayOutputStream();
      try {
        ImageIO.write((RenderedImage)im,""String_Node_Str"",imagebuffer);
      }
 catch (      IOException e) {
        return null;
      }
      return new ByteArrayInputStream(imagebuffer.toByteArray());
    }
  }
;
  return new StreamResource(curIm,""String_Node_Str"",this.getApplication());
}","private Resource createStreamResource(final Image im){
  StreamResource.StreamSource curIm=new StreamResource.StreamSource(){
    private ByteArrayOutputStream imagebuffer=null;
    public InputStream getStream(){
      imagebuffer=new ByteArrayOutputStream();
      try {
        ImageIO.write((RenderedImage)im,""String_Node_Str"",imagebuffer);
      }
 catch (      IOException e) {
        return null;
      }
      return new ByteArrayInputStream(imagebuffer.toByteArray());
    }
  }
;
  return new StreamResource(curIm,""String_Node_Str"",app);
}",0.9785330948121646
155311,"public void setPage(Image currentPageIm){
  ground.setIcon(createStreamResource(currentPageIm));
}","public void setPage(Image currentPageIm){
  ground.setIcon(createStreamResource(currentPageIm));
  requestRepaint();
}",0.9074074074074074
155312,"private void addValidationConfigurationTo(Node rootNode){
  rootNode.getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"").text(""String_Node_Str"").getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"").text(""String_Node_Str"");
}","private void addValidationConfigurationTo(Node node){
  node.getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"").text(""String_Node_Str"");
}",0.7154882154882155
155313,"@Override public void addValidationConfiguration(ScaffoldGeneratedResources event){
  if (event.getProvider() instanceof MetawidgetScaffold) {
    final FileResource<?> configFile=getMetawidgetConfigurationFile();
    if (configFile.exists()) {
      final Node root=XMLParser.parse(configFile.getResourceInputStream());
      removeAllCommentNodes(root);
      boolean choice;
      final Node beanValidationInspector=root.getSingle(""String_Node_Str"");
      if (beanValidationInspector != null) {
        choice=prompt.promptBoolean(""String_Node_Str"");
      }
 else {
        choice=prompt.promptBoolean(""String_Node_Str"");
      }
      if (choice) {
        addValidationConfigurationTo(root);
        configFile.setContents(XMLParser.toXMLString(root));
      }
    }
  }
}","@Override public void addValidationConfiguration(ScaffoldGeneratedResources event){
  if (event.getProvider() instanceof MetawidgetScaffold) {
    final FileResource<?> configFile=getMetawidgetConfigurationFile();
    if (configFile.exists()) {
      final Node root=XMLParser.parse(configFile.getResourceInputStream());
      final Node array=root.getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").attribute(""String_Node_Str"",""String_Node_Str"").getOrCreate(""String_Node_Str"").getOrCreate(""String_Node_Str"");
      boolean choice;
      final Node beanValidationInspector=array.getSingle(""String_Node_Str"");
      if (beanValidationInspector == null) {
        choice=prompt.promptBoolean(""String_Node_Str"");
      }
 else {
        choice=prompt.promptBoolean(""String_Node_Str"");
      }
      if (choice) {
        addValidationConfigurationTo(array);
        removeAllCommentNodes(root);
        configFile.setContents(XMLParser.toXMLString(root));
      }
    }
  }
}",0.4621091679915209
155314,"@Override public boolean install(){
  if (!isInstalled()) {
    saveConfig(Descriptors.create(ValidationDescriptor.class));
  }
  return true;
}","@Override public boolean install(){
  if (!isInstalled()) {
    final DependencyFacet facet=project.getFacet(DependencyFacet.class);
    if (!facet.hasDependency(javaee6SpecAPI)) {
      facet.addDependency(javaee6SpecAPI);
    }
    saveConfig(Descriptors.create(ValidationDescriptor.class));
  }
  return true;
}",0.6244541484716157
155315,"@Override public boolean isInstalled(){
  return getConfigFile().exists();
}","@Override public boolean isInstalled(){
  final DependencyFacet facet=project.getFacet(DependencyFacet.class);
  return getConfigFile().exists() && facet.hasDependency(javaee6SpecAPI);
}",0.5801526717557252
155316,"@Override public FileResource<?> getConfigFile(){
  final ResourceFacet resourceFacet=project.getFacet(ResourceFacet.class);
  return resourceFacet.getResource(""String_Node_Str"" + File.separator + ""String_Node_Str"");
}","@Override public FileResource<?> getConfigFile(){
  final ResourceFacet facet=project.getFacet(ResourceFacet.class);
  return facet.getResource(""String_Node_Str"" + File.separator + ""String_Node_Str"");
}",0.9523809523809524
155317,"@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void setup(@Option(name=""String_Node_Str"",defaultValue=""String_Node_Str"",required=true) BVProvider provider,@Option(name=""String_Node_Str"") String messageInterpolator,@Option(name=""String_Node_Str"") String traversableResolver,@Option(name=""String_Node_Str"") String constraintValidatorFactory,PipeOut pipeOut){
  final ValidationProvider validationProvider=provider.getValidationProvider(beanManager);
  installValidationFacet();
  installValidationDependencies();
  installValidationProviderDependencies(validationProvider.getDependencies());
  if (shouldCreateDescriptor(messageInterpolator,traversableResolver,constraintValidatorFactory)) {
    final ValidationDescriptor providerDescriptor=validationProvider.getDefaultDescriptor();
    final ValidationDescriptor descriptor=Descriptors.create(ValidationDescriptor.class).defaultProvider(providerDescriptor.getDefaultProvider()).messageInterpolator(messageInterpolator == null ? providerDescriptor.getMessageInterpolator() : messageInterpolator).traversableResolver(traversableResolver == null ? providerDescriptor.getTraversableResolver() : traversableResolver).constraintValidatorFactory(constraintValidatorFactory == null ? providerDescriptor.getConstraintValidatorFactory() : constraintValidatorFactory);
    project.getFacet(ValidationFacet.class).saveConfig(descriptor);
    pipeOut.println(""String_Node_Str"");
  }
}","@Command(value=""String_Node_Str"",help=""String_Node_Str"") public void setup(@Option(name=""String_Node_Str"",defaultValue=""String_Node_Str"",required=true) BVProvider provider,@Option(name=""String_Node_Str"") String messageInterpolator,@Option(name=""String_Node_Str"") String traversableResolver,@Option(name=""String_Node_Str"") String constraintValidatorFactory,PipeOut pipeOut){
  final ValidationProvider validationProvider=provider.getValidationProvider(beanManager);
  installValidationFacet();
  installValidationProviderDependencies(validationProvider.getDependencies());
  if (shouldCreateDescriptor(messageInterpolator,traversableResolver,constraintValidatorFactory)) {
    final ValidationDescriptor providerDescriptor=validationProvider.getDefaultDescriptor();
    final ValidationDescriptor descriptor=Descriptors.create(ValidationDescriptor.class).defaultProvider(providerDescriptor.getDefaultProvider()).messageInterpolator(messageInterpolator == null ? providerDescriptor.getMessageInterpolator() : messageInterpolator).traversableResolver(traversableResolver == null ? providerDescriptor.getTraversableResolver() : traversableResolver).constraintValidatorFactory(constraintValidatorFactory == null ? providerDescriptor.getConstraintValidatorFactory() : constraintValidatorFactory);
    project.getFacet(ValidationFacet.class).saveConfig(descriptor);
    pipeOut.println(""String_Node_Str"");
  }
}",0.9876890608512136
155318,"@Inject public ValidationPlugin(Project project,Event<InstallFacets> request,BeanManager beanManager,ShellPrompt shellPrompt){
  this.project=project;
  this.beanManager=beanManager;
  this.request=request;
  this.dependencyFacet=project.getFacet(DependencyFacet.class);
  this.shellPrompt=shellPrompt;
  this.javaee6SpecAPI=DependencyBuilder.create().setGroupId(""String_Node_Str"").setArtifactId(""String_Node_Str"").setVersion(""String_Node_Str"").setScopeType(PROVIDED);
  this.beanValidationAPI=DependencyBuilder.create().setGroupId(""String_Node_Str"").setArtifactId(""String_Node_Str"").setVersion(""String_Node_Str"").setScopeType(PROVIDED);
}","@Inject public ValidationPlugin(Project project,Event<InstallFacets> request,BeanManager beanManager,ShellPrompt shellPrompt){
  this.project=project;
  this.beanManager=beanManager;
  this.request=request;
  this.dependencyFacet=project.getFacet(DependencyFacet.class);
  this.shellPrompt=shellPrompt;
}",0.6447507953340403
155319,"private boolean checkPage(SpaceContentEntityObject page){
  if (page == null) {
    return false;
  }
  List<String> spaceKeys=pluginSettingsManager.getAllowedConfluenceSpaceKeysAsList();
  if (spaceKeys == null || spaceKeys.isEmpty()) {
    return true;
  }
  for (  String spaceKey : spaceKeys) {
    if (page.getSpaceKey().equals(spaceKey)) {
      return true;
    }
  }
  return false;
}","private boolean checkPage(ContentEntityObject page){
  if (page == null) {
    return false;
  }
  String pageSpaceKey;
  if (page instanceof Draft) {
    pageSpaceKey=((Draft)page).getDraftSpaceKey();
  }
 else {
    pageSpaceKey=((SpaceContentEntityObject)page).getSpaceKey();
  }
  List<String> spaceKeys=pluginSettingsManager.getAllowedConfluenceSpaceKeysAsList();
  if (spaceKeys == null || spaceKeys.isEmpty()) {
    return true;
  }
  for (  String spaceKey : spaceKeys) {
    if (pageSpaceKey.equals(spaceKey)) {
      return true;
    }
  }
  return false;
}",0.7778936392075079
155320,"@Override public boolean checkUsagePermission(User user,SpaceContentEntityObject page){
  return checkUser(user) && checkPage(page);
}","@Override public boolean checkUsagePermission(User user,ContentEntityObject page){
  return checkUser(user) && checkPage(page);
}",0.9809885931558936
155321,"boolean checkUsagePermission(User user,SpaceContentEntityObject page);","boolean checkUsagePermission(User user,ContentEntityObject page);",0.9629629629629628
155322,"@Override public String execute(@SuppressWarnings(""String_Node_Str"") Map parameters,String body,RenderContext renderContext) throws MacroException {
  if (!(renderContext instanceof PageContext)) {
    throw new MacroException(""String_Node_Str"");
  }
  SpaceContentEntityObject page=(SpaceContentEntityObject)((PageContext)renderContext).getEntity();
  Metadata metadata;
  try {
    metadata=metadataManager.extractMetadata(page);
    if (metadata == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  MetadataException e) {
    throw new MacroException(""String_Node_Str"",e);
  }
  User user;
  if (ServletActionContext.getRequest().getRemoteUser() == null) {
    user=AuthenticatedUserThreadLocal.getUser();
  }
 else {
    user=page.getUserAccessor().getUser(ServletActionContext.getRequest().getRemoteUser());
  }
  boolean checkUsagePermission=pluginPermissionsManager.checkUsagePermission(user,page);
  return velocityHelper.generateMetadataHtml(page,checkUsagePermission,metadata);
}","@Override public String execute(@SuppressWarnings(""String_Node_Str"") Map parameters,String body,RenderContext renderContext) throws MacroException {
  if (!(renderContext instanceof PageContext)) {
    throw new MacroException(""String_Node_Str"");
  }
  ContentEntityObject page=((PageContext)renderContext).getEntity();
  Metadata metadata;
  try {
    metadata=metadataManager.extractMetadata(page);
    if (metadata == null) {
      return ""String_Node_Str"";
    }
  }
 catch (  MetadataException e) {
    throw new MacroException(""String_Node_Str"",e);
  }
  User user;
  if (ServletActionContext.getRequest().getRemoteUser() == null) {
    user=AuthenticatedUserThreadLocal.getUser();
  }
 else {
    user=page.getUserAccessor().getUser(ServletActionContext.getRequest().getRemoteUser());
  }
  boolean checkUsagePermission=pluginPermissionsManager.checkUsagePermission(user,page);
  return velocityHelper.generateMetadataHtml(page,checkUsagePermission,metadata);
}",0.9842399593289272
155323,"public String getEditLink(){
  return pluginSettingsManager.getWordpressRootUrl() + MessageFormat.format(pluginSettingsManager.getWordpressEditPostRelativePath(),metadata.getPostId());
}","public String getEditLink(){
  return pluginSettingsManager.getWordpressRootUrl() + MessageFormat.format(pluginSettingsManager.getWordpressEditPostRelativePath(),metadata.getPostId().toString());
}",0.9712793733681462
155324,"private void mergeLocalAndRemoteTags(){
  List<String> tagNames=metadata.getTagNames();
  for (  String tagName : tagNames) {
    boolean found=false;
    for (    WordpressTag tag : getWordpressTags()) {
      if (tag.getName().equals(tagName)) {
        found=true;
        break;
      }
    }
    if (!found) {
      getWordpressTags().add(new WordpressTag(tagName));
    }
  }
}","private void mergeLocalAndRemoteTags(){
  List<String> tagNames=metadata.getTagNames();
  if (tagNames != null) {
    for (    String tagName : tagNames) {
      boolean found=false;
      Set<WordpressTag> wordpressTags=getWordpressTags();
      for (      WordpressTag tag : wordpressTags) {
        if (tag.getName().equals(tagName)) {
          found=true;
          break;
        }
      }
      if (!found) {
        wordpressTags.add(new WordpressTag(tagName));
      }
    }
  }
}",0.4151376146788991
155325,"private StringBuilder buildMacroBody(Metadata metadata,boolean includeMacroDelimiter) throws MetadataException {
  Map<String,String> properties=describe(metadata);
  StringBuilder sb=new StringBuilder();
  if (includeMacroDelimiter) {
    sb.append(LINE_SEPARATOR);
    sb.append(WORDPRESS_META_START);
  }
  sb.append(LINE_SEPARATOR);
  sb.append(WARNING);
  sb.append(LINE_SEPARATOR);
  for (  Entry<String,String> entry : properties.entrySet()) {
    if (entry.getValue() != null) {
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey());
      sb.append(""String_Node_Str"");
      sb.append(entry.getValue());
      sb.append(LINE_SEPARATOR);
    }
  }
  if (includeMacroDelimiter) {
    sb.append(WORDPRESS_META_END);
    sb.append(LINE_SEPARATOR);
  }
  return sb;
}","private StringBuilder buildMacroBody(Metadata metadata,boolean includeMacroDelimiter) throws MetadataException {
  Map<String,String> properties=describe(metadata);
  StringBuilder sb=new StringBuilder();
  if (includeMacroDelimiter) {
    sb.append(LINE_SEPARATOR);
    sb.append(LINE_SEPARATOR);
    sb.append(WORDPRESS_META_START);
  }
  sb.append(LINE_SEPARATOR);
  sb.append(WARNING);
  sb.append(LINE_SEPARATOR);
  for (  Entry<String,String> entry : properties.entrySet()) {
    if (entry.getValue() != null) {
      sb.append(""String_Node_Str"");
      sb.append(entry.getKey());
      sb.append(""String_Node_Str"");
      sb.append(entry.getValue());
      sb.append(LINE_SEPARATOR);
    }
  }
  if (includeMacroDelimiter) {
    sb.append(WORDPRESS_META_END);
    sb.append(LINE_SEPARATOR);
  }
  return sb;
}",0.980637101811368
155326,"public void tagNamesToPageLabels(ContentEntityObject page,Metadata metadata){
  List<String> tagNames=metadata.getTagNames();
  for (  String tagName : tagNames) {
    boolean found=false;
    List<Label> labels=page.getLabels();
    for (    Label label : labels) {
      if (label.getName().equals(tagName)) {
        found=true;
        break;
      }
    }
    if (!found) {
      labelManager.addLabel(page,new Label(tagName));
    }
  }
  List<Label> deletedLabels=new ArrayList<Label>();
  for (  Label label : page.getLabels()) {
    boolean found=false;
    for (    String tagName : tagNames) {
      if (label.getName().equals(tagName)) {
        found=true;
        break;
      }
    }
    if (!found) {
      deletedLabels.add(label);
    }
  }
  if (!deletedLabels.isEmpty()) {
    labelManager.removeLabels(page,deletedLabels);
  }
}","public void tagNamesToPageLabels(ContentEntityObject page,Metadata metadata){
  List<String> tagNames=metadata.getTagNames();
  if (tagNames != null) {
    for (    String tagName : tagNames) {
      boolean found=false;
      List<Label> labels=page.getLabels();
      for (      Label label : labels) {
        if (label.getName().equals(tagName)) {
          found=true;
          break;
        }
      }
      if (!found) {
        labelManager.addLabel(page,new Label(tagName));
      }
    }
  }
  List<Label> deletedLabels=new ArrayList<Label>();
  for (  Label label : page.getLabels()) {
    boolean found=false;
    if (tagNames != null) {
      for (      String tagName : tagNames) {
        if (label.getName().equals(tagName)) {
          found=true;
          break;
        }
      }
    }
    if (!found) {
      deletedLabels.add(label);
    }
  }
  if (!deletedLabels.isEmpty()) {
    labelManager.removeLabels(page,deletedLabels);
  }
}",0.9147286821705426
155327,"public static Map<String,String> split(String str,String entrySep,String keyValueSep){
  String[] tokens=StringUtils.splitPreserveAllTokens(str,entrySep);
  Map<String,String> map=new HashMap<String,String>(tokens.length);
  for (  String token : tokens) {
    String[] keyValue=StringUtils.splitPreserveAllTokens(token,keyValueSep,2);
    String key=keyValue.length > 0 ? StringUtils.trimToNull(keyValue[0]) : null;
    String value=keyValue.length > 1 ? StringUtils.trimToNull(keyValue[1]) : null;
    map.put(key,value);
  }
  return map;
}","public static Map<String,String> split(String str,String entrySep,String keyValueSep){
  if (StringUtils.isEmpty(str)) {
    return null;
  }
  String[] tokens=StringUtils.splitPreserveAllTokens(str,entrySep);
  Map<String,String> map=new HashMap<String,String>(tokens.length);
  for (  String token : tokens) {
    String[] keyValue=StringUtils.splitPreserveAllTokens(token,keyValueSep,2);
    String key=keyValue.length > 0 ? StringUtils.trimToNull(keyValue[0]) : null;
    String value=keyValue.length > 1 ? StringUtils.trimToNull(keyValue[1]) : null;
    map.put(key,value);
  }
  return map;
}",0.9517966695880806
155328,"/** 
 * http://www.xmlrpc.com/metaWeblogApi http://mindsharestrategy.com/wp-xmlrpc-metaweblog/ http://www.perkiset.org/forum/perl/metaweblognewpost_to_wordpress_blog_xmlrpcphp-t1307.0.html http://joysofprogramming.com/wordpress-xmlrpc-metaweblog-newpost/ http://life.mysiteonline.org/archives/161-Automatic-Post-Creation-with-Wordpress,-PHP,-and-XML-RPC.html
 * @param post to create
 * @return the created post
 * @throws WordpressXmlRpcException
 */
public WordpressPost post(WordpressPost post) throws WordpressXmlRpcException {
  Vector<Object> params=new Vector<Object>();
  if (post.getPostId() == null) {
    params.add(wordpressConnection.getBlogId());
  }
 else {
    params.add(post.getPostId());
  }
  params.add(wordpressConnection.getUsername());
  params.add(wordpressConnection.getPassword());
  Hashtable<String,Object> map=new Hashtable<String,Object>();
  if (post.getTitle() != null) {
    map.put(""String_Node_Str"",post.getTitle());
  }
  if (post.getCategoryNames() != null) {
    map.put(""String_Node_Str"",new Vector<String>(post.getCategoryNames()));
  }
  if (post.getBody() != null) {
    map.put(""String_Node_Str"",post.getBody());
  }
  if (post.getTagNames() != null) {
    map.put(""String_Node_Str"",new Vector<String>(post.getTagNames()));
  }
  if (post.getAuthorId() != null) {
    map.put(""String_Node_Str"",post.getAuthorId());
  }
  if (post.getPostSlug() != null) {
    map.put(""String_Node_Str"",post.getPostSlug());
  }
  params.add(map);
  params.add(!post.isDraft());
  if (post.getPostId() == null) {
    Object ret=invoke(CREATE_POST_METHOD_NAME,params);
    int postId=Integer.parseInt(ret.toString());
    post.setPostId(postId);
  }
 else {
    Boolean ret=invoke(UPDATE_POST_METHOD_NAME,params);
    if (!ret) {
      throw new WordpressXmlRpcException(""String_Node_Str"");
    }
  }
  return findPostById(post.getPostId());
}","/** 
 * http://www.xmlrpc.com/metaWeblogApi http://mindsharestrategy.com/wp-xmlrpc-metaweblog/ http://www.perkiset.org/forum/perl/metaweblognewpost_to_wordpress_blog_xmlrpcphp-t1307.0.html http://joysofprogramming.com/wordpress-xmlrpc-metaweblog-newpost/ http://life.mysiteonline.org/archives/161-Automatic-Post-Creation-with-Wordpress,-PHP,-and-XML-RPC.html
 * @param post to create
 * @return the created post
 * @throws WordpressXmlRpcException
 */
public WordpressPost post(WordpressPost post) throws WordpressXmlRpcException {
  Vector<Object> params=new Vector<Object>();
  if (post.getPostId() == null) {
    params.add(wordpressConnection.getBlogId());
  }
 else {
    params.add(post.getPostId());
  }
  params.add(wordpressConnection.getUsername());
  params.add(wordpressConnection.getPassword());
  Hashtable<String,Object> map=new Hashtable<String,Object>();
  map.put(""String_Node_Str"",post.getTitle());
  map.put(""String_Node_Str"",post.getBody());
  map.put(""String_Node_Str"",post.getAuthorId());
  map.put(""String_Node_Str"",post.getPostSlug());
  if (post.getCategoryNames() != null) {
    map.put(""String_Node_Str"",new Vector<String>(post.getCategoryNames()));
  }
 else {
    map.put(""String_Node_Str"",new Vector<String>());
  }
  if (post.getTagNames() != null) {
    map.put(""String_Node_Str"",new Vector<String>(post.getTagNames()));
  }
 else {
    map.put(""String_Node_Str"",new Vector<String>());
  }
  params.add(map);
  params.add(!post.isDraft());
  if (post.getPostId() == null) {
    Object ret=invoke(CREATE_POST_METHOD_NAME,params);
    int postId=Integer.parseInt(ret.toString());
    post.setPostId(postId);
  }
 else {
    Boolean ret=invoke(UPDATE_POST_METHOD_NAME,params);
    if (!ret) {
      throw new WordpressXmlRpcException(""String_Node_Str"");
    }
  }
  return findPostById(post.getPostId());
}",0.8166351606805293
155329,"/** 
 * http://xmlrpc.free-conversant.com/docs/bloggerAPI#getPost http://joysofprogramming.com/blogger-getpost/ http://stackoverflow.com/questions/3083039/how-can-i-get-a-post-with-xml-rpc-in-wordpress
 * @param postId
 * @return post
 * @throws WordpressXmlRpcException
 */
public WordpressPost findPostById(int postId) throws WordpressXmlRpcException {
  Vector<Object> params=new Vector<Object>();
  params.add(postId);
  params.add(wordpressConnection.getUsername());
  params.add(wordpressConnection.getPassword());
  Map<String,Object> map=invoke(FIND_POST_BY_ID_METHOD_NAME,params);
  WordpressPost post=new WordpressPost();
  post.setPostId(postId);
  post.setDraft(false);
  Object authorId=map.get(""String_Node_Str"");
  post.setAuthorId(authorId == null ? null : Integer.valueOf(authorId.toString()));
  Date dateCreated=(Date)map.get(""String_Node_Str"");
  post.setDateCreated(dateCreated);
  String body=(String)map.get(""String_Node_Str"");
  post.setBody(body);
  String title=(String)map.get(""String_Node_Str"");
  post.setTitle(title);
  post.setDraft(!""String_Node_Str"".equals(map.get(""String_Node_Str"")));
  @SuppressWarnings(""String_Node_Str"") List<String> categoryNames=(List<String>)map.get(""String_Node_Str"");
  post.setCategoryNames(categoryNames);
  List<String> tagNames=Arrays.asList(((String)map.get(""String_Node_Str"")).split(""String_Node_Str""));
  post.setTagNames(tagNames);
  String slug=(String)map.get(""String_Node_Str"");
  post.setPostSlug(slug);
  String permaLink=(String)map.get(""String_Node_Str"");
  post.setLink(permaLink);
  return post;
}","/** 
 * http://xmlrpc.free-conversant.com/docs/bloggerAPI#getPost http://joysofprogramming.com/blogger-getpost/ http://stackoverflow.com/questions/3083039/how-can-i-get-a-post-with-xml-rpc-in-wordpress
 * @param postId
 * @return post
 * @throws WordpressXmlRpcException
 */
public WordpressPost findPostById(int postId) throws WordpressXmlRpcException {
  Vector<Object> params=new Vector<Object>();
  params.add(postId);
  params.add(wordpressConnection.getUsername());
  params.add(wordpressConnection.getPassword());
  Map<String,Object> map=invoke(FIND_POST_BY_ID_METHOD_NAME,params);
  WordpressPost post=new WordpressPost();
  post.setPostId(postId);
  post.setDraft(false);
  Object authorId=map.get(""String_Node_Str"");
  post.setAuthorId(authorId == null ? null : Integer.valueOf(authorId.toString()));
  Date dateCreated=(Date)map.get(""String_Node_Str"");
  post.setDateCreated(dateCreated);
  String body=(String)map.get(""String_Node_Str"");
  post.setBody(body);
  String title=(String)map.get(""String_Node_Str"");
  post.setTitle(title);
  post.setDraft(!""String_Node_Str"".equals(map.get(""String_Node_Str"")));
  @SuppressWarnings(""String_Node_Str"") List<String> categoryNames=(List<String>)map.get(""String_Node_Str"");
  post.setCategoryNames(categoryNames);
  List<String> tagNames=CollectionUtils.split((String)map.get(""String_Node_Str""),""String_Node_Str"");
  post.setTagNames(tagNames);
  String slug=(String)map.get(""String_Node_Str"");
  post.setPostSlug(slug);
  String permaLink=(String)map.get(""String_Node_Str"");
  post.setLink(permaLink);
  return post;
}",0.9526533206228154
155330,"/** 
 * http://xmlrpc.free-conversant.com/docs/bloggerAPI#getPost http://joysofprogramming.com/blogger-getpost/ http://stackoverflow.com/questions/3083039/how-can-i-get-a-post-with-xml-rpc-in-wordpress
 * @param postId
 * @return post
 * @throws WordpressXmlRpcException
 */
public WordpressPost findPostById(int postId) throws WordpressXmlRpcException {
  Vector<Object> params=new Vector<Object>();
  params.add(postId);
  params.add(wordpressConnection.getUsername());
  params.add(wordpressConnection.getPassword());
  Map<String,Object> map=invoke(FIND_POST_BY_ID_METHOD_NAME,params);
  WordpressPost post=new WordpressPost();
  post.setPostId(postId);
  post.setDraft(false);
  Object authorId=map.get(""String_Node_Str"");
  post.setAuthorId(authorId == null ? null : Integer.valueOf(authorId.toString()));
  Date dateCreated=(Date)map.get(""String_Node_Str"");
  post.setDateCreated(dateCreated);
  String body=(String)map.get(""String_Node_Str"");
  post.setBody(body);
  String title=(String)map.get(""String_Node_Str"");
  post.setTitle(title);
  post.setDraft(!""String_Node_Str"".equals(map.get(""String_Node_Str"")));
  @SuppressWarnings(""String_Node_Str"") List<String> categoryNames=(List<String>)map.get(""String_Node_Str"");
  post.setCategoryNames(categoryNames);
  List<String> tagNames=CollectionUtils.split((String)map.get(""String_Node_Str""),""String_Node_Str"");
  post.setTagNames(tagNames);
  String slug=(String)map.get(""String_Node_Str"");
  post.setPostSlug(slug);
  String permaLink=(String)map.get(""String_Node_Str"");
  post.setLink(permaLink);
  return post;
}","/** 
 * http://xmlrpc.free-conversant.com/docs/bloggerAPI#getPost http://joysofprogramming.com/blogger-getpost/ http://stackoverflow.com/questions/3083039/how-can-i-get-a-post-with-xml-rpc-in-wordpress
 * @param postId
 * @return post
 * @throws WordpressXmlRpcException
 */
public WordpressPost findPostById(int postId) throws WordpressXmlRpcException {
  Vector<Object> params=new Vector<Object>();
  params.add(postId);
  params.add(wordpressConnection.getUsername());
  params.add(wordpressConnection.getPassword());
  Map<String,Object> map=invoke(FIND_POST_BY_ID_METHOD_NAME,params);
  WordpressPost post=new WordpressPost();
  post.setPostId(postId);
  post.setDraft(false);
  Object authorId=map.get(""String_Node_Str"");
  post.setAuthorId(authorId == null ? null : Integer.valueOf(authorId.toString()));
  Date dateCreated=(Date)map.get(""String_Node_Str"");
  post.setDateCreated(dateCreated);
  StringBuilder body=new StringBuilder();
  if (map.get(""String_Node_Str"") != null) {
    body.append((String)map.get(""String_Node_Str""));
  }
  if (map.get(""String_Node_Str"") != null) {
    body.append(""String_Node_Str"");
    body.append((String)map.get(""String_Node_Str""));
  }
  post.setBody(body.toString());
  String title=(String)map.get(""String_Node_Str"");
  post.setTitle(title);
  post.setDraft(!""String_Node_Str"".equals(map.get(""String_Node_Str"")));
  @SuppressWarnings(""String_Node_Str"") List<String> categoryNames=(List<String>)map.get(""String_Node_Str"");
  post.setCategoryNames(categoryNames);
  List<String> tagNames=CollectionUtils.split((String)map.get(""String_Node_Str""),""String_Node_Str"");
  post.setTagNames(tagNames);
  String slug=(String)map.get(""String_Node_Str"");
  post.setPostSlug(slug);
  String permaLink=(String)map.get(""String_Node_Str"");
  post.setLink(permaLink);
  return post;
}",0.901092412164157
155331,"@Override public List<String> getWikiPages(){
  FirefoxProfile profile=new FirefoxProfile();
  profile.setPreference(""String_Node_Str"",255);
  WebDriver driver=new FirefoxDriver(profile);
  try {
    driver.get(theTracUrl + ""String_Node_Str"");
    WebDriverUtils.waitForId(driver,""String_Node_Str"");
    List<WebElement> allLinks=driver.findElements(By.tagName(""String_Node_Str""));
    List<String> ret=new LinkedList<String>();
    for (    WebElement link : allLinks) {
      String url=link.getAttribute(""String_Node_Str"");
      int position=url.indexOf(""String_Node_Str"");
      if (position > 0) {
        String pageName=url.substring(position + 6);
        if (!pageName.contains(""String_Node_Str"") && !pageName.startsWith(""String_Node_Str"")) {
          ret.add(pageName);
        }
      }
    }
    return ret;
  }
  finally {
    driver.quit();
  }
}","@Override public List<String> getWikiPages(){
  FirefoxProfile profile=new FirefoxProfile();
  profile.setPreference(""String_Node_Str"",255);
  WebDriver driver=new FirefoxDriver(profile);
  try {
    driver.get(theTracUrl + ""String_Node_Str"");
    WebDriverUtils.waitForId(driver,""String_Node_Str"");
    List<WebElement> allLinks=driver.findElements(By.tagName(""String_Node_Str""));
    List<String> ret=new LinkedList<String>();
    for (    WebElement link : allLinks) {
      String url=link.getAttribute(""String_Node_Str"");
      int position=url.indexOf(""String_Node_Str"");
      if (position > 0) {
        String pageName=url.substring(position + 6);
        if (!pageName.contains(""String_Node_Str"") && !pageName.startsWith(""String_Node_Str"") && !pageName.startsWith(""String_Node_Str"")) {
          ret.add(pageName);
        }
      }
    }
    return ret;
  }
  finally {
    driver.quit();
  }
}",0.9756649688737974
155332,"@Test public void test() throws IOException, InterruptedException {
  ITracService tracService=new TracServiceImpl(System.getProperty(""String_Node_Str""));
  IRedmineService redmineService=new RedmineServiceImpl(System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"");
  List<String> pages=tracService.getWikiPages();
  for (  String page : pages) {
    System.out.println(""String_Node_Str"" + page + ""String_Node_Str"");
    String tracWikiText=tracService.getWikiText(page);
    if (!page.startsWith(""String_Node_Str"")) {
      if (!redmineService.isPageExists(page)) {
        try {
          String redmineWikiText=redmineService.convertFromTracWikiText(tracWikiText);
          redmineService.createPage(page,redmineWikiText);
        }
 catch (        IllegalStateException e) {
          System.err.println(""String_Node_Str"" + page);
        }
      }
    }
  }
}","@Test public void test() throws IOException, InterruptedException {
  ITracService tracService=new TracServiceImpl(System.getProperty(""String_Node_Str""));
  IRedmineService redmineService=new RedmineServiceImpl(System.getProperty(""String_Node_Str""));
  System.out.println(""String_Node_Str"");
  List<String> pages=tracService.getWikiPages();
  for (  String page : pages) {
    page=page.replace(""String_Node_Str"",""String_Node_Str"");
    System.out.println(""String_Node_Str"" + page + ""String_Node_Str"");
    String tracWikiText=""String_Node_Str"" + tracService.getWikiText(page);
    if (!redmineService.isPageExists(page)) {
      try {
        String redmineWikiText=redmineService.convertFromTracWikiText(tracWikiText);
        redmineService.createPage(page,redmineWikiText);
      }
 catch (      IllegalStateException e) {
        System.err.println(""String_Node_Str"" + page);
      }
    }
  }
}",0.9156895589056392
155333,"public long getCurrentCumTime(){
  long output=0l;
synchronized (guard) {
    for (    Contract activeContract : activeContracts) {
      output+=activeContract.getTodayTime();
    }
  }
  return output;
}","public long getCurrentCumTime(){
  long output=0l;
synchronized (guard) {
    for (    Contract contract : contracts) {
      output+=contract.getTodayTime();
    }
  }
  return output;
}",0.9540816326530612
155334,"private byte[] sendQuery(int window){
  return channel.sendMessage(new byte[]{RFIDConstants.WINDOW_QUERY,new RFIDWindow(window).toByte()});
}","private byte[] sendQuery(byte code,int window){
  return channel.sendMessage(new byte[]{code,new RFIDWindow(window).toByte()});
}",0.8592592592592593
155335,"public RFIDReader(RFIDChannel chan){
  currentInventory=new ArrayList<byte[]>();
  channel=chan;
  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();
  DataOutputStream dataOut=new DataOutputStream(bytesOut);
  try {
    dataOut.writeByte(RFIDConstants.ACK);
    dataOut.flush();
    ack=bytesOut.toByteArray();
    bytesOut.reset();
    dataOut.writeByte(RFIDConstants.QUERY);
    dataOut.flush();
    query=bytesOut.toByteArray();
    bytesOut.reset();
    dataOut.close();
    bytesOut.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
}","public RFIDReader(RFIDChannel chan){
  currentInventory=new ArrayList<byte[]>();
  channel=chan;
}",0.2873900293255132
155336,"public List<byte[]> inventory(){
}","public List<byte[]> inventory(){
  int count=0;
  int window=INITIAL_WINDOW;
  byte[] response;
  boolean windowChange=true;
  int timeSinceLastWindowPacket=0;
  byte nextFlag=RFIDConstants.NEW_QUERY;
  while (count < STOPPING_CRITERIA) {
    System.err.println(""String_Node_Str"" + count);
    if (windowChange && timeSinceLastWindowPacket > WINDOW_TRANS_SPACING)     response=sendQuery(nextFlag,window);
 else     response=sendQuery(nextFlag);
    if (response == null) {
      count+=window == 0 ? 1 : 0;
      windowChange=window != 0;
      window=Math.max(window / 2 - 1,0);
      nextFlag=RFIDConstants.DESPERATE_QUERY;
    }
 else     if (Arrays.equals(response,RFIDChannel.GARBLE)) {
      count=0;
      windowChange=window != 255;
      window=Math.min(window * 2 + 1,255);
      nextFlag=RFIDConstants.COLLISION_QUERY;
    }
 else {
      if (!currentInventory.contains(response))       currentInventory.add(response);
      count=0;
      windowChange=window != 0;
      window=Math.max(window - 1,0);
      nextFlag=RFIDConstants.NEW_QUERY;
    }
  }
  return currentInventory;
}",0.0603907637655417
155337,"public List<byte[]> inventory(){
  int count=0;
  int window=0;
  byte[] response;
  boolean windowChange=true;
  while (count < STOPPING_CRITERIA) {
    if (windowChange)     response=sendQuery(window);
 else     response=sendQuery();
    if (response == null) {
      count+=window == 0 ? 0 : 1;
      window=Math.max(window / 2 - 1,0);
      windowChange=window != 0;
    }
 else     if (Arrays.equals(response,RFIDChannel.GARBLE)) {
      count=0;
      window=Math.min(window + 1,255);
      windowChange=true;
    }
 else {
      if (!currentInventory.contains(response)) {
        currentInventory.add(response);
      }
      sendAck();
      count=0;
      windowChange=false;
    }
  }
  return currentInventory;
}","public List<byte[]> inventory(){
  int count=0;
  int window=INITIAL_WINDOW;
  byte[] response;
  boolean windowChange=true;
  while (count < STOPPING_CRITERIA) {
    System.err.println(""String_Node_Str"" + count);
    if (windowChange)     response=sendQuery(window);
 else     response=sendQuery();
    if (response == null) {
      count+=window == 0 ? 1 : 0;
      window=Math.max(window / 2 - 1,0);
      windowChange=window != 0;
    }
 else     if (Arrays.equals(response,RFIDChannel.GARBLE)) {
      count=0;
      window=Math.min(window + 1,255);
      windowChange=true;
    }
 else {
      if (!currentInventory.contains(response)) {
        currentInventory.add(response);
      }
      sendAck();
      count=0;
      windowChange=false;
    }
  }
  return currentInventory;
}",0.951058201058201
155338,"/** 
 * Deep clones this EveObject, unique-ifying its object hierarchy as necessary. This method is called by the interpreter to implement the magic auto deep cloning at the interpreter level. At the interpreter level, everything is automatically deep cloned. But to save memory, we only want to deep clone when necessary and use the same references for everything else.
 */
public void deepClone(){
  EveObject eo=this;
  Deque<String> fieldNames=new ArrayDeque<String>();
  while (eo.objectParent != null) {
    String fieldName=eo.objectParent.getFieldName(eo);
    if (fieldName == null) {
      if (eo.objectParent.getType() == EveType.DICT) {
        fieldName=""String_Node_Str"" + eo.objectParent.getDictKey(eo);
      }
 else       if (eo.objectParent.getType() == EveType.LIST) {
        fieldName=""String_Node_Str"" + eo.objectParent.getIndex(eo);
      }
    }
    fieldNames.addFirst(fieldName);
    eo=eo.objectParent;
  }
  while (!fieldNames.isEmpty()) {
    String fieldName=fieldNames.pop();
    EveObject field=null;
    String key=null;
    int index=-1;
    if (fieldName.startsWith(""String_Node_Str"")) {
      key=fieldName.substring(""String_Node_Str"".length());
      field=eo.getDictValue(key);
    }
 else     if (fieldName.startsWith(""String_Node_Str"")) {
      index=Integer.parseInt(fieldName.substring(""String_Node_Str"".length()));
      field=eo.getIndexedProperty(index);
    }
 else {
      field=eo.getField(fieldName);
    }
    if (field.isMarkedForClone()) {
      field=field.eventlessClone();
      field.setMarkedForClone(false);
    }
    field.objectParent=eo;
    if (fieldName.startsWith(""String_Node_Str"")) {
      eo.putDictValue(key,field);
    }
 else     if (fieldName.startsWith(""String_Node_Str"")) {
      eo.setIndexedProperty(index,field);
      eo.putField(fieldName,field);
    }
 else {
      eo.putField(fieldName,field);
    }
    eo=field;
  }
  this.setMarkedForClone(false);
}","/** 
 * Deep clones this EveObject, unique-ifying its object hierarchy as necessary. This method is called by the interpreter to implement the magic auto deep cloning at the interpreter level. At the interpreter level, everything is automatically deep cloned. But to save memory, we only want to deep clone when necessary and use the same references for everything else.
 */
public void deepClone(){
  EveObject eo=this;
  Deque<String> fieldNames=new ArrayDeque<String>();
  while (eo.objectParent != null) {
    String fieldName=eo.objectParent.getFieldName(eo);
    if (fieldName == null) {
      fieldName=eo.objectParent.getDynamicFieldName(eo);
      if (fieldName != null) {
        fieldName=""String_Node_Str"" + fieldName;
      }
 else       if (eo.objectParent.getType() == EveType.DICT) {
        fieldName=""String_Node_Str"" + eo.objectParent.getDictKey(eo);
      }
 else       if (eo.objectParent.getType() == EveType.LIST) {
        fieldName=""String_Node_Str"" + eo.objectParent.getIndex(eo);
      }
    }
    fieldNames.addFirst(fieldName);
    eo=eo.objectParent;
  }
  while (!fieldNames.isEmpty()) {
    String fieldName=fieldNames.pop();
    EveObject field=null;
    String key=null;
    int index=-1;
    if (fieldName.startsWith(""String_Node_Str"")) {
      fieldName=fieldName.substring(""String_Node_Str"".length());
      EveObject getter=eo.getField(fieldName);
      if (getter != null && getter.hasField(""String_Node_Str"")) {
        field=getter.getField(""String_Node_Str"").invokeSelf(eo);
      }
      fieldName=""String_Node_Str"" + fieldName;
    }
 else     if (fieldName.startsWith(""String_Node_Str"")) {
      key=fieldName.substring(""String_Node_Str"".length());
      field=eo.getDictValue(key);
    }
 else     if (fieldName.startsWith(""String_Node_Str"")) {
      index=Integer.parseInt(fieldName.substring(""String_Node_Str"".length()));
      field=eo.getIndexedProperty(index);
    }
 else {
      field=eo.getField(fieldName);
    }
    if (field.isMarkedForClone()) {
      field=field.eventlessClone();
      field.setMarkedForClone(false);
    }
    field.objectParent=eo;
    if (fieldName.startsWith(""String_Node_Str"")) {
      fieldName=fieldName.substring(""String_Node_Str"".length());
      EveObject setter=eo.getField(fieldName);
      if (setter != null && setter.hasField(""String_Node_Str"")) {
        setter.getField(""String_Node_Str"").invokeSetter(eo,field);
      }
    }
 else     if (fieldName.startsWith(""String_Node_Str"")) {
      eo.putDictValue(key,field);
    }
 else     if (fieldName.startsWith(""String_Node_Str"")) {
      eo.setIndexedProperty(index,field);
    }
 else {
      eo.putField(fieldName,field);
    }
    eo=field;
  }
  this.setMarkedForClone(false);
}",0.7363675397166166
155339,"/** 
 * Places a variable at the current scope. The name passed in must be a valid identifier.
 * @param name The identifier to place at the current scope.
 * @param eo The value to place at the current scope.
 */
public static void putVariable(String name,EveObject eo){
  EveObject scope=getScopeForVariable(name);
  if (!inFunction()) {
    scope.putField(name,eo);
  }
 else {
    scope.putTempField(name,eo);
  }
}","/** 
 * Places a variable at the current scope. The name passed in must be a valid identifier.
 * @param name The identifier to place at the current scope.
 * @param eo The value to place at the current scope.
 */
public static void putVariable(String name,EveObject eo){
  EveObject scope=getScopeForVariable(name);
  if (!inFunction() && globalScopes.containsValue(scope) == false) {
    scope.putField(name,eo);
  }
 else {
    scope.putTempField(name,eo);
  }
}",0.9479638009049772
155340,"@Override public void updateVariable(EveObject value){
  EveObject eo=getExpression().execute();
  String ident=getIdentifier();
  if (eo != null && eo.isSealed()) {
    throw new EveError(""String_Node_Str"");
  }
  EveObject existingField=eo.getField(ident);
  if (existingField != null && existingField.isMarkedForClone()) {
    existingField.deepClone();
  }
  if (isUsingMutatorAccessor() && existingField != null && existingField.hasField(""String_Node_Str"") && existingField.getField(""String_Node_Str"").getType() == EveType.FUNCTION) {
    existingField.getField(""String_Node_Str"").invokeSelf(eo,value);
  }
 else {
    eo.putField(ident,value);
  }
}","@Override public void updateVariable(EveObject value){
  EveObject eo=getExpression().execute();
  String ident=getIdentifier();
  if (eo != null && eo.isSealed()) {
    throw new EveError(""String_Node_Str"");
  }
  EveObject existingField=eo.getField(ident);
  if (existingField != null && existingField.isMarkedForClone()) {
    existingField.deepClone();
  }
  if (isUsingMutatorAccessor() && existingField != null && existingField.hasField(""String_Node_Str"") && existingField.getField(""String_Node_Str"").getType() == EveType.FUNCTION) {
    existingField.getField(""String_Node_Str"").invokeSetter(eo,value);
  }
 else {
    eo.putField(ident,value);
  }
}",0.9954268292682928
155341,"private void createEJITypes(Set<Class<?>> types) throws InstantiationException, IllegalAccessException, IntrospectionException {
  for (  Class<?> type : types) {
    EJIType typeInfo=type.getAnnotation(EJIType.class);
    EveObject eo=EJIHelper.createEJIConstructor(type);
    BuiltinCommonsFactory.addType(typeInfo.value(),eo);
  }
}","private void createEJITypes(Set<Class<?>> types) throws InstantiationException, IllegalAccessException, IntrospectionException {
  for (  Class<?> type : types) {
    EJIType typeInfo=type.getAnnotation(EJIType.class);
    EveObject eo=EJIHelper.createEJIConstructor(type);
    BuiltinCommons.addType(typeInfo.value(),eo);
  }
}",0.9894419306184012
155342,"private EveObject resolveJavaPackageContainer(String fqcn){
  String[] split=fqcn.split(""String_Node_Str"");
  EveObject pkgContainer=ScopeManager.getGlobalScope().getField(split[0]);
  if (pkgContainer == null) {
    pkgContainer=EveObject.prototypeType(split[0]);
    BuiltinCommonsFactory.addType(split[0],pkgContainer);
  }
  EveObject prevContainer=pkgContainer;
  for (int c=1; c < split.length - 1; c++) {
    pkgContainer=pkgContainer.getField(split[c]);
    if (pkgContainer == null) {
      pkgContainer=EveObject.prototypeType(split[c]);
      prevContainer.putField(split[c],pkgContainer);
    }
    prevContainer=pkgContainer;
  }
  return pkgContainer;
}","private EveObject resolveJavaPackageContainer(String fqcn){
  String[] split=fqcn.split(""String_Node_Str"");
  EveObject pkgContainer=BuiltinCommons.getType(split[0]);
  if (pkgContainer == null) {
    pkgContainer=EveObject.prototypeType(split[0]);
    BuiltinCommons.addType(split[0],pkgContainer);
  }
  EveObject prevContainer=pkgContainer;
  for (int c=1; c < split.length - 1; c++) {
    pkgContainer=pkgContainer.getField(split[c]);
    if (pkgContainer == null) {
      pkgContainer=EveObject.prototypeType(split[c]);
      prevContainer.putField(split[c],pkgContainer);
    }
    prevContainer=pkgContainer;
  }
  return pkgContainer;
}",0.9488939740655988
155343,"@Override public EveObject execute(Map<String,EveObject> parameters){
  String className=parameters.get(""String_Node_Str"").getStringValue();
  try {
    Class<?> cl=Class.forName(className);
    EveObject ctorFunc=EJIHelper.createEJIConstructor(cl);
    EveObject pkgContainer=resolveJavaPackageContainer(className);
    if (cl.isAnonymousClass()) {
      throw new EveError(""String_Node_Str"");
    }
    String simpleName=cl.getSimpleName();
    if (cl.isArray()) {
      simpleName=simpleName.substring(0,simpleName.indexOf(""String_Node_Str""));
      simpleName+=""String_Node_Str"";
    }
    pkgContainer.putField(simpleName,ctorFunc);
    if (exposeType) {
      BuiltinCommonsFactory.addType(simpleName,ctorFunc);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return null;
}","@Override public EveObject execute(Map<String,EveObject> parameters){
  String className=parameters.get(""String_Node_Str"").getStringValue();
  try {
    Class<?> cl=Class.forName(className);
    EveObject ctorFunc=EJIHelper.createEJIConstructor(cl);
    EveObject pkgContainer=resolveJavaPackageContainer(className);
    if (cl.isAnonymousClass()) {
      throw new EveError(""String_Node_Str"");
    }
    String simpleName=cl.getSimpleName();
    if (cl.isArray()) {
      simpleName=simpleName.substring(0,simpleName.indexOf(""String_Node_Str""));
      simpleName+=""String_Node_Str"";
    }
    pkgContainer.putField(simpleName,ctorFunc);
    if (exposeType) {
      BuiltinCommons.addType(simpleName,ctorFunc);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return null;
}",0.9956656346749226
155344,"public static EveObject getScopeForVariable(String name){
  EveObject eo=null;
  if (getNamespace().equals(""String_Node_Str"")) {
    setNamespace(previousNamespace);
    eo=getGlobalScope();
    revertNamespace();
    return eo;
  }
  if (closureScope != null) {
    for (    EveObject closure : closureScope) {
      eo=closure.getField(name);
      if (eo != null) {
        return closure;
      }
    }
  }
  for (  EveObject scope : getScopeStack()) {
    if (scope != getGlobalScope()) {
      eo=scope.getField(name);
      if (eo != null) {
        return scope;
      }
    }
 else {
      if (getNamespace().equals(""String_Node_Str"")) {
        eo=scope.getField(name);
        if (eo != null) {
          return scope;
        }
      }
    }
  }
  eo=BuiltinCommonsFactory.getType(name);
  if (eo != null) {
    return getGlobalScope();
  }
  return getCurrentScope();
}","public static EveObject getScopeForVariable(String name){
  EveObject eo=null;
  if (getNamespace().equals(""String_Node_Str"")) {
    setNamespace(previousNamespace);
    eo=getGlobalScope();
    revertNamespace();
    return eo;
  }
  if (closureScope != null) {
    for (    EveObject closure : closureScope) {
      eo=closure.getField(name);
      if (eo != null) {
        return closure;
      }
    }
  }
  for (  EveObject scope : getScopeStack()) {
    if (scope != getGlobalScope()) {
      eo=scope.getField(name);
      if (eo != null) {
        return scope;
      }
    }
 else {
      if (getNamespace().equals(""String_Node_Str"")) {
        eo=scope.getField(name);
        if (eo != null) {
          return scope;
        }
      }
    }
  }
  eo=BuiltinCommons.getType(name);
  if (eo != null) {
    return getGlobalScope();
  }
  return getCurrentScope();
}",0.99601593625498
155345,"private static EveObject getObject(String name){
  EveObject eo=null;
  if (getNamespace().equals(""String_Node_Str"")) {
    setNamespace(previousNamespace);
    eo=getGlobalScope().getField(name);
    revertNamespace();
    return eo;
  }
  if (closureScope != null) {
    for (    EveObject closure : closureScope) {
      eo=closure.getField(name);
      if (eo != null) {
        return eo;
      }
    }
  }
  for (  EveObject scope : getScopeStack()) {
    if (scope != getGlobalScope()) {
      eo=scope.getField(name);
      if (eo != null) {
        return eo;
      }
    }
 else {
      if (getNamespace().equals(""String_Node_Str"")) {
        eo=scope.getField(name);
        if (eo != null) {
          return eo;
        }
      }
    }
  }
  if (getCurrentScope() != null && getCurrentScope() == getGlobalScope()) {
    eo=getCurrentScope().getField(name);
  }
  if (eo == null) {
    eo=BuiltinCommonsFactory.getType(name);
  }
  return eo;
}","private static EveObject getObject(String name){
  EveObject eo=null;
  if (getNamespace().equals(""String_Node_Str"")) {
    setNamespace(previousNamespace);
    eo=getGlobalScope().getField(name);
    revertNamespace();
    return eo;
  }
  if (closureScope != null) {
    for (    EveObject closure : closureScope) {
      eo=closure.getField(name);
      if (eo != null) {
        return eo;
      }
    }
  }
  for (  EveObject scope : getScopeStack()) {
    if (scope != getGlobalScope()) {
      eo=scope.getField(name);
      if (eo != null) {
        return eo;
      }
    }
 else {
      if (getNamespace().equals(""String_Node_Str"")) {
        eo=scope.getField(name);
        if (eo != null) {
          return eo;
        }
      }
    }
  }
  if (getCurrentScope() != null && getCurrentScope() == getGlobalScope()) {
    eo=getCurrentScope().getField(name);
  }
  if (eo == null) {
    eo=BuiltinCommons.getType(name);
  }
  return eo;
}",0.9963254593175852
155346,"@Override public EveObject getField(String name){
  EveObject eo=typePool.get(name);
  if (typePool != null) {
    return eo;
  }
 else {
    return super.getField(name);
  }
}","@Override public EveObject getField(String name){
  EveObject eo=typePool.get(name);
  if (eo != null) {
    return eo;
  }
 else {
    return super.getField(name);
  }
}",0.9826589595375722
155347,"/** 
 * Places a variable at the current scope. The name passed in must be a valid identifier.
 * @param name The identifier to place at the current scope.
 * @param eo The value to place at the current scope.
 */
public static void putVariable(String name,EveObject eo){
  getCurrentScope().putField(name,eo);
}","/** 
 * Places a variable at the current scope. The name passed in must be a valid identifier.
 * @param name The identifier to place at the current scope.
 * @param eo The value to place at the current scope.
 */
public static void putVariable(String name,EveObject eo){
  EveObject scope=getScopeForVariable(name);
  scope.putField(name,eo);
}",0.8736681887366818
155348,"public void putField(String name,EveObject eo){
  this.fields.put(name,eo);
}","public void putField(String name,EveObject eo){
  if (this.isMarkedForClone()) {
  }
  this.fields.put(name,eo);
}",0.806282722513089
155349,"/** 
 * Removes [index]s from the given identifier. The name is assumed to be in the correct format.
 * @param name
 * @return The name without any index properties.
 */
private static String stripIndices(String name){
  return name.substring(0,name.indexOf(""String_Node_Str""));
}","/** 
 * Removes [index]s from the given identifier. The name is assumed to be in the correct format. If there are no index accessors, it just returns the name that was passed in.
 * @param name
 * @return The name without any index properties.
 */
private static String stripIndices(String name){
  if (name.contains(""String_Node_Str"")) {
    return name.substring(0,name.indexOf(""String_Node_Str""));
  }
 else {
    return name;
  }
}",0.7832167832167832
155350,"public static void putVariable(String name,EveObject eo){
  name=scopeOperatorAnalysis(name);
  String[] split=name.split(""String_Node_Str"");
  EveObject obj=getCurrentScope();
  if (split.length > 1) {
    String resolvedObj=split[0];
    obj=obj.getField(split[0]);
    if (obj == null) {
      throw new EveError(resolvedObj + ""String_Node_Str"");
    }
    Integer index=null;
    for (int c=1; c < split.length; c++) {
      name=split[c];
      index=null;
      if (c == split.length - 1) {
        List<Integer> indices=indexOperatorAnalysis(name);
        if (indices != null) {
          obj=obj.getField(stripIndices(name));
          obj=getParentByIndex(obj,indices);
          index=indices.get(indices.size() - 1);
        }
        break;
      }
      List<Integer> indices=indexOperatorAnalysis(name);
      if (indices != null) {
        obj=obj.getField(stripIndices(name));
        obj=getByIndex(obj,indices);
        index=indices.get(indices.size() - 1);
      }
 else {
        obj=obj.getField(name);
      }
      if (obj == null && c != split.length - 1) {
        throw new EveError(""String_Node_Str"" + name + ""String_Node_Str""+ resolvedObj+ ""String_Node_Str"");
      }
      resolvedObj+=""String_Node_Str"" + name;
    }
    if (obj == null) {
      throw new EveError(resolvedObj + ""String_Node_Str"");
    }
    if (index != null) {
      obj.setIndexedProperty(index,eo);
    }
 else {
      obj.putField(name,eo);
    }
  }
 else {
    List<Integer> indices=indexOperatorAnalysis(name);
    if (indices != null) {
      obj=obj.getField(stripIndices(name));
      if (indices.size() > 1) {
        obj=getParentByIndex(obj,indices);
      }
      obj.setIndexedProperty(indices.get(indices.size() - 1),eo);
    }
    obj.putField(name,eo);
  }
  scopeOperatorEnsure();
}","public static void putVariable(String name,EveObject eo){
  String fullName=name;
  name=scopeOperatorAnalysis(name);
  String[] split=name.split(""String_Node_Str"");
  EveObject obj=getCurrentScope();
  if (split.length > 1) {
    String resolvedObj=split[0];
    obj=obj.getField(split[0]);
    if (obj == null) {
      throw new EveError(resolvedObj + ""String_Node_Str"");
    }
    Integer index=null;
    for (int c=1; c < split.length; c++) {
      name=split[c];
      index=null;
      if (c == split.length - 1) {
        List<Integer> indices=indexOperatorAnalysis(name);
        if (indices != null) {
          obj=obj.getField(stripIndices(name));
          obj=getParentByIndex(obj,indices);
          index=indices.get(indices.size() - 1);
        }
        break;
      }
      List<Integer> indices=indexOperatorAnalysis(name);
      if (indices != null) {
        obj=obj.getField(stripIndices(name));
        obj=getByIndex(obj,indices);
        index=indices.get(indices.size() - 1);
      }
 else {
        obj=obj.getField(name);
      }
      if (obj == null && c != split.length - 1) {
        throw new EveError(""String_Node_Str"" + name + ""String_Node_Str""+ resolvedObj+ ""String_Node_Str"");
      }
      resolvedObj+=""String_Node_Str"" + name;
    }
    if (obj == null) {
      throw new EveError(resolvedObj + ""String_Node_Str"");
    }
    if (obj.isMarkedForClone()) {
      EveObject parent=null;
      if (resolvedObj.contains(""String_Node_Str"")) {
        parent=getParentVariable(resolvedObj);
      }
 else {
        parent=getVariable(resolvedObj);
      }
      String[] propSplit=resolvedObj.split(""String_Node_Str"");
      String prop=""String_Node_Str"";
      if (propSplit.length > 1) {
        prop=stripIndices(propSplit[propSplit.length - 1]);
      }
 else {
        prop=stripIndices(name);
      }
      obj=obj.eveClone();
      parent.putField(prop,obj);
    }
    if (index != null) {
      obj.setIndexedProperty(index,eo);
    }
 else {
      obj.putField(name,eo);
    }
  }
 else {
    List<Integer> indices=indexOperatorAnalysis(name);
    if (indices != null) {
      obj=obj.getField(stripIndices(name));
      if (indices.size() > 1) {
        obj=getParentByIndex(obj,indices);
      }
      obj.setIndexedProperty(indices.get(indices.size() - 1),eo);
    }
    obj.putField(name,eo);
  }
  scopeOperatorEnsure();
}",0.86378896882494
155351,"@SuppressWarnings(""String_Node_Str"") public List<PostInfo> getPosts(PostFilterParameters filterParameters,IWContext iwc){
  Collection<PostEntity> postEntities=null;
  postEntities=this.postDao.getPosts(filterParameters.getCreators(),filterParameters.getReceivers(),filterParameters.getTypes(),filterParameters.getMax(),filterParameters.getBeginUri(),filterParameters.getGetUp() != null);
  List<PostInfo> posts=new ArrayList<PostInfo>(postEntities.size());
  List<String> uris=new ArrayList<String>(1);
  this.articleListManadgedBean.setShowAllItems(true);
  IWSlideService slide=getServiceInstance(IWSlideService.class);
  for (  PostEntity entity : postEntities) {
    uris.add(entity.getArticle().getUri());
    List<ArticleItemBean> articleItems=this.articleListManadgedBean.getArticlesByURIs(uris,iwc);
    if (ListUtil.isEmpty(articleItems)) {
      continue;
    }
    uris.clear();
    ArticleItemBean article=articleItems.get(0);
    PostInfo post=new PostInfo();
    try {
      int userId=entity.getPostCreator();
      User user=this.getUserBusiness().getUser(userId);
      UserDataBean userInfo=this.getUserApplicationEngine().getUserInfo(user);
      post.setUriToAuthorPicture(userInfo.getPictureUri());
      post.setAuthor(userInfo.getName());
      post.setDate(entity.getArticle().getModificationDate());
    }
 catch (    RemoteException e) {
      this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
    }
    post.setTitle(article.getHeadline());
    post.setUriToBody(article.getResourcePath());
    post.setBody(article.getBody());
    List<String> attachments=article.getAttachments();
    List<Item> items=new ArrayList<Item>(attachments.size());
    for (    String path : attachments) {
      WebdavResource resource=null;
      try {
        resource=slide.getWebdavResourceAuthenticatedAsRoot(path);
      }
 catch (      Exception e) {
        this.getLogger().log(Level.WARNING,""String_Node_Str"" + path,e);
        continue;
      }
      items.add(new Item(path,resource.getDisplayName()));
    }
    post.setAttachments(items);
    posts.add(post);
  }
  return posts;
}","public List<PostInfo> getPosts(PostFilterParameters filterParameters,IWContext iwc){
  Collection<PostEntity> postEntities=null;
  postEntities=this.postDao.getPosts(filterParameters.getCreators(),filterParameters.getReceivers(),filterParameters.getTypes(),filterParameters.getMax(),filterParameters.getBeginUri(),filterParameters.getGetUp() != null);
  List<PostInfo> posts=new ArrayList<PostInfo>(postEntities.size());
  List<String> uris=new ArrayList<String>(1);
  this.articleListManadgedBean.setShowAllItems(true);
  IWSlideService slide=getServiceInstance(IWSlideService.class);
  for (  PostEntity entity : postEntities) {
    uris.add(entity.getArticle().getUri());
    List<ArticleItemBean> articleItems=this.articleListManadgedBean.getArticlesByURIs(uris,iwc);
    if (ListUtil.isEmpty(articleItems)) {
      continue;
    }
    uris.clear();
    ArticleItemBean article=articleItems.get(0);
    PostInfo post=new PostInfo();
    try {
      int userId=entity.getPostCreator();
      User user=this.getUserBusiness().getUser(userId);
      UserDataBean userInfo=this.getUserApplicationEngine().getUserInfo(user);
      post.setUriToAuthorPicture(userInfo.getPictureUri());
      post.setAuthor(userInfo.getName());
      post.setDate(entity.getArticle().getModificationDate());
    }
 catch (    RemoteException e) {
      this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
    }
    post.setTitle(article.getHeadline());
    post.setUriToBody(article.getResourcePath());
    post.setBody(article.getBody());
    List<?> attachments=article.getAttachments();
    List<Item> items=new ArrayList<Item>(attachments.size());
    for (    Object path : attachments) {
      String uri=path instanceof String ? (String)path : path.toString();
      WebdavResource resource=null;
      try {
        resource=slide.getWebdavResourceAuthenticatedAsRoot(uri);
      }
 catch (      Exception e) {
        this.getLogger().log(Level.WARNING,""String_Node_Str"" + uri,e);
        continue;
      }
      items.add(new Item(uri,resource.getDisplayName()));
    }
    post.setAttachments(items);
    posts.add(post);
  }
  return posts;
}",0.9607151258527404
155352,"private void sendMails(String from,Collection<Integer> userIds,String body,List<String> attachments){
  if (StringUtil.isEmpty(from) || ListUtil.isEmpty(userIds)) {
    return;
  }
  MessageParameters parameters=new MessageParameters();
  parameters.setFrom(from);
  ArrayList<String> recipients=new ArrayList<String>(userIds.size());
  UserBusiness userbusiness=this.getUserBusiness();
  for (  Integer userId : userIds) {
    User user=null;
    try {
      user=userbusiness.getUser(Integer.valueOf(userId));
    }
 catch (    RemoteException e) {
      this.getLogger().log(Level.WARNING,""String_Node_Str"" + userId,e);
    }
    UserDataBean userInfo=userApplicationEngine.getUserInfo(user);
    recipients.add(userInfo.getEmail());
  }
  parameters.setAttachments(attachments);
  parameters.setMessage(body);
  String recipientsString=recipients.toString();
  parameters.setRecipientTo(recipientsString);
  this.emailSenderHelper.sendMessage(parameters);
}","private void sendMails(String from,Collection<Integer> userIds,String subject,String body,List<String> attachments){
  if (StringUtil.isEmpty(from) || ListUtil.isEmpty(userIds))   return;
  MessageParameters parameters=new MessageParameters();
  parameters.setFrom(from);
  List<String> recipients=new ArrayList<String>(userIds.size());
  UserBusiness userBusiness=this.getUserBusiness();
  for (  Integer userId : userIds) {
    Email email=null;
    try {
      email=userBusiness.getUserMail(userId);
    }
 catch (    Exception e) {
      this.getLogger().log(Level.WARNING,""String_Node_Str"" + userId,e);
    }
    if (email == null)     continue;
    recipients.add(email.getEmailAddress());
  }
  if (ListUtil.isEmpty(recipients)) {
    getLogger().warning(""String_Node_Str"");
    return;
  }
  parameters.setAttachments(attachments);
  parameters.setSubject(subject);
  parameters.setMessage(body);
  StringBuilder emails=new StringBuilder();
  for (Iterator<String> mailsIter=recipients.iterator(); mailsIter.hasNext(); ) {
    emails.append(mailsIter.next());
    if (mailsIter.hasNext())     emails.append(CoreConstants.COMMA);
  }
  parameters.setRecipientTo(emails.toString());
  this.emailSenderHelper.sendMessage(parameters);
}",0.3851044504995459
155353,"@SuppressWarnings(""String_Node_Str"") public String savePost(Map<String,ArrayList<String>> parameters){
  IWContext iwc=CoreUtil.getIWContext();
  if (!iwc.isLoggedOn()) {
    String errorMsg=this.getResourceBundle().getLocalizedString(""String_Node_Str"",""String_Node_Str"");
    return errorMsg;
  }
  String errorMsg=this.getResourceBundle().getLocalizedString(""String_Node_Str"",""String_Node_Str"");
  User currentUser=iwc.getCurrentUser();
  UserApplicationEngine userApplicationEngine=this.getUserApplicationEngine();
  UserDataBean userInfo=userApplicationEngine.getUserInfo(currentUser);
  int creatorId=userInfo.getUserId();
  ArrayList<String> userReceiversIds=parameters.get(PostBusiness.ParameterNames.RECEIVERS_PARAMETER_NAME);
  int usersReceiversAmmount=0;
  Collection<Integer> usersReceivers=null;
  boolean areUserReceivers=!ListUtil.isEmpty(userReceiversIds);
  if (areUserReceivers) {
    usersReceiversAmmount=userReceiversIds.size();
    usersReceivers=new ArrayList<Integer>(usersReceiversAmmount);
    for (    String receiver : userReceiversIds) {
      usersReceivers.add(Integer.valueOf(receiver));
    }
  }
  ArrayList<String> groupsReceiversIds=parameters.get(PostBusiness.ParameterNames.GROUP_RECEIVERS_PARAMETER_NAME);
  Collection<Integer> groupsReceivers=new ArrayList<Integer>();
  ;
  if (!ListUtil.isEmpty(groupsReceiversIds)) {
    for (    String receiver : groupsReceiversIds) {
      groupsReceivers.add(Integer.valueOf(receiver));
    }
  }
  if (areUserReceivers) {
    String msgType=parameters.get(PostBusiness.ParameterNames.MESSAGE_TYPE).get(0);
    if (msgType.equals(PostBusiness.ParameterNames.PUBLIC_MESSAGE)) {
      for (      Integer userId : usersReceivers) {
        Collection<Group> userGroups=null;
        try {
          userGroups=this.getUserBusiness().getUserGroups(userId);
        }
 catch (        RemoteException e) {
          this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
          return errorMsg;
        }
        if (!ListUtil.isEmpty(userGroups)) {
          for (          Group group : userGroups) {
            groupsReceivers.add(Integer.valueOf(group.getId()));
          }
        }
        groupsReceivers.add(userId);
      }
    }
  }
  ArrayList<String> postToAllUserGroups=parameters.get(PostBusiness.ParameterNames.POST_TO_ALL_USER_GROUPS);
  if (!ListUtil.isEmpty(postToAllUserGroups)) {
    Collection<Group> userGroups=null;
    try {
      userGroups=this.getUserBusiness().getUserGroups(currentUser);
    }
 catch (    RemoteException e) {
      this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
      return errorMsg;
    }
    if (!ListUtil.isEmpty(userGroups)) {
      for (      Group group : userGroups) {
        groupsReceivers.add(Integer.valueOf(group.getId()));
      }
    }
  }
  if ((usersReceivers == null) && (ListUtil.isEmpty(groupsReceivers))) {
    return iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
  }
  PostItemBean post=new PostItemBean();
  String body=CoreConstants.EMPTY;
  if (parameters.containsKey(PostBusiness.ParameterNames.BODY_PARAMETER_NAME)) {
    body=parameters.get(PostBusiness.ParameterNames.BODY_PARAMETER_NAME).get(0);
    post.setBody(body);
  }
  if (StringUtil.isEmpty(body)) {
    return iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"") + CoreConstants.COLON + iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
  }
  if (parameters.containsKey(PostBusiness.ParameterNames.POST_TITLE_PARAMETER)) {
    String parameter=parameters.get(PostBusiness.ParameterNames.POST_TITLE_PARAMETER).get(0);
    post.setHeadline(parameter);
  }
  post.setCreatedByUserId(creatorId);
  String name=userInfo.getName();
  post.setAuthor(name);
  ArrayList<String> attachments=parameters.get(PostBusiness.ParameterNames.POST_ATTACHMENTS_PARAMETER_NAME);
  if (!ListUtil.isEmpty(attachments)) {
    post.setAttachment(attachments);
  }
  String resourcePath=post.getResourcePath();
  StringBuilder errors=null;
  boolean postupdated=false;
  boolean privateSaved=true;
  if (!ListUtil.isEmpty(usersReceivers)) {
    privateSaved=postDao.updatePost(resourcePath,usersReceivers,creatorId);
    if (privateSaved) {
      postupdated=true;
      sendMails(userInfo.getEmail(),usersReceivers,body,post.getAttachments());
      ArrayList<Integer> accessUsers=new ArrayList<Integer>(usersReceivers.size() + 1);
      accessUsers.add(creatorId);
      setAccessRights(resourcePath,iwc,accessUsers);
    }
 else {
      errors=new StringBuilder(""String_Node_Str"").append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str""));
    }
  }
  boolean groupSaved=true;
  if (!ListUtil.isEmpty(groupsReceivers)) {
    groupSaved=postDao.updatePost(resourcePath,groupsReceivers,PostEntity.PUBLIC,creatorId);
    if (groupSaved) {
      setAccessRights(resourcePath,iwc,groupsReceivers);
      postupdated=true;
    }
 else {
      if (errors == null) {
        errors=new StringBuilder(""String_Node_Str"").append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"")).append(CoreConstants.COLON);
      }
      errors.append(CoreConstants.NEWLINE).append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (postupdated) {
    post.store();
    String successMsg=iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
    String returnMsg=errors == null ? successMsg : successMsg + errors.toString();
    ScriptCaller scriptCaller=new ScriptCaller(WebContextFactory.get(),PostContentViewer.POST_LOAD_SCRIPT,true);
    scriptCaller.run();
    return returnMsg;
  }
 else {
    return errorMsg;
  }
}","@SuppressWarnings(""String_Node_Str"") public String savePost(Map<String,List<String>> parameters){
  IWResourceBundle iwrb=getResourceBundle(getBundle(SocialConstants.IW_BUNDLE_IDENTIFIER));
  IWContext iwc=CoreUtil.getIWContext();
  if (!iwc.isLoggedOn()) {
    String errorMsg=iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
    return errorMsg;
  }
  String errorMsg=iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
  User currentUser=iwc.getCurrentUser();
  UserApplicationEngine userApplicationEngine=this.getUserApplicationEngine();
  UserDataBean userInfo=userApplicationEngine.getUserInfo(currentUser);
  int creatorId=userInfo.getUserId();
  List<String> userReceiversIds=parameters.get(PostBusiness.ParameterNames.RECEIVERS_PARAMETER_NAME);
  int usersReceiversAmmount=0;
  Collection<Integer> usersReceivers=null;
  boolean areUserReceivers=!ListUtil.isEmpty(userReceiversIds);
  if (areUserReceivers) {
    usersReceiversAmmount=userReceiversIds.size();
    usersReceivers=new ArrayList<Integer>(usersReceiversAmmount);
    for (    String receiver : userReceiversIds) {
      usersReceivers.add(Integer.valueOf(receiver));
    }
  }
  List<String> groupsReceiversIds=parameters.get(PostBusiness.ParameterNames.GROUP_RECEIVERS_PARAMETER_NAME);
  Collection<Integer> groupsReceivers=new ArrayList<Integer>();
  if (!ListUtil.isEmpty(groupsReceiversIds)) {
    for (    String receiver : groupsReceiversIds) {
      groupsReceivers.add(Integer.valueOf(receiver));
    }
  }
  if (areUserReceivers) {
    String msgType=parameters.get(PostBusiness.ParameterNames.MESSAGE_TYPE).get(0);
    if (msgType.equals(PostBusiness.ParameterNames.PUBLIC_MESSAGE)) {
      for (      Integer userId : usersReceivers) {
        Collection<Group> userGroups=null;
        try {
          userGroups=this.getUserBusiness().getUserGroups(userId);
        }
 catch (        RemoteException e) {
          this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
          return errorMsg;
        }
        if (!ListUtil.isEmpty(userGroups)) {
          for (          Group group : userGroups) {
            groupsReceivers.add(Integer.valueOf(group.getId()));
          }
        }
        groupsReceivers.add(userId);
      }
    }
  }
  List<String> postToAllUserGroups=parameters.get(PostBusiness.ParameterNames.POST_TO_ALL_USER_GROUPS);
  if (!ListUtil.isEmpty(postToAllUserGroups)) {
    Collection<Group> userGroups=null;
    try {
      userGroups=this.getUserBusiness().getUserGroups(currentUser);
    }
 catch (    RemoteException e) {
      this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
      return errorMsg;
    }
    if (!ListUtil.isEmpty(userGroups)) {
      for (      Group group : userGroups) {
        groupsReceivers.add(Integer.valueOf(group.getId()));
      }
    }
  }
  if ((usersReceivers == null) && (ListUtil.isEmpty(groupsReceivers))) {
    return iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
  }
  PostItemBean post=new PostItemBean();
  String body=CoreConstants.EMPTY;
  if (parameters.containsKey(PostBusiness.ParameterNames.BODY_PARAMETER_NAME)) {
    body=parameters.get(PostBusiness.ParameterNames.BODY_PARAMETER_NAME).get(0);
    post.setBody(body);
  }
  if (StringUtil.isEmpty(body)) {
    return iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"") + CoreConstants.COLON + iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
  }
  if (parameters.containsKey(PostBusiness.ParameterNames.POST_TITLE_PARAMETER)) {
    String parameter=parameters.get(PostBusiness.ParameterNames.POST_TITLE_PARAMETER).get(0);
    post.setHeadline(parameter);
  }
  post.setCreatedByUserId(creatorId);
  String name=userInfo.getName();
  post.setAuthor(name);
  List<String> attachments=parameters.get(PostBusiness.ParameterNames.POST_ATTACHMENTS_PARAMETER_NAME);
  if (!ListUtil.isEmpty(attachments)) {
    post.setAttachment(attachments);
  }
  String resourcePath=post.getResourcePath();
  StringBuilder errors=null;
  boolean postupdated=false;
  boolean privateSaved=true;
  if (!ListUtil.isEmpty(usersReceivers)) {
    privateSaved=postDao.updatePost(resourcePath,usersReceivers,creatorId);
    if (privateSaved) {
      postupdated=true;
      String title=post.getHeadline();
      if (StringUtil.isEmpty(title))       title=getResourceBundle(getBundle(SocialConstants.IW_BUNDLE_IDENTIFIER)).getLocalizedString(""String_Node_Str"",""String_Node_Str"") + iwc.getDomain().getName();
      sendMails(userInfo.getEmail(),usersReceivers,title,body,post.getAttachments());
      List<Integer> accessUsers=new ArrayList<Integer>(usersReceivers.size() + 1);
      accessUsers.add(creatorId);
      setAccessRights(resourcePath,iwc,accessUsers);
    }
 else {
      errors=new StringBuilder(""String_Node_Str"").append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"")).append(""String_Node_Str"").append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str""));
    }
  }
  boolean groupSaved=true;
  if (!ListUtil.isEmpty(groupsReceivers)) {
    groupSaved=postDao.updatePost(resourcePath,groupsReceivers,PostEntity.PUBLIC,creatorId);
    if (groupSaved) {
      setAccessRights(resourcePath,iwc,groupsReceivers);
      postupdated=true;
    }
 else {
      if (errors == null) {
        errors=new StringBuilder(""String_Node_Str"").append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"")).append(CoreConstants.COLON);
      }
      errors.append(CoreConstants.NEWLINE).append(iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str""));
    }
  }
  if (postupdated) {
    post.store();
    String successMsg=iwrb.getLocalizedString(""String_Node_Str"",""String_Node_Str"");
    String returnMsg=errors == null ? successMsg : successMsg + errors.toString();
    ScriptCaller scriptCaller=new ScriptCaller(WebContextFactory.get(),PostContentViewer.POST_LOAD_SCRIPT,true);
    scriptCaller.run();
    return returnMsg;
  }
 else {
    return errorMsg;
  }
}",0.963249184269277
155354,"@SuppressWarnings(""String_Node_Str"") private Collection<String> getGroupsRolesForPostsAccess(Collection<Integer> groupIds){
  ArrayList<String> roles=new ArrayList<String>(groupIds.size());
  String[] ids=new String[groupIds.size()];
  int i=0;
  for (  Integer id : groupIds) {
    ids[i++]=id.toString();
  }
  GroupBusiness groupBusiness=this.getGroupBusiness();
  Collection<Group> groups=null;
  try {
    groups=groupBusiness.getGroups(ids);
  }
 catch (  RemoteException e) {
    this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
catch (  FinderException e) {
    this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
  if (ListUtil.isEmpty(groups)) {
    return Collections.emptyList();
  }
  for (  Group group : groups) {
    roles.add(PostBusiness.getGroupRoleForPostsAccess(group));
  }
  return roles;
}","@SuppressWarnings(""String_Node_Str"") private Collection<String> getGroupsRolesForPostsAccess(Collection<Integer> groupIds){
  List<String> roles=new ArrayList<String>(groupIds.size());
  String[] ids=new String[groupIds.size()];
  int i=0;
  for (  Integer id : groupIds) {
    ids[i++]=id.toString();
  }
  GroupBusiness groupBusiness=this.getGroupBusiness();
  Collection<Group> groups=null;
  try {
    groups=groupBusiness.getGroups(ids);
  }
 catch (  RemoteException e) {
    this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
catch (  FinderException e) {
    this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
  }
  if (ListUtil.isEmpty(groups)) {
    return Collections.emptyList();
  }
  for (  Group group : groups) {
    roles.add(PostBusiness.getGroupRoleForPostsAccess(group));
  }
  return roles;
}",0.9969933854479855
155355,"public Group getSocialRootGroup(){
  try {
    @SuppressWarnings(""String_Node_Str"") Collection<Group> socialRootGroups=getGroupBusiness().getGroupsByGroupName(Constants.SOCIAL_ROOT_GROUP_NAME);
    return socialRootGroups.iterator().next();
  }
 catch (  Exception e) {
    this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
    return null;
  }
}","public Group getSocialRootGroup(){
  try {
    @SuppressWarnings(""String_Node_Str"") Collection<Group> socialRootGroups=getGroupBusiness().getGroupsByGroupName(SocialConstants.SOCIAL_ROOT_GROUP_NAME);
    return socialRootGroups.iterator().next();
  }
 catch (  Exception e) {
    this.getLogger().log(Level.WARNING,""String_Node_Str"",e);
    return null;
  }
}",0.9915730337078652
155356,"@RemoteMethod public String getGroupSearchResults(String request,Integer amount){
  if (amount == null) {
    amount=-1;
  }
  ArrayList<String> types=null;
  Collection<Group> groups=getGroupBusiness().getGroupsBySearchRequest(request,types,amount);
  if (ListUtil.isEmpty(groups)) {
    return ""String_Node_Str"" + this.getResourceBundle().getLocalizedString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
  UIComponent groupList=WhatsNewView.getGroupListView(groups);
  String html=BuilderLogic.getInstance().getRenderedComponent(groupList,null).getHtml();
  return html;
}","@RemoteMethod public String getGroupSearchResults(String request,Integer amount){
  if (amount == null) {
    amount=-1;
  }
  List<String> types=null;
  Collection<Group> groups=getGroupBusiness().getGroupsBySearchRequest(request,types,amount);
  if (ListUtil.isEmpty(groups)) {
    return ""String_Node_Str"" + this.getResourceBundle().getLocalizedString(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  }
  UIComponent groupList=WhatsNewView.getGroupListView(groups);
  String html=BuilderLogic.getInstance().getRenderedComponent(groupList,null).getHtml();
  return html;
}",0.9957446808510638
155357,"@RemoteMethod public String savePost(Map<String,ArrayList<String>> parameters){
  return this.postBusiness.savePost(parameters);
}","@RemoteMethod public String savePost(Map<String,List<String>> parameters){
  return this.postBusiness.savePost(parameters);
}",0.9803921568627452
155358,"@SuppressWarnings(""String_Node_Str"") @RemoteMethod public Collection<String> getSagaGroupSearchResultsAsAutoComplete(String request){
  request=CoreConstants.PERCENT + request.toLowerCase() + CoreConstants.PERCENT;
  Collection<Group> foundGroups=null;
  try {
    foundGroups=this.getGroupHome().findGroupsByGroupTypeAndLikeName(Constants.SOCIAL_TYPE,request);
  }
 catch (  FinderException e) {
    this.getLogger().log(Level.WARNING,CoreConstants.EMPTY,e);
    return Collections.emptyList();
  }
  if (ListUtil.isEmpty(foundGroups)) {
    return Collections.emptyList();
  }
  int groupsAmmount=foundGroups.size();
  ArrayList<String> strings=new ArrayList<String>(groupsAmmount);
  for (  Group group : foundGroups) {
    StringBuilder responseItem=new StringBuilder(""String_Node_Str"").append(PostBusiness.ParameterNames.GROUP_RECEIVERS_PARAMETER_NAME).append(""String_Node_Str"").append(group.getId()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    String groupName=group.getName();
    responseItem.append(groupName);
    responseItem.append(""String_Node_Str"");
    strings.add(responseItem.toString());
    strings.add(groupName != null ? groupName.toString() : CoreConstants.EMPTY);
  }
  return strings;
}","@SuppressWarnings(""String_Node_Str"") @RemoteMethod public Collection<String> getSagaGroupSearchResultsAsAutoComplete(String request){
  request=CoreConstants.PERCENT + request.toLowerCase() + CoreConstants.PERCENT;
  Collection<Group> foundGroups=null;
  try {
    foundGroups=this.getGroupHome().findGroupsByGroupTypeAndLikeName(SocialConstants.SOCIAL_TYPE,request);
  }
 catch (  FinderException e) {
    this.getLogger().log(Level.WARNING,CoreConstants.EMPTY,e);
    return Collections.emptyList();
  }
  if (ListUtil.isEmpty(foundGroups)) {
    return Collections.emptyList();
  }
  int groupsAmmount=foundGroups.size();
  List<String> strings=new ArrayList<String>(groupsAmmount);
  for (  Group group : foundGroups) {
    StringBuilder responseItem=new StringBuilder(""String_Node_Str"").append(PostBusiness.ParameterNames.GROUP_RECEIVERS_PARAMETER_NAME).append(""String_Node_Str"").append(group.getId()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
    String groupName=group.getName();
    responseItem.append(groupName);
    responseItem.append(""String_Node_Str"");
    strings.add(responseItem.toString());
    strings.add(groupName != null ? groupName.toString() : CoreConstants.EMPTY);
  }
  return strings;
}",0.9955982392957184
155359,"/** 
 * @param request -	any string.
 * @param groupId - group id from which not to select users
 * @param maxAmount - 	max amount of results to return, -1 for unlimited. If this value is negativeand not equal to -1 than result is undefined
 * @param startingEntry - user id from which result will be taken.
 * @return Collection of autocompleted strings with images
 */
@RemoteMethod public Collection<String> autocompleteUserSearchWithImagesRequest(String request,int groupId,int maxAmount,int startingEntry){
  request=request.toLowerCase();
  Collection<User> requestedUsers=(this.getUserHome().ejbAutocompleteRequest(request,groupId,maxAmount,startingEntry));
  UserApplicationEngine userApplicationEngine=this.getUserApplicationEngine();
  String words[]=request.split(CoreConstants.SPACE);
  ArrayList<String> strings=new ArrayList<String>();
  int last=words.length - 1;
  int extractAmount=request.lastIndexOf(CoreConstants.SPACE) == (request.length() - 1) ? 1 : 0;
  StringBuilder phraseBuilding=new StringBuilder(request);
  for (  User user : requestedUsers) {
    UserDataBean data=userApplicationEngine.getUserInfo(user);
    StringBuilder responseItem=new StringBuilder(""String_Node_Str"").append(PostBusiness.ParameterNames.RECEIVERS_PARAMETER_NAME).append(""String_Node_Str"").append(user.getId()).append(""String_Node_Str"").append(data.getPictureUri()).append(""String_Node_Str"");
    StringBuilder autocompleted=phraseBuilding;
    String name=data.getName().toLowerCase();
    String names[]=name.split(CoreConstants.SPACE);
    String firstName=names.length > 0 ? names[0] : null;
    String lastName=names.length == 2 ? names[1] : names.length > 2 ? names[2] : null;
    String email=data.getEmail().toLowerCase();
    if (email.contains(words[last]) && !request.contains(email)) {
      autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(email);
    }
 else     if (name.contains(words[last]) && !request.contains(name)) {
      for (int i=0; i < names.length; i++) {
        if (!request.contains(names[i])) {
          autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(names[i]);
        }
      }
    }
 else     if (firstName.contains(words[last]) && !request.contains(firstName)) {
      autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(firstName);
    }
 else     if ((lastName != null) && lastName.contains(words[last]) && !request.contains(lastName)) {
      autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(lastName);
    }
    responseItem.append(autocompleted);
    responseItem.append(""String_Node_Str"");
    strings.add(responseItem.toString());
    strings.add(autocompleted != null ? autocompleted.toString() : CoreConstants.EMPTY);
  }
  return strings;
}","/** 
 * @param request -	any string.
 * @param groupId - group id from which not to select users
 * @param maxAmount - 	max amount of results to return, -1 for unlimited. If this value is negativeand not equal to -1 than result is undefined
 * @param startingEntry - user id from which result will be taken.
 * @return Collection of autocompleted strings with images
 */
@RemoteMethod public Collection<String> autocompleteUserSearchWithImagesRequest(String request,int groupId,int maxAmount,int startingEntry){
  request=request.toLowerCase();
  Collection<User> requestedUsers=(this.getUserHome().ejbAutocompleteRequest(request,groupId,maxAmount,startingEntry));
  UserApplicationEngine userApplicationEngine=this.getUserApplicationEngine();
  String words[]=request.split(CoreConstants.SPACE);
  List<String> strings=new ArrayList<String>();
  int last=words.length - 1;
  int extractAmount=request.lastIndexOf(CoreConstants.SPACE) == (request.length() - 1) ? 1 : 0;
  StringBuilder phraseBuilding=new StringBuilder(request);
  for (  User user : requestedUsers) {
    UserDataBean data=userApplicationEngine.getUserInfo(user);
    StringBuilder responseItem=new StringBuilder(""String_Node_Str"").append(PostBusiness.ParameterNames.RECEIVERS_PARAMETER_NAME).append(""String_Node_Str"").append(user.getId()).append(""String_Node_Str"").append(data.getPictureUri()).append(""String_Node_Str"");
    StringBuilder autocompleted=phraseBuilding;
    String name=data.getName().toLowerCase();
    String names[]=name.split(CoreConstants.SPACE);
    String firstName=names.length > 0 ? names[0] : null;
    String lastName=names.length == 2 ? names[1] : names.length > 2 ? names[2] : null;
    String email=data.getEmail().toLowerCase();
    if (email.contains(words[last]) && !request.contains(email)) {
      autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(email);
    }
 else     if (name.contains(words[last]) && !request.contains(name)) {
      for (int i=0; i < names.length; i++) {
        if (!request.contains(names[i])) {
          autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(names[i]);
        }
      }
    }
 else     if (firstName.contains(words[last]) && !request.contains(firstName)) {
      autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(firstName);
    }
 else     if ((lastName != null) && lastName.contains(words[last]) && !request.contains(lastName)) {
      autocompleted=new StringBuilder(request.substring(0,request.length() - words[last].length() - extractAmount)).append(lastName);
    }
    responseItem.append(autocompleted);
    responseItem.append(""String_Node_Str"");
    strings.add(responseItem.toString());
    strings.add(autocompleted != null ? autocompleted.toString() : CoreConstants.EMPTY);
  }
  return strings;
}",0.9991541194383352
155360,"protected IWResourceBundle getResourceBundle(){
  return this.getResourceBundle(this.getBundle(Constants.IW_BUNDLE_IDENTIFIER));
}","protected IWResourceBundle getResourceBundle(){
  return this.getResourceBundle(this.getBundle(SocialConstants.IW_BUNDLE_IDENTIFIER));
}",0.9774436090225564
155361,"@Override public Photos<Photo> getPhotoList(HashMap<String,Object> paramMap){
  List<HashMap<String,Object>> results=articleDao.getPhotoList(paramMap);
  Photos<Photo> photos=new Photos<Photo>();
  String content=""String_Node_Str"";
  if (!results.isEmpty()) {
    for (    HashMap<String,Object> result : results) {
      Photo photo=new Photo();
      photo.setId((Long)result.get(""String_Node_Str""));
      photo.setPId((Long)result.get(""String_Node_Str""));
      photo.setLanguage(result.get(""String_Node_Str"").toString());
      photo.setLangSetId((Integer)result.get(""String_Node_Str""));
      photo.setUname(result.get(""String_Node_Str"").toString());
      photo.setTitle(result.get(""String_Node_Str"").toString());
      photo.setTimeStamp((Long)result.get(""String_Node_Str""));
      photo.setThumbUrl(looahCommon.makeImageUrl((Long)result.get(""String_Node_Str""),LooahAPIConfig.THUMBNAIL_SIZE));
      photo.setTwiceThumbUrl(looahCommon.makeImageUrl((Long)result.get(""String_Node_Str""),LooahAPIConfig.TWICE_THUMBNAIL_SIZE));
      photo.setXcompleted(result.get(""String_Node_Str"").equals(1));
      content=result.get(""String_Node_Str"").toString();
      if (result.get(""String_Node_Str"") != null) {
        content=result.get(""String_Node_Str"").toString();
      }
      photo.setContent(looahCommon.cutText(content,50));
      photos.add(photo);
    }
  }
  return photos.setCount();
}","@Override public Photos<Photo> getPhotoList(HashMap<String,Object> paramMap){
  List<HashMap<String,Object>> results=articleDao.getPhotoList(paramMap);
  Photos<Photo> photos=new Photos<Photo>();
  String content=""String_Node_Str"";
  if (!results.isEmpty()) {
    for (    HashMap<String,Object> result : results) {
      Photo photo=new Photo();
      photo.setId((Long)result.get(""String_Node_Str""));
      photo.setPId((Long)result.get(""String_Node_Str""));
      photo.setLanguage(result.get(""String_Node_Str"").toString());
      photo.setLangSetId((Integer)result.get(""String_Node_Str""));
      photo.setUname(result.get(""String_Node_Str"").toString());
      photo.setTitle(result.get(""String_Node_Str"").toString());
      photo.setTimeStamp((Long)result.get(""String_Node_Str""));
      photo.setThumbUrl(looahCommon.makeImageUrl((Long)result.get(""String_Node_Str""),LooahAPIConfig.THUMBNAIL_SIZE));
      photo.setTwiceThumbUrl(looahCommon.makeImageUrl((Long)result.get(""String_Node_Str""),LooahAPIConfig.TWICE_THUMBNAIL_SIZE));
      photo.setXcompleted(result.get(""String_Node_Str"").toString().equals(""String_Node_Str""));
      content=result.get(""String_Node_Str"").toString();
      if (result.get(""String_Node_Str"") != null) {
        content=result.get(""String_Node_Str"").toString();
      }
      photo.setContent(looahCommon.cutText(content,50));
      photos.add(photo);
    }
  }
  return photos.setCount();
}",0.9896907216494846
155362,"@Override public PhotoDetail get(String id){
  HashMap<String,String> paramMap=new HashMap<String,String>();
  paramMap.put(""String_Node_Str"",id);
  paramMap.put(""String_Node_Str"",TYPE_PHOTO);
  HashMap<String,Object> articlePhotoInfo=articleDao.getArticlePhoto(paramMap);
  if (articlePhotoInfo != null && !articlePhotoInfo.isEmpty()) {
    PhotoDetail photoDetail=new PhotoDetail((Long)articlePhotoInfo.get(""String_Node_Str""));
    HashMap<String,Object> userInfo=new HashMap<String,Object>();
    userInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    userInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    userInfo.put(""String_Node_Str"",looahAPIConfig.LOOAH_DOMAIN + ""String_Node_Str"");
    if (TYPE_LOOAH_P.equals(articlePhotoInfo.get(""String_Node_Str"").toString())) {
      if (articlePhotoInfo.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(articlePhotoInfo.get(""String_Node_Str"").toString())) {
        userInfo.put(""String_Node_Str"",looahAPIConfig.LOOAH_DOMAIN + ""String_Node_Str"" + looahCommon.getDirSeparate((Long)articlePhotoInfo.get(""String_Node_Str""))+ ""String_Node_Str""+ articlePhotoInfo.get(""String_Node_Str""));
      }
    }
 else {
      if (articlePhotoInfo.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(articlePhotoInfo.get(""String_Node_Str"").toString())) {
        userInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
      }
    }
    HashMap<String,Object> imageInfo=new HashMap<String,Object>();
    long imageId=(Long)articlePhotoInfo.get(""String_Node_Str"");
    String contentType=(String)articlePhotoInfo.get(""String_Node_Str"");
    imageInfo.put(""String_Node_Str"",imageId);
    imageInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    imageInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    imageInfo.put(""String_Node_Str"",contentType);
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,ORIGINAL_SIZE));
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,FEATURE_SIZE));
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,THUMBNAIL_SIZE));
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,TWICE_THUMBNAIL_SIZE));
    photoDetail.setId((Long)articlePhotoInfo.get(""String_Node_Str""));
    photoDetail.setLanguage(articlePhotoInfo.get(""String_Node_Str"").toString());
    photoDetail.setLangSetId((Integer)articlePhotoInfo.get(""String_Node_Str""));
    photoDetail.setTitle(articlePhotoInfo.get(""String_Node_Str"").toString());
    photoDetail.setCreatedTimeStamp((Long)articlePhotoInfo.get(""String_Node_Str""));
    photoDetail.setXcompleted(articlePhotoInfo.get(""String_Node_Str"").equals(1));
    String content=articlePhotoInfo.get(""String_Node_Str"").toString();
    if (articlePhotoInfo.get(""String_Node_Str"") != null) {
      content=articlePhotoInfo.get(""String_Node_Str"").toString();
    }
    photoDetail.setContent(content);
    photoDetail.setImage(imageInfo);
    photoDetail.setUser(userInfo);
    return photoDetail;
  }
  return new PhotoDetail(0);
}","@Override public PhotoDetail get(String id){
  HashMap<String,String> paramMap=new HashMap<String,String>();
  paramMap.put(""String_Node_Str"",id);
  paramMap.put(""String_Node_Str"",TYPE_PHOTO);
  HashMap<String,Object> articlePhotoInfo=articleDao.getArticlePhoto(paramMap);
  if (articlePhotoInfo != null && !articlePhotoInfo.isEmpty()) {
    PhotoDetail photoDetail=new PhotoDetail((Long)articlePhotoInfo.get(""String_Node_Str""));
    HashMap<String,Object> userInfo=new HashMap<String,Object>();
    userInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    userInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    userInfo.put(""String_Node_Str"",looahAPIConfig.LOOAH_DOMAIN + ""String_Node_Str"");
    if (TYPE_LOOAH_P.equals(articlePhotoInfo.get(""String_Node_Str"").toString())) {
      if (articlePhotoInfo.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(articlePhotoInfo.get(""String_Node_Str"").toString())) {
        userInfo.put(""String_Node_Str"",looahAPIConfig.LOOAH_DOMAIN + ""String_Node_Str"" + looahCommon.getDirSeparate((Long)articlePhotoInfo.get(""String_Node_Str""))+ ""String_Node_Str""+ articlePhotoInfo.get(""String_Node_Str""));
      }
    }
 else {
      if (articlePhotoInfo.get(""String_Node_Str"") != null && !""String_Node_Str"".equals(articlePhotoInfo.get(""String_Node_Str"").toString())) {
        userInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
      }
    }
    HashMap<String,Object> imageInfo=new HashMap<String,Object>();
    long imageId=(Long)articlePhotoInfo.get(""String_Node_Str"");
    String contentType=(String)articlePhotoInfo.get(""String_Node_Str"");
    imageInfo.put(""String_Node_Str"",imageId);
    imageInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    imageInfo.put(""String_Node_Str"",articlePhotoInfo.get(""String_Node_Str""));
    imageInfo.put(""String_Node_Str"",contentType);
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,ORIGINAL_SIZE));
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,FEATURE_SIZE));
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,THUMBNAIL_SIZE));
    imageInfo.put(""String_Node_Str"",looahCommon.makeImageUrl(imageId,TWICE_THUMBNAIL_SIZE));
    photoDetail.setId((Long)articlePhotoInfo.get(""String_Node_Str""));
    photoDetail.setLanguage(articlePhotoInfo.get(""String_Node_Str"").toString());
    photoDetail.setLangSetId((Integer)articlePhotoInfo.get(""String_Node_Str""));
    photoDetail.setTitle(articlePhotoInfo.get(""String_Node_Str"").toString());
    photoDetail.setCreatedTimeStamp((Long)articlePhotoInfo.get(""String_Node_Str""));
    photoDetail.setXcompleted(articlePhotoInfo.get(""String_Node_Str"").toString().equals(""String_Node_Str""));
    String content=articlePhotoInfo.get(""String_Node_Str"").toString();
    if (articlePhotoInfo.get(""String_Node_Str"") != null) {
      content=articlePhotoInfo.get(""String_Node_Str"").toString();
    }
    photoDetail.setContent(content);
    photoDetail.setImage(imageInfo);
    photoDetail.setUser(userInfo);
    return photoDetail;
  }
  return new PhotoDetail(0);
}",0.9953338696701528
155363,"public static boolean intersect(Point a1,Point a2,Point b1,Point b2){
  int direction1=a1.getOrientation(a2,b1);
  int direction2=a1.getOrientation(a2,b2);
  int direction3=b1.getOrientation(b2,a1);
  int direction4=b1.getOrientation(b2,a2);
  boolean straddleOne=(direction1 > 0 && direction2 < 0) || (direction1 < 0 && direction2 > 0);
  boolean straddleTwo=(direction3 > 0 && direction4 < 0) || (direction3 < 0 && direction4 > 0);
  if (straddleOne && straddleTwo)   return true;
  if (direction1 == 0 && pointOnLine(a1,a2,b1))   return true;
  if (direction2 == 0 && pointOnLine(a1,a2,b2))   return true;
  if (direction3 == 0 && pointOnLine(b1,b2,a1))   return true;
  if (direction1 == 0 && pointOnLine(b1,b2,a2))   return true;
  return false;
}","public static boolean intersect(Point a1,Point a2,Point b1,Point b2){
  int direction1=a1.getOrientation(a2,b1);
  int direction2=a1.getOrientation(a2,b2);
  int direction3=b1.getOrientation(b2,a1);
  int direction4=b1.getOrientation(b2,a2);
  boolean straddleOne=(direction1 > 0 && direction2 < 0) || (direction1 < 0 && direction2 > 0);
  boolean straddleTwo=(direction3 > 0 && direction4 < 0) || (direction3 < 0 && direction4 > 0);
  if (straddleOne && straddleTwo)   return true;
  if (direction1 == 0 && pointOnLine(a1,a2,b1))   return true;
  if (direction2 == 0 && pointOnLine(a1,a2,b2))   return true;
  if (direction3 == 0 && pointOnLine(b1,b2,a1))   return true;
  if (direction4 == 0 && pointOnLine(b1,b2,a2))   return true;
  return false;
}",0.9986702127659576
155364,"public void start(){
  leaseCheckerThread leaseChecker=new leaseCheckerThread();
  leaseChecker.run();
  while (true) {
    byte[] validData;
    DatagramPacket recivedPacket;
    try {
      socket=new DatagramSocket(67);
    }
 catch (    SocketException ex) {
      Logger.getLogger(DHCPServer.class.getName()).log(Level.SEVERE,null,ex);
    }
    DHCPPacket temp=null;
{
      byte[] recievedData=new byte[MaxLength];
      recivedPacket=new DatagramPacket(recievedData,MaxLength);
      try {
        socket.receive(recivedPacket);
      }
 catch (      IOException ex) {
        Logger.getLogger(DHCPServer.class.getName()).log(Level.SEVERE,null,ex);
      }
      validData=Utility.readNByte(recivedPacket.getLength(),recievedData,0);
      recivedPacket.setData(validData);
    }
    temp=new DHCPPacket(recivedPacket);
    Option gatewayOption=new Option((byte)3,(byte)4,gateway.IPAddressToByte());
    temp.getOptions().add(gatewayOption);
    Option DNSOption=new Option((byte)6,(byte)4,DNS.IPAddressToByte());
    temp.getOptions().add(DNSOption);
    Option subnetmaskOption=new Option((byte)1,(byte)4,subnetmask.IPAddressToByte());
    temp.getOptions().add(subnetmaskOption);
    Option serverIPOption=new Option((byte)54,(byte)4,Utility.getIPAddress());
    temp.getOptions().add(serverIPOption);
    Option renewalTimeOption=new Option((byte)58,(byte)4,Utility.intToByteArray(renewal));
    temp.getOptions().add(renewalTimeOption);
    Option rebindingTimeOption=new Option((byte)59,(byte)4,Utility.intToByteArray(rebinding));
    temp.getOptions().add(rebindingTimeOption);
    Option leaseTimeOption=new Option((byte)51,(byte)4,Utility.intToByteArray(lease));
    temp.getOptions().add(leaseTimeOption);
    int optionSize=recivedPacket.getLength() - 240;
    byte[] option=new byte[optionSize];
    option=Utility.readNByte(optionSize,validData,240);
    byte[] messageOption=new byte[6];
    byte[] option50=new byte[6];
    Utility.optionTraverse(option,53,messageOption);
    Utility.optionTraverse(option,50,option50);
    if (messageOption[2] == 1) {
      DHCPPacket offer=Utility.getDiscover(temp,reserved,randomIp,subnetmask);
      Utility.sendReply(offer,socket);
    }
 else     if (messageOption[2] == 3) {
      DHCPPacket AckOrDecline=Utility.getRequest(temp,reserved,db,option50);
      Utility.sendReply(AckOrDecline,socket);
    }
  }
}","public void start(){
  leaseCheckerThread leaseChecker=new leaseCheckerThread();
  leaseChecker.run();
  while (true) {
    byte[] validData;
    DatagramPacket recivedPacket;
    try {
      socket=new DatagramSocket(67);
    }
 catch (    SocketException ex) {
      Logger.getLogger(DHCPServer.class.getName()).log(Level.SEVERE,null,ex);
    }
    DHCPPacket temp=null;
{
      byte[] recievedData=new byte[MaxLength];
      recivedPacket=new DatagramPacket(recievedData,MaxLength);
      try {
        socket.receive(recivedPacket);
      }
 catch (      IOException ex) {
        Logger.getLogger(DHCPServer.class.getName()).log(Level.SEVERE,null,ex);
      }
      validData=Utility.readNByte(recivedPacket.getLength(),recievedData,0);
      recivedPacket.setData(validData);
    }
    temp=new DHCPPacket(recivedPacket);
    Option gatewayOption=new Option((byte)3,(byte)4,gateway.IPAddressToByte());
    temp.getOptions().add(gatewayOption);
    Option DNSOption=new Option((byte)6,(byte)4,DNS.IPAddressToByte());
    temp.getOptions().add(DNSOption);
    Option subnetmaskOption=new Option((byte)1,(byte)4,subnetmask.IPAddressToByte());
    temp.getOptions().add(subnetmaskOption);
    Option serverIPOption=new Option((byte)54,(byte)4,Utility.getIPAddress());
    temp.getOptions().add(serverIPOption);
    Option renewalTimeOption=new Option((byte)58,(byte)4,Utility.intToByteArray(renewal));
    temp.getOptions().add(renewalTimeOption);
    Option rebindingTimeOption=new Option((byte)59,(byte)4,Utility.intToByteArray(rebinding));
    temp.getOptions().add(rebindingTimeOption);
    Option leaseTimeOption=new Option((byte)51,(byte)4,Utility.intToByteArray(lease));
    temp.getOptions().add(leaseTimeOption);
    int optionSize=recivedPacket.getLength() - 240;
    byte[] option=new byte[optionSize];
    option=Utility.readNByte(optionSize,validData,240);
    byte[] messageOption=new byte[6];
    byte[] option50=new byte[6];
    Utility.optionTraverse(option,53,messageOption);
    Utility.optionTraverse(option,50,option50);
    if (messageOption[2] == 1) {
      DHCPPacket offer=Utility.getDiscover(temp,db,reserved,randomIp,subnetmask);
      Utility.sendReply(offer,socket);
    }
 else     if (messageOption[2] == 3) {
      DHCPPacket AckOrDecline=Utility.getRequest(temp,reserved,db,option50);
      Utility.sendReply(AckOrDecline,socket);
    }
  }
}",0.999368553988634
155365,"public static DHCPPacket getDiscover(DHCPPacket discover,HashMap<byte[],IPTime> reserved,Random randomIP,IPAddress subnetmask){
  DHCPPacket offer=discover;
  Option offerOption=new Option((byte)53,(byte)2);
  offer.getOptions().add(offerOption);
  byte first=(byte)randomIP.nextInt((256 - subnetmask.getFirst()) + subnetmask.getFirst());
  byte second=(byte)randomIP.nextInt((256 - subnetmask.getSecond()) + subnetmask.getSecond());
  byte third=(byte)randomIP.nextInt((256 - subnetmask.getThird()) + subnetmask.getThird());
  byte forth=(byte)randomIP.nextInt((256 - subnetmask.getForth()) + subnetmask.getForth());
  IPAddress offeredIP=new IPAddress(first,second,third,forth);
  byte[] mac=Utility.readNByte(6,offer.getChaddr(),0);
  Timestamp now=Utility.getCurrentTimeStamp();
  IPTime reservedIPTime=new IPTime(offeredIP,now.getTime());
  reserved.put(mac,reservedIPTime);
  offer.setYiaddr(offeredIP.IPAddressToByte());
  return offer;
}","public static DHCPPacket getDiscover(DHCPPacket discover,HashMap<byte[],IPTime> db,HashMap<byte[],IPTime> reserved,Random randomIP,IPAddress subnetmask){
  DHCPPacket offer=discover;
  Option offerOption=new Option((byte)53,(byte)2);
  offer.getOptions().add(offerOption);
  IPAddress offeredIP;
  do {
    offeredIP=Utility.RandomIPGenerator(subnetmask,randomIP);
  }
 while (Utility.HasIPAdress(offeredIP,reserved) || Utility.HasIPAdress(offeredIP,db));
  byte[] mac=Utility.readNByte(6,offer.getChaddr(),0);
  Timestamp now=Utility.getCurrentTimeStamp();
  IPTime reservedIPTime=new IPTime(offeredIP,now.getTime());
  reserved.put(mac,reservedIPTime);
  offer.setYiaddr(offeredIP.IPAddressToByte());
  return offer;
}",0.645045045045045
155366,"/** 
 * Automatically generated by the SimView program. Do not edit this manually, as such changes will get overwritten.
 */
public void layoutForSimView(){
  preferredSize=new Dimension(610,471);
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(258,299));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(16,54));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(21,331));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(183,149));
}","/** 
 * Automatically generated by the SimView program. Do not edit this manually, as such changes will get overwritten.
 */
public void layoutForSimView(){
  preferredSize=new Dimension(610,471);
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(168,128));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(0,73));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(10,294));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(222,337));
}",0.6690203000882613
155367,"@SuppressWarnings(""String_Node_Str"") @Override public void deltext(double e,message x){
  Continue(e);
  checkForHalt(x);
  if (phaseIs(RECEIVE_CAT)) {
    for (int i=0; i < x.size(); i++) {
      queueCatFile(x,i,e);
    }
  }
  checkForStartInput(x);
  checkForFlatFile(x);
  checkForCatFile(x);
  checkForDPDone(x);
  for (int i=0; i < x.size(); i++) {
    if (messageOnPort(x,LDR_DONE,i)) {
      entity value=x.getValOnPort(LDR_DONE,i);
      Pair pair=(Pair)value;
      loadersQueue.add(pair.getKey());
      CatFile aCatFile=(CatFile)pair.getValue();
      completedCatQueue.add(aCatFile);
      holdIn(SEND_CAT,0);
      this.setBackgroundColor(Color.GREEN);
      sendCatFilesToLoaders();
    }
  }
  if (phaseIs(PASSIVE) && doneDPReceived) {
    holdIn(SEND_CAT,0);
    this.setBackgroundColor(Color.GREEN);
    sendCatFilesToLoaders();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void deltext(double e,message x){
  Continue(e);
  checkForHalt(x);
  if (phaseIs(RECEIVE_CAT)) {
    for (int i=0; i < x.size(); i++) {
      queueCatFile(x,i,e);
    }
  }
  checkForStartInput(x);
  checkForFlatFile(x);
  checkForCatFile(x);
  checkForDPDone(x);
  for (int i=0; i < x.size(); i++) {
    if (messageOnPort(x,LDR_DONE,i)) {
      entity value=x.getValOnPort(LDR_DONE,i);
      Pair pair=(Pair)value;
      loadersQueue.add(pair.getKey());
      CatFile aCatFile=(CatFile)pair.getValue();
      completedCatQueue.add(aCatFile);
      holdIn(SEND_CAT,0);
      this.setBackgroundColor(Color.GREEN);
    }
  }
  if (phaseIs(PASSIVE) && doneDPReceived) {
    holdIn(SEND_CAT,0);
    this.setBackgroundColor(Color.GREEN);
  }
}",0.9635479951397328
155368,"/** 
 * Creates the messages for the loaders 
 */
private void sendCatFilesToLoaders(){
  catFilesOutMessage=new message();
  while (!loadersQueue.isEmpty() && !workingCatFileQueue.isEmpty()) {
    Loader_0_0 aLoader=(Loader_0_0)loadersQueue.remove();
    CatFile aCatFile=(CatFile)workingCatFileQueue.remove();
    Pair aPair=new Pair(aLoader.getName(),aCatFile);
    catFilesOutMessage.add(makeContent(CAT_OUT,aPair));
  }
}","/** 
 * Creates the messages for the loaders 
 */
private void sendCatFilesToLoaders(){
  if (catFilesOutMessage == null)   catFilesOutMessage=new message();
  while (!loadersQueue.isEmpty() && !workingCatFileQueue.isEmpty()) {
    Loader_0_0 aLoader=(Loader_0_0)loadersQueue.remove();
    CatFile aCatFile=(CatFile)workingCatFileQueue.remove();
    Pair aPair=new Pair(aLoader.getName(),aCatFile);
    catFilesOutMessage.add(makeContent(CAT_OUT,aPair));
  }
}",0.9616252821670428
155369,"@Override public message out(){
  if (phaseIs(HALTING)) {
    return haltMessage;
  }
  if (phaseIs(NOTIFY_CA)) {
    return loadFileMessage;
  }
  if (phaseIs(SEND_FF)) {
    return partitionFileMessage;
  }
  if (phaseIs(SEND_CAT)) {
    return catFilesOutMessage;
  }
  if (phaseIs(LDRS_DONE)) {
    loadersDoneMessage=new message();
    loadersDoneMessage.add(makeContent(LOAD,new entity(""String_Node_Str"")));
    return loadersDoneMessage;
  }
  return NULL_MESSAGE;
}","@Override public message out(){
  message theMessage=NULL_MESSAGE;
  if (phaseIs(HALTING)) {
    theMessage=haltMessage;
  }
  if (phaseIs(NOTIFY_CA)) {
    theMessage=loadFileMessage;
  }
  if (phaseIs(SEND_FF)) {
    theMessage=partitionFileMessage;
  }
  if (phaseIs(SEND_CAT)) {
    sendCatFilesToLoaders();
    theMessage=catFilesOutMessage;
    catFilesOutMessage=null;
  }
  if (phaseIs(LDRS_DONE)) {
    loadersDoneMessage=new message();
    loadersDoneMessage.add(makeContent(LOAD,new entity(""String_Node_Str"")));
    theMessage=loadersDoneMessage;
  }
  return theMessage;
}",0.7530747398297067
155370,"/** 
 * Automatically generated by the SimView program. Do not edit this manually, as such changes will get overwritten.
 */
public void layoutForSimView(){
  preferredSize=new Dimension(475,473);
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(41,108));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(55,297));
}","/** 
 * Automatically generated by the SimView program. Do not edit this manually, as such changes will get overwritten.
 */
public void layoutForSimView(){
  preferredSize=new Dimension(475,473);
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(58,367));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(41,108));
  ((ViewableComponent)withName(""String_Node_Str"")).setPreferredLocation(new Point(55,297));
}",0.8925233644859814
155371,"@SuppressWarnings(""String_Node_Str"") private void sendExtCatToWriters(){
  if (outputMessage == null) {
    outputMessage=new message();
  }
  if (currentCatFile == null && !workingCatFileQueue.isEmpty()) {
    currentCatFile=(CatFile)workingCatFileQueue.remove();
    if (currentCatFile.getProcessedExtCatList().isEmpty()) {
      workingExtCatFileQueue.addAll(currentCatFile.getExtCatList());
    }
  }
  while (!writersQueue.isEmpty() && !workingExtCatFileQueue.isEmpty()) {
    Writer_0_0 aWriter=(Writer_0_0)writersQueue.remove();
    ExtCatFile aCatFile=(ExtCatFile)workingExtCatFileQueue.remove();
    Pair aPair=new Pair(aWriter.getName(),aCatFile);
    outputMessage.add(makeContent(EXT_CAT_OUT,aPair));
  }
}","@SuppressWarnings(""String_Node_Str"") private void sendExtCatToWriters(){
  if (outputMessage == null) {
    outputMessage=new message();
  }
  if (currentCatFile == null && !workingCatFileQueue.isEmpty()) {
    currentCatFile=(CatFile)workingCatFileQueue.remove();
    while (workingExtCatFileQueue.size() <= writersQueue.size()) {
      if (currentCatFile.getProcessedExtCatList().isEmpty()) {
        workingExtCatFileQueue.addAll(currentCatFile.getExtCatList());
      }
    }
  }
  while (!writersQueue.isEmpty() && !workingExtCatFileQueue.isEmpty()) {
    Writer_0_0 aWriter=(Writer_0_0)writersQueue.remove();
    ExtCatFile aCatFile=(ExtCatFile)workingExtCatFileQueue.remove();
    Pair aPair=new Pair(aWriter.getName(),aCatFile);
    outputMessage.add(makeContent(EXT_CAT_OUT,aPair));
  }
}",0.9478547854785478
155372,"private void burstBomb(final Bomb bomb,final ServerThread thread){
  new Thread(new Runnable(){
    public void run(){
      try {
        ArrayList<Integer> bomb_position=new ArrayList<Integer>();
        bomb_position.add(bomb.getX());
        bomb_position.add(bomb.getY());
        Thread.sleep(bomb.getSleepingTime());
        HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
        for (int i=1; i < Server.board.getCols() - 1; i++) {
          int index=i + Server.board.getCols() * bomb.getY();
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            element.setActive(false);
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        for (int i=1; i < Server.board.getRows() - 1; i++) {
          int index=bomb.getX() + Server.board.getCols() * i;
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            element.setActive(false);
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        Server.sendAll(""String_Node_Str"",bomb_position);
        thread.nb_bombs--;
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
}","private void burstBomb(final Bomb bomb){
  final ServerThread current_thread=this;
  new Thread(new Runnable(){
    public void run(){
      try {
        ArrayList<Integer> bomb_position=new ArrayList<Integer>();
        bomb_position.add(bomb.getX());
        bomb_position.add(bomb.getY());
        Thread.sleep(bomb.getSleepingTime());
        HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
        for (int i=1; i < Server.board.getCols() - 1; i++) {
          int index=i + Server.board.getCols() * bomb.getY();
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            if (element instanceof Bomb) {
              Server.board.setElement(index,null);
            }
 else {
              element.setActive(false);
            }
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        for (int i=1; i < Server.board.getRows() - 1; i++) {
          int index=bomb.getX() + Server.board.getCols() * i;
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            if (element instanceof Bomb) {
              Server.board.setElement(index,null);
            }
 else {
              element.setActive(false);
            }
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        Server.sendAll(""String_Node_Str"",bomb_position);
        current_thread.nb_bombs--;
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
}",0.9142857142857144
155373,"private void move(int diff_x,int diff_y){
  Boolean moving_allowed=false;
  if (Math.abs(diff_x) + Math.abs(diff_y) == 1) {
    moving_allowed=true;
  }
  int target_x=this.position_x + diff_x;
  int target_y=this.position_y + diff_y;
  int target_index=target_x + Server.board.getCols() * target_y;
  if (Server.board.getElements().get(target_index) instanceof Wall || Server.board.getElements().get(target_index) instanceof Bomb) {
    moving_allowed=false;
  }
  if (moving_allowed) {
    this.position_x+=diff_x;
    this.position_y+=diff_y;
    ArrayList<Integer> move=new ArrayList<Integer>();
    move.add(this.client_id);
    move.add(this.position_x);
    move.add(this.position_y);
    ArrayList<Integer> exceptions=new ArrayList<Integer>();
    exceptions.add(this.client_id);
    Server.sendAllBut(""String_Node_Str"",move,exceptions);
  }
 else {
    ArrayList<Integer> position=new ArrayList<Integer>();
    position.add(this.client_id);
    position.add(this.position_x);
    position.add(this.position_y);
    this.send(""String_Node_Str"",position);
  }
}","private void move(int diff_x,int diff_y){
  Boolean moving_allowed=false;
  if (Math.abs(diff_x) + Math.abs(diff_y) == 1) {
    moving_allowed=true;
  }
  int target_x=this.position_x + diff_x;
  int target_y=this.position_y + diff_y;
  int target_index=target_x + Server.board.getCols() * target_y;
  Element target_element=Server.board.getElements().get(target_index);
  if (target_element != null && !(target_element.isActive() && target_element.isWalkable())) {
    moving_allowed=false;
  }
  if (moving_allowed) {
    this.position_x+=diff_x;
    this.position_y+=diff_y;
    ArrayList<Integer> move=new ArrayList<Integer>();
    move.add(this.client_id);
    move.add(this.position_x);
    move.add(this.position_y);
    ArrayList<Integer> exceptions=new ArrayList<Integer>();
    exceptions.add(this.client_id);
    Server.sendAllBut(""String_Node_Str"",move,exceptions);
  }
 else {
    ArrayList<Integer> position=new ArrayList<Integer>();
    position.add(this.client_id);
    position.add(this.position_x);
    position.add(this.position_y);
    this.send(""String_Node_Str"",position);
  }
}",0.9123616236162362
155374,"public void setRandomPosition(){
  double nb_cases=Server.board.getCols() * Server.board.getRows();
  int i, x, y;
  Map<Integer,Integer> players_positions=Server.getPlayersPositions();
  do {
    i=(int)Math.round(Math.random() * nb_cases);
    x=i % Server.board.getCols();
    y=(int)Math.ceil(i / Server.board.getCols());
  }
 while (Server.board.getElements().get(i) != null || players_positions.containsKey(x) && players_positions.get(x) == y);
  this.position_x=x;
  this.position_y=y;
}","public void setRandomPosition(){
  double nb_cases=Server.board.getCols() * Server.board.getRows();
  int i, x, y;
  Map<Integer,Integer> players_positions=Server.getPlayersPositions();
  Element element;
  do {
    i=(int)Math.round(Math.random() * nb_cases);
    x=i % Server.board.getCols();
    y=(int)Math.ceil(i / Server.board.getCols());
    element=Server.board.getElements().get(i);
  }
 while ((element != null && !element.isWalkable()) || players_positions.containsKey(x) && players_positions.get(x) == y);
  this.position_x=x;
  this.position_y=y;
}",0.8739336492890996
155375,"public void run(){
  try {
    ArrayList<Integer> bomb_position=new ArrayList<Integer>();
    bomb_position.add(bomb.getX());
    bomb_position.add(bomb.getY());
    Thread.sleep(bomb.getSleepingTime());
    HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
    for (int i=1; i < Server.board.getCols() - 1; i++) {
      int index=i + Server.board.getCols() * bomb.getY();
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        element.setActive(false);
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    for (int i=1; i < Server.board.getRows() - 1; i++) {
      int index=bomb.getX() + Server.board.getCols() * i;
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        element.setActive(false);
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    Server.sendAll(""String_Node_Str"",bomb_position);
    thread.nb_bombs--;
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    ArrayList<Integer> bomb_position=new ArrayList<Integer>();
    bomb_position.add(bomb.getX());
    bomb_position.add(bomb.getY());
    Thread.sleep(bomb.getSleepingTime());
    HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
    for (int i=1; i < Server.board.getCols() - 1; i++) {
      int index=i + Server.board.getCols() * bomb.getY();
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        if (element instanceof Bomb) {
          Server.board.setElement(index,null);
        }
 else {
          element.setActive(false);
        }
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    for (int i=1; i < Server.board.getRows() - 1; i++) {
      int index=bomb.getX() + Server.board.getCols() * i;
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        if (element instanceof Bomb) {
          Server.board.setElement(index,null);
        }
 else {
          element.setActive(false);
        }
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    Server.sendAll(""String_Node_Str"",bomb_position);
    current_thread.nb_bombs--;
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9193548387096774
155376,"private void dropBomb(){
  Bomb bomb=new Bomb();
  bomb.setX(this.position_x);
  bomb.setY(this.position_y);
  bomb.setSleepingTime(this.bomb_sleeping_time);
  ArrayList<Integer> bomb_position=new ArrayList<Integer>();
  bomb_position.add(bomb.getX());
  bomb_position.add(bomb.getY());
  int target_index=bomb.getX() + Server.board.getCols() * bomb.getY();
  Server.board.setElement(target_index,bomb);
  Server.sendAll(""String_Node_Str"",bomb_position);
  this.nb_bombs++;
  this.burstBomb(bomb,this);
}","private void dropBomb(){
  Bomb bomb=new Bomb();
  bomb.setX(this.position_x);
  bomb.setY(this.position_y);
  bomb.setSleepingTime(this.bomb_sleeping_time);
  ArrayList<Integer> bomb_position=new ArrayList<Integer>();
  bomb_position.add(bomb.getX());
  bomb_position.add(bomb.getY());
  int target_index=bomb.getX() + Server.board.getCols() * bomb.getY();
  Server.board.setElement(target_index,bomb);
  Server.sendAll(""String_Node_Str"",bomb_position);
  this.nb_bombs++;
  this.burstBomb(bomb);
}",0.9950149551345964
155377,"public void run(){
  try {
    Thread.sleep(fire_duration);
  }
 catch (  InterruptedException e) {
    System.out.println(e.getMessage());
  }
  for (  int i : add_fire) {
    int pos=fire.indexOf(i);
    if (pos != -1) {
      fire.remove(pos);
    }
  }
}","public void run(){
  try {
    Thread.sleep(fire_duration);
  }
 catch (  InterruptedException e) {
    System.out.println(e.getMessage());
  }
  for (  Integer i : add_fire) {
    fire.remove(i);
  }
}",0.7869565217391304
155378,"public void addFire(final List<Integer> add_fire){
  this.fire.addAll(add_fire);
  new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(fire_duration);
      }
 catch (      InterruptedException e) {
        System.out.println(e.getMessage());
      }
      for (      int i : add_fire) {
        int pos=fire.indexOf(i);
        if (pos != -1) {
          fire.remove(pos);
        }
      }
    }
  }
).start();
}","public void addFire(final List<Integer> add_fire){
  this.fire.addAll(add_fire);
  new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(fire_duration);
      }
 catch (      InterruptedException e) {
        System.out.println(e.getMessage());
      }
      for (      Integer i : add_fire) {
        fire.remove(i);
      }
    }
  }
).start();
}",0.8175182481751825
155379,"public void burstBomb(int x,int y){
  for (int i=1; i < this.getBoard().getCols() - 1; i++) {
    int index=i * this.getBoard().getRows() + y;
    this.getBoard().setElement(index,null);
  }
  for (int i=1; i < this.getBoard().getRows() - 1; i++) {
    int index=x * this.getBoard().getRows() + i;
    this.getBoard().setElement(index,null);
  }
}","public void burstBomb(int x,int y){
  for (int i=0; i < this.board.getCols(); i++) {
    int index=i + this.board.getCols() * y;
    Element element=this.board.getElements().get(index);
    if (element != null && element.isBreakable()) {
      this.board.setElement(index,null);
    }
  }
  for (int i=0; i < this.board.getRows(); i++) {
    int index=x + this.board.getCols() * i;
    Element element=this.board.getElements().get(index);
    if (element != null && element.isBreakable()) {
      this.board.setElement(index,null);
    }
  }
}",0.3730337078651685
155380,"public static Element factory(Map data) throws Exception {
  if (data == null) {
    return null;
  }
  Element element=null;
  if (data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    element=new Wall();
  }
 else   if (data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    Wall wall=new Wall();
    wall.setBreakable(false);
    element=wall;
  }
 else   if (data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    element=new Bomb();
  }
 else   if (data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    element=new Bonus();
  }
  if (element == null) {
    throw new Exception(""String_Node_Str"");
  }
  return element;
}","public static Element factory(Map data) throws Exception {
  if (data == null) {
    return null;
  }
  Element element=null;
  if (data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    element=new Wall();
  }
 else   if (data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    element=new Bomb();
  }
 else   if (data.get(""String_Node_Str"").equals(""String_Node_Str"")) {
    element=new Bonus();
  }
  if (data.containsKey(""String_Node_Str"")) {
    element.setBreakable((Boolean)data.get(""String_Node_Str""));
  }
  if (data.containsKey(""String_Node_Str"")) {
    element.setWalkable((Boolean)data.get(""String_Node_Str""));
  }
  if (element == null) {
    throw new Exception(""String_Node_Str"");
  }
  return element;
}",0.5695652173913044
155381,"public boolean isSquareWalkable(int i,int j){
  Element element=this.getElements().get(i * this.cols + j);
  if (element == null) {
    return true;
  }
  return element.isWalkable();
}","public boolean isSquareWalkable(int i,int j){
  Element element=this.getElements().get(j * this.cols + i);
  if (element == null) {
    return true;
  }
  return element.isWalkable();
}",0.9891891891891892
155382,"public void setData(List<Map> data){
  this.elements=new ArrayList<Element>();
  this.rows=data.size() / this.cols;
  int size=data.size();
  for (int i=0; i < size; i++) {
    try {
      if (i <= this.rows || i % this.rows == 0 || (i + 1) % this.rows == 0 || size - this.rows < i) {
        Map type=new HashMap();
        type.put(""String_Node_Str"",""String_Node_Str"");
        data.set(i,type);
      }
      this.getElements().add(Element.factory(data.get(i)));
    }
 catch (    Exception e) {
      System.out.println(e.getMessage());
    }
  }
  Dimension panel_size=new Dimension((3 * this.cols + this.rows) * this.unit_pixels,(this.cols + 2 * this.rows) * this.unit_pixels);
  this.setMinimumSize(panel_size);
  this.setPreferredSize(panel_size);
  Window.getInstance().pack();
  this.repaint();
}","public void setData(List<Map> data){
  this.elements=new ArrayList<Element>();
  this.rows=data.size() / this.cols;
  int size=data.size();
  for (int i=0; i < size; i++) {
    try {
      this.getElements().add(Element.factory(data.get(i)));
    }
 catch (    Exception e) {
      System.out.println(e.getMessage());
    }
  }
  Dimension panel_size=new Dimension((3 * this.cols + this.rows) * this.unit_pixels,(this.cols + 2 * this.rows) * this.unit_pixels);
  this.setMinimumSize(panel_size);
  this.setPreferredSize(panel_size);
  Window.getInstance().pack();
  this.repaint();
}",0.8394528437724982
155383,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  if (this.getElements() == null) {
    return;
  }
  Collection<Player> players=Game.getInstance().getPlayers().values();
  for (int j=0; j < this.rows; j++) {
    for (int i=this.cols - 1; i >= 0; i--) {
      try {
        Element element=this.getElements().get(i * this.cols + j);
        if (element == null) {
          continue;
        }
        int x=this.getPosX(i,j) * this.unit_pixels;
        int y=this.getPosY(i,j) * this.unit_pixels;
        g.drawImage(element.getImage(),x,y,this);
      }
 catch (      Exception e) {
        System.out.println(e.getMessage());
      }
    }
    for (    Player player : players) {
      if (player.getY() == j) {
        int x=this.getPosX(player.getX(),player.getY()) * this.unit_pixels;
        int y=this.getPosY(player.getX(),player.getY()) * this.unit_pixels;
        if (player.getMovePogression() != 1) {
          int old_x=this.getPosX(player.getOldX(),player.getOldY()) * this.unit_pixels;
          int old_y=this.getPosY(player.getOldX(),player.getOldY()) * this.unit_pixels;
          x=(old_x + (int)((x - old_x) * player.getMovePogression()));
          y=(old_y + (int)((y - old_y) * player.getMovePogression()));
        }
        g.drawImage(player.getImage(),x,y,this);
      }
    }
  }
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  if (this.getElements() == null) {
    return;
  }
  Collection<Player> players=Game.getInstance().getPlayers().values();
  for (int j=0; j < this.rows; j++) {
    for (int i=this.cols - 1; i >= 0; i--) {
      try {
        Element element=this.getElements().get(j * this.cols + i);
        if (element == null) {
          continue;
        }
        int x=this.getPosX(i,j) * this.unit_pixels;
        int y=this.getPosY(i,j) * this.unit_pixels;
        g.drawImage(element.getImage(),x,y,this);
      }
 catch (      Exception e) {
        System.out.println(e.getMessage());
      }
    }
    for (    Player player : players) {
      if (player.getY() == j) {
        int x=this.getPosX(player.getX(),player.getY()) * this.unit_pixels;
        int y=this.getPosY(player.getX(),player.getY()) * this.unit_pixels;
        if (player.getMovePogression() != 1) {
          int old_x=this.getPosX(player.getOldX(),player.getOldY()) * this.unit_pixels;
          int old_y=this.getPosY(player.getOldX(),player.getOldY()) * this.unit_pixels;
          x=(old_x + (int)((x - old_x) * player.getMovePogression()));
          y=(old_y + (int)((y - old_y) * player.getMovePogression()));
        }
        g.drawImage(player.getImage(),x,y,this);
      }
    }
  }
}",0.9985063480209112
155384,"private void execute(String command,Object obj){
  System.out.println(command + ""String_Node_Str"" + obj);
  try {
    if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setCols(this.convertToInt(obj));
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setData((List<Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().setPlayers((Map<String,Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().addPlayer(player_id,x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().delPlayer(this.convertToInt(obj));
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().getPlayer(player_id).reposition(x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().getPlayer(player_id).startMove(x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int x=this.convertToInt(((List)obj).get(0));
      int y=this.convertToInt(((List)obj).get(1));
      int target_index=x * Game.getInstance().getBoard().getRows() + y;
      Game.getInstance().getBoard().setElement(target_index,new Bomb());
      System.out.println(target_index);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int x=this.convertToInt(((List)obj).get(0));
      int y=this.convertToInt(((List)obj).get(1));
      Game.getInstance().burstBomb(x,y);
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
}","private void execute(String command,Object obj){
  System.out.println(command + ""String_Node_Str"" + obj);
  try {
    if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setCols(this.convertToInt(obj));
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setData((List<Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().setPlayers((Map<String,Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().addPlayer(player_id,x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().delPlayer(this.convertToInt(obj));
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().getPlayer(player_id).reposition(x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().getPlayer(player_id).startMove(x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int x=this.convertToInt(((List)obj).get(0));
      int y=this.convertToInt(((List)obj).get(1));
      Game.getInstance().dropBomb(x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int x=this.convertToInt(((List)obj).get(0));
      int y=this.convertToInt(((List)obj).get(1));
      Game.getInstance().burstBomb(x,y);
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
}",0.8594746238204539
155385,"public void generate(){
  this.elements=new ArrayList<Element>();
  int size=this.cols * this.rows;
  for (int i=0; i < size; i++) {
    Element element=null;
    if (Math.random() < this.probability_wall) {
      element=new Wall();
    }
    if (i <= this.rows || i % this.rows == 0 || (i + 1) % this.rows == 0 || size - this.rows < i) {
      Wall wall=new Wall();
      wall.setBreakable(false);
      element=wall;
    }
    this.elements.add(element);
  }
}","public void generate(){
  this.elements=new ArrayList<Element>();
  int size=this.cols * this.rows;
  for (int i=0; i < size; i++) {
    Element element=null;
    if (i <= this.rows || i % this.rows == 0 || (i + 1) % this.rows == 0 || size - this.rows < i) {
      Wall wall=new Wall();
      wall.setBreakable(false);
      element=wall;
    }
 else     if (Math.random() < this.probability_wall) {
      element=new Wall();
    }
    this.elements.add(element);
  }
}",0.5944206008583691
155386,"private void burstBomb(final Bomb bomb,final ServerThread thread){
  new Thread(new Runnable(){
    public void run(){
      try {
        ArrayList<Integer> bomb_position=new ArrayList<Integer>();
        bomb_position.add(bomb.getX());
        bomb_position.add(bomb.getY());
        Thread.sleep(bomb.getSleepingTime());
        HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
        for (int i=1; i < Server.board.getCols() - 1; i++) {
          int index=i * Server.board.getRows() + bomb.getY();
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            element.setActive(false);
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        for (int i=1; i < Server.board.getRows() - 1; i++) {
          int index=bomb.getX() * Server.board.getRows() + i;
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            element.setActive(false);
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        Server.sendAll(""String_Node_Str"",bomb_position);
        thread.nb_bombs--;
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
}","private void burstBomb(final Bomb bomb,final ServerThread thread){
  new Thread(new Runnable(){
    public void run(){
      try {
        ArrayList<Integer> bomb_position=new ArrayList<Integer>();
        bomb_position.add(bomb.getX());
        bomb_position.add(bomb.getY());
        Thread.sleep(bomb.getSleepingTime());
        HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
        for (int i=1; i < Server.board.getCols() - 1; i++) {
          int index=i + Server.board.getCols() * bomb.getY();
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            element.setActive(false);
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        for (int i=1; i < Server.board.getRows() - 1; i++) {
          int index=bomb.getX() + Server.board.getCols() * i;
          Element element=Server.board.getElements().get(index);
          if (element != null) {
            element.setActive(false);
          }
          for (          ServerThread thread : players_threads.values()) {
            if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
              Server.killPlayer(thread.getClientId());
            }
          }
        }
        Server.sendAll(""String_Node_Str"",bomb_position);
        thread.nb_bombs--;
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
).start();
}",0.9695307739183424
155387,"private void move(int diff_x,int diff_y){
  Boolean moving_allowed=false;
  if (Math.abs(diff_x) + Math.abs(diff_y) == 1) {
    moving_allowed=true;
  }
  int target_x=this.position_x + diff_x;
  int target_y=this.position_y + diff_y;
  int target_index=target_x * Server.board.getRows() + target_y;
  if (Server.board.getElements().get(target_index) instanceof Wall || Server.board.getElements().get(target_index) instanceof Bomb) {
    moving_allowed=false;
  }
  if (moving_allowed) {
    this.position_x+=diff_x;
    this.position_y+=diff_y;
    ArrayList<Integer> move=new ArrayList<Integer>();
    move.add(this.client_id);
    move.add(this.position_x);
    move.add(this.position_y);
    ArrayList<Integer> exceptions=new ArrayList<Integer>();
    exceptions.add(this.client_id);
    Server.sendAllBut(""String_Node_Str"",move,exceptions);
  }
 else {
    ArrayList<Integer> position=new ArrayList<Integer>();
    position.add(this.client_id);
    position.add(this.position_x);
    position.add(this.position_y);
    this.send(""String_Node_Str"",position);
  }
}","private void move(int diff_x,int diff_y){
  Boolean moving_allowed=false;
  if (Math.abs(diff_x) + Math.abs(diff_y) == 1) {
    moving_allowed=true;
  }
  int target_x=this.position_x + diff_x;
  int target_y=this.position_y + diff_y;
  int target_index=target_x + Server.board.getCols() * target_y;
  if (Server.board.getElements().get(target_index) instanceof Wall || Server.board.getElements().get(target_index) instanceof Bomb) {
    moving_allowed=false;
  }
  if (moving_allowed) {
    this.position_x+=diff_x;
    this.position_y+=diff_y;
    ArrayList<Integer> move=new ArrayList<Integer>();
    move.add(this.client_id);
    move.add(this.position_x);
    move.add(this.position_y);
    ArrayList<Integer> exceptions=new ArrayList<Integer>();
    exceptions.add(this.client_id);
    Server.sendAllBut(""String_Node_Str"",move,exceptions);
  }
 else {
    ArrayList<Integer> position=new ArrayList<Integer>();
    position.add(this.client_id);
    position.add(this.position_x);
    position.add(this.position_y);
    this.send(""String_Node_Str"",position);
  }
}",0.9765917602996256
155388,"public void setRandomPosition(){
  double nb_cases=Server.board.getCols() * Server.board.getRows();
  int i, x, y;
  Map<Integer,Integer> players_positions=Server.getPlayersPositions();
  do {
    i=(int)Math.round(Math.random() * nb_cases);
    x=(int)Math.ceil(i / Server.board.getRows());
    y=i % Server.board.getRows();
  }
 while (Server.board.getElements().get(i) != null || players_positions.containsKey(x) && players_positions.get(x) == y);
  this.position_x=x;
  this.position_y=y;
}","public void setRandomPosition(){
  double nb_cases=Server.board.getCols() * Server.board.getRows();
  int i, x, y;
  Map<Integer,Integer> players_positions=Server.getPlayersPositions();
  do {
    i=(int)Math.round(Math.random() * nb_cases);
    x=i % Server.board.getCols();
    y=(int)Math.ceil(i / Server.board.getCols());
  }
 while (Server.board.getElements().get(i) != null || players_positions.containsKey(x) && players_positions.get(x) == y);
  this.position_x=x;
  this.position_y=y;
}",0.9190283400809716
155389,"public void run(){
  try {
    ArrayList<Integer> bomb_position=new ArrayList<Integer>();
    bomb_position.add(bomb.getX());
    bomb_position.add(bomb.getY());
    Thread.sleep(bomb.getSleepingTime());
    HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
    for (int i=1; i < Server.board.getCols() - 1; i++) {
      int index=i * Server.board.getRows() + bomb.getY();
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        element.setActive(false);
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    for (int i=1; i < Server.board.getRows() - 1; i++) {
      int index=bomb.getX() * Server.board.getRows() + i;
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        element.setActive(false);
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    Server.sendAll(""String_Node_Str"",bomb_position);
    thread.nb_bombs--;
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}","public void run(){
  try {
    ArrayList<Integer> bomb_position=new ArrayList<Integer>();
    bomb_position.add(bomb.getX());
    bomb_position.add(bomb.getY());
    Thread.sleep(bomb.getSleepingTime());
    HashMap<Integer,ServerThread> players_threads=Server.getPlayersThreads();
    for (int i=1; i < Server.board.getCols() - 1; i++) {
      int index=i + Server.board.getCols() * bomb.getY();
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        element.setActive(false);
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == i && thread.getPositionY() == bomb.getY()) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    for (int i=1; i < Server.board.getRows() - 1; i++) {
      int index=bomb.getX() + Server.board.getCols() * i;
      Element element=Server.board.getElements().get(index);
      if (element != null) {
        element.setActive(false);
      }
      for (      ServerThread thread : players_threads.values()) {
        if (thread.getPostionX() == bomb.getX() && thread.getPositionY() == i) {
          Server.killPlayer(thread.getClientId());
        }
      }
    }
    Server.sendAll(""String_Node_Str"",bomb_position);
    thread.nb_bombs--;
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}",0.9634502923976608
155390,"private void dropBomb(){
  Bomb bomb=new Bomb();
  bomb.setX(this.position_x);
  bomb.setY(this.position_y);
  bomb.setSleepingTime(this.bomb_sleeping_time);
  ArrayList<Integer> bomb_position=new ArrayList<Integer>();
  bomb_position.add(bomb.getX());
  bomb_position.add(bomb.getY());
  int target_index=bomb.getX() * Server.board.getRows() + bomb.getY();
  Server.board.setElement(target_index,bomb);
  Server.sendAll(""String_Node_Str"",bomb_position);
  this.nb_bombs++;
  this.burstBomb(bomb,this);
}","private void dropBomb(){
  Bomb bomb=new Bomb();
  bomb.setX(this.position_x);
  bomb.setY(this.position_y);
  bomb.setSleepingTime(this.bomb_sleeping_time);
  ArrayList<Integer> bomb_position=new ArrayList<Integer>();
  bomb_position.add(bomb.getX());
  bomb_position.add(bomb.getY());
  int target_index=bomb.getX() + Server.board.getCols() * bomb.getY();
  Server.board.setElement(target_index,bomb);
  Server.sendAll(""String_Node_Str"",bomb_position);
  this.nb_bombs++;
  this.burstBomb(bomb,this);
}",0.9503968253968254
155391,"public static Map export(Element element) throws Exception {
  if (element == null) {
    return null;
  }
  Map data=new HashMap();
  if (element instanceof Wall && element.active) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (element instanceof Bomb) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (data.isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
  return data;
}","public static Map export(Element element) throws Exception {
  if (element == null) {
    return null;
  }
  Map data=new HashMap();
  if (element instanceof Wall && element.active) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (element instanceof Bomb) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
  data.put(""String_Node_Str"",element.isBreakable());
  data.put(""String_Node_Str"",element.isWalkable());
  if (data.isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
  return data;
}",0.8891235480464625
155392,"private void move(int diff_x,int diff_y){
  Boolean moving_allowed=false;
  if (Math.abs(diff_x) + Math.abs(diff_y) == 1) {
    moving_allowed=true;
  }
  int target_x=this.position_x + diff_x;
  int target_y=this.position_y + diff_y;
  int target_index=target_x + Server.board.getCols() * target_y;
  Element target_element=Server.board.getElements().get(target_index);
  if (target_element != null && !(target_element.isActive() && target_element.isWalkable())) {
    moving_allowed=false;
  }
  if (moving_allowed) {
    this.position_x+=diff_x;
    this.position_y+=diff_y;
    ArrayList<Integer> move=new ArrayList<Integer>();
    move.add(this.client_id);
    move.add(this.position_x);
    move.add(this.position_y);
    ArrayList<Integer> exceptions=new ArrayList<Integer>();
    exceptions.add(this.client_id);
    Server.sendAllBut(""String_Node_Str"",move,exceptions);
  }
 else {
    ArrayList<Integer> position=new ArrayList<Integer>();
    position.add(this.client_id);
    position.add(this.position_x);
    position.add(this.position_y);
    this.send(""String_Node_Str"",position);
  }
}","private void move(int diff_x,int diff_y){
  Boolean moving_allowed=false;
  if (Math.abs(diff_x) + Math.abs(diff_y) == 1) {
    moving_allowed=true;
  }
  int target_x=this.position_x + diff_x;
  int target_y=this.position_y + diff_y;
  int target_index=target_x + Server.board.getCols() * target_y;
  Element target_element=Server.board.getElements().get(target_index);
  if (target_element != null && target_element.isActive() && !target_element.isWalkable()) {
    moving_allowed=false;
  }
  if (moving_allowed) {
    this.position_x+=diff_x;
    this.position_y+=diff_y;
    ArrayList<Integer> move=new ArrayList<Integer>();
    move.add(this.client_id);
    move.add(this.position_x);
    move.add(this.position_y);
    ArrayList<Integer> exceptions=new ArrayList<Integer>();
    exceptions.add(this.client_id);
    Server.sendAllBut(""String_Node_Str"",move,exceptions);
  }
 else {
    ArrayList<Integer> position=new ArrayList<Integer>();
    position.add(this.client_id);
    position.add(this.position_x);
    position.add(this.position_y);
    this.send(""String_Node_Str"",position);
  }
}",0.9981801637852592
155393,"public static Map export(Element element) throws Exception {
  if (element == null) {
    return null;
  }
  Map data=new HashMap();
  if (element instanceof Wall && element.active) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (element instanceof Bomb) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
  data.put(""String_Node_Str"",element.isBreakable());
  data.put(""String_Node_Str"",element.isWalkable());
  if (data.isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
  return data;
}","public static Map export(Element element) throws Exception {
  if (element == null || !element.active) {
    return null;
  }
  Map data=new HashMap();
  if (element instanceof Wall) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
 else   if (element instanceof Bomb) {
    data.put(""String_Node_Str"",""String_Node_Str"");
  }
  data.put(""String_Node_Str"",element.isBreakable());
  data.put(""String_Node_Str"",element.isWalkable());
  if (data.isEmpty()) {
    throw new Exception(""String_Node_Str"");
  }
  return data;
}",0.9648622981956316
155394,"public void run(){
  try {
    Thread.sleep(fire_duration);
  }
 catch (  InterruptedException e) {
    System.out.println(e.getMessage());
  }
  for (  int i : add_fire) {
    int pos=fire.indexOf(i);
    if (pos != -1) {
      fire.remove(pos);
    }
  }
}","public void run(){
  try {
    Thread.sleep(fire_duration);
  }
 catch (  InterruptedException e) {
    System.out.println(e.getMessage());
  }
  for (  Integer i : add_fire) {
    fire.remove(i);
  }
}",0.7869565217391304
155395,"public void addFire(final List<Integer> add_fire){
  this.fire.addAll(add_fire);
  new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(fire_duration);
      }
 catch (      InterruptedException e) {
        System.out.println(e.getMessage());
      }
      for (      int i : add_fire) {
        int pos=fire.indexOf(i);
        if (pos != -1) {
          fire.remove(pos);
        }
      }
    }
  }
).start();
}","public void addFire(final List<Integer> add_fire){
  this.fire.addAll(add_fire);
  new Thread(new Runnable(){
    public void run(){
      try {
        Thread.sleep(fire_duration);
      }
 catch (      InterruptedException e) {
        System.out.println(e.getMessage());
      }
      for (      Integer i : add_fire) {
        fire.remove(i);
      }
    }
  }
).start();
}",0.8175182481751825
155396,"public void setPlayers(Map<Integer,Map> data) throws Exception {
  this.players=new HashMap();
  for (  Map.Entry<Integer,Map> player_data_entry : data.entrySet()) {
    int id=player_data_entry.getKey();
    Map player_data=player_data_entry.getValue();
    Player player=new Player((Integer)player_data.get(""String_Node_Str""),(Integer)player_data.get(""String_Node_Str""));
    this.players.put(id,player);
    if (player_data.containsKey(""String_Node_Str"") && (Boolean)player_data.get(""String_Node_Str"")) {
      this.player_id=id;
    }
  }
  this.started=true;
}","public void setPlayers(Map<String,Map> data) throws Exception {
  this.players=new HashMap();
  for (  Map.Entry<String,Map> player_data_entry : data.entrySet()) {
    int id=Integer.parseInt(player_data_entry.getKey());
    Map player_data=player_data_entry.getValue();
    Player player=new Player(Client.getInstance().convertToInt(player_data.get(""String_Node_Str"")),Client.getInstance().convertToInt(player_data.get(""String_Node_Str"")));
    this.players.put(id,player);
    if (player_data.containsKey(""String_Node_Str"") && (Boolean)player_data.get(""String_Node_Str"")) {
      this.player_id=id;
    }
  }
  this.started=true;
}",0.8964941569282137
155397,"private int convertToInt(Object n) throws Exception {
  if (n instanceof Integer) {
    return (Integer)n;
  }
 else   if (n instanceof Long) {
    return ((Long)n).intValue();
  }
  throw new Exception(n + ""String_Node_Str"");
}","public int convertToInt(Object n) throws Exception {
  if (n instanceof Integer) {
    return (Integer)n;
  }
 else   if (n instanceof Long) {
    return ((Long)n).intValue();
  }
  throw new Exception(n + ""String_Node_Str"");
}",0.9758241758241758
155398,"private void execute(String command,Object obj){
  System.out.println(command + ""String_Node_Str"" + obj);
  try {
    if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setCols(this.convertToInt(obj));
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setData((List<Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().setPlayers((Map<Integer,Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().addPlayer(player_id,x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().delPlayer((Integer)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int x=this.convertToInt(((List)obj).get(0));
      int y=this.convertToInt((Integer)((List)obj).get(1));
      Game.getInstance().getCurrentPlayer().reposition(x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().getPlayer(player_id).startMove(x,y);
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
}","private void execute(String command,Object obj){
  System.out.println(command + ""String_Node_Str"" + obj);
  try {
    if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setCols(this.convertToInt(obj));
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().getBoard().setData((List<Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().setPlayers((Map<String,Map>)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().addPlayer(player_id,x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      Game.getInstance().delPlayer((Integer)obj);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int x=this.convertToInt(((List)obj).get(0));
      int y=this.convertToInt((Integer)((List)obj).get(1));
      Game.getInstance().getCurrentPlayer().reposition(x,y);
    }
 else     if (command.equals(""String_Node_Str"")) {
      int player_id=this.convertToInt(((List)obj).get(0));
      int x=this.convertToInt(((List)obj).get(1));
      int y=this.convertToInt(((List)obj).get(2));
      Game.getInstance().getPlayer(player_id).startMove(x,y);
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
}",0.995446584938704
155399,"private void move(ArrayList<Integer> move_request){
  ArrayList<Integer> new_position=new ArrayList<Integer>();
  Map<Integer,ArrayList<Integer>> server_response=new HashMap<Integer,ArrayList<Integer>>();
  Boolean moving_allowed=false;
  if (Math.abs(this.position_x - move_request.get(0)) == 1) {
    moving_allowed=true;
    this.position_x+=move_request.get(0);
  }
 else   if (Math.abs(this.position_y - move_request.get(1)) == 1 && this.position_x == move_request.get(0)) {
    moving_allowed=true;
    this.position_y+=move_request.get(1);
  }
  new_position.add(this.position_x);
  new_position.add(this.position_y);
  server_response.put(this.client_id,new_position);
  if (moving_allowed) {
    Server.sendAll(""String_Node_Str"",server_response);
  }
 else {
    this.send(""String_Node_Str"",server_response);
  }
}","private void move(int diff_x,int diff_y){
  Boolean moving_allowed=false;
  if (Math.abs(diff_x) + Math.abs(diff_y) == 1) {
    moving_allowed=true;
  }
  if (moving_allowed) {
    this.position_x+=diff_x;
    this.position_y+=diff_y;
    ArrayList<Integer> move=new ArrayList<Integer>();
    move.add(this.client_id);
    move.add(this.position_x);
    move.add(this.position_y);
    ArrayList<Integer> exceptions=new ArrayList<Integer>();
    exceptions.add(this.client_id);
    Server.sendAllBut(""String_Node_Str"",move,exceptions);
  }
 else {
    ArrayList<Integer> position=new ArrayList<Integer>();
    position.add(this.position_x);
    position.add(this.position_y);
    this.send(""String_Node_Str"",position);
  }
}",0.1901681759379042
155400,"private void execute(String command,Object obj) throws Exception {
  System.out.println(command + ""String_Node_Str"" + obj);
  try {
    if (command.equals(""String_Node_Str"")) {
      if (obj instanceof ArrayList) {
        ArrayList<Integer> move_request=(ArrayList)obj;
        if (move_request.size() == 2) {
          this.move(move_request);
        }
      }
    }
 else     if (command.equals(""String_Node_Str"")) {
      if (this.nb_bombs < this.bombs_allowed) {
        this.dropBomb();
      }
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
}","private void execute(String command,Object obj) throws Exception {
  System.out.println(command + ""String_Node_Str"" + obj);
  try {
    if (command.equals(""String_Node_Str"")) {
      if (obj instanceof ArrayList && ((List)obj).size() == 2) {
        int diff_x=this.convertToInt(((List)obj).get(0));
        int diff_y=this.convertToInt(((List)obj).get(1));
        this.move(diff_x,diff_y);
      }
    }
 else     if (command.equals(""String_Node_Str"")) {
      if (this.nb_bombs < this.bombs_allowed) {
        this.dropBomb();
      }
    }
  }
 catch (  Exception e) {
    System.out.println(e.getMessage());
  }
}",0.7033333333333334
155401,"public void start() throws IOException, ScriptException, SAXException {
  context.launchInterpreter();
}","public void start() throws IOException, ScriptException, SAXException {
  System.err.println(""String_Node_Str"");
  context.launchInterpreter();
}",0.8353413654618473
155402,"public void push(String dtmf) throws ScriptException, IOException, SAXException {
  context.push(""String_Node_Str"" + dtmf + ""String_Node_Str"");
  ;
}","public void push(String dtmf) throws ScriptException, IOException, SAXException {
  context.push(""String_Node_Str"" + dtmf.replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
}",0.847953216374269
155403,"protected final void updateIONApplication(final String domain,final Application application){
  final ClientResponse.Status status=createBuilder(domain).type(MediaType.APPLICATION_JSON_TYPE).put(ClientResponse.class,application).getClientResponseStatus();
  if (!(status == ClientResponse.Status.OK || status == ClientResponse.Status.CREATED)) {
    throw new DeployableException(""String_Node_Str"" + domain + ""String_Node_Str""+ status.getStatusCode()+ ""String_Node_Str""+ status.getReasonPhrase()+ ""String_Node_Str"");
  }
}","protected final void updateIONApplication(final String domain,final Application application){
  final ClientResponse response=createBuilder(domain).type(MediaType.APPLICATION_JSON_TYPE).put(ClientResponse.class,application);
  final ClientResponse.Status status=response.getClientResponseStatus();
  if (!(status == ClientResponse.Status.OK || status == ClientResponse.Status.CREATED)) {
    throw new DeployableException(""String_Node_Str"" + domain + ""String_Node_Str""+ status.getStatusCode()+ ""String_Node_Str""+ status.getReasonPhrase()+ ""String_Node_Str""+ extractFailureReason(response));
  }
}",0.9087656529516994
155404,"public double getTotalAmount(){
  return item.getPrice() * quantity;
}","public float getTotalAmount(){
  return DecimalRounder.roundOff(item.getPrice() * quantity,2);
}",0.7831325301204819
155405,"public float getAmount(){
  double amount=item.getPrice() * quantity;
  return Float.parseFloat(Double.toString(amount));
}","public float getAmount(){
  double amount=item.getPrice() * quantity;
  return DecimalRounder.roundOff(Float.parseFloat(Double.toString(amount)),2);
}",0.9010989010989012
155406,"public Object[] toArrayObjects(){
  Object[] objs=new Object[6];
  objs[0]=quantity + ""String_Node_Str"";
  objs[1]=item.getUnit().getName();
  objs[2]=item.getDescription();
  objs[3]=item.getStockNumber();
  objs[4]=item.getPrice() + ""String_Node_Str"";
  objs[5]=getCost() + ""String_Node_Str"";
  return objs;
}","public Object[] toArrayObjects(){
  Object[] objs=new Object[6];
  objs[0]=quantity + ""String_Node_Str"";
  objs[1]=item.getUnit().getName();
  objs[2]=item.getDescription();
  objs[3]=item.getStockNumber();
  objs[4]=getEstimatedUnitCost() + ""String_Node_Str"";
  objs[5]=getEstimatedCost() + ""String_Node_Str"";
  return objs;
}",0.9341692789968652
155407,"public void addLine(Item item,String q1,String q2,String q3,String q4){
  int quantity1=0;
  int quantity2=0;
  int quantity3=0;
  int quantity4=0;
  try {
    quantity1=Integer.parseInt(q1);
  }
 catch (  Exception e) {
    quantity1=-1;
  }
  try {
    quantity2=Integer.parseInt(q2);
  }
 catch (  Exception e) {
    quantity2=-1;
  }
  try {
    quantity3=Integer.parseInt(q3);
  }
 catch (  Exception e) {
    quantity3=-1;
  }
  try {
    quantity4=Integer.parseInt(q4);
  }
 catch (  Exception e) {
    quantity4=-1;
  }
  addLine(item,quantity1,quantity2,quantity3,quantity4);
}","public void addLine(Item item,String q1,String q2,String q3,String q4){
  int quantity1=0;
  int quantity2=0;
  int quantity3=0;
  int quantity4=0;
  quantity1=checkNum(q1);
  quantity2=checkNum(q2);
  quantity3=checkNum(q3);
  quantity4=checkNum(q4);
  addLine(item,quantity1,quantity2,quantity3,quantity4);
}",0.3370535714285714
155408,"public void addLine(Item item,String quantityReq,String quantityIssued,String remarks){
  int req=0;
  int issued=0;
  try {
    req=Integer.parseInt(quantityReq);
    issued=Integer.parseInt(quantityIssued);
  }
 catch (  Exception e) {
  }
  addLine(item,req,issued,remarks);
}","public void addLine(Item item,String quantityReq,String quantityIssued,String remarks){
  int req=0;
  int issued=0;
  try {
    req=checkNum(quantityReq);
    issued=checkNum(quantityIssued);
  }
 catch (  Exception e) {
  }
  addLine(item,req,issued,remarks);
}",0.911439114391144
155409,"@Override public void beforeNewForm(HttpServletRequest request) throws TransactionException {
  this.request=request;
  Object ob=request.getSession().getAttribute(""String_Node_Str"");
  Object ob2=request.getAttribute(""String_Node_Str"");
  if (!(ob instanceof APP || ob2 instanceof APP)) {
    String retain=(String)request.getParameter(""String_Node_Str"");
    if (retain == null) {
      System.out.println(""String_Node_Str"");
      request.getSession().removeAttribute(""String_Node_Str"");
      request.removeAttribute(""String_Node_Str"");
    }
  }
  request.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  request.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}","@Override public void beforeNewForm(HttpServletRequest request) throws TransactionException {
  this.request=request;
  Object ob=request.getSession().getAttribute(""String_Node_Str"");
  Object ob2=request.getAttribute(""String_Node_Str"");
  if (!(ob instanceof APP || ob2 instanceof APP)) {
    String retain=(String)request.getParameter(""String_Node_Str"");
    if (retain == null) {
      request.getSession().removeAttribute(""String_Node_Str"");
      request.removeAttribute(""String_Node_Str"");
    }
  }
  request.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  request.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}",0.9660377358490566
155410,"@Override public void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  List<Supplier> suppliers=new ArrayList<Supplier>();
  String searchField=request.getParameter(""String_Node_Str"");
  SupplierSearcher searcher=new SupplierSearcher();
  if (Validator.validField(searchField))   suppliers=searcher.search(searchField);
 else   try {
    suppliers=sManager.getAllSuppliers();
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  request.setAttribute(""String_Node_Str"",suppliers);
  if (Validator.validField(searchField))   request.setAttribute(""String_Node_Str"",searchField);
  RequestDispatcher view=request.getRequestDispatcher(SupplierServlet.SEARCH_SUPPLIERS);
  view.forward(request,response);
}","@Override public void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  List<Supplier> suppliers=new ArrayList<Supplier>();
  String searchField=request.getParameter(""String_Node_Str"");
  SupplierSearcher searcher=new SupplierSearcher();
  if (Validator.validField(searchField)) {
    List<Supplier> s=searcher.search(searchField);
    List<Supplier> u=new ArrayList<Supplier>();
    for (    Supplier su : s) {
      if (!u.contains(su))       u.add(su);
    }
    suppliers=u;
  }
 else   try {
    suppliers=sManager.getAllSuppliers();
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  request.setAttribute(""String_Node_Str"",suppliers);
  if (Validator.validField(searchField))   request.setAttribute(""String_Node_Str"",searchField);
  RequestDispatcher view=request.getRequestDispatcher(SupplierServlet.SEARCH_SUPPLIERS);
  view.forward(request,response);
}",0.8936915887850467
155411,"@Override public Form createForm(HttpServletRequest request,ApplicationContext appContext) throws TransactionException {
  ItemManager im=appContext.getItemManager();
  DivisionOfficeManager dom=appContext.getDivisionOfficeManager();
  PersonManager pm=appContext.getPersonManager();
  PR pr=new PR();
  String divisionOfficeId=request.getParameter(""String_Node_Str"");
  if (divisionOfficeId != null)   pr.setDivisionOffice(dom.getDivisionOffice(Integer.parseInt(divisionOfficeId)));
  pr.setPrNumber(request.getParameter(""String_Node_Str""));
  pr.setPrDate(request.getParameter(""String_Node_Str""));
  pr.setSaiNumber(request.getParameter(""String_Node_Str""));
  pr.setSaiDate(request.getParameter(""String_Node_Str""));
  pr.setAlobsNumber(request.getParameter(""String_Node_Str""));
  pr.setAlobsDate(request.getParameter(""String_Node_Str""));
  pr.setPurpose(request.getParameter(""String_Node_Str""));
  String reqId=request.getParameter(""String_Node_Str"");
  if (reqId != null)   pr.setRequestedBy(pm.getEmployee(Integer.parseInt(reqId)));
  String aprid=request.getParameter(""String_Node_Str"");
  if (aprid != null)   pr.setApprovedBy(pm.getEmployee(Integer.parseInt(aprid)));
  String[] quantities=request.getParameterValues(""String_Node_Str"");
  String[] estUnitCost=request.getParameterValues(""String_Node_Str"");
  String[] items=request.getParameterValues(""String_Node_Str"");
  if (items != null)   for (int i=0; i < items.length; i++) {
    String q=null;
    String eUC=null;
    if (quantities != null)     q=quantities[i];
    if (estUnitCost != null)     eUC=estUnitCost[i];
    if (q == null)     q=""String_Node_Str"";
    if (eUC == null || eUC == ""String_Node_Str"")     eUC=""String_Node_Str"";
    PRLine line=new PRLine();
    try {
      line.setQuantity(Integer.parseInt(q));
    }
 catch (    Exception e) {
      line.setQuantity(0);
    }
    line.setItem(im.getItem(Integer.parseInt(items[i])));
    try {
      line.setEstimatedUnitCost(Long.parseLong(eUC));
    }
 catch (    Exception e) {
      line.setEstimatedUnitCost(-1);
    }
    pr.addLine(line);
  }
  return pr;
}","@Override public Form createForm(HttpServletRequest request,ApplicationContext appContext) throws TransactionException {
  ItemManager im=appContext.getItemManager();
  DivisionOfficeManager dom=appContext.getDivisionOfficeManager();
  PersonManager pm=appContext.getPersonManager();
  PR pr=new PR();
  String divisionOfficeId=request.getParameter(""String_Node_Str"");
  if (divisionOfficeId != null)   pr.setDivisionOffice(dom.getDivisionOffice(Integer.parseInt(divisionOfficeId)));
  pr.setPrNumber(request.getParameter(""String_Node_Str""));
  pr.setPrDate(request.getParameter(""String_Node_Str""));
  pr.setSaiNumber(request.getParameter(""String_Node_Str""));
  pr.setSaiDate(request.getParameter(""String_Node_Str""));
  pr.setAlobsNumber(request.getParameter(""String_Node_Str""));
  pr.setAlobsDate(request.getParameter(""String_Node_Str""));
  pr.setPurpose(request.getParameter(""String_Node_Str""));
  String reqId=request.getParameter(""String_Node_Str"");
  if (reqId != null)   pr.setRequestedBy(pm.getEmployee(Integer.parseInt(reqId)));
  String aprid=request.getParameter(""String_Node_Str"");
  if (aprid != null)   pr.setApprovedBy(pm.getEmployee(Integer.parseInt(aprid)));
  String[] quantities=request.getParameterValues(""String_Node_Str"");
  String[] estUnitCost=request.getParameterValues(""String_Node_Str"");
  String[] items=request.getParameterValues(""String_Node_Str"");
  if (items != null)   for (int i=0; i < items.length; i++) {
    String q=null;
    String eUC=null;
    if (quantities != null)     q=quantities[i];
    if (estUnitCost != null)     eUC=estUnitCost[i];
    if (q == null)     q=""String_Node_Str"";
    if (eUC == null || eUC == ""String_Node_Str"")     eUC=""String_Node_Str"";
    PRLine line=new PRLine();
    line.setQuantity(checkNum(q));
    line.setItem(im.getItem(Integer.parseInt(items[i])));
    line.setEstimatedUnitCost(checkNum2(eUC));
    pr.addLine(line);
  }
  return pr;
}",0.8778416187859106
155412,"@Override public void beforeNewForm(HttpServletRequest request) throws TransactionException {
  this.request=request;
  Object ob=request.getSession().getAttribute(""String_Node_Str"");
  Object ob2=request.getAttribute(""String_Node_Str"");
  if (!(ob instanceof APP || ob2 instanceof APP)) {
    request.getSession().removeAttribute(""String_Node_Str"");
    request.removeAttribute(""String_Node_Str"");
  }
  request.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  request.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}","@Override public void beforeNewForm(HttpServletRequest request) throws TransactionException {
  this.request=request;
  Object ob=request.getSession().getAttribute(""String_Node_Str"");
  Object ob2=request.getAttribute(""String_Node_Str"");
  if (!(ob instanceof APP || ob2 instanceof APP)) {
    String retain=(String)request.getParameter(""String_Node_Str"");
    if (retain == null) {
      System.out.println(""String_Node_Str"");
      request.getSession().removeAttribute(""String_Node_Str"");
      request.removeAttribute(""String_Node_Str"");
    }
  }
  request.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  request.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}",0.8788870703764321
155413,"@Override public void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  try {
    if (request.getParameter(""String_Node_Str"") == null) {
      Object ob=request.getSession().getAttribute(""String_Node_Str"");
      Object ob2=request.getAttribute(""String_Node_Str"");
      if (!(ob instanceof PR && ob2 instanceof PR)) {
        request.getSession().removeAttribute(""String_Node_Str"");
        request.removeAttribute(""String_Node_Str"");
      }
    }
    beforeForward(request);
    request.getRequestDispatcher(getNewFormJsp()).forward(request,response);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
}","@Override public void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  try {
    if (request.getParameter(""String_Node_Str"") == null) {
      Object ob=request.getSession().getAttribute(""String_Node_Str"");
      Object ob2=request.getAttribute(""String_Node_Str"");
      if (!(ob instanceof PR && ob2 instanceof PR)) {
        String retain=(String)request.getParameter(""String_Node_Str"");
        if (retain == null) {
          request.getSession().removeAttribute(""String_Node_Str"");
          request.removeAttribute(""String_Node_Str"");
        }
      }
    }
    beforeForward(request);
    request.getRequestDispatcher(getNewFormJsp()).forward(request,response);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
}",0.8909952606635071
155414,"@Override public void beforeNewForm(HttpServletRequest req) throws TransactionException {
  this.req=req;
  Object ob=req.getSession().getAttribute(""String_Node_Str"");
  Object ob2=req.getAttribute(""String_Node_Str"");
  if (!(ob instanceof IE || ob2 instanceof IE)) {
    req.getSession().removeAttribute(""String_Node_Str"");
    req.removeAttribute(""String_Node_Str"");
  }
  req.setAttribute(""String_Node_Str"",pm.getAllEmployee());
  req.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  req.setAttribute(""String_Node_Str"",dom.getAllBuildings());
  req.setAttribute(""String_Node_Str"",pom.getAllModeOfProcurement());
}","@Override public void beforeNewForm(HttpServletRequest req) throws TransactionException {
  this.req=req;
  Object ob=req.getSession().getAttribute(""String_Node_Str"");
  Object ob2=req.getAttribute(""String_Node_Str"");
  if (!(ob instanceof IE || ob2 instanceof IE)) {
    String retain=(String)req.getParameter(""String_Node_Str"");
    if (retain == null) {
      req.getSession().removeAttribute(""String_Node_Str"");
      req.removeAttribute(""String_Node_Str"");
    }
  }
  req.setAttribute(""String_Node_Str"",pm.getAllEmployee());
  req.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  req.setAttribute(""String_Node_Str"",dom.getAllBuildings());
  req.setAttribute(""String_Node_Str"",pom.getAllModeOfProcurement());
}",0.9270449521002212
155415,"@Override public void beforeNewForm(HttpServletRequest req) throws TransactionException {
  this.req=req;
  Object ob=req.getSession().getAttribute(""String_Node_Str"");
  if (!(ob instanceof PO))   req.getSession().removeAttribute(""String_Node_Str"");
  Object formReq=req.getAttribute(""String_Node_Str"");
  if (!(formReq instanceof PO))   req.removeAttribute(""String_Node_Str"");
  req.setAttribute(""String_Node_Str"",sm.getAllSuppliers());
  req.setAttribute(""String_Node_Str"",pom.getAllModeOfProcurement());
  req.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  req.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}","@Override public void beforeNewForm(HttpServletRequest req) throws TransactionException {
  this.req=req;
  Object ob=req.getSession().getAttribute(""String_Node_Str"");
  Object formReq=req.getAttribute(""String_Node_Str"");
  if (!(ob instanceof PO)) {
    String retain=(String)req.getParameter(""String_Node_Str"");
    if (retain == null) {
      req.getSession().removeAttribute(""String_Node_Str"");
    }
  }
  if (!(formReq instanceof PO)) {
    String retain=(String)req.getParameter(""String_Node_Str"");
    if (retain == null) {
      req.removeAttribute(""String_Node_Str"");
    }
  }
  req.setAttribute(""String_Node_Str"",sm.getAllSuppliers());
  req.setAttribute(""String_Node_Str"",pom.getAllModeOfProcurement());
  req.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  req.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}",0.7886178861788617
155416,"@Override public void beforeNewForm(HttpServletRequest request) throws TransactionException {
  this.request=request;
  Object ob=request.getSession().getAttribute(""String_Node_Str"");
  Object ob2=request.getAttribute(""String_Node_Str"");
  if (!(ob instanceof PR || ob2 instanceof PR)) {
    request.getSession().setAttribute(""String_Node_Str"",new PR());
    request.setAttribute(""String_Node_Str"",new PR());
  }
  request.setAttribute(""String_Node_Str"",im.getAllItems());
  request.setAttribute(""String_Node_Str"",pm.getAllEmployee());
  request.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
}","@Override public void beforeNewForm(HttpServletRequest request) throws TransactionException {
  this.request=request;
  Object ob=request.getSession().getAttribute(""String_Node_Str"");
  Object ob2=request.getAttribute(""String_Node_Str"");
  if (!(ob instanceof PR || ob2 instanceof PR)) {
    String retain=(String)request.getParameter(""String_Node_Str"");
    if (retain == null) {
      request.getSession().setAttribute(""String_Node_Str"",new PR());
      request.setAttribute(""String_Node_Str"",new PR());
    }
  }
  request.setAttribute(""String_Node_Str"",im.getAllItems());
  request.setAttribute(""String_Node_Str"",pm.getAllEmployee());
  request.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
}",0.9217919514047076
155417,"@Override public void beforeNewForm(HttpServletRequest req) throws TransactionException {
  this.req=req;
  Object ob=req.getSession().getAttribute(""String_Node_Str"");
  Object ob2=req.getAttribute(""String_Node_Str"");
  if (!(ob instanceof RIS || ob2 instanceof RIS)) {
    req.getSession().removeAttribute(""String_Node_Str"");
    req.removeAttribute(""String_Node_Str"");
  }
  req.setAttribute(""String_Node_Str"",im.getAllItems());
  req.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  req.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}","@Override public void beforeNewForm(HttpServletRequest req) throws TransactionException {
  this.req=req;
  Object ob=req.getSession().getAttribute(""String_Node_Str"");
  Object ob2=req.getAttribute(""String_Node_Str"");
  if (!(ob instanceof RIS || ob2 instanceof RIS)) {
    String retain=(String)req.getParameter(""String_Node_Str"");
    if (retain == null) {
      req.getSession().removeAttribute(""String_Node_Str"");
      req.removeAttribute(""String_Node_Str"");
    }
  }
  req.setAttribute(""String_Node_Str"",im.getAllItems());
  req.setAttribute(""String_Node_Str"",dom.getAllDivisionOffice());
  req.setAttribute(""String_Node_Str"",pm.getAllEmployee());
}",0.91838417147568
155418,"public float get1stQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount1();
  return total;
}","public float get1stQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount1();
  return DecimalRounder.roundOff(total,2);
}",0.9045936395759716
155419,"public float get2ndQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount2();
  return total;
}","public float get2ndQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount2();
  return DecimalRounder.roundOff(total,2);
}",0.9045936395759716
155420,"public float get3rdQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount3();
  return total;
}","public float get3rdQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount3();
  return DecimalRounder.roundOff(total,2);
}",0.9045936395759716
155421,"public float get4thQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount4();
  return total;
}","public float get4thQuarterTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount4();
  return DecimalRounder.roundOff(total,2);
}",0.9045936395759716
155422,"public float getTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount();
  return total;
}","public float getTotal(){
  float total=0;
  for (  APPLine line : lines)   total+=line.getAmount();
  return DecimalRounder.roundOff(total,2);
}",0.896551724137931
155423,"public Object[] toArrayObject(){
  String description=item.getDescription();
  String stockNumber=item.getStockNumber();
  float price=item.getPrice();
  int quantity1=getQuantityQuarter1();
  int quantity2=getQuantityQuarter2();
  int quantity3=getQuantityQuarter3();
  int quantity4=getQuantityQuarter4();
  int quantity=getQuantity();
  float amount1=getAmount1();
  float amount2=getAmount2();
  float amount3=getAmount3();
  float amount4=getAmount4();
  float amountTotal=amount1 + amount2 + amount3+ amount4;
  return new Object[]{stockNumber,description,item.getUnit().getName(),quantity + ""String_Node_Str"",price + ""String_Node_Str"",quantity1 + ""String_Node_Str"",amount1 + ""String_Node_Str"",quantity2 + ""String_Node_Str"",amount2 + ""String_Node_Str"",quantity3 + ""String_Node_Str"",amount3 + ""String_Node_Str"",quantity4 + ""String_Node_Str"",amount4 + ""String_Node_Str"",amountTotal + ""String_Node_Str""};
}","public Object[] toArrayObject(){
  String description=item.getDescription();
  String stockNumber=item.getStockNumber();
  float price=item.getPrice();
  int quantity1=getQuantityQuarter1();
  int quantity2=getQuantityQuarter2();
  int quantity3=getQuantityQuarter3();
  int quantity4=getQuantityQuarter4();
  int quantity=getQuantity();
  float amount1=getAmount1();
  float amount2=getAmount2();
  float amount3=getAmount3();
  float amount4=getAmount4();
  float amountTotal=getAmount();
  return new Object[]{stockNumber,description,item.getUnit().getName(),quantity + ""String_Node_Str"",price + ""String_Node_Str"",quantity1 + ""String_Node_Str"",amount1 + ""String_Node_Str"",quantity2 + ""String_Node_Str"",amount2 + ""String_Node_Str"",quantity3 + ""String_Node_Str"",amount3 + ""String_Node_Str"",quantity4 + ""String_Node_Str"",amount4 + ""String_Node_Str"",amountTotal + ""String_Node_Str""};
}",0.973786949247072
155424,"public float getAmount(){
  return getAmount1() + getAmount2() + getAmount3()+ getAmount4();
}","public float getAmount(){
  return DecimalRounder.roundOff(getAmount1() + getAmount2() + getAmount3()+ getAmount4(),2);
}",0.8744186046511628
155425,"public float getAmount2(){
  return (float)(quantityQuarter2 * item.getPrice());
}","public float getAmount2(){
  return (float)DecimalRounder.roundOff((quantityQuarter2 * item.getPrice()),2);
}",0.8586387434554974
155426,"public float getAmount3(){
  return (float)(quantityQuarter3 * item.getPrice());
}","public float getAmount3(){
  return (float)DecimalRounder.roundOff((quantityQuarter3 * item.getPrice()),2);
}",0.8586387434554974
155427,"public float getAmount4(){
  return (float)(quantityQuarter4 * item.getPrice());
}","public float getAmount4(){
  return (float)DecimalRounder.roundOff((quantityQuarter4 * item.getPrice()),2);
}",0.8586387434554974
155428,"public float getAmount1(){
  return (float)(quantityQuarter1 * item.getPrice());
}","public float getAmount1(){
  return (float)DecimalRounder.roundOff((quantityQuarter1 * item.getPrice()),2);
}",0.8586387434554974
155429,"@Override public Form createForm(HttpServletRequest request,ApplicationContext appContext) throws TransactionException {
  ItemManager im=appContext.getItemManager();
  DivisionOfficeManager dom=appContext.getDivisionOfficeManager();
  PersonManager pm=appContext.getPersonManager();
  PR pr=new PR();
  String divisionOfficeId=request.getParameter(""String_Node_Str"");
  if (divisionOfficeId != null)   pr.setDivisionOffice(dom.getDivisionOffice(Integer.parseInt(divisionOfficeId)));
  pr.setPrNumber(request.getParameter(""String_Node_Str""));
  pr.setPrDate(request.getParameter(""String_Node_Str""));
  pr.setSaiNumber(request.getParameter(""String_Node_Str""));
  pr.setSaiDate(request.getParameter(""String_Node_Str""));
  pr.setAlobsNumber(request.getParameter(""String_Node_Str""));
  pr.setAlobsDate(request.getParameter(""String_Node_Str""));
  pr.setPurpose(request.getParameter(""String_Node_Str""));
  String reqId=request.getParameter(""String_Node_Str"");
  if (reqId != null)   pr.setRequestedBy(pm.getEmployee(Integer.parseInt(reqId)));
  String aprid=request.getParameter(""String_Node_Str"");
  if (aprid != null)   pr.setApprovedBy(pm.getEmployee(Integer.parseInt(aprid)));
  String[] quantities=request.getParameterValues(""String_Node_Str"");
  String[] estUnitCost=request.getParameterValues(""String_Node_Str"");
  String[] items=request.getParameterValues(""String_Node_Str"");
  if (items != null)   for (int i=0; i < items.length; i++) {
    String q=null;
    String eUC=null;
    if (quantities != null)     q=quantities[i];
    if (estUnitCost != null)     eUC=estUnitCost[i];
    if (q == null)     q=""String_Node_Str"";
    if (eUC == null || eUC == ""String_Node_Str"")     eUC=""String_Node_Str"";
    PRLine line=new PRLine();
    line.setQuantity(checkNum(q));
    line.setItem(im.getItem(Integer.parseInt(items[i])));
    line.setEstimatedUnitCost(checkNum2(eUC));
    pr.addLine(line);
  }
  return pr;
}","@Override public Form createForm(HttpServletRequest request,ApplicationContext appContext) throws TransactionException {
  ItemManager im=appContext.getItemManager();
  DivisionOfficeManager dom=appContext.getDivisionOfficeManager();
  PersonManager pm=appContext.getPersonManager();
  PR pr=new PR();
  String divisionOfficeId=request.getParameter(""String_Node_Str"");
  if (divisionOfficeId != null)   pr.setDivisionOffice(dom.getDivisionOffice(Integer.parseInt(divisionOfficeId)));
  pr.setPrNumber(request.getParameter(""String_Node_Str""));
  pr.setPrDate(request.getParameter(""String_Node_Str""));
  pr.setSaiNumber(request.getParameter(""String_Node_Str""));
  pr.setSaiDate(request.getParameter(""String_Node_Str""));
  pr.setAlobsNumber(request.getParameter(""String_Node_Str""));
  pr.setAlobsDate(request.getParameter(""String_Node_Str""));
  pr.setPurpose(request.getParameter(""String_Node_Str""));
  String reqId=request.getParameter(""String_Node_Str"");
  if (reqId != null)   pr.setRequestedBy(pm.getEmployee(Integer.parseInt(reqId)));
  String aprid=request.getParameter(""String_Node_Str"");
  if (aprid != null)   pr.setApprovedBy(pm.getEmployee(Integer.parseInt(aprid)));
  String[] quantities=request.getParameterValues(""String_Node_Str"");
  String[] estUnitCost=request.getParameterValues(""String_Node_Str"");
  String[] items=request.getParameterValues(""String_Node_Str"");
  if (items != null)   for (int i=0; i < items.length; i++) {
    String q=null;
    String eUC=null;
    if (quantities != null)     q=quantities[i];
    if (estUnitCost != null)     eUC=estUnitCost[i];
    if (q == null)     q=""String_Node_Str"";
    if (eUC == null || eUC == ""String_Node_Str"")     eUC=""String_Node_Str"";
    PRLine line=new PRLine();
    line.setQuantity(checkNum(q));
    line.setItem(im.getItem(Integer.parseInt(items[i])));
    line.setEstimatedUnitCost(checkNum2(eUC));
    System.out.println(""String_Node_Str"" + checkNum2(eUC));
    pr.addLine(line);
  }
  return pr;
}",0.984552008238929
155430,"public void setEstimatedUnitCost(long estimatedUnitCost){
  this.estimatedUnitCost=estimatedUnitCost;
}","public void setEstimatedUnitCost(float estimatedUnitCost){
  this.estimatedUnitCost=estimatedUnitCost;
}",0.9758454106280192
155431,"public long getEstimatedUnitCost(){
  return estimatedUnitCost;
}","public float getEstimatedUnitCost(){
  return DecimalRounder.roundOff(estimatedUnitCost,2);
}",0.7974683544303798
155432,"public long getEstimatedCost(){
  return estimatedUnitCost * quantity;
}","public float getEstimatedCost(){
  return DecimalRounder.roundOff(estimatedUnitCost * quantity,2);
}",0.813953488372093
155433,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + (int)(estimatedUnitCost ^ (estimatedUnitCost >>> 32));
  result=prime * result + ((item == null) ? 0 : item.hashCode());
  result=prime * result + quantity;
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + Float.floatToIntBits(estimatedUnitCost);
  result=prime * result + ((item == null) ? 0 : item.hashCode());
  result=prime * result + quantity;
  return result;
}",0.660377358490566
155434,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  PRLine other=(PRLine)obj;
  if (estimatedUnitCost != other.estimatedUnitCost)   return false;
  if (item == null) {
    if (other.item != null)     return false;
  }
 else   if (!item.equals(other.item))   return false;
  if (quantity != other.quantity)   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  PRLine other=(PRLine)obj;
  if (Float.floatToIntBits(estimatedUnitCost) != Float.floatToIntBits(other.estimatedUnitCost))   return false;
  if (item == null) {
    if (other.item != null)     return false;
  }
 else   if (!item.equals(other.item))   return false;
  if (quantity != other.quantity)   return false;
  return true;
}",0.953781512605042
155435,"private long checkNum2(String value){
  long num;
  try {
    num=Long.parseLong(value);
    if (num < 0)     return 0;
  }
 catch (  Exception e) {
    return 0;
  }
  return num;
}","private float checkNum2(String value){
  float num;
  try {
    num=Float.parseFloat(value);
    if (num < 0)     return 0;
  }
 catch (  Exception e) {
    return 0;
  }
  return num;
}",0.9347826086956522
155436,"@Override public boolean validate(){
  boolean validItem=item != null && item.validate();
  boolean validPr=purchaseRequest != null;
  boolean validQuantity=quantity > 0;
  return validItem && validPr && validQuantity;
}","@Override public boolean validate(){
  boolean validItem=item != null && item.validate();
  boolean validPr=purchaseRequest != null;
  boolean validQuantity=quantity > 0;
  boolean validEstUnitCost=estimatedUnitCost >= 0;
  return validItem && validPr && validQuantity&& validEstUnitCost;
}",0.8627450980392157
155437,"@Override public Form createForm(HttpServletRequest request,ApplicationContext appContext) throws TransactionException {
  ItemManager im=appContext.getItemManager();
  DivisionOfficeManager dom=appContext.getDivisionOfficeManager();
  PersonManager pm=appContext.getPersonManager();
  PR pr=new PR();
  String divisionOfficeId=request.getParameter(""String_Node_Str"");
  if (divisionOfficeId != null)   pr.setDivisionOffice(dom.getDivisionOffice(Integer.parseInt(divisionOfficeId)));
  pr.setPrNumber(request.getParameter(""String_Node_Str""));
  pr.setPrDate(request.getParameter(""String_Node_Str""));
  pr.setSaiNumber(request.getParameter(""String_Node_Str""));
  pr.setSaiDate(request.getParameter(""String_Node_Str""));
  pr.setAlobsNumber(request.getParameter(""String_Node_Str""));
  pr.setAlobsDate(request.getParameter(""String_Node_Str""));
  pr.setPurpose(request.getParameter(""String_Node_Str""));
  String reqId=request.getParameter(""String_Node_Str"");
  if (reqId != null)   pr.setRequestedBy(pm.getEmployee(Integer.parseInt(reqId)));
  String aprid=request.getParameter(""String_Node_Str"");
  if (aprid != null)   pr.setApprovedBy(pm.getEmployee(Integer.parseInt(aprid)));
  String[] quantities=request.getParameterValues(""String_Node_Str"");
  String[] estUnitCost=request.getParameterValues(""String_Node_Str"");
  String[] items=request.getParameterValues(""String_Node_Str"");
  if (items != null)   for (int i=0; i < items.length; i++) {
    String q=null;
    String eUC=null;
    if (quantities != null)     q=quantities[i];
    if (estUnitCost != null)     eUC=estUnitCost[i];
    if (q == null)     q=""String_Node_Str"";
    if (eUC == null)     eUC=""String_Node_Str"";
    PRLine line=new PRLine();
    line.setQuantity(Integer.parseInt(q));
    line.setItem(im.getItem(Integer.parseInt(items[i])));
    line.setEstimatedUnitCost(Long.parseLong(eUC));
    pr.addLine(line);
  }
  return pr;
}","@Override public Form createForm(HttpServletRequest request,ApplicationContext appContext) throws TransactionException {
  ItemManager im=appContext.getItemManager();
  DivisionOfficeManager dom=appContext.getDivisionOfficeManager();
  PersonManager pm=appContext.getPersonManager();
  PR pr=new PR();
  String divisionOfficeId=request.getParameter(""String_Node_Str"");
  if (divisionOfficeId != null)   pr.setDivisionOffice(dom.getDivisionOffice(Integer.parseInt(divisionOfficeId)));
  pr.setPrNumber(request.getParameter(""String_Node_Str""));
  pr.setPrDate(request.getParameter(""String_Node_Str""));
  pr.setSaiNumber(request.getParameter(""String_Node_Str""));
  pr.setSaiDate(request.getParameter(""String_Node_Str""));
  pr.setAlobsNumber(request.getParameter(""String_Node_Str""));
  pr.setAlobsDate(request.getParameter(""String_Node_Str""));
  pr.setPurpose(request.getParameter(""String_Node_Str""));
  String reqId=request.getParameter(""String_Node_Str"");
  if (reqId != null)   pr.setRequestedBy(pm.getEmployee(Integer.parseInt(reqId)));
  String aprid=request.getParameter(""String_Node_Str"");
  if (aprid != null)   pr.setApprovedBy(pm.getEmployee(Integer.parseInt(aprid)));
  String[] quantities=request.getParameterValues(""String_Node_Str"");
  String[] estUnitCost=request.getParameterValues(""String_Node_Str"");
  String[] items=request.getParameterValues(""String_Node_Str"");
  if (items != null)   for (int i=0; i < items.length; i++) {
    String q=null;
    String eUC=null;
    if (quantities != null)     q=quantities[i];
    if (estUnitCost != null)     eUC=estUnitCost[i];
    if (q == null)     q=""String_Node_Str"";
    if (eUC == null)     eUC=""String_Node_Str"";
    PRLine line=new PRLine();
    try {
      line.setQuantity(Integer.parseInt(q));
    }
 catch (    Exception e) {
      line.setQuantity(0);
    }
    line.setItem(im.getItem(Integer.parseInt(items[i])));
    try {
      line.setEstimatedUnitCost(Long.parseLong(eUC));
    }
 catch (    Exception e) {
      line.setEstimatedUnitCost(-1);
    }
    pr.addLine(line);
  }
  return pr;
}",0.958080808080808
155438,"public void setDescription(String description){
  this.description=description;
}","public void setDescription(String description){
  if (description != null)   this.description=description.trim();
}",0.826530612244898
155439,"public Item(String description,ItemCategory itemCategory,Unit unit,ItemStatus itemStatus,ItemCondition itemCondition){
  super();
  this.description=description;
  this.itemCategory=itemCategory;
  this.unit=unit;
  this.itemStatus=itemStatus;
  this.itemCondition=itemCondition;
}","public Item(String description,ItemCategory itemCategory,Unit unit,ItemStatus itemStatus,ItemCondition itemCondition){
  this(description,""String_Node_Str"",itemCategory,unit,0.0f,null,null,null,null,itemCondition);
}",0.5070422535211268
155440,"public void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  ArrayList<Person> availablePersons=new ArrayList<Person>();
  try {
    List<Person> persons;
    persons=pManager.getAllPersons();
    List<Account> accounts=aManager.getAllAccounts();
    boolean dontAdd=false;
    for (int i=0; i < persons.size(); i++) {
      for (int j=0; j < accounts.size(); j++) {
        if (persons.get(i).getId() == accounts.get(j).getPerson().getId()) {
          dontAdd=true;
        }
      }
      if (!dontAdd) {
        availablePersons.add(persons.get(i));
      }
      dontAdd=false;
    }
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  System.out.println(""String_Node_Str"" + availablePersons.size());
  request.setAttribute(""String_Node_Str"",availablePersons);
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}","public void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  ArrayList<Person> availablePersons=new ArrayList<Person>();
  try {
    List<Person> persons;
    persons=pManager.getAllPersons();
    List<Account> accounts=aManager.getAllAccounts();
    boolean dontAdd=false;
    for (int i=0; i < persons.size(); i++) {
      for (int j=0; j < accounts.size(); j++) {
        if (persons.get(i).getId() == accounts.get(j).getPerson().getId()) {
          dontAdd=true;
        }
      }
      if (!dontAdd) {
        availablePersons.add(persons.get(i));
      }
      dontAdd=false;
    }
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  request.setAttribute(""String_Node_Str"",availablePersons);
  RequestDispatcher view=request.getRequestDispatcher(AccountServlet.CREATE_ACCOUNT_FOR_EXISTING);
  view.forward(request,response);
}",0.850674373795761
155441,"private Action parseAction(HttpServletRequest request){
  String action=(String)request.getParameter(ACCOUNT_ACTION);
  if (action.equalsIgnoreCase(VIEW_OWN_ACCOUNT_ACTION))   return new ViewOwnAccountAction();
  if (action.equalsIgnoreCase(ADD_ACCOUNT_ACTION))   return new AccountCreationAction();
  if (action.equalsIgnoreCase(VIEW_ACCOUNTS_ACTION))   return new AccountsViewAction();
  if (action.equalsIgnoreCase(VIEW_ACCOUNT_ACTION))   return new ViewAccountAction();
  if (action.equalsIgnoreCase(SAVE_ACCOUNT_ACTION))   return new SaveAccountAction();
  if (action.equalsIgnoreCase(SAVE_EDITED_ACCOUNT_ACTION))   return new UpdateAccountAction();
  if (action.equalsIgnoreCase(CREATE_FROM_EXISTING))   return new AccountCreationForExistingEmployeeAction();
  if (action.equalsIgnoreCase(SAVE_FOR_EXISTING))   return new SaveAccountForExistingEmployeeAction();
  return null;
}","private Action parseAction(HttpServletRequest request){
  String action=(String)request.getParameter(ACCOUNT_ACTION);
  if (action == null)   return new AccountsViewAction();
  if (action.equalsIgnoreCase(VIEW_OWN_ACCOUNT_ACTION))   return new ViewOwnAccountAction();
  if (action.equalsIgnoreCase(ADD_ACCOUNT_ACTION))   return new AccountCreationAction();
  if (action.equalsIgnoreCase(VIEW_ACCOUNTS_ACTION))   return new AccountsViewAction();
  if (action.equalsIgnoreCase(VIEW_ACCOUNT_ACTION))   return new ViewAccountAction();
  if (action.equalsIgnoreCase(SAVE_ACCOUNT_ACTION))   return new SaveAccountAction();
  if (action.equalsIgnoreCase(SAVE_EDITED_ACCOUNT_ACTION))   return new UpdateAccountAction();
  if (action.equalsIgnoreCase(SAVE_OWN_EDITED_ACCOUNT_ACTION))   return new UpdateOwnAccountAction();
  if (action.equalsIgnoreCase(CREATE_FROM_EXISTING))   return new AccountCreationForExistingEmployeeAction();
  if (action.equalsIgnoreCase(SAVE_FOR_EXISTING))   return new SaveAccountForExistingEmployeeAction();
  return null;
}",0.9174883238194084
155442,"private void acceptResponse(HttpServletRequest request,HttpServletResponse response){
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  DivisionOfficeManager dManager=new DivisionOfficeManagerSession();
  Person person;
  if (name != null && designation != null && username != null && password != null && reenterPassword != null && password.equalsIgnoreCase(reenterPassword)) {
    if (title != null && !title.equalsIgnoreCase(""String_Node_Str"") && !title.isEmpty())     person=new Person(title,name);
 else     person=new Person(name);
    if (emailad != null && !emailad.equalsIgnoreCase(""String_Node_Str"") && !emailad.isEmpty()) {
      Contact email=new Contact(entry.spaceTrimmer(emailad),ContactType.EMAIL);
      person.addContact(email);
    }
    if (landline != null && !landline.equalsIgnoreCase(""String_Node_Str"") && !landline.isEmpty()) {
      Contact landline2=new Contact(entry.spaceTrimmer(landline),ContactType.LANDLINE);
      person.addContact(landline2);
    }
    if (mobileNumber != null && !mobileNumber.equalsIgnoreCase(""String_Node_Str"") && !mobileNumber.isEmpty()) {
      Contact mobile=new Contact(entry.spaceTrimmer(mobileNumber),ContactType.MOBILE);
      person.addContact(mobile);
    }
    try {
      pManager.addPerson(person);
      request.setAttribute(""String_Node_Str"",person);
    }
 catch (    TransactionException e) {
      failedResponse(request,response);
    }
catch (    DuplicateEntryException e) {
      failedResponse(request,response);
    }
    ArrayList<Employee> empList=new ArrayList<Employee>();
    for (int i=0; i < designation.length; i++) {
      if (designation[i].isEmpty())       continue;
      Employee employee=new Employee(entry.spaceTrimmer(designation[i]),entry.spaceTrimmer(employeeNo[i]),person);
      try {
        employee.setDivisionOffice(dManager.getDivisionOffice(Integer.parseInt(divisionOfficeID[i])));
        pManager.addEmployee(employee);
        empList.add(employee);
      }
 catch (      NumberFormatException e) {
        failedResponse(request,response);
      }
catch (      TransactionException e) {
        failedResponse(request,response);
      }
catch (      DuplicateEntryException e) {
        failedResponse(request,response);
      }
catch (      Exception e) {
        e.printStackTrace();
        failedResponse(request,response);
      }
    }
    request.setAttribute(""String_Node_Str"",empList);
    try {
      Account account=new Account();
      account.setPassword(password);
      account.setUsername(username);
      account.setPerson(person);
      if (acctType.equalsIgnoreCase(AccountType.NON_SPSO_PERSONNEL_EMPLOYEE.toString())) {
        account.setType(AccountType.NON_SPSO_PERSONNEL_EMPLOYEE);
      }
 else       if (acctType.equalsIgnoreCase(AccountType.NON_SPSO_PERSONNEL_HEAD.toString())) {
        account.setType(AccountType.NON_SPSO_PERSONNEL_HEAD);
      }
 else       if (acctType.equalsIgnoreCase(AccountType.SPSO_PERSONNEL.toString())) {
        account.setType(AccountType.SPSO_PERSONNEL);
      }
 else       if (acctType.equalsIgnoreCase(AccountType.SYSTEM_ADMIN.toString())) {
        account.setType(AccountType.SYSTEM_ADMIN);
      }
      aManager.addAccount(account);
      request.setAttribute(""String_Node_Str"",username);
      AccountsViewAction view=new AccountsViewAction();
      view.process(request,response);
    }
 catch (    TransactionException e) {
      failedResponse(request,response);
    }
catch (    ServletException e) {
      failedResponse(request,response);
    }
catch (    IOException e) {
      failedResponse(request,response);
    }
  }
}","private void acceptResponse(HttpServletRequest request,HttpServletResponse response){
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  DivisionOfficeManager dManager=new DivisionOfficeManagerSession();
  Person person;
  if (name != null && designation != null && username != null && password != null && reenterPassword != null && password.equalsIgnoreCase(reenterPassword)) {
    if (title != null && !title.equalsIgnoreCase(""String_Node_Str"") && !title.isEmpty())     person=new Person(title,name);
 else     person=new Person(name);
    if (emailad != null && !emailad.equalsIgnoreCase(""String_Node_Str"") && !emailad.isEmpty()) {
      Contact email=new Contact(entry.spaceTrimmer(emailad),ContactType.EMAIL);
      person.addContact(email);
    }
    if (landline != null && !landline.equalsIgnoreCase(""String_Node_Str"") && !landline.isEmpty()) {
      Contact landline2=new Contact(entry.spaceTrimmer(landline),ContactType.LANDLINE);
      person.addContact(landline2);
    }
    if (mobileNumber != null && !mobileNumber.equalsIgnoreCase(""String_Node_Str"") && !mobileNumber.isEmpty()) {
      Contact mobile=new Contact(entry.spaceTrimmer(mobileNumber),ContactType.MOBILE);
      person.addContact(mobile);
    }
    try {
      pManager.addPerson(person);
      request.setAttribute(""String_Node_Str"",person);
    }
 catch (    TransactionException e) {
      failedResponse(request,response);
    }
catch (    DuplicateEntryException e) {
      failedResponse(request,response);
    }
    ArrayList<Employee> empList=new ArrayList<Employee>();
    for (int i=0; i < designation.length; i++) {
      if (designation[i].isEmpty())       continue;
      Employee employee=new Employee(entry.spaceTrimmer(designation[i]),entry.spaceTrimmer(employeeNo[i]),person);
      try {
        employee.setDivisionOffice(dManager.getDivisionOffice(Integer.parseInt(divisionOfficeID[i])));
        pManager.addEmployee(employee);
        empList.add(employee);
      }
 catch (      NumberFormatException e) {
        failedResponse(request,response);
      }
catch (      TransactionException e) {
        failedResponse(request,response);
      }
catch (      DuplicateEntryException e) {
        failedResponse(request,response);
      }
catch (      Exception e) {
        e.printStackTrace();
        failedResponse(request,response);
      }
    }
    request.setAttribute(""String_Node_Str"",empList);
    try {
      Account account=new Account();
      account.setPassword(password);
      account.setUsername(username);
      account.setPerson(person);
      if (acctType.equalsIgnoreCase(AccountType.NON_SPSO_PERSONNEL_EMPLOYEE.toString())) {
        account.setType(AccountType.NON_SPSO_PERSONNEL_EMPLOYEE);
      }
 else       if (acctType.equalsIgnoreCase(AccountType.NON_SPSO_PERSONNEL_HEAD.toString())) {
        account.setType(AccountType.NON_SPSO_PERSONNEL_HEAD);
      }
 else       if (acctType.equalsIgnoreCase(AccountType.SPSO_PERSONNEL.toString())) {
        account.setType(AccountType.SPSO_PERSONNEL);
      }
 else       if (acctType.equalsIgnoreCase(AccountType.SYSTEM_ADMIN.toString())) {
        account.setType(AccountType.SYSTEM_ADMIN);
      }
      aManager.addAccount(account);
      AccountsViewAction view=new AccountsViewAction();
      view.process(request,response);
    }
 catch (    TransactionException e) {
      failedResponse(request,response);
    }
catch (    ServletException e) {
      failedResponse(request,response);
    }
catch (    IOException e) {
      failedResponse(request,response);
    }
  }
}",0.9922971114167812
155443,"private void logInSuccess(HttpServletRequest request,HttpServletResponse response,String username){
  request.setAttribute(""String_Node_Str"",username);
  forwardToMenuFrameJsp(request,response,username);
}","private void logInSuccess(HttpServletRequest request,HttpServletResponse response,String username) throws ServletException {
  request.setAttribute(""String_Node_Str"",username);
  forwardToMenuFrameJsp(request,response,username);
}",0.942528735632184
155444,"private void forwardToMenuFrameJsp(HttpServletRequest request,HttpServletResponse response,String username){
  try {
    HttpSession session=request.getSession();
    if (session.isNew()) {
      session.setAttribute(""String_Node_Str"",username);
      session.setMaxInactiveInterval(30);
    }
    response.sendRedirect(""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","private void forwardToMenuFrameJsp(HttpServletRequest request,HttpServletResponse response,String username) throws ServletException {
  try {
    RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
    HttpSession session=request.getSession();
    if (session.isNew()) {
      request.setAttribute(""String_Node_Str"",username);
      session.setAttribute(""String_Node_Str"",username);
      session.setMaxInactiveInterval(30);
    }
    view.forward(request,response);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.4910432033719705
155445,"protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  System.out.println(""String_Node_Str"");
  Cleaner.clean(request);
  request.getRequestDispatcher(""String_Node_Str"").forward(request,response);
}","protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  System.out.println(""String_Node_Str"");
  String username=(String)request.getAttribute(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + username);
  Cleaner.clean(request);
  request.setAttribute(""String_Node_Str"",username);
  request.getRequestDispatcher(""String_Node_Str"").forward(request,response);
}",0.753956834532374
155446,"protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  DivisionOfficeManager doManager=new DivisionOfficeManagerSession();
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  ArrayList<String> buildingName=new ArrayList<String>();
  ArrayList<String> buildingAddress=new ArrayList<String>();
  List<Building> buildings=new ArrayList<Building>();
  try {
    buildings=doManager.getAllBuildings();
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  for (  Building b : buildings) {
    buildingName.add(b.getBuildingName());
    buildingAddress.add(b.getBuildingAddress());
  }
  System.out.println(""String_Node_Str"");
  request.setAttribute(""String_Node_Str"",buildingName);
  request.setAttribute(""String_Node_Str"",buildingAddress);
  view.forward(request,response);
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  DivisionOfficeManager doManager=new DivisionOfficeManagerSession();
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  List<Building> buildings=new ArrayList<Building>();
  try {
    buildings=doManager.getAllBuildings();
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  request.setAttribute(""String_Node_Str"",buildings);
  view.forward(request,response);
}",0.7066381156316917
155447,"private void acceptResponse(HttpServletRequest request,HttpServletResponse response){
  System.out.println(""String_Node_Str"");
  Person person=new Person(title,name);
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  ContactManager cManager=new ContactManagerSession();
  try {
    request.setAttribute(""String_Node_Str"",title);
    request.setAttribute(""String_Node_Str"",name);
    request.setAttribute(""String_Node_Str"",designation);
    request.setAttribute(""String_Node_Str"",userName);
    request.setAttribute(""String_Node_Str"",password);
    request.setAttribute(""String_Node_Str"",office);
    request.setAttribute(""String_Node_Str"",division);
    request.setAttribute(""String_Node_Str"",employeeNumber);
    request.setAttribute(""String_Node_Str"",cellphonNumber);
    request.setAttribute(""String_Node_Str"",landline);
    request.setAttribute(""String_Node_Str"",emailAdd);
    request.setAttribute(""String_Node_Str"",accountType);
    RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
    view.forward(request,response);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
catch (  ServletException e) {
    e.printStackTrace();
  }
  try {
    pManager.addPerson(person);
    AccountType type=null;
    if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.NON_SPSO_PERSONNEL_EMPLOYEE;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.NON_SPSO_PERSONNEL_HEAD;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.SPSO_PERSONNEL;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.SYSTEM_ADMIN;
    Account account=new Account(userName,password,type,person);
    Contact contactLandLine=new Contact(landline,ContactType.LANDLINE);
    Contact contactMobile=new Contact(cellphonNumber,ContactType.MOBILE);
    Contact contactEmail=new Contact(emailAdd,ContactType.EMAIL);
    cManager.addContact(contactLandLine);
    cManager.addContactToPerson(contactLandLine.getContactID(),person.getId());
    cManager.addContact(contactMobile);
    cManager.addContactToPerson(contactMobile.getContactID(),person.getId());
    cManager.addContact(contactEmail);
    cManager.addContactToPerson(contactEmail.getContactID(),person.getId());
    aManager.addAccount(account);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
catch (  DuplicateEntryException e) {
    e.printStackTrace();
  }
}","private void acceptResponse(HttpServletRequest request,HttpServletResponse response){
  System.out.println(""String_Node_Str"");
  Person person=new Person(title,name);
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  ContactManager cManager=new ContactManagerSession();
  try {
    request.setAttribute(""String_Node_Str"",title);
    request.setAttribute(""String_Node_Str"",name);
    request.setAttribute(""String_Node_Str"",designation);
    request.setAttribute(""String_Node_Str"",userName);
    request.setAttribute(""String_Node_Str"",password);
    request.setAttribute(""String_Node_Str"",office);
    request.setAttribute(""String_Node_Str"",division);
    request.setAttribute(""String_Node_Str"",employeeNumber);
    request.setAttribute(""String_Node_Str"",cellphonNumber);
    request.setAttribute(""String_Node_Str"",landline);
    request.setAttribute(""String_Node_Str"",emailAdd);
    request.setAttribute(""String_Node_Str"",accountType);
    RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
    view.forward(request,response);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
catch (  ServletException e) {
    e.printStackTrace();
  }
  try {
    pManager.addPerson(person);
    AccountType type=null;
    if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.NON_SPSO_PERSONNEL_EMPLOYEE;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.NON_SPSO_PERSONNEL_HEAD;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.SPSO_PERSONNEL;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.SYSTEM_ADMIN;
    Account account=new Account(userName,password,type,person);
    Contact contactLandLine=new Contact(landline,ContactType.LANDLINE);
    Contact contactMobile=new Contact(cellphonNumber,ContactType.MOBILE);
    Contact contactEmail=new Contact(emailAdd,ContactType.EMAIL);
    account.getPerson().addContact(contactEmail);
    account.getPerson().addContact(contactMobile);
    account.getPerson().addContact(contactLandLine);
    aManager.addAccount(account);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
catch (  DuplicateEntryException e) {
    e.printStackTrace();
  }
}",0.917910447761194
155448,"/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager aManager=new AccountManagerSession();
  PersonManager pManager=new PersonManagerSession();
  DivisionOfficeManager dManager=new DivisionOfficeManagerSession();
  String userName=(String)request.getParameter(""String_Node_Str"");
  ArrayList<String> designation=new ArrayList<String>();
  ArrayList<String> employeeNumber=new ArrayList<String>();
  ArrayList<String> division=new ArrayList<String>();
  ArrayList<String> office=new ArrayList<String>();
  Account account;
  try {
    account=aManager.getAccount(userName);
    Person person=account.getPerson();
    List<Employee> employee=pManager.getEmployeeByPerson(person.getId());
    for (int i=0; i < employee.size(); i++) {
      designation.add(employee.get(i).getDesignation());
      employeeNumber.add(""String_Node_Str"" + employee.get(i).getPerson());
      if ((employee.get(i).getPerson() != null))       division.add(dManager.getDivisionOfficeByEmployee(employee.get(i).getId()).getDivisionName());
 else       division.add(""String_Node_Str"");
      if (dManager.getDivisionOfficeByEmployee(employee.get(i).getId()) != null)       office.add(dManager.getDivisionOfficeByEmployee(employee.get(i).getId()).getOfficeName());
 else       office.add(""String_Node_Str"");
    }
    request.setAttribute(""String_Node_Str"",designation);
    request.setAttribute(""String_Node_Str"",employeeNumber);
    request.setAttribute(""String_Node_Str"",division);
    request.setAttribute(""String_Node_Str"",office);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager am=new AccountManagerSession();
  PersonManager pm=new PersonManagerSession();
  String userName=(String)request.getParameter(""String_Node_Str"");
  List<String> designations=new ArrayList<String>();
  List<String> employeeNumbers=new ArrayList<String>();
  List<String> divisions=new ArrayList<String>();
  List<String> offices=new ArrayList<String>();
  Account account;
  try {
    account=am.getAccount(userName);
    Person person=account.getPerson();
    List<Employee> employees=pm.getEmployeeByPerson(person.getId());
    for (    Employee employee : employees) {
      designations.add(employee.getDesignation());
      employeeNumbers.add(""String_Node_Str"" + employee.getPerson());
      divisions.add(employee.getDivisionOffice().getDivisionName());
      if (employee.hasDivisionOffice())       offices.add(employee.getDivisionOffice().getOfficeName());
 else       offices.add(""String_Node_Str"");
    }
    request.setAttribute(""String_Node_Str"",designations);
    request.setAttribute(""String_Node_Str"",employeeNumbers);
    request.setAttribute(""String_Node_Str"",divisions);
    request.setAttribute(""String_Node_Str"",offices);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  request.getRequestDispatcher(""String_Node_Str"").forward(request,response);
}",0.2921485088253195
155449,"/** 
 * @see HttpServlet#HttpServlet()
 */
public ViewWorkInformation(){
  super();
}","public ViewWorkInformation(){
  super();
}",0.6614173228346457
155450,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
}","protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
}",0.7195121951219512
155451,"protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String employeeID=(String)request.getParameter(""String_Node_Str"");
  System.out.println(employeeID);
  ArrayList<String> landline=new ArrayList<String>();
  ArrayList<String> mobile=new ArrayList<String>();
  ArrayList<String> emailad=new ArrayList<String>();
  try {
    Employee emp=ManagerBin.pManager.getEmployee(Integer.parseInt(employeeID));
    if (emp != null) {
      p=emp.getPerson();
      request.setAttribute(""String_Node_Str"",p.getTitle());
      request.setAttribute(""String_Node_Str"",p.getName());
      request.setAttribute(""String_Node_Str"",emp.getDesignation());
      request.setAttribute(""String_Node_Str"",emp.getEmployeeNumber());
      request.setAttribute(""String_Node_Str"",emp.getDivisionOffice());
      List<Contact> contact=ManagerBin.getInstance().cManager.getAllContactsByPerson(p.getId());
      for (int i=0; contact != null && i < contact.size(); i++) {
        if (contact.get(i).getType().equals(ContactType.LANDLINE)) {
          landline.add(contact.get(i).getData());
        }
        if (contact.get(i).getType().equals(ContactType.EMAIL)) {
          emailad.add(contact.get(i).getData());
        }
        if (contact.get(i).getType().equals(ContactType.MOBILE)) {
          mobile.add(contact.get(i).getData());
        }
      }
      if (mobile.isEmpty()) {
        System.out.println(""String_Node_Str"");
      }
      if (landline.isEmpty()) {
        System.out.println(""String_Node_Str"");
      }
      request.setAttribute(""String_Node_Str"",mobile);
      request.setAttribute(""String_Node_Str"",emailad);
      request.setAttribute(""String_Node_Str"",landline);
    }
    RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
    view.forward(request,response);
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
catch (  TransactionException e) {
    e.printStackTrace();
  }
}","protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String employeeID=(String)request.getParameter(""String_Node_Str"");
  System.out.println(employeeID);
  ArrayList<String> landline=new ArrayList<String>();
  ArrayList<String> mobile=new ArrayList<String>();
  ArrayList<String> emailad=new ArrayList<String>();
  try {
    Employee emp=ManagerBin.pManager.getEmployee(Integer.parseInt(employeeID));
    if (emp != null) {
      p=emp.getPerson();
      request.setAttribute(""String_Node_Str"",p.getTitle());
      request.setAttribute(""String_Node_Str"",p.getName());
      request.setAttribute(""String_Node_Str"",emp.getDesignation());
      request.setAttribute(""String_Node_Str"",emp.getEmployeeNumber());
      request.setAttribute(""String_Node_Str"",emp.getDivisionOffice());
      Set<Contact> contacts=p.getContacts();
      for (      Contact contact : contacts) {
        if (contact.getType().equals(ContactType.LANDLINE))         landline.add(contact.getData());
        if (contact.getType().equals(ContactType.EMAIL))         emailad.add(contact.getData());
        if (contact.getType().equals(ContactType.MOBILE))         mobile.add(contact.getData());
      }
      if (mobile.isEmpty()) {
        System.out.println(""String_Node_Str"");
      }
      if (landline.isEmpty()) {
        System.out.println(""String_Node_Str"");
      }
      request.setAttribute(""String_Node_Str"",mobile);
      request.setAttribute(""String_Node_Str"",emailad);
      request.setAttribute(""String_Node_Str"",landline);
    }
    request.getRequestDispatcher(""String_Node_Str"").forward(request,response);
  }
 catch (  NumberFormatException e) {
    e.printStackTrace();
  }
catch (  TransactionException e) {
    e.printStackTrace();
  }
}",0.6832363828662084
155452,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
}","protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
}",0.7195121951219512
155453,"private void acceptResponse(HttpServletRequest request,HttpServletResponse response){
  System.out.println(""String_Node_Str"");
  Person person=new Person(title,name);
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  ContactManager cManager=new ContactManagerSession();
  try {
    request.setAttribute(""String_Node_Str"",title);
    request.setAttribute(""String_Node_Str"",name);
    request.setAttribute(""String_Node_Str"",designation);
    request.setAttribute(""String_Node_Str"",userName);
    request.setAttribute(""String_Node_Str"",password);
    request.setAttribute(""String_Node_Str"",office);
    request.setAttribute(""String_Node_Str"",division);
    request.setAttribute(""String_Node_Str"",employeeNumber);
    request.setAttribute(""String_Node_Str"",cellphonNumber);
    request.setAttribute(""String_Node_Str"",landline);
    request.setAttribute(""String_Node_Str"",emailAdd);
    request.setAttribute(""String_Node_Str"",accountType);
    RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
    view.forward(request,response);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
catch (  ServletException e) {
    e.printStackTrace();
  }
  try {
    pManager.addPerson(person);
    if (accountType.equalsIgnoreCase(""String_Node_Str""))     accountType=AccountType.NON_SPSO_PERSONNEL_EMPLOYEE;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     accountType=AccountType.NON_SPSO_PERSONNEL_HEAD;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     accountType=AccountType.SPSO_PERSONNEL;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     accountType=AccountType.SYSTEM_ADMIN;
    Account account=new Account(userName,password,accountType,person.getId());
    Contact contactLandLine=new Contact(landline,ContactType.LANDLINE);
    Contact contactMobile=new Contact(cellphonNumber,ContactType.MOBILE);
    Contact contactEmail=new Contact(emailAdd,ContactType.EMAIL);
    cManager.addContact(contactLandLine);
    cManager.addContactToPerson(contactLandLine.getContactID(),person.getId());
    cManager.addContact(contactMobile);
    cManager.addContactToPerson(contactMobile.getContactID(),person.getId());
    cManager.addContact(contactEmail);
    cManager.addContactToPerson(contactEmail.getContactID(),person.getId());
    aManager.addAccount(account);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
catch (  DuplicateEntryException e) {
    e.printStackTrace();
  }
}","private void acceptResponse(HttpServletRequest request,HttpServletResponse response){
  System.out.println(""String_Node_Str"");
  Person person=new Person(title,name);
  PersonManager pManager=new PersonManagerSession();
  AccountManager aManager=new AccountManagerSession();
  ContactManager cManager=new ContactManagerSession();
  try {
    request.setAttribute(""String_Node_Str"",title);
    request.setAttribute(""String_Node_Str"",name);
    request.setAttribute(""String_Node_Str"",designation);
    request.setAttribute(""String_Node_Str"",userName);
    request.setAttribute(""String_Node_Str"",password);
    request.setAttribute(""String_Node_Str"",office);
    request.setAttribute(""String_Node_Str"",division);
    request.setAttribute(""String_Node_Str"",employeeNumber);
    request.setAttribute(""String_Node_Str"",cellphonNumber);
    request.setAttribute(""String_Node_Str"",landline);
    request.setAttribute(""String_Node_Str"",emailAdd);
    request.setAttribute(""String_Node_Str"",accountType);
    RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
    view.forward(request,response);
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
catch (  ServletException e) {
    e.printStackTrace();
  }
  try {
    pManager.addPerson(person);
    AccountType type=null;
    if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.NON_SPSO_PERSONNEL_EMPLOYEE;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.NON_SPSO_PERSONNEL_HEAD;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.SPSO_PERSONNEL;
 else     if (accountType.equalsIgnoreCase(""String_Node_Str""))     type=AccountType.SYSTEM_ADMIN;
    Account account=new Account(userName,password,type,person);
    Contact contactLandLine=new Contact(landline,ContactType.LANDLINE);
    Contact contactMobile=new Contact(cellphonNumber,ContactType.MOBILE);
    Contact contactEmail=new Contact(emailAdd,ContactType.EMAIL);
    cManager.addContact(contactLandLine);
    cManager.addContactToPerson(contactLandLine.getContactID(),person.getId());
    cManager.addContact(contactMobile);
    cManager.addContactToPerson(contactMobile.getContactID(),person.getId());
    cManager.addContact(contactEmail);
    cManager.addContactToPerson(contactEmail.getContactID(),person.getId());
    aManager.addAccount(account);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
catch (  DuplicateEntryException e) {
    e.printStackTrace();
  }
}",0.9821499404998016
155454,"/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager aManager=new AccountManagerSession();
  PersonManager pManager=new PersonManagerSession();
  ArrayList<String> userName=new ArrayList<String>();
  ArrayList<String> acctType=new ArrayList<String>();
  ArrayList<String> name=new ArrayList<String>();
  try {
    List<Account> accounts=aManager.getAllAccounts();
    for (int i=0; i < accounts.size(); i++) {
      userName.add(accounts.get(i).getUsername());
      acctType.add(accounts.get(i).getAccountType());
      name.add(pManager.getPerson(accounts.get(i).getPersonID()).getName());
    }
  }
 catch (  org.hibernate.TransactionException e) {
    e.printStackTrace();
  }
catch (  TransactionException e) {
    e.printStackTrace();
  }
  request.setAttribute(""String_Node_Str"",userName);
  request.setAttribute(""String_Node_Str"",acctType);
  request.setAttribute(""String_Node_Str"",name);
  request.setAttribute(""String_Node_Str"",""String_Node_Str"" + userName.size());
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}","/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager aManager=new AccountManagerSession();
  PersonManager pManager=new PersonManagerSession();
  ArrayList<String> userName=new ArrayList<String>();
  ArrayList<String> acctType=new ArrayList<String>();
  ArrayList<String> name=new ArrayList<String>();
  try {
    List<Account> accounts=aManager.getAllAccounts();
    for (int i=0; i < accounts.size(); i++) {
      userName.add(accounts.get(i).getUsername());
      name.add(accounts.get(i).getPerson().getName());
    }
  }
 catch (  org.hibernate.TransactionException e) {
    e.printStackTrace();
  }
catch (  TransactionException e) {
    e.printStackTrace();
  }
  request.setAttribute(""String_Node_Str"",userName);
  request.setAttribute(""String_Node_Str"",acctType);
  request.setAttribute(""String_Node_Str"",name);
  request.setAttribute(""String_Node_Str"",""String_Node_Str"" + userName.size());
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}",0.9566284779050735
155455,"/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager aManager=new AccountManagerSession();
  PersonManager pManager=new PersonManagerSession();
  ContactManager cManager=new ContactManagerSession();
  DivisionOfficeManager dManager=new DivisionOfficeManagerSession();
  String userName=(String)request.getParameter(""String_Node_Str"");
  String title;
  String name;
  ArrayList<String> mobileNumber=new ArrayList<String>();
  ArrayList<String> landline=new ArrayList<String>();
  ArrayList<String> emailad=new ArrayList<String>();
  String username;
  String acctType;
  try {
    Account account=aManager.getAccount(userName);
    Person person=pManager.getPerson(account.getPersonID());
    List<Contact> contact=cManager.getAllContactsByPerson(person.getId());
    username=account.getUsername();
    acctType=account.getAccountType();
    title=person.getTitle();
    name=person.getName();
    for (int i=0; i < contact.size(); i++) {
      if (contact.get(i).getType() == ContactType.MOBILE)       mobileNumber.add(contact.get(i).getData());
    }
    for (int i=0; i < contact.size(); i++) {
      if (contact.get(i).getType() == ContactType.LANDLINE)       landline.add(contact.get(i).getData());
    }
    for (int i=0; i < contact.size(); i++) {
      if (contact.get(i).getType() == ContactType.EMAIL)       emailad.add(contact.get(i).getData());
    }
    request.setAttribute(""String_Node_Str"",title);
    request.setAttribute(""String_Node_Str"",name);
    request.setAttribute(""String_Node_Str"",mobileNumber);
    request.setAttribute(""String_Node_Str"",landline);
    request.setAttribute(""String_Node_Str"",emailad);
    request.setAttribute(""String_Node_Str"",username);
    request.setAttribute(""String_Node_Str"",acctType);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}","/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager aManager=new AccountManagerSession();
  PersonManager pManager=new PersonManagerSession();
  ContactManager cManager=new ContactManagerSession();
  DivisionOfficeManager dManager=new DivisionOfficeManagerSession();
  String userName=(String)request.getParameter(""String_Node_Str"");
  String title;
  String name;
  ArrayList<String> mobileNumber=new ArrayList<String>();
  ArrayList<String> landline=new ArrayList<String>();
  ArrayList<String> emailad=new ArrayList<String>();
  String username;
  AccountType acctType;
  try {
    Account account=aManager.getAccount(userName);
    Set<Contact> contacts=account.getPerson().getContacts();
    username=account.getUsername();
    acctType=account.getType();
    title=account.getPerson().getTitle();
    name=account.getPerson().getName();
    for (    Contact contact : contacts)     if (contact.getType() == ContactType.MOBILE)     mobileNumber.add(contact.getData());
 else     if (contact.getType() == ContactType.LANDLINE)     landline.add(contact.getData());
 else     if (contact.getType() == ContactType.EMAIL)     landline.add(contact.getData());
    request.setAttribute(""String_Node_Str"",title);
    request.setAttribute(""String_Node_Str"",name);
    request.setAttribute(""String_Node_Str"",mobileNumber);
    request.setAttribute(""String_Node_Str"",landline);
    request.setAttribute(""String_Node_Str"",emailad);
    request.setAttribute(""String_Node_Str"",username);
    request.setAttribute(""String_Node_Str"",acctType);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}",0.8501759678230266
155456,"/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager aManager=new AccountManagerSession();
  PersonManager pManager=new PersonManagerSession();
  DivisionOfficeManager dManager=new DivisionOfficeManagerSession();
  String userName=(String)request.getParameter(""String_Node_Str"");
  ArrayList<String> designation=new ArrayList<String>();
  ArrayList<String> employeeNumber=new ArrayList<String>();
  ArrayList<String> division=new ArrayList<String>();
  ArrayList<String> office=new ArrayList<String>();
  Account account;
  try {
    account=aManager.getAccount(userName);
    System.out.println(""String_Node_Str"" + account.getPersonID());
    Person person=pManager.getPerson(account.getPersonID());
    List<Employee> employee=pManager.getEmployeeByPerson(person.getId());
    for (int i=0; i < employee.size(); i++) {
      designation.add(employee.get(i).getDesignation());
      employeeNumber.add(""String_Node_Str"" + employee.get(i).getPerson());
      if ((employee.get(i).getPerson() != null))       division.add(dManager.getDivisionOfficeByEmployee(employee.get(i).getId()).getDivisionName());
 else       division.add(""String_Node_Str"");
      if (dManager.getDivisionOfficeByEmployee(employee.get(i).getId()) != null)       office.add(dManager.getDivisionOfficeByEmployee(employee.get(i).getId()).getOfficeName());
 else       office.add(""String_Node_Str"");
    }
    request.setAttribute(""String_Node_Str"",designation);
    request.setAttribute(""String_Node_Str"",employeeNumber);
    request.setAttribute(""String_Node_Str"",division);
    request.setAttribute(""String_Node_Str"",office);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}","/** 
 * @see HttpServlet#doPost(HttpServletRequest request,HttpServletResponse response)
 */
protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  AccountManager aManager=new AccountManagerSession();
  PersonManager pManager=new PersonManagerSession();
  DivisionOfficeManager dManager=new DivisionOfficeManagerSession();
  String userName=(String)request.getParameter(""String_Node_Str"");
  ArrayList<String> designation=new ArrayList<String>();
  ArrayList<String> employeeNumber=new ArrayList<String>();
  ArrayList<String> division=new ArrayList<String>();
  ArrayList<String> office=new ArrayList<String>();
  Account account;
  try {
    account=aManager.getAccount(userName);
    Person person=account.getPerson();
    List<Employee> employee=pManager.getEmployeeByPerson(person.getId());
    for (int i=0; i < employee.size(); i++) {
      designation.add(employee.get(i).getDesignation());
      employeeNumber.add(""String_Node_Str"" + employee.get(i).getPerson());
      if ((employee.get(i).getPerson() != null))       division.add(dManager.getDivisionOfficeByEmployee(employee.get(i).getId()).getDivisionName());
 else       division.add(""String_Node_Str"");
      if (dManager.getDivisionOfficeByEmployee(employee.get(i).getId()) != null)       office.add(dManager.getDivisionOfficeByEmployee(employee.get(i).getId()).getOfficeName());
 else       office.add(""String_Node_Str"");
    }
    request.setAttribute(""String_Node_Str"",designation);
    request.setAttribute(""String_Node_Str"",employeeNumber);
    request.setAttribute(""String_Node_Str"",division);
    request.setAttribute(""String_Node_Str"",office);
  }
 catch (  TransactionException e) {
    e.printStackTrace();
  }
  RequestDispatcher view=request.getRequestDispatcher(""String_Node_Str"");
  view.forward(request,response);
}",0.5790715971675846
155457,"private static boolean tryToBuildSessionFactory(String username,String password) throws ExceptionInInitializerError {
  try {
    Properties p=new Properties();
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    p.setProperty(""String_Node_Str"",username);
    p.setProperty(""String_Node_Str"",password);
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    Configuration conf=new Configuration();
    conf.setProperties(p);
    conf.addAnnotatedClass(Account.class);
    conf.addAnnotatedClass(Building.class);
    conf.addAnnotatedClass(Contact.class);
    conf.addAnnotatedClass(ContactType.class);
    conf.addAnnotatedClass(DivisionOffice.class);
    conf.addAnnotatedClass(DivisionOfficeContact.class);
    conf.addAnnotatedClass(Employee.class);
    conf.addAnnotatedClass(EmployeeDivisionOffice.class);
    conf.addAnnotatedClass(Item.class);
    conf.addAnnotatedClass(ItemCategory.class);
    conf.addAnnotatedClass(ItemCondition.class);
    conf.addAnnotatedClass(ItemStatus.class);
    conf.addAnnotatedClass(ItemCategory.class);
    conf.addAnnotatedClass(Person.class);
    conf.addAnnotatedClass(PersonContact.class);
    conf.addAnnotatedClass(Signatory.class);
    conf.addAnnotatedClass(Supplier.class);
    conf.addAnnotatedClass(SupplierContact.class);
    conf.addAnnotatedClass(Unit.class);
    conf.addAnnotatedClass(AnnualProcurementPlan.class);
    conf.addAnnotatedClass(AnnualProcurementPlanLine.class);
    conf.addAnnotatedClass(Disposal.class);
    conf.addAnnotatedClass(IIRUP.class);
    conf.addAnnotatedClass(IIRUPLine.class);
    conf.addAnnotatedClass(InventoryCustodianSlip.class);
    conf.addAnnotatedClass(InventoryCustodianSlipLine.class);
    conf.addAnnotatedClass(InventoryOfEquipment.class);
    conf.addAnnotatedClass(InventoryOfEquipmentLine.class);
    conf.addAnnotatedClass(PropertyAcknowledgementReceipt.class);
    conf.addAnnotatedClass(PropertyAcknowledgementRecieptLine.class);
    conf.addAnnotatedClass(PTRPA.class);
    conf.addAnnotatedClass(PTRPALine.class);
    conf.addAnnotatedClass(PurchaseOrder.class);
    conf.addAnnotatedClass(PurchaseOrderLine.class);
    conf.addAnnotatedClass(PurchaseRequest.class);
    conf.addAnnotatedClass(PurchaseRequestLine.class);
    conf.addAnnotatedClass(RecapitulationLine.class);
    conf.addAnnotatedClass(RequisitionAndIssueSlip.class);
    conf.addAnnotatedClass(RequisitionAndIssueSlipLine.class);
    conf.addAnnotatedClass(RSMI.class);
    conf.addAnnotatedClass(RSMILine.class);
    conf.addAnnotatedClass(WasteMaterialsReport.class);
    conf.addAnnotatedClass(WasteMaterialsReportLine.class);
    sessionFactory=conf.buildSessionFactory();
    createAdminAccount();
    return true;
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    sessionFactory=null;
    return false;
  }
}","private static boolean tryToBuildSessionFactory(String username,String password) throws ExceptionInInitializerError {
  try {
    Properties p=new Properties();
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    p.setProperty(""String_Node_Str"",username);
    p.setProperty(""String_Node_Str"",password);
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    p.setProperty(""String_Node_Str"",""String_Node_Str"");
    Configuration conf=new Configuration();
    conf.setProperties(p);
    conf.addAnnotatedClass(Account.class);
    conf.addAnnotatedClass(Building.class);
    conf.addAnnotatedClass(Contact.class);
    conf.addAnnotatedClass(ContactType.class);
    conf.addAnnotatedClass(DivisionOffice.class);
    conf.addAnnotatedClass(DivisionOfficeContact.class);
    conf.addAnnotatedClass(Employee.class);
    conf.addAnnotatedClass(EmployeeDivisionOffice.class);
    conf.addAnnotatedClass(Item.class);
    conf.addAnnotatedClass(ItemCategory.class);
    conf.addAnnotatedClass(ItemCondition.class);
    conf.addAnnotatedClass(ItemStatus.class);
    conf.addAnnotatedClass(ItemCategory.class);
    conf.addAnnotatedClass(Person.class);
    conf.addAnnotatedClass(PersonContact.class);
    conf.addAnnotatedClass(Signatory.class);
    conf.addAnnotatedClass(Supplier.class);
    conf.addAnnotatedClass(SupplierContact.class);
    conf.addAnnotatedClass(Unit.class);
    conf.addAnnotatedClass(AnnualProcurementPlan.class);
    conf.addAnnotatedClass(AnnualProcurementPlanLine.class);
    conf.addAnnotatedClass(Disposal.class);
    conf.addAnnotatedClass(IIRUP.class);
    conf.addAnnotatedClass(IIRUPLine.class);
    conf.addAnnotatedClass(InventoryCustodianSlip.class);
    conf.addAnnotatedClass(InventoryCustodianSlipLine.class);
    conf.addAnnotatedClass(InventoryOfEquipment.class);
    conf.addAnnotatedClass(InventoryOfEquipmentLine.class);
    conf.addAnnotatedClass(ModeOfProcurement.class);
    conf.addAnnotatedClass(PropertyAcknowledgementReceipt.class);
    conf.addAnnotatedClass(PropertyAcknowledgementRecieptLine.class);
    conf.addAnnotatedClass(PTRPA.class);
    conf.addAnnotatedClass(PTRPALine.class);
    conf.addAnnotatedClass(PurchaseOrder.class);
    conf.addAnnotatedClass(PurchaseOrderLine.class);
    conf.addAnnotatedClass(PurchaseRequest.class);
    conf.addAnnotatedClass(PurchaseRequestLine.class);
    conf.addAnnotatedClass(RecapitulationLine.class);
    conf.addAnnotatedClass(RequisitionAndIssueSlip.class);
    conf.addAnnotatedClass(RequisitionAndIssueSlipLine.class);
    conf.addAnnotatedClass(RSMI.class);
    conf.addAnnotatedClass(RSMILine.class);
    conf.addAnnotatedClass(WasteMaterialsReport.class);
    conf.addAnnotatedClass(WasteMaterialsReportLine.class);
    sessionFactory=conf.buildSessionFactory();
    createAdminAccount();
    return true;
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    sessionFactory=null;
    return false;
  }
}",0.9910123791758522
155458,"@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String longUrl=req.getParameter(""String_Node_Str"");
  log.info(""String_Node_Str"" + longUrl);
  ShortenerService service=new ShortenerService();
  ShortUrl shortUrl=service.shorten(longUrl);
  req.getSession().setAttribute(""String_Node_Str"",shortUrl);
  log.info(""String_Node_Str"" + shortUrl);
  resp.sendRedirect(""String_Node_Str"");
}","@Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String longUrl=req.getParameter(""String_Node_Str"");
  log.info(""String_Node_Str"" + longUrl);
  ShortenerService service=new ShortenerService();
  ShortUrl shortUrl=service.shorten(longUrl);
  req.getSession().setAttribute(""String_Node_Str"",shortUrl.toString());
  resp.sendRedirect(""String_Node_Str"");
}",0.8898978433598184
155459,"public void shutdown(){
}","public void shutdown(){
  serverIdArray=null;
}",0.6944444444444444
155460,"/** 
 * Build the server ID byte array that will be prepended in generated UIDs. Once built, the value is cached for the duration of the JVM lifespan.
 * @return the server ID.
 */
public byte[] buildServerIdArray(){
  if (serverIdArray == null) {
    try {
      serverIdArray=serverId.substring(0,Math.min(serverId.length(),MAX_SERVER_ID_LENGTH)).getBytes(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"");
      try {
        serverIdArray=InetAddress.getLocalHost().getHostAddress().getBytes(""String_Node_Str"");
      }
 catch (      Exception ex2) {
        final String unknownServerId=""String_Node_Str"";
        log.warn(""String_Node_Str"" + unknownServerId + ""String_Node_Str"");
        serverIdArray=unknownServerId.getBytes();
      }
    }
    if (serverIdArray.length > MAX_SERVER_ID_LENGTH) {
      byte[] truncatedServerId=new byte[MAX_SERVER_ID_LENGTH];
      System.arraycopy(serverIdArray,0,truncatedServerId,0,MAX_SERVER_ID_LENGTH);
      serverIdArray=truncatedServerId;
    }
    String serverIdArrayAsString=new String(serverIdArray);
    if (serverId == null)     serverId=serverIdArrayAsString;
    log.info(""String_Node_Str"" + serverIdArrayAsString + ""String_Node_Str"");
  }
  return serverIdArray;
}","/** 
 * Build the server ID byte array that will be prepended in generated UIDs. Once built, the value is cached for the duration of the JVM lifespan.
 * @return the server ID.
 */
public synchronized byte[] buildServerIdArray(){
  if (serverIdArray == null) {
    try {
      serverIdArray=serverId.substring(0,Math.min(serverId.length(),MAX_SERVER_ID_LENGTH)).getBytes(""String_Node_Str"");
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"");
      try {
        serverIdArray=InetAddress.getLocalHost().getHostAddress().getBytes(""String_Node_Str"");
      }
 catch (      Exception ex2) {
        final String unknownServerId=""String_Node_Str"";
        log.warn(""String_Node_Str"" + unknownServerId + ""String_Node_Str"");
        serverIdArray=unknownServerId.getBytes();
      }
    }
    if (serverIdArray.length > MAX_SERVER_ID_LENGTH) {
      byte[] truncatedServerId=new byte[MAX_SERVER_ID_LENGTH];
      System.arraycopy(serverIdArray,0,truncatedServerId,0,MAX_SERVER_ID_LENGTH);
      serverIdArray=truncatedServerId;
    }
    String serverIdArrayAsString=new String(serverIdArray);
    if (serverId == null)     serverId=serverIdArrayAsString;
    log.info(""String_Node_Str"" + serverIdArrayAsString + ""String_Node_Str"");
  }
  return serverIdArray;
}",0.9948717948717948
155461,"/** 
 * Clear services references. Called at the end of the shutdown procedure.
 */
protected static synchronized void clear(){
  transactionManager=null;
  transactionSynchronizationRegistry=null;
  configuration=null;
  journal=null;
  taskScheduler=null;
  resourceLoader=null;
  recoverer=null;
  executor=null;
}","/** 
 * Clear services references. Called at the end of the shutdown procedure.
 */
protected synchronized static void clear(){
  transactionManager=null;
  transactionSynchronizationRegistry=null;
  configuration=null;
  journal=null;
  taskScheduler=null;
  resourceLoader=null;
  recoverer=null;
  executor=null;
}",0.9779179810725552
155462,"/** 
 * <p>Swap the active and the passive journal files so that the active one becomes passive and the passive one becomes active.</p> List of actions taken by this method: <ul> <li>copy dangling COMMITTING records to the passive log file.</li> <li>update header timestamp of passive log file (makes it become active).</li> <li>do a force on passive log file. It is now the active file.</li> <li>switch references of active/passive files.</li> </ul>
 * @throws java.io.IOException in case of disk IO failure.
 */
private void swapJournalFiles() throws IOException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + getPassiveTransactionLogAppender());
  TransactionLogAppender passiveTla=getPassiveTransactionLogAppender();
  passiveTla.getHeader().rewind();
  copyDanglingRecords(activeTla,passiveTla);
  passiveTla.getHeader().setTimestamp(MonotonicClock.currentTimeMillis());
  passiveTla.force();
  if (activeTla == tla1) {
    activeTla=tla2;
  }
 else {
    activeTla=tla1;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
}","/** 
 * <p>Swap the active and the passive journal files so that the active one becomes passive and the passive one becomes active.</p> List of actions taken by this method: <ul> <li>copy dangling COMMITTING records to the passive log file.</li> <li>update header timestamp of passive log file (makes it become active).</li> <li>do a force on passive log file. It is now the active file.</li> <li>switch references of active/passive files.</li> </ul>
 * @throws java.io.IOException in case of disk IO failure.
 */
private synchronized void swapJournalFiles() throws IOException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + getPassiveTransactionLogAppender());
  TransactionLogAppender passiveTla=getPassiveTransactionLogAppender();
  passiveTla.getHeader().rewind();
  copyDanglingRecords(activeTla,passiveTla);
  passiveTla.getHeader().setTimestamp(MonotonicClock.currentTimeMillis());
  passiveTla.force();
  if (activeTla == tla1) {
    activeTla=tla2;
  }
 else {
    activeTla=tla1;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"");
}",0.9938881053126468
155463,"/** 
 * @return the TransactionFileAppender of the passive journal file.
 */
private TransactionLogAppender getPassiveTransactionLogAppender(){
  if (tla1 == activeTla)   return tla2;
  return tla1;
}","/** 
 * @return the TransactionFileAppender of the passive journal file.
 */
private synchronized TransactionLogAppender getPassiveTransactionLogAppender(){
  if (tla1 == activeTla)   return tla2;
  return tla1;
}",0.9685230024213076
155464,"/** 
 * Processes the enlisted elements with the given force command and notifies any waiting threads on success or failure.
 * @param forceCommand the command to run prior to notifying the threads.
 * @param elements     the elements that are processed by command (and are the base for notification).
 * @throws Exception the exception thrown by the command if it failed.
 */
public void processEnlisted(Callable forceCommand,Collection<ForceableElement> elements) throws Exception {
  forceLock.lock();
  try {
    try {
      forceCommand.call();
      recordSuccess(elements);
    }
 catch (    Exception e) {
      recordFailures(elements);
      throw e;
    }
  }
  finally {
    performedForce.signalAll();
    forceLock.unlock();
  }
}","/** 
 * Processes the enlisted elements with the given force command and notifies any waiting threads on success or failure.
 * @param forceCommand the command to run prior to notifying the threads.
 * @param elements     the elements that are processed by command (and are the base for notification).
 * @throws Exception the exception thrown by the command if it failed.
 */
public void processEnlisted(Callable forceCommand,Collection<ForceableElement> elements) throws Exception {
  forceLock.lock();
  try {
    try {
      forceCommand.call();
      recordSuccess(elements);
    }
 catch (    Exception e) {
      recordFailures(elements);
      throw e;
    }
 finally {
      performedForce.signalAll();
    }
  }
  finally {
    forceLock.unlock();
  }
}",0.9449236894492368
155465,"/** 
 * {@inheritDoc}
 */
@Override public synchronized void open() throws IOException {
  journalFilePath=getJournalFilePath();
  long journalSize=TransactionManagerServices.getConfiguration().getMaxLogSizeInMb() * 1024 * 1024* 3;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",journalFilePath,journalSize / 1024 / 1024);
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"");
  close();
  this.journalFile=new NioJournalFile(journalFilePath,journalSize);
  log.info(""String_Node_Str"",journalFilePath);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"",journalFilePath);
  for (  NioJournalFileRecord fileRecord : journalFile.readAll(false)) {
    ByteBuffer buffer=fileRecord.getPayload();
    try {
      buffer.mark();
      NioJournalRecord record=new NioJournalRecord(buffer,fileRecord.isValid());
      if (!fileRecord.isValid()) {
        log.error(""String_Node_Str"" + ""String_Node_Str"",record,journalFilePath);
      }
 else       trackedTransactions.track(record);
    }
 catch (    Exception e) {
      buffer.reset();
      String contentString=NioJournalFileRecord.bufferToString(buffer);
      log.error(""String_Node_Str"" + ""String_Node_Str"",contentString,journalFilePath);
    }
  }
  log.info(""String_Node_Str"",trackedTransactions.size());
  trackedTransactions.purgeTransactionsExceedingLifetime();
  journalWritingThread=new NioJournalWritingThread(trackedTransactions,journalFile,skipForce ? null : forceSynchronizer);
  log.info(""String_Node_Str"",journalFilePath);
}","/** 
 * {@inheritDoc}
 */
@Override public synchronized void open() throws IOException {
  journalFilePath=getJournalFilePath();
  long journalSize=TransactionManagerServices.getConfiguration().getMaxLogSizeInMb() * 1024L * 1024L* 3L;
  if (log.isDebugEnabled()) {
    log.debug(""String_Node_Str"",journalFilePath,journalSize / 1024 / 1024);
  }
  if (log.isTraceEnabled())   log.trace(""String_Node_Str"");
  close();
  this.journalFile=new NioJournalFile(journalFilePath,journalSize);
  log.info(""String_Node_Str"",journalFilePath);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"",journalFilePath);
  for (  NioJournalFileRecord fileRecord : journalFile.readAll(false)) {
    ByteBuffer buffer=fileRecord.getPayload();
    try {
      buffer.mark();
      NioJournalRecord record=new NioJournalRecord(buffer,fileRecord.isValid());
      if (!fileRecord.isValid()) {
        log.error(""String_Node_Str"" + ""String_Node_Str"",record,journalFilePath);
      }
 else       trackedTransactions.track(record);
    }
 catch (    Exception e) {
      buffer.reset();
      String contentString=NioJournalFileRecord.bufferToString(buffer);
      log.error(""String_Node_Str"" + ""String_Node_Str"",contentString,journalFilePath);
    }
  }
  log.info(""String_Node_Str"",trackedTransactions.size());
  trackedTransactions.purgeTransactionsExceedingLifetime();
  journalWritingThread=new NioJournalWritingThread(trackedTransactions,journalFile,skipForce ? null : forceSynchronizer);
  log.info(""String_Node_Str"",journalFilePath);
}",0.9990128331688056
155466,"public NioJournalFile(File file,long initialJournalSize) throws IOException {
  this.file=file;
  raf=new RandomAccessFile(file,""String_Node_Str"");
  fileChannel=raf.getChannel();
  lock=fileChannel.lock();
  final boolean createHeader=raf.length() == 0;
  try {
    readJournalHeader();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + file + ""String_Node_Str"",e);
    close();
    throw e;
  }
  this.journalSize=Math.max(initialJournalSize,raf.length());
  growJournal(this.journalSize);
  if (createHeader)   writeJournalHeader();
 else {
    NioJournalFileIterable it=(NioJournalFileIterable)readRecords(delimiter,fileChannel,false);
    long position=it.findPositionAfterLastRecord();
    fileChannel.position(Math.max(FIXED_HEADER_SIZE,position));
  }
}","public NioJournalFile(File file,long initialJournalSize) throws IOException {
  this.file=file;
  raf=new RandomAccessFile(file,""String_Node_Str"");
  fileChannel=raf.getChannel();
  lock=fileChannel.lock();
  final boolean createHeader=raf.length() == 0;
  try {
    readJournalHeader();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"" + file + ""String_Node_Str"",e);
    close();
    throw e;
  }
  this.journalSize.set(Math.max(initialJournalSize,raf.length()));
  growJournal(this.journalSize.get());
  if (createHeader)   writeJournalHeader();
 else {
    NioJournalFileIterable it=(NioJournalFileIterable)readRecords(delimiter,fileChannel,false);
    long position=it.findPositionAfterLastRecord();
    fileChannel.position(Math.max(FIXED_HEADER_SIZE,position));
  }
}",0.9916826615483044
155467,"public synchronized void growJournal(long newSize) throws IOException {
  if (newSize >= journalSize) {
    raf.setLength(newSize);
    journalSize=newSize;
  }
}","public synchronized void growJournal(long newSize) throws IOException {
  if (newSize >= journalSize.get()) {
    raf.setLength(newSize);
    journalSize.set(newSize);
  }
}",0.9611940298507464
155468,"public synchronized long getSize(){
  return journalSize;
}","public synchronized long getSize(){
  return journalSize.get();
}",0.9516129032258064
155469,"/** 
 * Closes the journal.
 * @throws IOException in case of the operation failed.
 */
public synchronized void close() throws IOException {
  try {
    if (fileChannel != null) {
      force();
      fileChannel.close();
    }
  }
  finally {
    fileChannel=null;
    lock=null;
  }
}","/** 
 * Closes the journal.
 * @throws IOException in case of the operation failed.
 */
public synchronized void close() throws IOException {
  try {
    if (fileChannel != null) {
      force();
      try {
        lock.release();
      }
  finally {
        fileChannel.close();
      }
    }
  }
  finally {
    fileChannel=null;
    lock=null;
  }
}",0.896875
155470,"/** 
 * Returns the remaining capacity in this journal until the rollover happens.
 * @return the remaining capacity in this journal until the rollover happens.
 * @throws IOException in case of the operation failed.
 */
public long remainingCapacity() throws IOException {
  return Math.max(0,journalSize - fileChannel.position());
}","/** 
 * Returns the remaining capacity in this journal until the rollover happens.
 * @return the remaining capacity in this journal until the rollover happens.
 * @throws IOException in case of the operation failed.
 */
public long remainingCapacity() throws IOException {
  return Math.max(0,journalSize.get() - fileChannel.position());
}",0.9910979228486648
155471,"private void consumePreviousRecord(){
  if (buffer.hasRemaining()) {
    final int limit=buffer.limit(), cap=buffer.capacity();
    buffer.limit(cap).position(Math.min(cap,limit + NioJournalFileRecord.RECORD_TRAILER_SIZE));
  }
}","private void consumePreviousRecord(){
  if (buffer.hasRemaining()) {
    final int limit=buffer.limit(), cap=buffer.capacity();
    buffer.limit(cap).position(Math.min(cap,limit + RECORD_TRAILER_SIZE));
  }
}",0.9519450800915332
155472,"@Override public boolean hasNext(){
  while (nextEntry == null && readNextEntry()) {
    nextEntry=new NioJournalFileRecord(delimiter,buffer);
    readEntries++;
    if (buffer.getInt(buffer.position() + reverseCrc32Offset) != nextEntry.calculateCrc32()) {
      if (readInvalid) {
        log.warn(""String_Node_Str"",nextEntry);
        nextEntry.markInvalid();
      }
 else {
        log.warn(""String_Node_Str"",nextEntry);
        nextEntry=null;
      }
      brokenEntries++;
    }
 else {
      positionAfterLastRecord=bufferPosition + buffer.limit() + NioJournalFileRecord.RECORD_TRAILER_SIZE;
    }
  }
  return nextEntry != null;
}","@Override public boolean hasNext(){
  while (nextEntry == null && readNextEntry()) {
    nextEntry=new NioJournalFileRecord(delimiter,buffer);
    readEntries++;
    if (buffer.getInt(buffer.position() + reverseCrc32Offset) != nextEntry.calculateCrc32()) {
      if (readInvalid) {
        log.warn(""String_Node_Str"",nextEntry);
        nextEntry.markInvalid();
      }
 else {
        log.warn(""String_Node_Str"",nextEntry);
        nextEntry=null;
      }
      brokenEntries++;
    }
 else {
      positionAfterLastRecord=bufferPosition + buffer.limit() + RECORD_TRAILER_SIZE;
    }
  }
  return nextEntry != null;
}",0.9832935560859188
155473,"private boolean readNextEntry(){
  consumePreviousRecord();
  while (true) {
    buffer.limit(buffer.capacity());
    int recordLength=NioJournalFileRecord.findNextRecord(buffer,delimiter);
    NioJournalFileRecord.ReadStatus readStatus=NioJournalFileRecord.ReadStatus.decode(recordLength);
switch (readStatus) {
case foundPartialRecord:
      if (buffer.position() == 0) {
        int newSize=buffer.capacity() + 4 * 1024;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"",newSize);
        }
        buffer=ByteBuffer.allocate(newSize).put(buffer);
      }
 else       if (buffer.hasRemaining()) {
        if (log.isTraceEnabled()) {
          log.trace(""String_Node_Str"" + ""String_Node_Str"",buffer.remaining());
        }
        buffer.compact();
      }
    break;
case noHeaderInBuffer:
  buffer.clear();
break;
}
if (readStatus != NioJournalFileRecord.ReadStatus.readOk) {
try {
bufferPosition=position - buffer.position();
int readBytes=fileChannel.read(buffer,position);
if (readBytes == -1) break;
position+=readBytes;
buffer.flip();
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
 else {
buffer.limit(buffer.position() + recordLength);
return true;
}
}
return false;
}","private boolean readNextEntry(){
  consumePreviousRecord();
  while (true) {
    buffer.limit(buffer.capacity());
    int recordLength=NioJournalFileRecord.findNextRecord(buffer,delimiter);
    NioJournalFileRecord.ReadStatus readStatus=NioJournalFileRecord.ReadStatus.decode(recordLength);
switch (readStatus) {
case FoundPartialRecord:
      if (buffer.position() == 0) {
        int newSize=buffer.capacity() + 4 * 1024;
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"",newSize);
        }
        buffer=ByteBuffer.allocate(newSize).put(buffer);
      }
 else       if (buffer.hasRemaining()) {
        if (log.isTraceEnabled()) {
          log.trace(""String_Node_Str"" + ""String_Node_Str"",buffer.remaining());
        }
        buffer.compact();
      }
    break;
case NoHeaderInBuffer:
  buffer.clear();
break;
}
if (readStatus != NioJournalFileRecord.ReadStatus.ReadOk) {
try {
bufferPosition=position - buffer.position();
int readBytes=fileChannel.read(buffer,position);
if (readBytes == -1) break;
position+=readBytes;
buffer.flip();
}
 catch (IOException e) {
throw new RuntimeException(e);
}
}
 else {
buffer.limit(buffer.position() + recordLength);
return true;
}
}
return false;
}",0.9975369458128078
155474,"public void testRestartWithLoader() throws Exception {
  for (int i=0; i < 3; i++) {
    TransactionManagerServices.getConfiguration().setResourceConfigurationFilename(getClass().getResource(""String_Node_Str"").getFile());
    BitronixTransactionManager tm=TransactionManagerServices.getTransactionManager();
    assertEquals(""String_Node_Str"" + (i + 1),1,ResourceRegistrar.getResourcesUniqueNames().size());
    tm.shutdown();
    assertEquals(""String_Node_Str"" + (i + 1),0,ResourceRegistrar.getResourcesUniqueNames().size());
  }
}","public void testRestartWithLoader() throws Exception {
  for (int i=0; i < 3; i++) {
    String configFile=new File(getClass().getResource(""String_Node_Str"").toURI()).getPath();
    TransactionManagerServices.getConfiguration().setResourceConfigurationFilename(configFile);
    BitronixTransactionManager tm=TransactionManagerServices.getTransactionManager();
    assertEquals(""String_Node_Str"" + (i + 1),1,ResourceRegistrar.getResourcesUniqueNames().size());
    tm.shutdown();
    assertEquals(""String_Node_Str"" + (i + 1),0,ResourceRegistrar.getResourcesUniqueNames().size());
  }
}",0.8225806451612904
155475,"private static String evaluate(Properties properties,String value){
  String result=value;
  int startIndex=value.indexOf('$');
  if (startIndex > -1 && value.charAt(startIndex + 1) == '{') {
    int endIndex=value.indexOf('}');
    if (startIndex + 2 == endIndex)     throw new IllegalArgumentException(""String_Node_Str"");
    if (endIndex == -1)     throw new IllegalArgumentException(""String_Node_Str"" + value.substring(startIndex + 2));
    String subPropertyKey=value.substring(startIndex + 2,endIndex);
    String subPropertyValue=getString(properties,subPropertyKey,null);
    result=result.substring(0,startIndex) + subPropertyValue + result.substring(endIndex + 1);
    return evaluate(properties,result);
  }
  return result;
}","private static String evaluate(Properties properties,String value){
  String result=value;
  int startIndex=value.indexOf('$');
  if (startIndex > -1 && value.length() > startIndex + 1 && value.charAt(startIndex + 1) == '{') {
    int endIndex=value.indexOf('}');
    if (startIndex + 2 == endIndex)     throw new IllegalArgumentException(""String_Node_Str"");
    if (endIndex == -1)     throw new IllegalArgumentException(""String_Node_Str"" + value.substring(startIndex + 2));
    String subPropertyKey=value.substring(startIndex + 2,endIndex);
    String subPropertyValue=getString(properties,subPropertyKey,null);
    result=result.substring(0,startIndex) + subPropertyValue + result.substring(endIndex + 1);
    return evaluate(properties,result);
  }
  return result;
}",0.9768058316766072
155476,"public void testGetString() throws Exception {
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  try {
    Configuration.getString(props,""String_Node_Str"",null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
  try {
    Configuration.getString(props,""String_Node_Str"",null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
}","public void testGetString() throws Exception {
  Properties props=new Properties();
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  props.setProperty(""String_Node_Str"",""String_Node_Str"");
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  try {
    Configuration.getString(props,""String_Node_Str"",null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
  try {
    Configuration.getString(props,""String_Node_Str"",null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
  assertEquals(""String_Node_Str"",Configuration.getString(props,""String_Node_Str"",null));
  try {
    Configuration.getString(props,""String_Node_Str"",null);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
}",0.8879621907144843
155477,"public void rollback(Xid xid) throws XAException {
  if (xid == null)   throw new BitronixXAException(""String_Node_Str"",XAException.XAER_INVAL);
  if (state == NO_TX) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == STARTED) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == ENDED) {
    if (this.xid.equals(xid)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xlatedState() + ""String_Node_Str""+ xid);
    }
 else     throw new BitronixXAException(""String_Node_Str"" + this.xid + ""String_Node_Str""+ xid,XAException.XAER_PROTO);
  }
 else   if (state == PREPARED) {
    this.state=NO_TX;
    throw new BitronixXAException(""String_Node_Str"" + this.xid,XAException.XA_HEURCOM);
  }
  try {
    connection.rollback();
    this.state=NO_TX;
    this.xid=null;
  }
 catch (  SQLException ex) {
    throw new BitronixXAException(""String_Node_Str"",XAException.XAER_RMERR,ex);
  }
  try {
    if (autocommitActiveBeforeStart) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      connection.setAutoCommit(true);
    }
  }
 catch (  SQLException ex) {
    throw new BitronixXAException(""String_Node_Str"",XAException.XAER_RMERR);
  }
}","public void rollback(Xid xid) throws XAException {
  if (xid == null)   throw new BitronixXAException(""String_Node_Str"",XAException.XAER_INVAL);
  if (state == NO_TX) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == STARTED) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == ENDED) {
    if (this.xid.equals(xid)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xlatedState() + ""String_Node_Str""+ xid);
    }
 else     throw new BitronixXAException(""String_Node_Str"" + this.xid + ""String_Node_Str""+ xid,XAException.XAER_PROTO);
  }
 else   if (state == PREPARED) {
    this.state=NO_TX;
    throw new BitronixXAException(""String_Node_Str"" + this.xid,XAException.XA_HEURCOM);
  }
  try {
    connection.rollback();
  }
 catch (  SQLException ex) {
    throw new BitronixXAException(""String_Node_Str"",XAException.XAER_RMERR,ex);
  }
 finally {
    this.state=NO_TX;
    this.xid=null;
  }
  try {
    if (autocommitActiveBeforeStart) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      connection.setAutoCommit(true);
    }
  }
 catch (  SQLException ex) {
    throw new BitronixXAException(""String_Node_Str"",XAException.XAER_RMERR);
  }
}",0.9625915927497108
155478,"public void rollback(Xid xid) throws XAException {
  if (xid == null)   throw new BitronixXAException(""String_Node_Str"",XAException.XAER_INVAL);
  if (state == NO_TX) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == STARTED) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == ENDED) {
    if (this.xid.equals(xid)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xlatedState() + ""String_Node_Str""+ xid);
    }
 else     throw new BitronixXAException(""String_Node_Str"" + this.xid + ""String_Node_Str""+ xid,XAException.XAER_PROTO);
  }
 else   if (state == PREPARED) {
    this.state=NO_TX;
    throw new BitronixXAException(""String_Node_Str"" + this.xid,XAException.XA_HEURCOM);
  }
  try {
    session.rollback();
    this.state=NO_TX;
    this.xid=null;
  }
 catch (  JMSException ex) {
    throw new BitronixXAException(""String_Node_Str"",XAException.XAER_RMERR,ex);
  }
}","public void rollback(Xid xid) throws XAException {
  if (xid == null)   throw new BitronixXAException(""String_Node_Str"",XAException.XAER_INVAL);
  if (state == NO_TX) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == STARTED) {
    throw new BitronixXAException(""String_Node_Str"" + xid,XAException.XAER_PROTO);
  }
 else   if (state == ENDED) {
    if (this.xid.equals(xid)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xlatedState() + ""String_Node_Str""+ xid);
    }
 else     throw new BitronixXAException(""String_Node_Str"" + this.xid + ""String_Node_Str""+ xid,XAException.XAER_PROTO);
  }
 else   if (state == PREPARED) {
    this.state=NO_TX;
    throw new BitronixXAException(""String_Node_Str"" + this.xid,XAException.XA_HEURCOM);
  }
  try {
    session.rollback();
  }
 catch (  JMSException ex) {
    throw new BitronixXAException(""String_Node_Str"",XAException.XAER_RMERR,ex);
  }
 finally {
    this.state=NO_TX;
    this.xid=null;
  }
}",0.9524742773150416
155479,"private synchronized void detectJdbcVersion(Connection connection){
  if (jdbcVersionDetected > 0)   return;
  try {
    isValidMethod=connection.getClass().getMethod(""String_Node_Str"",new Class[]{Integer.TYPE});
    isValidMethod.invoke(connection,new Object[]{new Integer(DETECTION_TIMEOUT)});
    jdbcVersionDetected=4;
    if (!poolingDataSource.isEnableJdbc4ConnectionTest()) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    jdbcVersionDetected=3;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + connection.getClass() + ""String_Node_Str""+ jdbcVersionDetected+ ""String_Node_Str"");
}","private synchronized void detectJdbcVersion(Connection connection){
  if (jdbcVersionDetected > 0)   return;
  try {
    isValidMethod=connection.getClass().getMethod(""String_Node_Str"",new Class[]{Integer.TYPE});
    isValidMethod.invoke(connection,new Object[]{new Integer(DETECTION_TIMEOUT)});
    jdbcVersionDetected=4;
    if (!poolingDataSource.isEnableJdbc4ConnectionTest()) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    jdbcVersionDetected=3;
  }
catch (  AbstractMethodError er) {
    jdbcVersionDetected=3;
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + connection.getClass() + ""String_Node_Str""+ jdbcVersionDetected+ ""String_Node_Str"");
}",0.9525862068965516
155480,"private void applyLocalAutoCommit() throws SQLException {
  String localAutoCommit=getPoolingDataSource().getLocalAutoCommit();
  if (localAutoCommit != null) {
    if (localAutoCommit.equalsIgnoreCase(""String_Node_Str"")) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      connection.setAutoCommit(true);
    }
 else     if (localAutoCommit.equalsIgnoreCase(""String_Node_Str"")) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      connection.setAutoCommit(false);
    }
 else {
      if (log.isDebugEnabled())       log.warn(""String_Node_Str"" + localAutoCommit + ""String_Node_Str"");
    }
  }
}","private void applyLocalAutoCommit() throws SQLException {
  String localAutoCommit=getPoolingDataSource().getLocalAutoCommit();
  if (localAutoCommit != null) {
    if (localAutoCommit.equalsIgnoreCase(""String_Node_Str"")) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      connection.setAutoCommit(true);
    }
 else     if (localAutoCommit.equalsIgnoreCase(""String_Node_Str"")) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      connection.setAutoCommit(false);
    }
 else {
      log.warn(""String_Node_Str"" + localAutoCommit + ""String_Node_Str"");
    }
  }
}",0.97444089456869
155481,"public BitronixContext(){
  userTransactionName=TransactionManagerServices.getConfiguration().getJndiUserTransactionName();
  if (userTransactionName == null)   userTransactionName=DEFAULT_USER_TRANSACTION_NAME;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + userTransactionName + ""String_Node_Str"");
  userTransactionName=TransactionManagerServices.getConfiguration().getJndiTransactionSynchronizationRegistryName();
  if (synchronizationRegistryName == null)   synchronizationRegistryName=DEFAULT_SYNCHRONIZATION_REGISTRY_NAME;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizationRegistryName + ""String_Node_Str"");
}","public BitronixContext(){
  userTransactionName=TransactionManagerServices.getConfiguration().getJndiUserTransactionName();
  if (userTransactionName == null)   userTransactionName=DEFAULT_USER_TRANSACTION_NAME;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + userTransactionName + ""String_Node_Str"");
  synchronizationRegistryName=TransactionManagerServices.getConfiguration().getJndiTransactionSynchronizationRegistryName();
  if (synchronizationRegistryName == null)   synchronizationRegistryName=DEFAULT_SYNCHRONIZATION_REGISTRY_NAME;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizationRegistryName + ""String_Node_Str"");
}",0.9711246200607904
155482,"public void afterCompletion(int status){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + currentTxGtrid);
  statefulHolderTransactionMap.remove(currentTxGtrid);
}","public void afterCompletion(int status){
synchronized (XAPool.this) {
    statefulHolderTransactionMap.remove(currentTxGtrid);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + currentTxGtrid);
  }
}",0.4134366925064599
155483,"private void putSharedXaStatefulHolder(final XAStatefulHolder xaStatefulHolder){
  BitronixTransaction transaction=TransactionContextHelper.currentTransaction();
  if (transaction == null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder + ""String_Node_Str"");
    return;
  }
  final Uid currentTxGtrid=transaction.getResourceManager().getGtrid();
  ThreadLocal threadLocal=(ThreadLocal)statefulHolderTransactionMap.get(currentTxGtrid);
  if (threadLocal == null) {
    try {
      transaction.registerSynchronization(new Synchronization(){
        public void beforeCompletion(){
        }
        public void afterCompletion(        int status){
          if (log.isDebugEnabled())           log.debug(""String_Node_Str"" + currentTxGtrid);
          statefulHolderTransactionMap.remove(currentTxGtrid);
        }
      }
);
    }
 catch (    Exception e) {
      return;
    }
    threadLocal=new ThreadLocal();
    threadLocal.set(xaStatefulHolder);
    statefulHolderTransactionMap.put(currentTxGtrid,threadLocal);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + currentTxGtrid + ""String_Node_Str""+ xaStatefulHolder);
  }
 else {
    threadLocal.set(xaStatefulHolder);
  }
}","private void putSharedXaStatefulHolder(final XAStatefulHolder xaStatefulHolder){
  BitronixTransaction transaction=TransactionContextHelper.currentTransaction();
  if (transaction == null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder + ""String_Node_Str"");
    return;
  }
  final Uid currentTxGtrid=transaction.getResourceManager().getGtrid();
  ThreadLocal threadLocal=(ThreadLocal)statefulHolderTransactionMap.get(currentTxGtrid);
  if (threadLocal == null) {
    try {
      transaction.registerSynchronization(new Synchronization(){
        public void beforeCompletion(){
        }
        public void afterCompletion(        int status){
synchronized (XAPool.this) {
            statefulHolderTransactionMap.remove(currentTxGtrid);
            if (log.isDebugEnabled())             log.debug(""String_Node_Str"" + currentTxGtrid);
          }
        }
      }
);
    }
 catch (    Exception e) {
      return;
    }
    threadLocal=new ThreadLocal();
    threadLocal.set(xaStatefulHolder);
    statefulHolderTransactionMap.put(currentTxGtrid,threadLocal);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + currentTxGtrid + ""String_Node_Str""+ xaStatefulHolder);
  }
 else {
    threadLocal.set(xaStatefulHolder);
  }
}",0.939624150339864
155484,"public Object getConnectionHandle() throws Exception {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + this);
  int oldState=getState();
  setState(STATE_ACCESSIBLE);
  if (oldState == STATE_IN_POOL) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaConnection + ""String_Node_Str"");
    testConnection(connection);
    applyIsolationLevel();
    applyCursorHoldabilty();
    applyLocalAutoCommit();
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaConnection + ""String_Node_Str""+ Decoder.decodeXAStatefulHolderState(oldState)+ ""String_Node_Str"");
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + this);
  return new JdbcConnectionHandle(this,connection);
}","public Object getConnectionHandle() throws Exception {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + this);
  int oldState=getState();
  setState(STATE_ACCESSIBLE);
  if (oldState == STATE_IN_POOL) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaConnection + ""String_Node_Str"");
    testConnection(connection);
    applyIsolationLevel();
    applyCursorHoldabilty();
    if (TransactionContextHelper.currentTransaction() == null) {
      applyLocalAutoCommit();
    }
 else {
      connection.setAutoCommit(true);
    }
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaConnection + ""String_Node_Str""+ Decoder.decodeXAStatefulHolderState(oldState)+ ""String_Node_Str"");
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + this);
  return new JdbcConnectionHandle(this,connection);
}",0.9211356466876972
155485,"private void putSharedXaStatefulHolder(final XAStatefulHolder xaStatefulHolder){
  BitronixTransaction transaction=TransactionContextHelper.currentTransaction();
  if (transaction == null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder + ""String_Node_Str"");
    return;
  }
  final Uid currentTxGtrid=transaction.getResourceManager().getGtrid();
  ThreadLocal threadLocal=(ThreadLocal)statefulHolderTransactionMap.get(currentTxGtrid);
  if (threadLocal == null) {
    threadLocal=new ThreadLocal();
    threadLocal.set(xaStatefulHolder);
    statefulHolderTransactionMap.put(currentTxGtrid,threadLocal);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + currentTxGtrid + ""String_Node_Str""+ xaStatefulHolder);
    try {
      transaction.registerSynchronization(new Synchronization(){
        public void beforeCompletion(){
        }
        public void afterCompletion(        int status){
          if (log.isDebugEnabled())           log.debug(""String_Node_Str"" + currentTxGtrid);
          statefulHolderTransactionMap.remove(currentTxGtrid);
        }
      }
);
    }
 catch (    Exception e) {
      return;
    }
  }
 else {
    threadLocal.set(xaStatefulHolder);
  }
}","private void putSharedXaStatefulHolder(final XAStatefulHolder xaStatefulHolder){
  BitronixTransaction transaction=TransactionContextHelper.currentTransaction();
  if (transaction == null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder + ""String_Node_Str"");
    return;
  }
  final Uid currentTxGtrid=transaction.getResourceManager().getGtrid();
  ThreadLocal threadLocal=(ThreadLocal)statefulHolderTransactionMap.get(currentTxGtrid);
  if (threadLocal == null) {
    try {
      transaction.registerSynchronization(new Synchronization(){
        public void beforeCompletion(){
        }
        public void afterCompletion(        int status){
          if (log.isDebugEnabled())           log.debug(""String_Node_Str"" + currentTxGtrid);
          statefulHolderTransactionMap.remove(currentTxGtrid);
        }
      }
);
    }
 catch (    Exception e) {
      return;
    }
    threadLocal=new ThreadLocal();
    threadLocal.set(xaStatefulHolder);
    statefulHolderTransactionMap.put(currentTxGtrid,threadLocal);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + currentTxGtrid + ""String_Node_Str""+ xaStatefulHolder);
  }
 else {
    threadLocal.set(xaStatefulHolder);
  }
}",0.5330073349633252
155486,"private synchronized void waitForConnectionInPool() throws Exception {
  long remainingTime=bean.getAcquisitionTimeout() * 1000L;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + inPoolSize());
  while (inPoolSize() == 0) {
    long before=System.currentTimeMillis();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + remainingTime + ""String_Node_Str"");
      wait(remainingTime);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + inPoolSize());
    }
 catch (    InterruptedException ex) {
    }
    long now=System.currentTimeMillis();
    remainingTime-=(now - before);
    if (remainingTime <= 0) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      if (TransactionManagerServices.isTransactionManagerRunning())       TransactionManagerServices.getTransactionManager().dumpTransactionContexts();
      throw new Exception(""String_Node_Str"" + bean.getUniqueName() + ""String_Node_Str""+ bean.getAcquisitionTimeout()+ ""String_Node_Str"");
    }
  }
}","private synchronized void waitForConnectionInPool() throws Exception {
  long remainingTime=bean.getAcquisitionTimeout() * 1000L;
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + inPoolSize());
  while (inPoolSize() == 0) {
    long before=System.currentTimeMillis();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + remainingTime + ""String_Node_Str"");
      wait(remainingTime);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + inPoolSize());
    }
 catch (    InterruptedException ex) {
    }
    long now=System.currentTimeMillis();
    remainingTime-=(now - before);
    if (remainingTime <= 0 && inPoolSize() == 0) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      if (TransactionManagerServices.isTransactionManagerRunning())       TransactionManagerServices.getTransactionManager().dumpTransactionContexts();
      throw new Exception(""String_Node_Str"" + bean.getUniqueName() + ""String_Node_Str""+ bean.getAcquisitionTimeout()+ ""String_Node_Str"");
    }
  }
}",0.98989898989899
155487,"/** 
 * Commit transactions that have a dangling COMMITTING record in the journal. Step 2.
 * @return a Set of all committed GTRIDs encoded as strings.
 * @throws java.io.IOException if there is an I/O error reading the journal.
 */
private Set commitDanglingTransactions() throws IOException {
  Set committedGtrids=new HashSet();
  Map danglingRecords=TransactionManagerServices.getJournal().collectDanglingRecords();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + danglingRecords.size() + ""String_Node_Str"");
  Iterator it=danglingRecords.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Uid gtrid=(Uid)entry.getKey();
    TransactionLogRecord tlog=(TransactionLogRecord)entry.getValue();
    Set uniqueNames=tlog.getUniqueNames();
    Set danglingTransactions=getDanglingTransactionsInRecoveredXids(uniqueNames,tlog.getGtrid());
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + gtrid);
    commit(danglingTransactions);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + gtrid);
    committedGtrids.add(gtrid);
    Set participatingUniqueNames=filterParticipatingUniqueNamesInRecoveredXids(uniqueNames);
    if (participatingUniqueNames.size() > 0) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + gtrid + ""String_Node_Str""+ buildUniqueNamesString(participatingUniqueNames)+ ""String_Node_Str"");
      TransactionManagerServices.getJournal().log(Status.STATUS_COMMITTED,tlog.getGtrid(),participatingUniqueNames);
    }
 else {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + gtrid + ""String_Node_Str"");
      committedGtrids.remove(gtrid);
    }
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + committedGtrids.size() + ""String_Node_Str"");
  return committedGtrids;
}","/** 
 * Commit transactions that have a dangling COMMITTING record in the journal. Step 2.
 * @return a Set of all committed GTRIDs encoded as strings.
 * @throws java.io.IOException if there is an I/O error reading the journal.
 */
private Set commitDanglingTransactions() throws IOException {
  Set committedGtrids=new HashSet();
  Map danglingRecords=TransactionManagerServices.getJournal().collectDanglingRecords();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + danglingRecords.size() + ""String_Node_Str"");
  Iterator it=danglingRecords.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Uid gtrid=(Uid)entry.getKey();
    TransactionLogRecord tlog=(TransactionLogRecord)entry.getValue();
    Set uniqueNames=tlog.getUniqueNames();
    Set danglingTransactions=getDanglingTransactionsInRecoveredXids(uniqueNames,tlog.getGtrid());
    if (danglingTransactions.size() > 0) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + gtrid);
      commit(danglingTransactions);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + gtrid);
      committedGtrids.add(gtrid);
      Set participatingUniqueNames=filterParticipatingUniqueNamesInRecoveredXids(uniqueNames);
      if (participatingUniqueNames.size() > 0) {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + gtrid + ""String_Node_Str""+ buildUniqueNamesString(participatingUniqueNames)+ ""String_Node_Str"");
        TransactionManagerServices.getJournal().log(Status.STATUS_COMMITTED,tlog.getGtrid(),participatingUniqueNames);
      }
 else {
        if (log.isDebugEnabled())         log.debug(""String_Node_Str"" + gtrid + ""String_Node_Str"");
        committedGtrids.remove(gtrid);
      }
    }
 else {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + gtrid);
    }
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + committedGtrids.size() + ""String_Node_Str"");
  return committedGtrids;
}",0.9549407114624506
155488,"private void fireAfterCompletionEvent(){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizationScheduler.size() + ""String_Node_Str"");
  Iterator it=synchronizationScheduler.iterator();
  while (it.hasNext()) {
    Synchronization synchronization=(Synchronization)it.next();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + synchronization + ""String_Node_Str""+ Decoder.decodeStatus(status));
      synchronization.afterCompletion(status);
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + synchronization,ex);
    }
  }
  resourceManager.clearXAResourceHolderStates();
  ManagementRegistrar.unregister(""String_Node_Str"" + resourceManager.getGtrid());
}","private void fireAfterCompletionEvent(){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizationScheduler.size() + ""String_Node_Str"");
  Iterator it=synchronizationScheduler.iterator();
  while (it.hasNext()) {
    Synchronization synchronization=(Synchronization)it.next();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + synchronization + ""String_Node_Str""+ Decoder.decodeStatus(status));
      synchronization.afterCompletion(status);
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + synchronization,ex);
    }
  }
  ManagementRegistrar.unregister(""String_Node_Str"" + resourceManager.getGtrid());
}",0.8655643421998562
155489,"/** 
 * Remove this transaction's   {@link XAResourceHolderState} from all enlisted{@link bitronix.tm.resource.common.XAResourceHolder}s.
 */
public void clearXAResourceHolderStates(){
  Iterator it=resources.iterator();
  while (it.hasNext()) {
    XAResourceHolderState xaResourceHolderState=(XAResourceHolderState)it.next();
    boolean mightHaveMore=true;
    while (mightHaveMore)     mightHaveMore=xaResourceHolderState.getXAResourceHolder().removeXAResourceHolderState(xaResourceHolderState);
    it.remove();
  }
}","/** 
 * Remove this transaction's   {@link XAResourceHolderState} from all enlisted{@link bitronix.tm.resource.common.XAResourceHolder}s.
 */
public void clearXAResourceHolderStates(){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + resources.size() + ""String_Node_Str"");
  Iterator it=resources.iterator();
  while (it.hasNext()) {
    XAResourceHolderState xaResourceHolderState=(XAResourceHolderState)it.next();
    boolean mightHaveMore=true;
    while (mightHaveMore) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaResourceHolderState);
      mightHaveMore=xaResourceHolderState.getXAResourceHolder().removeXAResourceHolderState(xaResourceHolderState);
    }
    it.remove();
  }
}",0.8385542168674699
155490,"public DeferredReleaseSynchronization(XAStatefulHolder xaStatefulHolder){
  this.xaStatefulHolder=xaStatefulHolder;
}","public DeferredReleaseSynchronization(BitronixTransaction transaction,XAStatefulHolder xaStatefulHolder){
  this.transaction=transaction;
  this.xaStatefulHolder=xaStatefulHolder;
}",0.785234899328859
155491,"public void afterCompletion(int status){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaStatefulHolder);
  xaStatefulHolder.setState(XAResourceHolder.STATE_IN_POOL);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaStatefulHolder);
}","public void afterCompletion(int status){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaStatefulHolder);
  transaction.getResourceManager().clearXAResourceHolderStates();
  xaStatefulHolder.setState(XAResourceHolder.STATE_IN_POOL);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaStatefulHolder);
}",0.8877551020408163
155492,"/** 
 * Switch the   {@link XAStatefulHolder}'s state appropriately after the acquired resource handle has been closed. The pooled resource will either be marked as closed or not accessible, depending on the value of the bean's <code>deferConnectionRelease</code> property and will be marked for release after 2PC execution in the latter case.
 * @param xaStatefulHolder the {@link XAStatefulHolder} to requeue.
 * @param bean the {@link ResourceBean} of the {@link XAResourceHolder}.
 * @throws BitronixSystemException if an internal error happens.
 */
public static void requeue(XAStatefulHolder xaStatefulHolder,ResourceBean bean) throws BitronixSystemException {
  BitronixTransaction currentTransaction=currentTransaction();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaStatefulHolder + ""String_Node_Str""+ currentTransaction);
  if (!TransactionContextHelper.isInEnlistingGlobalTransactionContext(xaStatefulHolder,currentTransaction)) {
    if (!TransactionContextHelper.isEnlistedInSomeTransaction(xaStatefulHolder)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaStatefulHolder);
      xaStatefulHolder.setState(XAResourceHolder.STATE_IN_POOL);
    }
 else {
      throw new BitronixSystemException(""String_Node_Str"");
    }
  }
 else   if (bean.getDeferConnectionRelease()) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder);
    if (!TransactionContextHelper.isAlreadyRegisteredForDeferredRelease(xaStatefulHolder,currentTransaction)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaStatefulHolder);
      DeferredReleaseSynchronization synchronization=new DeferredReleaseSynchronization(xaStatefulHolder);
      currentTransaction.getSynchronizationScheduler().add(synchronization,Scheduler.ALWAYS_LAST_POSITION);
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder);
    xaStatefulHolder.setState(XAResourceHolder.STATE_NOT_ACCESSIBLE);
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder);
    xaStatefulHolder.setState(XAResourceHolder.STATE_IN_POOL);
  }
}","/** 
 * Switch the   {@link XAStatefulHolder}'s state appropriately after the acquired resource handle has been closed. The pooled resource will either be marked as closed or not accessible, depending on the value of the bean's <code>deferConnectionRelease</code> property and will be marked for release after 2PC execution in the latter case.
 * @param xaStatefulHolder the {@link XAStatefulHolder} to requeue.
 * @param bean the {@link ResourceBean} of the {@link XAResourceHolder}.
 * @throws BitronixSystemException if an internal error happens.
 */
public static void requeue(XAStatefulHolder xaStatefulHolder,ResourceBean bean) throws BitronixSystemException {
  BitronixTransaction currentTransaction=currentTransaction();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaStatefulHolder + ""String_Node_Str""+ currentTransaction);
  if (!TransactionContextHelper.isInEnlistingGlobalTransactionContext(xaStatefulHolder,currentTransaction)) {
    if (!TransactionContextHelper.isEnlistedInSomeTransaction(xaStatefulHolder)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaStatefulHolder);
      xaStatefulHolder.setState(XAResourceHolder.STATE_IN_POOL);
    }
 else {
      throw new BitronixSystemException(""String_Node_Str"");
    }
  }
 else   if (bean.getDeferConnectionRelease()) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder);
    if (!TransactionContextHelper.isAlreadyRegisteredForDeferredRelease(xaStatefulHolder,currentTransaction)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaStatefulHolder);
      DeferredReleaseSynchronization synchronization=new DeferredReleaseSynchronization(currentTransaction,xaStatefulHolder);
      currentTransaction.getSynchronizationScheduler().add(synchronization,Scheduler.ALWAYS_LAST_POSITION);
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder);
    xaStatefulHolder.setState(XAResourceHolder.STATE_NOT_ACCESSIBLE);
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaStatefulHolder);
    xaStatefulHolder.setState(XAResourceHolder.STATE_IN_POOL);
  }
}",0.9956028697060866
155493,"/** 
 * Remove this transaction's   {@link XAResourceHolderState} from all enlisted{@link bitronix.tm.resource.common.XAResourceHolder}s.
 */
public void clearXAResourceHolderStates(){
  Iterator it=resources.iterator();
  while (it.hasNext()) {
    XAResourceHolderState xaResourceHolderState=(XAResourceHolderState)it.next();
    xaResourceHolderState.getXAResourceHolder().getAllXAResourceHolderStates().remove(xaResourceHolderState);
    it.remove();
  }
}","/** 
 * Remove this transaction's   {@link XAResourceHolderState} from all enlisted{@link bitronix.tm.resource.common.XAResourceHolder}s.
 */
public void clearXAResourceHolderStates(){
  Iterator it=resources.iterator();
  while (it.hasNext()) {
    XAResourceHolderState xaResourceHolderState=(XAResourceHolderState)it.next();
    boolean mightHaveMore=true;
    while (mightHaveMore)     mightHaveMore=xaResourceHolderState.getXAResourceHolder().getAllXAResourceHolderStates().remove(xaResourceHolderState);
    it.remove();
  }
}",0.9274193548387096
155494,"public void commit() throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, SystemException {
  if (status == Status.STATUS_NO_TRANSACTION)   throw new IllegalStateException(""String_Node_Str"");
  if (isDone())   throw new IllegalStateException(""String_Node_Str"");
  fireBeforeCompletionEvent();
  TransactionManagerServices.getTaskScheduler().cancelTransactionTimeout(this);
  if (timedOut()) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    rollback();
    throw new BitronixRollbackException(""String_Node_Str"");
  }
  if (status == Status.STATUS_MARKED_ROLLBACK) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    rollback();
    throw new BitronixRollbackException(""String_Node_Str"");
  }
  try {
    try {
      delistUnclosedResources(XAResource.TMSUCCESS);
    }
 catch (    BitronixRollbackException ex) {
      rollbackPrepareFailure(ex);
      throw new BitronixRollbackException(""String_Node_Str"",ex);
    }
    List interestedResources=new ArrayList();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + resourceManager.size() + ""String_Node_Str"");
      preparer.prepare(this,interestedResources);
    }
 catch (    RollbackException ex) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      rollbackPrepareFailure(ex);
      throw new BitronixRollbackException(""String_Node_Str"" + this,ex);
    }
    if (log.isDebugEnabled())     log.debug(interestedResources.size() + ""String_Node_Str"");
    committer.commit(this,interestedResources);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + this);
  }
  finally {
    fireAfterCompletionEvent();
  }
}","public void commit() throws RollbackException, HeuristicMixedException, HeuristicRollbackException, SecurityException, SystemException {
  if (status == Status.STATUS_NO_TRANSACTION)   throw new IllegalStateException(""String_Node_Str"");
  if (isDone())   throw new IllegalStateException(""String_Node_Str"");
  TransactionManagerServices.getTaskScheduler().cancelTransactionTimeout(this);
  if (timedOut()) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    rollback();
    throw new BitronixRollbackException(""String_Node_Str"");
  }
  if (status == Status.STATUS_MARKED_ROLLBACK) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"");
    rollback();
    throw new BitronixRollbackException(""String_Node_Str"");
  }
  fireBeforeCompletionEvent();
  try {
    try {
      delistUnclosedResources(XAResource.TMSUCCESS);
    }
 catch (    BitronixRollbackException ex) {
      rollbackPrepareFailure(ex);
      throw new BitronixRollbackException(""String_Node_Str"",ex);
    }
    List interestedResources=new ArrayList();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + resourceManager.size() + ""String_Node_Str"");
      preparer.prepare(this,interestedResources);
    }
 catch (    RollbackException ex) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
      rollbackPrepareFailure(ex);
      throw new BitronixRollbackException(""String_Node_Str"" + this,ex);
    }
    if (log.isDebugEnabled())     log.debug(interestedResources.size() + ""String_Node_Str"");
    committer.commit(this,interestedResources);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + this);
  }
  finally {
    fireAfterCompletionEvent();
  }
}",0.9818394844756884
155495,"public void beforeCompletion(){
}","public void beforeCompletion(){
  beforeCount++;
}",0.7951807228915663
155496,"public void testMarkedRollback() throws Exception {
  btm.begin();
  btm.setRollbackOnly();
  assertEquals(Status.STATUS_MARKED_ROLLBACK,btm.getTransaction().getStatus());
  try {
    btm.commit();
    fail(""String_Node_Str"");
  }
 catch (  RollbackException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
}","public void testMarkedRollback() throws Exception {
  btm.begin();
  CountingSynchronization sync=new CountingSynchronization();
  btm.getTransaction().registerSynchronization(sync);
  btm.setRollbackOnly();
  assertEquals(Status.STATUS_MARKED_ROLLBACK,btm.getTransaction().getStatus());
  try {
    btm.commit();
    fail(""String_Node_Str"");
  }
 catch (  RollbackException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
  assertEquals(0,sync.beforeCount);
  assertEquals(1,sync.afterCount);
}",0.7755102040816326
155497,"public void afterCompletion(int i){
}","public void afterCompletion(int i){
  afterCount++;
}",0.8222222222222222
155498,"public void testTimeout() throws Exception {
  btm.setTransactionTimeout(1);
  btm.begin();
  Thread.sleep(1100);
  assertEquals(Status.STATUS_MARKED_ROLLBACK,btm.getTransaction().getStatus());
  try {
    btm.commit();
    fail(""String_Node_Str"");
  }
 catch (  RollbackException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
}","public void testTimeout() throws Exception {
  btm.setTransactionTimeout(1);
  btm.begin();
  CountingSynchronization sync=new CountingSynchronization();
  btm.getTransaction().registerSynchronization(sync);
  Thread.sleep(2000);
  assertEquals(Status.STATUS_MARKED_ROLLBACK,btm.getTransaction().getStatus());
  try {
    btm.commit();
    fail(""String_Node_Str"");
  }
 catch (  RollbackException ex) {
    assertEquals(""String_Node_Str"",ex.getMessage());
  }
  assertEquals(0,sync.beforeCount);
  assertEquals(1,sync.afterCount);
}",0.7799315849486887
155499,"/** 
 * Call   {@link XAResource#recover(int)} on the resource and fill the <code>alreadyRecoveredXids</code> Setwith recovered  {@link BitronixXid}s. Step 1.
 * @return the amount of recovered {@link Xid}.
 * @param resourceHolderState the {@link XAResourceHolderState} to recover.
 * @param alreadyRecoveredXids a set of {@link Xid}s already recovered from this resource in this recovery session.
 * @param flags any combination of {@link XAResource#TMSTARTRSCAN},   {@link XAResource#TMNOFLAGS} or {@link XAResource#TMENDRSCAN}.
 * @throws javax.transaction.xa.XAException if {@link XAResource#recover(int)} call fails.
 */
private static int recover(XAResourceHolderState resourceHolderState,Set alreadyRecoveredXids,int flags) throws XAException {
  Xid[] xids=resourceHolderState.getXAResource().recover(flags);
  if (xids == null)   return 0;
  Set freshlyRecoveredXids=new HashSet();
  for (int i=0; i < xids.length; i++) {
    Xid xid=xids[i];
    if (xid.getFormatId() != BitronixXid.FORMAT_ID) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xid + ""String_Node_Str""+ xid.getFormatId()+ ""String_Node_Str""+ new Uid(xid.getGlobalTransactionId())+ ""String_Node_Str""+ new Uid(xid.getBranchQualifier())+ ""String_Node_Str"");
      continue;
    }
    BitronixXid bitronixXid=new BitronixXid(xid);
    String extractedServerId=bitronixXid.getGlobalTransactionIdUid().extractServerId();
    String jvmUniqueId=TransactionManagerServices.getConfiguration().getServerId();
    if (!extractedServerId.equals(jvmUniqueId)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + bitronixXid + ""String_Node_Str""+ extractedServerId+ ""String_Node_Str""+ jvmUniqueId+ ""String_Node_Str"");
      continue;
    }
    if (alreadyRecoveredXids.contains(bitronixXid)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + bitronixXid + ""String_Node_Str"");
      continue;
    }
    if (freshlyRecoveredXids.contains(bitronixXid)) {
      log.warn(""String_Node_Str"" + resourceHolderState.getUniqueName() + ""String_Node_Str""+ bitronixXid);
      continue;
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + bitronixXid);
    freshlyRecoveredXids.add(bitronixXid);
  }
  alreadyRecoveredXids.addAll(freshlyRecoveredXids);
  return freshlyRecoveredXids.size();
}","/** 
 * Call   {@link XAResource#recover(int)} on the resource and fill the <code>alreadyRecoveredXids</code> Setwith recovered  {@link BitronixXid}s. Step 1.
 * @return the amount of recovered {@link Xid}.
 * @param resourceHolderState the {@link XAResourceHolderState} to recover.
 * @param alreadyRecoveredXids a set of {@link Xid}s already recovered from this resource in this recovery session.
 * @param flags any combination of {@link XAResource#TMSTARTRSCAN},   {@link XAResource#TMNOFLAGS} or {@link XAResource#TMENDRSCAN}.
 * @throws javax.transaction.xa.XAException if {@link XAResource#recover(int)} call fails.
 */
private static int recover(XAResourceHolderState resourceHolderState,Set alreadyRecoveredXids,int flags) throws XAException {
  Xid[] xids=resourceHolderState.getXAResource().recover(flags);
  if (xids == null)   return 0;
  Set freshlyRecoveredXids=new HashSet();
  for (int i=0; i < xids.length; i++) {
    Xid xid=xids[i];
    if (xid.getFormatId() != BitronixXid.FORMAT_ID) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xid + ""String_Node_Str""+ xid.getFormatId()+ ""String_Node_Str""+ new Uid(xid.getGlobalTransactionId())+ ""String_Node_Str""+ new Uid(xid.getBranchQualifier())+ ""String_Node_Str"");
      continue;
    }
    BitronixXid bitronixXid=new BitronixXid(xid);
    byte[] extractedServerId=bitronixXid.getGlobalTransactionIdUid().extractServerId();
    byte[] jvmUniqueId=TransactionManagerServices.getConfiguration().buildServerIdArray();
    if (extractedServerId == null) {
      log.warn(""String_Node_Str"" + bitronixXid + ""String_Node_Str"");
      continue;
    }
    if (!Arrays.equals(jvmUniqueId,extractedServerId)) {
      String extractedServerIdString=new String(extractedServerId);
      String jvmUniqueIdString=new String(jvmUniqueId);
      log.info(""String_Node_Str"" + bitronixXid + ""String_Node_Str""+ extractedServerIdString+ ""String_Node_Str""+ jvmUniqueIdString+ ""String_Node_Str""+ ""String_Node_Str""+ extractedServerIdString+ ""String_Node_Str"");
      continue;
    }
    if (alreadyRecoveredXids.contains(bitronixXid)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + bitronixXid + ""String_Node_Str"");
      continue;
    }
    if (freshlyRecoveredXids.contains(bitronixXid)) {
      log.warn(""String_Node_Str"" + resourceHolderState.getUniqueName() + ""String_Node_Str""+ bitronixXid);
      continue;
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + bitronixXid);
    freshlyRecoveredXids.add(bitronixXid);
  }
  alreadyRecoveredXids.addAll(freshlyRecoveredXids);
  return freshlyRecoveredXids.size();
}",0.8785425101214575
155500,"public String extractServerId(){
  int serverIdLength=array.length - 8 - 4;
  return new String(array,0,serverIdLength);
}","public byte[] extractServerId(){
  int serverIdLength=array.length - 8 - 4;
  if (serverIdLength < 1)   return null;
  byte[] result=new byte[serverIdLength];
  System.arraycopy(array,0,result,0,serverIdLength);
  return result;
}",0.5909090909090909
155501,"/** 
 * Create 3 XIDs on the resource that are not in the journal -> recoverer presumes they have aborted and rolls them back.
 * @throws Exception
 */
public void testRecoverPresumedAbort() throws Exception {
  xaResource.addInDoubtXid(new MockXid(0,0,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(1,1,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(2,2,BitronixXid.FORMAT_ID));
  TransactionManagerServices.getRecoverer().run();
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(3,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}","/** 
 * Create 3 XIDs on the resource that are not in the journal -> recoverer presumes they have aborted and rolls them back.
 * @throws Exception
 */
public void testRecoverPresumedAbort() throws Exception {
  byte[] gtrid=UidGenerator.generateUid().getArray();
  xaResource.addInDoubtXid(new MockXid(0,gtrid,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(1,gtrid,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(2,gtrid,BitronixXid.FORMAT_ID));
  TransactionManagerServices.getRecoverer().run();
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(3,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}",0.9523809523809524
155502,"public void testRecoverMissingResource() throws Exception {
  final Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Set names=new HashSet();
  names.add(""String_Node_Str"");
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  TransactionManagerServices.getTransactionManager();
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  assertNull(TransactionManagerServices.getRecoverer().getCompletionException());
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(1,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
  PoolingDataSource pds=new PoolingDataSource(){
    public XAStatefulHolder createPooledConnection(    Object xaFactory,    ResourceBean bean) throws Exception {
      JdbcPooledConnection pc=(JdbcPooledConnection)super.createPooledConnection(xaFactory,bean);
      MockXAResource xaResource=(MockXAResource)pc.getXAResource();
      xaResource.addInDoubtXid(UidGenerator.generateXid(new Uid(xid0.getGlobalTransactionId())));
      return pc;
    }
  }
;
  pds.setClassName(MockXADataSource.class.getName());
  pds.setUniqueName(""String_Node_Str"");
  pds.setMinPoolSize(1);
  pds.setMaxPoolSize(1);
  pds.init();
  JdbcConnectionHandle handle=(JdbcConnectionHandle)pds.getConnection();
  XAResource xaResource=handle.getPooledConnection().getXAResource();
  handle.close();
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
  assertEquals(0,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  pds.close();
  TransactionManagerServices.getTransactionManager().shutdown();
}","public void testRecoverMissingResource() throws Exception {
  final Xid xid0=new MockXid(0,UidGenerator.generateUid().getArray(),BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Set names=new HashSet();
  names.add(""String_Node_Str"");
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  TransactionManagerServices.getTransactionManager();
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  assertNull(TransactionManagerServices.getRecoverer().getCompletionException());
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(1,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
  PoolingDataSource pds=new PoolingDataSource(){
    public XAStatefulHolder createPooledConnection(    Object xaFactory,    ResourceBean bean) throws Exception {
      JdbcPooledConnection pc=(JdbcPooledConnection)super.createPooledConnection(xaFactory,bean);
      MockXAResource xaResource=(MockXAResource)pc.getXAResource();
      xaResource.addInDoubtXid(UidGenerator.generateXid(new Uid(xid0.getGlobalTransactionId())));
      return pc;
    }
  }
;
  pds.setClassName(MockXADataSource.class.getName());
  pds.setUniqueName(""String_Node_Str"");
  pds.setMinPoolSize(1);
  pds.setMaxPoolSize(1);
  pds.init();
  JdbcConnectionHandle handle=(JdbcConnectionHandle)pds.getConnection();
  XAResource xaResource=handle.getPooledConnection().getXAResource();
  handle.close();
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
  assertEquals(0,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  pds.close();
  TransactionManagerServices.getTransactionManager().shutdown();
}",0.9901554404145078
155503,"/** 
 * Create 3 XIDs on the resource that are in the journal -> recoverer commits them.
 * @throws Exception
 */
public void testRecoverCommitting() throws Exception {
  Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Xid xid1=new MockXid(1,1,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid1);
  Xid xid2=new MockXid(2,2,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid2);
  Set names=new HashSet();
  names.add(pds.getUniqueName());
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid1.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid2.getGlobalTransactionId()),names);
  TransactionManagerServices.getRecoverer().run();
  assertEquals(3,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(0,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}","/** 
 * Create 3 XIDs on the resource that are in the journal -> recoverer commits them.
 * @throws Exception
 */
public void testRecoverCommitting() throws Exception {
  Xid xid0=new MockXid(0,UidGenerator.generateUid().getArray(),BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Xid xid1=new MockXid(1,UidGenerator.generateUid().getArray(),BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid1);
  Xid xid2=new MockXid(2,UidGenerator.generateUid().getArray(),BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid2);
  Set names=new HashSet();
  names.add(pds.getUniqueName());
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid1.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid2.getGlobalTransactionId()),names);
  TransactionManagerServices.getRecoverer().run();
  assertEquals(3,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(0,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}",0.9484629294755876
155504,"/** 
 * Commit transactions that have a dangling COMMITTING record in the journal. Step 2.
 * @return a Set of all committed GTRIDs encoded as strings.
 * @throws java.io.IOException if there is an I/O error reading the journal.
 */
private Set commitDanglingTransactions() throws IOException {
  Set committedGtrids=new HashSet();
  Map danglingRecords=TransactionManagerServices.getJournal().collectDanglingRecords();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + danglingRecords.size() + ""String_Node_Str"");
  Iterator it=danglingRecords.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Uid gtrid=(Uid)entry.getKey();
    TransactionLogRecord tlog=(TransactionLogRecord)entry.getValue();
    Set uniqueNames=tlog.getUniqueNames();
    Set danglingTransactions=getDanglingTransactionsInRecoveredXids(uniqueNames,tlog.getGtrid());
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + gtrid);
    commit(danglingTransactions);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + gtrid);
    committedGtrids.add(gtrid);
    Set participatingUniqueNames=filterParticipatingUniqueNamesInRecoveredXids(uniqueNames);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + buildUniqueNamesString(participatingUniqueNames) + ""String_Node_Str"");
    TransactionManagerServices.getJournal().log(Status.STATUS_COMMITTED,tlog.getGtrid(),participatingUniqueNames);
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + committedGtrids.size() + ""String_Node_Str"");
  return committedGtrids;
}","/** 
 * Commit transactions that have a dangling COMMITTING record in the journal. Step 2.
 * @return a Set of all committed GTRIDs encoded as strings.
 * @throws java.io.IOException if there is an I/O error reading the journal.
 */
private Set commitDanglingTransactions() throws IOException {
  Set committedGtrids=new HashSet();
  Map danglingRecords=TransactionManagerServices.getJournal().collectDanglingRecords();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + danglingRecords.size() + ""String_Node_Str"");
  Iterator it=danglingRecords.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    Uid gtrid=(Uid)entry.getKey();
    TransactionLogRecord tlog=(TransactionLogRecord)entry.getValue();
    Set uniqueNames=tlog.getUniqueNames();
    Set danglingTransactions=getDanglingTransactionsInRecoveredXids(uniqueNames,tlog.getGtrid());
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + gtrid);
    commit(danglingTransactions);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + gtrid);
    committedGtrids.add(gtrid);
    Set participatingUniqueNames=filterParticipatingUniqueNamesInRecoveredXids(uniqueNames);
    if (participatingUniqueNames.size() > 0) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + gtrid + ""String_Node_Str""+ buildUniqueNamesString(participatingUniqueNames)+ ""String_Node_Str"");
      TransactionManagerServices.getJournal().log(Status.STATUS_COMMITTED,tlog.getGtrid(),participatingUniqueNames);
    }
 else {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + gtrid + ""String_Node_Str"");
      committedGtrids.remove(gtrid);
    }
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + committedGtrids.size() + ""String_Node_Str"");
  return committedGtrids;
}",0.9310141509433962
155505,"private Set filterParticipatingUniqueNamesInRecoveredXids(Set uniqueNames){
  Set recoveredUniqueNames=new HashSet();
  Iterator it=uniqueNames.iterator();
  while (it.hasNext()) {
    String uniqueName=(String)it.next();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + uniqueName);
    Set recoveredXids=(Set)recoveredXidSets.get(uniqueName);
    if (recoveredXids == null) {
      log.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
    }
 else {
      recoveredUniqueNames.add(uniqueName);
    }
  }
  return recoveredUniqueNames;
}","private Set filterParticipatingUniqueNamesInRecoveredXids(Set uniqueNames){
  Set recoveredUniqueNames=new HashSet();
  Iterator it=uniqueNames.iterator();
  while (it.hasNext()) {
    String uniqueName=(String)it.next();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + uniqueName);
    Set recoveredXids=(Set)recoveredXidSets.get(uniqueName);
    if (recoveredXids == null) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
    }
 else {
      recoveredUniqueNames.add(uniqueName);
    }
  }
  return recoveredUniqueNames;
}",0.9593073593073592
155506,"public void testRecoverMissingResource() throws Exception {
  final Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Set names=new HashSet();
  names.add(""String_Node_Str"");
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  TransactionManagerServices.getTransactionManager();
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  assertNull(TransactionManagerServices.getRecoverer().getCompletionException());
  assertEquals(1,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(0,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(1,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
  PoolingDataSource pds=new PoolingDataSource(){
    public XAStatefulHolder createPooledConnection(    Object xaFactory,    ResourceBean bean) throws Exception {
      JdbcPooledConnection pc=(JdbcPooledConnection)super.createPooledConnection(xaFactory,bean);
      MockXAResource xaResource=(MockXAResource)pc.getXAResource();
      xaResource.addInDoubtXid(UidGenerator.generateXid(new Uid(xid0.getGlobalTransactionId())));
      return pc;
    }
  }
;
  pds.setClassName(MockXADataSource.class.getName());
  pds.setUniqueName(""String_Node_Str"");
  pds.setMinPoolSize(1);
  pds.setMaxPoolSize(1);
  pds.init();
  assertEquals(0,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  TransactionManagerServices.getTransactionManager().shutdown();
}","public void testRecoverMissingResource() throws Exception {
  final Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Set names=new HashSet();
  names.add(""String_Node_Str"");
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  TransactionManagerServices.getTransactionManager();
  assertEquals(1,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  assertNull(TransactionManagerServices.getRecoverer().getCompletionException());
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(1,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
  PoolingDataSource pds=new PoolingDataSource(){
    public XAStatefulHolder createPooledConnection(    Object xaFactory,    ResourceBean bean) throws Exception {
      JdbcPooledConnection pc=(JdbcPooledConnection)super.createPooledConnection(xaFactory,bean);
      MockXAResource xaResource=(MockXAResource)pc.getXAResource();
      xaResource.addInDoubtXid(UidGenerator.generateXid(new Uid(xid0.getGlobalTransactionId())));
      return pc;
    }
  }
;
  pds.setClassName(MockXADataSource.class.getName());
  pds.setUniqueName(""String_Node_Str"");
  pds.setMinPoolSize(1);
  pds.setMaxPoolSize(1);
  pds.init();
  JdbcConnectionHandle handle=(JdbcConnectionHandle)pds.getConnection();
  XAResource xaResource=handle.getPooledConnection().getXAResource();
  handle.close();
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
  assertEquals(0,TransactionManagerServices.getJournal().collectDanglingRecords().size());
  pds.close();
  TransactionManagerServices.getTransactionManager().shutdown();
}",0.8610016882386043
155507,"private void runJobsForPosition(List resources) throws PhaseException {
  Iterator it=resources.iterator();
  List jobs=new ArrayList();
  List exceptions=new ArrayList();
  List errorResources=new ArrayList();
  while (it.hasNext()) {
    XAResourceHolderState resourceHolder=(XAResourceHolderState)it.next();
    if (!isParticipating(resourceHolder)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + resourceHolder);
      continue;
    }
    Job job=createJob(resourceHolder);
    Object future=executor.submit(job);
    job.setFuture(future);
    jobs.add(job);
  }
  for (int i=0; i < jobs.size(); i++) {
    Job job=(Job)jobs.get(i);
    Object future=job.getFuture();
    while (!executor.isDone(future)) {
      executor.waitFor(future,1000L);
    }
    XAException xaException=job.getXAException();
    RuntimeException runtimeException=job.getRuntimeException();
    if (xaException != null) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + job + ""String_Node_Str""+ Decoder.decodeXAExceptionErrorCode(xaException));
      exceptions.add(xaException);
      errorResources.add(job.getResource());
    }
 else     if (runtimeException != null) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + job);
      exceptions.add(runtimeException);
      errorResources.add(job.getResource());
    }
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + exceptions.size() + ""String_Node_Str"");
  if (exceptions.size() > 0)   throw new PhaseException(exceptions,errorResources);
}","private JobsExecutionReport runJobsForPosition(List resources){
  Iterator it=resources.iterator();
  List jobs=new ArrayList();
  List exceptions=new ArrayList();
  List errorResources=new ArrayList();
  while (it.hasNext()) {
    XAResourceHolderState resourceHolder=(XAResourceHolderState)it.next();
    if (!isParticipating(resourceHolder)) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + resourceHolder);
      continue;
    }
    Job job=createJob(resourceHolder);
    Object future=executor.submit(job);
    job.setFuture(future);
    jobs.add(job);
  }
  for (int i=0; i < jobs.size(); i++) {
    Job job=(Job)jobs.get(i);
    Object future=job.getFuture();
    while (!executor.isDone(future)) {
      executor.waitFor(future,1000L);
    }
    XAException xaException=job.getXAException();
    RuntimeException runtimeException=job.getRuntimeException();
    if (xaException != null) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + job + ""String_Node_Str""+ Decoder.decodeXAExceptionErrorCode(xaException));
      exceptions.add(xaException);
      errorResources.add(job.getResource());
    }
 else     if (runtimeException != null) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + job);
      exceptions.add(runtimeException);
      errorResources.add(job.getResource());
    }
  }
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + exceptions.size() + ""String_Node_Str"");
  return new JobsExecutionReport(exceptions,errorResources);
}",0.9566634082763116
155508,"/** 
 * Execute the phase. Resources receive the phase command in position order (reversed or not). If there is more than once resource in a position, command is sent in enlistment order (again reversed or not). If   {@link bitronix.tm.Configuration#isAsynchronous2Pc()} is true, all commands in a given position are sentin parallel by using the detected  {@link Executor} implementation.
 * @param resourceManager the {@link XAResourceManager} containing the enlisted resources to execute the phase on.
 * @param reverse true if jobs should be executed in reverse position / enlistment order, false for natural position / enlistment order.
 * @throws PhaseException if one or more resource threw an exception during phase execution.
 * @see bitronix.tm.twopc.executor.SyncExecutor
 * @see bitronix.tm.twopc.executor.SimpleAsyncExecutor
 * @see bitronix.tm.twopc.executor.ConcurrentExecutor
 * @see bitronix.tm.twopc.executor.BackportConcurrentExecutor 
 */
protected void executePhase(XAResourceManager resourceManager,boolean reverse) throws PhaseException {
  SortedSet positions;
  if (reverse) {
    positions=resourceManager.getReverseOrderPositions();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resourceManager.size() + ""String_Node_Str""+ positions.size()+ ""String_Node_Str"");
  }
 else {
    positions=resourceManager.getNaturalOrderPositions();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resourceManager.size() + ""String_Node_Str""+ positions.size()+ ""String_Node_Str"");
  }
  Iterator it=positions.iterator();
  while (it.hasNext()) {
    Object positionKey=it.next();
    List resources;
    if (reverse) {
      resources=resourceManager.getReverseOrderResourcesForPosition(positionKey);
    }
 else {
      resources=resourceManager.getNaturalOrderResourcesForPosition(positionKey);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resources.size() + ""String_Node_Str""+ positionKey+ ""String_Node_Str"");
    runJobsForPosition(resources);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resources.size() + ""String_Node_Str""+ positionKey+ ""String_Node_Str"");
  }
}","/** 
 * Execute the phase. Resources receive the phase command in position order (reversed or not). If there is more than once resource in a position, command is sent in enlistment order (again reversed or not). If   {@link bitronix.tm.Configuration#isAsynchronous2Pc()} is true, all commands in a given position are sentin parallel by using the detected  {@link Executor} implementation.
 * @param resourceManager the {@link XAResourceManager} containing the enlisted resources to execute the phase on.
 * @param reverse true if jobs should be executed in reverse position / enlistment order, false for natural position / enlistment order.
 * @throws PhaseException if one or more resource threw an exception during phase execution.
 * @see bitronix.tm.twopc.executor.SyncExecutor
 * @see bitronix.tm.twopc.executor.SimpleAsyncExecutor
 * @see bitronix.tm.twopc.executor.ConcurrentExecutor
 * @see bitronix.tm.twopc.executor.BackportConcurrentExecutor 
 */
protected void executePhase(XAResourceManager resourceManager,boolean reverse) throws PhaseException {
  SortedSet positions;
  if (reverse) {
    positions=resourceManager.getReverseOrderPositions();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resourceManager.size() + ""String_Node_Str""+ positions.size()+ ""String_Node_Str"");
  }
 else {
    positions=resourceManager.getNaturalOrderPositions();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resourceManager.size() + ""String_Node_Str""+ positions.size()+ ""String_Node_Str"");
  }
  List positionErrorReports=new ArrayList();
  Iterator it=positions.iterator();
  while (it.hasNext()) {
    Object positionKey=it.next();
    List resources;
    if (reverse) {
      resources=resourceManager.getReverseOrderResourcesForPosition(positionKey);
    }
 else {
      resources=resourceManager.getNaturalOrderResourcesForPosition(positionKey);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resources.size() + ""String_Node_Str""+ positionKey+ ""String_Node_Str"");
    JobsExecutionReport report=runJobsForPosition(resources);
    if (report.getExceptions().size() > 0) {
      if (log.isDebugEnabled())       log.debug(report.getExceptions().size() + ""String_Node_Str"" + positionKey+ ""String_Node_Str"");
      positionErrorReports.add(report);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + resources.size() + ""String_Node_Str""+ positionKey+ ""String_Node_Str"");
  }
  if (positionErrorReports.size() > 0) {
    List exceptions=new ArrayList();
    List resources=new ArrayList();
    for (int i=0; i < positionErrorReports.size(); i++) {
      JobsExecutionReport report=(JobsExecutionReport)positionErrorReports.get(i);
      exceptions.addAll(report.getExceptions());
      resources.addAll(report.getResources());
    }
    throw new PhaseException(exceptions,resources);
  }
}",0.8506480558325025
155509,"/** 
 * Delist all resources that have not been closed before calling tm.commit(). This basically means calling XAResource.end() on all resource that has not been ended yet.
 * @param flag the flag to pass to XAResource.end(). Either TMSUCCESS or TMFAIL.
 */
private void delistUnclosedResources(int flag){
  List resources=resourceManager.getAllResources();
  for (int i=0; i < resources.size(); i++) {
    XAResourceHolderState xaResourceHolderState=(XAResourceHolderState)resources.get(i);
    if (!xaResourceHolderState.isEnded()) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaResourceHolderState);
      try {
        delistResource(xaResourceHolderState.getXAResource(),flag);
      }
 catch (      SystemException ex) {
        log.warn(""String_Node_Str"" + xaResourceHolderState,ex);
      }
    }
  }
}","/** 
 * Delist all resources that have not been closed before calling tm.commit(). This basically means calling XAResource.end() on all resource that has not been ended yet.
 * @param flag the flag to pass to XAResource.end(). Either TMSUCCESS or TMFAIL.
 */
private void delistUnclosedResources(int flag){
  List resources=resourceManager.getAllResources();
  for (int i=0; i < resources.size(); i++) {
    XAResourceHolderState xaResourceHolderState=(XAResourceHolderState)resources.get(i);
    if (!xaResourceHolderState.isEnded()) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaResourceHolderState);
      try {
        delistResource(xaResourceHolderState.getXAResource(),flag);
      }
 catch (      SystemException ex) {
        log.warn(""String_Node_Str"" + xaResourceHolderState,ex);
      }
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaResourceHolderState);
  }
}",0.9467723669309174
155510,"/** 
 * Enlist the specified   {@link XAResourceHolderState}. A XID is generated and the resource is started with XAResource.TMNOFLAGS or XAResource.TMJOIN if it could be joined with another previously enlisted one. <br/> There are 3 different cases that can happen when a   {@link XAResourceHolderState} is enlisted:<ul> <li>already enlisted and not ended: do nothing</li> <li>already enlisted and ended: try to join. if you can join, keep a reference on the passed-in {@link XAResourceHolderState} and drop the previous one. if you cannot join, it's the same as case 3</li><li>not enlisted: create a new branch and keep a reference on the passed-in  {@link XAResourceHolderState}</li> </ul>
 * @param xaResourceHolderState the {@link XAResourceHolderState} to be enlisted.
 * @throws XAException if a resource error occured.
 * @throws BitronixSystemException if an internal error occured.
 */
public void enlist(XAResourceHolderState xaResourceHolderState) throws XAException, BitronixSystemException {
  XAResourceHolderState alreadyEnlistedHolder=findXAResourceHolderState(xaResourceHolderState.getXAResource());
  if (alreadyEnlistedHolder != null && !alreadyEnlistedHolder.isEnded()) {
    xaResourceHolderState.setXid(alreadyEnlistedHolder.getXid());
    log.warn(""String_Node_Str"" + xaResourceHolderState);
    return;
  }
  XAResourceHolderState toBeJoinedHolderState=null;
  if (alreadyEnlistedHolder != null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + alreadyEnlistedHolder);
    toBeJoinedHolderState=getManagedResourceWithSameRM(xaResourceHolderState);
  }
  BitronixXid xid;
  int flag;
  if (toBeJoinedHolderState != null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaResourceHolderState + ""String_Node_Str""+ toBeJoinedHolderState);
    xid=toBeJoinedHolderState.getXid();
    flag=XAResource.TMJOIN;
  }
 else {
    xid=UidGenerator.generateXid(gtrid);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xid);
    flag=XAResource.TMNOFLAGS;
  }
  if (flag != XAResource.TMJOIN && xaResourceHolderState.getTwoPcOrderingPosition() == ResourceScheduler.ALWAYS_LAST_POSITION) {
    List alwaysLastResources=resources.getNaturalOrderResourcesForPosition(ResourceScheduler.ALWAYS_LAST_POSITION_KEY);
    if (alwaysLastResources != null && alwaysLastResources.size() > 0)     throw new BitronixSystemException(""String_Node_Str"" + xaResourceHolderState + ""String_Node_Str""+ alwaysLastResources.get(0));
  }
  xaResourceHolderState.setXid(xid);
  xaResourceHolderState.start(flag);
  if (toBeJoinedHolderState == null) {
    resources.addResource(xaResourceHolderState);
  }
}","/** 
 * Enlist the specified   {@link XAResourceHolderState}. A XID is generated and the resource is started with XAResource.TMNOFLAGS or XAResource.TMJOIN if it could be joined with another previously enlisted one. <br/> There are 3 different cases that can happen when a   {@link XAResourceHolderState} is enlisted:<ul> <li>already enlisted and not ended: do nothing</li> <li>already enlisted and ended: try to join. if you can join, keep a reference on the passed-in {@link XAResourceHolderState} and drop the previous one. if you cannot join, it's the same as case 3</li><li>not enlisted: create a new branch and keep a reference on the passed-in  {@link XAResourceHolderState}</li> </ul>
 * @param xaResourceHolderState the {@link XAResourceHolderState} to be enlisted.
 * @throws XAException if a resource error occured.
 * @throws BitronixSystemException if an internal error occured.
 */
public void enlist(XAResourceHolderState xaResourceHolderState) throws XAException, BitronixSystemException {
  XAResourceHolderState alreadyEnlistedHolder=findXAResourceHolderState(xaResourceHolderState.getXAResource());
  if (alreadyEnlistedHolder != null && !alreadyEnlistedHolder.isEnded()) {
    xaResourceHolderState.setXid(alreadyEnlistedHolder.getXid());
    log.warn(""String_Node_Str"" + xaResourceHolderState);
    return;
  }
  XAResourceHolderState toBeJoinedHolderState=null;
  if (alreadyEnlistedHolder != null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + alreadyEnlistedHolder);
    toBeJoinedHolderState=getManagedResourceWithSameRM(xaResourceHolderState);
  }
  BitronixXid xid;
  int flag;
  if (toBeJoinedHolderState != null) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xaResourceHolderState + ""String_Node_Str""+ toBeJoinedHolderState);
    xid=toBeJoinedHolderState.getXid();
    flag=XAResource.TMJOIN;
  }
 else {
    xid=UidGenerator.generateXid(gtrid);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + xid);
    flag=XAResource.TMNOFLAGS;
  }
  if (flag != XAResource.TMJOIN && xaResourceHolderState.getTwoPcOrderingPosition() == ResourceScheduler.ALWAYS_LAST_POSITION) {
    List alwaysLastResources=resources.getNaturalOrderResourcesForPosition(ResourceScheduler.ALWAYS_LAST_POSITION_KEY);
    if (alwaysLastResources != null && alwaysLastResources.size() > 0)     throw new BitronixSystemException(""String_Node_Str"" + xaResourceHolderState + ""String_Node_Str""+ alwaysLastResources.get(0));
  }
  xaResourceHolderState.setXid(xid);
  xaResourceHolderState.start(flag);
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaResourceHolderState + ""String_Node_Str""+ Decoder.decodeXAResourceFlag(flag));
  if (toBeJoinedHolderState != null) {
    resources.removeResource(toBeJoinedHolderState);
  }
  resources.addResource(xaResourceHolderState);
}",0.9633010772320614
155511,"/** 
 * Enlist the   {@link XAResourceHolder} in the current transaction or do nothing if there is no global transactioncontext for this thread.
 * @param xaResourceHolder the {@link XAResourceHolder} to enlist.
 * @param bean the {@link ResourceBean} of the {@link XAResourceHolder}.
 * @throws SystemException if an internal error happens.
 * @throws RollbackException if the current transaction has been marked as rollback only.
 */
public static void enlistInCurrentTransaction(XAResourceHolder xaResourceHolder,ResourceBean bean) throws SystemException, RollbackException {
  BitronixTransaction currentTransaction=currentTransaction();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaResourceHolder + ""String_Node_Str""+ currentTransaction);
  if (currentTransaction != null) {
    if (currentTransaction.timedOut())     throw new BitronixSystemException(""String_Node_Str"");
    XAResourceHolderState alreadyEnlistedXAResourceHolderState=TransactionContextHelper.getAlreadyEnlistedXAResourceHolderState(xaResourceHolder,currentTransaction);
    if (alreadyEnlistedXAResourceHolderState == null || alreadyEnlistedXAResourceHolderState.isEnded()) {
      XAResourceHolderState xaResourceHolderState=new XAResourceHolderState(xaResourceHolder,bean);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xaResourceHolderState + ""String_Node_Str""+ currentTransaction);
      xaResourceHolder.setXAResourceHolderState(xaResourceHolderState);
      currentTransaction.enlistResource(xaResourceHolderState.getXAResource());
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + alreadyEnlistedXAResourceHolderState);
  }
 else {
    if (bean.getAllowLocalTransactions()) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
    }
 else     throw new BitronixSystemException(""String_Node_Str"" + bean.getUniqueName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}","/** 
 * Enlist the   {@link XAResourceHolder} in the current transaction or do nothing if there is no global transactioncontext for this thread.
 * @param xaResourceHolder the {@link XAResourceHolder} to enlist.
 * @param bean the {@link ResourceBean} of the {@link XAResourceHolder}.
 * @throws SystemException if an internal error happens.
 * @throws RollbackException if the current transaction has been marked as rollback only.
 */
public static void enlistInCurrentTransaction(XAResourceHolder xaResourceHolder,ResourceBean bean) throws SystemException, RollbackException {
  BitronixTransaction currentTransaction=currentTransaction();
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + xaResourceHolder + ""String_Node_Str""+ currentTransaction);
  if (currentTransaction != null) {
    if (currentTransaction.timedOut())     throw new BitronixSystemException(""String_Node_Str"");
    XAResourceHolderState alreadyEnlistedXAResourceHolderState=TransactionContextHelper.getAlreadyEnlistedXAResourceHolderState(xaResourceHolder,currentTransaction);
    if (alreadyEnlistedXAResourceHolderState == null || alreadyEnlistedXAResourceHolderState.isEnded()) {
      enlist(xaResourceHolder,bean,currentTransaction);
    }
 else     if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + alreadyEnlistedXAResourceHolderState);
  }
 else {
    if (bean.getAllowLocalTransactions()) {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"");
    }
 else     throw new BitronixSystemException(""String_Node_Str"" + bean.getUniqueName() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
}",0.9023020774845592
155512,"/** 
 * Build a populated   {@link XAResourceProducer} out of a list of property pairs and the config name.
 * @param configuredName index name of the config file.
 * @param propertyPairs the properties attached to this index.
 * @return a populated {@link XAResourceProducer}.
 * @throws ResourceConfigurationException if the {@link XAResourceProducer} cannot be built.
 */
private XAResourceProducer buildXAResourceProducer(String configuredName,List propertyPairs) throws ResourceConfigurationException {
  String lastPropertyName=""String_Node_Str"";
  try {
    XAResourceProducer producer=createBean(configuredName,propertyPairs);
    for (int i=0; i < propertyPairs.size(); i++) {
      PropertyPair propertyPair=(PropertyPair)propertyPairs.get(i);
      lastPropertyName=propertyPair.getName();
      String propertyValue=propertyPair.getValue();
      if (lastPropertyName.endsWith(PASSWORD_PROPERTY_NAME)) {
        propertyValue=decrypt(propertyValue);
      }
      PropertyUtils.setProperty(producer,lastPropertyName,propertyValue);
    }
    if (producer.getUniqueName() == null)     throw new ResourceConfigurationException(""String_Node_Str"" + configuredName + ""String_Node_Str"");
    return producer;
  }
 catch (  ResourceConfigurationException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new ResourceConfigurationException(""String_Node_Str"" + configuredName + ""String_Node_Str""+ ""String_Node_Str""+ lastPropertyName+ ""String_Node_Str"",ex);
  }
}","/** 
 * Build a populated   {@link XAResourceProducer} out of a list of property pairs and the config name.
 * @param configuredName index name of the config file.
 * @param propertyPairs the properties attached to this index.
 * @return a populated {@link XAResourceProducer}.
 * @throws ResourceConfigurationException if the {@link XAResourceProducer} cannot be built.
 */
private XAResourceProducer buildXAResourceProducer(String configuredName,List propertyPairs) throws ResourceConfigurationException {
  String lastPropertyName=""String_Node_Str"";
  try {
    XAResourceProducer producer=createBean(configuredName,propertyPairs);
    for (int i=0; i < propertyPairs.size(); i++) {
      PropertyPair propertyPair=(PropertyPair)propertyPairs.get(i);
      lastPropertyName=propertyPair.getName();
      String propertyValue=propertyPair.getValue();
      PropertyUtils.setProperty(producer,lastPropertyName,propertyValue);
    }
    if (producer.getUniqueName() == null)     throw new ResourceConfigurationException(""String_Node_Str"" + configuredName + ""String_Node_Str"");
    return producer;
  }
 catch (  ResourceConfigurationException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new ResourceConfigurationException(""String_Node_Str"" + configuredName + ""String_Node_Str""+ ""String_Node_Str""+ lastPropertyName+ ""String_Node_Str"",ex);
  }
}",0.9587010236498412
155513,"private static Object createXAFactory(ResourceBean bean) throws ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException {
  String className=bean.getClassName();
  if (className == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Class xaFactoryClass=Thread.currentThread().getContextClassLoader().loadClass(className);
  Object xaFactory=xaFactoryClass.newInstance();
  Iterator it=bean.getDriverProperties().entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String name=(String)entry.getKey();
    String value=(String)entry.getValue();
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ value+ ""String_Node_Str"");
    PropertyUtils.setProperty(xaFactory,name,value);
  }
  return xaFactory;
}","private static Object createXAFactory(ResourceBean bean) throws Exception {
  String className=bean.getClassName();
  if (className == null)   throw new IllegalArgumentException(""String_Node_Str"");
  Class xaFactoryClass=Thread.currentThread().getContextClassLoader().loadClass(className);
  Object xaFactory=xaFactoryClass.newInstance();
  Iterator it=bean.getDriverProperties().entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String name=(String)entry.getKey();
    String value=(String)entry.getValue();
    if (name.endsWith(PASSWORD_PROPERTY_NAME)) {
      value=decrypt(value);
    }
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + name + ""String_Node_Str""+ value+ ""String_Node_Str"");
    PropertyUtils.setProperty(xaFactory,name,value);
  }
  return xaFactory;
}",0.8974205158968206
155514,"public void testDecryptPassword() throws Exception {
  ResourceLoader loader=new ResourceLoader();
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",MockXADataSource.class.getName());
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  loader.initXAResourceProducers(p);
  Map dataSources=loader.getResources();
  assertEquals(1,dataSources.size());
  String uniqueName=(String)dataSources.keySet().iterator().next();
  assertEquals(""String_Node_Str"",uniqueName);
  PoolingDataSource pds=(PoolingDataSource)dataSources.get(uniqueName);
  assertEquals(""String_Node_Str"",pds.getClassName());
  assertEquals(""String_Node_Str"",pds.getUniqueName());
  assertEquals(123,pds.getMaxPoolSize());
  assertEquals(3,pds.getDriverProperties().size());
  assertEquals(""String_Node_Str"",pds.getDriverProperties().getProperty(""String_Node_Str""));
}","public void testDecryptPassword() throws Exception {
  ResourceLoader loader=new ResourceLoader();
  Properties p=new Properties();
  p.setProperty(""String_Node_Str"",MockXADataSource.class.getName());
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  p.setProperty(""String_Node_Str"",""String_Node_Str"");
  loader.initXAResourceProducers(p);
  Map dataSources=loader.getResources();
  assertEquals(1,dataSources.size());
  String uniqueName=(String)dataSources.keySet().iterator().next();
  assertEquals(""String_Node_Str"",uniqueName);
  PoolingDataSource pds=(PoolingDataSource)dataSources.get(uniqueName);
  assertEquals(""String_Node_Str"",pds.getClassName());
  assertEquals(""String_Node_Str"",pds.getUniqueName());
  assertEquals(123,pds.getMaxPoolSize());
  assertEquals(3,pds.getDriverProperties().size());
  String decryptedPassword=(String)PropertyUtils.getProperty(getXADataSource(pds),""String_Node_Str"");
  assertEquals(""String_Node_Str"",decryptedPassword);
}",0.9306930693069309
155515,"private static Method getGetter(Object target,String propertyName){
  String getterName=""String_Node_Str"" + propertyName.substring(0,1).toUpperCase() + propertyName.substring(1);
  Method[] methods=target.getClass().getMethods();
  for (int i=0; i < methods.length; i++) {
    Method method=methods[i];
    if (method.getName().equals(getterName) && !method.getReturnType().equals(void.class) && method.getParameterTypes().length == 0) {
      return method;
    }
  }
  throw new PropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ target.getClass().getName()+ ""String_Node_Str"");
}","private static Method getGetter(Object target,String propertyName){
  String getterName=""String_Node_Str"" + propertyName.substring(0,1).toUpperCase() + propertyName.substring(1);
  String getterIsName=""String_Node_Str"" + propertyName.substring(0,1).toUpperCase() + propertyName.substring(1);
  Method[] methods=target.getClass().getMethods();
  for (int i=0; i < methods.length; i++) {
    Method method=methods[i];
    if ((method.getName().equals(getterName) || method.getName().equals(getterIsName)) && !method.getReturnType().equals(void.class) && method.getParameterTypes().length == 0) {
      return method;
    }
  }
  throw new PropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ target.getClass().getName()+ ""String_Node_Str"");
}",0.8854625550660793
155516,"/** 
 * Build a map of direct javabeans properties of the target object. Only read/write properties (ie: those who have both a getter and a setter) are returned.
 * @param target the target object from which to get properties names.
 * @return a Map of String with properties names as key and their values
 * @throws PropertyException if an error happened while trying to get a property.
 */
public static Map getProperties(Object target) throws PropertyException {
  Map properties=new HashMap();
  Class clazz=target.getClass();
  Method[] methods=clazz.getMethods();
  for (int i=0; i < methods.length; i++) {
    Method method=methods[i];
    String name=method.getName();
    if (method.getModifiers() == Modifier.PUBLIC && method.getParameterTypes().length == 0 && (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")) && containsSetterForGetter(clazz,method)) {
      String propertyName=Character.toLowerCase(name.charAt(3)) + name.substring(4);
      try {
        Object propertyValue=method.invoke(target,(Object[])null);
        if (propertyValue != null && propertyValue instanceof Properties) {
          Map propertiesContent=getNestedProperties(propertyName,(Properties)propertyValue);
          properties.putAll(propertiesContent);
        }
 else {
          properties.put(propertyName,propertyValue);
        }
      }
 catch (      IllegalAccessException ex) {
        throw new PropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ name+ ""String_Node_Str"",ex);
      }
catch (      InvocationTargetException ex) {
        throw new PropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ name+ ""String_Node_Str"",ex);
      }
    }
  }
  return properties;
}","/** 
 * Build a map of direct javabeans properties of the target object. Only read/write properties (ie: those who have both a getter and a setter) are returned.
 * @param target the target object from which to get properties names.
 * @return a Map of String with properties names as key and their values
 * @throws PropertyException if an error happened while trying to get a property.
 */
public static Map getProperties(Object target) throws PropertyException {
  Map properties=new HashMap();
  Class clazz=target.getClass();
  Method[] methods=clazz.getMethods();
  for (int i=0; i < methods.length; i++) {
    Method method=methods[i];
    String name=method.getName();
    if (method.getModifiers() == Modifier.PUBLIC && method.getParameterTypes().length == 0 && (name.startsWith(""String_Node_Str"") || name.startsWith(""String_Node_Str"")) && containsSetterForGetter(clazz,method)) {
      String propertyName;
      if (name.startsWith(""String_Node_Str""))       propertyName=Character.toLowerCase(name.charAt(3)) + name.substring(4);
 else       if (name.startsWith(""String_Node_Str""))       propertyName=Character.toLowerCase(name.charAt(2)) + name.substring(3);
 else       throw new PropertyException(""String_Node_Str"" + name + ""String_Node_Str"");
      try {
        Object propertyValue=method.invoke(target,(Object[])null);
        if (propertyValue != null && propertyValue instanceof Properties) {
          Map propertiesContent=getNestedProperties(propertyName,(Properties)propertyValue);
          properties.putAll(propertiesContent);
        }
 else {
          properties.put(propertyName,propertyValue);
        }
      }
 catch (      IllegalAccessException ex) {
        throw new PropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ name+ ""String_Node_Str"",ex);
      }
catch (      InvocationTargetException ex) {
        throw new PropertyException(""String_Node_Str"" + propertyName + ""String_Node_Str""+ name+ ""String_Node_Str"",ex);
      }
    }
  }
  return properties;
}",0.924593658406608
155517,"/** 
 * Recover all configured resources and fill the <code>recoveredXidSets</code> with all recovered XIDs. Step 1.
 */
private void recoverAllResources(){
  Iterator it=registeredResources.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String uniqueName=(String)entry.getKey();
    XAResourceProducer producer=(XAResourceProducer)entry.getValue();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uniqueName);
      Set xids=recover(producer);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xids.size() + ""String_Node_Str""+ uniqueName);
      recoveredXidSets.put(uniqueName,xids);
    }
 catch (    XAException ex) {
      throw new RecoveryException(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ Decoder.decodeXAExceptionErrorCode(ex),ex);
    }
catch (    Exception ex) {
      throw new RecoveryException(""String_Node_Str"" + uniqueName,ex);
    }
  }
  if (log.isDebugEnabled())   log.debug(registeredResources.size() + ""String_Node_Str"");
}","/** 
 * Recover all configured resources and fill the <code>recoveredXidSets</code> with all recovered XIDs. Step 1.
 */
private void recoverAllResources(){
  Iterator it=registeredResources.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Map.Entry)it.next();
    String uniqueName=(String)entry.getKey();
    XAResourceProducer producer=(XAResourceProducer)entry.getValue();
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + uniqueName);
      Set xids=recover(producer);
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + xids.size() + ""String_Node_Str""+ uniqueName);
      recoveredXidSets.put(uniqueName,xids);
    }
 catch (    XAException ex) {
      throw new RecoveryException(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ Decoder.decodeXAExceptionErrorCode(ex)+ ""String_Node_Str"",ex);
    }
catch (    Exception ex) {
      throw new RecoveryException(""String_Node_Str"" + uniqueName,ex);
    }
  }
  if (log.isDebugEnabled())   log.debug(registeredResources.size() + ""String_Node_Str"");
}",0.9910335063709296
155518,"public Xid[] recover(int flag) throws XAException {
  if (xads == null)   return new Xid[0];
  return xads.getInDoubtXids();
}","public Xid[] recover(int flag) throws XAException {
  if (recoverException != null)   throw recoverException;
  if (xads == null)   return new Xid[0];
  return xads.getInDoubtXids();
}",0.8129032258064516
155519,"/** 
 * Create 3 XIDs on the resource that are not in the journal -> recoverer presumes they have aborted and rolls them back.
 * @throws Exception
 */
public void testRecoverPresumedAbort() throws Exception {
  xaResource.addInDoubtXid(new MockXid(0,0,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(1,1,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(2,2,BitronixXid.FORMAT_ID));
  Journal journal=TransactionManagerServices.getJournal();
  journal.open();
  TransactionManagerServices.getRecoverer().run();
  journal.close();
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(3,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}","/** 
 * Create 3 XIDs on the resource that are not in the journal -> recoverer presumes they have aborted and rolls them back.
 * @throws Exception
 */
public void testRecoverPresumedAbort() throws Exception {
  xaResource.addInDoubtXid(new MockXid(0,0,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(1,1,BitronixXid.FORMAT_ID));
  xaResource.addInDoubtXid(new MockXid(2,2,BitronixXid.FORMAT_ID));
  TransactionManagerServices.getRecoverer().run();
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(3,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}",0.9182879377431906
155520,"protected void setUp() throws Exception {
  Iterator it=ResourceRegistrar.getResourcesUniqueNames().iterator();
  while (it.hasNext()) {
    String name=(String)it.next();
    ResourceRegistrar.unregister(ResourceRegistrar.get(name));
  }
  pds=new PoolingDataSource();
  pds.setClassName(MockXADataSource.class.getName());
  pds.setUniqueName(""String_Node_Str"");
  pds.setMaxPoolSize(3);
  pds.init();
  new File(TransactionManagerServices.getConfiguration().getLogPart1Filename()).delete();
  new File(TransactionManagerServices.getConfiguration().getLogPart2Filename()).delete();
  JdbcConnectionHandle handle=(JdbcConnectionHandle)pds.getConnection();
  xaResource=(MockXAResource)handle.getPooledConnection().getXAResource();
}","protected void setUp() throws Exception {
  Iterator it=ResourceRegistrar.getResourcesUniqueNames().iterator();
  while (it.hasNext()) {
    String name=(String)it.next();
    ResourceRegistrar.unregister(ResourceRegistrar.get(name));
  }
  pds=new PoolingDataSource();
  pds.setClassName(MockXADataSource.class.getName());
  pds.setUniqueName(""String_Node_Str"");
  pds.setMinPoolSize(1);
  pds.setMaxPoolSize(1);
  pds.init();
  new File(TransactionManagerServices.getConfiguration().getLogPart1Filename()).delete();
  new File(TransactionManagerServices.getConfiguration().getLogPart2Filename()).delete();
  JdbcConnectionHandle handle=(JdbcConnectionHandle)pds.getConnection();
  xaResource=(MockXAResource)handle.getPooledConnection().getXAResource();
  handle.close();
  journal=TransactionManagerServices.getJournal();
  journal.open();
}",0.9276649746192892
155521,"public void testRecoverMissingResource() throws Exception {
  Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Set names=new HashSet();
  names.add(""String_Node_Str"");
  Journal journal=TransactionManagerServices.getJournal();
  journal.open();
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  TransactionManagerServices.getRecoverer().run();
  journal.close();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",TransactionManagerServices.getRecoverer().getCompletionException().getMessage());
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(0,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(1,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}","public void testRecoverMissingResource() throws Exception {
  Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Set names=new HashSet();
  names.add(""String_Node_Str"");
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  TransactionManagerServices.getRecoverer().run();
  assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",TransactionManagerServices.getRecoverer().getCompletionException().getMessage());
  assertEquals(0,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(0,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(1,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}",0.940149625935162
155522,"/** 
 * Create 3 XIDs on the resource that are in the journal -> recoverer commits them.
 * @throws Exception
 */
public void testRecoverCommitting() throws Exception {
  Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Xid xid1=new MockXid(1,1,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid1);
  Xid xid2=new MockXid(2,2,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid2);
  Set names=new HashSet();
  names.add(pds.getUniqueName());
  Journal journal=TransactionManagerServices.getJournal();
  journal.open();
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid1.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid2.getGlobalTransactionId()),names);
  TransactionManagerServices.getRecoverer().run();
  journal.close();
  assertEquals(3,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(0,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}","/** 
 * Create 3 XIDs on the resource that are in the journal -> recoverer commits them.
 * @throws Exception
 */
public void testRecoverCommitting() throws Exception {
  Xid xid0=new MockXid(0,0,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid0);
  Xid xid1=new MockXid(1,1,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid1);
  Xid xid2=new MockXid(2,2,BitronixXid.FORMAT_ID);
  xaResource.addInDoubtXid(xid2);
  Set names=new HashSet();
  names.add(pds.getUniqueName());
  journal.log(Status.STATUS_COMMITTING,new Uid(xid0.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid1.getGlobalTransactionId()),names);
  journal.log(Status.STATUS_COMMITTING,new Uid(xid2.getGlobalTransactionId()),names);
  TransactionManagerServices.getRecoverer().run();
  assertEquals(3,TransactionManagerServices.getRecoverer().getCommittedCount());
  assertEquals(0,TransactionManagerServices.getRecoverer().getRolledbackCount());
  assertEquals(0,xaResource.recover(XAResource.TMSTARTRSCAN | XAResource.TMENDRSCAN).length);
}",0.9563636363636364
155523,"protected void tearDown() throws Exception {
  pds.close();
  new File(TransactionManagerServices.getConfiguration().getLogPart1Filename()).delete();
  new File(TransactionManagerServices.getConfiguration().getLogPart2Filename()).delete();
}","protected void tearDown() throws Exception {
  journal.close();
  pds.close();
  new File(TransactionManagerServices.getConfiguration().getLogPart1Filename()).delete();
  new File(TransactionManagerServices.getConfiguration().getLogPart2Filename()).delete();
}",0.9620758483033932
155524,"public JdbcConnectionHandle(JdbcPooledConnection jdbcPooledConnection,Connection connection){
  this.jdbcPooledConnection=jdbcPooledConnection;
  this.connection=connection;
}","public JdbcConnectionHandle(JdbcPooledConnection jdbcPooledConnection,Connection connection){
  this.jdbcPooledConnection=jdbcPooledConnection;
  this.delegate=connection;
}",0.9597701149425288
155525,"public void setTransactionIsolation(int level) throws SQLException {
  getConnection().setTransactionIsolation(level);
}","public void setTransactionIsolation(int level) throws SQLException {
  getDelegate().setTransactionIsolation(level);
}",0.9411764705882352
155526,"public SQLWarning getWarnings() throws SQLException {
  return getConnection().getWarnings();
}","public SQLWarning getWarnings() throws SQLException {
  return getDelegate().getWarnings();
}",0.925531914893617
155527,"public void commit() throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  getConnection().commit();
}","public void commit() throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  getDelegate().commit();
}",0.9664179104477612
155528,"public int getHoldability() throws SQLException {
  return getConnection().getHoldability();
}","public int getHoldability() throws SQLException {
  return getDelegate().getHoldability();
}",0.9247311827956988
155529,"public void setCatalog(String catalog) throws SQLException {
  getConnection().setCatalog(catalog);
}","public void setCatalog(String catalog) throws SQLException {
  getDelegate().setCatalog(catalog);
}",0.93
155530,"public void releaseSavepoint(Savepoint savepoint) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  getConnection().releaseSavepoint(savepoint);
}","public void releaseSavepoint(Savepoint savepoint) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  getDelegate().releaseSavepoint(savepoint);
}",0.971518987341772
155531,"public PreparedStatement prepareStatement(String sql,String[] columnNames) throws SQLException {
  enlistResource();
  return getConnection().prepareStatement(sql,columnNames);
}","public PreparedStatement prepareStatement(String sql,String[] columnNames) throws SQLException {
  enlistResource();
  return getDelegate().prepareStatement(sql,columnNames);
}",0.96045197740113
155532,"public void setHoldability(int holdability) throws SQLException {
  getConnection().setHoldability(holdability);
}","public void setHoldability(int holdability) throws SQLException {
  getDelegate().setHoldability(holdability);
}",0.9380530973451328
155533,"public String getCatalog() throws SQLException {
  return getConnection().getCatalog();
}","public String getCatalog() throws SQLException {
  return getDelegate().getCatalog();
}",0.9204545454545454
155534,"public String nativeSQL(String sql) throws SQLException {
  return getConnection().nativeSQL(sql);
}","public String nativeSQL(String sql) throws SQLException {
  return getDelegate().nativeSQL(sql);
}",0.9292929292929292
155535,"public Connection getConnection(){
  return connection;
}","public Connection getConnection(){
  return delegate;
}",0.875
155536,"public boolean isReadOnly() throws SQLException {
  return getConnection().isReadOnly();
}","public boolean isReadOnly() throws SQLException {
  return getDelegate().isReadOnly();
}",0.9213483146067416
155537,"public Savepoint setSavepoint(String name) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  return getConnection().setSavepoint(name);
}","public Savepoint setSavepoint(String name) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  return getDelegate().setSavepoint(name);
}",0.970684039087948
155538,"public void close() throws SQLException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + this);
  if (jdbcPooledConnection == null)   return;
  PoolingDataSource poolingDataSource=jdbcPooledConnection.getPoolingDataSource();
  jdbcPooledConnection.release();
  jdbcPooledConnection=null;
  if (!poolingDataSource.getKeepConnectionOpenUntilAfter2Pc()) {
    connection.close();
  }
 else {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + connection);
  }
}","public void close() throws SQLException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + this);
  if (jdbcPooledConnection == null)   return;
  PoolingDataSource poolingDataSource=jdbcPooledConnection.getPoolingDataSource();
  jdbcPooledConnection.release();
  jdbcPooledConnection=null;
  if (!poolingDataSource.getKeepConnectionOpenUntilAfter2Pc()) {
    delegate.close();
  }
 else {
    pretendClosed=true;
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + delegate);
  }
}",0.9392712550607288
155539,"public void rollback(Savepoint savepoint) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  getConnection().rollback(savepoint);
}","public void rollback(Savepoint savepoint) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   throw new SQLException(""String_Node_Str"");
  getDelegate().rollback(savepoint);
}",0.97
155540,"public void setTypeMap(Map map) throws SQLException {
  getConnection().setTypeMap(map);
}","public void setTypeMap(Map map) throws SQLException {
  getDelegate().setTypeMap(map);
}",0.9213483146067416
155541,"public boolean getAutoCommit() throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   return false;
  return getConnection().getAutoCommit();
}","public boolean getAutoCommit() throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   return false;
  return getDelegate().getAutoCommit();
}",0.9657794676806084
155542,"public void clearWarnings() throws SQLException {
  getConnection().clearWarnings();
}","public void clearWarnings() throws SQLException {
  getDelegate().clearWarnings();
}",0.9176470588235294
155543,"public Statement createStatement(int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {
  enlistResource();
  return getConnection().createStatement(resultSetType,resultSetConcurrency,resultSetHoldability);
}","public Statement createStatement(int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {
  enlistResource();
  return getDelegate().createStatement(resultSetType,resultSetConcurrency,resultSetHoldability);
}",0.9629629629629628
155544,"public boolean isClosed() throws SQLException {
  if (jdbcPooledConnection == null)   return true;
  return getConnection().isClosed();
}","public boolean isClosed() throws SQLException {
  if (jdbcPooledConnection == null)   return true;
  return getDelegate().isClosed();
}",0.9485294117647058
155545,"public void setAutoCommit(boolean autoCommit) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (!jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   getConnection().setAutoCommit(autoCommit);
 else   if (autoCommit)   throw new SQLException(""String_Node_Str"");
}","public void setAutoCommit(boolean autoCommit) throws SQLException {
  if (jdbcPooledConnection == null)   throw new SQLException(""String_Node_Str"");
  if (!jdbcPooledConnection.isParticipatingInActiveGlobalTransaction())   getDelegate().setAutoCommit(autoCommit);
 else   if (autoCommit)   throw new SQLException(""String_Node_Str"");
}",0.9731343283582088
155546,"public int getTransactionIsolation() throws SQLException {
  return getConnection().getTransactionIsolation();
}","public int getTransactionIsolation() throws SQLException {
  return getDelegate().getTransactionIsolation();
}",0.9369369369369368
155547,"public String toString(){
  return ""String_Node_Str"" + jdbcPooledConnection + ""String_Node_Str""+ connection;
}","public String toString(){
  return ""String_Node_Str"" + jdbcPooledConnection + ""String_Node_Str""+ delegate;
}",0.9357798165137616
155548,"public DatabaseMetaData getMetaData() throws SQLException {
  return getConnection().getMetaData();
}","public DatabaseMetaData getMetaData() throws SQLException {
  return getDelegate().getMetaData();
}",0.93
155549,"public void setReadOnly(boolean readOnly) throws SQLException {
  getConnection().setReadOnly(readOnly);
}","public void setReadOnly(boolean readOnly) throws SQLException {
  getDelegate().setReadOnly(readOnly);
}",0.9333333333333332
155550,"public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {
  enlistResource();
  return getConnection().prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
}","public CallableStatement prepareCall(String sql,int resultSetType,int resultSetConcurrency,int resultSetHoldability) throws SQLException {
  enlistResource();
  return getDelegate().prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
}",0.9651162790697676
155551,"public Map getTypeMap() throws SQLException {
  return getConnection().getTypeMap();
}","public Map getTypeMap() throws SQLException {
  return getDelegate().getTypeMap();
}",0.9176470588235294
155552,"/** 
 * Run all registered Synchronizations' beforeCompletion() method. Be aware that this method can change the transaction status to mark it as rollback only for instance.
 * @throws bitronix.tm.internal.BitronixSystemException
 */
private void fireBeforeCompletionEvent() throws BitronixSystemException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizations.size() + ""String_Node_Str"");
  for (int i=0; i < synchronizations.size(); i++) {
    Synchronization synchronization=(Synchronization)synchronizations.get(i);
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + synchronization);
      synchronization.beforeCompletion();
    }
 catch (    RuntimeException ex) {
      log.warn(""String_Node_Str"" + synchronization + ""String_Node_Str"",ex);
      setStatus(Status.STATUS_MARKED_ROLLBACK);
      return;
    }
  }
  ManagementRegistrar.unregister(""String_Node_Str"" + resourceManager.getGtrid());
}","/** 
 * Run all registered Synchronizations' beforeCompletion() method. Be aware that this method can change the transaction status to mark it as rollback only for instance.
 * @throws bitronix.tm.internal.BitronixSystemException if status changing due to a synchronization throwing anexception fails.
 */
private void fireBeforeCompletionEvent() throws BitronixSystemException {
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizations.size() + ""String_Node_Str"");
  for (int i=0; i < synchronizations.size(); i++) {
    Synchronization synchronization=(Synchronization)synchronizations.get(i);
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + synchronization);
      synchronization.beforeCompletion();
    }
 catch (    RuntimeException ex) {
      log.warn(""String_Node_Str"" + synchronization + ""String_Node_Str"",ex);
      setStatus(Status.STATUS_MARKED_ROLLBACK);
      return;
    }
  }
}",0.9188619599578504
155553,"private void fireAfterCompletionEvent(){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizations.size() + ""String_Node_Str"");
  for (int i=0; i < synchronizations.size(); i++) {
    Synchronization synchronization=(Synchronization)synchronizations.get(i);
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + synchronization + ""String_Node_Str""+ Decoder.decodeStatus(status));
      synchronization.afterCompletion(status);
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + synchronization,ex);
    }
  }
}","private void fireAfterCompletionEvent(){
  if (log.isDebugEnabled())   log.debug(""String_Node_Str"" + synchronizations.size() + ""String_Node_Str"");
  for (int i=0; i < synchronizations.size(); i++) {
    Synchronization synchronization=(Synchronization)synchronizations.get(i);
    try {
      if (log.isDebugEnabled())       log.debug(""String_Node_Str"" + synchronization + ""String_Node_Str""+ Decoder.decodeStatus(status));
      synchronization.afterCompletion(status);
    }
 catch (    Exception ex) {
      log.warn(""String_Node_Str"" + synchronization,ex);
    }
  }
  ManagementRegistrar.unregister(""String_Node_Str"" + resourceManager.getGtrid());
}",0.9330065359477124
155554,"private void closePendingSessions(){
  for (int i=0; i < sessions.size(); i++) {
    DualSessionWrapper dualSessionWrapper=(DualSessionWrapper)sessions.get(i);
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + dualSessionWrapper);
    try {
      dualSessionWrapper.close();
    }
 catch (    JMSException ex) {
      log.warn(""String_Node_Str"" + dualSessionWrapper,ex);
    }
  }
}","private void closePendingSessions(){
  for (int i=0; i < sessions.size(); i++) {
    DualSessionWrapper dualSessionWrapper=(DualSessionWrapper)sessions.get(i);
    if (dualSessionWrapper.getState() != STATE_ACCESSIBLE)     continue;
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + dualSessionWrapper);
    try {
      dualSessionWrapper.close();
    }
 catch (    JMSException ex) {
      log.warn(""String_Node_Str"" + dualSessionWrapper,ex);
    }
  }
}",0.915606936416185
155555,"public void stateChanged(XAStatefulHolder source,int oldState,int newState){
  if (newState == STATE_IN_POOL) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + poolingConnectionFactory);
  }
  if (oldState == STATE_IN_POOL && newState == STATE_ACCESSIBLE) {
    acquisitionDate=new Date();
  }
  if (newState == STATE_CLOSED) {
    sessions.remove(source);
    ManagementRegistrar.unregister(jmxName);
  }
}","public void stateChanged(XAStatefulHolder source,int oldState,int newState){
  if (newState == STATE_IN_POOL) {
    if (log.isDebugEnabled())     log.debug(""String_Node_Str"" + poolingConnectionFactory);
    sessions.clear();
  }
  if (oldState == STATE_IN_POOL && newState == STATE_ACCESSIBLE) {
    acquisitionDate=new Date();
  }
  if (newState == STATE_CLOSED) {
    ManagementRegistrar.unregister(jmxName);
  }
}",0.9392133492252682
155556,"@Test public void callThreadConfinedMethodsFromWrongThread() throws Throwable {
  dynamicRealm.beginTransaction();
  dynamicRealm.deleteAll();
  final DynamicRealmObject obj=dynamicRealm.createObject(AllJavaTypes.CLASS_NAME,100L);
  dynamicRealm.commitTransaction();
  final AtomicReference<Throwable> throwableFromThread=new AtomicReference<Throwable>();
  final CountDownLatch testFinished=new CountDownLatch(1);
  final String expectedMessage;
  try {
    final Field expectedMessageField=BaseRealm.class.getDeclaredField(""String_Node_Str"");
    expectedMessageField.setAccessible(true);
    expectedMessage=(String)expectedMessageField.get(null);
  }
 catch (  NoSuchFieldException e) {
    throw new AssertionError(e);
  }
catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
  final Thread thread=new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        for (        ThreadConfinedMethods method : ThreadConfinedMethods.values()) {
          try {
            callThreadConfinedMethod(obj,method);
            fail(""String_Node_Str"");
          }
 catch (          Throwable e) {
            if (e instanceof IllegalStateException && expectedMessage.equals(e.getMessage())) {
              continue;
            }
            throwableFromThread.set(e);
            return;
          }
        }
      }
  finally {
        testFinished.countDown();
      }
    }
  }
;
  thread.start();
  TestHelper.awaitOrFail(testFinished);
  final Throwable throwable=throwableFromThread.get();
  if (throwable != null) {
    throw throwable;
  }
}","@Test public void callThreadConfinedMethodsFromWrongThread() throws Throwable {
  dynamicRealm.beginTransaction();
  dynamicRealm.deleteAll();
  final DynamicRealmObject obj=dynamicRealm.createObject(AllJavaTypes.CLASS_NAME,100L);
  dynamicRealm.commitTransaction();
  final AtomicReference<Throwable> throwableFromThread=new AtomicReference<Throwable>();
  final CountDownLatch testFinished=new CountDownLatch(1);
  final String expectedMessage;
  try {
    final Field expectedMessageField=BaseRealm.class.getDeclaredField(""String_Node_Str"");
    expectedMessageField.setAccessible(true);
    expectedMessage=(String)expectedMessageField.get(null);
  }
 catch (  NoSuchFieldException e) {
    throw new AssertionError(e);
  }
catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
  final Thread thread=new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        for (        ThreadConfinedMethods method : ThreadConfinedMethods.values()) {
          try {
            callThreadConfinedMethod(obj,method);
            fail(""String_Node_Str"");
          }
 catch (          IllegalStateException e) {
            if (expectedMessage.equals(e.getMessage())) {
              continue;
            }
            throwableFromThread.set(e);
            return;
          }
        }
      }
  finally {
        testFinished.countDown();
      }
    }
  }
;
  thread.start();
  TestHelper.awaitOrFail(testFinished);
  final Throwable throwable=throwableFromThread.get();
  if (throwable != null) {
    throw throwable;
  }
}",0.9784400760938492
155557,"@Override public void run(){
  try {
    object.getDynamicRealm();
    fail();
  }
 catch (  Throwable t) {
    throwable.set(t);
  }
 finally {
    threadFinished.countDown();
  }
}","@Override public void run(){
  try {
    object.getDynamicRealm();
    fail();
  }
 catch (  IllegalStateException e) {
    assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,e.getMessage());
  }
 finally {
    threadFinished.countDown();
  }
}",0.4633569739952718
155558,"@Test public void getRealm_illegalThreadThrows() throws Throwable {
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
  dynamicRealm.refresh();
  final DynamicRealmObject object=dynamicRealm.where(AllTypes.CLASS_NAME).findFirst();
  final CountDownLatch threadFinished=new CountDownLatch(1);
  final AtomicReference<Throwable> throwable=new AtomicReference<>();
  final Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        object.getDynamicRealm();
        fail();
      }
 catch (      Throwable t) {
        throwable.set(t);
      }
 finally {
        threadFinished.countDown();
      }
    }
  }
);
  thread.start();
  TestHelper.awaitOrFail(threadFinished);
  final Throwable thrownInTheThread=throwable.get();
  if (!(thrownInTheThread instanceof IllegalStateException)) {
    throw thrownInTheThread;
  }
  assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,thrownInTheThread.getMessage());
}","@Test public void getRealm_illegalThreadThrows() throws Throwable {
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
  dynamicRealm.refresh();
  final DynamicRealmObject object=dynamicRealm.where(AllTypes.CLASS_NAME).findFirst();
  final CountDownLatch threadFinished=new CountDownLatch(1);
  final Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        object.getDynamicRealm();
        fail();
      }
 catch (      IllegalStateException e) {
        assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,e.getMessage());
      }
 finally {
        threadFinished.countDown();
      }
    }
  }
);
  thread.start();
  TestHelper.awaitOrFail(threadFinished);
}",0.6952988972721996
155559,"@Test public void mutableMethodsOutsideTransactions(){
  for (  OrderedCollectionMutatorMethod method : OrderedCollectionMutatorMethod.values()) {
    Class<? extends Throwable> expected=IllegalStateException.class;
    if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_INDEX:
case ADD_ALL_INDEX:
case SET:
case REMOVE_INDEX:
        expected=UnsupportedOperationException.class;
      break;
default :
  }
}
try {
switch (method) {
case DELETE_INDEX:
    collection.deleteFromRealm(0);
  break;
case DELETE_FIRST:
collection.deleteFirstFromRealm();
break;
case DELETE_LAST:
collection.deleteLastFromRealm();
break;
case ADD_INDEX:
collection.add(0,new AllJavaTypes());
break;
case ADD_ALL_INDEX:
collection.addAll(0,Collections.singletonList(new AllJavaTypes()));
break;
case SET:
collection.set(0,new AllJavaTypes());
break;
case REMOVE_INDEX:
collection.remove(0);
break;
}
fail(""String_Node_Str"" + method);
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
fail(method + ""String_Node_Str"" + t+ ""String_Node_Str""+ expected);
}
}
}
}","@Test public void mutableMethodsOutsideTransactions(){
  for (  OrderedCollectionMutatorMethod method : OrderedCollectionMutatorMethod.values()) {
    Class<? extends Throwable> expected=IllegalStateException.class;
    if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_INDEX:
case ADD_ALL_INDEX:
case SET:
case REMOVE_INDEX:
        expected=UnsupportedOperationException.class;
      break;
default :
  }
}
try {
switch (method) {
case DELETE_INDEX:
    collection.deleteFromRealm(0);
  break;
case DELETE_FIRST:
collection.deleteFirstFromRealm();
break;
case DELETE_LAST:
collection.deleteLastFromRealm();
break;
case ADD_INDEX:
collection.add(0,new AllJavaTypes());
break;
case ADD_ALL_INDEX:
collection.addAll(0,Collections.singletonList(new AllJavaTypes()));
break;
case SET:
collection.set(0,new AllJavaTypes());
break;
case REMOVE_INDEX:
collection.remove(0);
break;
}
fail(""String_Node_Str"" + method);
}
 catch (IllegalStateException e) {
assertEquals(expected,e.getClass());
}
catch (UnsupportedOperationException e) {
assertEquals(expected,e.getClass());
}
}
}",0.9044019564250778
155560,"@Test public void mutableMethodsOutsideTransactions(){
  for (  CollectionMutatorMethod method : CollectionMutatorMethod.values()) {
    Class<? extends Throwable> expected=IllegalStateException.class;
    if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
        expected=UnsupportedOperationException.class;
      break;
default :
  }
}
try {
switch (method) {
case DELETE_ALL:
    collection.deleteAllFromRealm();
  break;
case ADD_OBJECT:
collection.add(new AllJavaTypes());
break;
case ADD_ALL_OBJECTS:
collection.addAll(Collections.singletonList(new AllJavaTypes()));
break;
case CLEAR:
collection.clear();
break;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
}
fail(""String_Node_Str"" + method);
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
fail(method + ""String_Node_Str"" + t+ ""String_Node_Str""+ expected);
}
}
}
}","@Test public void mutableMethodsOutsideTransactions(){
  for (  CollectionMutatorMethod method : CollectionMutatorMethod.values()) {
    Class<? extends Throwable> expected=IllegalStateException.class;
    if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
        expected=UnsupportedOperationException.class;
      break;
default :
  }
}
try {
switch (method) {
case DELETE_ALL:
    collection.deleteAllFromRealm();
  break;
case ADD_OBJECT:
collection.add(new AllJavaTypes());
break;
case ADD_ALL_OBJECTS:
collection.addAll(Collections.singletonList(new AllJavaTypes()));
break;
case CLEAR:
collection.clear();
break;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
}
fail(""String_Node_Str"" + method);
}
 catch (IllegalStateException e) {
assertEquals(expected,e.getClass());
}
catch (UnsupportedOperationException e) {
assertEquals(expected,e.getClass());
}
}
}",0.9117043121149896
155561,"public void listIterator_add(){
  if (skipTest(CollectionClass.REALMRESULTS)) {
    return;
  }
  realm.beginTransaction();
  ListIterator<AllJavaTypes> it=collection.listIterator();
  try {
    it.add(new AllJavaTypes());
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  AllJavaTypes obj=it.next();
  assertEquals(0,obj.getFieldLong());
  it.add(new AllJavaTypes(42));
  obj=it.previous();
  assertEquals(42,obj.getFieldLong());
}","@Test public void listIterator_add(){
  if (skipTest(CollectionClass.REALMRESULTS)) {
    return;
  }
  realm.beginTransaction();
  ListIterator<AllJavaTypes> it=collection.listIterator();
  try {
    it.add(new AllJavaTypes());
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  AllJavaTypes obj=it.next();
  assertEquals(0,obj.getFieldLong());
  it.add(new AllJavaTypes(42));
  obj=it.previous();
  assertEquals(42,obj.getFieldLong());
}",0.9933333333333332
155562,"@Test public void listIterator_remove_beforeNext(){
  Iterator<AllJavaTypes> it=collection.listIterator();
  realm.beginTransaction();
  try {
    it.remove();
  }
 catch (  IllegalStateException e) {
    assertRealmList();
  }
catch (  UnsupportedOperationException e) {
    assertResultsOrSnapshot();
  }
}","@Test public void listIterator_remove_beforeNext(){
  Iterator<AllJavaTypes> it=collection.listIterator();
  realm.beginTransaction();
  try {
    it.remove();
    fail();
  }
 catch (  IllegalStateException e) {
    assertRealmList();
  }
catch (  UnsupportedOperationException e) {
    assertResultsOrSnapshot();
  }
}",0.9808917197452228
155563,"@Override public void run(){
  try {
    object.getRealm();
    fail();
  }
 catch (  Throwable t) {
    throwable.set(t);
    threadFinished.countDown();
    return;
  }
  try {
    RealmObject.getRealm(object);
    fail();
  }
 catch (  Throwable t) {
    throwable.set(t);
  }
 finally {
    threadFinished.countDown();
  }
}","@Override public void run(){
  try {
    object.getRealm();
    fail();
  }
 catch (  IllegalStateException e) {
    assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,e.getMessage());
  }
  try {
    RealmObject.getRealm(object);
    fail();
  }
 catch (  IllegalStateException e) {
    assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,e.getMessage());
  }
 finally {
    threadFinished.countDown();
  }
}",0.5972602739726027
155564,"@Test public void getRealm_illegalThreadThrows() throws Throwable {
  realm.beginTransaction();
  final AllTypes object=realm.createObject(AllTypes.class);
  realm.commitTransaction();
  final CountDownLatch threadFinished=new CountDownLatch(1);
  final AtomicReference<Throwable> throwable=new AtomicReference<>();
  final Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        object.getRealm();
        fail();
      }
 catch (      Throwable t) {
        throwable.set(t);
        threadFinished.countDown();
        return;
      }
      try {
        RealmObject.getRealm(object);
        fail();
      }
 catch (      Throwable t) {
        throwable.set(t);
      }
 finally {
        threadFinished.countDown();
      }
    }
  }
);
  thread.start();
  TestHelper.awaitOrFail(threadFinished);
  final Throwable thrownInTheThread=throwable.get();
  if (!(thrownInTheThread instanceof IllegalStateException)) {
    throw thrownInTheThread;
  }
  assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,thrownInTheThread.getMessage());
}","@Test public void getRealm_illegalThreadThrows() throws Throwable {
  realm.beginTransaction();
  final AllTypes object=realm.createObject(AllTypes.class);
  realm.commitTransaction();
  final CountDownLatch threadFinished=new CountDownLatch(1);
  final Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        object.getRealm();
        fail();
      }
 catch (      IllegalStateException e) {
        assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,e.getMessage());
      }
      try {
        RealmObject.getRealm(object);
        fail();
      }
 catch (      IllegalStateException e) {
        assertEquals(BaseRealm.INCORRECT_THREAD_MESSAGE,e.getMessage());
      }
 finally {
        threadFinished.countDown();
      }
    }
  }
);
  thread.start();
  TestHelper.awaitOrFail(threadFinished);
}",0.4895397489539749
155565,"@Test public void callThreadConfinedMethodsFromWrongThread() throws Throwable {
  final RealmQuery<AllJavaTypes> query=realm.where(AllJavaTypes.class);
  final AtomicReference<Throwable> throwableFromThread=new AtomicReference<Throwable>();
  final CountDownLatch testFinished=new CountDownLatch(1);
  final String expectedMessage;
  try {
    final Field expectedMessageField=BaseRealm.class.getDeclaredField(""String_Node_Str"");
    expectedMessageField.setAccessible(true);
    expectedMessage=(String)expectedMessageField.get(null);
  }
 catch (  NoSuchFieldException e) {
    throw new AssertionError(e);
  }
catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
  final Thread thread=new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        for (        ThreadConfinedMethods method : ThreadConfinedMethods.values()) {
          try {
            callThreadConfinedMethod(query,method);
            fail(""String_Node_Str"");
          }
 catch (          Throwable e) {
            if (e instanceof IllegalStateException && expectedMessage.equals(e.getMessage())) {
              continue;
            }
            throwableFromThread.set(e);
            return;
          }
        }
      }
  finally {
        testFinished.countDown();
      }
    }
  }
;
  thread.start();
  TestHelper.awaitOrFail(testFinished);
  final Throwable throwable=throwableFromThread.get();
  if (throwable != null) {
    throw throwable;
  }
}","@Test public void callThreadConfinedMethodsFromWrongThread() throws Throwable {
  final RealmQuery<AllJavaTypes> query=realm.where(AllJavaTypes.class);
  final CountDownLatch testFinished=new CountDownLatch(1);
  final String expectedMessage;
  try {
    final Field expectedMessageField=BaseRealm.class.getDeclaredField(""String_Node_Str"");
    expectedMessageField.setAccessible(true);
    expectedMessage=(String)expectedMessageField.get(null);
  }
 catch (  NoSuchFieldException e) {
    throw new AssertionError(e);
  }
catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
  final Thread thread=new Thread(""String_Node_Str""){
    @Override public void run(){
      try {
        for (        ThreadConfinedMethods method : ThreadConfinedMethods.values()) {
          try {
            callThreadConfinedMethod(query,method);
            fail(""String_Node_Str"");
          }
 catch (          IllegalStateException e) {
            assertEquals(expectedMessage,e.getMessage());
          }
        }
      }
  finally {
        testFinished.countDown();
      }
    }
  }
;
  thread.start();
  TestHelper.awaitOrFail(testFinished);
}",0.7365223993925588
155566,"@Test public void mutableMethodsCalled_notInTransaction(){
  if (type == SchemaType.IMMUTABLE) {
    return;
  }
  realm.cancelTransaction();
  try {
    realmSchema.create(""String_Node_Str"");
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
  try {
    realmSchema.createWithPrimaryKeyField(""String_Node_Str"",""String_Node_Str"",String.class);
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
  try {
    realmSchema.remove(""String_Node_Str"");
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
  try {
    realmSchema.rename(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
}","@Test public void mutableMethodsCalled_notInTransaction(){
  if (type == SchemaType.IMMUTABLE) {
    return;
  }
  realm.cancelTransaction();
  try {
    realmSchema.create(""String_Node_Str"");
    fail();
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
  try {
    realmSchema.createWithPrimaryKeyField(""String_Node_Str"",""String_Node_Str"",String.class);
    fail();
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
  try {
    realmSchema.remove(""String_Node_Str"");
    fail();
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
  try {
    realmSchema.rename(""String_Node_Str"",""String_Node_Str"");
    fail();
  }
 catch (  IllegalStateException expected) {
    assertThat(expected.getMessage(),CoreMatchers.containsString(""String_Node_Str""));
  }
}",0.975782038345106
155567,"@Test public void waitForChange_onLooperThread() throws Throwable {
  final CountDownLatch bgRealmClosed=new CountDownLatch(1);
  final ExceptionHolder bgError=new ExceptionHolder();
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Looper.prepare();
      Realm realm=Realm.getInstance(realmConfig);
      try {
        realm.waitForChange();
        fail();
      }
 catch (      Throwable expected) {
        bgError.setException(expected);
      }
 finally {
        realm.close();
        bgRealmClosed.countDown();
      }
    }
  }
);
  thread.start();
  TestHelper.awaitOrFail(bgRealmClosed);
  if (bgError.getException() instanceof AssertionError) {
    throw bgError.getException();
  }
  assertEquals(IllegalStateException.class,bgError.getException().getClass());
}","@Test public void waitForChange_onLooperThread() throws Throwable {
  final CountDownLatch bgRealmClosed=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Looper.prepare();
      Realm realm=Realm.getInstance(realmConfig);
      try {
        realm.waitForChange();
        fail();
      }
 catch (      IllegalStateException ignored) {
      }
 finally {
        realm.close();
        bgRealmClosed.countDown();
      }
    }
  }
);
  thread.start();
  TestHelper.awaitOrFail(bgRealmClosed);
}",0.775570272259014
155568,"@Test public void sortCaseSensitive(){
  chars=""String_Node_Str"";
  createAndTest(new StringBuffer(chars).reverse().toString());
  chars=""String_Node_Str"";
  numberOfPermutations=0;
  permute(chars,0,chars.length() - 1);
  assertEquals(numberOfPermutations,factorial(chars.length()));
}","@Test public void sortCaseSensitive(){
  chars=""String_Node_Str"";
  createAndTest(new StringBuilder(chars).reverse().toString());
  chars=""String_Node_Str"";
  numberOfPermutations=0;
  permute(chars,0,chars.length() - 1);
  assertEquals(numberOfPermutations,factorial(chars.length()));
}",0.9912739965095986
155569,"@Override protected void before() throws Throwable {
  super.before();
  RealmConfiguration config=createConfiguration(UUID.randomUUID().toString());
  LinkedList<Object> refs=new LinkedList<>();
  List<Realm> realms=new LinkedList<>();
  LinkedList<Closeable> closeables=new LinkedList<>();
synchronized (lock) {
    realmConfiguration=config;
    realm=null;
    backgroundHandler=null;
    keepStrongReference=refs;
    testRealms=realms;
    closableResources=closeables;
  }
}","@Override protected void before() throws Throwable {
  super.before();
  RealmConfiguration config=createConfiguration(UUID.randomUUID().toString());
  List<Object> refs=new ArrayList<>();
  List<Realm> realms=new ArrayList<>();
  List<Closeable> closeables=new ArrayList<>();
synchronized (lock) {
    realmConfiguration=config;
    realm=null;
    backgroundHandler=null;
    keepStrongReference=refs;
    testRealms=realms;
    closableResources=closeables;
  }
}",0.9271383315733897
155570,"/** 
 * Stops the ROS instance used for the test.
 */
protected static void stopSyncServer(){
  try {
    HttpUtils.stopSyncServer();
  }
 catch (  Exception e) {
    Log.e(HttpUtils.TAG,""String_Node_Str"" + Util.getStackTrace(e));
  }
}","/** 
 * Stops the ROS instance used for the test. The   {@link #startSyncServer()} will stop the sync server if needed, sonormally there is no need to call this.
 */
protected static void stopSyncServer(){
  try {
    HttpUtils.stopSyncServer();
  }
 catch (  Exception e) {
    Log.e(HttpUtils.TAG,""String_Node_Str"" + Util.getStackTrace(e));
  }
}",0.8082191780821918
155571,"@After public void teardownTest(){
  if (!looperThread.isRuleUsed() || looperThread.isTestComplete()) {
    restoreEnvironmentAfterTest();
    stopSyncServer();
  }
 else {
    looperThread.runAfterTest(new Runnable(){
      @Override public void run(){
        restoreEnvironmentAfterTest();
        stopSyncServer();
      }
    }
);
  }
}","@After public void teardownTest(){
  if (!looperThread.isRuleUsed() || looperThread.isTestComplete()) {
    restoreEnvironmentAfterTest();
  }
 else {
    looperThread.runAfterTest(new Runnable(){
      @Override public void run(){
        restoreEnvironmentAfterTest();
      }
    }
);
  }
}",0.889589905362776
155572,"@Override public void run(){
  restoreEnvironmentAfterTest();
  stopSyncServer();
}","@Override public void run(){
  restoreEnvironmentAfterTest();
}",0.863013698630137
155573,"public static void startSyncServer() throws Exception {
  Request request=new Request.Builder().url(START_SERVER).build();
  Response response=client.newCall(request).execute();
  if (!response.isSuccessful())   throw new IOException(""String_Node_Str"" + response);
  SystemClock.sleep(2000);
}","/** 
 * Start the sync server. If the server has been started before, stop it first.
 */
public static void startSyncServer() throws Exception {
  Request request=new Request.Builder().url(START_SERVER).build();
  Response response=client.newCall(request).execute();
  if (!response.isSuccessful())   throw new IOException(""String_Node_Str"" + response);
  SystemClock.sleep(2000);
}",0.8681481481481481
155574,"public static void stopSyncServer() throws Exception {
  Request request=new Request.Builder().url(STOP_SERVER).build();
  Response response=client.newCall(request).execute();
  if (!response.isSuccessful())   throw new IOException(""String_Node_Str"" + response);
}","/** 
 * Stop the sync server if it is alive.   {@link #startSyncServer()} will implicitly stop the server if needed, sonormally there is no need to call this.
 */
public static void stopSyncServer() throws Exception {
  Request request=new Request.Builder().url(STOP_SERVER).build();
  Response response=client.newCall(request).execute();
  if (!response.isSuccessful())   throw new IOException(""String_Node_Str"" + response);
}",0.76410998552822
155575,"@Override public RealmObjectSchema rename(String oldClassName,String newClassName){
  realm.checkNotInSync();
  checkNotEmpty(oldClassName,""String_Node_Str"");
  checkNotEmpty(newClassName,""String_Node_Str"");
  String oldInternalName=Table.getTableNameForClass(oldClassName);
  String newInternalName=Table.getTableNameForClass(newClassName);
  checkHasTable(oldClassName,""String_Node_Str"" + oldClassName);
  if (realm.getSharedRealm().hasTable(newInternalName)) {
    throw new IllegalArgumentException(oldClassName + ""String_Node_Str"" + newClassName);
  }
  Table oldTable=getTable(oldClassName);
  String pkField=null;
  if (oldTable.hasPrimaryKey()) {
    pkField=oldTable.getColumnName(oldTable.getPrimaryKey());
    oldTable.setPrimaryKey(null);
  }
  realm.getSharedRealm().renameTable(oldInternalName,newInternalName);
  Table table=realm.getSharedRealm().getTable(newInternalName);
  if (pkField != null) {
    table.setPrimaryKey(pkField);
  }
  return new MutableRealmObjectSchema(realm,this,table);
}","@Override public RealmObjectSchema rename(String oldClassName,String newClassName){
  realm.checkNotInSync();
  checkNotEmpty(oldClassName,""String_Node_Str"");
  checkNotEmpty(newClassName,""String_Node_Str"");
  String oldInternalName=Table.getTableNameForClass(oldClassName);
  String newInternalName=Table.getTableNameForClass(newClassName);
  checkHasTable(oldClassName,""String_Node_Str"" + oldClassName);
  if (realm.getSharedRealm().hasTable(newInternalName)) {
    throw new IllegalArgumentException(oldClassName + ""String_Node_Str"" + newClassName);
  }
  Table oldTable=getTable(oldClassName);
  String pkField=null;
  if (oldTable.hasPrimaryKey()) {
    pkField=oldTable.getColumnName(oldTable.getPrimaryKey());
    oldTable.setPrimaryKey(null);
  }
  realm.getSharedRealm().renameTable(oldInternalName,newInternalName);
  Table table=realm.getSharedRealm().getTable(newInternalName);
  if (pkField != null) {
    table.setPrimaryKey(pkField);
  }
  RealmObjectSchema objectSchema=removeFromClassNameToSchemaMap(oldInternalName);
  if (objectSchema == null || !objectSchema.getTable().isValid() || !objectSchema.getClassName().equals(newClassName)) {
    objectSchema=new MutableRealmObjectSchema(realm,this,table);
  }
  putToClassNameToSchemaMap(newInternalName,objectSchema);
  return objectSchema;
}",0.8667529107373868
155576,"@Override public void remove(String className){
  realm.checkNotInSync();
  checkNotEmpty(className,EMPTY_STRING_MSG);
  String internalTableName=Table.getTableNameForClass(className);
  checkHasTable(className,""String_Node_Str"" + className);
  Table table=getTable(className);
  if (table.hasPrimaryKey()) {
    table.setPrimaryKey(null);
  }
  realm.getSharedRealm().removeTable(internalTableName);
}","@Override public void remove(String className){
  realm.checkNotInSync();
  checkNotEmpty(className,EMPTY_STRING_MSG);
  String internalTableName=Table.getTableNameForClass(className);
  checkHasTable(className,""String_Node_Str"" + className);
  Table table=getTable(className);
  if (table.hasPrimaryKey()) {
    table.setPrimaryKey(null);
  }
  realm.getSharedRealm().removeTable(internalTableName);
  removeFromClassNameToSchemaMap(internalTableName);
}",0.9381563593932322
155577,"private synchronized <E extends BaseRealm>E doCreateRealmOrGetFromCache(RealmConfiguration configuration,Class<E> realmClass){
  RefAndCount refAndCount=refAndCountMap.get(RealmCacheType.valueOf(realmClass));
  if (getTotalGlobalRefCount() == 0) {
    copyAssetFileIfNeeded(configuration);
    boolean fileExists=configuration.realmExists();
    SharedRealm sharedRealm=null;
    try {
      sharedRealm=SharedRealm.getInstance(configuration);
      if (!fileExists) {
        try {
          ObjectServerFacade.getSyncFacadeIfPossible().downloadRemoteChanges(configuration);
        }
 catch (        Throwable t) {
          sharedRealm.close();
          sharedRealm=null;
          Realm.deleteRealm(configuration);
          throw t;
        }
      }
      if (Table.primaryKeyTableNeedsMigration(sharedRealm)) {
        sharedRealm.beginTransaction();
        if (Table.migratePrimaryKeyTableIfNeeded(sharedRealm)) {
          sharedRealm.commitTransaction();
        }
 else {
          sharedRealm.cancelTransaction();
        }
      }
    }
  finally {
      if (sharedRealm != null) {
        sharedRealm.close();
      }
    }
    this.configuration=configuration;
  }
 else {
    validateConfiguration(configuration);
  }
  if (refAndCount.localRealm.get() == null) {
    BaseRealm realm;
    if (realmClass == Realm.class) {
      realm=Realm.createInstance(this);
    }
 else     if (realmClass == DynamicRealm.class) {
      realm=DynamicRealm.createInstance(this);
    }
 else {
      throw new IllegalArgumentException(WRONG_REALM_CLASS_MESSAGE);
    }
    refAndCount.localRealm.set(realm);
    refAndCount.localCount.set(0);
    if (realmClass == Realm.class && refAndCount.globalCount == 0) {
      RealmCache.storeColumnIndices(typedColumnIndicesArray,realm.getSchema().getImmutableColumnIndicies());
    }
    refAndCount.globalCount++;
  }
  Integer refCount=refAndCount.localCount.get();
  refAndCount.localCount.set(refCount + 1);
  return (E)refAndCount.localRealm.get();
}","private synchronized <E extends BaseRealm>E doCreateRealmOrGetFromCache(RealmConfiguration configuration,Class<E> realmClass){
  RefAndCount refAndCount=refAndCountMap.get(RealmCacheType.valueOf(realmClass));
  if (getTotalGlobalRefCount() == 0) {
    copyAssetFileIfNeeded(configuration);
    boolean fileExists=configuration.realmExists();
    SharedRealm sharedRealm=null;
    try {
      sharedRealm=SharedRealm.getInstance(configuration);
      if (!fileExists) {
        try {
          ObjectServerFacade.getSyncFacadeIfPossible().downloadRemoteChanges(configuration);
        }
 catch (        Throwable t) {
          sharedRealm.close();
          sharedRealm=null;
          Realm.deleteRealm(configuration);
          throw t;
        }
      }
      if (Table.primaryKeyTableNeedsMigration(sharedRealm)) {
        sharedRealm.beginTransaction();
        if (Table.migratePrimaryKeyTableIfNeeded(sharedRealm)) {
          sharedRealm.commitTransaction();
        }
 else {
          sharedRealm.cancelTransaction();
        }
      }
    }
  finally {
      if (sharedRealm != null) {
        sharedRealm.close();
      }
    }
    this.configuration=configuration;
  }
 else {
    validateConfiguration(configuration);
  }
  if (refAndCount.localRealm.get() == null) {
    BaseRealm realm;
    if (realmClass == Realm.class) {
      realm=Realm.createInstance(this);
    }
 else     if (realmClass == DynamicRealm.class) {
      realm=DynamicRealm.createInstance(this);
    }
 else {
      throw new IllegalArgumentException(WRONG_REALM_CLASS_MESSAGE);
    }
    refAndCount.localRealm.set(realm);
    refAndCount.localCount.set(0);
    if (realmClass == Realm.class && refAndCount.globalCount == 0) {
      RealmCache.storeColumnIndices(typedColumnIndicesArray,realm.getSchema().getImmutableColumnIndices());
    }
    refAndCount.globalCount++;
  }
  Integer refCount=refAndCount.localCount.get();
  refAndCount.localCount.set(refCount + 1);
  return (E)refAndCount.localRealm.get();
}",0.9997500624843788
155578,"RealmObjectSchema getSchemaForClass(String className){
  String tableName=Table.getTableNameForClass(className);
  RealmObjectSchema dynamicSchema=dynamicClassToSchema.get(tableName);
  if (dynamicSchema == null) {
    if (!realm.getSharedRealm().hasTable(tableName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    dynamicSchema=new ImmutableRealmObjectSchema(realm,this,realm.getSharedRealm().getTable(tableName));
    dynamicClassToSchema.put(tableName,dynamicSchema);
  }
  return dynamicSchema;
}","RealmObjectSchema getSchemaForClass(String className){
  String tableName=Table.getTableNameForClass(className);
  RealmObjectSchema dynamicSchema=dynamicClassToSchema.get(tableName);
  if (dynamicSchema == null || !dynamicSchema.getTable().isValid() || !dynamicSchema.getClassName().equals(className)) {
    if (!realm.getSharedRealm().hasTable(tableName)) {
      throw new IllegalArgumentException(""String_Node_Str"" + className + ""String_Node_Str"");
    }
    dynamicSchema=new ImmutableRealmObjectSchema(realm,this,realm.getSharedRealm().getTable(tableName));
    dynamicClassToSchema.put(tableName,dynamicSchema);
  }
  return dynamicSchema;
}",0.9253731343283582
155579,"@Override public RealmObjectSchema createWithPrimaryKeyField(String className,String primaryKeyFieldName,Class<?> fieldType,FieldAttribute... attributes){
  checkEmpty(className,EMPTY_STRING_MSG);
  RealmObjectSchema.checkLegalName(primaryKeyFieldName);
  String internalTableName=checkAndGetTableNameFromClassName(className);
  RealmObjectSchema.FieldMetaData metadata=RealmObjectSchema.getSupportedSimpleFields().get(fieldType);
  if (metadata == null || (metadata.realmType != RealmFieldType.STRING && metadata.realmType != RealmFieldType.INTEGER)) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldType));
  }
  boolean isStringField=(metadata.realmType == RealmFieldType.STRING);
  boolean nullable=metadata.defaultNullable;
  if (MutableRealmObjectSchema.containsAttribute(attributes,FieldAttribute.REQUIRED)) {
    nullable=false;
  }
  return new MutableRealmObjectSchema(realm,this,realm.getSharedRealm().createTableWithPrimaryKey(internalTableName,primaryKeyFieldName,isStringField,nullable));
}","@Override public RealmObjectSchema createWithPrimaryKeyField(String className,String primaryKeyFieldName,Class<?> fieldType,FieldAttribute... attributes){
  checkNotEmpty(className,EMPTY_STRING_MSG);
  RealmObjectSchema.checkLegalName(primaryKeyFieldName);
  String internalTableName=checkAndGetTableNameFromClassName(className);
  RealmObjectSchema.FieldMetaData metadata=RealmObjectSchema.getSupportedSimpleFields().get(fieldType);
  if (metadata == null || (metadata.realmType != RealmFieldType.STRING && metadata.realmType != RealmFieldType.INTEGER)) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldType));
  }
  boolean isStringField=(metadata.realmType == RealmFieldType.STRING);
  boolean nullable=metadata.defaultNullable;
  if (MutableRealmObjectSchema.containsAttribute(attributes,FieldAttribute.REQUIRED)) {
    nullable=false;
  }
  return new MutableRealmObjectSchema(realm,this,realm.getSharedRealm().createTableWithPrimaryKey(internalTableName,primaryKeyFieldName,isStringField,nullable));
}",0.998550024166264
155580,"@Override public void run(){
  DynamicRealm dynamicRealm=DynamicRealm.getInstance(realm.getConfiguration());
  RealmList<DynamicRealmObject> list=new RealmList<DynamicRealmObject>();
  list.add(dObjDynamic);
  dynamicRealm.beginTransaction();
  try {
    dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst().setList(AllJavaTypes.FIELD_LIST,list);
    fail();
  }
 catch (  IllegalArgumentException expected) {
    assertEquals(expected.getMessage(),""String_Node_Str"");
  }
  dynamicRealm.cancelTransaction();
  dynamicRealm.close();
  finishedLatch.countDown();
}","@Override public void run(){
  DynamicRealm dynamicRealm=DynamicRealm.getInstance(realm.getConfiguration());
  RealmList<DynamicRealmObject> list=new RealmList<DynamicRealmObject>();
  list.add(dObjDynamic);
  dynamicRealm.beginTransaction();
  try {
    dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst().setList(AllJavaTypes.FIELD_LIST,list);
    fail();
  }
 catch (  IllegalArgumentException expected) {
    assertEquals(""String_Node_Str"",expected.getMessage());
  }
  dynamicRealm.cancelTransaction();
  dynamicRealm.close();
  finishedLatch.countDown();
}",0.9681978798586572
155581,"@Test public void setList_elementBelongToDiffThreadRealmThrows(){
  final CountDownLatch finishedLatch=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      DynamicRealm dynamicRealm=DynamicRealm.getInstance(realm.getConfiguration());
      RealmList<DynamicRealmObject> list=new RealmList<DynamicRealmObject>();
      list.add(dObjDynamic);
      dynamicRealm.beginTransaction();
      try {
        dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst().setList(AllJavaTypes.FIELD_LIST,list);
        fail();
      }
 catch (      IllegalArgumentException expected) {
        assertEquals(expected.getMessage(),""String_Node_Str"");
      }
      dynamicRealm.cancelTransaction();
      dynamicRealm.close();
      finishedLatch.countDown();
    }
  }
).start();
  TestHelper.awaitOrFail(finishedLatch);
}","@Test public void setList_elementBelongToDiffThreadRealmThrows(){
  final CountDownLatch finishedLatch=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      DynamicRealm dynamicRealm=DynamicRealm.getInstance(realm.getConfiguration());
      RealmList<DynamicRealmObject> list=new RealmList<DynamicRealmObject>();
      list.add(dObjDynamic);
      dynamicRealm.beginTransaction();
      try {
        dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst().setList(AllJavaTypes.FIELD_LIST,list);
        fail();
      }
 catch (      IllegalArgumentException expected) {
        assertEquals(""String_Node_Str"",expected.getMessage());
      }
      dynamicRealm.cancelTransaction();
      dynamicRealm.close();
      finishedLatch.countDown();
    }
  }
).start();
  TestHelper.awaitOrFail(finishedLatch);
}",0.9786476868327402
155582,"@Test public void setObject_objectBelongToDiffThreadRealmThrows(){
  final CountDownLatch finishedLatch=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      DynamicRealm dynamicRealm=DynamicRealm.getInstance(realm.getConfiguration());
      dynamicRealm.beginTransaction();
      try {
        dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst().setObject(AllJavaTypes.FIELD_OBJECT,dObjDynamic);
        fail();
      }
 catch (      IllegalArgumentException expected) {
        assertEquals(expected.getMessage(),""String_Node_Str"");
      }
      dynamicRealm.cancelTransaction();
      dynamicRealm.close();
      finishedLatch.countDown();
    }
  }
).start();
  TestHelper.awaitOrFail(finishedLatch);
}","@Test public void setObject_objectBelongToDiffThreadRealmThrows(){
  final CountDownLatch finishedLatch=new CountDownLatch(1);
  new Thread(new Runnable(){
    @Override public void run(){
      DynamicRealm dynamicRealm=DynamicRealm.getInstance(realm.getConfiguration());
      dynamicRealm.beginTransaction();
      try {
        dynamicRealm.where(AllJavaTypes.CLASS_NAME).findFirst().setObject(AllJavaTypes.FIELD_OBJECT,dObjDynamic);
        fail();
      }
 catch (      IllegalArgumentException expected) {
        assertEquals(""String_Node_Str"",expected.getMessage());
      }
      dynamicRealm.cancelTransaction();
      dynamicRealm.close();
      finishedLatch.countDown();
    }
  }
).start();
  TestHelper.awaitOrFail(finishedLatch);
}",0.9759358288770054
155583,"@Test public void executeTransaction_warningIfManuallyCancelled(){
  assertEquals(0,realm.where(""String_Node_Str"").count());
  TestHelper.TestLogger testLogger=new TestHelper.TestLogger();
  try {
    RealmLog.add(testLogger);
    realm.executeTransaction(new DynamicRealm.Transaction(){
      @Override public void execute(      DynamicRealm realm){
        DynamicRealmObject owner=realm.createObject(""String_Node_Str"");
        owner.setString(""String_Node_Str"",""String_Node_Str"");
        realm.cancelTransaction();
        throw new RuntimeException(""String_Node_Str"");
      }
    }
);
  }
 catch (  RuntimeException ignored) {
    assertEquals(testLogger.message,""String_Node_Str"");
  }
 finally {
    RealmLog.remove(testLogger);
  }
  assertEquals(0,realm.where(""String_Node_Str"").count());
}","@Test public void executeTransaction_warningIfManuallyCancelled(){
  assertEquals(0,realm.where(""String_Node_Str"").count());
  TestHelper.TestLogger testLogger=new TestHelper.TestLogger();
  try {
    RealmLog.add(testLogger);
    realm.executeTransaction(new DynamicRealm.Transaction(){
      @Override public void execute(      DynamicRealm realm){
        DynamicRealmObject owner=realm.createObject(""String_Node_Str"");
        owner.setString(""String_Node_Str"",""String_Node_Str"");
        realm.cancelTransaction();
        throw new RuntimeException(""String_Node_Str"");
      }
    }
);
  }
 catch (  RuntimeException ignored) {
    assertEquals(""String_Node_Str"",testLogger.message);
  }
 finally {
    RealmLog.remove(testLogger);
  }
  assertEquals(0,realm.where(""String_Node_Str"").count());
}",0.9775280898876404
155584,"@Test public void getInstanceClearsCacheWhenFailed(){
  String REALM_NAME=""String_Node_Str"";
  RealmConfiguration configA=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(42));
  RealmConfiguration configB=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(43));
  Realm realm=Realm.getInstance(configA);
  realm.close();
  try {
    Realm.getInstance(configB);
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.ACCESS_ERROR);
    assertTrue(Realm.deleteRealm(configA));
    realm=Realm.getInstance(configB);
    realm.close();
  }
}","@Test public void getInstanceClearsCacheWhenFailed(){
  String REALM_NAME=""String_Node_Str"";
  RealmConfiguration configA=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(42));
  RealmConfiguration configB=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(43));
  Realm realm=Realm.getInstance(configA);
  realm.close();
  try {
    Realm.getInstance(configB);
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(RealmFileException.Kind.ACCESS_ERROR,expected.getKind());
    assertTrue(Realm.deleteRealm(configA));
    realm=Realm.getInstance(configB);
    realm.close();
  }
}",0.9702194357366772
155585,"@Test public void dontCacheWrongConfigurations() throws IOException {
  Realm testRealm;
  String REALM_NAME=""String_Node_Str"";
  RealmConfiguration wrongConfig=configFactory.createConfigurationBuilder().name(REALM_NAME).encryptionKey(TestHelper.SHA512(""String_Node_Str"")).schema(StringOnly.class).build();
  RealmConfiguration rightConfig=configFactory.createConfigurationBuilder().name(REALM_NAME).encryptionKey(TestHelper.SHA512(""String_Node_Str"")).schema(StringOnly.class).build();
  testRealm=Realm.getInstance(rightConfig);
  assertNotNull(testRealm);
  testRealm.close();
  try {
    Realm.getInstance(wrongConfig);
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.ACCESS_ERROR);
  }
  testRealm=Realm.getInstance(rightConfig);
  assertNotNull(testRealm);
  testRealm.close();
}","@Test public void dontCacheWrongConfigurations() throws IOException {
  Realm testRealm;
  String REALM_NAME=""String_Node_Str"";
  RealmConfiguration wrongConfig=configFactory.createConfigurationBuilder().name(REALM_NAME).encryptionKey(TestHelper.SHA512(""String_Node_Str"")).schema(StringOnly.class).build();
  RealmConfiguration rightConfig=configFactory.createConfigurationBuilder().name(REALM_NAME).encryptionKey(TestHelper.SHA512(""String_Node_Str"")).schema(StringOnly.class).build();
  testRealm=Realm.getInstance(rightConfig);
  assertNotNull(testRealm);
  testRealm.close();
  try {
    Realm.getInstance(wrongConfig);
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(RealmFileException.Kind.ACCESS_ERROR,expected.getKind());
  }
  testRealm=Realm.getInstance(rightConfig);
  assertNotNull(testRealm);
  testRealm.close();
}",0.9484173505275498
155586,"@Test public void assetFileFakeFile(){
  Realm.deleteRealm(new RealmConfiguration.Builder(context).build());
  RealmConfiguration configuration=new RealmConfiguration.Builder(context).assetFile(""String_Node_Str"").build();
  try {
    Realm.getInstance(configuration);
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.ACCESS_ERROR);
  }
}","@Test public void assetFileFakeFile(){
  Realm.deleteRealm(new RealmConfiguration.Builder(context).build());
  RealmConfiguration configuration=new RealmConfiguration.Builder(context).assetFile(""String_Node_Str"").build();
  try {
    Realm.getInstance(configuration);
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(RealmFileException.Kind.ACCESS_ERROR,expected.getKind());
  }
}",0.9530864197530864
155587,"@Test public void inMemoryRealm(){
  testRealm.beginTransaction();
  Dog dog=testRealm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  testRealm.commitTransaction();
  assertEquals(testRealm.where(Dog.class).count(),1);
  assertEquals(testRealm.where(Dog.class).findFirst().getName(),""String_Node_Str"");
  testRealm.close();
  testRealm=Realm.getInstance(inMemConf);
  assertEquals(testRealm.where(Dog.class).count(),0);
}","@Test public void inMemoryRealm(){
  testRealm.beginTransaction();
  Dog dog=testRealm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  testRealm.commitTransaction();
  assertEquals(1,testRealm.where(Dog.class).count());
  assertEquals(""String_Node_Str"",testRealm.where(Dog.class).findFirst().getName());
  testRealm.close();
  testRealm=Realm.getInstance(inMemConf);
  assertEquals(0,testRealm.where(Dog.class).count());
}",0.9494252873563218
155588,"@Test public void writeCopyTo(){
  byte[] key=TestHelper.getRandomKey();
  String fileName=IDENTIFIER + ""String_Node_Str"";
  String encFileName=IDENTIFIER + ""String_Node_Str"";
  RealmConfiguration conf=configFactory.createConfigurationBuilder().name(fileName).build();
  RealmConfiguration encConf=configFactory.createConfigurationBuilder().name(encFileName).encryptionKey(key).build();
  Realm.deleteRealm(conf);
  Realm.deleteRealm(encConf);
  testRealm.beginTransaction();
  Dog dog=testRealm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  testRealm.commitTransaction();
  testRealm.writeCopyTo(new File(configFactory.getRoot(),fileName));
  Realm onDiskRealm=Realm.getInstance(conf);
  assertEquals(onDiskRealm.where(Dog.class).count(),1);
  onDiskRealm.close();
  testRealm.writeEncryptedCopyTo(new File(configFactory.getRoot(),encFileName),key);
  onDiskRealm=Realm.getInstance(encConf);
  assertEquals(onDiskRealm.where(Dog.class).count(),1);
  onDiskRealm.close();
  try {
    RealmConfiguration wrongKeyConf=configFactory.createConfigurationBuilder().name(encFileName).encryptionKey(TestHelper.getRandomKey(42)).build();
    Realm.getInstance(wrongKeyConf);
    fail(""String_Node_Str"");
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.ACCESS_ERROR);
  }
}","@Test public void writeCopyTo(){
  byte[] key=TestHelper.getRandomKey();
  String fileName=IDENTIFIER + ""String_Node_Str"";
  String encFileName=IDENTIFIER + ""String_Node_Str"";
  RealmConfiguration conf=configFactory.createConfigurationBuilder().name(fileName).build();
  RealmConfiguration encConf=configFactory.createConfigurationBuilder().name(encFileName).encryptionKey(key).build();
  Realm.deleteRealm(conf);
  Realm.deleteRealm(encConf);
  testRealm.beginTransaction();
  Dog dog=testRealm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  testRealm.commitTransaction();
  testRealm.writeCopyTo(new File(configFactory.getRoot(),fileName));
  Realm onDiskRealm=Realm.getInstance(conf);
  assertEquals(1,onDiskRealm.where(Dog.class).count());
  onDiskRealm.close();
  testRealm.writeEncryptedCopyTo(new File(configFactory.getRoot(),encFileName),key);
  onDiskRealm=Realm.getInstance(encConf);
  assertEquals(1,onDiskRealm.where(Dog.class).count());
  onDiskRealm.close();
  try {
    RealmConfiguration wrongKeyConf=configFactory.createConfigurationBuilder().name(encFileName).encryptionKey(TestHelper.getRandomKey(42)).build();
    Realm.getInstance(wrongKeyConf);
    fail(""String_Node_Str"");
  }
 catch (  RealmFileException expected) {
    assertEquals(RealmFileException.Kind.ACCESS_ERROR,expected.getKind());
  }
}",0.9827715355805244
155589,"@Override public void run(){
  Realm realm=Realm.getInstance(inMemConf);
  realm.beginTransaction();
  Dog dog=realm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  realm.commitTransaction();
  try {
    assertEquals(realm.where(Dog.class).count(),1);
  }
 catch (  AssertionFailedError afe) {
    threadError[0]=afe;
    realm.close();
    return;
  }
  workerCommittedLatch.countDown();
  try {
    realmInMainClosedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    threadError[0]=new AssertionFailedError(""String_Node_Str"");
    realm.close();
    return;
  }
  realm.close();
  workerClosedLatch.countDown();
}","@Override public void run(){
  Realm realm=Realm.getInstance(inMemConf);
  realm.beginTransaction();
  Dog dog=realm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  realm.commitTransaction();
  try {
    assertEquals(1,realm.where(Dog.class).count());
  }
 catch (  AssertionFailedError afe) {
    threadError[0]=afe;
    realm.close();
    return;
  }
  workerCommittedLatch.countDown();
  try {
    realmInMainClosedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
  }
 catch (  InterruptedException e) {
    threadError[0]=new AssertionFailedError(""String_Node_Str"");
    realm.close();
    return;
  }
  realm.close();
  workerClosedLatch.countDown();
}",0.9970544918998528
155590,"@Test public void inMemoryRealmWithDifferentNames(){
  testRealm.beginTransaction();
  Dog dog=testRealm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  testRealm.commitTransaction();
  RealmConfiguration inMemConf2=configFactory.createConfigurationBuilder().name(IDENTIFIER + ""String_Node_Str"").inMemory().build();
  Realm testRealm2=Realm.getInstance(inMemConf2);
  testRealm2.beginTransaction();
  Dog dog2=testRealm2.createObject(Dog.class);
  dog2.setName(""String_Node_Str"");
  testRealm2.commitTransaction();
  assertEquals(testRealm.where(Dog.class).count(),1);
  assertEquals(testRealm.where(Dog.class).findFirst().getName(),""String_Node_Str"");
  assertEquals(testRealm2.where(Dog.class).count(),1);
  assertEquals(testRealm2.where(Dog.class).findFirst().getName(),""String_Node_Str"");
  testRealm2.close();
}","@Test public void inMemoryRealmWithDifferentNames(){
  testRealm.beginTransaction();
  Dog dog=testRealm.createObject(Dog.class);
  dog.setName(""String_Node_Str"");
  testRealm.commitTransaction();
  RealmConfiguration inMemConf2=configFactory.createConfigurationBuilder().name(IDENTIFIER + ""String_Node_Str"").inMemory().build();
  Realm testRealm2=Realm.getInstance(inMemConf2);
  testRealm2.beginTransaction();
  Dog dog2=testRealm2.createObject(Dog.class);
  dog2.setName(""String_Node_Str"");
  testRealm2.commitTransaction();
  assertEquals(1,testRealm.where(Dog.class).count());
  assertEquals(""String_Node_Str"",testRealm.where(Dog.class).findFirst().getName());
  assertEquals(1,testRealm2.where(Dog.class).count());
  assertEquals(""String_Node_Str"",testRealm2.where(Dog.class).findFirst().getName());
  testRealm2.close();
}",0.9517490952955368
155591,"@Test public void multiThread() throws InterruptedException, ExecutionException {
  final CountDownLatch workerCommittedLatch=new CountDownLatch(1);
  final CountDownLatch workerClosedLatch=new CountDownLatch(1);
  final CountDownLatch realmInMainClosedLatch=new CountDownLatch(1);
  final AssertionFailedError threadError[]=new AssertionFailedError[1];
  Thread workerThread=new Thread(new Runnable(){
    @Override public void run(){
      Realm realm=Realm.getInstance(inMemConf);
      realm.beginTransaction();
      Dog dog=realm.createObject(Dog.class);
      dog.setName(""String_Node_Str"");
      realm.commitTransaction();
      try {
        assertEquals(realm.where(Dog.class).count(),1);
      }
 catch (      AssertionFailedError afe) {
        threadError[0]=afe;
        realm.close();
        return;
      }
      workerCommittedLatch.countDown();
      try {
        realmInMainClosedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        threadError[0]=new AssertionFailedError(""String_Node_Str"");
        realm.close();
        return;
      }
      realm.close();
      workerClosedLatch.countDown();
    }
  }
);
  workerThread.start();
  workerCommittedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
  if (threadError[0] != null) {
    throw threadError[0];
  }
  testRealm.waitForChange();
  assertEquals(testRealm.where(Dog.class).count(),1);
  testRealm.close();
  testRealm=Realm.getInstance(inMemConf);
  assertEquals(testRealm.where(Dog.class).count(),1);
  testRealm.close();
  realmInMainClosedLatch.countDown();
  workerClosedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
  if (threadError[0] != null) {
    throw threadError[0];
  }
  testRealm=Realm.getInstance(inMemConf);
  assertEquals(testRealm.where(Dog.class).count(),0);
}","@Test public void multiThread() throws InterruptedException, ExecutionException {
  final CountDownLatch workerCommittedLatch=new CountDownLatch(1);
  final CountDownLatch workerClosedLatch=new CountDownLatch(1);
  final CountDownLatch realmInMainClosedLatch=new CountDownLatch(1);
  final AssertionFailedError threadError[]=new AssertionFailedError[1];
  Thread workerThread=new Thread(new Runnable(){
    @Override public void run(){
      Realm realm=Realm.getInstance(inMemConf);
      realm.beginTransaction();
      Dog dog=realm.createObject(Dog.class);
      dog.setName(""String_Node_Str"");
      realm.commitTransaction();
      try {
        assertEquals(1,realm.where(Dog.class).count());
      }
 catch (      AssertionFailedError afe) {
        threadError[0]=afe;
        realm.close();
        return;
      }
      workerCommittedLatch.countDown();
      try {
        realmInMainClosedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        threadError[0]=new AssertionFailedError(""String_Node_Str"");
        realm.close();
        return;
      }
      realm.close();
      workerClosedLatch.countDown();
    }
  }
);
  workerThread.start();
  workerCommittedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
  if (threadError[0] != null) {
    throw threadError[0];
  }
  testRealm.waitForChange();
  assertEquals(1,testRealm.where(Dog.class).count());
  testRealm.close();
  testRealm=Realm.getInstance(inMemConf);
  assertEquals(1,testRealm.where(Dog.class).count());
  testRealm.close();
  realmInMainClosedLatch.countDown();
  workerClosedLatch.await(TestHelper.SHORT_WAIT_SECS,TimeUnit.SECONDS);
  if (threadError[0] != null) {
    throw threadError[0];
  }
  testRealm=Realm.getInstance(inMemConf);
  assertEquals(0,testRealm.where(Dog.class).count());
}",0.9956639566395664
155592,"public void testCreateInitialRealm() throws InterruptedException {
  new InterprocessHandler(new Runnable(){
    @Override public void run(){
      testRealm=Realm.getInstance(new RealmConfiguration.Builder(getContext()).build());
      assertEquals(testRealm.where(AllTypes.class).count(),0);
      testRealm.beginTransaction();
      testRealm.createObject(AllTypes.class);
      testRealm.commitTransaction();
      triggerServiceStep(RemoteProcessService.stepCreateInitialRealm_A);
    }
  }
){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == RemoteProcessService.stepCreateInitialRealm_A.message) {
        clearTimeoutFlag();
        done();
      }
 else {
        assertTrue(false);
      }
    }
  }
;
  Looper.loop();
}","public void testCreateInitialRealm() throws InterruptedException {
  new InterprocessHandler(new Runnable(){
    @Override public void run(){
      testRealm=Realm.getInstance(new RealmConfiguration.Builder(getContext()).build());
      assertEquals(0,testRealm.where(AllTypes.class).count());
      testRealm.beginTransaction();
      testRealm.createObject(AllTypes.class);
      testRealm.commitTransaction();
      triggerServiceStep(RemoteProcessService.stepCreateInitialRealm_A);
    }
  }
){
    @Override public void handleMessage(    Message msg){
      super.handleMessage(msg);
      if (msg.what == RemoteProcessService.stepCreateInitialRealm_A.message) {
        clearTimeoutFlag();
        done();
      }
 else {
        assertTrue(false);
      }
    }
  }
;
  Looper.loop();
}",0.9974779319041616
155593,"@Override public void run(){
  testRealm=Realm.getInstance(new RealmConfiguration.Builder(getContext()).build());
  assertEquals(testRealm.where(AllTypes.class).count(),0);
  testRealm.beginTransaction();
  testRealm.createObject(AllTypes.class);
  testRealm.commitTransaction();
  triggerServiceStep(RemoteProcessService.stepCreateInitialRealm_A);
}","@Override public void run(){
  testRealm=Realm.getInstance(new RealmConfiguration.Builder(getContext()).build());
  assertEquals(0,testRealm.where(AllTypes.class).count());
  testRealm.beginTransaction();
  testRealm.createObject(AllTypes.class);
  testRealm.commitTransaction();
  triggerServiceStep(RemoteProcessService.stepCreateInitialRealm_A);
}",0.9942857142857144
155594,"@Test public void executeTransaction_cancelInsideClosureThrowsException(){
  assertEquals(0,realm.where(Owner.class).count());
  TestHelper.TestLogger testLogger=new TestHelper.TestLogger();
  try {
    RealmLog.add(testLogger);
    realm.executeTransaction(new Realm.Transaction(){
      @Override public void execute(      Realm realm){
        Owner owner=realm.createObject(Owner.class);
        owner.setName(""String_Node_Str"");
        realm.cancelTransaction();
        throw new RuntimeException(""String_Node_Str"");
      }
    }
);
  }
 catch (  RuntimeException ignored) {
    assertEquals(testLogger.message,""String_Node_Str"");
  }
 finally {
    RealmLog.remove(testLogger);
  }
  assertEquals(0,realm.where(Owner.class).count());
}","@Test public void executeTransaction_cancelInsideClosureThrowsException(){
  assertEquals(0,realm.where(Owner.class).count());
  TestHelper.TestLogger testLogger=new TestHelper.TestLogger();
  try {
    RealmLog.add(testLogger);
    realm.executeTransaction(new Realm.Transaction(){
      @Override public void execute(      Realm realm){
        Owner owner=realm.createObject(Owner.class);
        owner.setName(""String_Node_Str"");
        realm.cancelTransaction();
        throw new RuntimeException(""String_Node_Str"");
      }
    }
);
  }
 catch (  RuntimeException ignored) {
    assertEquals(""String_Node_Str"",testLogger.message);
  }
 finally {
    RealmLog.remove(testLogger);
  }
  assertEquals(0,realm.where(Owner.class).count());
}",0.974462365591398
155595,"@Test public void getInstance_writeProtectedFile() throws IOException {
  String REALM_FILE=""String_Node_Str"";
  File folder=configFactory.getRoot();
  File realmFile=new File(folder,REALM_FILE);
  assertFalse(realmFile.exists());
  assertTrue(realmFile.createNewFile());
  assertTrue(realmFile.setWritable(false));
  try {
    Realm.getInstance(new RealmConfiguration.Builder(InstrumentationRegistry.getTargetContext()).directory(folder).name(REALM_FILE).build());
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.PERMISSION_DENIED);
  }
}","@Test public void getInstance_writeProtectedFile() throws IOException {
  String REALM_FILE=""String_Node_Str"";
  File folder=configFactory.getRoot();
  File realmFile=new File(folder,REALM_FILE);
  assertFalse(realmFile.exists());
  assertTrue(realmFile.createNewFile());
  assertTrue(realmFile.setWritable(false));
  try {
    Realm.getInstance(new RealmConfiguration.Builder(InstrumentationRegistry.getTargetContext()).directory(folder).name(REALM_FILE).build());
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(RealmFileException.Kind.PERMISSION_DENIED,expected.getKind());
  }
}",0.96875
155596,"@Test public void getInstance_writeProtectedFileWithContext() throws IOException {
  String REALM_FILE=""String_Node_Str"";
  File folder=configFactory.getRoot();
  File realmFile=new File(folder,REALM_FILE);
  assertFalse(realmFile.exists());
  assertTrue(realmFile.createNewFile());
  assertTrue(realmFile.setWritable(false));
  try {
    Realm.getInstance(new RealmConfiguration.Builder(context).directory(folder).name(REALM_FILE).build());
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.PERMISSION_DENIED);
  }
}","@Test public void getInstance_writeProtectedFileWithContext() throws IOException {
  String REALM_FILE=""String_Node_Str"";
  File folder=configFactory.getRoot();
  File realmFile=new File(folder,REALM_FILE);
  assertFalse(realmFile.exists());
  assertTrue(realmFile.createNewFile());
  assertTrue(realmFile.setWritable(false));
  try {
    Realm.getInstance(new RealmConfiguration.Builder(context).directory(folder).name(REALM_FILE).build());
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(RealmFileException.Kind.PERMISSION_DENIED,expected.getKind());
  }
}",0.9674657534246576
155597,"@Test @RunTestInLooperThread public void non_looper_thread_commit_realmresults_sync(){
  final Realm realm=looperThread.getRealm();
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      if (realm.where(Dog.class).count() == 2) {
        looperThread.postRunnable(new Runnable(){
          @Override public void run(){
            assertEquals(typebasedCommitInvocations.get(),1);
            looperThread.testComplete();
          }
        }
);
      }
    }
  }
);
  realm.beginTransaction();
  realm.createObject(Dog.class);
  realm.commitTransaction();
  final RealmResults<Dog> dogs=realm.where(Dog.class).findAll();
  looperThread.keepStrongReference(dogs);
  dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>(){
    @Override public void onChange(    RealmResults<Dog> object){
      typebasedCommitInvocations.incrementAndGet();
      assertEquals(2,dogs.size());
    }
  }
);
  Thread thread=new Thread(){
    @Override public void run(){
      Realm bgRealm=Realm.getInstance(realm.getConfiguration());
      bgRealm.beginTransaction();
      bgRealm.createObject(Dog.class);
      bgRealm.commitTransaction();
      bgRealm.close();
    }
  }
;
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
}","@Test @RunTestInLooperThread public void non_looper_thread_commit_realmresults_sync(){
  final Realm realm=looperThread.getRealm();
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      if (realm.where(Dog.class).count() == 2) {
        looperThread.postRunnable(new Runnable(){
          @Override public void run(){
            assertEquals(1,typebasedCommitInvocations.get());
            looperThread.testComplete();
          }
        }
);
      }
    }
  }
);
  realm.beginTransaction();
  realm.createObject(Dog.class);
  realm.commitTransaction();
  final RealmResults<Dog> dogs=realm.where(Dog.class).findAll();
  looperThread.keepStrongReference(dogs);
  dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>(){
    @Override public void onChange(    RealmResults<Dog> object){
      typebasedCommitInvocations.incrementAndGet();
      assertEquals(2,dogs.size());
    }
  }
);
  Thread thread=new Thread(){
    @Override public void run(){
      Realm bgRealm=Realm.getInstance(realm.getConfiguration());
      bgRealm.beginTransaction();
      bgRealm.createObject(Dog.class);
      bgRealm.commitTransaction();
      bgRealm.close();
    }
  }
;
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
}",0.998522895125554
155598,"@Test public void sort(){
  Collection collection=new Collection(sharedRealm,table.where().greaterThan(new long[]{2},oneNullTable,1));
  SortDescriptor sortDescriptor=SortDescriptor.getTestInstance(table,new long[]{2});
  Collection collection2=collection.sort(sortDescriptor);
  assertTrue(collection.getNativePtr() != collection2.getNativePtr());
  assertEquals(2,collection.size());
  assertEquals(2,collection2.size());
  assertEquals(collection2.getUncheckedRow(0).getLong(2),3);
  assertEquals(collection2.getUncheckedRow(1).getLong(2),4);
}","@Test public void sort(){
  Collection collection=new Collection(sharedRealm,table.where().greaterThan(new long[]{2},oneNullTable,1));
  SortDescriptor sortDescriptor=SortDescriptor.getTestInstance(table,new long[]{2});
  Collection collection2=collection.sort(sortDescriptor);
  assertTrue(collection.getNativePtr() != collection2.getNativePtr());
  assertEquals(2,collection.size());
  assertEquals(2,collection2.size());
  assertEquals(3,collection2.getUncheckedRow(0).getLong(2));
  assertEquals(4,collection2.getUncheckedRow(1).getLong(2));
}",0.9926873857404022
155599,"@Test public void constructor_withDistinct(){
  SortDescriptor distinctDescriptor=SortDescriptor.getInstanceForDistinct(null,table,""String_Node_Str"");
  Collection collection=new Collection(sharedRealm,table.where(),null,distinctDescriptor);
  assertEquals(collection.size(),3);
  assertEquals(collection.getUncheckedRow(0).getString(0),""String_Node_Str"");
  assertEquals(collection.getUncheckedRow(1).getString(0),""String_Node_Str"");
  assertEquals(collection.getUncheckedRow(2).getString(0),""String_Node_Str"");
}","@Test public void constructor_withDistinct(){
  SortDescriptor distinctDescriptor=SortDescriptor.getInstanceForDistinct(null,table,""String_Node_Str"");
  Collection collection=new Collection(sharedRealm,table.where(),null,distinctDescriptor);
  assertEquals(3,collection.size());
  assertEquals(""String_Node_Str"",collection.getUncheckedRow(0).getString(0));
  assertEquals(""String_Node_Str"",collection.getUncheckedRow(1).getString(0));
  assertEquals(""String_Node_Str"",collection.getUncheckedRow(2).getString(0));
}",0.8910505836575876
155600,"@Test @RunTestInLooperThread public void addListener_queryReturned(){
  final SharedRealm sharedRealm=getSharedRealm();
  Table table=sharedRealm.getTable(""String_Node_Str"");
  final Collection collection=new Collection(sharedRealm,table.where());
  looperThread.keepStrongReference(collection);
  assertEquals(collection.size(),4);
  collection.addListener(collection,new RealmChangeListener<Collection>(){
    @Override public void onChange(    Collection collection1){
      assertEquals(collection,collection1);
      assertEquals(5,collection1.size());
      sharedRealm.close();
      looperThread.testComplete();
    }
  }
);
  addRowAsync();
}","@Test @RunTestInLooperThread public void addListener_queryReturned(){
  final SharedRealm sharedRealm=getSharedRealm();
  Table table=sharedRealm.getTable(""String_Node_Str"");
  final Collection collection=new Collection(sharedRealm,table.where());
  looperThread.keepStrongReference(collection);
  assertEquals(4,collection.size());
  collection.addListener(collection,new RealmChangeListener<Collection>(){
    @Override public void onChange(    Collection collection1){
      assertEquals(collection,collection1);
      assertEquals(5,collection1.size());
      sharedRealm.close();
      looperThread.testComplete();
    }
  }
);
  addRowAsync();
}",0.9969278033794164
155601,"@Test public void nullValues(){
  Table table=TestHelper.createTable(sharedRealm,""String_Node_Str"");
  long colStringIndex=table.addColumn(RealmFieldType.STRING,""String_Node_Str"",true);
  long colIntIndex=table.addColumn(RealmFieldType.INTEGER,""String_Node_Str"",true);
  table.addColumn(RealmFieldType.FLOAT,""String_Node_Str"");
  table.addColumn(RealmFieldType.DOUBLE,""String_Node_Str"");
  long colBoolIndex=table.addColumn(RealmFieldType.BOOLEAN,""String_Node_Str"",true);
  table.addColumn(RealmFieldType.DATE,""String_Node_Str"");
  table.addColumn(RealmFieldType.BINARY,""String_Node_Str"");
  long rowIndex=OsObject.createRow(table);
  UncheckedRow row=table.getUncheckedRow(rowIndex);
  row.setString(colStringIndex,""String_Node_Str"");
  assertEquals(row.getString(colStringIndex),""String_Node_Str"");
  row.setNull(colStringIndex);
  assertNull(row.getString(colStringIndex));
  row.setLong(colIntIndex,1);
  assertFalse(row.isNull(colIntIndex));
  row.setNull(colIntIndex);
  assertTrue(row.isNull(colIntIndex));
  row.setBoolean(colBoolIndex,true);
  assertFalse(row.isNull(colBoolIndex));
  row.setNull(colBoolIndex);
  assertTrue(row.isNull(colBoolIndex));
}","@Test public void nullValues(){
  Table table=TestHelper.createTable(sharedRealm,""String_Node_Str"");
  long colStringIndex=table.addColumn(RealmFieldType.STRING,""String_Node_Str"",true);
  long colIntIndex=table.addColumn(RealmFieldType.INTEGER,""String_Node_Str"",true);
  table.addColumn(RealmFieldType.FLOAT,""String_Node_Str"");
  table.addColumn(RealmFieldType.DOUBLE,""String_Node_Str"");
  long colBoolIndex=table.addColumn(RealmFieldType.BOOLEAN,""String_Node_Str"",true);
  table.addColumn(RealmFieldType.DATE,""String_Node_Str"");
  table.addColumn(RealmFieldType.BINARY,""String_Node_Str"");
  long rowIndex=OsObject.createRow(table);
  UncheckedRow row=table.getUncheckedRow(rowIndex);
  row.setString(colStringIndex,""String_Node_Str"");
  assertEquals(""String_Node_Str"",row.getString(colStringIndex));
  row.setNull(colStringIndex);
  assertNull(row.getString(colStringIndex));
  row.setLong(colIntIndex,1);
  assertFalse(row.isNull(colIntIndex));
  row.setNull(colIntIndex);
  assertTrue(row.isNull(colIntIndex));
  row.setBoolean(colBoolIndex,true);
  assertFalse(row.isNull(colBoolIndex));
  row.setNull(colBoolIndex);
  assertTrue(row.isNull(colBoolIndex));
}",0.959552495697074
155602,"public void testParseJsonDateToDate(){
  String jsonDate=""String_Node_Str"";
  Date output=JsonUtils.stringToDate(jsonDate);
  assertEquals(output.getTime(),1198908717056L);
}","public void testParseJsonDateToDate(){
  String jsonDate=""String_Node_Str"";
  Date output=JsonUtils.stringToDate(jsonDate);
  assertEquals(1198908717056L,output.getTime());
}",0.913793103448276
155603,"@Test @RunTestInLooperThread public void findAllSortedAsync(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  final RealmResults<DynamicRealmObject> allTypes=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,0,4).findAllSortedAsync(AllTypes.FIELD_STRING,Sort.DESCENDING);
  assertFalse(allTypes.isLoaded());
  assertEquals(0,allTypes.size());
  allTypes.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(5,allTypes.size());
      for (int i=0; i < 5; i++) {
        int iteration=(4 - i);
        assertEquals(""String_Node_Str"" + iteration,allTypes.get(4 - iteration).getString(AllTypes.FIELD_STRING));
      }
      dynamicRealm.close();
      looperThread.testComplete();
    }
  }
);
  looperThread.keepStrongReference.add(allTypes);
}","@Test @RunTestInLooperThread public void findAllSortedAsync(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  final RealmResults<DynamicRealmObject> allTypes=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,0,4).findAllSortedAsync(AllTypes.FIELD_STRING,Sort.DESCENDING);
  assertFalse(allTypes.isLoaded());
  assertEquals(0,allTypes.size());
  allTypes.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(5,allTypes.size());
      for (int i=0; i < 5; i++) {
        int iteration=(4 - i);
        assertEquals(""String_Node_Str"" + iteration,allTypes.get(4 - iteration).getString(AllTypes.FIELD_STRING));
      }
      dynamicRealm.close();
      looperThread.testComplete();
    }
  }
);
  looperThread.keepStrongReference(allTypes);
}",0.9977728285077953
155604,"@Test @RunTestInLooperThread public void findFirstAsync(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  final DynamicRealmObject allTypes=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,4,9).findFirstAsync();
  assertFalse(allTypes.isLoaded());
  looperThread.keepStrongReference.add(allTypes);
  allTypes.addChangeListener(new RealmChangeListener<DynamicRealmObject>(){
    @Override public void onChange(    DynamicRealmObject object){
      assertEquals(""String_Node_Str"",allTypes.getString(AllTypes.FIELD_STRING));
      dynamicRealm.close();
      looperThread.testComplete();
    }
  }
);
}","@Test @RunTestInLooperThread public void findFirstAsync(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  final DynamicRealmObject allTypes=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,4,9).findFirstAsync();
  assertFalse(allTypes.isLoaded());
  looperThread.keepStrongReference(allTypes);
  allTypes.addChangeListener(new RealmChangeListener<DynamicRealmObject>(){
    @Override public void onChange(    DynamicRealmObject object){
      assertEquals(""String_Node_Str"",allTypes.getString(AllTypes.FIELD_STRING));
      dynamicRealm.close();
      looperThread.testComplete();
    }
  }
);
}",0.9968304278922344
155605,"@Test @RunTestInLooperThread public void findAllSortedAsync_usingMultipleFields(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  dynamicRealm.setAutoRefresh(false);
  dynamicRealm.beginTransaction();
  dynamicRealm.delete(AllTypes.CLASS_NAME);
  for (int i=0; i < 5; ) {
    DynamicRealmObject allTypes=dynamicRealm.createObject(AllTypes.CLASS_NAME);
    allTypes.set(AllTypes.FIELD_LONG,i);
    allTypes.set(AllTypes.FIELD_STRING,""String_Node_Str"" + i % 3);
    allTypes=dynamicRealm.createObject(AllTypes.CLASS_NAME);
    allTypes.set(AllTypes.FIELD_LONG,i);
    allTypes.set(AllTypes.FIELD_STRING,""String_Node_Str"" + (++i % 3));
  }
  dynamicRealm.commitTransaction();
  dynamicRealm.setAutoRefresh(true);
  final RealmResults<DynamicRealmObject> realmResults1=dynamicRealm.where(AllTypes.CLASS_NAME).findAllSortedAsync(new String[]{AllTypes.FIELD_STRING,AllTypes.FIELD_LONG},new Sort[]{Sort.ASCENDING,Sort.DESCENDING});
  final RealmResults<DynamicRealmObject> realmResults2=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,0,5).findAllSortedAsync(new String[]{AllTypes.FIELD_STRING,AllTypes.FIELD_LONG},new Sort[]{Sort.DESCENDING,Sort.ASCENDING});
  final Runnable signalCallbackDone=new Runnable(){
    final AtomicInteger callbacksDone=new AtomicInteger(2);
    @Override public void run(){
      if (callbacksDone.decrementAndGet() == 0) {
        dynamicRealm.close();
        looperThread.testComplete();
      }
    }
  }
;
  realmResults1.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(""String_Node_Str"",realmResults1.get(0).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults1.get(0).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(1).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults1.get(1).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(2).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults1.get(2).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(3).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults1.get(3).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(4).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults1.get(4).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(5).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults1.get(5).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(6).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults1.get(6).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(7).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults1.get(7).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(8).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults1.get(8).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(9).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults1.get(9).get(AllTypes.FIELD_LONG));
      signalCallbackDone.run();
    }
  }
);
  realmResults2.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(""String_Node_Str"",realmResults2.get(0).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults2.get(0).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(1).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults2.get(1).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(2).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults2.get(2).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(3).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults2.get(3).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(4).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults2.get(4).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(5).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults2.get(5).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(6).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults2.get(6).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(7).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults2.get(7).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(8).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults2.get(8).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(9).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults2.get(9).get(AllTypes.FIELD_LONG));
      signalCallbackDone.run();
    }
  }
);
  looperThread.keepStrongReference.add(realmResults1);
  looperThread.keepStrongReference.add(realmResults2);
}","@Test @RunTestInLooperThread public void findAllSortedAsync_usingMultipleFields(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  dynamicRealm.setAutoRefresh(false);
  dynamicRealm.beginTransaction();
  dynamicRealm.delete(AllTypes.CLASS_NAME);
  for (int i=0; i < 5; ) {
    DynamicRealmObject allTypes=dynamicRealm.createObject(AllTypes.CLASS_NAME);
    allTypes.set(AllTypes.FIELD_LONG,i);
    allTypes.set(AllTypes.FIELD_STRING,""String_Node_Str"" + i % 3);
    allTypes=dynamicRealm.createObject(AllTypes.CLASS_NAME);
    allTypes.set(AllTypes.FIELD_LONG,i);
    allTypes.set(AllTypes.FIELD_STRING,""String_Node_Str"" + (++i % 3));
  }
  dynamicRealm.commitTransaction();
  dynamicRealm.setAutoRefresh(true);
  final RealmResults<DynamicRealmObject> realmResults1=dynamicRealm.where(AllTypes.CLASS_NAME).findAllSortedAsync(new String[]{AllTypes.FIELD_STRING,AllTypes.FIELD_LONG},new Sort[]{Sort.ASCENDING,Sort.DESCENDING});
  final RealmResults<DynamicRealmObject> realmResults2=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,0,5).findAllSortedAsync(new String[]{AllTypes.FIELD_STRING,AllTypes.FIELD_LONG},new Sort[]{Sort.DESCENDING,Sort.ASCENDING});
  final Runnable signalCallbackDone=new Runnable(){
    final AtomicInteger callbacksDone=new AtomicInteger(2);
    @Override public void run(){
      if (callbacksDone.decrementAndGet() == 0) {
        dynamicRealm.close();
        looperThread.testComplete();
      }
    }
  }
;
  realmResults1.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(""String_Node_Str"",realmResults1.get(0).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults1.get(0).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(1).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults1.get(1).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(2).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults1.get(2).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(3).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults1.get(3).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(4).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults1.get(4).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(5).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults1.get(5).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(6).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults1.get(6).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(7).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults1.get(7).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(8).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults1.get(8).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults1.get(9).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults1.get(9).get(AllTypes.FIELD_LONG));
      signalCallbackDone.run();
    }
  }
);
  realmResults2.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(""String_Node_Str"",realmResults2.get(0).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults2.get(0).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(1).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults2.get(1).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(2).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults2.get(2).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(3).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults2.get(3).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(4).get(AllTypes.FIELD_STRING));
      assertEquals(1L,realmResults2.get(4).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(5).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults2.get(5).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(6).get(AllTypes.FIELD_STRING));
      assertEquals(4L,realmResults2.get(6).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(7).get(AllTypes.FIELD_STRING));
      assertEquals(0L,realmResults2.get(7).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(8).get(AllTypes.FIELD_STRING));
      assertEquals(2L,realmResults2.get(8).get(AllTypes.FIELD_LONG));
      assertEquals(""String_Node_Str"",realmResults2.get(9).get(AllTypes.FIELD_STRING));
      assertEquals(3L,realmResults2.get(9).get(AllTypes.FIELD_LONG));
      signalCallbackDone.run();
    }
  }
);
  looperThread.keepStrongReference(realmResults1);
  looperThread.keepStrongReference(realmResults2);
}",0.999224655941074
155606,"@Test @RunTestInLooperThread public void findAllAsync(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  final RealmResults<DynamicRealmObject> allTypes=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,4,9).findAllAsync();
  assertFalse(allTypes.isLoaded());
  assertEquals(0,allTypes.size());
  allTypes.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(6,allTypes.size());
      for (int i=0; i < allTypes.size(); i++) {
        assertEquals(""String_Node_Str"" + (4 + i),allTypes.get(i).getString(AllTypes.FIELD_STRING));
      }
      dynamicRealm.close();
      looperThread.testComplete();
    }
  }
);
  looperThread.keepStrongReference.add(allTypes);
}","@Test @RunTestInLooperThread public void findAllAsync(){
  final DynamicRealm dynamicRealm=initializeDynamicRealm();
  final RealmResults<DynamicRealmObject> allTypes=dynamicRealm.where(AllTypes.CLASS_NAME).between(AllTypes.FIELD_LONG,4,9).findAllAsync();
  assertFalse(allTypes.isLoaded());
  assertEquals(0,allTypes.size());
  allTypes.addChangeListener(new RealmChangeListener<RealmResults<DynamicRealmObject>>(){
    @Override public void onChange(    RealmResults<DynamicRealmObject> object){
      assertEquals(6,allTypes.size());
      for (int i=0; i < allTypes.size(); i++) {
        assertEquals(""String_Node_Str"" + (4 + i),allTypes.get(i).getString(AllTypes.FIELD_STRING));
      }
      dynamicRealm.close();
      looperThread.testComplete();
    }
  }
);
  looperThread.keepStrongReference(allTypes);
}",0.9975550122249388
155607,"private DynamicRealm initializeDynamicRealm(){
  RealmConfiguration defaultConfig=looperThread.realmConfiguration;
  final DynamicRealm dynamicRealm=DynamicRealm.getInstance(defaultConfig);
  populateTestRealm(dynamicRealm,10);
  looperThread.keepStrongReference.add(dynamicRealm);
  return dynamicRealm;
}","private DynamicRealm initializeDynamicRealm(){
  RealmConfiguration defaultConfig=looperThread.getConfiguration();
  final DynamicRealm dynamicRealm=DynamicRealm.getInstance(defaultConfig);
  populateTestRealm(dynamicRealm,10);
  looperThread.keepStrongReference(dynamicRealm);
  return dynamicRealm;
}",0.9769736842105264
155608,"@Test @RunTestInLooperThread public void notification_notSentAfterUnregisterListenerModelObject(){
  final Realm looperThreadRealm=looperThread.realm;
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  looperThreadRealm.commitTransaction();
  RealmChangeListener<AllJavaTypes> listener=new RealmChangeListener<AllJavaTypes>(){
    @Override public void onChange(    AllJavaTypes object){
      fail(""String_Node_Str"");
    }
  }
;
  child.addChangeListener(listener);
  child.removeChangeListener(listener);
  looperThreadRealm.beginTransaction();
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(2,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
    }
  }
,child,parent);
}","@Test @RunTestInLooperThread public void notification_notSentAfterUnregisterListenerModelObject(){
  final Realm looperThreadRealm=looperThread.getRealm();
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  looperThreadRealm.commitTransaction();
  RealmChangeListener<AllJavaTypes> listener=new RealmChangeListener<AllJavaTypes>(){
    @Override public void onChange(    AllJavaTypes object){
      fail(""String_Node_Str"");
    }
  }
;
  child.addChangeListener(listener);
  child.removeChangeListener(listener);
  looperThreadRealm.beginTransaction();
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(2,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
    }
  }
,child,parent);
}",0.992412746585736
155609,"@Test @RunTestInLooperThread public void notification_notSentAfterUnregisterListenerRealmResults(){
  final Realm looperThreadRealm=looperThread.realm;
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  looperThreadRealm.commitTransaction();
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      fail(""String_Node_Str"");
    }
  }
;
  RealmResults<AllJavaTypes> objParents=child.getObjectParents();
  objParents.addChangeListener(listener);
  objParents.removeChangeListener(listener);
  looperThreadRealm.beginTransaction();
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(2,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
    }
  }
,child,parent);
}","@Test @RunTestInLooperThread public void notification_notSentAfterUnregisterListenerRealmResults(){
  final Realm looperThreadRealm=looperThread.getRealm();
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  looperThreadRealm.commitTransaction();
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      fail(""String_Node_Str"");
    }
  }
;
  RealmResults<AllJavaTypes> objParents=child.getObjectParents();
  objParents.addChangeListener(listener);
  objParents.removeChangeListener(listener);
  looperThreadRealm.beginTransaction();
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(2,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
    }
  }
,child,parent);
}",0.9932279909706546
155610,"@Test @RunTestInLooperThread public void notification_onCommitRealmResults(){
  final Realm looperThreadRealm=looperThread.realm;
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  looperThreadRealm.commitTransaction();
  final AtomicInteger counter=new AtomicInteger(0);
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      counter.incrementAndGet();
    }
  }
;
  child.getObjectParents().addChangeListener(listener);
  looperThreadRealm.beginTransaction();
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(2,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
      assertEquals(1,counter.get());
    }
  }
,child,parent);
}","@Test @RunTestInLooperThread public void notification_onCommitRealmResults(){
  final Realm looperThreadRealm=looperThread.getRealm();
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  looperThreadRealm.commitTransaction();
  final AtomicInteger counter=new AtomicInteger(0);
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      counter.incrementAndGet();
    }
  }
;
  child.getObjectParents().addChangeListener(listener);
  looperThreadRealm.beginTransaction();
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(2,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
      assertEquals(1,counter.get());
    }
  }
,child,parent);
}",0.9930523390458544
155611,"@Test @RunTestInLooperThread public void linkingObjects_IllegalStateException_ifDeleted(){
  final Realm realm=looperThread.realm;
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      final BacklinksTarget target=realm.createObject(BacklinksTarget.class);
      target.setId(1);
      final BacklinksSource source=realm.createObject(BacklinksSource.class);
      source.setChild(target);
    }
  }
);
  final BacklinksTarget target=realm.where(BacklinksTarget.class).equalTo(BacklinksTarget.FIELD_ID,1L).findFirst();
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      target.deleteFromRealm();
    }
  }
);
  assertFalse(target.isValid());
  thrown.expect(IllegalStateException.class);
  target.getParents();
  fail();
}","@Test @RunTestInLooperThread public void linkingObjects_IllegalStateException_ifDeleted(){
  final Realm realm=looperThread.getRealm();
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      final BacklinksTarget target=realm.createObject(BacklinksTarget.class);
      target.setId(1);
      final BacklinksSource source=realm.createObject(BacklinksSource.class);
      source.setChild(target);
    }
  }
);
  final BacklinksTarget target=realm.where(BacklinksTarget.class).equalTo(BacklinksTarget.FIELD_ID,1L).findFirst();
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      target.deleteFromRealm();
    }
  }
);
  assertFalse(target.isValid());
  thrown.expect(IllegalStateException.class);
  target.getParents();
  fail();
}",0.9910554561717352
155612,"@Test @RunTestInLooperThread public void notification_notSentOnUnrelatedChangeRealmResults(){
  final Realm looperThreadRealm=looperThread.realm;
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  looperThreadRealm.commitTransaction();
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      fail(""String_Node_Str"");
    }
  }
;
  child.getObjectParents().addChangeListener(listener);
  looperThreadRealm.beginTransaction();
  looperThreadRealm.where(AllJavaTypes.class).equalTo(""String_Node_Str"",1).findAll().deleteAllFromRealm();
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(1,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
    }
  }
,child,parent);
}","@Test @RunTestInLooperThread public void notification_notSentOnUnrelatedChangeRealmResults(){
  final Realm looperThreadRealm=looperThread.getRealm();
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  looperThreadRealm.commitTransaction();
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      fail(""String_Node_Str"");
    }
  }
;
  child.getObjectParents().addChangeListener(listener);
  looperThreadRealm.beginTransaction();
  looperThreadRealm.where(AllJavaTypes.class).equalTo(""String_Node_Str"",1).findAll().deleteAllFromRealm();
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(1,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
    }
  }
,child,parent);
}",0.9930523390458544
155613,"@Test @RunTestInLooperThread public void linkingObjects_IllegalStateException_ifNotYetLoaded(){
  final Realm realm=looperThread.realm;
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      final BacklinksTarget target=realm.createObject(BacklinksTarget.class);
      target.setId(1);
      final BacklinksSource source=realm.createObject(BacklinksSource.class);
      source.setChild(target);
    }
  }
);
  final BacklinksTarget targetAsync=realm.where(BacklinksTarget.class).equalTo(BacklinksTarget.FIELD_ID,1L).findFirstAsync();
  assertFalse(targetAsync.isLoaded());
  thrown.expect(IllegalStateException.class);
  targetAsync.getParents();
  fail();
}","@Test @RunTestInLooperThread public void linkingObjects_IllegalStateException_ifNotYetLoaded(){
  final Realm realm=looperThread.getRealm();
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      final BacklinksTarget target=realm.createObject(BacklinksTarget.class);
      target.setId(1);
      final BacklinksSource source=realm.createObject(BacklinksSource.class);
      source.setChild(target);
    }
  }
);
  final BacklinksTarget targetAsync=realm.where(BacklinksTarget.class).equalTo(BacklinksTarget.FIELD_ID,1L).findFirstAsync();
  assertFalse(targetAsync.isLoaded());
  thrown.expect(IllegalStateException.class);
  targetAsync.getParents();
  fail();
}",0.989517819706499
155614,"private void verifyPostConditions(final Realm realm,final PostConditions test,final Object... refs){
  realm.beginTransaction();
  realm.commitTransaction();
  looperThread.keepStrongReference.addAll(Arrays.asList(refs));
  looperThread.postRunnable(new Runnable(){
    @Override public void run(){
      test.run(realm);
      looperThread.testComplete();
    }
  }
);
}","private void verifyPostConditions(final Realm realm,final PostConditions test,final Object... refs){
  realm.beginTransaction();
  realm.commitTransaction();
  for (  Object ref : refs) {
    looperThread.keepStrongReference(ref);
  }
  looperThread.postRunnable(new Runnable(){
    @Override public void run(){
      test.run(realm);
      looperThread.testComplete();
    }
  }
);
}",0.9059602649006624
155615,"@Test @RunTestInLooperThread public void linkingObjects_IllegalStateException_ifDeletedIndirectly(){
  final Realm realm=looperThread.realm;
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      final BacklinksTarget target1=realm.createObject(BacklinksTarget.class);
      target1.setId(1);
      final BacklinksSource source=realm.createObject(BacklinksSource.class);
      source.setChild(target1);
    }
  }
);
  final BacklinksTarget target=realm.where(BacklinksTarget.class).equalTo(BacklinksTarget.FIELD_ID,1L).findFirst();
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.where(BacklinksTarget.class).findAll().deleteAllFromRealm();
    }
  }
);
  assertFalse(target.isValid());
  thrown.expect(IllegalStateException.class);
  target.getParents();
  fail();
}","@Test @RunTestInLooperThread public void linkingObjects_IllegalStateException_ifDeletedIndirectly(){
  final Realm realm=looperThread.getRealm();
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      final BacklinksTarget target1=realm.createObject(BacklinksTarget.class);
      target1.setId(1);
      final BacklinksSource source=realm.createObject(BacklinksSource.class);
      source.setChild(target1);
    }
  }
);
  final BacklinksTarget target=realm.where(BacklinksTarget.class).equalTo(BacklinksTarget.FIELD_ID,1L).findFirst();
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.where(BacklinksTarget.class).findAll().deleteAllFromRealm();
    }
  }
);
  assertFalse(target.isValid());
  thrown.expect(IllegalStateException.class);
  target.getParents();
  fail();
}",0.9915966386554622
155616,"@Test @RunTestInLooperThread public void notification_onDeleteRealmResults(){
  final Realm looperThreadRealm=looperThread.realm;
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  final AtomicInteger counter=new AtomicInteger(0);
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      counter.incrementAndGet();
    }
  }
;
  child.getObjectParents().addChangeListener(listener);
  looperThreadRealm.beginTransaction();
  looperThreadRealm.where(AllJavaTypes.class).equalTo(""String_Node_Str"",1).findAll().deleteAllFromRealm();
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(1,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
      assertEquals(1,counter.get());
    }
  }
,child,parent);
}","@Test @RunTestInLooperThread public void notification_onDeleteRealmResults(){
  final Realm looperThreadRealm=looperThread.getRealm();
  looperThreadRealm.beginTransaction();
  AllJavaTypes child=looperThreadRealm.createObject(AllJavaTypes.class,10);
  AllJavaTypes parent=looperThreadRealm.createObject(AllJavaTypes.class,1);
  parent.setFieldObject(child);
  looperThreadRealm.commitTransaction();
  final AtomicInteger counter=new AtomicInteger(0);
  RealmChangeListener<RealmResults<AllJavaTypes>> listener=new RealmChangeListener<RealmResults<AllJavaTypes>>(){
    @Override public void onChange(    RealmResults<AllJavaTypes> object){
      counter.incrementAndGet();
    }
  }
;
  child.getObjectParents().addChangeListener(listener);
  looperThreadRealm.beginTransaction();
  looperThreadRealm.where(AllJavaTypes.class).equalTo(""String_Node_Str"",1).findAll().deleteAllFromRealm();
  looperThreadRealm.commitTransaction();
  verifyPostConditions(looperThreadRealm,new PostConditions(){
    @Override public void run(    Realm realm){
      assertEquals(1,looperThreadRealm.where(AllJavaTypes.class).findAll().size());
      assertEquals(1,counter.get());
    }
  }
,child,parent);
}",0.9936788874841972
155617,"@Test @RunTestInLooperThread public void globalListener_looperThread_triggeredByLocalCommit(){
  final AtomicInteger success=new AtomicInteger(0);
  Realm realm=looperThread.realm;
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      assertEquals(0,success.getAndIncrement());
      looperThread.testComplete();
    }
  }
);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
  assertEquals(1,success.get());
}","@Test @RunTestInLooperThread public void globalListener_looperThread_triggeredByLocalCommit(){
  final AtomicInteger success=new AtomicInteger(0);
  Realm realm=looperThread.getRealm();
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      assertEquals(0,success.getAndIncrement());
      looperThread.testComplete();
    }
  }
);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
  assertEquals(1,success.get());
}",0.98567335243553
155618,"@Test @RunTestInLooperThread public void addChangeListener_duplicatedListener(){
  final AtomicInteger counter=new AtomicInteger(0);
  RealmChangeListener<Realm> listener=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter.incrementAndGet();
    }
  }
;
  Realm realm=looperThread.realm;
  realm.addChangeListener(listener);
  realm.addChangeListener(listener);
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      assertEquals(1,counter.get());
      looperThread.testComplete();
    }
  }
);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
}","@Test @RunTestInLooperThread public void addChangeListener_duplicatedListener(){
  final AtomicInteger counter=new AtomicInteger(0);
  RealmChangeListener<Realm> listener=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter.incrementAndGet();
    }
  }
;
  Realm realm=looperThread.getRealm();
  realm.addChangeListener(listener);
  realm.addChangeListener(listener);
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      assertEquals(1,counter.get());
      looperThread.testComplete();
    }
  }
);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
}",0.9894291754756872
155619,"@Test @RunTestInLooperThread public void addRemoveListenerConcurrency(){
  final Realm realm=looperThread.realm;
  final AtomicInteger counter1=new AtomicInteger(0);
  final AtomicInteger counter2=new AtomicInteger(0);
  final AtomicInteger counter3=new AtomicInteger(0);
  final RealmChangeListener<Realm> listener1=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter1.incrementAndGet();
      assertEquals(1,counter1.get());
      assertEquals(2,counter2.get());
      assertEquals(1,counter3.get());
      looperThread.testComplete();
    }
  }
;
  final RealmChangeListener<Realm> listener2=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter2.incrementAndGet();
      realm.addChangeListener(listener1);
    }
  }
;
  RealmChangeListener<Realm> listener3=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter3.incrementAndGet();
      realm.removeChangeListener(this);
      assertEquals(0,counter1.get());
      assertEquals(1,counter2.get());
      assertEquals(1,counter3.get());
      realm.beginTransaction();
      realm.createObject(AllTypes.class);
      realm.commitTransaction();
    }
  }
;
  realm.addChangeListener(listener2);
  realm.addChangeListener(listener3);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
}","@Test @RunTestInLooperThread public void addRemoveListenerConcurrency(){
  final Realm realm=looperThread.getRealm();
  final AtomicInteger counter1=new AtomicInteger(0);
  final AtomicInteger counter2=new AtomicInteger(0);
  final AtomicInteger counter3=new AtomicInteger(0);
  final RealmChangeListener<Realm> listener1=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter1.incrementAndGet();
      assertEquals(1,counter1.get());
      assertEquals(2,counter2.get());
      assertEquals(1,counter3.get());
      looperThread.testComplete();
    }
  }
;
  final RealmChangeListener<Realm> listener2=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter2.incrementAndGet();
      realm.addChangeListener(listener1);
    }
  }
;
  RealmChangeListener<Realm> listener3=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      counter3.incrementAndGet();
      realm.removeChangeListener(this);
      assertEquals(0,counter1.get());
      assertEquals(1,counter2.get());
      assertEquals(1,counter3.get());
      realm.beginTransaction();
      realm.createObject(AllTypes.class);
      realm.commitTransaction();
    }
  }
;
  realm.addChangeListener(listener2);
  realm.addChangeListener(listener3);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
}",0.994753410283316
155620,"@Test @RunTestInLooperThread public void accessingSyncRealmResultsInsideAnotherResultListener(){
  final Realm realm=looperThread.realm;
  final RealmResults<AllTypes> syncResults1=realm.where(AllTypes.class).findAll();
  final RealmResults<AllTypes> syncResults2=realm.where(AllTypes.class).findAll();
  looperThread.keepStrongReference.add(syncResults1);
  syncResults1.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>(){
    @Override public void onChange(    RealmResults<AllTypes> element){
      assertEquals(1,syncResults1.size());
      assertEquals(1,syncResults2.size());
      looperThread.testComplete();
    }
  }
);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
}","@Test @RunTestInLooperThread public void accessingSyncRealmResultsInsideAnotherResultListener(){
  final Realm realm=looperThread.getRealm();
  final RealmResults<AllTypes> syncResults1=realm.where(AllTypes.class).findAll();
  final RealmResults<AllTypes> syncResults2=realm.where(AllTypes.class).findAll();
  looperThread.keepStrongReference(syncResults1);
  syncResults1.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>(){
    @Override public void onChange(    RealmResults<AllTypes> element){
      assertEquals(1,syncResults1.size());
      assertEquals(1,syncResults2.size());
      looperThread.testComplete();
    }
  }
);
  realm.beginTransaction();
  realm.createObject(AllTypes.class);
  realm.commitTransaction();
}",0.9872225958305312
155621,"@Test @RunTestInLooperThread public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification(){
  final AtomicInteger numberOfRealmCallbackInvocation=new AtomicInteger(0);
  final CountDownLatch signalClosedRealm=new CountDownLatch(1);
  final Realm realm=looperThread.realm;
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    final Realm realm){
switch (numberOfRealmCallbackInvocation.incrementAndGet()) {
case 1:
{
          Dog dog=realm.where(Dog.class).findFirstAsync();
          assertTrue(dog.load());
          dog.addChangeListener(new RealmChangeListener<Dog>(){
            @Override public void onChange(            Dog dog){
            }
          }
);
          new Thread(){
            @Override public void run(){
              Realm threadRealm=Realm.getInstance(realm.getConfiguration());
              threadRealm.beginTransaction();
              threadRealm.createObject(Dog.class);
              threadRealm.commitTransaction();
              threadRealm.close();
              signalClosedRealm.countDown();
            }
          }
.start();
          break;
        }
case 2:
{
        TestHelper.awaitOrFail(signalClosedRealm);
        looperThread.testComplete();
        break;
      }
  }
}
}
);
looperThread.postRunnable(new Runnable(){
@Override public void run(){
  realm.beginTransaction();
  realm.createObject(Dog.class);
  realm.commitTransaction();
}
}
);
}","@Test @RunTestInLooperThread public void asyncRealmObjectShouldNotBlockBackgroundCommitNotification(){
  final AtomicInteger numberOfRealmCallbackInvocation=new AtomicInteger(0);
  final CountDownLatch signalClosedRealm=new CountDownLatch(1);
  final Realm realm=looperThread.getRealm();
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    final Realm realm){
switch (numberOfRealmCallbackInvocation.incrementAndGet()) {
case 1:
{
          Dog dog=realm.where(Dog.class).findFirstAsync();
          assertTrue(dog.load());
          dog.addChangeListener(new RealmChangeListener<Dog>(){
            @Override public void onChange(            Dog dog){
            }
          }
);
          new Thread(){
            @Override public void run(){
              Realm threadRealm=Realm.getInstance(realm.getConfiguration());
              threadRealm.beginTransaction();
              threadRealm.createObject(Dog.class);
              threadRealm.commitTransaction();
              threadRealm.close();
              signalClosedRealm.countDown();
            }
          }
.start();
          break;
        }
case 2:
{
        TestHelper.awaitOrFail(signalClosedRealm);
        looperThread.testComplete();
        break;
      }
  }
}
}
);
looperThread.postRunnable(new Runnable(){
@Override public void run(){
  realm.beginTransaction();
  realm.createObject(Dog.class);
  realm.commitTransaction();
}
}
);
}",0.9948506694129764
155622,"@Test @RunTestInLooperThread public void emptyCommitTriggerChangeListener(){
  final RealmChangeListener<Realm> listener=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      looperThread.testComplete();
    }
  }
;
  Realm realm=looperThread.realm;
  realm.addChangeListener(listener);
  realm.beginTransaction();
  realm.commitTransaction();
}","@Test @RunTestInLooperThread public void emptyCommitTriggerChangeListener(){
  final RealmChangeListener<Realm> listener=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      looperThread.testComplete();
    }
  }
;
  Realm realm=looperThread.getRealm();
  realm.addChangeListener(listener);
  realm.beginTransaction();
  realm.commitTransaction();
}",0.9806451612903224
155623,"@Test @RunTestInLooperThread public void accessingSyncRealmResultInsideAsyncResultListener(){
  final Realm realm=looperThread.realm;
  final AtomicInteger asyncResultCallback=new AtomicInteger(0);
  final RealmResults<AllTypes> syncResults=realm.where(AllTypes.class).findAll();
  RealmResults<AllTypes> results=realm.where(AllTypes.class).findAllAsync();
  looperThread.keepStrongReference.add(results);
  results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>(){
    @Override public void onChange(    RealmResults<AllTypes> results){
switch (asyncResultCallback.incrementAndGet()) {
case 1:
        assertEquals(0,results.size());
      realm.executeTransactionAsync(new Realm.Transaction(){
        @Override public void execute(        Realm realm){
          realm.createObject(AllTypes.class);
        }
      }
);
    break;
case 2:
  assertEquals(1,results.size());
assertEquals(1,syncResults.size());
looperThread.testComplete();
break;
}
}
}
);
}","@Test @RunTestInLooperThread public void accessingSyncRealmResultInsideAsyncResultListener(){
  final Realm realm=looperThread.getRealm();
  final AtomicInteger asyncResultCallback=new AtomicInteger(0);
  final RealmResults<AllTypes> syncResults=realm.where(AllTypes.class).findAll();
  RealmResults<AllTypes> results=realm.where(AllTypes.class).findAllAsync();
  looperThread.keepStrongReference(results);
  results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>(){
    @Override public void onChange(    RealmResults<AllTypes> results){
switch (asyncResultCallback.incrementAndGet()) {
case 1:
        assertEquals(0,results.size());
      realm.executeTransactionAsync(new Realm.Transaction(){
        @Override public void execute(        Realm realm){
          realm.createObject(AllTypes.class);
        }
      }
);
    break;
case 2:
  assertEquals(1,results.size());
assertEquals(1,syncResults.size());
looperThread.testComplete();
break;
}
}
}
);
}",0.9902813299232736
155624,"@Test @RunTestInLooperThread public void globalListener_looperThread_triggeredByRemoteCommit(){
  final AtomicInteger success=new AtomicInteger(0);
  Realm realm=looperThread.realm;
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      assertEquals(1,success.get());
      looperThread.testComplete();
    }
  }
);
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.createObject(AllTypes.class);
    }
  }
);
  assertEquals(0,success.getAndIncrement());
}","@Test @RunTestInLooperThread public void globalListener_looperThread_triggeredByRemoteCommit(){
  final AtomicInteger success=new AtomicInteger(0);
  Realm realm=looperThread.getRealm();
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      assertEquals(1,success.get());
      looperThread.testComplete();
    }
  }
);
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.createObject(AllTypes.class);
    }
  }
);
  assertEquals(0,success.getAndIncrement());
}",0.987363100252738
155625,"@Test @RunTestInLooperThread public void realmNotificationOrder(){
  final AtomicInteger listenerACalled=new AtomicInteger(0);
  final AtomicInteger listenerBCalled=new AtomicInteger(0);
  final Realm realm=looperThread.realm;
  final RealmChangeListener<Realm> listenerA=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      int called=listenerACalled.incrementAndGet();
      if (called == 2) {
        assertEquals(2,listenerBCalled.get());
        looperThread.testComplete();
      }
    }
  }
;
  final RealmChangeListener<Realm> listenerB=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      listenerBCalled.incrementAndGet();
      if (listenerBCalled.get() == 1) {
        realm.removeAllChangeListeners();
        realm.addChangeListener(this);
        realm.addChangeListener(listenerA);
        realm.executeTransactionAsync(new Realm.Transaction(){
          @Override public void execute(          Realm realm){
          }
        }
);
      }
 else       if (listenerBCalled.get() == 2) {
        assertEquals(1,listenerACalled.get());
      }
    }
  }
;
  realm.addChangeListener(listenerA);
  realm.addChangeListener(listenerB);
  realm.beginTransaction();
  realm.commitTransaction();
}","@Test @RunTestInLooperThread public void realmNotificationOrder(){
  final AtomicInteger listenerACalled=new AtomicInteger(0);
  final AtomicInteger listenerBCalled=new AtomicInteger(0);
  final Realm realm=looperThread.getRealm();
  final RealmChangeListener<Realm> listenerA=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      int called=listenerACalled.incrementAndGet();
      if (called == 2) {
        assertEquals(2,listenerBCalled.get());
        looperThread.testComplete();
      }
    }
  }
;
  final RealmChangeListener<Realm> listenerB=new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm object){
      listenerBCalled.incrementAndGet();
      if (listenerBCalled.get() == 1) {
        realm.removeAllChangeListeners();
        realm.addChangeListener(this);
        realm.addChangeListener(listenerA);
        realm.executeTransactionAsync(new Realm.Transaction(){
          @Override public void execute(          Realm realm){
          }
        }
);
      }
 else       if (listenerBCalled.get() == 2) {
        assertEquals(1,listenerACalled.get());
      }
    }
  }
;
  realm.addChangeListener(listenerA);
  realm.addChangeListener(listenerB);
  realm.beginTransaction();
  realm.commitTransaction();
}",0.9941837921675069
155626,"@Test @RunTestInLooperThread public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification(){
  final Realm realm=looperThread.realm;
  final RealmResults<Dog> dogs=realm.where(Dog.class).findAllAsync();
  final AtomicBoolean resultsListenerDone=new AtomicBoolean(false);
  final AtomicBoolean realmListenerDone=new AtomicBoolean(false);
  looperThread.keepStrongReference.add(dogs);
  assertTrue(dogs.load());
  assertEquals(0,dogs.size());
  dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>(){
    @Override public void onChange(    RealmResults<Dog> results){
      if (dogs.size() == 2) {
        resultsListenerDone.set(true);
        if (realmListenerDone.get()) {
          looperThread.testComplete();
        }
      }
    }
  }
);
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm element){
      if (dogs.size() == 1) {
        realm.executeTransactionAsync(new Realm.Transaction(){
          @Override public void execute(          Realm realm){
            realm.createObject(Dog.class);
          }
        }
);
      }
 else       if (dogs.size() == 2) {
        realmListenerDone.set(true);
        if (resultsListenerDone.get()) {
          looperThread.testComplete();
        }
      }
    }
  }
);
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.createObject(Dog.class);
    }
  }
);
}","@Test @RunTestInLooperThread public void asyncRealmResultsShouldNotBlockBackgroundCommitNotification(){
  final Realm realm=looperThread.getRealm();
  final RealmResults<Dog> dogs=realm.where(Dog.class).findAllAsync();
  final AtomicBoolean resultsListenerDone=new AtomicBoolean(false);
  final AtomicBoolean realmListenerDone=new AtomicBoolean(false);
  looperThread.keepStrongReference(dogs);
  assertTrue(dogs.load());
  assertEquals(0,dogs.size());
  dogs.addChangeListener(new RealmChangeListener<RealmResults<Dog>>(){
    @Override public void onChange(    RealmResults<Dog> results){
      if (dogs.size() == 2) {
        resultsListenerDone.set(true);
        if (realmListenerDone.get()) {
          looperThread.testComplete();
        }
      }
    }
  }
);
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm element){
      if (dogs.size() == 1) {
        realm.executeTransactionAsync(new Realm.Transaction(){
          @Override public void execute(          Realm realm){
            realm.createObject(Dog.class);
          }
        }
);
      }
 else       if (dogs.size() == 2) {
        realmListenerDone.set(true);
        if (resultsListenerDone.get()) {
          looperThread.testComplete();
        }
      }
    }
  }
);
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.createObject(Dog.class);
    }
  }
);
}",0.9934953782951044
155627,"@Test @RunTestInLooperThread(threadName=""String_Node_Str"") public void listenersNotAllowedOnIntentServiceThreads(){
  final Realm realm=looperThread.realm;
  realm.beginTransaction();
  AllTypes obj=realm.createObject(AllTypes.class);
  realm.commitTransaction();
  RealmResults<AllTypes> results=realm.where(AllTypes.class).findAll();
  try {
    realm.addChangeListener(new RealmChangeListener<Realm>(){
      @Override public void onChange(      Realm element){
      }
    }
);
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  try {
    results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>(){
      @Override public void onChange(      RealmResults<AllTypes> element){
      }
    }
);
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  try {
    obj.addChangeListener(new RealmChangeListener<RealmModel>(){
      @Override public void onChange(      RealmModel element){
      }
    }
);
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  looperThread.testComplete();
}","@Test @RunTestInLooperThread(threadName=""String_Node_Str"") public void listenersNotAllowedOnIntentServiceThreads(){
  final Realm realm=looperThread.getRealm();
  realm.beginTransaction();
  AllTypes obj=realm.createObject(AllTypes.class);
  realm.commitTransaction();
  RealmResults<AllTypes> results=realm.where(AllTypes.class).findAll();
  try {
    realm.addChangeListener(new RealmChangeListener<Realm>(){
      @Override public void onChange(      Realm element){
      }
    }
);
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  try {
    results.addChangeListener(new RealmChangeListener<RealmResults<AllTypes>>(){
      @Override public void onChange(      RealmResults<AllTypes> element){
      }
    }
);
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  try {
    obj.addChangeListener(new RealmChangeListener<RealmModel>(){
      @Override public void onChange(      RealmModel element){
      }
    }
);
    fail();
  }
 catch (  IllegalStateException ignored) {
  }
  looperThread.testComplete();
}",0.9927988478156504
155628,"@Test @RunTestInLooperThread(before=PopulateOneAllTypes.class) public void realmListener_realmResultShouldBeSynced(){
  final Realm realm=looperThread.realm;
  final RealmResults<AllTypes> results=realm.where(AllTypes.class).findAll();
  assertEquals(1,results.size());
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      AllTypes allTypes=realm.where(AllTypes.class).findFirst();
      assertNotNull(allTypes);
      allTypes.deleteFromRealm();
      assertEquals(0,realm.where(AllTypes.class).count());
    }
  }
);
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm element){
      assertEquals(0,realm.where(AllTypes.class).count());
      assertEquals(0,results.size());
      looperThread.testComplete();
    }
  }
);
}","@Test @RunTestInLooperThread(before=PopulateOneAllTypes.class) public void realmListener_realmResultShouldBeSynced(){
  final Realm realm=looperThread.getRealm();
  final RealmResults<AllTypes> results=realm.where(AllTypes.class).findAll();
  assertEquals(1,results.size());
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      AllTypes allTypes=realm.where(AllTypes.class).findFirst();
      assertNotNull(allTypes);
      allTypes.deleteFromRealm();
      assertEquals(0,realm.where(AllTypes.class).count());
    }
  }
);
  realm.addChangeListener(new RealmChangeListener<Realm>(){
    @Override public void onChange(    Realm element){
      assertEquals(0,realm.where(AllTypes.class).count());
      assertEquals(0,results.size());
      looperThread.testComplete();
    }
  }
);
}",0.9911190053285968
155629,"private void emitToStringMethod(JavaWriter writer) throws IOException {
  if (metadata.containsToString()) {
    return;
  }
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.beginControlFlow(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",simpleClassName);
  List<VariableElement> fields=metadata.getFields();
  for (int i=0; i < fields.size(); i++) {
    VariableElement field=fields.get(i);
    String fieldName=field.getSimpleName().toString();
    writer.emitStatement(""String_Node_Str"",fieldName);
    if (Utils.isRealmModel(field)) {
      String fieldTypeSimpleName=Utils.getFieldTypeSimpleName(field);
      writer.emitStatement(""String_Node_Str"",metadata.getGetter(fieldName),fieldTypeSimpleName);
    }
 else     if (Utils.isRealmList(field)) {
      String genericTypeSimpleName=Utils.getGenericTypeSimpleName(field);
      writer.emitStatement(""String_Node_Str"",genericTypeSimpleName,metadata.getGetter(fieldName));
    }
 else {
      if (metadata.isNullable(field)) {
        writer.emitStatement(""String_Node_Str"",metadata.getGetter(fieldName),metadata.getGetter(fieldName));
      }
 else {
        writer.emitStatement(""String_Node_Str"",metadata.getGetter(fieldName));
      }
    }
    writer.emitStatement(""String_Node_Str"");
    if (i < fields.size() - 1) {
      writer.emitStatement(""String_Node_Str"");
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
}","private void emitToStringMethod(JavaWriter writer) throws IOException {
  if (metadata.containsToString()) {
    return;
  }
  writer.emitAnnotation(""String_Node_Str"");
  writer.emitAnnotation(""String_Node_Str"",""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.beginControlFlow(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",simpleClassName);
  List<VariableElement> fields=metadata.getFields();
  for (int i=0; i < fields.size(); i++) {
    VariableElement field=fields.get(i);
    String fieldName=field.getSimpleName().toString();
    writer.emitStatement(""String_Node_Str"",fieldName);
    if (Utils.isRealmModel(field)) {
      String fieldTypeSimpleName=Utils.getFieldTypeSimpleName(field);
      writer.emitStatement(""String_Node_Str"",metadata.getGetter(fieldName),fieldTypeSimpleName);
    }
 else     if (Utils.isRealmList(field)) {
      String genericTypeSimpleName=Utils.getGenericTypeSimpleName(field);
      writer.emitStatement(""String_Node_Str"",genericTypeSimpleName,metadata.getGetter(fieldName));
    }
 else {
      if (metadata.isNullable(field)) {
        writer.emitStatement(""String_Node_Str"",metadata.getGetter(fieldName),metadata.getGetter(fieldName));
      }
 else {
        writer.emitStatement(""String_Node_Str"",metadata.getGetter(fieldName));
      }
    }
    writer.emitStatement(""String_Node_Str"");
    if (i < fields.size() - 1) {
      writer.emitStatement(""String_Node_Str"");
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
}",0.9814925373134328
155630,"@Override public String toString(){
  if (!RealmObject.isValid(this)) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnString() != null ? realmGet$columnString() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnLong());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnFloat());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnDouble());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnBoolean());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnDate());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnBinary());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnObject() != null ? ""String_Node_Str"" : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"").append(realmGet$columnRealmList().size()).append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}","@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  if (!RealmObject.isValid(this)) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnString() != null ? realmGet$columnString() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnLong());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnFloat());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnDouble());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnBoolean());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnDate());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnBinary());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$columnObject() != null ? ""String_Node_Str"" : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"").append(realmGet$columnRealmList().size()).append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}",0.9907058528008038
155631,"@Override public String toString(){
  if (!RealmObject.isValid(this)) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$done());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$isReady());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$mCompleted());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$anotherBoolean());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}","@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  if (!RealmObject.isValid(this)) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$done());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$isReady());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$mCompleted());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$anotherBoolean());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}",0.9800539083557952
155632,"@Override public String toString(){
  if (!RealmObject.isValid(this)) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldStringNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldStringNull() != null ? realmGet$fieldStringNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBooleanNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBooleanNull() != null ? realmGet$fieldBooleanNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBytesNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBytesNull() != null ? realmGet$fieldBytesNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldByteNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldByteNull() != null ? realmGet$fieldByteNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldShortNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldShortNull() != null ? realmGet$fieldShortNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldIntegerNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldIntegerNull() != null ? realmGet$fieldIntegerNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldLongNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldLongNull() != null ? realmGet$fieldLongNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldFloatNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldFloatNull() != null ? realmGet$fieldFloatNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDoubleNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDoubleNull() != null ? realmGet$fieldDoubleNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDateNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDateNull() != null ? realmGet$fieldDateNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldObjectNull() != null ? ""String_Node_Str"" : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}","@Override @SuppressWarnings(""String_Node_Str"") public String toString(){
  if (!RealmObject.isValid(this)) {
    return ""String_Node_Str"";
  }
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldStringNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldStringNull() != null ? realmGet$fieldStringNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBooleanNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBooleanNull() != null ? realmGet$fieldBooleanNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBytesNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldBytesNull() != null ? realmGet$fieldBytesNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldByteNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldByteNull() != null ? realmGet$fieldByteNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldShortNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldShortNull() != null ? realmGet$fieldShortNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldIntegerNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldIntegerNull() != null ? realmGet$fieldIntegerNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldLongNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldLongNull() != null ? realmGet$fieldLongNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldFloatNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldFloatNull() != null ? realmGet$fieldFloatNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDoubleNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDoubleNull() != null ? realmGet$fieldDoubleNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDateNotNull());
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldDateNull() != null ? realmGet$fieldDateNull() : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(realmGet$fieldObjectNull() != null ? ""String_Node_Str"" : ""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}",0.996027058949855
155633,"public void testExceptionMessage(){
  realm.beginTransaction();
  AllTypes obj=realm.createObject(AllTypes.class);
  realm.commitTransaction();
  DynamicRealmObject o=new DynamicRealmObject(obj);
  try {
    o.getFloat(""String_Node_Str"");
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertEquals(""String_Node_Str"",e.getMessage());
  }
}","@Test public void testExceptionMessage(){
  realm.beginTransaction();
  AllTypes obj=realm.createObject(AllTypes.class);
  realm.commitTransaction();
  DynamicRealmObject o=new DynamicRealmObject(obj);
  try {
    o.getFloat(""String_Node_Str"");
    fail();
  }
 catch (  IllegalArgumentException e) {
    assertEquals(""String_Node_Str"",e.getMessage());
  }
}",0.991549295774648
155634,"/** 
 * Populates a realm with Byte type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithBytePrimaryKey(Realm testRealm,Byte primaryFieldValue,String secondaryFieldValue,int numberOfPopulation,int iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedByte userObj=new PrimaryKeyAsBoxedByte();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  byte idValue=(byte)iteratorBeginValue;
  for (int i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedByte obj=new PrimaryKeyAsBoxedByte();
    obj.setId(new Byte(idValue));
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}","/** 
 * Populates a realm with Byte type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithBytePrimaryKey(Realm testRealm,Byte primaryFieldValue,String secondaryFieldValue,int numberOfPopulation,int iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedByte userObj=new PrimaryKeyAsBoxedByte();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  byte idValue=(byte)iteratorBeginValue;
  for (int i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedByte obj=new PrimaryKeyAsBoxedByte();
    obj.setId(idValue);
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}",0.9862227324913893
155635,"public static String streamToString(InputStream in) throws IOException {
  BufferedReader br=null;
  StringBuilder sb=new StringBuilder();
  String line;
  try {
    br=new BufferedReader(new InputStreamReader(in));
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
  }
  finally {
    if (br != null) {
      br.close();
    }
  }
  return sb.toString();
}","public static String streamToString(InputStream in) throws IOException {
  BufferedReader br=null;
  StringBuilder sb=new StringBuilder();
  String line;
  try {
    br=new BufferedReader(new InputStreamReader(in,UTF_8));
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
  }
  finally {
    if (br != null) {
      br.close();
    }
  }
  return sb.toString();
}",0.9921465968586388
155636,"public static byte[] SHA512(String str){
  try {
    MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
    md.update(str.getBytes(""String_Node_Str""),0,str.length());
    return md.digest();
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}","public static byte[] SHA512(String str){
  try {
    MessageDigest md=MessageDigest.getInstance(""String_Node_Str"");
    md.update(str.getBytes(UTF_8),0,str.length());
    return md.digest();
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
}",0.8416149068322981
155637,"@SuppressWarnings(""String_Node_Str"") public static boolean isSelinuxEnforcing(){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) {
    return false;
  }
  try {
    final Process process=new ProcessBuilder(""String_Node_Str"").start();
    try {
      final BufferedReader reader=new BufferedReader(new InputStreamReader(process.getInputStream()));
      try {
        return reader.readLine().toLowerCase(Locale.ENGLISH).equals(""String_Node_Str"");
      }
  finally {
        try {
          reader.close();
        }
 catch (        IOException ignored) {
        }
      }
    }
  finally {
      try {
        process.waitFor();
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
 catch (  IOException e) {
    return false;
  }
}","@SuppressWarnings(""String_Node_Str"") public static boolean isSelinuxEnforcing(){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2) {
    return false;
  }
  try {
    final Process process=new ProcessBuilder(""String_Node_Str"").start();
    try {
      final BufferedReader reader=new BufferedReader(new InputStreamReader(process.getInputStream(),UTF_8));
      try {
        return reader.readLine().toLowerCase(Locale.ENGLISH).equals(""String_Node_Str"");
      }
  finally {
        try {
          reader.close();
        }
 catch (        IOException ignored) {
        }
      }
    }
  finally {
      try {
        process.waitFor();
      }
 catch (      InterruptedException ignored) {
      }
    }
  }
 catch (  IOException e) {
    return false;
  }
}",0.996124031007752
155638,"/** 
 * Populates a realm with Long type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithLongPrimaryKey(Realm testRealm,Long primaryFieldValue,String secondaryFieldValue,long numberOfPopulation,long iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedLong userObj=new PrimaryKeyAsBoxedLong();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  long idValue=iteratorBeginValue;
  for (long i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedLong obj=new PrimaryKeyAsBoxedLong();
    obj.setId(new Long(idValue));
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}","/** 
 * Populates a realm with Long type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithLongPrimaryKey(Realm testRealm,Long primaryFieldValue,String secondaryFieldValue,long numberOfPopulation,long iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedLong userObj=new PrimaryKeyAsBoxedLong();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  long idValue=iteratorBeginValue;
  for (long i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedLong obj=new PrimaryKeyAsBoxedLong();
    obj.setId(idValue);
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}",0.9861751152073732
155639,"/** 
 * Populates a realm with Integer type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithIntegerPrimaryKey(Realm testRealm,Integer primaryFieldValue,String secondaryFieldValue,int numberOfPopulation,int iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedInteger userObj=new PrimaryKeyAsBoxedInteger();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  int idValue=iteratorBeginValue;
  for (int i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedInteger obj=new PrimaryKeyAsBoxedInteger();
    obj.setId(new Integer(idValue));
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}","/** 
 * Populates a realm with Integer type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithIntegerPrimaryKey(Realm testRealm,Integer primaryFieldValue,String secondaryFieldValue,int numberOfPopulation,int iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedInteger userObj=new PrimaryKeyAsBoxedInteger();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  int idValue=iteratorBeginValue;
  for (int i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedInteger obj=new PrimaryKeyAsBoxedInteger();
    obj.setId(idValue);
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}",0.9847715736040608
155640,"/** 
 * Populates a realm with Short type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithShortPrimaryKey(Realm testRealm,Short primaryFieldValue,String secondaryFieldValue,int numberOfPopulation,int iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedShort userObj=new PrimaryKeyAsBoxedShort();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  short idValue=(short)iteratorBeginValue;
  for (int i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedShort obj=new PrimaryKeyAsBoxedShort();
    obj.setId(new Short(idValue));
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}","/** 
 * Populates a realm with Short type Primarykey objects for a number of numberOfPopulation - 1, starting with iteratorBeginValue. One object is setup to have given values from parameters.
 */
public static void populateTestRealmWithShortPrimaryKey(Realm testRealm,Short primaryFieldValue,String secondaryFieldValue,int numberOfPopulation,int iteratorBeginValue){
  testRealm.beginTransaction();
  PrimaryKeyAsBoxedShort userObj=new PrimaryKeyAsBoxedShort();
  userObj.setId(primaryFieldValue);
  userObj.setName(secondaryFieldValue);
  testRealm.copyToRealm(userObj);
  short idValue=(short)iteratorBeginValue;
  for (int i=0; i < numberOfPopulation - 1; ++i, ++idValue) {
    PrimaryKeyAsBoxedShort obj=new PrimaryKeyAsBoxedShort();
    obj.setId(idValue);
    obj.setName(String.valueOf(idValue));
    testRealm.copyToRealm(obj);
  }
  testRealm.commitTransaction();
}",0.9858035207268596
155641,"public static InputStream stringToStream(String str){
  return new ByteArrayInputStream(str.getBytes(Charset.forName(""String_Node_Str"")));
}","public static InputStream stringToStream(String str){
  return new ByteArrayInputStream(str.getBytes(UTF_8));
}",0.852589641434263
155642,"/** 
 * Tests whether this   {@code Collection} contains the specified object. Returns{@code true} if and only if at least one element {@code elem} in this{@code Collection} meets following requirement:{@code (object==null ? elem==null : object.equals(elem))}.
 * @param object the object to search for.
 * @return {@code true} if object is an element of this {@code Collection},   {@code false} otherwise.
 * @throws NullPointerException if the object to look for is {@code null} and this {@code Collection} doesn'tsupport  {@code null} elements.
 */
boolean contains(Object object);","/** 
 * Tests whether this   {@code Collection} contains the specified object. Returns{@code true} if and only if at least one element {@code elem} in this{@code Collection} meets following requirement:{@code (object==null ? elem==null : object.equals(elem))}.
 * @param object the object to search for.
 * @return {@code true} if object is an element of this {@code Collection},   {@code false} otherwise.
 * @throws NullPointerException if the object to look for is {@code null} and this {@code Collection} doesn'tsupport  {@code null} elements.
 */
@Override boolean contains(Object object);",0.9915110356536504
155643,"/** 
 * Adding a new object to the RealmList. If the object is not already manage by Realm it will be transparently copied using   {@link Realm#copyToRealmOrUpdate(RealmModel)}
 * @see #add(RealmModel)
 */
public void add(E e){
  realm.checkIfValid();
  checkConcurrentModification();
  try {
    int i=cursor;
    RealmList.this.add(i,e);
    lastRet=-1;
    cursor=i + 1;
    expectedModCount=modCount;
  }
 catch (  IndexOutOfBoundsException ex) {
    throw new ConcurrentModificationException();
  }
}","/** 
 * Adding a new object to the RealmList. If the object is not already manage by Realm it will be transparently copied using   {@link Realm#copyToRealmOrUpdate(RealmModel)}
 * @see #add(RealmModel)
 */
@Override public void add(E e){
  realm.checkIfValid();
  checkConcurrentModification();
  try {
    int i=cursor;
    RealmList.this.add(i,e);
    lastRet=-1;
    cursor=i + 1;
    expectedModCount=modCount;
  }
 catch (  IndexOutOfBoundsException ex) {
    throw new ConcurrentModificationException();
  }
}",0.9901960784313726
155644,"/** 
 * {@inheritDoc}
 */
public E last(E defaultValue){
  return lastImpl(false,defaultValue);
}","/** 
 * {@inheritDoc}
 */
@Override public E last(E defaultValue){
  return lastImpl(false,defaultValue);
}",0.9509803921568628
155645,"/** 
 * {@inheritDoc}
 */
public boolean hasNext(){
  realm.checkIfValid();
  checkConcurrentModification();
  return cursor != size();
}","/** 
 * {@inheritDoc}
 */
@Override public boolean hasNext(){
  realm.checkIfValid();
  checkConcurrentModification();
  return cursor != size();
}",0.9647887323943662
155646,"/** 
 * {@inheritDoc}
 */
public boolean isManaged(){
  return realm != null;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isManaged(){
  return realm != null;
}",0.9404761904761904
155647,"/** 
 * {@inheritDoc}
 */
public E next(){
  realm.checkIfValid();
  checkConcurrentModification();
  int i=cursor;
  try {
    E next=get(i);
    lastRet=i;
    cursor=i + 1;
    return next;
  }
 catch (  IndexOutOfBoundsException e) {
    checkConcurrentModification();
    throw new NoSuchElementException(""String_Node_Str"" + i + ""String_Node_Str""+ size()+ ""String_Node_Str"");
  }
}","/** 
 * {@inheritDoc}
 */
@Override public E next(){
  realm.checkIfValid();
  checkConcurrentModification();
  int i=cursor;
  try {
    E next=get(i);
    lastRet=i;
    cursor=i + 1;
    return next;
  }
 catch (  IndexOutOfBoundsException e) {
    checkConcurrentModification();
    throw new NoSuchElementException(""String_Node_Str"" + i + ""String_Node_Str""+ size()+ ""String_Node_Str"");
  }
}",0.9872122762148338
155648,"/** 
 * {@inheritDoc}
 */
public int nextIndex(){
  return cursor;
}","/** 
 * {@inheritDoc}
 */
@Override public int nextIndex(){
  return cursor;
}",0.9315068493150684
155649,"/** 
 * {@inheritDoc}
 */
public void remove(){
  realm.checkIfValid();
  if (lastRet < 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  checkConcurrentModification();
  try {
    RealmList.this.remove(lastRet);
    if (lastRet < cursor) {
      cursor--;
    }
    lastRet=-1;
    expectedModCount=modCount;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new ConcurrentModificationException();
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void remove(){
  realm.checkIfValid();
  if (lastRet < 0) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  checkConcurrentModification();
  try {
    RealmList.this.remove(lastRet);
    if (lastRet < cursor) {
      cursor--;
    }
    lastRet=-1;
    expectedModCount=modCount;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new ConcurrentModificationException();
  }
}",0.988399071925754
155650,"/** 
 * {@inheritDoc}
 */
public boolean hasPrevious(){
  return cursor != 0;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean hasPrevious(){
  return cursor != 0;
}",0.9404761904761904
155651,"/** 
 * Returns a RealmQuery, which can be used to query for specific objects of this class.
 * @return a RealmQuery object.
 * @throws IllegalStateException if Realm instance has been closed or parent object has been removed.
 * @see io.realm.RealmQuery
 */
public RealmQuery<E> where(){
  if (isManaged()) {
    checkValidView();
    return RealmQuery.createQueryFromList(this);
  }
 else {
    throw new UnsupportedOperationException(ONLY_IN_MANAGED_MODE_MESSAGE);
  }
}","/** 
 * Returns a RealmQuery, which can be used to query for specific objects of this class.
 * @return a RealmQuery object.
 * @throws IllegalStateException if Realm instance has been closed or parent object has been removed.
 * @see io.realm.RealmQuery
 */
@Override public RealmQuery<E> where(){
  if (isManaged()) {
    checkValidView();
    return RealmQuery.createQueryFromList(this);
  }
 else {
    throw new UnsupportedOperationException(ONLY_IN_MANAGED_MODE_MESSAGE);
  }
}",0.9895397489539748
155652,"/** 
 * {@inheritDoc}
 */
public void set(E e){
  realm.checkIfValid();
  if (lastRet < 0) {
    throw new IllegalStateException();
  }
  checkConcurrentModification();
  try {
    RealmList.this.set(lastRet,e);
    expectedModCount=modCount;
  }
 catch (  IndexOutOfBoundsException ex) {
    throw new ConcurrentModificationException();
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void set(E e){
  realm.checkIfValid();
  if (lastRet < 0) {
    throw new IllegalStateException();
  }
  checkConcurrentModification();
  try {
    RealmList.this.set(lastRet,e);
    expectedModCount=modCount;
  }
 catch (  IndexOutOfBoundsException ex) {
    throw new ConcurrentModificationException();
  }
}",0.985632183908046
155653,"/** 
 * {@inheritDoc}
 */
public E previous(){
  checkConcurrentModification();
  int i=cursor - 1;
  try {
    E previous=get(i);
    lastRet=cursor=i;
    return previous;
  }
 catch (  IndexOutOfBoundsException e) {
    checkConcurrentModification();
    throw new NoSuchElementException(""String_Node_Str"" + i + ""String_Node_Str"");
  }
}","/** 
 * {@inheritDoc}
 */
@Override public E previous(){
  checkConcurrentModification();
  int i=cursor - 1;
  try {
    E previous=get(i);
    lastRet=cursor=i;
    return previous;
  }
 catch (  IndexOutOfBoundsException e) {
    checkConcurrentModification();
    throw new NoSuchElementException(""String_Node_Str"" + i + ""String_Node_Str"");
  }
}",0.9855072463768116
155654,"/** 
 * {@inheritDoc}
 */
public boolean isValid(){
  if (realm == null) {
    return true;
  }
  if (realm.isClosed()) {
    return false;
  }
  return isAttached();
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isValid(){
  if (realm == null) {
    return true;
  }
  if (realm.isClosed()) {
    return false;
  }
  return isAttached();
}",0.9710982658959536
155655,"/** 
 * {@inheritDoc}
 */
public E first(E defaultValue){
  return firstImpl(false,defaultValue);
}","/** 
 * {@inheritDoc}
 */
@Override public E first(E defaultValue){
  return firstImpl(false,defaultValue);
}",0.9519230769230768
155656,"/** 
 * {@inheritDoc}
 */
public int previousIndex(){
  return cursor - 1;
}","/** 
 * {@inheritDoc}
 */
@Override public int previousIndex(){
  return cursor - 1;
}",0.9382716049382716
155657,"/** 
 * Returns   {@code false} if the results are not yet loaded, {@code true} if they are loaded.
 * @return {@code true} if the query has completed and the data is available, {@code false} if the query is stillrunning in the background.
 */
public boolean isLoaded(){
  realm.checkIfValid();
  return collection.isLoaded();
}","/** 
 * Returns   {@code false} if the results are not yet loaded, {@code true} if they are loaded.
 * @return {@code true} if the query has completed and the data is available, {@code false} if the query is stillrunning in the background.
 */
@Override public boolean isLoaded(){
  realm.checkIfValid();
  return collection.isLoaded();
}",0.984984984984985
155658,"/** 
 * Makes an asynchronous query blocking. This will also trigger any registered   {@link RealmChangeListener} whenthe query completes.
 * @return {@code true} if it successfully completed the query, {@code false} otherwise.
 */
public boolean load(){
  realm.checkIfValid();
  collection.load();
  return true;
}","/** 
 * Makes an asynchronous query blocking. This will also trigger any registered   {@link RealmChangeListener} whenthe query completes.
 * @return {@code true} if it successfully completed the query, {@code false} otherwise.
 */
@Override public boolean load(){
  realm.checkIfValid();
  collection.load();
  return true;
}",0.9844236760124612
155659,"protected native double nativeGetDouble(long nativeRowPtr,long columnIndex);","@Override protected native double nativeGetDouble(long nativeRowPtr,long columnIndex);",0.9382716049382716
155660,"protected native int nativeGetColumnType(long nativeTablePtr,long columnIndex);","@Override protected native int nativeGetColumnType(long nativeTablePtr,long columnIndex);",0.9404761904761904
155661,"protected native long nativeGetTimestamp(long nativeRowPtr,long columnIndex);","@Override protected native long nativeGetTimestamp(long nativeRowPtr,long columnIndex);",0.9390243902439024
155662,"protected native long nativeGetLinkView(long nativePtr,long columnIndex);","@Override protected native long nativeGetLinkView(long nativePtr,long columnIndex);",0.935897435897436
155663,"protected native void nativeSetBoolean(long nativeRowPtr,long columnIndex,boolean value);","@Override protected native void nativeSetBoolean(long nativeRowPtr,long columnIndex,boolean value);",0.946808510638298
155664,"protected native boolean nativeGetBoolean(long nativeRowPtr,long columnIndex);","@Override protected native boolean nativeGetBoolean(long nativeRowPtr,long columnIndex);",0.9397590361445785
155665,"protected native void nativeNullifyLink(long nativeRowPtr,long columnIndex);","@Override protected native void nativeNullifyLink(long nativeRowPtr,long columnIndex);",0.9382716049382716
155666,"protected native long nativeGetColumnIndex(long nativeTablePtr,String columnName);","@Override protected native long nativeGetColumnIndex(long nativeTablePtr,String columnName);",0.942528735632184
155667,"protected native void nativeSetByteArray(long nativePtr,long columnIndex,byte[] data);","@Override protected native void nativeSetByteArray(long nativePtr,long columnIndex,byte[] data);",0.945054945054945
155668,"protected native void nativeSetDouble(long nativeRowPtr,long columnIndex,double value);","@Override protected native void nativeSetDouble(long nativeRowPtr,long columnIndex,double value);",0.9456521739130436
155669,"protected native long nativeGetLink(long nativeRowPtr,long columnIndex);","@Override protected native long nativeGetLink(long nativeRowPtr,long columnIndex);",0.935064935064935
155670,"protected native void nativeSetLink(long nativeRowPtr,long columnIndex,long value);","@Override protected native void nativeSetLink(long nativeRowPtr,long columnIndex,long value);",0.9431818181818182
155671,"protected native long nativeGetLong(long nativeRowPtr,long columnIndex);","@Override protected native long nativeGetLong(long nativeRowPtr,long columnIndex);",0.935064935064935
155672,"protected native void nativeSetLong(long nativeRowPtr,long columnIndex,long value);","@Override protected native void nativeSetLong(long nativeRowPtr,long columnIndex,long value);",0.9431818181818182
155673,protected native long nativeGetColumnCount(long nativeTablePtr);,@Override protected native long nativeGetColumnCount(long nativeTablePtr);,0.927536231884058
155674,"protected native String nativeGetColumnName(long nativeTablePtr,long columnIndex);","@Override protected native String nativeGetColumnName(long nativeTablePtr,long columnIndex);",0.942528735632184
155675,"protected native boolean nativeIsNullLink(long nativeRowPtr,long columnIndex);","@Override protected native boolean nativeIsNullLink(long nativeRowPtr,long columnIndex);",0.9397590361445785
155676,"protected native byte[] nativeGetByteArray(long nativePtr,long columnIndex);","@Override protected native byte[] nativeGetByteArray(long nativePtr,long columnIndex);",0.9382716049382716
155677,"protected native void nativeSetTimestamp(long nativeRowPtr,long columnIndex,long dateTimeValue);","@Override protected native void nativeSetTimestamp(long nativeRowPtr,long columnIndex,long dateTimeValue);",0.9504950495049505
155678,"protected native void nativeSetString(long nativeRowPtr,long columnIndex,String value);","@Override protected native void nativeSetString(long nativeRowPtr,long columnIndex,String value);",0.9456521739130436
155679,"protected native float nativeGetFloat(long nativeRowPtr,long columnIndex);","@Override protected native float nativeGetFloat(long nativeRowPtr,long columnIndex);",0.9367088607594936
155680,"protected native String nativeGetString(long nativePtr,long columnIndex);","@Override protected native String nativeGetString(long nativePtr,long columnIndex);",0.935897435897436
155681,"protected native void nativeSetFloat(long nativeRowPtr,long columnIndex,float value);","@Override protected native void nativeSetFloat(long nativeRowPtr,long columnIndex,float value);",0.9444444444444444
155682,"/** 
 * Not supported by Realm collection iterators.
 * @throws UnsupportedOperationException
 */
@Deprecated public void remove(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","/** 
 * Not supported by Realm collection iterators.
 * @throws UnsupportedOperationException
 */
@Override @Deprecated public void remove(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}",0.975
155683,"public String toString(){
  long columnCount=getColumnCount();
  String name=getName();
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  if (name != null && !name.isEmpty()) {
    stringBuilder.append(getName());
    stringBuilder.append(""String_Node_Str"");
  }
  if (hasPrimaryKey()) {
    String pkFieldName=getColumnName(getPrimaryKey());
    stringBuilder.append(""String_Node_Str"").append(pkFieldName).append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(columnCount);
  stringBuilder.append(""String_Node_Str"");
  for (int i=0; i < columnCount; i++) {
    if (i != 0) {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(getColumnName(i));
  }
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(size());
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}","@Override public String toString(){
  long columnCount=getColumnCount();
  String name=getName();
  StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  if (name != null && !name.isEmpty()) {
    stringBuilder.append(getName());
    stringBuilder.append(""String_Node_Str"");
  }
  if (hasPrimaryKey()) {
    String pkFieldName=getColumnName(getPrimaryKey());
    stringBuilder.append(""String_Node_Str"").append(pkFieldName).append(""String_Node_Str"");
  }
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(columnCount);
  stringBuilder.append(""String_Node_Str"");
  for (int i=0; i < columnCount; i++) {
    if (i != 0) {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(getColumnName(i));
  }
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(""String_Node_Str"");
  stringBuilder.append(size());
  stringBuilder.append(""String_Node_Str"");
  return stringBuilder.toString();
}",0.994692144373673
155684,"/** 
 * {@inheritDoc}
 */
public void cancel(){
  pendingTask.cancel(true);
  isCancelled=true;
  service.getQueue().remove(pendingTask);
}","/** 
 * {@inheritDoc}
 */
@Override public void cancel(){
  pendingTask.cancel(true);
  isCancelled=true;
  service.getQueue().remove(pendingTask);
}",0.9652777777777778
155685,"/** 
 * {@inheritDoc}
 */
public boolean isCancelled(){
  return isCancelled;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean isCancelled(){
  return isCancelled;
}",0.9404761904761904
155686,"private boolean runMethodOnWrongThread(final CollectionMethod method,final AllJavaTypes tempObject) throws ExecutionException, InterruptedException {
  realm.beginTransaction();
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  Future<Boolean> future=executorService.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      Class<? extends Throwable> expected=IllegalStateException.class;
      if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
          expected=UnsupportedOperationException.class;
      }
    }
    try {
switch (method) {
case ADD_OBJECT:
        collection.add(new AllJavaTypes());
      break;
case ADD_ALL_OBJECTS:
    collection.addAll(Collections.singletonList(new AllJavaTypes()));
  break;
case CLEAR:
collection.clear();
case CONTAINS:
case CONTAINS_ALL:
collection.containsAll(Collections.singletonList(tempObject));
break;
case EQUALS:
collection.equals(createCollection(collectionClass));
break;
case HASHCODE:
collection.hashCode();
break;
case IS_EMPTY:
collection.isEmpty();
break;
case ITERATOR:
return true;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
case SIZE:
collection.size();
break;
case TO_ARRAY:
collection.toArray();
break;
case TO_ARRAY_INPUT:
collection.toArray(new Object[collection.size()]);
break;
}
return false;
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
return false;
}
}
return true;
}
}
);
Boolean result=future.get();
realm.cancelTransaction();
return result;
}","private boolean runMethodOnWrongThread(final CollectionMethod method,final AllJavaTypes tempObject) throws ExecutionException, InterruptedException {
  realm.beginTransaction();
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  Future<Boolean> future=executorService.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      Class<? extends Throwable> expected=IllegalStateException.class;
      if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
          expected=UnsupportedOperationException.class;
        break;
default :
    }
  }
  try {
switch (method) {
case ADD_OBJECT:
      collection.add(new AllJavaTypes());
    break;
case ADD_ALL_OBJECTS:
  collection.addAll(Collections.singletonList(new AllJavaTypes()));
break;
case CLEAR:
collection.clear();
break;
case CONTAINS:
collection.contains(tempObject);
break;
case CONTAINS_ALL:
collection.containsAll(Collections.singletonList(tempObject));
break;
case EQUALS:
collection.equals(createCollection(collectionClass));
break;
case HASHCODE:
collection.hashCode();
break;
case IS_EMPTY:
collection.isEmpty();
break;
case ITERATOR:
return true;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
case SIZE:
collection.size();
break;
case TO_ARRAY:
collection.toArray();
break;
case TO_ARRAY_INPUT:
collection.toArray(new Object[collection.size()]);
break;
}
return false;
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
return false;
}
}
return true;
}
}
);
Boolean result=future.get();
realm.cancelTransaction();
return result;
}",0.9783641160949867
155687,"@Test public void mutableMethodsOutsideTransactions(){
  for (  CollectionMutatorMethod method : CollectionMutatorMethod.values()) {
    Class<? extends Throwable> expected=IllegalStateException.class;
    if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
        expected=UnsupportedOperationException.class;
    }
  }
  try {
switch (method) {
case DELETE_ALL:
      collection.deleteAllFromRealm();
    break;
case ADD_OBJECT:
  collection.add(new AllJavaTypes());
case ADD_ALL_OBJECTS:
collection.addAll(Collections.singletonList(new AllJavaTypes()));
break;
case CLEAR:
collection.clear();
break;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
}
fail(""String_Node_Str"" + method);
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
fail(method + ""String_Node_Str"" + t+ ""String_Node_Str""+ expected);
}
}
}
}","@Test public void mutableMethodsOutsideTransactions(){
  for (  CollectionMutatorMethod method : CollectionMutatorMethod.values()) {
    Class<? extends Throwable> expected=IllegalStateException.class;
    if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
        expected=UnsupportedOperationException.class;
      break;
default :
  }
}
try {
switch (method) {
case DELETE_ALL:
    collection.deleteAllFromRealm();
  break;
case ADD_OBJECT:
collection.add(new AllJavaTypes());
break;
case ADD_ALL_OBJECTS:
collection.addAll(Collections.singletonList(new AllJavaTypes()));
break;
case CLEAR:
collection.clear();
break;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
}
fail(""String_Node_Str"" + method);
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
fail(method + ""String_Node_Str"" + t+ ""String_Node_Str""+ expected);
}
}
}
}",0.984126984126984
155688,"@Override public Boolean call() throws Exception {
  Class<? extends Throwable> expected=IllegalStateException.class;
  if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
      expected=UnsupportedOperationException.class;
  }
}
try {
switch (method) {
case ADD_OBJECT:
    collection.add(new AllJavaTypes());
  break;
case ADD_ALL_OBJECTS:
collection.addAll(Collections.singletonList(new AllJavaTypes()));
break;
case CLEAR:
collection.clear();
case CONTAINS:
case CONTAINS_ALL:
collection.containsAll(Collections.singletonList(tempObject));
break;
case EQUALS:
collection.equals(createCollection(collectionClass));
break;
case HASHCODE:
collection.hashCode();
break;
case IS_EMPTY:
collection.isEmpty();
break;
case ITERATOR:
return true;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
case SIZE:
collection.size();
break;
case TO_ARRAY:
collection.toArray();
break;
case TO_ARRAY_INPUT:
collection.toArray(new Object[collection.size()]);
break;
}
return false;
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
return false;
}
}
return true;
}","@Override public Boolean call() throws Exception {
  Class<? extends Throwable> expected=IllegalStateException.class;
  if (collectionClass == ManagedCollection.REALMRESULTS || isSnapshot(collectionClass)) {
switch (method) {
case ADD_OBJECT:
case ADD_ALL_OBJECTS:
case CLEAR:
case REMOVE_OBJECT:
case REMOVE_ALL:
case RETAIN_ALL:
      expected=UnsupportedOperationException.class;
    break;
default :
}
}
try {
switch (method) {
case ADD_OBJECT:
  collection.add(new AllJavaTypes());
break;
case ADD_ALL_OBJECTS:
collection.addAll(Collections.singletonList(new AllJavaTypes()));
break;
case CLEAR:
collection.clear();
break;
case CONTAINS:
collection.contains(tempObject);
break;
case CONTAINS_ALL:
collection.containsAll(Collections.singletonList(tempObject));
break;
case EQUALS:
collection.equals(createCollection(collectionClass));
break;
case HASHCODE:
collection.hashCode();
break;
case IS_EMPTY:
collection.isEmpty();
break;
case ITERATOR:
return true;
case REMOVE_OBJECT:
collection.remove(new AllJavaTypes());
break;
case REMOVE_ALL:
collection.removeAll(Collections.singletonList(new AllJavaTypes()));
break;
case RETAIN_ALL:
collection.retainAll(Collections.singletonList(new AllJavaTypes()));
break;
case SIZE:
collection.size();
break;
case TO_ARRAY:
collection.toArray();
break;
case TO_ARRAY_INPUT:
collection.toArray(new Object[collection.size()]);
break;
}
return false;
}
 catch (Throwable t) {
if (!t.getClass().equals(expected)) {
return false;
}
}
return true;
}",0.9759450171821306
155689,"@Test public void looperThreadQuitsLooperEarly() throws InterruptedException {
  final CountDownLatch backgroundLooperStartedAndStopped=new CountDownLatch(1);
  final CountDownLatch mainThreadCommitCompleted=new CountDownLatch(1);
  final CountDownLatch backgroundThreadStopped=new CountDownLatch(1);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  executorService.submit(new Runnable(){
    @Override public void run(){
      Looper.prepare();
      Realm realm=Realm.getInstance(realmConfig);
      realm.setAutoRefresh(false);
      TestHelper.quitLooperOrFail();
      backgroundLooperStartedAndStopped.countDown();
      try {
        mainThreadCommitCompleted.await();
      }
 catch (      InterruptedException e) {
        fail(""String_Node_Str"");
      }
      realm.close();
      backgroundThreadStopped.countDown();
    }
  }
);
  TestHelper.awaitOrFail(backgroundLooperStartedAndStopped);
  Realm realm=Realm.getInstance(realmConfig);
  RealmLogger logger=TestHelper.getFailureLogger(Log.WARN);
  RealmLog.add(logger);
  realm.beginTransaction();
  realm.commitTransaction();
  mainThreadCommitCompleted.countDown();
  TestHelper.awaitOrFail(backgroundThreadStopped);
  realm.close();
  RealmLog.remove(logger);
}","@Test public void looperThreadQuitsLooperEarly() throws InterruptedException {
  final CountDownLatch backgroundLooperStartedAndStopped=new CountDownLatch(1);
  final CountDownLatch mainThreadCommitCompleted=new CountDownLatch(1);
  final CountDownLatch backgroundThreadStopped=new CountDownLatch(1);
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  final Future<?> future=executorService.submit(new Runnable(){
    @Override public void run(){
      Looper.prepare();
      Realm realm=Realm.getInstance(realmConfig);
      realm.setAutoRefresh(false);
      TestHelper.quitLooperOrFail();
      backgroundLooperStartedAndStopped.countDown();
      try {
        mainThreadCommitCompleted.await();
      }
 catch (      InterruptedException e) {
        fail(""String_Node_Str"");
      }
      realm.close();
      backgroundThreadStopped.countDown();
    }
  }
);
  TestHelper.awaitOrFail(backgroundLooperStartedAndStopped);
  Realm realm=Realm.getInstance(realmConfig);
  RealmLogger logger=TestHelper.getFailureLogger(Log.WARN);
  RealmLog.add(logger);
  realm.beginTransaction();
  realm.commitTransaction();
  mainThreadCommitCompleted.countDown();
  TestHelper.awaitOrFail(backgroundThreadStopped);
  realm.close();
  RealmLog.remove(logger);
}",0.9908910891089108
155690,"@Test public void listIterator_deleteManagedObjectIndirectly(){
  realm.beginTransaction();
  ListIterator<AllJavaTypes> it=collection.listIterator();
  it.next();
  it.next().deleteFromRealm();
  realm.commitTransaction();
switch (collectionClass) {
case MANAGED_REALMLIST:
case REALMRESULTS:
    assertEquals(TEST_SIZE - 1,collection.size());
  break;
case UNMANAGED_REALMLIST:
assertEquals(TEST_SIZE,collection.size());
break;
}
it.previous();
AllJavaTypes types=it.next();
assertTrue(collectionClass == CollectionClass.MANAGED_REALMLIST ? types.isValid() : !types.isValid());
}","@Test public void listIterator_deleteManagedObjectIndirectly(){
  if (skipTest(CollectionClass.REALMRESULTS_SNAPSHOT_LIST_BASE,CollectionClass.REALMRESULTS_SNAPSHOT_RESULTS_BASE)) {
    return;
  }
  realm.beginTransaction();
  ListIterator<AllJavaTypes> it=collection.listIterator();
  it.next();
  it.next().deleteFromRealm();
  realm.commitTransaction();
switch (collectionClass) {
case MANAGED_REALMLIST:
case REALMRESULTS:
    assertEquals(TEST_SIZE - 1,collection.size());
  break;
case UNMANAGED_REALMLIST:
assertEquals(TEST_SIZE,collection.size());
break;
default :
fail();
return;
}
it.previous();
AllJavaTypes types=it.next();
assertTrue(collectionClass == CollectionClass.MANAGED_REALMLIST ? types.isValid() : !types.isValid());
}",0.8789712556732224
155691,"@Test public void methods_indexOutOfBounds(){
  collection=createEmptyCollection(realm,collectionClass);
  for (  ListMethod method : ListMethod.values()) {
    realm.beginTransaction();
    try {
switch (method) {
case ADD_INDEX:
        collection.add(1,new AllJavaTypes());
      break;
case ADD_ALL_INDEX:
    collection.addAll(1,Collections.singleton(new AllJavaTypes()));
  break;
case GET_INDEX:
collection.get(1);
break;
case LIST_ITERATOR_INDEX:
collection.listIterator(1);
break;
case REMOVE_INDEX:
collection.remove(1);
case SET:
collection.set(1,new AllJavaTypes());
case SUBLIST:
collection.subList(1,2);
case FIRST:
case LAST:
case INDEX_OF:
case LAST_INDEX_OF:
case LIST_ITERATOR:
continue;
}
fail(method + ""String_Node_Str"");
}
 catch (IndexOutOfBoundsException ignored) {
}
catch (UnsupportedOperationException ignored) {
}
 finally {
realm.cancelTransaction();
}
}
for (OrderedRealmCollectionMethod method : OrderedRealmCollectionMethod.values()) {
realm.beginTransaction();
try {
switch (method) {
case DELETE_INDEX:
collection.deleteFromRealm(1);
break;
case DELETE_FIRST:
case DELETE_LAST:
case SORT:
case SORT_FIELD:
case SORT_2FIELDS:
case SORT_MULTI:
case CREATE_SNAPSHOT:
continue;
}
fail(method + ""String_Node_Str"");
}
 catch (IndexOutOfBoundsException ignored) {
}
catch (UnsupportedOperationException ignored) {
}
 finally {
realm.cancelTransaction();
}
}
}","@Test public void methods_indexOutOfBounds(){
  collection=createEmptyCollection(realm,collectionClass);
  for (  ListMethod method : ListMethod.values()) {
    realm.beginTransaction();
    try {
switch (method) {
case ADD_INDEX:
        collection.add(1,new AllJavaTypes());
      break;
case ADD_ALL_INDEX:
    collection.addAll(1,Collections.singleton(new AllJavaTypes()));
  break;
case GET_INDEX:
collection.get(1);
break;
case LIST_ITERATOR_INDEX:
collection.listIterator(1);
break;
case REMOVE_INDEX:
collection.remove(1);
break;
case SET:
collection.set(1,new AllJavaTypes());
break;
case SUBLIST:
collection.subList(1,2);
break;
case FIRST:
case LAST:
case INDEX_OF:
case LAST_INDEX_OF:
case LIST_ITERATOR:
continue;
}
fail(method + ""String_Node_Str"");
}
 catch (IndexOutOfBoundsException ignored) {
}
catch (UnsupportedOperationException ignored) {
}
 finally {
realm.cancelTransaction();
}
}
for (OrderedRealmCollectionMethod method : OrderedRealmCollectionMethod.values()) {
realm.beginTransaction();
try {
switch (method) {
case DELETE_INDEX:
collection.deleteFromRealm(1);
break;
case DELETE_FIRST:
case DELETE_LAST:
case SORT:
case SORT_FIELD:
case SORT_2FIELDS:
case SORT_MULTI:
case CREATE_SNAPSHOT:
continue;
}
fail(method + ""String_Node_Str"");
}
 catch (IndexOutOfBoundsException ignored) {
}
catch (UnsupportedOperationException ignored) {
}
 finally {
realm.cancelTransaction();
}
}
}",0.9924758151200288
155692,"@Test public void getInstanceClearsCacheWhenFailed(){
  String REALM_NAME=""String_Node_Str"";
  RealmConfiguration configA=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(42));
  RealmConfiguration configB=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(43));
  Realm realm=Realm.getInstance(configA);
  realm.close();
  try {
    Realm.getInstance(configB);
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.ACCESS_ERROR);
    assertTrue(Realm.deleteRealm(configA));
    realm=Realm.getInstance(configB);
    realm.close();
  }
}","@Test public void getInstanceClearsCacheWhenFailed(){
  String REALM_NAME=""String_Node_Str"";
  RealmConfiguration configA=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(42));
  RealmConfiguration configB=configFactory.createConfiguration(REALM_NAME,TestHelper.getRandomKey(43));
  Realm realm=Realm.getInstance(configA);
  realm.close();
  try {
    Realm.getInstance(configB);
    fail();
  }
 catch (  RealmFileException expected) {
    assertEquals(expected.getKind(),RealmFileException.Kind.ACCESS_ERROR);
    assertTrue(Realm.deleteRealm(configA));
    realm=Realm.getInstance(configB);
    realm.close();
  }
}",0.990506329113924
155693,"@Test public void createObjectFromJson_allSimpleObjectAllTypes() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",1L);
  json.put(""String_Node_Str"",1.23F);
  json.put(""String_Node_Str"",1.23D);
  json.put(""String_Node_Str"",true);
  json.put(""String_Node_Str"",new String(Base64.encode(new byte[]{1,2,3},Base64.DEFAULT)));
  realm.beginTransaction();
  realm.createObjectFromJson(AllTypes.class,json);
  realm.commitTransaction();
  AllTypes obj=realm.where(AllTypes.class).findFirst();
  assertEquals(""String_Node_Str"",obj.getColumnString());
  assertEquals(1L,obj.getColumnLong());
  assertEquals(1.23F,obj.getColumnFloat(),0F);
  assertEquals(1.23D,obj.getColumnDouble(),0D);
  assertEquals(true,obj.isColumnBoolean());
  assertArrayEquals(new byte[]{1,2,3},obj.getColumnBinary());
}","@Test public void createObjectFromJson_allSimpleObjectAllTypes() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",""String_Node_Str"");
  json.put(""String_Node_Str"",1L);
  json.put(""String_Node_Str"",1.23F);
  json.put(""String_Node_Str"",1.23D);
  json.put(""String_Node_Str"",true);
  json.put(""String_Node_Str"",new String(Base64.encode(new byte[]{1,2,3},Base64.DEFAULT),UTF_8));
  realm.beginTransaction();
  realm.createObjectFromJson(AllTypes.class,json);
  realm.commitTransaction();
  AllTypes obj=realm.where(AllTypes.class).findFirst();
  assertEquals(""String_Node_Str"",obj.getColumnString());
  assertEquals(1L,obj.getColumnLong());
  assertEquals(1.23F,obj.getColumnFloat(),0F);
  assertEquals(1.23D,obj.getColumnDouble(),0D);
  assertEquals(true,obj.isColumnBoolean());
  assertArrayEquals(new byte[]{1,2,3},obj.getColumnBinary());
}",0.9965675057208238
155694,"private InputStream convertJsonObjectToStream(JSONObject obj){
  return new ByteArrayInputStream(obj.toString().getBytes());
}","private InputStream convertJsonObjectToStream(JSONObject obj){
  return new ByteArrayInputStream(obj.toString().getBytes(UTF_8));
}",0.980544747081712
155695,"@Test public void realmMethods_onDeletedLinkView(){
  OrderedRealmCollection<CyclicType> results=populateCollectionOnDeletedLinkView(realm,ManagedCollection.MANAGED_REALMLIST);
  for (  RealmCollectionMethod method : RealmCollectionMethod.values()) {
    try {
switch (method) {
case WHERE:
        results.where();
      break;
case MIN:
    results.min(CyclicType.FIELD_ID);
  break;
case MAX:
results.max(CyclicType.FIELD_ID);
break;
case SUM:
results.sum(CyclicType.FIELD_ID);
break;
case AVERAGE:
results.average(CyclicType.FIELD_ID);
break;
case MIN_DATE:
results.minDate(CyclicType.FIELD_DATE);
break;
case MAX_DATE:
results.maxDate(CyclicType.FIELD_DATE);
break;
case DELETE_ALL_FROM_REALM:
results.deleteAllFromRealm();
break;
case IS_VALID:
continue;
case IS_MANAGED:
continue;
}
fail(method + ""String_Node_Str"");
}
 catch (IllegalStateException ignored) {
}
}
for (OrderedRealmCollectionMethod method : OrderedRealmCollectionMethod.values()) {
realm.beginTransaction();
try {
switch (method) {
case DELETE_INDEX:
results.deleteFromRealm(0);
break;
case DELETE_FIRST:
results.deleteFirstFromRealm();
break;
case DELETE_LAST:
results.deleteLastFromRealm();
break;
case SORT:
results.sort(CyclicType.FIELD_NAME);
break;
case SORT_FIELD:
results.sort(CyclicType.FIELD_NAME,Sort.ASCENDING);
break;
case SORT_2FIELDS:
results.sort(CyclicType.FIELD_NAME,Sort.ASCENDING,CyclicType.FIELD_DATE,Sort.DESCENDING);
break;
case SORT_MULTI:
results.sort(new String[]{CyclicType.FIELD_NAME,CyclicType.FIELD_DATE},new Sort[]{Sort.ASCENDING,Sort.DESCENDING});
case CREATE_SNAPSHOT:
results.createSnapshot();
}
fail(method + ""String_Node_Str"");
}
 catch (IllegalStateException ignored) {
}
 finally {
realm.cancelTransaction();
}
}
}","@Test public void realmMethods_onDeletedLinkView(){
  OrderedRealmCollection<CyclicType> results=populateCollectionOnDeletedLinkView(realm,ManagedCollection.MANAGED_REALMLIST);
  for (  RealmCollectionMethod method : RealmCollectionMethod.values()) {
    try {
switch (method) {
case WHERE:
        results.where();
      break;
case MIN:
    results.min(CyclicType.FIELD_ID);
  break;
case MAX:
results.max(CyclicType.FIELD_ID);
break;
case SUM:
results.sum(CyclicType.FIELD_ID);
break;
case AVERAGE:
results.average(CyclicType.FIELD_ID);
break;
case MIN_DATE:
results.minDate(CyclicType.FIELD_DATE);
break;
case MAX_DATE:
results.maxDate(CyclicType.FIELD_DATE);
break;
case DELETE_ALL_FROM_REALM:
results.deleteAllFromRealm();
break;
case IS_VALID:
continue;
case IS_MANAGED:
continue;
}
fail(method + ""String_Node_Str"");
}
 catch (IllegalStateException ignored) {
}
}
for (OrderedRealmCollectionMethod method : OrderedRealmCollectionMethod.values()) {
realm.beginTransaction();
try {
switch (method) {
case DELETE_INDEX:
results.deleteFromRealm(0);
break;
case DELETE_FIRST:
results.deleteFirstFromRealm();
break;
case DELETE_LAST:
results.deleteLastFromRealm();
break;
case SORT:
results.sort(CyclicType.FIELD_NAME);
break;
case SORT_FIELD:
results.sort(CyclicType.FIELD_NAME,Sort.ASCENDING);
break;
case SORT_2FIELDS:
results.sort(CyclicType.FIELD_NAME,Sort.ASCENDING,CyclicType.FIELD_DATE,Sort.DESCENDING);
break;
case SORT_MULTI:
results.sort(new String[]{CyclicType.FIELD_NAME,CyclicType.FIELD_DATE},new Sort[]{Sort.ASCENDING,Sort.DESCENDING});
break;
case CREATE_SNAPSHOT:
results.createSnapshot();
break;
}
fail(method + ""String_Node_Str"");
}
 catch (IllegalStateException ignored) {
}
 finally {
realm.cancelTransaction();
}
}
}",0.995958429561201
155696,"@Test public void and_implicit(){
  populateTestRealm(realm,200);
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,31.234567f);
  RealmResults<AllTypes> resultList=query.between(AllTypes.FIELD_LONG,1,10).findAll();
  assertEquals(0,resultList.size());
  query=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,81.234567f);
  resultList=query.between(AllTypes.FIELD_LONG,1,100).findAll();
  assertEquals(1,resultList.size());
}","@Test public void and_implicit(){
  populateTestRealm(realm,200);
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,31.2345f);
  RealmResults<AllTypes> resultList=query.between(AllTypes.FIELD_LONG,1,10).findAll();
  assertEquals(0,resultList.size());
  query=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,81.2345f);
  resultList=query.between(AllTypes.FIELD_LONG,1,100).findAll();
  assertEquals(1,resultList.size());
}",0.9957264957264956
155697,"@Test public void lessThanOrEqualTo(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).lessThanOrEqualTo(AllTypes.FIELD_FLOAT,31.234567f).findAll();
  assertEquals(31,resultList.size());
  resultList=realm.where(AllTypes.class).lessThanOrEqualTo(AllTypes.FIELD_FLOAT,31.234567f).between(AllTypes.FIELD_LONG,11,20).findAll();
  assertEquals(10,resultList.size());
}","@Test public void lessThanOrEqualTo(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).lessThanOrEqualTo(AllTypes.FIELD_FLOAT,31.2345f).findAll();
  assertEquals(31,resultList.size());
  resultList=realm.where(AllTypes.class).lessThanOrEqualTo(AllTypes.FIELD_FLOAT,31.2345f).between(AllTypes.FIELD_LONG,11,20).findAll();
  assertEquals(10,resultList.size());
}",0.9956616052060736
155698,"@Test(expected=UnsupportedOperationException.class) public void or_missingFilterAfter(){
  realm.where(AllTypes.class).or().equalTo(AllTypes.FIELD_FLOAT,31.234567f).findAll();
}","@Test(expected=UnsupportedOperationException.class) public void or_missingFilterAfter(){
  realm.where(AllTypes.class).or().equalTo(AllTypes.FIELD_FLOAT,31.2345f).findAll();
}",0.9943181818181818
155699,"@Test(expected=UnsupportedOperationException.class) public void or_missingFilterBefore(){
  realm.where(AllTypes.class).or().equalTo(AllTypes.FIELD_FLOAT,31.234567f).findAll();
}","@Test(expected=UnsupportedOperationException.class) public void or_missingFilterBefore(){
  realm.where(AllTypes.class).or().equalTo(AllTypes.FIELD_FLOAT,31.2345f).findAll();
}",0.9943502824858758
155700,"@Test public void lessThan(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).lessThan(AllTypes.FIELD_FLOAT,31.234567f).findAll();
  assertEquals(30,resultList.size());
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).lessThan(AllTypes.FIELD_FLOAT,31.234567f);
  resultList=query.between(AllTypes.FIELD_LONG,1,10).findAll();
  assertEquals(10,resultList.size());
}","@Test public void lessThan(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).lessThan(AllTypes.FIELD_FLOAT,31.2345f).findAll();
  assertEquals(30,resultList.size());
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).lessThan(AllTypes.FIELD_FLOAT,31.2345f);
  resultList=query.between(AllTypes.FIELD_LONG,1,10).findAll();
  assertEquals(10,resultList.size());
}",0.9957356076759062
155701,"@Test public void greaterThanOrEqualTo(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).greaterThanOrEqualTo(AllTypes.FIELD_FLOAT,10.234567f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 9,resultList.size());
  resultList=realm.where(AllTypes.class).beginsWith(AllTypes.FIELD_STRING,""String_Node_Str"").greaterThanOrEqualTo(AllTypes.FIELD_FLOAT,50.234567f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 100,resultList.size());
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).greaterThanOrEqualTo(AllTypes.FIELD_FLOAT,11.234567f);
  query=query.between(AllTypes.FIELD_LONG,1,20);
  resultList=query.beginsWith(AllTypes.FIELD_STRING,""String_Node_Str"").findAll();
  assertEquals(1,resultList.size());
}","@Test public void greaterThanOrEqualTo(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).greaterThanOrEqualTo(AllTypes.FIELD_FLOAT,10.2345f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 9,resultList.size());
  resultList=realm.where(AllTypes.class).beginsWith(AllTypes.FIELD_STRING,""String_Node_Str"").greaterThanOrEqualTo(AllTypes.FIELD_FLOAT,50.2345f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 100,resultList.size());
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).greaterThanOrEqualTo(AllTypes.FIELD_FLOAT,11.2345f);
  query=query.between(AllTypes.FIELD_LONG,1,20);
  resultList=query.beginsWith(AllTypes.FIELD_STRING,""String_Node_Str"").findAll();
  assertEquals(1,resultList.size());
}",0.9962871287128712
155702,"@Test public void equalTo(){
  populateTestRealm(realm,200);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,31.234567f).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,11.0f).equalTo(AllTypes.FIELD_LONG,10).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,11.0f).equalTo(AllTypes.FIELD_LONG,1).findAll();
  assertEquals(0,resultList.size());
}","@Test public void equalTo(){
  populateTestRealm(realm,200);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,31.2345f).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,11.0f).equalTo(AllTypes.FIELD_LONG,10).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,11.0f).equalTo(AllTypes.FIELD_LONG,1).findAll();
  assertEquals(0,resultList.size());
}",0.9981308411214952
155703,"@Test public void greaterThan(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,10.234567f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 10,resultList.size());
  resultList=realm.where(AllTypes.class).beginsWith(AllTypes.FIELD_STRING,""String_Node_Str"").greaterThan(AllTypes.FIELD_FLOAT,50.234567f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 100,resultList.size());
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,11.234567f);
  resultList=query.between(AllTypes.FIELD_LONG,1,20).findAll();
  assertEquals(10,resultList.size());
}","@Test public void greaterThan(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,10.2345f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 10,resultList.size());
  resultList=realm.where(AllTypes.class).beginsWith(AllTypes.FIELD_STRING,""String_Node_Str"").greaterThan(AllTypes.FIELD_FLOAT,150.2345f).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 150,resultList.size());
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).greaterThan(AllTypes.FIELD_FLOAT,11.2345f);
  resultList=query.between(AllTypes.FIELD_LONG,1,20).findAll();
  assertEquals(10,resultList.size());
}",0.9936395759717316
155704,"private void doTestForInFloat(String targetField){
  populateNoPrimaryKeyNullTypesRows();
  try {
    realm.where(NoPrimaryKeyNullTypes.class).in(targetField,(Float[])null).findAll();
    fail();
  }
 catch (  IllegalArgumentException ignored) {
  }
  try {
    realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{}).findAll();
    fail();
  }
 catch (  IllegalArgumentException ignored) {
  }
  RealmResults<NoPrimaryKeyNullTypes> resultList=realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{1.234567f + 1}).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{1.234567f + 2}).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{1.234567f + 1,1.234567f + 2}).findAll();
  assertEquals(2,resultList.size());
  resultList=realm.where(NoPrimaryKeyNullTypes.class).not().in(targetField,new Float[]{1.234567f + 1,1.234567f + 2}).findAll();
  assertEquals(198,resultList.size());
}","private void doTestForInFloat(String targetField){
  populateNoPrimaryKeyNullTypesRows();
  try {
    realm.where(NoPrimaryKeyNullTypes.class).in(targetField,(Float[])null).findAll();
    fail();
  }
 catch (  IllegalArgumentException ignored) {
  }
  try {
    realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{}).findAll();
    fail();
  }
 catch (  IllegalArgumentException ignored) {
  }
  RealmResults<NoPrimaryKeyNullTypes> resultList=realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{1.2345f + 1}).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{1.2345f + 2}).findAll();
  assertEquals(1,resultList.size());
  resultList=realm.where(NoPrimaryKeyNullTypes.class).in(targetField,new Float[]{1.2345f + 1,1.2345f + 2}).findAll();
  assertEquals(2,resultList.size());
  resultList=realm.where(NoPrimaryKeyNullTypes.class).not().in(targetField,new Float[]{1.2345f + 1,1.2345f + 2}).findAll();
  assertEquals(198,resultList.size());
}",0.9943235572374646
155705,"@Test public void notEqualTo(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).notEqualTo(AllTypes.FIELD_LONG,31).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 1,resultList.size());
  resultList=realm.where(AllTypes.class).notEqualTo(AllTypes.FIELD_FLOAT,11.234567f).equalTo(AllTypes.FIELD_LONG,10).findAll();
  assertEquals(0,resultList.size());
  resultList=realm.where(AllTypes.class).notEqualTo(AllTypes.FIELD_FLOAT,11.234567f).equalTo(AllTypes.FIELD_LONG,1).findAll();
  assertEquals(1,resultList.size());
}","@Test public void notEqualTo(){
  final int TEST_OBJECTS_COUNT=200;
  populateTestRealm(realm,TEST_OBJECTS_COUNT);
  RealmResults<AllTypes> resultList=realm.where(AllTypes.class).notEqualTo(AllTypes.FIELD_LONG,31).findAll();
  assertEquals(TEST_OBJECTS_COUNT - 1,resultList.size());
  resultList=realm.where(AllTypes.class).notEqualTo(AllTypes.FIELD_FLOAT,11.2345f).equalTo(AllTypes.FIELD_LONG,10).findAll();
  assertEquals(0,resultList.size());
  resultList=realm.where(AllTypes.class).notEqualTo(AllTypes.FIELD_FLOAT,11.2345f).equalTo(AllTypes.FIELD_LONG,1).findAll();
  assertEquals(1,resultList.size());
}",0.9967266775777414
155706,"@Test public void in_floatNotNull(){
  doTestForInFloat(NoPrimaryKeyNullTypes.FIELD_FLOAT_NOT_NULL);
  try {
    realm.where(NoPrimaryKeyNullTypes.class).not().in(NoPrimaryKeyNullTypes.FIELD_FLOAT_NOT_NULL,new Float[]{1.234567f + 1,null,1.234567f + 2}).findAll();
    fail();
  }
 catch (  IllegalArgumentException ignored) {
  }
}","@Test public void in_floatNotNull(){
  doTestForInFloat(NoPrimaryKeyNullTypes.FIELD_FLOAT_NOT_NULL);
  try {
    realm.where(NoPrimaryKeyNullTypes.class).not().in(NoPrimaryKeyNullTypes.FIELD_FLOAT_NOT_NULL,new Float[]{1.2345f + 1,null,1.2345f + 2}).findAll();
    fail();
  }
 catch (  IllegalArgumentException ignored) {
  }
}",0.993920972644377
155707,"@Test public void or(){
  populateTestRealm(realm,200);
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,31.234567f);
  RealmResults<AllTypes> resultList=query.or().between(AllTypes.FIELD_LONG,1,20).findAll();
  assertEquals(21,resultList.size());
  resultList=query.or().equalTo(AllTypes.FIELD_STRING,""String_Node_Str"").findAll();
  assertEquals(21,resultList.size());
  resultList=query.or().equalTo(AllTypes.FIELD_STRING,""String_Node_Str"").findAll();
  assertEquals(22,resultList.size());
}","@Test public void or(){
  populateTestRealm(realm,200);
  RealmQuery<AllTypes> query=realm.where(AllTypes.class).equalTo(AllTypes.FIELD_FLOAT,31.2345f);
  RealmResults<AllTypes> resultList=query.or().between(AllTypes.FIELD_LONG,1,20).findAll();
  assertEquals(21,resultList.size());
  resultList=query.or().equalTo(AllTypes.FIELD_STRING,""String_Node_Str"").findAll();
  assertEquals(21,resultList.size());
  resultList=query.or().equalTo(AllTypes.FIELD_STRING,""String_Node_Str"").findAll();
  assertEquals(22,resultList.size());
}",0.998109640831758
155708,"@Test public void in_floatNull(){
  doTestForInFloat(NoPrimaryKeyNullTypes.FIELD_FLOAT_NULL);
  RealmResults<NoPrimaryKeyNullTypes> resultList=realm.where(NoPrimaryKeyNullTypes.class).not().in(NoPrimaryKeyNullTypes.FIELD_FLOAT_NULL,new Float[]{1.234567f + 1,null,1.234567f + 2}).findAll();
  assertEquals(131,resultList.size());
}","@Test public void in_floatNull(){
  doTestForInFloat(NoPrimaryKeyNullTypes.FIELD_FLOAT_NULL);
  RealmResults<NoPrimaryKeyNullTypes> resultList=realm.where(NoPrimaryKeyNullTypes.class).not().in(NoPrimaryKeyNullTypes.FIELD_FLOAT_NULL,new Float[]{1.2345f + 1,null,1.2345f + 2}).findAll();
  assertEquals(131,resultList.size());
}",0.9939024390243902
155709,"public UncheckedRow lastUncheckedRow(){
  return table.getUncheckedRowByPointer(nativeLastRow(nativePtr));
}","public UncheckedRow lastUncheckedRow(){
  long rowPtr=nativeLastRow(nativePtr);
  if (rowPtr != 0) {
    return table.getUncheckedRowByPointer(rowPtr);
  }
  return null;
}",0.6357142857142857
155710,"public UncheckedRow firstUncheckedRow(){
  return table.getUncheckedRowByPointer(nativeFirstRow(nativePtr));
}","public UncheckedRow firstUncheckedRow(){
  long rowPtr=nativeFirstRow(nativePtr);
  if (rowPtr != 0) {
    return table.getUncheckedRowByPointer(rowPtr);
  }
  return null;
}",0.6408450704225352
155711,"private static void initializeSyncedRealm(Realm realm){
  boolean commitChanges=false;
  try {
    realm.beginTransaction();
    long currentVersion=realm.getVersion();
    final boolean unversioned=(currentVersion == UNVERSIONED);
    final RealmProxyMediator mediator=realm.configuration.getSchemaMediator();
    final Set<Class<? extends RealmModel>> modelClasses=mediator.getModelClasses();
    final ArrayList<RealmObjectSchema> realmObjectSchemas=new ArrayList<>();
    final RealmSchema realmSchemaCache=new RealmSchema();
    for (    Class<? extends RealmModel> modelClass : modelClasses) {
      RealmObjectSchema realmObjectSchema=mediator.createRealmObjectSchema(modelClass,realmSchemaCache);
      realmObjectSchemas.add(realmObjectSchema);
    }
    final RealmSchema schema=new RealmSchema(realmObjectSchemas);
    long newVersion=realm.configuration.getSchemaVersion();
    if (realm.sharedRealm.requiresMigration(schema)) {
      if (currentVersion >= newVersion) {
        throw new IllegalArgumentException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",newVersion,currentVersion));
      }
      realm.sharedRealm.updateSchema(schema,newVersion);
      realm.setVersion(newVersion);
      commitChanges=true;
    }
    final Map<Class<? extends RealmModel>,ColumnInfo> columnInfoMap=new HashMap<>(modelClasses.size());
    for (    Class<? extends RealmModel> modelClass : modelClasses) {
      columnInfoMap.put(modelClass,mediator.validateTable(modelClass,realm.sharedRealm,false));
    }
    realm.schema.columnIndices=new ColumnIndices((unversioned) ? newVersion : currentVersion,columnInfoMap);
    if (unversioned) {
      final Transaction transaction=realm.configuration.getInitialDataTransaction();
      if (transaction != null) {
        transaction.execute(realm);
      }
    }
  }
 catch (  Exception e) {
    commitChanges=false;
    throw e;
  }
 finally {
    if (commitChanges) {
      realm.commitTransaction(false);
    }
  }
}","private static void initializeSyncedRealm(Realm realm){
  boolean commitChanges=false;
  try {
    realm.beginTransaction();
    long currentVersion=realm.getVersion();
    final boolean unversioned=(currentVersion == UNVERSIONED);
    final RealmProxyMediator mediator=realm.configuration.getSchemaMediator();
    final Set<Class<? extends RealmModel>> modelClasses=mediator.getModelClasses();
    final ArrayList<RealmObjectSchema> realmObjectSchemas=new ArrayList<>();
    final RealmSchema realmSchemaCache=new RealmSchema();
    for (    Class<? extends RealmModel> modelClass : modelClasses) {
      RealmObjectSchema realmObjectSchema=mediator.createRealmObjectSchema(modelClass,realmSchemaCache);
      realmObjectSchemas.add(realmObjectSchema);
    }
    final RealmSchema schema=new RealmSchema(realmObjectSchemas);
    long newVersion=realm.configuration.getSchemaVersion();
    if (realm.sharedRealm.requiresMigration(schema)) {
      if (currentVersion >= newVersion) {
        throw new IllegalArgumentException(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",newVersion,currentVersion));
      }
      realm.sharedRealm.updateSchema(schema,newVersion);
      realm.setVersion(newVersion);
      commitChanges=true;
    }
    final Map<Class<? extends RealmModel>,ColumnInfo> columnInfoMap=new HashMap<>(modelClasses.size());
    for (    Class<? extends RealmModel> modelClass : modelClasses) {
      columnInfoMap.put(modelClass,mediator.validateTable(modelClass,realm.sharedRealm,false));
    }
    realm.schema.columnIndices=new ColumnIndices((unversioned) ? newVersion : currentVersion,columnInfoMap);
    if (unversioned) {
      final Transaction transaction=realm.configuration.getInitialDataTransaction();
      if (transaction != null) {
        transaction.execute(realm);
      }
    }
  }
 catch (  Exception e) {
    commitChanges=false;
    throw e;
  }
 finally {
    if (commitChanges) {
      realm.commitTransaction(false);
    }
 else {
      realm.cancelTransaction();
    }
  }
}",0.9883403621930044
155712,"@Override public void onChange(PendingRow pendingRow){
  if (frontEnd == null) {
    throw new IllegalStateException(PROXY_NOT_SET_MESSAGE);
  }
  if (frontEnd.get() == null) {
    clearPendingCollection();
    return;
  }
  if (pendingCollection.isValid()) {
    UncheckedRow uncheckedRow=pendingCollection.firstUncheckedRow();
    if (uncheckedRow != null) {
      Row row=returnCheckedRow ? CheckedRow.getFromRow(uncheckedRow) : uncheckedRow;
      frontEnd.get().onQueryFinished(row);
      clearPendingCollection();
    }
  }
 else {
    clearPendingCollection();
  }
}","@Override public void onChange(PendingRow pendingRow){
  if (frontEnd == null) {
    throw new IllegalStateException(PROXY_NOT_SET_MESSAGE);
  }
  if (frontEnd.get() == null) {
    clearPendingCollection();
    return;
  }
  if (pendingCollection == null) {
    return;
  }
  if (pendingCollection.isValid()) {
    UncheckedRow uncheckedRow=pendingCollection.firstUncheckedRow();
    if (uncheckedRow != null) {
      Row row=returnCheckedRow ? CheckedRow.getFromRow(uncheckedRow) : uncheckedRow;
      frontEnd.get().onQueryFinished(row);
      clearPendingCollection();
    }
  }
 else {
    clearPendingCollection();
  }
}",0.957464553794829
155713,"public PendingRow(SharedRealm sharedRealm,TableQuery query,SortDescriptor sortDescriptor,final boolean returnCheckedRow){
  pendingCollection=new Collection(sharedRealm,query,sortDescriptor);
  listener=new RealmChangeListener<PendingRow>(){
    @Override public void onChange(    PendingRow pendingRow){
      if (frontEnd == null) {
        throw new IllegalStateException(PROXY_NOT_SET_MESSAGE);
      }
      if (frontEnd.get() == null) {
        clearPendingCollection();
        return;
      }
      if (pendingCollection.isValid()) {
        UncheckedRow uncheckedRow=pendingCollection.firstUncheckedRow();
        if (uncheckedRow != null) {
          Row row=returnCheckedRow ? CheckedRow.getFromRow(uncheckedRow) : uncheckedRow;
          frontEnd.get().onQueryFinished(row);
          clearPendingCollection();
        }
      }
 else {
        clearPendingCollection();
      }
    }
  }
;
  pendingCollection.addListener(this,listener);
  this.returnCheckedRow=returnCheckedRow;
}","public PendingRow(SharedRealm sharedRealm,TableQuery query,SortDescriptor sortDescriptor,final boolean returnCheckedRow){
  pendingCollection=new Collection(sharedRealm,query,sortDescriptor);
  listener=new RealmChangeListener<PendingRow>(){
    @Override public void onChange(    PendingRow pendingRow){
      if (frontEnd == null) {
        throw new IllegalStateException(PROXY_NOT_SET_MESSAGE);
      }
      if (frontEnd.get() == null) {
        clearPendingCollection();
        return;
      }
      if (pendingCollection == null) {
        return;
      }
      if (pendingCollection.isValid()) {
        UncheckedRow uncheckedRow=pendingCollection.firstUncheckedRow();
        if (uncheckedRow != null) {
          Row row=returnCheckedRow ? CheckedRow.getFromRow(uncheckedRow) : uncheckedRow;
          frontEnd.get().onQueryFinished(row);
          clearPendingCollection();
        }
      }
 else {
        clearPendingCollection();
      }
    }
  }
;
  pendingCollection.addListener(this,listener);
  this.returnCheckedRow=returnCheckedRow;
}",0.969283276450512
155714,"@Override protected void onStart(){
  super.onStart();
  user=User.currentUser();
  if (user != null) {
    SyncConfiguration config=new SyncConfiguration.Builder(user,REALM_URL).initialData(new Realm.Transaction(){
      @Override public void execute(      Realm realm){
        realm.createObject(CRDTCounter.class,1);
      }
    }
).build();
    realm=Realm.getInstance(config);
    counter=realm.where(CounterOperation.class).findAllAsync();
    counter.addChangeListener(new RealmChangeListener<RealmResults<CounterOperation>>(){
      @Override public void onChange(      RealmResults<CounterOperation> result){
        Number sum=result.sum(""String_Node_Str"");
        if (sum != null) {
          counterView.setText(Long.toString(sum.longValue()));
        }
 else {
          counterView.setText(""String_Node_Str"");
        }
      }
    }
);
    counterView.setText(""String_Node_Str"");
  }
}","@Override protected void onStart(){
  super.onStart();
  user=User.currentUser();
  if (user != null) {
    SyncConfiguration config=new SyncConfiguration.Builder(user,REALM_URL).initialData(new Realm.Transaction(){
      @Override public void execute(      Realm realm){
        if (realm.isEmpty()) {
          realm.createObject(CRDTCounter.class,1);
        }
      }
    }
).build();
    realm=Realm.getInstance(config);
    counter=realm.where(CounterOperation.class).findAllAsync();
    counter.addChangeListener(new RealmChangeListener<RealmResults<CounterOperation>>(){
      @Override public void onChange(      RealmResults<CounterOperation> result){
        Number sum=result.sum(""String_Node_Str"");
        if (sum != null) {
          counterView.setText(Long.toString(sum.longValue()));
        }
 else {
          counterView.setText(""String_Node_Str"");
        }
      }
    }
);
    counterView.setText(""String_Node_Str"");
  }
}",0.9767441860465116
155715,"/** 
 * Initializes the Realm library and creates a default configuration that is ready to use. It is required to call this method before interacting with any other of the Realm API's. A good place is in an   {@link android.app.Application} subclass:<pre> {@code}public class MyApplication extends Application  \@Override public void onCreate() { super.onCreate(); Realm.init(this); } } } </pre> Remember to register it in the   {@code AndroidManifest.xml} file:<pre> {@code <?xml version=""1.0"" encoding=""utf-8""?> <manifest xmlns:android=""http://schemas.android.com/apk/res/android"" package=""io.realm.example""> <application android:name="".MyApplication""> // ... </application> </manifest>}</pre>
 * @param context the Application Context.
 * @throws IllegalArgumentException if a {@code null} context is provided.
 * @see #getDefaultInstance()
 */
public static synchronized void init(Context context){
  if (BaseRealm.applicationContext == null) {
    if (context == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    RealmCore.loadLibrary(context);
    RealmLog.add(BuildConfig.DEBUG ? new AndroidLogger(Log.DEBUG) : new AndroidLogger(Log.WARN));
    defaultConfiguration=new RealmConfiguration.Builder(context).build();
    ObjectServerFacade.getSyncFacadeIfPossible().init(context);
    BaseRealm.applicationContext=context.getApplicationContext();
  }
}","/** 
 * Initializes the Realm library and creates a default configuration that is ready to use. It is required to call this method before interacting with any other of the Realm API's. A good place is in an   {@link android.app.Application} subclass:<pre> {@code}public class MyApplication extends Application  \@Override public void onCreate() { super.onCreate(); Realm.init(this); } } } </pre> Remember to register it in the   {@code AndroidManifest.xml} file:<pre> {@code <?xml version=""1.0"" encoding=""utf-8""?> <manifest xmlns:android=""http://schemas.android.com/apk/res/android"" package=""io.realm.example""> <application android:name="".MyApplication""> // ... </application> </manifest>}</pre>
 * @param context the Application Context.
 * @throws IllegalArgumentException if a {@code null} context is provided.
 * @see #getDefaultInstance()
 */
public static synchronized void init(Context context){
  if (BaseRealm.applicationContext == null) {
    if (context == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    RealmCore.loadLibrary(context);
    RealmLog.add(io.realm.BuildConfig.DEBUG ? new AndroidLogger(Log.DEBUG) : new AndroidLogger(Log.WARN));
    defaultConfiguration=new RealmConfiguration.Builder(context).build();
    ObjectServerFacade.getSyncFacadeIfPossible().init(context);
    BaseRealm.applicationContext=context.getApplicationContext();
  }
}",0.9967637540453076
155716,"/** 
 * Returns the last user that has logged in and who is still valid. A user is invalidated when he/she logs out or the user's access token expire.
 * @return last {@link User} that has logged in and who is still valid. {@code null} if no current user or user hasbeen invalidated.
 */
public static User currentUser(){
  User user=SyncManager.getUserStore().get(UserStore.CURRENT_USER_KEY);
  if (user != null && user.isValid()) {
    user.getSyncUser().scheduleRefresh();
    return user;
  }
  return null;
}","/** 
 * Returns the last user that has logged in and who is still valid. A user is invalidated when he/she logs out or the user's access token expire.
 * @return last {@link User} that has logged in and who is still valid. {@code null} if no current user or user hasbeen invalidated.
 */
public static User currentUser(){
  User user=SyncManager.getUserStore().get(UserStore.CURRENT_USER_KEY);
  if (user != null && user.isValid()) {
    return user;
  }
  return null;
}",0.9044715447154472
155717,"/** 
 * Authenticate the given credentials on the specified Realm Authentication Server.
 */
@Override public AuthenticateResponse loginUser(Credentials credentials,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.fromCredentials(credentials).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.OTHER_ERROR,Util.getStackTrace(e)));
  }
}","/** 
 * Authenticate the given credentials on the specified Realm Authentication Server.
 */
@Override public AuthenticateResponse loginUser(Credentials credentials,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.userLogin(credentials).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.OTHER_ERROR,Util.getStackTrace(e)));
  }
}",0.9745762711864406
155718,"@Override public AuthenticateResponse refreshUser(Token userToken,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.fromRefreshToken(userToken).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN,e));
  }
}","@Override public AuthenticateResponse refreshUser(Token userToken,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.userRefresh(userToken).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN,e));
  }
}",0.9670014347202296
155719,"@Override public AuthenticateResponse loginToRealm(Token refreshToken,URI serverUrl,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.fromRefreshToken(refreshToken).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN,e));
  }
}","@Override public AuthenticateResponse loginToRealm(Token refreshToken,URI serverUrl,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.realmLogin(refreshToken,serverUrl).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN,e));
  }
}",0.9438502673796793
155720,"private synchronized void authenticate(final SyncSession session){
  session.authenticateRealm(new Runnable(){
    @Override public void run(){
      gotoNextState(SessionState.BINDING);
    }
  }
,new Session.ErrorHandler(){
    @Override public void onError(    Session s,    ObjectServerError error){
      session.onError(error);
    }
  }
);
}","private synchronized void authenticate(final SyncSession session){
  session.authenticateRealm(new Runnable(){
    @Override public void run(){
      RealmLog.debug(""String_Node_Str"",session.getConfiguration().getPath());
      gotoNextState(SessionState.BINDING);
    }
  }
,new Session.ErrorHandler(){
    @Override public void onError(    Session s,    ObjectServerError error){
      RealmLog.debug(""String_Node_Str"",session.getConfiguration().getPath(),error.getErrorCode());
      session.onError(error);
    }
  }
);
}",0.7605956471935853
155721,"@Override public void onError(Session s,ObjectServerError error){
  session.onError(error);
}","@Override public void onError(Session s,ObjectServerError error){
  RealmLog.debug(""String_Node_Str"",session.getConfiguration().getPath(),error.getErrorCode());
  session.onError(error);
}",0.6619217081850534
155722,"@Override public void run(){
  gotoNextState(SessionState.BINDING);
}","@Override public void run(){
  RealmLog.debug(""String_Node_Str"",session.getConfiguration().getPath());
  gotoNextState(SessionState.BINDING);
}",0.6509433962264151
155723,"public void clearTokens(){
  realms.clear();
  refreshToken=null;
  if (refreshTask != null) {
    refreshTask.cancel();
    refreshTask=null;
  }
}","public void clearTokens(){
  realms.clear();
  refreshToken=null;
}",0.6232558139534884
155724,"public void setRefreshToken(final Token refreshToken){
  this.refreshToken=refreshToken;
  scheduleRefresh();
}","public void setRefreshToken(final Token refreshToken){
  this.refreshToken=refreshToken;
}",0.8955223880597015
155725,"/** 
 * Logs in the user to the Realm Object Server. This is done synchronously, so calling this method on the Android UI thread will always crash. A logged in user is required to be able to create a   {@link SyncConfiguration}.
 * @param credentials credentials to use.
 * @param authenticationUrl server that can authenticate against.
 * @throws ObjectServerError if the login failed.
 * @throws IllegalArgumentException if the URL is malformed.
 */
public static User login(final Credentials credentials,final String authenticationUrl) throws ObjectServerError {
  final URL authUrl;
  try {
    authUrl=new URL(authenticationUrl);
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + authenticationUrl + ""String_Node_Str"",e);
  }
  final AuthenticationServer server=SyncManager.getAuthServer();
  try {
    AuthenticateResponse result=server.loginUser(credentials,authUrl);
    if (result.isValid()) {
      SyncUser syncUser=new SyncUser(result.getRefreshToken(),authUrl);
      User user=new User(syncUser);
      RealmLog.info(""String_Node_Str"",user);
      SyncManager.getUserStore().put(UserStore.CURRENT_USER_KEY,user);
      SyncManager.notifyUserLoggedIn(user);
      return user;
    }
 else {
      RealmLog.info(""String_Node_Str"",result.getError());
      throw result.getError();
    }
  }
 catch (  IOException e) {
    throw new ObjectServerError(ErrorCode.IO_EXCEPTION,e);
  }
catch (  Throwable e) {
    throw new ObjectServerError(ErrorCode.UNKNOWN,e);
  }
}","/** 
 * Logs in the user to the Realm Object Server. This is done synchronously, so calling this method on the Android UI thread will always crash. A logged in user is required to be able to create a   {@link SyncConfiguration}.
 * @param credentials credentials to use.
 * @param authenticationUrl server that can authenticate against.
 * @throws ObjectServerError if the login failed.
 * @throws IllegalArgumentException if the URL is malformed.
 */
public static User login(final Credentials credentials,final String authenticationUrl) throws ObjectServerError {
  final URL authUrl;
  try {
    authUrl=new URL(authenticationUrl);
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + authenticationUrl + ""String_Node_Str"",e);
  }
  final AuthenticationServer server=SyncManager.getAuthServer();
  ObjectServerError error;
  try {
    AuthenticateResponse result=server.loginUser(credentials,authUrl);
    if (result.isValid()) {
      SyncUser syncUser=new SyncUser(result.getRefreshToken(),authUrl);
      User user=new User(syncUser);
      RealmLog.info(""String_Node_Str"",user);
      SyncManager.getUserStore().put(UserStore.CURRENT_USER_KEY,user);
      SyncManager.notifyUserLoggedIn(user);
      return user;
    }
 else {
      RealmLog.info(""String_Node_Str"",result.getError());
      error=result.getError();
    }
  }
 catch (  Throwable e) {
    throw new ObjectServerError(ErrorCode.UNKNOWN,e);
  }
  throw error;
}",0.9524126455906822
155726,"/** 
 * Authenticate the given credentials on the specified Realm Authentication Server.
 */
@Override public AuthenticateResponse loginUser(Credentials credentials,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.userLogin(credentials).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.OTHER_ERROR,Util.getStackTrace(e)));
  }
}","/** 
 * Authenticate the given credentials on the specified Realm Authentication Server.
 */
@Override public AuthenticateResponse loginUser(Credentials credentials,URL authenticationUrl){
  try {
    String requestBody=AuthenticateRequest.userLogin(credentials).toJson();
    return authenticate(authenticationUrl,requestBody);
  }
 catch (  Exception e) {
    return AuthenticateResponse.from(new ObjectServerError(ErrorCode.UNKNOWN,e));
  }
}",0.9584245076586432
155727,"/** 
 * Login the user on the Realm Object Server
 * @param credentials credentials to use
 * @param authenticationUrl URL to authenticateUser against
 * @param callback callback when login has completed or failed. This callback will always happen on the UI thread.
 * @throws IllegalArgumentException
 */
public static RealmAsyncTask loginAsync(final Credentials credentials,final String authenticationUrl,final Callback callback){
  final URL authUrl;
  try {
    authUrl=new URL(authenticationUrl);
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + authenticationUrl + ""String_Node_Str"",e);
  }
  if (Looper.myLooper() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final Handler handler=new Handler(Looper.myLooper());
  final AuthenticationServer server=SyncManager.getAuthServer();
  Future<?> authenticateRequest=SyncManager.NETWORK_POOL_EXECUTOR.submit(new Runnable(){
    @Override public void run(){
      try {
        AuthenticateResponse result=server.authenticateUser(credentials,authUrl,credentials.shouldCreateUser());
        if (result.isValid()) {
          User user=new User(result.getRefreshToken().identity(),result.getRefreshToken(),authUrl);
          postSuccess(user);
        }
 else {
          postError(result.getError());
        }
      }
 catch (      IOException e) {
        postError(new ObjectServerError(ErrorCode.IO_EXCEPTION,e));
      }
    }
    private void postError(    final ObjectServerError error){
      RealmLog.info(""String_Node_Str"",error);
      if (callback != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            callback.onError(error);
          }
        }
);
      }
    }
    private void postSuccess(    final User user){
      RealmLog.info(""String_Node_Str"",user);
      if (callback != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            callback.onSuccess(user);
          }
        }
);
      }
    }
  }
);
  authenticateTask=new RealmAsyncTask(authenticateRequest,SyncManager.NETWORK_POOL_EXECUTOR);
  return authenticateTask;
}","/** 
 * Login the user on the Realm Object Server
 * @param credentials credentials to use
 * @param authenticationUrl URL to authenticateUser against
 * @param callback callback when login has completed or failed. This callback will always happen on the UI thread.
 * @throws IllegalArgumentException
 */
public static RealmAsyncTask loginAsync(final Credentials credentials,final String authenticationUrl,final Callback callback){
  final URL authUrl;
  try {
    authUrl=new URL(authenticationUrl);
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + authenticationUrl + ""String_Node_Str"",e);
  }
  if (Looper.myLooper() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  final Handler handler=new Handler(Looper.myLooper());
  final AuthenticationServer server=SyncManager.getAuthServer();
  Future<?> authenticateRequest=SyncManager.NETWORK_POOL_EXECUTOR.submit(new Runnable(){
    @Override public void run(){
      try {
        AuthenticateResponse result=server.authenticateUser(credentials,authUrl,credentials.shouldCreateUser());
        if (result.isValid()) {
          User user=new User(result.getRefreshToken().identity(),result.getRefreshToken(),authUrl);
          postSuccess(user);
        }
 else {
          postError(result.getError());
        }
      }
 catch (      IOException e) {
        postError(new ObjectServerError(ErrorCode.IO_EXCEPTION,e));
      }
catch (      Throwable e) {
        postError(new ObjectServerError(ErrorCode.UNKNOWN,e));
      }
    }
    private void postError(    final ObjectServerError error){
      RealmLog.info(""String_Node_Str"",error);
      if (callback != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            callback.onError(error);
          }
        }
);
      }
    }
    private void postSuccess(    final User user){
      RealmLog.info(""String_Node_Str"",user);
      if (callback != null) {
        handler.post(new Runnable(){
          @Override public void run(){
            callback.onSuccess(user);
          }
        }
);
      }
    }
  }
);
  authenticateTask=new RealmAsyncTask(authenticateRequest,SyncManager.NETWORK_POOL_EXECUTOR);
  return authenticateTask;
}",0.9775967413441956
155728,"/** 
 * Helper method for creating the proper Authenticate response. This method will set the appropriate error depending on any HTTP response codes or IO errors.
 */
public static AuthenticateResponse createFrom(Response response){
  String serverResponse;
  try {
    serverResponse=response.body().string();
  }
 catch (  IOException e) {
    ObjectServerError error=new ObjectServerError(ErrorCode.IO_EXCEPTION,e);
    return new AuthenticateResponse(error);
  }
  RealmLog.debug(""String_Node_Str"" + serverResponse);
  if (response.code() != 200) {
    try {
      JSONObject obj=new JSONObject(serverResponse);
      String type=obj.getString(""String_Node_Str"");
      String hint=obj.optString(""String_Node_Str"",null);
      String title=obj.optString(""String_Node_Str"",null);
      ErrorCode errorCode=ErrorCode.fromInt(obj.optInt(""String_Node_Str"",-1));
      ObjectServerError error=new ObjectServerError(errorCode,title,hint,type);
      return new AuthenticateResponse(error);
    }
 catch (    JSONException e) {
      ObjectServerError error=new ObjectServerError(ErrorCode.JSON_EXCEPTION,""String_Node_Str"" + response.code() + ""String_Node_Str"",e);
      return new AuthenticateResponse(error);
    }
  }
 else {
    return new AuthenticateResponse(serverResponse);
  }
}","/** 
 * Helper method for creating the proper Authenticate response. This method will set the appropriate error depending on any HTTP response codes or IO errors.
 */
static AuthenticateResponse createFrom(Response response){
  String serverResponse;
  try {
    serverResponse=response.body().string();
  }
 catch (  IOException e) {
    ObjectServerError error=new ObjectServerError(ErrorCode.IO_EXCEPTION,e);
    return new AuthenticateResponse(error);
  }
  RealmLog.debug(""String_Node_Str"" + serverResponse);
  if (response.code() != 200) {
    try {
      JSONObject obj=new JSONObject(serverResponse);
      String type=obj.getString(""String_Node_Str"");
      String hint=obj.optString(""String_Node_Str"",null);
      String title=obj.optString(""String_Node_Str"",null);
      ErrorCode errorCode=ErrorCode.fromInt(obj.optInt(""String_Node_Str"",-1));
      ObjectServerError error=new ObjectServerError(errorCode,title,hint,type);
      return new AuthenticateResponse(error);
    }
 catch (    JSONException e) {
      ObjectServerError error=new ObjectServerError(ErrorCode.JSON_EXCEPTION,""String_Node_Str"" + response.code() + ""String_Node_Str"",e);
      return new AuthenticateResponse(error);
    }
  }
 else {
    return new AuthenticateResponse(serverResponse);
  }
}",0.9972666926981648
155729,"/** 
 * Parse a valid (200) server response. It might still result in a unsuccessful authentication attempt, if the JSON response could not be parsed correctly.
 */
public AuthenticateResponse(String serverResponse){
  ObjectServerError error;
  String identifier;
  String path;
  String appId;
  Token accessToken;
  Token refreshToken;
  try {
    JSONObject obj=new JSONObject(serverResponse);
    accessToken=obj.has(""String_Node_Str"") ? Token.from(obj.getJSONObject(""String_Node_Str"")) : null;
    refreshToken=obj.has(""String_Node_Str"") ? Token.from(obj.getJSONObject(""String_Node_Str"")) : null;
    error=null;
  }
 catch (  JSONException ex) {
    accessToken=null;
    refreshToken=null;
    error=new ObjectServerError(ErrorCode.JSON_EXCEPTION,ex);
  }
  this.accessToken=accessToken;
  this.refreshToken=refreshToken;
  this.error=error;
}","/** 
 * Parses a valid (200) server response. It might still result in a unsuccessful authentication attempt, if the JSON response could not be parsed correctly.
 */
private AuthenticateResponse(String serverResponse){
  ObjectServerError error;
  Token accessToken;
  Token refreshToken;
  try {
    JSONObject obj=new JSONObject(serverResponse);
    accessToken=obj.has(JSON_FIELD_ACCESS_TOKEN) ? Token.from(obj.getJSONObject(JSON_FIELD_ACCESS_TOKEN)) : null;
    refreshToken=obj.has(JSON_FIELD_REFRESH_TOKEN) ? Token.from(obj.getJSONObject(JSON_FIELD_REFRESH_TOKEN)) : null;
    error=null;
  }
 catch (  JSONException ex) {
    accessToken=null;
    refreshToken=null;
    error=new ObjectServerError(ErrorCode.JSON_EXCEPTION,ex);
  }
  this.accessToken=accessToken;
  this.refreshToken=refreshToken;
  this.error=error;
}",0.601907032181168
155730,"private void basicCRUD(Realm realm){
  showStatus(""String_Node_Str"");
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      Person person=realm.createObject(Person.class);
      person.setId(1);
      person.setName(""String_Node_Str"");
      person.setAge(14);
    }
  }
);
  final Person person=realm.where(Person.class).findFirst();
  showStatus(person.getName() + ""String_Node_Str"" + person.getAge());
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      person.setName(""String_Node_Str"");
      person.setAge(99);
      showStatus(person.getName() + ""String_Node_Str"" + person.getAge());
      realm.commitTransaction();
    }
  }
);
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.delete(Person.class);
    }
  }
);
}","private void basicCRUD(Realm realm){
  showStatus(""String_Node_Str"");
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      Person person=realm.createObject(Person.class);
      person.setId(1);
      person.setName(""String_Node_Str"");
      person.setAge(14);
    }
  }
);
  final Person person=realm.where(Person.class).findFirst();
  showStatus(person.getName() + ""String_Node_Str"" + person.getAge());
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      person.setName(""String_Node_Str"");
      person.setAge(99);
      showStatus(person.getName() + ""String_Node_Str"" + person.getAge());
    }
  }
);
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      realm.delete(Person.class);
    }
  }
);
}",0.9813874788494078
155731,"/** 
 * Initialize Timer logging
 */
protected abstract void initializeTimber();","/** 
 * Initialize Timber logging
 */
protected abstract void initializeTimber();",0.9937888198757764
155732,"/** 
 * Updates a story.
 * @param storyId story to update
 * @param read {@code true} if the story has been read, {@code false} otherwise.
 */
@UiThread public void updateStoryReadState(final String storyId,final boolean read){
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      NYTimesStory persistedStory=realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL,storyId).findFirst();
      if (persistedStory != null) {
        persistedStory.setRead(read);
      }
 else {
        Timber.e(""String_Node_Str"" + storyId);
      }
    }
  }
,new DefaultTransactionCallback());
}","/** 
 * Updates a story.
 * @param storyId story to update
 * @param read {@code true} if the story has been read, {@code false} otherwise.
 */
@UiThread public void updateStoryReadState(final String storyId,final boolean read){
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      NYTimesStory persistedStory=realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL,storyId).findFirst();
      if (persistedStory != null) {
        persistedStory.setRead(read);
      }
 else {
        Timber.e(""String_Node_Str"" + storyId);
      }
    }
  }
,new Realm.Transaction.OnError(){
    @Override public void onError(    Throwable throwable){
      Timber.e(throwable,""String_Node_Str"");
    }
  }
);
}",0.8718682891911238
155733,"private void processAndAddData(final Realm realm,final String sectionKey,final List<NYTimesStory> stories){
  if (stories.isEmpty())   return;
  realm.executeTransaction(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      for (      NYTimesStory story : stories) {
        Date parsedPublishedDate=inputDateFormat.parse(story.getPublishedDate(),new ParsePosition(0));
        story.setSortTimeStamp(parsedPublishedDate.getTime());
        story.setPublishedDate(outputDateFormat.format(parsedPublishedDate));
        NYTimesStory persistedStory=realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL,story.getUrl()).findFirst();
        if (persistedStory != null) {
          story.setRead(persistedStory.isRead());
        }
        if (persistedStory == null || !persistedStory.getUpdatedDate().equals(story.getUpdatedDate())) {
          story.setApiSection(sectionKey);
          realm.copyToRealmOrUpdate(story);
        }
      }
    }
  }
,new DefaultTransactionCallback());
}","private void processAndAddData(final Realm realm,final String sectionKey,final List<NYTimesStory> stories){
  if (stories.isEmpty())   return;
  realm.executeTransactionAsync(new Realm.Transaction(){
    @Override public void execute(    Realm realm){
      for (      NYTimesStory story : stories) {
        Date parsedPublishedDate=inputDateFormat.parse(story.getPublishedDate(),new ParsePosition(0));
        story.setSortTimeStamp(parsedPublishedDate.getTime());
        story.setPublishedDate(outputDateFormat.format(parsedPublishedDate));
        NYTimesStory persistedStory=realm.where(NYTimesStory.class).equalTo(NYTimesStory.URL,story.getUrl()).findFirst();
        if (persistedStory != null) {
          story.setRead(persistedStory.isRead());
        }
        if (persistedStory == null || !persistedStory.getUpdatedDate().equals(story.getUpdatedDate())) {
          story.setApiSection(sectionKey);
          realm.copyToRealmOrUpdate(story);
        }
      }
    }
  }
,new Realm.Transaction.OnError(){
    @Override public void onError(    Throwable throwable){
      Timber.e(throwable,""String_Node_Str"");
    }
  }
);
}",0.9187935034802784
155734,"@Override public void onResume(){
  Subscription detailsSubscription=model.getStory(storyId).subscribe(new Action1<NYTimesStory>(){
    @Override public void call(    NYTimesStory story){
      view.hideLoader();
      view.showStory(story);
      view.setRead(story.isRead());
    }
  }
);
  Subscription timerSubscription=Observable.timer(2,TimeUnit.SECONDS).subscribe(new Action1<Long>(){
    @Override public void call(    Long aLong){
      model.markAsRead(storyId,true);
    }
  }
);
  subscriptions=new CompositeSubscription(detailsSubscription,timerSubscription);
}","@Override public void onResume(){
  Subscription detailsSubscription=model.getStory(storyId).subscribe(new Action1<NYTimesStory>(){
    @Override public void call(    NYTimesStory story){
      view.hideLoader();
      view.showStory(story);
      view.setRead(story.isRead());
    }
  }
);
  Subscription timerSubscription=Observable.timer(2,TimeUnit.SECONDS).observeOn(AndroidSchedulers.mainThread()).subscribe(new Action1<Long>(){
    @Override public void call(    Long aLong){
      model.markAsRead(storyId,true);
    }
  }
);
  subscriptions=new CompositeSubscription(detailsSubscription,timerSubscription);
}",0.9647058823529412
155735,"public AnnotationIndexTypes getFieldObject(){
  return this.fieldObject;
}","public AnnotationIndexTypes getFieldObject(){
  return realmGetter$fieldObject();
}",0.89171974522293
155736,"public void setFieldObject(AnnotationIndexTypes object){
  this.fieldObject=object;
}","public void setFieldObject(AnnotationIndexTypes fieldObject){
  realmSetter$fieldObject(fieldObject);
}",0.7127659574468085
155737,"@Test public void testRemoveAllChangeListenersThrowExceptionOnNonLooperThread(){
  final CountDownLatch signalTestFinished=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Realm realm=Realm.getInstance(testConfig);
      try {
        realm.removeAllChangeListeners();
        fail(""String_Node_Str"");
      }
 catch (      IllegalStateException e) {
        signalTestFinished.countDown();
      }
 finally {
        realm.close();
      }
    }
  }
);
  thread.start();
  try {
    TestHelper.awaitOrFail(signalTestFinished);
  }
  finally {
    thread.interrupt();
  }
}","@Test public void testRemoveAllChangeListenersThrowExceptionOnNonLooperThread(){
  final CountDownLatch signalTestFinished=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Realm realm=Realm.getInstance(testConfig);
      try {
        realm.removeAllChangeListeners();
        fail(""String_Node_Str"");
      }
 catch (      IllegalStateException ignored) {
      }
 finally {
        realm.close();
        signalTestFinished.countDown();
      }
    }
  }
);
  thread.start();
  try {
    TestHelper.awaitOrFail(signalTestFinished);
  }
  finally {
    thread.interrupt();
  }
}",0.8908227848101266
155738,"@Test public void testRemoveChangeListenerThrowExceptionOnNonLooperThread(){
  final CountDownLatch signalTestFinished=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Realm realm=Realm.getInstance(testConfig);
      try {
        realm.removeChangeListener(new RealmChangeListener(){
          @Override public void onChange(){
          }
        }
);
        fail(""String_Node_Str"");
      }
 catch (      IllegalStateException e) {
        signalTestFinished.countDown();
      }
 finally {
        realm.close();
      }
    }
  }
);
  thread.start();
  try {
    TestHelper.awaitOrFail(signalTestFinished);
  }
  finally {
    thread.interrupt();
  }
}","@Test public void testRemoveChangeListenerThrowExceptionOnNonLooperThread(){
  final CountDownLatch signalTestFinished=new CountDownLatch(1);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      Realm realm=Realm.getInstance(testConfig);
      try {
        realm.removeChangeListener(new RealmChangeListener(){
          @Override public void onChange(){
          }
        }
);
        fail(""String_Node_Str"");
      }
 catch (      IllegalStateException ignored) {
      }
 finally {
        realm.close();
        signalTestFinished.countDown();
      }
    }
  }
);
  thread.start();
  try {
    TestHelper.awaitOrFail(signalTestFinished);
  }
  finally {
    thread.interrupt();
  }
}",0.9037656903765692
155739,"/** 
 * All changes since   {@link io.realm.Realm#beginTransaction()} are persisted to disk and the Realm reverts back tobeing read-only. An event is sent to notify all other Realm instances that a change has occurred. When the event is received, the other Realms will get their objects and  {@link io.realm.RealmResults} updated to reflect thechanges from this commit.
 */
public void commitTransaction(){
  checkIfValid();
  sharedGroupManager.commitAndContinueAsRead();
  for (  Map.Entry<Handler,String> handlerIntegerEntry : handlers.entrySet()) {
    Handler handler=handlerIntegerEntry.getKey();
    String realmPath=handlerIntegerEntry.getValue();
    if (handler.equals(this.handler)) {
      handlerController.notifyGlobalListeners();
      handlerController.notifyTypeBasedListeners();
      if (handlerController.threadContainsAsyncEmptyRealmObject()) {
        handlerController.updateAsyncEmptyRealmObject();
      }
      continue;
    }
    if (realmPath.equals(configuration.getPath()) && !handler.hasMessages(HandlerController.REALM_CHANGED) && handler.getLooper().getThread().isAlive()&& !handler.sendEmptyMessage(HandlerController.REALM_CHANGED)) {
      RealmLog.w(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","/** 
 * Commits transaction, runs the given runnable and then sends notifications. The runnable is useful to meet some timing conditions like the async transaction. In async transaction, the background Realm has to be closed before other threads see the changes to majoyly avoid the flaky tests.
 * @param runAfterCommit runnable will run after transaction committed but before notification sent.
 */
void commitTransaction(Runnable runAfterCommit){
  checkIfValid();
  sharedGroupManager.commitAndContinueAsRead();
  if (runAfterCommit != null) {
    runAfterCommit.run();
  }
  for (  Map.Entry<Handler,String> handlerIntegerEntry : handlers.entrySet()) {
    Handler handler=handlerIntegerEntry.getKey();
    String realmPath=handlerIntegerEntry.getValue();
    if (handler.equals(this.handler)) {
      handlerController.notifyGlobalListeners();
      handlerController.notifyTypeBasedListeners();
      if (handlerController.threadContainsAsyncEmptyRealmObject()) {
        handlerController.updateAsyncEmptyRealmObject();
      }
      continue;
    }
    if (realmPath.equals(configuration.getPath()) && !handler.hasMessages(HandlerController.REALM_CHANGED) && handler.getLooper().getThread().isAlive()&& !handler.sendEmptyMessage(HandlerController.REALM_CHANGED)) {
      RealmLog.w(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.6638231872818922
155740,"@Override public void run(){
  callback.onError(e);
}","@Override public void run(){
  callback.onError(exception[0]);
}",0.905982905982906
155741,"/** 
 * Similar to   {@link #executeTransaction(Transaction)} but runs asynchronously from a worker thread.
 * @param transaction {@link io.realm.Realm.Transaction} to execute.
 * @param callback optional, to receive the result of this query.
 * @return a {@link RealmAsyncTask} representing a cancellable task.
 * @throws IllegalArgumentException if the {@code transaction} is {@code null}, or if the realm is opened from another thread.
 */
public RealmAsyncTask executeTransaction(final Transaction transaction,final Transaction.Callback callback){
  if (transaction == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (callback != null && handler == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  final RealmConfiguration realmConfiguration=getConfiguration();
  final Future<?> pendingQuery=asyncQueryExecutor.submit(new Runnable(){
    @Override public void run(){
      if (!Thread.currentThread().isInterrupted()) {
        Realm bgRealm=Realm.getInstance(realmConfiguration);
        bgRealm.beginTransaction();
        try {
          transaction.execute(bgRealm);
          if (!Thread.currentThread().isInterrupted()) {
            bgRealm.commitTransaction();
            if (callback != null && handler != null && !Thread.currentThread().isInterrupted() && handler.getLooper().getThread().isAlive()) {
              bgRealm.close();
              handler.post(new Runnable(){
                @Override public void run(){
                  callback.onSuccess();
                }
              }
);
            }
          }
 else {
            if (bgRealm.isInTransaction()) {
              bgRealm.cancelTransaction();
            }
 else {
              RealmLog.w(""String_Node_Str"");
            }
          }
        }
 catch (        final Exception e) {
          if (bgRealm.isInTransaction()) {
            bgRealm.cancelTransaction();
          }
 else {
            RealmLog.w(""String_Node_Str"");
          }
          if (callback != null && handler != null && !Thread.currentThread().isInterrupted() && handler.getLooper().getThread().isAlive()) {
            bgRealm.close();
            handler.post(new Runnable(){
              @Override public void run(){
                callback.onError(e);
              }
            }
);
          }
        }
 finally {
          if (!bgRealm.isClosed()) {
            bgRealm.close();
          }
        }
      }
    }
  }
);
  return new RealmAsyncTask(pendingQuery);
}","/** 
 * Similar to   {@link #executeTransaction(Transaction)} but runs asynchronously from a worker thread.
 * @param transaction {@link io.realm.Realm.Transaction} to execute.
 * @param callback optional, to receive the result of this query.
 * @return a {@link RealmAsyncTask} representing a cancellable task.
 * @throws IllegalArgumentException if the {@code transaction} is {@code null}, or if the realm is opened from another thread.
 */
public RealmAsyncTask executeTransaction(final Transaction transaction,final Transaction.Callback callback){
  if (transaction == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (callback != null && handler == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  final RealmConfiguration realmConfiguration=getConfiguration();
  final Future<?> pendingQuery=asyncQueryExecutor.submit(new Runnable(){
    @Override public void run(){
      if (Thread.currentThread().isInterrupted()) {
        return;
      }
      boolean transactionCommitted=false;
      final Exception[] exception=new Exception[1];
      final Realm bgRealm=Realm.getInstance(realmConfiguration);
      bgRealm.beginTransaction();
      try {
        transaction.execute(bgRealm);
        if (!Thread.currentThread().isInterrupted()) {
          bgRealm.commitTransaction(new Runnable(){
            @Override public void run(){
              bgRealm.close();
            }
          }
);
          transactionCommitted=true;
        }
      }
 catch (      final Exception e) {
        exception[0]=e;
      }
 finally {
        if (!bgRealm.isClosed()) {
          if (bgRealm.isInTransaction()) {
            bgRealm.cancelTransaction();
          }
 else           if (exception[0] != null) {
            RealmLog.w(""String_Node_Str"");
          }
          bgRealm.close();
        }
        if (callback != null && handler != null && !Thread.currentThread().isInterrupted() && handler.getLooper().getThread().isAlive()) {
          if (transactionCommitted) {
            handler.post(new Runnable(){
              @Override public void run(){
                callback.onSuccess();
              }
            }
);
          }
 else           if (exception[0] != null) {
            handler.post(new Runnable(){
              @Override public void run(){
                callback.onError(exception[0]);
              }
            }
);
          }
        }
      }
    }
  }
);
  return new RealmAsyncTask(pendingQuery);
}",0.5762237762237762
155742,"/** 
 * Searches this   {@link RealmResults} for the specified object.
 * @param object the object to search for.
 * @return {@code true} if {@code object} is an element of this {@code RealmResults},  {@code false} otherwise
 */
@Override public boolean contains(Object object){
  boolean contains=false;
  if (isLoaded()) {
    if (object instanceof RealmObject) {
      RealmObject realmObject=(RealmObject)object;
      if (realmObject.row != null && realm.getPath().equals(realmObject.realm.getPath()) && realmObject.row != InvalidRow.INSTANCE) {
        contains=(table.sourceRowIndex(realmObject.row.getIndex()) != TableOrView.NO_MATCH);
      }
    }
  }
  return contains;
}","/** 
 * Searches this   {@link RealmResults} for the specified object.
 * @param object the object to search for.
 * @return {@code true} if {@code object} is an element of this {@code RealmResults},  {@code false} otherwise
 */
@Override public boolean contains(Object object){
  boolean contains=false;
  if (isLoaded() && object instanceof RealmObject) {
    RealmObject realmObject=(RealmObject)object;
    if (realmObject.row != null && realm.getPath().equals(realmObject.realm.getPath()) && realmObject.row != InvalidRow.INSTANCE) {
      contains=(table.sourceRowIndex(realmObject.row.getIndex()) != TableOrView.NO_MATCH);
    }
  }
  return contains;
}",0.9284649776453056
155743,"@Override protected void after(){
  try {
    for (    RealmConfiguration configuration : configurations) {
      Realm.deleteRealm(configuration);
    }
  }
  finally {
    super.after();
  }
}","@Override protected void after(){
  try {
    for (    RealmConfiguration configuration : configurations) {
      Realm.deleteRealm(configuration);
    }
  }
 catch (  IllegalStateException e) {
    if (!unitTestFailed) {
      throw e;
    }
  }
 finally {
    super.after();
  }
}",0.8151260504201681
155744,"@Test @RunTestInLooperThread public void testFindAllAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final RealmResults<AllTypes> realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",0,4).findAllAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertEquals(5,realmResults.size());
      assertTrue(realmResults.get(4).isValid());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertEquals(0,realmResults.size());
  Realm.asyncQueryExecutor.resume();
}","@Test @RunTestInLooperThread public void testFindAllAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final RealmResults<AllTypes> realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",0,4).findAllAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertEquals(5,realmResults.size());
      assertTrue(realmResults.get(4).isValid());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertEquals(0,realmResults.size());
  Realm.asyncQueryExecutor.resume();
  workerThread.keepStrongReference.add(realmResults);
}",0.9639519359145527
155745,"@Test @RunTestInLooperThread public void testCombiningAsyncAndSync(){
  populateTestRealm(workerThread.realm,10);
  Realm.asyncQueryExecutor.pause();
  final RealmResults<AllTypes> allTypesAsync=workerThread.realm.where(AllTypes.class).greaterThan(""String_Node_Str"",5).findAllAsync();
  final RealmResults<AllTypes> allTypesSync=allTypesAsync.where().greaterThan(""String_Node_Str"",3).findAll();
  assertEquals(0,allTypesAsync.size());
  assertEquals(6,allTypesSync.size());
  allTypesAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertEquals(4,allTypesAsync.size());
      assertEquals(6,allTypesSync.size());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  Realm.asyncQueryExecutor.resume();
}","@Test @RunTestInLooperThread public void testCombiningAsyncAndSync(){
  populateTestRealm(workerThread.realm,10);
  Realm.asyncQueryExecutor.pause();
  final RealmResults<AllTypes> allTypesAsync=workerThread.realm.where(AllTypes.class).greaterThan(""String_Node_Str"",5).findAllAsync();
  final RealmResults<AllTypes> allTypesSync=allTypesAsync.where().greaterThan(""String_Node_Str"",3).findAll();
  assertEquals(0,allTypesAsync.size());
  assertEquals(6,allTypesSync.size());
  allTypesAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertEquals(4,allTypesAsync.size());
      assertEquals(6,allTypesSync.size());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  Realm.asyncQueryExecutor.resume();
  workerThread.keepStrongReference.add(allTypesAsync);
}",0.965211891208096
155746,"@Test @RunTestInLooperThread public void testFindFirstAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final AllTypes realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",4,9).findFirstAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertTrue(realmResults.isValid());
      assertEquals(""String_Node_Str"",realmResults.getColumnString());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertFalse(realmResults.isValid());
  try {
    realmResults.setColumnString(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException ignored) {
  }
  Realm.asyncQueryExecutor.resume();
}","@Test @RunTestInLooperThread public void testFindFirstAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final AllTypes realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",4,9).findFirstAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertTrue(realmResults.isValid());
      assertEquals(""String_Node_Str"",realmResults.getColumnString());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertFalse(realmResults.isValid());
  try {
    realmResults.setColumnString(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException ignored) {
  }
  Realm.asyncQueryExecutor.resume();
  workerThread.keepStrongReference.add(realmResults);
}",0.97
155747,"@Test @RunTestInLooperThread public void testFindFirstAsyncWithInitialEmptyRow() throws Throwable {
  final AllTypes firstAsync=workerThread.realm.where(AllTypes.class).findFirstAsync();
  firstAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(firstAsync.load());
      assertTrue(firstAsync.isLoaded());
      assertTrue(firstAsync.isValid());
      assertEquals(0,firstAsync.getColumnLong());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertTrue(firstAsync.load());
  assertTrue(firstAsync.isLoaded());
  assertFalse(firstAsync.isValid());
  populateTestRealm(workerThread.realm,10);
}","@Test @RunTestInLooperThread public void testFindFirstAsyncWithInitialEmptyRow() throws Throwable {
  final AllTypes firstAsync=workerThread.realm.where(AllTypes.class).findFirstAsync();
  firstAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(firstAsync.load());
      assertTrue(firstAsync.isLoaded());
      assertTrue(firstAsync.isValid());
      assertEquals(0,firstAsync.getColumnLong());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertTrue(firstAsync.load());
  assertTrue(firstAsync.isLoaded());
  assertFalse(firstAsync.isValid());
  populateTestRealm(workerThread.realm,10);
  workerThread.keepStrongReference.add(firstAsync);
}",0.962536023054755
155748,"@Test @RunTestInLooperThread public void testFindAllAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final RealmResults<AllTypes> realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",0,4).findAllAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertEquals(5,realmResults.size());
      assertTrue(realmResults.get(4).isValid());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertEquals(0,realmResults.size());
  Realm.asyncQueryExecutor.resume();
}","@Test @RunTestInLooperThread public void testFindAllAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final RealmResults<AllTypes> realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",0,4).findAllAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertEquals(5,realmResults.size());
      assertTrue(realmResults.get(4).isValid());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertEquals(0,realmResults.size());
  Realm.asyncQueryExecutor.resume();
  workerThread.keepStrongReference.add(realmResults);
}",0.9639519359145527
155749,"@Test @RunTestInLooperThread public void testCombiningAsyncAndSync(){
  populateTestRealm(workerThread.realm,10);
  Realm.asyncQueryExecutor.pause();
  final RealmResults<AllTypes> allTypesAsync=workerThread.realm.where(AllTypes.class).greaterThan(""String_Node_Str"",5).findAllAsync();
  final RealmResults<AllTypes> allTypesSync=allTypesAsync.where().greaterThan(""String_Node_Str"",3).findAll();
  assertEquals(0,allTypesAsync.size());
  assertEquals(6,allTypesSync.size());
  allTypesAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertEquals(4,allTypesAsync.size());
      assertEquals(6,allTypesSync.size());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  Realm.asyncQueryExecutor.resume();
}","@Test @RunTestInLooperThread public void testCombiningAsyncAndSync(){
  populateTestRealm(workerThread.realm,10);
  Realm.asyncQueryExecutor.pause();
  final RealmResults<AllTypes> allTypesAsync=workerThread.realm.where(AllTypes.class).greaterThan(""String_Node_Str"",5).findAllAsync();
  final RealmResults<AllTypes> allTypesSync=allTypesAsync.where().greaterThan(""String_Node_Str"",3).findAll();
  assertEquals(0,allTypesAsync.size());
  assertEquals(6,allTypesSync.size());
  allTypesAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertEquals(4,allTypesAsync.size());
      assertEquals(6,allTypesSync.size());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  Realm.asyncQueryExecutor.resume();
  workerThread.keepStrongReference.add(allTypesAsync);
}",0.965211891208096
155750,"@Test @RunTestInLooperThread public void testFindFirstAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final AllTypes realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",4,9).findFirstAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertTrue(realmResults.isValid());
      assertEquals(""String_Node_Str"",realmResults.getColumnString());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertFalse(realmResults.isValid());
  try {
    realmResults.setColumnString(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException ignored) {
  }
  Realm.asyncQueryExecutor.resume();
}","@Test @RunTestInLooperThread public void testFindFirstAsyncWithNotification() throws Throwable {
  Realm.asyncQueryExecutor.pause();
  populateTestRealm(workerThread.realm,10);
  final AllTypes realmResults=workerThread.realm.where(AllTypes.class).between(""String_Node_Str"",4,9).findFirstAsync();
  realmResults.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(realmResults.isLoaded());
      assertTrue(realmResults.isValid());
      assertEquals(""String_Node_Str"",realmResults.getColumnString());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertFalse(realmResults.isLoaded());
  assertFalse(realmResults.isValid());
  try {
    realmResults.setColumnString(""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  IllegalStateException ignored) {
  }
  Realm.asyncQueryExecutor.resume();
  workerThread.keepStrongReference.add(realmResults);
}",0.97
155751,"@Test @RunTestInLooperThread public void testFindFirstAsyncWithInitialEmptyRow() throws Throwable {
  final AllTypes firstAsync=workerThread.realm.where(AllTypes.class).findFirstAsync();
  firstAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(firstAsync.load());
      assertTrue(firstAsync.isLoaded());
      assertTrue(firstAsync.isValid());
      assertEquals(0,firstAsync.getColumnLong());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertTrue(firstAsync.load());
  assertTrue(firstAsync.isLoaded());
  assertFalse(firstAsync.isValid());
  populateTestRealm(workerThread.realm,10);
}","@Test @RunTestInLooperThread public void testFindFirstAsyncWithInitialEmptyRow() throws Throwable {
  final AllTypes firstAsync=workerThread.realm.where(AllTypes.class).findFirstAsync();
  firstAsync.addChangeListener(new RealmChangeListener(){
    @Override public void onChange(){
      assertTrue(firstAsync.load());
      assertTrue(firstAsync.isLoaded());
      assertTrue(firstAsync.isValid());
      assertEquals(0,firstAsync.getColumnLong());
      workerThread.signalTestCompleted.countDown();
    }
  }
);
  assertTrue(firstAsync.load());
  assertTrue(firstAsync.isLoaded());
  assertFalse(firstAsync.isValid());
  populateTestRealm(workerThread.realm,10);
  workerThread.keepStrongReference.add(firstAsync);
}",0.962536023054755
155752,"@Override public void run(){
  try {
    queriesCompleted.await();
    Realm bgRealm=Realm.getInstance(realm.getConfiguration());
    bgRealm.beginTransaction();
    bgRealm.createObject(AllTypes.class);
    bgRealm.createObject(AnnotationIndexTypes.class);
    bgRealm.commitTransaction();
    bgRealm.close();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
}","@Override public void run(){
  Realm instance=Realm.getInstance(configuration);
  instance.beginTransaction();
  Dog dog=instance.createObject(Dog.class);
  dog.setAge(10);
  dog.setName(""String_Node_Str"");
  Owner kiba=instance.createObject(Owner.class);
  kiba.setName(""String_Node_Str"");
  dog.setOwner(kiba);
  instance.commitTransaction();
  wait.countDown();
}",0.2883845126835781
155753,"@Override public void onChange(){
switch (findDistinctInvocation.incrementAndGet()) {
case 1:
{
      queriesCompleted.countDown();
      break;
    }
case 2:
{
    if (batchUpdateCompleted.incrementAndGet() == 4) {
      handler.post(new Runnable(){
        @Override public void run(){
          realm.close();
          signalTestFinished.countDown();
        }
      }
);
    }
    break;
  }
}
}","@Override public void onChange(){
switch (numberOfInvocations.incrementAndGet()) {
case 1:
{
      assertEquals(0,allAsync.size());
      assertTrue(allAsync.isLoaded());
      assertTrue(allAsync.isValid());
      assertTrue(allAsync.isEmpty());
      final CountDownLatch wait=new CountDownLatch(1);
      final RealmConfiguration configuration=realm[0].getConfiguration();
      new Thread(){
        @Override public void run(){
          Realm instance=Realm.getInstance(configuration);
          instance.beginTransaction();
          Dog dog=instance.createObject(Dog.class);
          dog.setAge(10);
          dog.setName(""String_Node_Str"");
          Owner kiba=instance.createObject(Owner.class);
          kiba.setName(""String_Node_Str"");
          dog.setOwner(kiba);
          instance.commitTransaction();
          wait.countDown();
        }
      }
.start();
      try {
        wait.await();
      }
 catch (      InterruptedException e) {
        fail(e.getMessage());
      }
      break;
    }
case 2:
{
    assertEquals(1,realm[0].allObjects(Dog.class).size());
    assertEquals(1,realm[0].allObjects(Owner.class).size());
    assertEquals(1,allAsync.size());
    assertTrue(allAsync.isLoaded());
    assertTrue(allAsync.isValid());
    assertFalse(allAsync.isEmpty());
    assertEquals(1,allAsync.size());
    assertEquals(""String_Node_Str"",allAsync.get(0).getName());
    assertEquals(""String_Node_Str"",allAsync.get(0).getOwner().getName());
    signalCallbackFinished.countDown();
    break;
  }
default :
throw new IllegalStateException(""String_Node_Str"");
}
}",0.1962757926522395
155754,"public void setFieldByte(byte fieldByte){
  this.fieldByte=fieldByte;
}","public void setFieldByte(byte fieldByte){
  realmSetter$fieldByte(fieldByte);
}",0.88
155755,"public float getFieldFloat(){
  return fieldFloat;
}","public float getFieldFloat(){
  return realmGetter$fieldFloat();
}",0.8813559322033898
155756,"public String getFieldString(){
  return fieldString;
}","public String getFieldString(){
  return realmGetter$fieldString();
}",0.8870967741935484
155757,"public void setFieldString(String fieldString){
  this.fieldString=fieldString;
}","public void setFieldString(String fieldString){
  realmSetter$fieldString(fieldString);
}",0.8941176470588236
155758,"public AllJavaTypes getFieldObject(){
  return fieldObject;
}","public AllJavaTypes getFieldObject(){
  return realmGetter$fieldObject();
}",0.8970588235294118
155759,"public void setFieldList(RealmList<AllJavaTypes> columnRealmList){
  this.fieldList=columnRealmList;
}","public void setFieldList(RealmList<AllJavaTypes> fieldList){
  realmSetter$fieldList(fieldList);
}",0.77
155760,"public RealmList<AllJavaTypes> getFieldList(){
  return fieldList;
}","public RealmList<AllJavaTypes> getFieldList(){
  return realmGetter$fieldList();
}",0.9066666666666666
155761,"public void setFieldBinary(byte[] fieldBinary){
  this.fieldBinary=fieldBinary;
}","public void setFieldBinary(byte[] fieldBinary){
  realmSetter$fieldBinary(fieldBinary);
}",0.8941176470588236
155762,"public void setFieldObject(AllJavaTypes columnRealmObject){
  this.fieldObject=columnRealmObject;
}","public void setFieldObject(AllJavaTypes fieldObject){
  realmSetter$fieldObject(fieldObject);
}",0.7628865979381443
155763,"public Date getFieldDate(){
  return fieldDate;
}","public Date getFieldDate(){
  return realmGetter$fieldDate();
}",0.875
155764,"public byte getFieldByte(){
  return fieldByte;
}","public byte getFieldByte(){
  return realmGetter$fieldByte();
}",0.875
155765,"public void setFieldBoolean(boolean fieldBoolean){
  this.fieldBoolean=fieldBoolean;
}","public void setFieldBoolean(boolean fieldBoolean){
  realmSetter$fieldBoolean(fieldBoolean);
}",0.9
155766,"public void setFieldInt(int fieldInt){
  this.fieldInt=fieldInt;
}","public void setFieldInt(int fieldInt){
  realmSetter$fieldInt(fieldInt);
}",0.8714285714285714
155767,"public void setFieldDate(Date fieldDate){
  this.fieldDate=fieldDate;
}","public void setFieldDate(Date fieldDate){
  realmSetter$fieldDate(fieldDate);
}",0.88
155768,"public void setFieldFloat(float fieldFloat){
  this.fieldFloat=fieldFloat;
}","public void setFieldFloat(float fieldFloat){
  realmSetter$fieldFloat(fieldFloat);
}",0.8875
155769,"public double getFieldDouble(){
  return fieldDouble;
}","public double getFieldDouble(){
  return realmGetter$fieldDouble();
}",0.8870967741935484
155770,"public String getFieldIgnored(){
  return fieldIgnored;
}","public String getFieldIgnored(){
  return realmGetter$fieldIgnored();
}",0.890625
155771,"public short getFieldShort(){
  return fieldShort;
}","public short getFieldShort(){
  return realmGetter$fieldShort();
}",0.8813559322033898
155772,"public void setFieldDouble(double fieldDouble){
  this.fieldDouble=fieldDouble;
}","public void setFieldDouble(double fieldDouble){
  realmSetter$fieldDouble(fieldDouble);
}",0.8941176470588236
155773,"public void setFieldIgnored(String fieldIgnored){
  this.fieldIgnored=fieldIgnored;
}","public void setFieldIgnored(String fieldIgnored){
  realmSetter$fieldIgnored(fieldIgnored);
}",0.898876404494382
155774,"public int getFieldInt(){
  return fieldInt;
}","public int getFieldInt(){
  return realmGetter$fieldInt();
}",0.8679245283018868
155775,"public long getFieldLong(){
  return fieldLong;
}","public long getFieldLong(){
  return realmGetter$fieldLong();
}",0.875
155776,"public void setFieldLong(long fieldLong){
  this.fieldLong=fieldLong;
}","public void setFieldLong(long fieldLong){
  realmSetter$fieldLong(fieldLong);
}",0.88
155777,"public byte[] getFieldBinary(){
  return fieldBinary;
}","public byte[] getFieldBinary(){
  return realmGetter$fieldBinary();
}",0.8870967741935484
155778,"public void setFieldShort(short fieldShort){
  this.fieldShort=fieldShort;
}","public void setFieldShort(short fieldShort){
  realmSetter$fieldShort(fieldShort);
}",0.8875
155779,"public Date getColumnDate(){
  return columnDate;
}","public Date getColumnDate(){
  return realmGetter$columnDate();
}",0.8793103448275862
155780,"public float getColumnFloat(){
  return columnFloat;
}","public float getColumnFloat(){
  return realmGetter$columnFloat();
}",0.8852459016393442
155781,"public String getColumnString(){
  return columnString;
}","public String getColumnString(){
  return realmGetter$columnString();
}",0.890625
155782,"public Dog getColumnRealmObject(){
  return columnRealmObject;
}","public Dog getColumnRealmObject(){
  return realmGetter$columnRealmObject();
}",0.9014084507042254
155783,"public void setColumnRealmList(RealmList<Dog> columnRealmList){
  this.columnRealmList=columnRealmList;
}","public void setColumnRealmList(RealmList<Dog> columnRealmList){
  realmSetter$columnRealmList(columnRealmList);
}",0.9174311926605504
155784,"public double getColumnDouble(){
  return columnDouble;
}","public double getColumnDouble(){
  return realmGetter$columnDouble();
}",0.890625
155785,"public void setColumnRealmObject(Dog columnRealmObject){
  this.columnRealmObject=columnRealmObject;
}","public void setColumnRealmObject(Dog columnRealmObject){
  realmSetter$columnRealmObject(columnRealmObject);
}",0.9150943396226416
155786,"public void setColumnString(String columnString){
  this.columnString=columnString;
}","public void setColumnString(String columnString){
  realmSetter$columnString(columnString);
}",0.898876404494382
155787,"public void setColumnDouble(double columnDouble){
  this.columnDouble=columnDouble;
}","public void setColumnDouble(double columnDouble){
  realmSetter$columnDouble(columnDouble);
}",0.898876404494382
155788,"public void setColumnFloat(float columnFloat){
  this.columnFloat=columnFloat;
}","public void setColumnFloat(float columnFloat){
  realmSetter$columnFloat(columnFloat);
}",0.8928571428571429
155789,"public long getColumnLong(){
  return columnLong;
}","public long getColumnLong(){
  return realmGetter$columnLong();
}",0.8793103448275862
155790,"public void setColumnLong(long columnLong){
  this.columnLong=columnLong;
}","public void setColumnLong(long columnLong){
  realmSetter$columnLong(columnLong);
}",0.8860759493670886
155791,"public byte[] getColumnBinary(){
  return columnBinary;
}","public byte[] getColumnBinary(){
  return realmGetter$columnBinary();
}",0.890625
155792,"public void setColumnDate(Date columnDate){
  this.columnDate=columnDate;
}","public void setColumnDate(Date columnDate){
  realmSetter$columnDate(columnDate);
}",0.8860759493670886
155793,"public void setColumnBinary(byte[] columnBinary){
  this.columnBinary=columnBinary;
}","public void setColumnBinary(byte[] columnBinary){
  realmSetter$columnBinary(columnBinary);
}",0.898876404494382
155794,"public RealmList<Dog> getColumnRealmList(){
  return columnRealmList;
}","public RealmList<Dog> getColumnRealmList(){
  return realmGetter$columnRealmList();
}",0.9102564102564102
155795,"public void setColumnBoolean(boolean columnBoolean){
  this.columnBoolean=columnBoolean;
}","public void setColumnBoolean(boolean columnBoolean){
  realmSetter$columnBoolean(columnBoolean);
}",0.9042553191489362
155796,"public boolean isColumnBoolean(){
  return columnBoolean;
}","public boolean isColumnBoolean(){
  return realmGetter$columnBoolean();
}",0.8939393939393939
155797,"public void testConvertToNullable(){
  ColumnType[] columnTypes={ColumnType.BOOLEAN,ColumnType.DATE,ColumnType.DOUBLE,ColumnType.FLOAT,ColumnType.INTEGER,ColumnType.BINARY,ColumnType.STRING};
  for (  ColumnType columnType : columnTypes) {
    String[] columnNames={""String_Node_Str"",""String_Node_Str""};
    for (    boolean nullable : new boolean[]{Table.NOT_NULLABLE,Table.NULLABLE}) {
      for (      String columnName : columnNames) {
        Table table=new Table();
        long colIndex=table.addColumn(columnType,columnName,nullable);
        table.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
        table.addEmptyRow();
        if (columnType == ColumnType.BOOLEAN)         table.setBoolean(colIndex,0,true);
 else         if (columnType == ColumnType.DATE)         table.setDate(colIndex,0,new Date(0));
 else         if (columnType == ColumnType.DOUBLE)         table.setDouble(colIndex,0,1.0);
 else         if (columnType == ColumnType.FLOAT)         table.setFloat(colIndex,0,1.0f);
 else         if (columnType == ColumnType.INTEGER)         table.setLong(colIndex,0,1);
 else         if (columnType == ColumnType.BINARY)         table.setBinaryByteArray(colIndex,0,new byte[]{0});
 else         if (columnType == ColumnType.STRING)         table.setString(colIndex,0,""String_Node_Str"");
        try {
          table.addEmptyRow();
          if (columnType == ColumnType.BINARY)           table.setBinaryByteArray(colIndex,1,null);
 else           if (columnType == ColumnType.STRING)           table.setString(colIndex,1,null);
 else           table.getCheckedRow(1).setNull(colIndex);
          if (!nullable) {
            fail();
          }
        }
 catch (        IllegalArgumentException ignored) {
        }
        table.removeLast();
        assertEquals(1,table.size());
        table.convertColumnToNullable(colIndex);
        assertTrue(table.isColumnNullable(colIndex));
        assertEquals(1,table.size());
        assertEquals(2,table.getColumnCount());
        assertTrue(table.getColumnIndex(columnName) >= 0);
        assertEquals(colIndex,table.getColumnIndex(columnName));
        table.addEmptyRow();
        if (columnType == ColumnType.BINARY)         table.setBinaryByteArray(colIndex,0,null);
 else         if (columnType == ColumnType.STRING)         table.setString(colIndex,0,null);
 else         table.getCheckedRow(0).setNull(colIndex);
        assertEquals(2,table.size());
        if (columnType == ColumnType.BINARY)         assertNull(table.getBinaryByteArray(colIndex,1));
 else         if (columnType == ColumnType.STRING)         assertNull(table.getString(colIndex,1));
 else         assertTrue(table.getUncheckedRow(1).isNull(colIndex));
      }
    }
  }
}","public void testConvertToNullable(){
  ColumnType[] columnTypes={ColumnType.BOOLEAN,ColumnType.DATE,ColumnType.DOUBLE,ColumnType.FLOAT,ColumnType.INTEGER,ColumnType.BINARY,ColumnType.STRING};
  for (  ColumnType columnType : columnTypes) {
    String[] columnNames={""String_Node_Str"",""String_Node_Str""};
    for (    boolean nullable : new boolean[]{Table.NOT_NULLABLE,Table.NULLABLE}) {
      for (      String columnName : columnNames) {
        Table table=new Table();
        long colIndex=table.addColumn(columnType,columnName,nullable);
        table.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
        table.addEmptyRow();
        if (columnType == ColumnType.BOOLEAN)         table.setBoolean(colIndex,0,true);
 else         if (columnType == ColumnType.DATE)         table.setDate(colIndex,0,new Date(0));
 else         if (columnType == ColumnType.DOUBLE)         table.setDouble(colIndex,0,1.0);
 else         if (columnType == ColumnType.FLOAT)         table.setFloat(colIndex,0,1.0f);
 else         if (columnType == ColumnType.INTEGER)         table.setLong(colIndex,0,1);
 else         if (columnType == ColumnType.BINARY)         table.setBinaryByteArray(colIndex,0,new byte[]{0});
 else         if (columnType == ColumnType.STRING)         table.setString(colIndex,0,""String_Node_Str"");
        try {
          table.addEmptyRow();
          if (columnType == ColumnType.BINARY)           table.setBinaryByteArray(colIndex,1,null);
 else           if (columnType == ColumnType.STRING)           table.setString(colIndex,1,null);
 else           table.getCheckedRow(1).setNull(colIndex);
          if (!nullable) {
            fail();
          }
        }
 catch (        IllegalArgumentException ignored) {
          if (nullable) {
            fail();
          }
        }
        table.removeLast();
        assertEquals(1,table.size());
        table.convertColumnToNullable(colIndex);
        assertTrue(table.isColumnNullable(colIndex));
        assertEquals(1,table.size());
        assertEquals(2,table.getColumnCount());
        assertTrue(table.getColumnIndex(columnName) >= 0);
        assertEquals(colIndex,table.getColumnIndex(columnName));
        table.addEmptyRow();
        if (columnType == ColumnType.BINARY)         table.setBinaryByteArray(colIndex,0,null);
 else         if (columnType == ColumnType.STRING)         table.setString(colIndex,0,null);
 else         table.getCheckedRow(0).setNull(colIndex);
        assertEquals(2,table.size());
        if (columnType == ColumnType.BINARY)         assertNull(table.getBinaryByteArray(colIndex,1));
 else         if (columnType == ColumnType.STRING)         assertNull(table.getString(colIndex,1));
 else         assertTrue(table.getUncheckedRow(1).isNull(colIndex));
      }
    }
  }
}",0.9894622093023256
155798,"public void testConvertToNotNullable(){
  ColumnType[] columnTypes={ColumnType.BOOLEAN,ColumnType.DATE,ColumnType.DOUBLE,ColumnType.FLOAT,ColumnType.INTEGER,ColumnType.BINARY,ColumnType.STRING};
  for (  ColumnType columnType : columnTypes) {
    String[] columnNames={""String_Node_Str"",""String_Node_Str""};
    for (    boolean nullable : new boolean[]{Table.NOT_NULLABLE,Table.NULLABLE}) {
      for (      String columnName : columnNames) {
        Table table=new Table();
        long colIndex=table.addColumn(columnType,columnName,nullable);
        table.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
        table.addEmptyRow();
        if (columnType == ColumnType.BOOLEAN)         table.setBoolean(colIndex,0,true);
 else         if (columnType == ColumnType.DATE)         table.setDate(colIndex,0,new Date(1));
 else         if (columnType == ColumnType.DOUBLE)         table.setDouble(colIndex,0,1.0);
 else         if (columnType == ColumnType.FLOAT)         table.setFloat(colIndex,0,1.0f);
 else         if (columnType == ColumnType.INTEGER)         table.setLong(colIndex,0,1);
 else         if (columnType == ColumnType.BINARY)         table.setBinaryByteArray(colIndex,0,new byte[]{0});
 else         if (columnType == ColumnType.STRING)         table.setString(colIndex,0,""String_Node_Str"");
        try {
          table.addEmptyRow();
          if (columnType == ColumnType.BINARY)           table.setBinaryByteArray(colIndex,1,null);
 else           if (columnType == ColumnType.STRING)           table.setString(colIndex,1,null);
 else           table.getCheckedRow(1).setNull(colIndex);
          if (!nullable) {
            fail();
          }
        }
 catch (        IllegalArgumentException ignored) {
        }
        assertEquals(2,table.size());
        table.convertColumnToNotNullable(colIndex);
        assertFalse(table.isColumnNullable(colIndex));
        assertEquals(2,table.size());
        assertEquals(2,table.getColumnCount());
        assertTrue(table.getColumnIndex(columnName) >= 0);
        assertEquals(colIndex,table.getColumnIndex(columnName));
        table.addEmptyRow();
        try {
          if (columnType == ColumnType.BINARY)           table.setBinaryByteArray(colIndex,0,null);
 else           if (columnType == ColumnType.STRING)           table.setString(colIndex,0,null);
 else           table.getCheckedRow(0).setNull(colIndex);
          if (!nullable) {
            fail();
          }
        }
 catch (        IllegalArgumentException ignored) {
        }
        table.removeLast();
        assertEquals(2,table.size());
        if (columnType == ColumnType.BINARY)         assertNotNull(table.getBinaryByteArray(colIndex,1));
 else         if (columnType == ColumnType.STRING) {
          assertNotNull(table.getString(colIndex,1));
          assertEquals(""String_Node_Str"",table.getString(colIndex,1));
        }
 else {
          assertFalse(table.getUncheckedRow(1).isNull(colIndex));
          if (columnType == ColumnType.BOOLEAN)           assertEquals(false,table.getBoolean(colIndex,1));
 else           if (columnType == ColumnType.DATE)           assertEquals(0,table.getDate(colIndex,1).getTime());
 else           if (columnType == ColumnType.DOUBLE)           assertEquals(0.0,table.getDouble(colIndex,1));
 else           if (columnType == ColumnType.FLOAT)           assertEquals(0.0f,table.getFloat(colIndex,1));
 else           if (columnType == ColumnType.INTEGER)           assertEquals(0,table.getLong(colIndex,1));
        }
      }
    }
  }
}","public void testConvertToNotNullable(){
  ColumnType[] columnTypes={ColumnType.BOOLEAN,ColumnType.DATE,ColumnType.DOUBLE,ColumnType.FLOAT,ColumnType.INTEGER,ColumnType.BINARY,ColumnType.STRING};
  for (  ColumnType columnType : columnTypes) {
    String[] columnNames={""String_Node_Str"",""String_Node_Str""};
    for (    boolean nullable : new boolean[]{Table.NOT_NULLABLE,Table.NULLABLE}) {
      for (      String columnName : columnNames) {
        Table table=new Table();
        long colIndex=table.addColumn(columnType,columnName,nullable);
        table.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
        table.addEmptyRow();
        if (columnType == ColumnType.BOOLEAN)         table.setBoolean(colIndex,0,true);
 else         if (columnType == ColumnType.DATE)         table.setDate(colIndex,0,new Date(1));
 else         if (columnType == ColumnType.DOUBLE)         table.setDouble(colIndex,0,1.0);
 else         if (columnType == ColumnType.FLOAT)         table.setFloat(colIndex,0,1.0f);
 else         if (columnType == ColumnType.INTEGER)         table.setLong(colIndex,0,1);
 else         if (columnType == ColumnType.BINARY)         table.setBinaryByteArray(colIndex,0,new byte[]{0});
 else         if (columnType == ColumnType.STRING)         table.setString(colIndex,0,""String_Node_Str"");
        try {
          table.addEmptyRow();
          if (columnType == ColumnType.BINARY)           table.setBinaryByteArray(colIndex,1,null);
 else           if (columnType == ColumnType.STRING)           table.setString(colIndex,1,null);
 else           table.getCheckedRow(1).setNull(colIndex);
          if (!nullable) {
            fail();
          }
        }
 catch (        IllegalArgumentException ignored) {
        }
        assertEquals(2,table.size());
        table.convertColumnToNotNullable(colIndex);
        assertFalse(table.isColumnNullable(colIndex));
        assertEquals(2,table.size());
        assertEquals(2,table.getColumnCount());
        assertTrue(table.getColumnIndex(columnName) >= 0);
        assertEquals(colIndex,table.getColumnIndex(columnName));
        table.addEmptyRow();
        try {
          if (columnType == ColumnType.BINARY)           table.setBinaryByteArray(colIndex,0,null);
 else           if (columnType == ColumnType.STRING)           table.setString(colIndex,0,null);
 else           table.getCheckedRow(0).setNull(colIndex);
          fail();
        }
 catch (        IllegalArgumentException ignored) {
        }
        table.removeLast();
        assertEquals(2,table.size());
        if (columnType == ColumnType.BINARY)         assertNotNull(table.getBinaryByteArray(colIndex,1));
 else         if (columnType == ColumnType.STRING) {
          assertNotNull(table.getString(colIndex,1));
          assertEquals(""String_Node_Str"",table.getString(colIndex,1));
        }
 else {
          assertFalse(table.getUncheckedRow(1).isNull(colIndex));
          if (columnType == ColumnType.BOOLEAN)           assertEquals(false,table.getBoolean(colIndex,1));
 else           if (columnType == ColumnType.DATE)           assertEquals(0,table.getDate(colIndex,1).getTime());
 else           if (columnType == ColumnType.DOUBLE)           assertEquals(0.0,table.getDouble(colIndex,1));
 else           if (columnType == ColumnType.FLOAT)           assertEquals(0.0f,table.getFloat(colIndex,1));
 else           if (columnType == ColumnType.INTEGER)           assertEquals(0,table.getLong(colIndex,1));
        }
      }
    }
  }
}",0.9924683814125338
155799,"/** 
 * Deletes the Realm file defined by the given configuration.
 */
protected static synchronized boolean deleteRealm(RealmConfiguration configuration){
  if (isFileOpen(configuration)) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  boolean realmDeleted=true;
  String canonicalPath=configuration.getPath();
  File realmFolder=configuration.getRealmFolder();
  String realmFileName=configuration.getRealmFileName();
  List<File> filesToDelete=Arrays.asList(new File(canonicalPath),new File(realmFolder,realmFileName + ""String_Node_Str""),new File(realmFolder,realmFileName + ""String_Node_Str""),new File(realmFolder,realmFileName + ""String_Node_Str""),new File(realmFolder,realmFileName + ""String_Node_Str""));
  for (  File fileToDelete : filesToDelete) {
    if (fileToDelete.exists()) {
      boolean deleteResult=fileToDelete.delete();
      if (!deleteResult) {
        realmDeleted=false;
        RealmLog.w(""String_Node_Str"" + fileToDelete);
      }
    }
  }
  return realmDeleted;
}","/** 
 * Deletes the Realm file defined by the given configuration.
 */
protected static synchronized boolean deleteRealm(RealmConfiguration configuration){
  if (isFileOpen(configuration)) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"" + configuration.getPath());
  }
  boolean realmDeleted=true;
  String canonicalPath=configuration.getPath();
  File realmFolder=configuration.getRealmFolder();
  String realmFileName=configuration.getRealmFileName();
  List<File> filesToDelete=Arrays.asList(new File(canonicalPath),new File(realmFolder,realmFileName + ""String_Node_Str""),new File(realmFolder,realmFileName + ""String_Node_Str""),new File(realmFolder,realmFileName + ""String_Node_Str""),new File(realmFolder,realmFileName + ""String_Node_Str""));
  for (  File fileToDelete : filesToDelete) {
    if (fileToDelete.exists()) {
      boolean deleteResult=fileToDelete.delete();
      if (!deleteResult) {
        realmDeleted=false;
        RealmLog.w(""String_Node_Str"" + fileToDelete);
      }
    }
  }
  return realmDeleted;
}",0.9875
155800,"private void completedAsyncFindFirst(QueryUpdateTask.Result result){
  Set<WeakReference<RealmObject>> updatedRowKey=result.updatedRow.keySet();
  if (updatedRowKey.size() > 0) {
    WeakReference<RealmObject> realmObjectWeakReference=updatedRowKey.iterator().next();
    RealmObject realmObject=realmObjectWeakReference.get();
    if (realmObject != null) {
      SharedGroup.VersionID callerVersionID=realm.sharedGroupManager.getVersion();
      int compare=callerVersionID.compareTo(result.versionID);
      if (compare == 0) {
        realmObject.onCompleted(result.updatedRow.get(realmObjectWeakReference));
        asyncRealmObjects.remove(realmObjectWeakReference);
      }
 else       if (compare > 0) {
        RealmQuery<?> realmQuery=asyncRealmObjects.get(realmObjectWeakReference);
        QueryUpdateTask queryUpdateTask=QueryUpdateTask.newBuilder().realmConfiguration(realm.getConfiguration()).addObject(realmObjectWeakReference,realmQuery.handoverQueryPointer(),realmQuery.getArgument()).sendToHandler(realm.handler,Realm.REALM_COMPLETED_ASYNC_FIND_FIRST).build();
        Realm.asyncQueryExecutor.submit(queryUpdateTask);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
}","private void completedAsyncFindFirst(QueryUpdateTask.Result result){
  Set<WeakReference<? extends RealmObject>> updatedRowKey=result.updatedRow.keySet();
  if (updatedRowKey.size() > 0) {
    WeakReference<? extends RealmObject> realmObjectWeakReference=updatedRowKey.iterator().next();
    RealmObject realmObject=realmObjectWeakReference.get();
    if (realmObject != null) {
      SharedGroup.VersionID callerVersionID=realm.sharedGroupManager.getVersion();
      int compare=callerVersionID.compareTo(result.versionID);
      if (compare == 0) {
        realmObject.onCompleted(result.updatedRow.get(realmObjectWeakReference));
        asyncRealmObjects.remove(realmObjectWeakReference);
      }
 else       if (compare > 0) {
        RealmQuery<?> realmQuery=asyncRealmObjects.get(realmObjectWeakReference);
        QueryUpdateTask queryUpdateTask=QueryUpdateTask.newBuilder().realmConfiguration(realm.getConfiguration()).addObject(realmObjectWeakReference,realmQuery.handoverQueryPointer(),realmQuery.getArgument()).sendToHandler(realm.handler,Realm.REALM_COMPLETED_ASYNC_FIND_FIRST).build();
        Realm.asyncQueryExecutor.submit(queryUpdateTask);
      }
 else {
        throw new IllegalStateException(""String_Node_Str"");
      }
    }
  }
}",0.99195494770716
155801,"/** 
 * Similar to   {@link #findAllSorted(String,boolean,String,boolean,String,boolean)} butruns asynchronously on a worker thread
 * @return immediately an empty {@link RealmResults}. Users need to register a listener  {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notifiedwhen the query completes.
 * @throws java.lang.IllegalArgumentException if a field name does not exist.
 */
public RealmResults<E> findAllSortedAsync(String fieldName1,boolean sortAscending1,String fieldName2,boolean sortAscending2,String fieldName3,boolean sortAscending3){
  return findAllSortedAsync(new String[]{fieldName1,fieldName2,fieldName3},new boolean[]{sortAscending1,sortAscending2,sortAscending3});
}","/** 
 * Similar to   {@link #findAllSorted(String,boolean,String,boolean,String,boolean)} butruns asynchronously on a worker thread. (Need a Realm opened from a looper thread to work).
 * @return immediately an empty {@link RealmResults}. Users need to register a listener  {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notifiedwhen the query completes.
 * @throws java.lang.IllegalArgumentException if a field name does not exist.
 */
public RealmResults<E> findAllSortedAsync(String fieldName1,boolean sortAscending1,String fieldName2,boolean sortAscending2,String fieldName3,boolean sortAscending3){
  return findAllSortedAsync(new String[]{fieldName1,fieldName2,fieldName3},new boolean[]{sortAscending1,sortAscending2,sortAscending3});
}",0.9643577673167452
155802,"/** 
 * Similar to   {@link #findFirst()} but runs asynchronously on a worker thread
 * @return immediately an empty {@link RealmObject}. Users need to register a listener  {@link io.realm.RealmObject#addChangeListener} to be notified when the query completes.
 */
public E findFirstAsync(){
  checkQueryIsNotReused();
  final WeakReference<Handler> weakHandler=getWeakReferenceHandler();
  final long handoverQueryPointer=query.handoverQuery(realm.sharedGroupManager.getNativePointer());
  argumentsHolder=new ArgumentsHolder(ArgumentsHolder.TYPE_FIND_FIRST);
  final RealmConfiguration realmConfiguration=realm.getConfiguration();
  final E result=realm.getConfiguration().getSchemaMediator().newInstance(clazz);
  final WeakReference<RealmObject> realmObjectWeakReference=new WeakReference<RealmObject>(result);
  realm.addAsyncRealmObject(realmObjectWeakReference,this);
  result.realm=realm;
  result.row=Row.EMPTY_ROW;
  final Future<Long> pendingQuery=Realm.asyncQueryExecutor.submit(new Callable<Long>(){
    @Override public Long call() throws Exception {
      if (!Thread.currentThread().isInterrupted()) {
        SharedGroup sharedGroup=null;
        try {
          sharedGroup=new SharedGroup(realmConfiguration.getPath(),SharedGroup.IMPLICIT_TRANSACTION,realmConfiguration.getDurability(),realmConfiguration.getEncryptionKey());
          long handoverTableViewPointer=query.findWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),handoverQueryPointer);
          QueryUpdateTask.Result result=QueryUpdateTask.Result.newRealmObjectResponse();
          result.updatedRow.put(realmObjectWeakReference,handoverTableViewPointer);
          result.versionID=sharedGroup.getVersion();
          Handler handler=weakHandler.get();
          if (handler != null && handler.getLooper().getThread().isAlive()) {
            handler.obtainMessage(Realm.REALM_COMPLETED_ASYNC_FIND_FIRST,result).sendToTarget();
          }
          return handoverTableViewPointer;
        }
 catch (        Exception e) {
          RealmLog.e(e.getMessage());
        }
 finally {
          if (null != sharedGroup) {
            sharedGroup.close();
          }
        }
      }
 else {
        TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
      }
      return INVALID_NATIVE_POINTER;
    }
  }
);
  result.setPendingQuery(pendingQuery);
  return result;
}","/** 
 * Similar to   {@link #findFirst()} but runs asynchronously on a worker thread(Need a Realm opened from a looper thread to work).
 * @return immediately an empty {@link RealmObject}. Users need to register a listener  {@link io.realm.RealmObject#addChangeListener} to be notified when the query completes.
 */
public E findFirstAsync(){
  checkQueryIsNotReused();
  final WeakReference<Handler> weakHandler=getWeakReferenceHandler();
  final long handoverQueryPointer=query.handoverQuery(realm.sharedGroupManager.getNativePointer());
  argumentsHolder=new ArgumentsHolder(ArgumentsHolder.TYPE_FIND_FIRST);
  final RealmConfiguration realmConfiguration=realm.getConfiguration();
  final E result=realm.getConfiguration().getSchemaMediator().newInstance(clazz);
  final WeakReference<RealmObject> realmObjectWeakReference=new WeakReference<RealmObject>(result);
  realm.addAsyncRealmObject(realmObjectWeakReference,this);
  result.realm=realm;
  result.row=Row.EMPTY_ROW;
  final Future<Long> pendingQuery=Realm.asyncQueryExecutor.submit(new Callable<Long>(){
    @Override public Long call() throws Exception {
      if (!Thread.currentThread().isInterrupted()) {
        SharedGroup sharedGroup=null;
        try {
          sharedGroup=new SharedGroup(realmConfiguration.getPath(),SharedGroup.IMPLICIT_TRANSACTION,realmConfiguration.getDurability(),realmConfiguration.getEncryptionKey());
          long handoverTableViewPointer=query.findWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),handoverQueryPointer);
          QueryUpdateTask.Result result=QueryUpdateTask.Result.newRealmObjectResponse();
          result.updatedRow.put(realmObjectWeakReference,handoverTableViewPointer);
          result.versionID=sharedGroup.getVersion();
          Handler handler=weakHandler.get();
          if (handler != null && handler.getLooper().getThread().isAlive()) {
            handler.obtainMessage(Realm.REALM_COMPLETED_ASYNC_FIND_FIRST,result).sendToTarget();
          }
          return handoverTableViewPointer;
        }
 catch (        Exception e) {
          RealmLog.e(e.getMessage());
        }
 finally {
          if (null != sharedGroup) {
            sharedGroup.close();
          }
        }
      }
 else {
        TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
      }
      return INVALID_NATIVE_POINTER;
    }
  }
);
  result.setPendingQuery(pendingQuery);
  return result;
}",0.9894693371876936
155803,"/** 
 * Find all objects that fulfill the query conditions and sorted by specific field name.
 * @return immediately an empty {@link RealmResults}. Users need to register a listener  {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notifiedwhen the query completes.
 * @throws java.lang.RuntimeException Any other error
 * @see io.realm.RealmResults
 */
public RealmResults<E> findAllAsync(){
  checkQueryIsNotReused();
  final WeakReference<Handler> weakHandler=getWeakReferenceHandler();
  final long handoverQueryPointer=query.handoverQuery(realm.sharedGroupManager.getNativePointer());
  argumentsHolder=new ArgumentsHolder(ArgumentsHolder.TYPE_FIND_ALL);
  final RealmConfiguration realmConfiguration=realm.getConfiguration();
  RealmResults<E> realmResults=new RealmResults<E>(realm,query,clazz);
  final WeakReference<RealmResults<?>> weakRealmResults=new WeakReference<RealmResults<?>>(realmResults,realm.getReferenceQueue());
  realm.addAsyncRealmResults(weakRealmResults,this);
  final Future<Long> pendingQuery=Realm.asyncQueryExecutor.submit(new Callable<Long>(){
    @Override public Long call() throws Exception {
      if (!Thread.currentThread().isInterrupted()) {
        SharedGroup sharedGroup=null;
        try {
          sharedGroup=new SharedGroup(realmConfiguration.getPath(),SharedGroup.IMPLICIT_TRANSACTION,realmConfiguration.getDurability(),realmConfiguration.getEncryptionKey());
          long handoverTableViewPointer=query.findAllWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),handoverQueryPointer);
          QueryUpdateTask.Result result=QueryUpdateTask.Result.newRealmResultsResponse();
          result.updatedTableViews.put(weakRealmResults,handoverTableViewPointer);
          result.versionID=sharedGroup.getVersion();
          Handler handler=weakHandler.get();
          if (handler != null && handler.getLooper().getThread().isAlive()) {
            handler.obtainMessage(Realm.REALM_COMPLETED_ASYNC_QUERY,result).sendToTarget();
          }
          return handoverTableViewPointer;
        }
 catch (        Exception e) {
          RealmLog.e(e.getMessage());
        }
 finally {
          if (null != sharedGroup) {
            sharedGroup.close();
          }
        }
      }
 else {
        TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
      }
      return INVALID_NATIVE_POINTER;
    }
  }
);
  realmResults.setPendingQuery(pendingQuery);
  return realmResults;
}","/** 
 * Find all objects that fulfill the query conditions and sorted by specific field name. (Need a Realm opened from a looper thread to work).
 * @return immediately an empty {@link RealmResults}. Users need to register a listener  {@link io.realm.RealmResults#addChangeListener(RealmChangeListener)} to be notifiedwhen the query completes.
 * @throws java.lang.RuntimeException Any other error
 * @see io.realm.RealmResults
 */
public RealmResults<E> findAllAsync(){
  checkQueryIsNotReused();
  final WeakReference<Handler> weakHandler=getWeakReferenceHandler();
  final long handoverQueryPointer=query.handoverQuery(realm.sharedGroupManager.getNativePointer());
  argumentsHolder=new ArgumentsHolder(ArgumentsHolder.TYPE_FIND_ALL);
  final RealmConfiguration realmConfiguration=realm.getConfiguration();
  RealmResults<E> realmResults=new RealmResults<E>(realm,query,clazz);
  final WeakReference<RealmResults<?>> weakRealmResults=new WeakReference<RealmResults<?>>(realmResults,realm.getReferenceQueue());
  realm.addAsyncRealmResults(weakRealmResults,this);
  final Future<Long> pendingQuery=Realm.asyncQueryExecutor.submit(new Callable<Long>(){
    @Override public Long call() throws Exception {
      if (!Thread.currentThread().isInterrupted()) {
        SharedGroup sharedGroup=null;
        try {
          sharedGroup=new SharedGroup(realmConfiguration.getPath(),SharedGroup.IMPLICIT_TRANSACTION,realmConfiguration.getDurability(),realmConfiguration.getEncryptionKey());
          long handoverTableViewPointer=query.findAllWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),handoverQueryPointer);
          QueryUpdateTask.Result result=QueryUpdateTask.Result.newRealmResultsResponse();
          result.updatedTableViews.put(weakRealmResults,handoverTableViewPointer);
          result.versionID=sharedGroup.getVersion();
          Handler handler=weakHandler.get();
          if (handler != null && handler.getLooper().getThread().isAlive()) {
            handler.obtainMessage(Realm.REALM_COMPLETED_ASYNC_QUERY,result).sendToTarget();
          }
          return handoverTableViewPointer;
        }
 catch (        Exception e) {
          RealmLog.e(e.getMessage());
        }
 finally {
          if (null != sharedGroup) {
            sharedGroup.close();
          }
        }
      }
 else {
        TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
      }
      return INVALID_NATIVE_POINTER;
    }
  }
);
  realmResults.setPendingQuery(pendingQuery);
  return realmResults;
}",0.9896866322887744
155804,"/** 
 * Add a change listener to this RealmResults.
 * @param listener the change listener to be notified
 */
public void addChangeListener(RealmChangeListener listener){
  if (listener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (realm != null) {
    realm.checkIfValid();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!listeners.contains(listener)) {
    listeners.add(listener);
  }
}","/** 
 * Add a change listener to this RealmResults.
 * @param listener the change listener to be notified
 */
public void addChangeListener(RealmChangeListener listener){
  if (listener == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (realm != null) {
    realm.checkIfValid();
  }
  if (!listeners.contains(listener)) {
    listeners.add(listener);
  }
}",0.7805456702253856
155805,"/** 
 * Remove all registered listeners.
 */
public void removeChangeListeners(){
  if (realm != null) {
    realm.checkIfValid();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  listeners.clear();
}","/** 
 * Remove all registered listeners.
 */
public void removeChangeListeners(){
  if (realm != null) {
    realm.checkIfValid();
  }
  listeners.clear();
}",0.8155844155844156
155806,"/** 
 * Remove a previously registered listener.
 * @param listener the instance to be removed.
 */
public void removeChangeListener(RealmChangeListener listener){
  if (listener == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (realm != null) {
    realm.checkIfValid();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  listeners.remove(listener);
}","/** 
 * Remove a previously registered listener.
 * @param listener the instance to be removed.
 */
public void removeChangeListener(RealmChangeListener listener){
  if (listener == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (realm != null) {
    realm.checkIfValid();
  }
  listeners.remove(listener);
}",0.831275720164609
155807,"@Override public RealmResultsQueryStep add(WeakReference<RealmResults<?>> weakReference,long handoverQueryPointer,ArgumentsHolder queryArguments){
  if (this.realmResultsEntries == null) {
    this.realmResultsEntries=new ArrayList<QueryEntry<RealmResults<?>>>(1);
  }
  this.realmResultsEntries.add(new QueryEntry<RealmResults<?>>(weakReference,handoverQueryPointer,queryArguments));
  return this;
}","@Override public RealmResultsQueryStep add(WeakReference<RealmResults<?>> weakReference,long handoverQueryPointer,ArgumentsHolder queryArguments){
  if (this.realmResultsEntries == null) {
    this.realmResultsEntries=new ArrayList<QueryEntry>(1);
  }
  this.realmResultsEntries.add(new QueryEntry(weakReference,handoverQueryPointer,queryArguments));
  return this;
}",0.9557291666666666
155808,"private QueryUpdateTask(int mode,RealmConfiguration realmConfiguration,List<Builder.QueryEntry<RealmResults<?>>> listOfRealmResults,Builder.QueryEntry<RealmObject> realmObject,WeakReference<Handler> handler,int message){
  this.updateMode=mode;
  this.realmConfiguration=realmConfiguration;
  this.realmResultsEntries=listOfRealmResults;
  this.realmObjectEntry=realmObject;
  this.callerHandler=handler;
  this.message=message;
}","private QueryUpdateTask(int mode,RealmConfiguration realmConfiguration,List<Builder.QueryEntry> listOfRealmResults,Builder.QueryEntry realmObject,WeakReference<Handler> handler,int message){
  this.updateMode=mode;
  this.realmConfiguration=realmConfiguration;
  this.realmResultsEntries=listOfRealmResults;
  this.realmObjectEntry=realmObject;
  this.callerHandler=handler;
  this.message=message;
}",0.5277108433734939
155809,"private QueryEntry(WeakReference<T> element,long handoverQueryPointer,ArgumentsHolder queryArguments){
  this.element=element;
  this.handoverQueryPointer=handoverQueryPointer;
  this.queryArguments=queryArguments;
}","private QueryEntry(WeakReference element,long handoverQueryPointer,ArgumentsHolder queryArguments){
  this.element=element;
  this.handoverQueryPointer=handoverQueryPointer;
  this.queryArguments=queryArguments;
}",0.993006993006993
155810,"public static Result newRealmObjectResponse(){
  Result result=new Result();
  result.updatedRow=new IdentityHashMap<WeakReference<RealmObject>,Long>(1);
  return result;
}","public static Result newRealmObjectResponse(){
  Result result=new Result();
  result.updatedRow=new IdentityHashMap<WeakReference<? extends RealmObject>,Long>(1);
  return result;
}",0.9717514124293786
155811,"private boolean updateRealmResultsQueries(SharedGroup sharedGroup,Result result){
  for (  Builder.QueryEntry<RealmResults<?>> queryEntry : realmResultsEntries) {
    if (!isTaskCancelled()) {
switch (queryEntry.queryArguments.type) {
case ArgumentsHolder.TYPE_FIND_ALL:
{
          long handoverTableViewPointer=TableQuery.nativeFindAllWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),queryEntry.handoverQueryPointer,0,Table.INFINITE,Table.INFINITE);
          result.updatedTableViews.put(queryEntry.element,handoverTableViewPointer);
          queryEntry.handoverQueryPointer=0L;
          break;
        }
case ArgumentsHolder.TYPE_FIND_ALL_SORTED:
{
        long handoverTableViewPointer=TableQuery.nativeFindAllSortedWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),queryEntry.handoverQueryPointer,0,Table.INFINITE,Table.INFINITE,queryEntry.queryArguments.columnIndex,queryEntry.queryArguments.ascending);
        result.updatedTableViews.put(queryEntry.element,handoverTableViewPointer);
        queryEntry.handoverQueryPointer=0L;
        break;
      }
case ArgumentsHolder.TYPE_FIND_ALL_MULTI_SORTED:
    long handoverTableViewPointer=TableQuery.nativeFindAllMultiSortedWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),queryEntry.handoverQueryPointer,0,Table.INFINITE,Table.INFINITE,queryEntry.queryArguments.columnIndices,queryEntry.queryArguments.ascendings);
  result.updatedTableViews.put(queryEntry.element,handoverTableViewPointer);
queryEntry.handoverQueryPointer=0L;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + queryEntry.queryArguments.type + ""String_Node_Str"");
}
}
 else {
for (Long handoverQueryPointer : result.updatedTableViews.values()) {
if (handoverQueryPointer != 0) {
TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
}
}
return false;
}
}
return true;
}","private boolean updateRealmResultsQueries(SharedGroup sharedGroup,Result result){
  for (  Builder.QueryEntry queryEntry : realmResultsEntries) {
    if (!isTaskCancelled()) {
switch (queryEntry.queryArguments.type) {
case ArgumentsHolder.TYPE_FIND_ALL:
{
          long handoverTableViewPointer=TableQuery.nativeFindAllWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),queryEntry.handoverQueryPointer,0,Table.INFINITE,Table.INFINITE);
          result.updatedTableViews.put(queryEntry.element,handoverTableViewPointer);
          queryEntry.handoverQueryPointer=0L;
          break;
        }
case ArgumentsHolder.TYPE_FIND_ALL_SORTED:
{
        long handoverTableViewPointer=TableQuery.nativeFindAllSortedWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),queryEntry.handoverQueryPointer,0,Table.INFINITE,Table.INFINITE,queryEntry.queryArguments.columnIndex,queryEntry.queryArguments.ascending);
        result.updatedTableViews.put(queryEntry.element,handoverTableViewPointer);
        queryEntry.handoverQueryPointer=0L;
        break;
      }
case ArgumentsHolder.TYPE_FIND_ALL_MULTI_SORTED:
    long handoverTableViewPointer=TableQuery.nativeFindAllMultiSortedWithHandover(sharedGroup.getNativePointer(),sharedGroup.getNativeReplicationPointer(),queryEntry.handoverQueryPointer,0,Table.INFINITE,Table.INFINITE,queryEntry.queryArguments.columnIndices,queryEntry.queryArguments.ascendings);
  result.updatedTableViews.put(queryEntry.element,handoverTableViewPointer);
queryEntry.handoverQueryPointer=0L;
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + queryEntry.queryArguments.type + ""String_Node_Str"");
}
}
 else {
for (Long handoverQueryPointer : result.updatedTableViews.values()) {
if (handoverQueryPointer != 0) {
TableQuery.nativeCloseQueryHandover(handoverQueryPointer);
}
}
return false;
}
}
return true;
}",0.9955786736020806
155812,"@Override public HandlerStep addObject(WeakReference<RealmObject> weakReference,long handoverQueryPointer,ArgumentsHolder queryArguments){
  realmObjectEntry=new QueryEntry<RealmObject>(weakReference,handoverQueryPointer,queryArguments);
  return this;
}","@Override public HandlerStep addObject(WeakReference<? extends RealmObject> weakReference,long handoverQueryPointer,ArgumentsHolder queryArguments){
  realmObjectEntry=new QueryEntry(weakReference,handoverQueryPointer,queryArguments);
  return this;
}",0.9544554455445544
155813,"@Override public void run(){
  NativeObjectReference reference;
  while (true) {
    try {
      reference=(NativeObjectReference)referenceQueue.remove();
      UncheckedRow.nativeClose(reference.nativePointer);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}","@Override public void run(){
  NativeObjectReference reference;
  while (true) {
    try {
      reference=(NativeObjectReference)referenceQueue.remove();
      references.remove(reference);
      UncheckedRow.nativeClose(reference.nativePointer);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
}",0.944954128440367
155814,"/** 
 * Sets the   {@link io.realm.RealmConfiguration} used when calling {@link #getDefaultInstance()}
 * @param configuration RealmConfiguration to use as the default configuration
 * @see {@link io.realm.RealmConfiguration} for details on how to configure a Realm
 */
public static void setDefaultConfiguration(RealmConfiguration configuration){
  if (configuration == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  defaultConfiguration=configuration;
}","/** 
 * Sets the   {@link io.realm.RealmConfiguration} used when calling {@link #getDefaultInstance()}.
 * @param configuration RealmConfiguration to use as the default configuration.
 * @see RealmConfiguration for details on how to configure a Realm.
 */
public static void setDefaultConfiguration(RealmConfiguration configuration){
  if (configuration == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  defaultConfiguration=configuration;
}",0.8586497890295358
155815,"/** 
 * Realm static constructor that returns the Realm instance defined by provided   {@link io.realm.RealmConfiguration}
 * @return an instance of the Realm class
 * @throws RealmMigrationNeededException If no migration has been provided by the configuration and themodel classes or version has has changed so a migration is required.
 * @see {@link io.realm.RealmConfiguration} for details on how to configure a Realm.
 */
public static Realm getInstance(RealmConfiguration configuration){
  if (configuration == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return create(configuration);
}","/** 
 * Realm static constructor that returns the Realm instance defined by provided   {@link io.realm.RealmConfiguration}
 * @return an instance of the Realm class
 * @throws RealmMigrationNeededException If no migration has been provided by the configuration and themodel classes or version has has changed so a migration is required.
 * @see RealmConfiguration for details on how to configure a Realm.
 */
public static Realm getInstance(RealmConfiguration configuration){
  if (configuration == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return create(configuration);
}",0.9860997547015536
155816,"/** 
 * Replaces the existing module(s) with one or more   {@link RealmModule}s. Using this method will replace the current schema for this Realm with the schema defined by the provided modules. A reference to the default Realm module containing all Realm classes in the project (but not dependencies), can be found using   {@link Realm#getDefaultModule()}. Combining the schema from the app project and a library dependency is thus done using the following code:  {@code builder.setModules(Realm.getDefaultMode(), new MyLibraryModule()); }
 * @param baseModule        First Realm module (required).
 * @param additionalModules Additional Realm modules
 * @throws {@link IllegalArgumentException} if any of the modules are {@code null} or doesn't have the{@link RealmModule} annotation.
 * @see Realm#getDefaultModule()
 */
public Builder setModules(Object baseModule,Object... additionalModules){
  modules.clear();
  addModule(baseModule);
  if (additionalModules != null) {
    for (int i=0; i < additionalModules.length; i++) {
      Object module=additionalModules[i];
      checkModule(module);
      addModule(module);
    }
  }
  return this;
}","/** 
 * Replaces the existing module(s) with one or more   {@link RealmModule}s. Using this method will replace the current schema for this Realm with the schema defined by the provided modules. A reference to the default Realm module containing all Realm classes in the project (but not dependencies), can be found using   {@link Realm#getDefaultModule()}. Combining the schema from the app project and a library dependency is thus done using the following code:  {@code builder.setModules(Realm.getDefaultMode(), new MyLibraryModule()); }
 * @param baseModule        First Realm module (required).
 * @param additionalModules Additional Realm modules
 * @throws IllegalArgumentException if any of the modules are {@code null} or doesn't have the{@link RealmModule} annotation.
 * @see Realm#getDefaultModule()
 */
public Builder setModules(Object baseModule,Object... additionalModules){
  modules.clear();
  addModule(baseModule);
  if (additionalModules != null) {
    for (int i=0; i < additionalModules.length; i++) {
      Object module=additionalModules[i];
      checkModule(module);
      addModule(module);
    }
  }
  return this;
}",0.9965156794425089
155817,"/** 
 * Setting this will change the behavior of how migration exceptions are handled. Instead of throwing a  {@link io.realm.exceptions.RealmMigrationNeededException} the on-disc Realm will be cleared and recreatedwith the new Realm schema. <bold>WARNING!</bold> This will result in loss of data.
 */
public Builder deleteRealmIfMigrationNeeded(){
  this.deleteRealmIfMigrationNeeded=true;
  return this;
}","/** 
 * Setting this will change the behavior of how migration exceptions are handled. Instead of throwing a  {@link io.realm.exceptions.RealmMigrationNeededException} the on-disc Realm will be cleared and recreatedwith the new Realm schema. <b>WARNING!</b> This will result in loss of data.
 */
public Builder deleteRealmIfMigrationNeeded(){
  this.deleteRealmIfMigrationNeeded=true;
  return this;
}",0.9925742574257426
155818,"/** 
 * Build the meta data structures for this class. Any errors or messages will be posted on the provided Messager.
 * @return True if meta data was correctly created and processing can continue, false otherwise.
 */
public boolean generate(ProcessingEnvironment processingEnv){
  for (  Element classElement : env.getElementsAnnotatedWith(RealmModule.class)) {
    String classSimpleName=classElement.getSimpleName().toString();
    if (!classElement.getKind().equals(ElementKind.CLASS)) {
      Utils.error(""String_Node_Str"",classElement);
      return false;
    }
    RealmModule module=classElement.getAnnotation(RealmModule.class);
    Utils.note(""String_Node_Str"" + classSimpleName);
    if (module.allClasses() && module.classes().length > 0) {
      Utils.error(""String_Node_Str"" + classSimpleName);
      return false;
    }
    String qualifiedName=((TypeElement)classElement).getQualifiedName().toString();
    Set<ClassMetaData> classes;
    if (module.allClasses()) {
      classes=availableClasses;
    }
 else {
      classes=new HashSet<ClassMetaData>();
      for (      Class<?> clazz : module.classes()) {
        if (!clazz.getSuperclass().toString().endsWith(""String_Node_Str"")) {
          Utils.error(clazz.getSimpleName() + ""String_Node_Str"" + ""String_Node_Str"");
          return false;
        }
        ClassMetaData metadata=classMetaData.get(clazz.getName());
        if (metadata == null) {
          Utils.error(Utils.stripPackage(qualifiedName) + ""String_Node_Str"" + ""String_Node_Str"");
          return false;
        }
        classes.add(metadata);
      }
    }
    if (module.library()) {
      libraryModules.put(qualifiedName,classes);
    }
 else {
      modules.put(qualifiedName,classes);
    }
  }
  if (modules.size() > 0 && libraryModules.size() > 0) {
    Utils.error(""String_Node_Str"");
    return false;
  }
  if (libraryModules.size() == 0) {
    shouldCreateDefaultModule=true;
    String defautModuleName=Constants.REALM_PACKAGE_NAME + ""String_Node_Str"" + Constants.DEFAULT_MODULE_CLASS_NAME;
    modules.put(defautModuleName,availableClasses);
  }
  return true;
}","/** 
 * Build the meta data structures for this class. Any errors or messages will be posted on the provided Messager.
 * @return True if meta data was correctly created and processing can continue, false otherwise.
 */
public boolean generate(ProcessingEnvironment processingEnv){
  for (  Element classElement : env.getElementsAnnotatedWith(RealmModule.class)) {
    String classSimpleName=classElement.getSimpleName().toString();
    if (!classElement.getKind().equals(ElementKind.CLASS)) {
      Utils.error(""String_Node_Str"",classElement);
      return false;
    }
    RealmModule module=classElement.getAnnotation(RealmModule.class);
    Utils.note(""String_Node_Str"" + classSimpleName);
    if (module.allClasses() && module.classes().length > 0) {
      Utils.error(""String_Node_Str"" + classSimpleName);
      return false;
    }
    String qualifiedName=((TypeElement)classElement).getQualifiedName().toString();
    Set<ClassMetaData> classes;
    if (module.allClasses()) {
      classes=availableClasses;
    }
 else {
      classes=new HashSet<ClassMetaData>();
      AnnotationMirror annotationMirror=null;
      for (      AnnotationMirror am : classElement.getAnnotationMirrors()) {
        if (am.getAnnotationType().toString().equals(RealmModule.class.getCanonicalName())) {
          annotationMirror=am;
          break;
        }
      }
      AnnotationValue annotationValue=null;
      for (      Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {
        if (entry.getKey().getSimpleName().toString().equals(""String_Node_Str"")) {
          annotationValue=entry.getValue();
          break;
        }
      }
      List<? extends AnnotationValue> moduleClasses=(List<? extends AnnotationValue>)annotationValue.getValue();
      for (      AnnotationValue classMirror : moduleClasses) {
        String fullyQualifiedClassName=classMirror.getValue().toString();
        ClassMetaData metadata=classMetaData.get(fullyQualifiedClassName);
        if (metadata == null) {
          Utils.error(Utils.stripPackage(fullyQualifiedClassName) + ""String_Node_Str"" + ""String_Node_Str"");
          return false;
        }
        classes.add(metadata);
      }
    }
    if (module.library()) {
      libraryModules.put(qualifiedName,classes);
    }
 else {
      modules.put(qualifiedName,classes);
    }
  }
  if (modules.size() > 0 && libraryModules.size() > 0) {
    Utils.error(""String_Node_Str"");
    return false;
  }
  if (libraryModules.size() == 0) {
    shouldCreateDefaultModule=true;
    String defautModuleName=Constants.REALM_PACKAGE_NAME + ""String_Node_Str"" + Constants.DEFAULT_MODULE_CLASS_NAME;
    modules.put(defautModuleName,availableClasses);
  }
  return true;
}",0.763911620294599
155819,"private void emitCopyMethod(JavaWriter writer) throws IOException {
  writer.beginMethod(className,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"",className,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",className,className);
  writer.emitStatement(""String_Node_Str"");
  for (  VariableElement field : metadata.getFields()) {
    String fieldName=field.getSimpleName().toString();
    String fieldType=field.asType().toString();
    if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitEmptyLine().emitStatement(""String_Node_Str"",fieldType,fieldName,metadata.getGetter(fieldName)).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",fieldType,fieldName,fieldType,fieldName).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),fieldName).nextControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),Utils.getProxyClassSimpleName(field),fieldName).endControlFlow().endControlFlow();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      writer.emitEmptyLine().emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,metadata.getGetter(fieldName)).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,metadata.getGetter(fieldName)).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,fieldName).emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,Utils.getGenericType(field),fieldName).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",fieldName,fieldName).nextControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"",fieldName,Utils.getProxyClassSimpleName(field),fieldName).endControlFlow().endControlFlow().endControlFlow().emitEmptyLine();
    }
 else {
      if (NULLABLE_JAVA_TYPES.containsKey(fieldType)) {
        writer.emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),metadata.getGetter(fieldName),metadata.getGetter(fieldName),NULLABLE_JAVA_TYPES.get(fieldType));
      }
 else {
        writer.emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),metadata.getGetter(fieldName));
      }
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
}","private void emitCopyMethod(JavaWriter writer) throws IOException {
  writer.beginMethod(className,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"",className,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  if (metadata.hasPrimaryKey()) {
    writer.emitStatement(""String_Node_Str"",className,className,metadata.getPrimaryKeyGetter());
  }
 else {
    writer.emitStatement(""String_Node_Str"",className,className);
  }
  writer.emitStatement(""String_Node_Str"");
  for (  VariableElement field : metadata.getFields()) {
    String fieldName=field.getSimpleName().toString();
    String fieldType=field.asType().toString();
    if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitEmptyLine().emitStatement(""String_Node_Str"",fieldType,fieldName,metadata.getGetter(fieldName)).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",fieldType,fieldName,fieldType,fieldName).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),fieldName).nextControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),Utils.getProxyClassSimpleName(field),fieldName).endControlFlow().endControlFlow();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      writer.emitEmptyLine().emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,metadata.getGetter(fieldName)).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,metadata.getGetter(fieldName)).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,fieldName).emitStatement(""String_Node_Str"",Utils.getGenericType(field),fieldName,Utils.getGenericType(field),fieldName).beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",fieldName,fieldName).nextControlFlow(""String_Node_Str"").emitStatement(""String_Node_Str"",fieldName,Utils.getProxyClassSimpleName(field),fieldName).endControlFlow().endControlFlow().endControlFlow().emitEmptyLine();
    }
 else {
      if (NULLABLE_JAVA_TYPES.containsKey(fieldType)) {
        writer.emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),metadata.getGetter(fieldName),metadata.getGetter(fieldName),NULLABLE_JAVA_TYPES.get(fieldType));
      }
 else {
        writer.emitStatement(""String_Node_Str"",metadata.getSetter(fieldName),metadata.getGetter(fieldName));
      }
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
}",0.9713954387321222
155820,"/** 
 * Instantiates and adds a new object to the realm
 * @param clazz The Class of the object to create
 * @return The new object
 * @throws RealmException An object could not be created
 */
public <E extends RealmObject>E createObject(Class<E> clazz){
  Table table;
  table=tables.get(clazz);
  if (table == null) {
    Class<?> generatedClass=getProxyClass(clazz);
    Method method=initTableMethods.get(generatedClass);
    if (method == null) {
      try {
        method=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
      }
 catch (      NoSuchMethodException e) {
        throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
      }
      initTableMethods.put(generatedClass,method);
    }
    try {
      table=(Table)method.invoke(null,transaction);
      tables.put(clazz,table);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
  }
  long rowIndex=table.addEmptyRow();
  return get(clazz,rowIndex);
}","/** 
 * Creates a new object inside the Realm with the Primary key value initially set. If the value violates the primary key constraint, no object will be added and and  {@link RealmException will be thrown}.
 * @param clazz The Class of the object to create
 * @param primaryKeyValue Value for the primary key field.
 * @return The new object
 * @throws {@link RealmException} if object could not be created.
 */
<E extends RealmObject>E createObject(Class<E> clazz,Object primaryKeyValue){
  Table table;
  table=tables.get(clazz);
  if (table == null) {
    Class<?> generatedClass=getProxyClass(clazz);
    Method method=initTableMethods.get(generatedClass);
    if (method == null) {
      try {
        method=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
      }
 catch (      NoSuchMethodException e) {
        throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
      }
      initTableMethods.put(generatedClass,method);
    }
    try {
      table=(Table)method.invoke(null,transaction);
      tables.put(clazz,table);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
  }
  long rowIndex=table.addEmptyRowWithPrimaryKey(primaryKeyValue);
  return get(clazz,rowIndex);
}",0.8614120283899888
155821,"/** 
 * Returns a typed @{link io.realm.RealmQuery}, which can be used to query for specific objects of this type.
 * @return A typed RealmQuery
 * @see io.realm.RealmQuery
 */
public RealmQuery<E> where(){
  realm.checkIfValid();
  return new RealmQuery<E>(this,classSpec);
}","/** 
 * Returns a typed   {@link io.realm.RealmQuery}, which can be used to query for specific objects of this type.
 * @return A typed RealmQuery
 * @see io.realm.RealmQuery
 */
public RealmQuery<E> where(){
  realm.checkIfValid();
  return new RealmQuery<E>(this,classSpec);
}",0.9927797833935018
155822,"/** 
 * Sort existing {link io.realm.RealmResults} using three fields.
 * @param fieldName1 first field name.
 * @param sortAscending1 sort order for first field.
 * @param fieldName2 second field name.
 * @param sortAscending2 sort order for second field.
 * @param fieldName3 third field name.
 * @param sortAscending3 sort order for third field.
 * @throws java.lang.IllegalArgumentException if a field name does not exist.
 */
public void sort(String fieldName1,boolean sortAscending1,String fieldName2,boolean sortAscending2,String fieldName3,boolean sortAscending3){
  sort(new String[]{fieldName1,fieldName2,fieldName3},new boolean[]{sortAscending1,sortAscending2,sortAscending3});
}","/** 
 * Sort existing   {@link io.realm.RealmResults} using three fields.
 * @param fieldName1 first field name.
 * @param sortAscending1 sort order for first field.
 * @param fieldName2 second field name.
 * @param sortAscending2 sort order for second field.
 * @param fieldName3 third field name.
 * @param sortAscending3 sort order for third field.
 * @throws java.lang.IllegalArgumentException if a field name does not exist.
 */
public void sort(String fieldName1,boolean sortAscending1,String fieldName2,boolean sortAscending2,String fieldName3,boolean sortAscending3){
  sort(new String[]{fieldName1,fieldName2,fieldName3},new boolean[]{sortAscending1,sortAscending2,sortAscending3});
}",0.9978308026030368
155823,"/** 
 * Override the standard behavior of all classes extended RealmObject being part of the schema. Use this method to define the schema as only the classes given here. This class must be called before calling   {@link #getInstance(android.content.Context)}If   {@code null} is given as parameter, the Schema is reset to use all known classes.
 */
static void setSchema(Class<? extends RealmObject>... schemaClass){
  customSchema.clear();
  if (schemaClass != null) {
    for (int i=0; i < schemaClass.length; i++) {
      customSchema.add(schemaClass[i]);
    }
  }
}","/** 
 * Override the standard behavior of all classes extended RealmObject being part of the schema. Use this method to define the schema as only the classes given here. This class must be called before calling   {@link #getInstance(android.content.Context)}If   {@code null} is given as parameter, the Schema is reset to use all known classes.
 */
@SafeVarargs static void setSchema(Class<? extends RealmObject>... schemaClass){
  customSchema.clear();
  if (schemaClass != null) {
    Collections.addAll(customSchema,schemaClass);
  }
}",0.8916967509025271
155824,"/** 
 * Starts a write transaction, this must be closed with   {@link io.realm.Realm#commitTransaction()}or aborted by @{link io.realm.Realm#cancelTransaction()}. Write transactions are used to atomically create, update and delete objects within a realm. <br> Before beginning the write transaction, @{link io.realm.Realm#beginTransaction()} updates the realm in the case of pending updates from other threads. <br> Notice: it is not possible to nest write transactions. If you start a write transaction within a write transaction an exception is thrown. <br>
 * @throws java.lang.IllegalStateException If already in a write transaction or incorrect thread.
 */
public void beginTransaction(){
  checkIfValid();
  transaction.promoteToWrite();
}","/** 
 * Starts a write transaction, this must be closed with   {@link io.realm.Realm#commitTransaction()}or aborted by   {@link io.realm.Realm#cancelTransaction()}. Write transactions are used to atomically create, update and delete objects within a realm. <br> Before beginning the write transaction,   {@link io.realm.Realm#beginTransaction()} updates therealm in the case of pending updates from other threads. <br> Notice: it is not possible to nest write transactions. If you start a write transaction within a write transaction an exception is thrown. <br>
 * @throws java.lang.IllegalStateException If already in a write transaction or incorrect thread.
 */
public void beginTransaction(){
  checkIfValid();
  transaction.promoteToWrite();
}",0.9939718687206964
155825,"/** 
 * All changes since @{link io.realm.Realm#beginTransaction()} are persisted to disk and the realm reverts back to being read-only. An event is sent to notify all other realm instances that a change has occurred. When the event is received, the other realms will get their objects and @{link io.realm.RealmResults} updated to reflect the changes from this commit.
 * @throws java.lang.IllegalStateException If the write transaction is in an invalid state or incorrect thread.
 */
public void commitTransaction(){
  checkIfValid();
  transaction.commitAndContinueAsRead();
  for (  Map.Entry<Handler,Integer> handlerIntegerEntry : handlers.entrySet()) {
    Handler handler=handlerIntegerEntry.getKey();
    int realmId=handlerIntegerEntry.getValue();
    if (realmId == id && !handler.hasMessages(REALM_CHANGED) && handler.getLooper().getThread().isAlive() && !handler.equals(this.handler)) {
      handler.sendEmptyMessage(REALM_CHANGED);
    }
  }
  sendNotifications();
}","/** 
 * All changes since   {@link io.realm.Realm#beginTransaction()} are persisted to disk and therealm reverts back to being read-only. An event is sent to notify all other realm instances that a change has occurred. When the event is received, the other realms will get their objects and  {@link io.realm.RealmResults} updated to reflectthe changes from this commit.
 * @throws java.lang.IllegalStateException If the write transaction is in an invalid state or incorrect thread.
 */
public void commitTransaction(){
  checkIfValid();
  transaction.commitAndContinueAsRead();
  for (  Map.Entry<Handler,Integer> handlerIntegerEntry : handlers.entrySet()) {
    Handler handler=handlerIntegerEntry.getKey();
    int realmId=handlerIntegerEntry.getValue();
    if (realmId == id && !handler.hasMessages(REALM_CHANGED) && handler.getLooper().getThread().isAlive() && !handler.equals(this.handler)) {
      handler.sendEmptyMessage(REALM_CHANGED);
    }
  }
  sendNotifications();
}",0.9954058192955588
155826,"/** 
 * Delete the Realm file from the filesystem for a custom named Realm. The realm must be unused and closed before calling this method.
 * @param context  an Android @{{@link android.content.Context}.
 * @param fileName the name of the custom Realm (i.e. ""myCustomRealm.realm"").
 * @return false if a file could not be deleted. The failing file will be logged.
 */
public static synchronized boolean deleteRealmFile(Context context,String fileName){
  boolean result=true;
  File writableFolder=context.getFilesDir();
  File realmFile=new File(writableFolder,fileName);
  int realmId=realmFile.getAbsolutePath().hashCode();
  AtomicInteger counter=openRealms.get(realmId);
  if (counter != null && counter.get() > 0) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  List<File> filesToDelete=Arrays.asList(realmFile,new File(writableFolder,fileName + ""String_Node_Str""));
  for (  File fileToDelete : filesToDelete) {
    if (fileToDelete.exists()) {
      boolean deleteResult=fileToDelete.delete();
      if (!deleteResult) {
        result=false;
        Log.w(TAG,""String_Node_Str"" + fileToDelete);
      }
    }
  }
  return result;
}","/** 
 * Delete the Realm file from the filesystem for a custom named Realm. The realm must be unused and closed before calling this method.
 * @param context  an Android {@link android.content.Context}.
 * @param fileName the name of the custom Realm (i.e. ""myCustomRealm.realm"").
 * @return false if a file could not be deleted. The failing file will be logged.
 */
public static synchronized boolean deleteRealmFile(Context context,String fileName){
  boolean result=true;
  File writableFolder=context.getFilesDir();
  File realmFile=new File(writableFolder,fileName);
  int realmId=realmFile.getAbsolutePath().hashCode();
  AtomicInteger counter=openRealms.get(realmId);
  if (counter != null && counter.get() > 0) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  List<File> filesToDelete=Arrays.asList(realmFile,new File(writableFolder,fileName + ""String_Node_Str""));
  for (  File fileToDelete : filesToDelete) {
    if (fileToDelete.exists()) {
      boolean deleteResult=fileToDelete.delete();
      if (!deleteResult) {
        result=false;
        Log.w(TAG,""String_Node_Str"" + fileToDelete);
      }
    }
  }
  return result;
}",0.9991496598639455
155827,"/** 
 * Realm static constructor. {link io.realm.close} must be called when you are done using the Realm instance. <p> It sets auto-refresh on if the current thread has a Looper, off otherwise.
 * @param writeableFolder a File object representing a writeable folder
 * @param fileName the name of the Realm file
 * @param key     a 64-byte encryption key
 * @return an instance of the Realm class
 * @throws RealmMigrationNeededException The model classes have been changed and the Realmmust be migrated
 * @throws RealmIOException              Error when accessing underlying file
 * @throws RealmException                Other errors
 */
@SuppressWarnings(""String_Node_Str"") public static Realm getInstance(File writeableFolder,String fileName,byte[] key){
  return Realm.create(writeableFolder,fileName,key);
}","/** 
 * Realm static constructor.  {@link #close()} must be called when you are done using the Realm instance.<p> It sets auto-refresh on if the current thread has a Looper, off otherwise.
 * @param writeableFolder a File object representing a writeable folder
 * @param fileName the name of the Realm file
 * @param key     a 64-byte encryption key
 * @return an instance of the Realm class
 * @throws RealmMigrationNeededException The model classes have been changed and the Realmmust be migrated
 * @throws RealmIOException              Error when accessing underlying file
 * @throws RealmException                Other errors
 */
@SuppressWarnings(""String_Node_Str"") public static Realm getInstance(File writeableFolder,String fileName,byte[] key){
  return Realm.create(writeableFolder,fileName,key);
}",0.9117828500925356
155828,"public static void emitFillJavaTypeWithJsonValue(String setter,String fieldName,String qualifiedFieldType,JavaWriter writer) throws IOException {
  if (JAVA_TO_JSON_TYPES.containsKey(qualifiedFieldType)) {
    writer.beginControlFlow(""String_Node_Str"",fieldName);
    JAVA_TO_JSON_TYPES.get(qualifiedFieldType).emitTypeConversion(setter,fieldName,qualifiedFieldType,writer);
    writer.endControlFlow();
  }
}","public static void emitFillJavaTypeWithJsonValue(String setter,String fieldName,String qualifiedFieldType,JavaWriter writer) throws IOException {
  JsonToRealmTypeConverter typeEmitter=JAVA_TO_JSON_TYPES.get(qualifiedFieldType);
  if (typeEmitter != null) {
    typeEmitter.emitTypeConversion(setter,fieldName,qualifiedFieldType,writer);
  }
}",0.5558510638297872
155829,"private void checkNativePtrNotZero(){
  if (this.nativePtr == 0) {
    throw new java.lang.OutOfMemoryError(""String_Node_Str"");
  }
}","private void checkNativePtrNotZero(){
  if (this.nativePtr == 0) {
    throw new IOError(new RealmIOException(""String_Node_Str""));
  }
}",0.8401486988847584
155830,"@SuppressWarnings(""String_Node_Str"") private static Realm createAndValidate(String absolutePath,byte[] key,boolean validateSchema,boolean autoRefresh){
  int id=absolutePath.hashCode();
  Map<Integer,Integer> localRefCount=referenceCount.get();
  Integer references=localRefCount.get(id);
  if (references == null) {
    references=0;
  }
  Map<Integer,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath.hashCode());
  if (realm != null) {
    localRefCount.put(id,references + 1);
    referenceCount.set(localRefCount);
    return realm;
  }
  realm=new Realm(absolutePath,key,autoRefresh);
  realms.put(absolutePath.hashCode(),realm);
  realmsCache.set(realms);
  if (validateSchema) {
    Class<?> validationClass;
    try {
      validationClass=Class.forName(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    Method getProxyClassesMethod;
    try {
      getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
    }
 catch (    NoSuchMethodException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    List<String> proxyClasses;
    try {
      proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    long version=realm.getVersion();
    boolean commitNeeded=false;
    try {
      realm.beginTransaction();
      if (version == UNVERSIONED) {
        realm.setVersion(0);
        commitNeeded=true;
      }
      for (      String className : proxyClasses) {
        String[] splitted=className.split(""String_Node_Str"");
        String modelClassName=splitted[splitted.length - 1];
        String generatedClassName=getProxyClassName(modelClassName);
        Class<?> generatedClass;
        try {
          generatedClass=Class.forName(generatedClassName);
        }
 catch (        ClassNotFoundException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        if (version == UNVERSIONED) {
          Method initTableMethod;
          try {
            initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
          try {
            initTableMethod.invoke(null,realm.transaction);
            commitNeeded=true;
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
        }
        Method validateMethod;
        try {
          validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        try {
          validateMethod.invoke(null,realm.transaction);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmMigrationNeededException(e.getMessage(),e);
        }
        Method fieldNamesMethod;
        try {
          fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        List<String> fieldNames;
        try {
          fieldNames=(List<String>)fieldNamesMethod.invoke(null);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
        for (        String fieldName : fieldNames) {
          long columnIndex=table.getColumnIndex(fieldName);
          if (columnIndex == -1) {
            throw new RealmMigrationNeededException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ modelClassName+ ""String_Node_Str"");
          }
          Map<String,Long> innerMap=columnIndices.get(modelClassName);
          if (innerMap == null) {
            innerMap=new HashMap<String,Long>();
          }
          innerMap.put(fieldName,columnIndex);
          columnIndices.put(modelClassName,innerMap);
        }
      }
    }
  finally {
      if (commitNeeded) {
        realm.commitTransaction();
      }
 else {
        realm.cancelTransaction();
      }
    }
  }
  localRefCount.put(id,references + 1);
  referenceCount.set(localRefCount);
  return realm;
}","@SuppressWarnings(""String_Node_Str"") private static Realm createAndValidate(String absolutePath,byte[] key,boolean validateSchema,boolean autoRefresh){
  int id=absolutePath.hashCode();
  Map<Integer,Integer> localRefCount=referenceCount.get();
  Integer references=localRefCount.get(id);
  if (references == null) {
    references=0;
  }
  Map<Integer,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath.hashCode());
  if (realm != null) {
    localRefCount.put(id,references + 1);
    return realm;
  }
  realm=new Realm(absolutePath,key,autoRefresh);
  realms.put(absolutePath.hashCode(),realm);
  realmsCache.set(realms);
  if (validateSchema) {
    Class<?> validationClass;
    try {
      validationClass=Class.forName(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    Method getProxyClassesMethod;
    try {
      getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
    }
 catch (    NoSuchMethodException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    List<String> proxyClasses;
    try {
      proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    long version=realm.getVersion();
    boolean commitNeeded=false;
    try {
      realm.beginTransaction();
      if (version == UNVERSIONED) {
        realm.setVersion(0);
        commitNeeded=true;
      }
      for (      String className : proxyClasses) {
        String[] splitted=className.split(""String_Node_Str"");
        String modelClassName=splitted[splitted.length - 1];
        String generatedClassName=getProxyClassName(modelClassName);
        Class<?> generatedClass;
        try {
          generatedClass=Class.forName(generatedClassName);
        }
 catch (        ClassNotFoundException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        if (version == UNVERSIONED) {
          Method initTableMethod;
          try {
            initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
          try {
            initTableMethod.invoke(null,realm.transaction);
            commitNeeded=true;
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
        }
        Method validateMethod;
        try {
          validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        try {
          validateMethod.invoke(null,realm.transaction);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmMigrationNeededException(e.getMessage(),e);
        }
        Method fieldNamesMethod;
        try {
          fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        List<String> fieldNames;
        try {
          fieldNames=(List<String>)fieldNamesMethod.invoke(null);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
        for (        String fieldName : fieldNames) {
          long columnIndex=table.getColumnIndex(fieldName);
          if (columnIndex == -1) {
            throw new RealmMigrationNeededException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ modelClassName+ ""String_Node_Str"");
          }
          Map<String,Long> innerMap=columnIndices.get(modelClassName);
          if (innerMap == null) {
            innerMap=new HashMap<String,Long>();
          }
          innerMap.put(fieldName,columnIndex);
          columnIndices.put(modelClassName,innerMap);
        }
      }
    }
  finally {
      if (commitNeeded) {
        realm.commitTransaction();
      }
 else {
        realm.cancelTransaction();
      }
    }
  }
  localRefCount.put(id,references + 1);
  return realm;
}",0.9929767693138845
155831,"/** 
 * Closes the Realm instance and all its resources. It's important to always remember to close Realm instances when you're done with it in order  not to leak memory, file descriptors or grow the size of Realm file out of measure.
 */
@Override public void close(){
  Map<Integer,Integer> localRefCount=referenceCount.get();
  Integer references=localRefCount.get(id);
  if (references == null) {
    references=0;
  }
  if (sharedGroup != null && references == 1) {
    realmsCache.get().remove(id);
    sharedGroup.close();
    sharedGroup=null;
  }
  localRefCount.put(id,references - 1);
  referenceCount.set(localRefCount);
  if (handler != null) {
    handlers.remove(handler);
  }
}","/** 
 * Closes the Realm instance and all its resources. It's important to always remember to close Realm instances when you're done with it in order  not to leak memory, file descriptors or grow the size of Realm file out of measure.
 */
@Override public void close(){
  Map<Integer,Integer> localRefCount=referenceCount.get();
  Integer references=localRefCount.get(id);
  if (references == null) {
    references=0;
  }
  if (sharedGroup != null && references == 1) {
    realmsCache.get().remove(id);
    sharedGroup.close();
    sharedGroup=null;
  }
  localRefCount.put(id,Math.max(0,references - 1));
  if (handler != null) {
    handlers.remove(handler);
    handler=null;
  }
}",0.95286439448876
155832,"/** 
 * Set the auto-refresh status of the Realm instance. Auto-refresh is a feature that enables automatic update of the current realm instance and all its derived objects (RealmResults and RealmObjects instances) when a commit is performed on a Realm acting on the same file in another thread. This feature is only available if the realm instance lives is a   {@link android.os.Looper} enabled thread.
 * @param autoRefresh true will turn auto-refresh on, false will turn it off.
 * @throws java.lang.IllegalStateException if trying to enable auto-refresh in a thread without Looper.
 */
public void setAutoRefresh(boolean autoRefresh){
  if (autoRefresh && Looper.myLooper() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (autoRefresh && !this.autoRefresh) {
    handler=new Handler(new RealmCallback());
    handlers.put(handler,id);
  }
 else   if (!autoRefresh && this.autoRefresh && handler != null) {
    handler.removeCallbacksAndMessages(null);
    handlers.remove(handler);
  }
  this.autoRefresh=autoRefresh;
}","/** 
 * Set the auto-refresh status of the Realm instance. Auto-refresh is a feature that enables automatic update of the current realm instance and all its derived objects (RealmResults and RealmObjects instances) when a commit is performed on a Realm acting on the same file in another thread. This feature is only available if the realm instance lives is a   {@link android.os.Looper} enabled thread.
 * @param autoRefresh true will turn auto-refresh on, false will turn it off.
 * @throws java.lang.IllegalStateException if trying to enable auto-refresh in a thread without Looper.
 */
public void setAutoRefresh(boolean autoRefresh){
  if (autoRefresh && Looper.myLooper() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (autoRefresh && !this.autoRefresh) {
    handler=new Handler(new RealmCallback());
    handlers.put(handler,id);
  }
 else   if (!autoRefresh && this.autoRefresh && handler != null) {
    handler.removeCallbacksAndMessages(null);
    handlers.remove(handler);
    handler=null;
  }
  this.autoRefresh=autoRefresh;
}",0.991509433962264
155833,"@Override public Boolean call() throws Exception {
  Looper.prepare();
  Realm realm=null;
  try {
    realm=Realm.getInstance(getContext());
    final RealmResults<Dog> dogs=realm.allObjects(Dog.class);
    assertEquals(0,dogs.size());
    realm.addChangeListener(new RealmChangeListener(){
      @Override public void onChange(){
        int c=counter.incrementAndGet();
        results.put(c,dogs.size());
      }
    }
);
    isReady.set(true);
    Looper.loop();
  }
  finally {
    if (realm != null) {
      realm.close();
    }
  }
  return true;
}","@Override public Boolean call() throws Exception {
  Looper.prepare();
  Realm realm=Realm.getInstance(getContext());
  backgroundLooperStarted.countDown();
  final RealmResults<Dog> dogs=realm.allObjects(Dog.class);
  if (dogs.size() != 0) {
    return false;
  }
  addHandlerMessages.await(1,TimeUnit.SECONDS);
  Handler threadHandler=null;
  for (  final Handler handler : Realm.handlers.keySet()) {
    if (Realm.handlers.get(handler).equals(realm.getPath().hashCode())) {
      threadHandler=handler;
      break;
    }
  }
  realm.close();
  threadHandler.post(new Runnable(){
    @Override public void run(){
      Looper.myLooper().quit();
    }
  }
);
  try {
    Looper.loop();
  }
 catch (  IllegalStateException e) {
    return false;
  }
  return true;
}",0.4323507180650038
155834,"/** 
 * Closes the Realm instance and all its resources. It's important to always remember to close Realm instances when you're done with it in order  not to leak memory, file descriptors or grow the size of Realm file out of measure.
 */
@Override public void close(){
  Map<Integer,Integer> localRefCount=referenceCount.get();
  Integer references=localRefCount.get(id);
  if (references == null) {
    references=0;
  }
  if (sharedGroup != null && references == 1) {
    realmsCache.get().remove(id);
    sharedGroup.close();
    sharedGroup=null;
  }
  localRefCount.put(id,references - 1);
  referenceCount.set(localRefCount);
  if (handler != null) {
    handlers.remove(handler);
  }
}","/** 
 * Closes the Realm instance and all its resources. It's important to always remember to close Realm instances when you're done with it in order  not to leak memory, file descriptors or grow the size of Realm file out of measure.
 */
@Override public void close(){
  Map<Integer,Integer> localRefCount=referenceCount.get();
  Integer references=localRefCount.get(id);
  if (references == null) {
    references=0;
  }
  if (sharedGroup != null && references == 1) {
    realmsCache.get().remove(id);
    sharedGroup.close();
    sharedGroup=null;
  }
  localRefCount.put(id,references - 1);
  referenceCount.set(localRefCount);
  if (handler != null) {
    removeHandler(handler);
  }
}",0.9884393063583816
155835,"/** 
 * Set the auto-refresh status of the Realm instance. Auto-refresh is a feature that enables automatic update of the current realm instance and all its derived objects (RealmResults and RealmObjects instances) when a commit is performed on a Realm acting on the same file in another thread. This feature is only available if the realm instance lives is a   {@link android.os.Looper} enabled thread.
 * @param autoRefresh true will turn auto-refresh on, false will turn it off.
 * @throws java.lang.IllegalStateException if trying to enable auto-refresh in a thread without Looper.
 */
public void setAutoRefresh(boolean autoRefresh){
  if (autoRefresh && Looper.myLooper() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (autoRefresh && !this.autoRefresh) {
    handler=new Handler(new RealmCallback());
    handlers.put(handler,id);
  }
 else   if (!autoRefresh && this.autoRefresh && handler != null) {
    handler.removeCallbacksAndMessages(null);
    handlers.remove(handler);
  }
  this.autoRefresh=autoRefresh;
}","/** 
 * Set the auto-refresh status of the Realm instance. Auto-refresh is a feature that enables automatic update of the current realm instance and all its derived objects (RealmResults and RealmObjects instances) when a commit is performed on a Realm acting on the same file in another thread. This feature is only available if the realm instance lives is a   {@link android.os.Looper} enabled thread.
 * @param autoRefresh true will turn auto-refresh on, false will turn it off.
 * @throws java.lang.IllegalStateException if trying to enable auto-refresh in a thread without Looper.
 */
public void setAutoRefresh(boolean autoRefresh){
  if (autoRefresh && Looper.myLooper() == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (autoRefresh && !this.autoRefresh) {
    handler=new Handler(new RealmCallback());
    handlers.put(handler,id);
  }
 else   if (!autoRefresh && this.autoRefresh && handler != null) {
    removeHandler(handler);
  }
  this.autoRefresh=autoRefresh;
}",0.9318403115871472
155836,"private long[] getColumnIndices(String fieldName,ColumnType fieldType){
  Table table=getTable().getTable();
  if (containsDot(fieldName)) {
    String[] names=splitString(fieldName);
    long[] columnIndices=new long[names.length];
    for (int i=0; i < names.length - 1; i++) {
      long index=table.getColumnIndex(names[i]);
      if (index < 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + names[i] + ""String_Node_Str"");
      }
      ColumnType type=table.getColumnType(index);
      if (type == ColumnType.LINK || type == ColumnType.LINK_LIST) {
        table=table.getLinkTarget(index);
        columnIndices[i]=index;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + names[i] + ""String_Node_Str"");
      }
    }
    columnIndices[names.length - 1]=table.getColumnIndex(names[names.length - 1]);
    if (fieldType != table.getColumnType(columnIndices[names.length - 1])) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",names[names.length - 1]));
    }
    return columnIndices;
  }
 else {
    if (columns.get(fieldName) == null) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName));
    }
    if (fieldType != table.getColumnType(columns.get(fieldName))) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName));
    }
    return new long[]{columns.get(fieldName)};
  }
}","private long[] getColumnIndices(String fieldName,ColumnType fieldType){
  Table table=getTable().getTable();
  if (containsDot(fieldName)) {
    String[] names=splitString(fieldName);
    long[] columnIndices=new long[names.length];
    for (int i=0; i < names.length - 1; i++) {
      long index=table.getColumnIndex(names[i]);
      if (index < 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + names[i] + ""String_Node_Str"");
      }
      ColumnType type=table.getColumnType(index);
      if (type == ColumnType.LINK || type == ColumnType.LINK_LIST) {
        table=table.getLinkTarget(index);
        columnIndices[i]=index;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + names[i] + ""String_Node_Str"");
      }
    }
    columnIndices[names.length - 1]=table.getColumnIndex(names[names.length - 1]);
    if (fieldType != table.getColumnType(columnIndices[names.length - 1])) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",names[names.length - 1]));
    }
    return columnIndices;
  }
 else {
    if (columns.get(fieldName) == null) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName));
    }
    ColumnType tableColumnType=table.getColumnType(columns.get(fieldName));
    if (fieldType != tableColumnType) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName,fieldType,tableColumnType));
    }
    return new long[]{columns.get(fieldName)};
  }
}",0.9554183813443072
155837,"TableOrView getTable(){
  if (realmList != null) {
    return realmList.getTable();
  }
 else {
    return realm.getTable(clazz);
  }
}","TableOrView getTable(){
  return realm.getTable(clazz);
}",0.59375
155838,"/** 
 * Create a RealmQuery instance from a @{link io.realm.RealmResults}.
 * @param realmList   The @{link io.realm.RealmResults} to query
 * @param clazz       The class to query
 * @throws java.lang.RuntimeException Any other error
 */
public RealmQuery(RealmResults realmList,Class<E> clazz){
  this.realmList=realmList;
  this.realm=realmList.getRealm();
  this.clazz=clazz;
  TableOrView dataStore=getTable();
  this.query=dataStore.where();
  for (int i=0; i < dataStore.getColumnCount(); i++) {
    this.columns.put(dataStore.getColumnName(i),i);
  }
}","RealmQuery(Realm realm,TableQuery query,Class<E> clazz){
  this.realm=realm;
  this.clazz=clazz;
  this.query=query;
  TableOrView dataStore=getTable();
  for (int i=0; i < dataStore.getColumnCount(); i++) {
    this.columns.put(dataStore.getColumnName(i),i);
  }
}",0.4266666666666667
155839,"private void emitEqualsMethod(JavaWriter writer) throws IOException {
  String proxyClassName=className + PROXY_SUFFIX;
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),""String_Node_Str"",""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",proxyClassName,className,proxyClassName);
  writer.emitEmptyLine();
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",className);
  writer.emitStatement(""String_Node_Str"");
  writer.emitEmptyLine();
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",className);
  writer.emitStatement(""String_Node_Str"");
  writer.emitEmptyLine();
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
}","private void emitEqualsMethod(JavaWriter writer) throws IOException {
  String proxyClassName=className + PROXY_SUFFIX;
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),""String_Node_Str"",""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",proxyClassName,className,proxyClassName);
  writer.emitEmptyLine();
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",className);
  writer.emitStatement(""String_Node_Str"");
  writer.emitEmptyLine();
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",className);
  writer.emitStatement(""String_Node_Str"");
  writer.emitEmptyLine();
  writer.emitStatement(""String_Node_Str"",className);
  writer.emitEmptyLine();
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
}",0.9348171701112876
155840,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  AllTypesRealmProxy aAllTypes=(AllTypesRealmProxy)o;
  String path=realm.getPath();
  String otherPath=aAllTypes.realm.getPath();
  if (path != null ? !path.equals(otherPath) : otherPath != null)   return false;
  ;
  String tableName=row.getTable().getName();
  String otherTableName=aAllTypes.row.getTable().getName();
  if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  AllTypesRealmProxy aAllTypes=(AllTypesRealmProxy)o;
  String path=realm.getPath();
  String otherPath=aAllTypes.realm.getPath();
  if (path != null ? !path.equals(otherPath) : otherPath != null)   return false;
  ;
  String tableName=row.getTable().getName();
  String otherTableName=aAllTypes.row.getTable().getName();
  if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null)   return false;
  if (row.getIndex() != aAllTypes.row.getIndex())   return false;
  return true;
}",0.9459901800327332
155841,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  BooleansRealmProxy aBooleans=(BooleansRealmProxy)o;
  String path=realm.getPath();
  String otherPath=aBooleans.realm.getPath();
  if (path != null ? !path.equals(otherPath) : otherPath != null)   return false;
  ;
  String tableName=row.getTable().getName();
  String otherTableName=aBooleans.row.getTable().getName();
  if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  BooleansRealmProxy aBooleans=(BooleansRealmProxy)o;
  String path=realm.getPath();
  String otherPath=aBooleans.realm.getPath();
  if (path != null ? !path.equals(otherPath) : otherPath != null)   return false;
  ;
  String tableName=row.getTable().getName();
  String otherTableName=aBooleans.row.getTable().getName();
  if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null)   return false;
  if (row.getIndex() != aBooleans.row.getIndex())   return false;
  return true;
}",0.9459901800327332
155842,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  SimpleRealmProxy aSimple=(SimpleRealmProxy)o;
  String path=realm.getPath();
  String otherPath=aSimple.realm.getPath();
  if (path != null ? !path.equals(otherPath) : otherPath != null)   return false;
  ;
  String tableName=row.getTable().getName();
  String otherTableName=aSimple.row.getTable().getName();
  if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null)   return false;
  return true;
}","@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  SimpleRealmProxy aSimple=(SimpleRealmProxy)o;
  String path=realm.getPath();
  String otherPath=aSimple.realm.getPath();
  if (path != null ? !path.equals(otherPath) : otherPath != null)   return false;
  ;
  String tableName=row.getTable().getName();
  String otherTableName=aSimple.row.getTable().getName();
  if (tableName != null ? !tableName.equals(otherTableName) : otherTableName != null)   return false;
  if (row.getIndex() != aSimple.row.getIndex())   return false;
  return true;
}",0.9466666666666668
155843,"@Override protected Integer doInBackground(Void... params){
  Realm realm=Realm.getInstance(getActivity());
  realm.beginTransaction();
  realm.clear(Score.class);
  for (int i=0; i < TEST_OBJECTS; i++) {
    if (isCancelled())     return -1;
    Score score=realm.createObject(Score.class);
    score.setName(""String_Node_Str"" + i);
    score.setScore(i);
    publishProgress(i);
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  realm.commitTransaction();
  Number sum=realm.allObjects(Score.class).sum(""String_Node_Str"");
  realm.close();
  return sum.intValue();
}","@Override protected Integer doInBackground(Void... params){
  Realm realm=Realm.getInstance(getActivity());
  realm.beginTransaction();
  realm.clear(Score.class);
  for (int i=0; i < TEST_OBJECTS; i++) {
    if (isCancelled())     break;
    Score score=realm.createObject(Score.class);
    score.setName(""String_Node_Str"" + i);
    score.setScore(i);
    publishProgress(i);
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
    }
  }
  realm.commitTransaction();
  Number sum=realm.allObjects(Score.class).sum(""String_Node_Str"");
  realm.close();
  return sum.intValue();
}",0.966908797417272
155844,"public void testFailingSetAutoRefreshOnNonLooperThread() throws ExecutionException, InterruptedException {
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  Future<Boolean> future=executorService.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      Realm realm=Realm.getInstance(getContext(),false);
      boolean autoRefresh=realm.isAutoRefresh();
      assertFalse(autoRefresh);
      try {
        realm.setAutoRefresh(true);
        realm.close();
        return false;
      }
 catch (      IllegalStateException ignored) {
        realm.close();
        return true;
      }
    }
  }
);
  assertTrue(future.get());
  assertTrue(Realm.realmsCache.get().isEmpty());
}","public void testFailingSetAutoRefreshOnNonLooperThread() throws ExecutionException, InterruptedException {
  ExecutorService executorService=Executors.newSingleThreadExecutor();
  Future<Boolean> future=executorService.submit(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      Realm realm=Realm.getInstance(getContext(),false);
      boolean autoRefresh=realm.isAutoRefresh();
      assertFalse(autoRefresh);
      try {
        realm.setAutoRefresh(true);
        return false;
      }
 catch (      IllegalStateException ignored) {
        return true;
      }
 finally {
        realm.close();
      }
    }
  }
);
  assertTrue(future.get());
  assertTrue(Realm.realmsCache.get().isEmpty());
}",0.9399727148703956
155845,"@Override protected void setUp() throws InterruptedException {
  boolean result=Realm.deleteRealmFile(getContext());
  assertTrue(result);
  testRealm=Realm.getInstance(getContext());
  testRealm.beginTransaction();
  testRealm.allObjects(AllTypes.class).clear();
  for (int i=0; i < TEST_DATA_SIZE; ++i) {
    AllTypes allTypes=testRealm.createObject(AllTypes.class);
    allTypes.setColumnBoolean((i % 2) == 0);
    allTypes.setColumnBinary(new byte[]{1,2,3});
    allTypes.setColumnDate(new Date((long)1000 * i));
    allTypes.setColumnDouble(3.1415 + i);
    allTypes.setColumnFloat(1.234567f + i);
    allTypes.setColumnString(""String_Node_Str"" + i);
    allTypes.setColumnLong(i);
  }
  testRealm.commitTransaction();
}","@Override protected void setUp() throws InterruptedException {
  boolean result=Realm.deleteRealmFile(getContext());
  assertTrue(result);
  testRealm=Realm.getInstance(getContext());
  testRealm.beginTransaction();
  testRealm.allObjects(AllTypes.class).clear();
  testRealm.allObjects(NonLatinFieldNames.class).clear();
  for (int i=0; i < TEST_DATA_SIZE; ++i) {
    AllTypes allTypes=testRealm.createObject(AllTypes.class);
    allTypes.setColumnBoolean((i % 2) == 0);
    allTypes.setColumnBinary(new byte[]{1,2,3});
    allTypes.setColumnDate(new Date((long)1000 * i));
    allTypes.setColumnDouble(3.1415 + i);
    allTypes.setColumnFloat(1.234567f + i);
    allTypes.setColumnString(""String_Node_Str"" + i);
    allTypes.setColumnLong(i);
    NonLatinFieldNames nonLatinFieldNames=testRealm.createObject(NonLatinFieldNames.class);
    nonLatinFieldNames.set델타(i);
    nonLatinFieldNames.setΔέλτα(i);
  }
  testRealm.commitTransaction();
}",0.8687837028160575
155846,"@Override protected void setUp() throws InterruptedException {
  boolean result=Realm.deleteRealmFile(getContext());
  assertTrue(result);
  testRealm=Realm.getInstance(getContext());
  testRealm.beginTransaction();
  testRealm.allObjects(AllTypes.class).clear();
  for (int i=0; i < TEST_DATA_SIZE; ++i) {
    AllTypes allTypes=testRealm.createObject(AllTypes.class);
    allTypes.setColumnBoolean((i % 2) == 0);
    allTypes.setColumnBinary(new byte[]{1,2,3});
    allTypes.setColumnDate(new Date((long)1000 * i));
    allTypes.setColumnDouble(3.1415 + i);
    allTypes.setColumnFloat(1.234567f + i);
    allTypes.setColumnString(""String_Node_Str"" + i);
    allTypes.setColumnLong(i);
  }
  testRealm.commitTransaction();
}","@Override protected void setUp() throws InterruptedException {
  boolean result=Realm.deleteRealmFile(getContext());
  assertTrue(result);
  testRealm=Realm.getInstance(getContext());
  testRealm.beginTransaction();
  testRealm.allObjects(AllTypes.class).clear();
  testRealm.allObjects(NonLatinFieldNames.class).clear();
  for (int i=0; i < TEST_DATA_SIZE; ++i) {
    AllTypes allTypes=testRealm.createObject(AllTypes.class);
    allTypes.setColumnBoolean((i % 2) == 0);
    allTypes.setColumnBinary(new byte[]{1,2,3});
    allTypes.setColumnDate(new Date((long)1000 * i));
    allTypes.setColumnDouble(3.1415 + i);
    allTypes.setColumnFloat(1.234567f + i);
    allTypes.setColumnString(""String_Node_Str"" + i);
    allTypes.setColumnLong(i);
    NonLatinFieldNames nonLatinFieldNames=testRealm.createObject(NonLatinFieldNames.class);
    nonLatinFieldNames.set델타(i);
    nonLatinFieldNames.setΔέλτα(i);
  }
  testRealm.commitTransaction();
}",0.8687837028160575
155847,"public void testSortWithAdapter(){
  RealmResults<AllTypes> resultList=testRealm.where(AllTypes.class).findAll().sort(FIELD_STRING,RealmResults.SORT_ORDER_DECENDING);
  RealmAdapter realmAdapter=new RealmAdapter(getContext(),resultList,automaticUpdate);
  assertEquals(resultList.first(),realmAdapter.getRealmResults().first());
  assertEquals(resultList.size(),realmAdapter.getRealmResults().size());
  realmAdapter.updateRealmResults(realmAdapter.getRealmResults().sort(FIELD_STRING));
  assertEquals(resultList.first(),realmAdapter.getRealmResults().first());
  assertEquals(resultList.size(),realmAdapter.getRealmResults().size());
}","public void testSortWithAdapter(){
  RealmResults<AllTypes> resultList=testRealm.where(AllTypes.class).findAll().sort(FIELD_STRING,RealmResults.SORT_ORDER_DECENDING);
  RealmAdapter realmAdapter=new RealmAdapter(getContext(),resultList,automaticUpdate);
  assertEquals(resultList.first(),realmAdapter.getRealmResults().first());
  assertEquals(resultList.size(),realmAdapter.getRealmResults().size());
  realmAdapter.updateRealmResults(realmAdapter.getRealmResults().sort(FIELD_STRING));
  assertEquals(resultList.last(),realmAdapter.getRealmResults().first());
  assertEquals(resultList.size(),realmAdapter.getRealmResults().size());
}",0.8782403770620582
155848,"private long[] getColumnIndices(String fieldName,ColumnType fieldType){
  Table table=(Table)getTable();
  if (containsDot(fieldName)) {
    String[] names=splitString(fieldName);
    long[] columnIndices=new long[names.length];
    for (int i=0; i < names.length - 1; i++) {
      long index=table.getColumnIndex(names[i]);
      ColumnType type=table.getColumnType(index);
      if (type == ColumnType.LINK || type == ColumnType.LINK_LIST) {
        table=table.getLinkTarget(index);
        columnIndices[i]=index;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + names[i] + ""String_Node_Str"");
      }
    }
    columnIndices[names.length - 1]=table.getColumnIndex(names[names.length - 1]);
    if (fieldType != table.getColumnType(columnIndices[names.length - 1])) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",names[names.length - 1]));
    }
    return columnIndices;
  }
 else {
    if (fieldType != table.getColumnType(columns.get(fieldName))) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName));
    }
    return new long[]{columns.get(fieldName)};
  }
}","private long[] getColumnIndices(String fieldName,ColumnType fieldType){
  Table table=(Table)getTable();
  if (containsDot(fieldName)) {
    String[] names=splitString(fieldName);
    long[] columnIndices=new long[names.length];
    for (int i=0; i < names.length - 1; i++) {
      long index=table.getColumnIndex(names[i]);
      if (index < 0) {
        throw new IllegalArgumentException(""String_Node_Str"" + names[i] + ""String_Node_Str"");
      }
      ColumnType type=table.getColumnType(index);
      if (type == ColumnType.LINK || type == ColumnType.LINK_LIST) {
        table=table.getLinkTarget(index);
        columnIndices[i]=index;
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"" + names[i] + ""String_Node_Str"");
      }
    }
    columnIndices[names.length - 1]=table.getColumnIndex(names[names.length - 1]);
    if (fieldType != table.getColumnType(columnIndices[names.length - 1])) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",names[names.length - 1]));
    }
    return columnIndices;
  }
 else {
    if (fieldType != table.getColumnType(columns.get(fieldName))) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",fieldName));
    }
    return new long[]{columns.get(fieldName)};
  }
}",0.9487914789020891
155849,"private static Realm createAndValidate(String absolutePath,byte[] key,boolean validateSchema,boolean autoRefresh){
  Map<Integer,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath);
  if (realm != null) {
    return realm;
  }
  realm=new Realm(absolutePath,key,autoRefresh);
  realms.put(new Integer(absolutePath.hashCode()),realm);
  realmsCache.set(realms);
  if (validateSchema) {
    Class<?> validationClass;
    try {
      validationClass=Class.forName(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    Method getProxyClassesMethod;
    try {
      getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
    }
 catch (    NoSuchMethodException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    List<String> proxyClasses;
    try {
      proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    long version=realm.getVersion();
    try {
      realm.beginTransaction();
      if (version == UNVERSIONED) {
        realm.setVersion(0);
      }
      for (      String className : proxyClasses) {
        String[] splitted=className.split(""String_Node_Str"");
        String modelClassName=splitted[splitted.length - 1];
        String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
        Class<?> generatedClass;
        try {
          generatedClass=Class.forName(generatedClassName);
        }
 catch (        ClassNotFoundException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        if (version == UNVERSIONED) {
          Method initTableMethod;
          try {
            initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
          try {
            initTableMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
        }
        Method validateMethod;
        try {
          validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        try {
          validateMethod.invoke(null,realm.transaction);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmMigrationNeededException(e.getMessage(),e);
        }
        Method fieldNamesMethod;
        try {
          fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        List<String> fieldNames;
        try {
          fieldNames=(List<String>)fieldNamesMethod.invoke(null);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
        for (        String fieldName : fieldNames) {
          long columnIndex=table.getColumnIndex(fieldName);
          if (columnIndex == -1) {
            throw new RealmMigrationNeededException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ modelClassName+ ""String_Node_Str"");
          }
          Map<String,Long> innerMap=columnIndices.get(modelClassName);
          if (innerMap == null) {
            innerMap=new HashMap<String,Long>();
          }
          innerMap.put(fieldName,columnIndex);
          columnIndices.put(modelClassName,innerMap);
        }
      }
    }
  finally {
      realm.commitTransaction();
    }
  }
  return realm;
}","private static Realm createAndValidate(String absolutePath,byte[] key,boolean validateSchema,boolean autoRefresh){
  Map<Integer,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath.hashCode());
  if (realm != null) {
    return realm;
  }
  realm=new Realm(absolutePath,key,autoRefresh);
  realms.put(new Integer(absolutePath.hashCode()),realm);
  realmsCache.set(realms);
  if (validateSchema) {
    Class<?> validationClass;
    try {
      validationClass=Class.forName(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    Method getProxyClassesMethod;
    try {
      getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
    }
 catch (    NoSuchMethodException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    List<String> proxyClasses;
    try {
      proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    long version=realm.getVersion();
    try {
      realm.beginTransaction();
      if (version == UNVERSIONED) {
        realm.setVersion(0);
      }
      for (      String className : proxyClasses) {
        String[] splitted=className.split(""String_Node_Str"");
        String modelClassName=splitted[splitted.length - 1];
        String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
        Class<?> generatedClass;
        try {
          generatedClass=Class.forName(generatedClassName);
        }
 catch (        ClassNotFoundException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        if (version == UNVERSIONED) {
          Method initTableMethod;
          try {
            initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
          try {
            initTableMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
        }
        Method validateMethod;
        try {
          validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        try {
          validateMethod.invoke(null,realm.transaction);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmMigrationNeededException(e.getMessage(),e);
        }
        Method fieldNamesMethod;
        try {
          fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        List<String> fieldNames;
        try {
          fieldNames=(List<String>)fieldNamesMethod.invoke(null);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
        for (        String fieldName : fieldNames) {
          long columnIndex=table.getColumnIndex(fieldName);
          if (columnIndex == -1) {
            throw new RealmMigrationNeededException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ modelClassName+ ""String_Node_Str"");
          }
          Map<String,Long> innerMap=columnIndices.get(modelClassName);
          if (innerMap == null) {
            innerMap=new HashMap<String,Long>();
          }
          innerMap.put(fieldName,columnIndex);
          columnIndices.put(modelClassName,innerMap);
        }
      }
    }
  finally {
      realm.commitTransaction();
    }
  }
  return realm;
}",0.9989131508744196
155850,"@SuppressWarnings(""String_Node_Str"") private static Realm createAndValidate(String absolutePath,byte[] key,boolean validateSchema,boolean autoRefresh){
  Map<Integer,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath.hashCode());
  if (realm != null) {
    return realm;
  }
  realm=new Realm(absolutePath,key,autoRefresh);
  realms.put(absolutePath.hashCode(),realm);
  realmsCache.set(realms);
  if (validateSchema) {
    Class<?> validationClass;
    try {
      validationClass=Class.forName(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    Method getProxyClassesMethod;
    try {
      getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
    }
 catch (    NoSuchMethodException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    List<String> proxyClasses;
    try {
      proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    long version=realm.getVersion();
    try {
      realm.beginTransaction();
      if (version == UNVERSIONED) {
        realm.setVersion(0);
      }
      for (      String className : proxyClasses) {
        String[] splitted=className.split(""String_Node_Str"");
        String modelClassName=splitted[splitted.length - 1];
        String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
        Class<?> generatedClass;
        try {
          generatedClass=Class.forName(generatedClassName);
        }
 catch (        ClassNotFoundException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        if (version == UNVERSIONED) {
          Method initTableMethod;
          try {
            initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
          try {
            initTableMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
        }
        Method validateMethod;
        try {
          validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        try {
          validateMethod.invoke(null,realm.transaction);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmMigrationNeededException(e.getMessage(),e);
        }
        Method fieldNamesMethod;
        try {
          fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        List<String> fieldNames;
        try {
          fieldNames=(List<String>)fieldNamesMethod.invoke(null);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
        for (        String fieldName : fieldNames) {
          long columnIndex=table.getColumnIndex(fieldName);
          if (columnIndex == -1) {
            throw new RealmMigrationNeededException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ modelClassName+ ""String_Node_Str"");
          }
          Map<String,Long> innerMap=columnIndices.get(modelClassName);
          if (innerMap == null) {
            innerMap=new HashMap<String,Long>();
          }
          innerMap.put(fieldName,columnIndex);
          columnIndices.put(modelClassName,innerMap);
        }
      }
    }
  finally {
      realm.commitTransaction();
    }
  }
  return realm;
}","@SuppressWarnings(""String_Node_Str"") private static Realm createAndValidate(String absolutePath,byte[] key,boolean validateSchema,boolean autoRefresh){
  Map<Integer,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath);
  if (realm != null) {
    return realm;
  }
  realm=new Realm(absolutePath,key,autoRefresh);
  realms.put(absolutePath.hashCode(),realm);
  realmsCache.set(realms);
  if (validateSchema) {
    Class<?> validationClass;
    try {
      validationClass=Class.forName(""String_Node_Str"");
    }
 catch (    ClassNotFoundException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    Method getProxyClassesMethod;
    try {
      getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
    }
 catch (    NoSuchMethodException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    List<String> proxyClasses;
    try {
      proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
    }
 catch (    IllegalAccessException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
catch (    InvocationTargetException e) {
      throw new RealmException(""String_Node_Str"" + APT_NOT_EXECUTED_MESSAGE);
    }
    long version=realm.getVersion();
    try {
      realm.beginTransaction();
      if (version == UNVERSIONED) {
        realm.setVersion(0);
      }
      for (      String className : proxyClasses) {
        String[] splitted=className.split(""String_Node_Str"");
        String modelClassName=splitted[splitted.length - 1];
        String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
        Class<?> generatedClass;
        try {
          generatedClass=Class.forName(generatedClassName);
        }
 catch (        ClassNotFoundException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        if (version == UNVERSIONED) {
          Method initTableMethod;
          try {
            initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
          try {
            initTableMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
          }
        }
        Method validateMethod;
        try {
          validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        try {
          validateMethod.invoke(null,realm.transaction);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmMigrationNeededException(e.getMessage(),e);
        }
        Method fieldNamesMethod;
        try {
          fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        List<String> fieldNames;
        try {
          fieldNames=(List<String>)fieldNamesMethod.invoke(null);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
catch (        InvocationTargetException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str""+ APT_NOT_EXECUTED_MESSAGE);
        }
        Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
        for (        String fieldName : fieldNames) {
          long columnIndex=table.getColumnIndex(fieldName);
          if (columnIndex == -1) {
            throw new RealmMigrationNeededException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ modelClassName+ ""String_Node_Str"");
          }
          Map<String,Long> innerMap=columnIndices.get(modelClassName);
          if (innerMap == null) {
            innerMap=new HashMap<String,Long>();
          }
          innerMap.put(fieldName,columnIndex);
          columnIndices.put(modelClassName,innerMap);
        }
      }
    }
  finally {
      realm.commitTransaction();
    }
  }
  return realm;
}",0.9989182810502508
155851,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  RealmVersionChecker updateChecker=new RealmVersionChecker(processingEnv);
  updateChecker.executeRealmVersionUpdate();
  for (  Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
    String className;
    String packageName;
    List<VariableElement> fields=new ArrayList<VariableElement>();
    List<VariableElement> indexedFields=new ArrayList<VariableElement>();
    List<String> expectedGetters=new ArrayList<String>();
    List<String> expectedSetters=new ArrayList<String>();
    List<ExecutableElement> methods=new ArrayList<ExecutableElement>();
    if (!classElement.getKind().equals(ElementKind.CLASS)) {
      error(""String_Node_Str"",classElement);
    }
    TypeElement typeElement=(TypeElement)classElement;
    className=typeElement.getSimpleName().toString();
    if (typeElement.toString().endsWith(""String_Node_Str"") || typeElement.toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    note(""String_Node_Str"" + className);
    classesToValidate.add(typeElement.toString());
    Element enclosingElement=typeElement.getEnclosingElement();
    if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
      error(""String_Node_Str"",classElement);
    }
    TypeElement parentElement=(TypeElement)processingEnv.getTypeUtils().asElement(typeElement.getSuperclass());
    if (!parentElement.toString().endsWith(""String_Node_Str"")) {
      error(""String_Node_Str"",classElement);
    }
    PackageElement packageElement=(PackageElement)enclosingElement;
    packageName=packageElement.getQualifiedName().toString();
    for (    Element element : typeElement.getEnclosedElements()) {
      ElementKind elementKind=element.getKind();
      if (elementKind.equals(ElementKind.FIELD)) {
        VariableElement variableElement=(VariableElement)element;
        String fieldName=variableElement.getSimpleName().toString();
        if (variableElement.getAnnotation(Ignore.class) != null) {
          continue;
        }
        if (variableElement.getAnnotation(Index.class) != null) {
          String elementTypeCanonicalName=variableElement.asType().toString();
          if (elementTypeCanonicalName.equals(""String_Node_Str"")) {
            indexedFields.add(variableElement);
          }
 else {
            error(""String_Node_Str"" + element);
            return true;
          }
        }
        if (!variableElement.getModifiers().contains(Modifier.PRIVATE)) {
          error(""String_Node_Str"",variableElement);
        }
        fields.add(variableElement);
        expectedGetters.add(fieldName);
        expectedSetters.add(fieldName);
      }
 else       if (elementKind.equals(ElementKind.METHOD)) {
        ExecutableElement executableElement=(ExecutableElement)element;
        methods.add(executableElement);
      }
    }
    List<String> fieldNames=new ArrayList<String>();
    for (    VariableElement field : fields) {
      fieldNames.add(field.getSimpleName().toString());
    }
    for (    ExecutableElement executableElement : methods) {
      Set<Modifier> modifiers=executableElement.getModifiers();
      if (modifiers.contains(Modifier.STATIC)) {
        continue;
      }
 else       if (!modifiers.contains(Modifier.PUBLIC)) {
        error(""String_Node_Str"",executableElement);
      }
      String methodName=executableElement.getSimpleName().toString();
      if (methodName.startsWith(""String_Node_Str"") || methodName.startsWith(""String_Node_Str"")) {
        boolean found=false;
        if (methodName.startsWith(""String_Node_Str"")) {
          String methodMinusIs=methodName.substring(2);
          String methodMinusIsCapitalised=lowerFirstChar(methodMinusIs);
          if (fieldNames.contains(methodName)) {
            expectedGetters.remove(methodName);
            found=true;
          }
 else           if (fieldNames.contains(methodMinusIs)) {
            expectedGetters.remove(methodMinusIs);
            found=true;
          }
 else           if (fieldNames.contains(methodMinusIsCapitalised)) {
            expectedGetters.remove(methodMinusIsCapitalised);
            found=true;
          }
        }
        if (!found && methodName.startsWith(""String_Node_Str"")) {
          String methodMinusGet=methodName.substring(3);
          String methodMinusGetCapitalised=lowerFirstChar(methodMinusGet);
          if (fieldNames.contains(methodMinusGet)) {
            expectedGetters.remove(methodMinusGet);
            found=true;
          }
 else           if (fieldNames.contains(methodMinusGetCapitalised)) {
            expectedGetters.remove(methodMinusGetCapitalised);
            found=true;
          }
        }
        if (!found) {
          note(String.format(""String_Node_Str"",methodName));
        }
      }
 else       if (methodName.startsWith(""String_Node_Str"")) {
        boolean found=false;
        String methodMinusSet=methodName.substring(3);
        String methodMinusSetCapitalised=lowerFirstChar(methodMinusSet);
        if (fieldNames.contains(methodMinusSet)) {
          expectedSetters.remove(methodMinusSet);
          found=true;
        }
 else         if (fieldNames.contains(methodMinusSetCapitalised)) {
          expectedSetters.remove(methodMinusSetCapitalised);
          found=true;
        }
        if (!found) {
          note(String.format(""String_Node_Str"",methodName));
        }
      }
 else {
        error(""String_Node_Str"",executableElement);
      }
    }
    for (    String expectedGetter : expectedGetters) {
      error(""String_Node_Str"" + expectedGetter);
    }
    for (    String expectedSetter : expectedSetters) {
      error(""String_Node_Str"" + expectedSetter);
    }
    RealmProxyClassGenerator sourceCodeGenerator=new RealmProxyClassGenerator(processingEnv,className,packageName,fields,indexedFields);
    try {
      sourceCodeGenerator.generate();
    }
 catch (    IOException e) {
      error(e.getMessage(),classElement);
    }
catch (    UnsupportedOperationException e) {
      error(e.getMessage(),classElement);
    }
  }
  if (!done) {
    RealmValidationListGenerator validationGenerator=new RealmValidationListGenerator(processingEnv,classesToValidate);
    try {
      validationGenerator.generate();
      done=true;
    }
 catch (    IOException e) {
      error(e.getMessage());
    }
  }
  return true;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  RealmVersionChecker updateChecker=new RealmVersionChecker(processingEnv);
  updateChecker.executeRealmVersionUpdate();
  for (  Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
    String className;
    String packageName;
    List<VariableElement> fields=new ArrayList<VariableElement>();
    List<VariableElement> indexedFields=new ArrayList<VariableElement>();
    Set<VariableElement> ignoredFields=new HashSet<VariableElement>();
    Set<String> expectedGetters=new HashSet<String>();
    Set<String> expectedSetters=new HashSet<String>();
    Set<ExecutableElement> methods=new HashSet<ExecutableElement>();
    Map<String,String> getters=new HashMap<String,String>();
    Map<String,String> setters=new HashMap<String,String>();
    if (!classElement.getKind().equals(ElementKind.CLASS)) {
      error(""String_Node_Str"",classElement);
    }
    TypeElement typeElement=(TypeElement)classElement;
    className=typeElement.getSimpleName().toString();
    if (typeElement.toString().endsWith(""String_Node_Str"") || typeElement.toString().endsWith(""String_Node_Str"")) {
      continue;
    }
    note(""String_Node_Str"" + className);
    classesToValidate.add(typeElement.toString());
    Element enclosingElement=typeElement.getEnclosingElement();
    if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
      error(""String_Node_Str"",classElement);
    }
    TypeElement parentElement=(TypeElement)processingEnv.getTypeUtils().asElement(typeElement.getSuperclass());
    if (!parentElement.toString().endsWith(""String_Node_Str"")) {
      error(""String_Node_Str"",classElement);
    }
    PackageElement packageElement=(PackageElement)enclosingElement;
    packageName=packageElement.getQualifiedName().toString();
    for (    Element element : typeElement.getEnclosedElements()) {
      ElementKind elementKind=element.getKind();
      if (elementKind.equals(ElementKind.FIELD)) {
        VariableElement variableElement=(VariableElement)element;
        String fieldName=variableElement.getSimpleName().toString();
        if (variableElement.getAnnotation(Ignore.class) != null) {
          ignoredFields.add(variableElement);
          continue;
        }
        if (variableElement.getAnnotation(Index.class) != null) {
          String elementTypeCanonicalName=variableElement.asType().toString();
          if (elementTypeCanonicalName.equals(""String_Node_Str"")) {
            indexedFields.add(variableElement);
          }
 else {
            error(""String_Node_Str"" + element);
            return true;
          }
        }
        if (!variableElement.getModifiers().contains(Modifier.PRIVATE)) {
          error(""String_Node_Str"",variableElement);
        }
        fields.add(variableElement);
        expectedGetters.add(fieldName);
        expectedSetters.add(fieldName);
      }
 else       if (elementKind.equals(ElementKind.METHOD)) {
        ExecutableElement executableElement=(ExecutableElement)element;
        methods.add(executableElement);
      }
    }
    List<String> fieldNames=new ArrayList<String>();
    List<String> ignoreFieldNames=new ArrayList<String>();
    for (    VariableElement field : fields) {
      fieldNames.add(field.getSimpleName().toString());
    }
    for (    VariableElement ignoredField : ignoredFields) {
      fieldNames.add(ignoredField.getSimpleName().toString());
      ignoreFieldNames.add(ignoredField.getSimpleName().toString());
    }
    for (    ExecutableElement executableElement : methods) {
      String methodName=executableElement.getSimpleName().toString();
      Set<Modifier> modifiers=executableElement.getModifiers();
      if (modifiers.contains(Modifier.STATIC)) {
        continue;
      }
 else       if (!modifiers.contains(Modifier.PUBLIC)) {
        error(""String_Node_Str"",executableElement);
      }
      if (methodName.startsWith(""String_Node_Str"") || methodName.startsWith(""String_Node_Str"")) {
        boolean found=false;
        if (methodName.startsWith(""String_Node_Str"")) {
          String methodMinusIs=methodName.substring(2);
          String methodMinusIsCapitalised=lowerFirstChar(methodMinusIs);
          if (fieldNames.contains(methodName)) {
            expectedGetters.remove(methodName);
            if (!ignoreFieldNames.contains(methodName)) {
              getters.put(methodName,methodName);
            }
            found=true;
          }
 else           if (fieldNames.contains(methodMinusIs)) {
            expectedGetters.remove(methodMinusIs);
            if (!ignoreFieldNames.contains(methodMinusIs)) {
              getters.put(methodMinusIs,methodName);
            }
            found=true;
          }
 else           if (fieldNames.contains(methodMinusIsCapitalised)) {
            expectedGetters.remove(methodMinusIsCapitalised);
            if (!ignoreFieldNames.contains(methodMinusIsCapitalised)) {
              getters.put(methodMinusIsCapitalised,methodName);
            }
            found=true;
          }
        }
        if (!found && methodName.startsWith(""String_Node_Str"")) {
          String methodMinusGet=methodName.substring(3);
          String methodMinusGetCapitalised=lowerFirstChar(methodMinusGet);
          if (fieldNames.contains(methodMinusGet)) {
            expectedGetters.remove(methodMinusGet);
            if (!ignoreFieldNames.contains(methodMinusGet)) {
              getters.put(methodMinusGet,methodName);
            }
            found=true;
          }
 else           if (fieldNames.contains(methodMinusGetCapitalised)) {
            expectedGetters.remove(methodMinusGetCapitalised);
            if (!ignoreFieldNames.contains(methodMinusGetCapitalised)) {
              getters.put(methodMinusGetCapitalised,methodName);
            }
            found=true;
          }
        }
        if (!found) {
          note(String.format(""String_Node_Str"",methodName));
        }
      }
 else       if (methodName.startsWith(""String_Node_Str"")) {
        boolean found=false;
        String methodMinusSet=methodName.substring(3);
        String methodMinusSetCapitalised=lowerFirstChar(methodMinusSet);
        String methodMenusSetPlusIs=""String_Node_Str"" + methodMinusSet;
        if (fieldNames.contains(methodMinusSet)) {
          expectedSetters.remove(methodMinusSet);
          if (!ignoreFieldNames.contains(methodMinusSet)) {
            setters.put(methodMinusSet,methodName);
          }
          found=true;
        }
 else         if (fieldNames.contains(methodMinusSetCapitalised)) {
          expectedSetters.remove(methodMinusSetCapitalised);
          if (!ignoreFieldNames.contains(methodMinusSetCapitalised)) {
            setters.put(methodMinusSetCapitalised,methodName);
          }
          found=true;
        }
 else         if (fieldNames.contains(methodMenusSetPlusIs)) {
          expectedSetters.remove(methodMenusSetPlusIs);
          if (!ignoreFieldNames.contains(methodMenusSetPlusIs)) {
            setters.put(methodMenusSetPlusIs,methodName);
          }
          found=true;
        }
        if (!found) {
          note(String.format(""String_Node_Str"",methodName));
        }
      }
 else {
        error(""String_Node_Str"",executableElement);
      }
    }
    for (    String expectedGetter : expectedGetters) {
      error(""String_Node_Str"" + expectedGetter);
    }
    for (    String expectedSetter : expectedSetters) {
      error(""String_Node_Str"" + expectedSetter);
    }
    RealmProxyClassGenerator sourceCodeGenerator=new RealmProxyClassGenerator(processingEnv,className,packageName,fields,getters,setters,indexedFields);
    try {
      sourceCodeGenerator.generate();
    }
 catch (    IOException e) {
      error(e.getMessage(),classElement);
    }
catch (    UnsupportedOperationException e) {
      error(e.getMessage(),classElement);
    }
  }
  if (!done) {
    RealmValidationListGenerator validationGenerator=new RealmValidationListGenerator(processingEnv,classesToValidate);
    try {
      validationGenerator.generate();
      done=true;
    }
 catch (    IOException e) {
      error(e.getMessage());
    }
  }
  return true;
}",0.857495035266726
155852,"public void testRealmGetRowReturnsValidRow(){
  testRealm.beginTransaction();
  RealmObject realmObject=testRealm.createObject(AllTypes.class);
  Row row=realmObject.realmGetRow();
  testRealm.commitTransaction();
  assertNotNull(""String_Node_Str"",row);
  assertEquals(""String_Node_Str"",7,row.getColumnCount());
}","public void testRealmGetRowReturnsValidRow(){
  testRealm.beginTransaction();
  RealmObject realmObject=testRealm.createObject(AllTypes.class);
  Row row=realmObject.realmGetRow();
  testRealm.commitTransaction();
  assertNotNull(""String_Node_Str"",row);
  assertEquals(""String_Node_Str"",8,row.getColumnCount());
}",0.9968051118210862
155853,"private static Realm createAndValidate(String absolutePath,boolean validateSchema){
  Map<String,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath);
  if (realm == null) {
    realm=new Realm(absolutePath);
    realms.put(absolutePath,realm);
    realmsCache.set(realms);
  }
  if (validateSchema) {
    if (!validatedPaths.contains(absolutePath)) {
      Class<?> validationClass;
      try {
        validationClass=Class.forName(""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        throw new RealmException(""String_Node_Str"");
      }
      Method getProxyClassesMethod;
      try {
        getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
      }
 catch (      NoSuchMethodException e) {
        throw new RealmException(""String_Node_Str"");
      }
      List<String> proxyClasses;
      try {
        proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
      }
 catch (      IllegalAccessException e) {
        throw new RealmException(""String_Node_Str"");
      }
catch (      InvocationTargetException e) {
        throw new RealmException(""String_Node_Str"");
      }
      long version=realm.getVersion();
      try {
        if (version == UNVERSIONED) {
          realm.beginTransaction();
          realm.setVersion(0);
        }
        for (        String className : proxyClasses) {
          String modelClassName=Iterables.getLast(Splitter.on(""String_Node_Str"").split(className));
          String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
          Class<?> generatedClass;
          try {
            generatedClass=Class.forName(generatedClassName);
          }
 catch (          ClassNotFoundException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          if (version == UNVERSIONED) {
            Method initTableMethod;
            try {
              initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
            }
 catch (            NoSuchMethodException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
            try {
              initTableMethod.invoke(null,realm.transaction);
            }
 catch (            IllegalAccessException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
catch (            InvocationTargetException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
          }
          Method fieldNamesMethod;
          try {
            fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          List<String> fieldNames;
          try {
            fieldNames=(List<String>)fieldNamesMethod.invoke(null);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
          for (          String fieldName : fieldNames) {
            long columnIndex=table.getColumnIndex(fieldName);
            if (columnIndex == -1) {
              throw new RealmException(""String_Node_Str"");
            }
            columnIndices.put(modelClassName,fieldName,columnIndex);
          }
          Method validateMethod;
          try {
            validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          try {
            validateMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
catch (          InvocationTargetException e) {
            throw new RealmMigrationNeededException(e.getMessage());
          }
        }
        validatedPaths.add(absolutePath);
      }
  finally {
        if (version == UNVERSIONED) {
          realm.commitTransaction();
        }
      }
    }
  }
  return realm;
}","private static Realm createAndValidate(String absolutePath,boolean validateSchema){
  Map<String,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath);
  if (realm == null) {
    realm=new Realm(absolutePath);
    realms.put(absolutePath,realm);
    realmsCache.set(realms);
  }
  if (validateSchema) {
    if (!validatedPaths.contains(absolutePath)) {
      Class<?> validationClass;
      try {
        validationClass=Class.forName(""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        throw new RealmException(""String_Node_Str"");
      }
      Method getProxyClassesMethod;
      try {
        getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
      }
 catch (      NoSuchMethodException e) {
        throw new RealmException(""String_Node_Str"");
      }
      List<String> proxyClasses;
      try {
        proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
      }
 catch (      IllegalAccessException e) {
        throw new RealmException(""String_Node_Str"");
      }
catch (      InvocationTargetException e) {
        throw new RealmException(""String_Node_Str"");
      }
      long version=realm.getVersion();
      try {
        realm.beginTransaction();
        if (version == UNVERSIONED) {
          realm.setVersion(0);
        }
        for (        String className : proxyClasses) {
          String modelClassName=Iterables.getLast(Splitter.on(""String_Node_Str"").split(className));
          String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
          Class<?> generatedClass;
          try {
            generatedClass=Class.forName(generatedClassName);
          }
 catch (          ClassNotFoundException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          if (version == UNVERSIONED) {
            Method initTableMethod;
            try {
              initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
            }
 catch (            NoSuchMethodException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
            try {
              initTableMethod.invoke(null,realm.transaction);
            }
 catch (            IllegalAccessException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
catch (            InvocationTargetException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
          }
          Method validateMethod;
          try {
            validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          try {
            validateMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
catch (          InvocationTargetException e) {
            throw new RealmMigrationNeededException(e.getMessage());
          }
          Method fieldNamesMethod;
          try {
            fieldNamesMethod=generatedClass.getMethod(""String_Node_Str"");
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          List<String> fieldNames;
          try {
            fieldNames=(List<String>)fieldNamesMethod.invoke(null);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          Table table=realm.transaction.getTable(TABLE_PREFIX + modelClassName);
          for (          String fieldName : fieldNames) {
            long columnIndex=table.getColumnIndex(fieldName);
            if (columnIndex == -1) {
              throw new RealmMigrationNeededException(""String_Node_Str"" + fieldName + ""String_Node_Str""+ modelClassName+ ""String_Node_Str"");
            }
            columnIndices.put(modelClassName,fieldName,columnIndex);
          }
        }
        validatedPaths.add(absolutePath);
      }
  finally {
        realm.commitTransaction();
      }
    }
  }
  return realm;
}",0.8106496272630458
155854,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_realm_basic_example);
  rootLayout=((LinearLayout)findViewById(R.id.container));
  rootLayout.removeAllViews();
  String path0=copyBundledRealmFile(this.getResources().openRawResource(R.raw.default0),""String_Node_Str"");
  String path1=copyBundledRealmFile(this.getResources().openRawResource(R.raw.default1),""String_Node_Str"");
  String path2=copyBundledRealmFile(this.getResources().openRawResource(R.raw.default2),""String_Node_Str"");
  try {
    Realm.getInstance(this,""String_Node_Str"");
  }
 catch (  RealmMigrationNeededException ex) {
    Log.i(TAG,""String_Node_Str"");
  }
  Realm.migrateRealmAtPath(path0,new Migration());
  Realm realm0=Realm.getInstance(this,""String_Node_Str"");
  showStatus(realm0);
  Realm.migrateRealmAtPath(path1,new Migration());
  Realm realm1=Realm.getInstance(this,""String_Node_Str"");
  showStatus(realm1);
  Realm.migrateRealmAtPath(path2,new Migration());
  Realm realm2=Realm.getInstance(this,""String_Node_Str"");
  showStatus(realm2);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_realm_basic_example);
  rootLayout=((LinearLayout)findViewById(R.id.container));
  rootLayout.removeAllViews();
  String path0=copyBundledRealmFile(this.getResources().openRawResource(R.raw.default0),""String_Node_Str"");
  String path1=copyBundledRealmFile(this.getResources().openRawResource(R.raw.default1),""String_Node_Str"");
  String path2=copyBundledRealmFile(this.getResources().openRawResource(R.raw.default2),""String_Node_Str"");
  try {
    Realm.getInstance(this,""String_Node_Str"");
  }
 catch (  RealmMigrationNeededException ex) {
    Log.i(TAG,""String_Node_Str"");
  }
  Realm.migrateRealmAtPath(path2,new Migration());
  Realm realm2=Realm.getInstance(this,""String_Node_Str"");
  showStatus(realm2);
  Realm.migrateRealmAtPath(path1,new Migration());
  Realm realm1=Realm.getInstance(this,""String_Node_Str"");
  showStatus(realm1);
  Realm.migrateRealmAtPath(path0,new Migration());
  Realm realm0=Realm.getInstance(this,""String_Node_Str"");
  showStatus(realm0);
}",0.7635379061371841
155855,"private long getIndexForProperty(Table table,String name){
  for (int i=0; i < table.getColumnCount(); i++) {
    if (table.getColumnName(i).equals(""String_Node_Str"")) {
      return i;
    }
  }
  return -1;
}","private long getIndexForProperty(Table table,String name){
  for (int i=0; i < table.getColumnCount(); i++) {
    if (table.getColumnName(i).equals(name)) {
      return i;
    }
  }
  return -1;
}",0.9582309582309584
155856,"@Override public long execute(Realm realm,long version){
  if (version == 0) {
    Table personTable=realm.getTable(Person.class);
    long fullNameIndex=personTable.addColumn(ColumnType.STRING,""String_Node_Str"");
    for (int i=0; i < personTable.size(); i++) {
      personTable.setString(fullNameIndex,i,personTable.getString(0,i) + ""String_Node_Str"" + personTable.getString(1,i));
    }
    personTable.removeColumn(1);
    personTable.removeColumn(0);
    version++;
  }
  if (version == 1) {
    Table personTable=realm.getTable(Person.class);
    Table petTable=realm.getTable(Pet.class);
    petTable.addColumn(ColumnType.STRING,""String_Node_Str"");
    petTable.addColumn(ColumnType.STRING,""String_Node_Str"");
    long petsIndex=personTable.addColumnLink(ColumnType.LINK_LIST,""String_Node_Str"",petTable);
    long fullNameIndex=getIndexForProperty(personTable,""String_Node_Str"");
    for (int i=0; i < personTable.size(); i++) {
      if (personTable.getString(fullNameIndex,i).equals(""String_Node_Str"")) {
        long petIndex=petTable.add(""String_Node_Str"",""String_Node_Str"");
      }
    }
    version++;
  }
  if (version == 2) {
    Table petTable=realm.getTable(Pet.class);
    long typeIndex=petTable.addColumn(ColumnType.INTEGER,""String_Node_Str"");
    for (int i=0; i < petTable.size(); i++) {
      String type=petTable.getString(1,i);
      if (type.equals(""String_Node_Str"")) {
        petTable.setLong(typeIndex,i,1);
      }
 else       if (type.equals(""String_Node_Str"")) {
        petTable.setLong(typeIndex,i,2);
      }
 else       if (type.equals(""String_Node_Str"")) {
        petTable.setLong(typeIndex,i,3);
      }
    }
    petTable.removeColumn(1);
    version++;
  }
  return version;
}","@Override public long execute(Realm realm,long version){
  if (version == 0) {
    Table personTable=realm.getTable(Person.class);
    long fistNameIndex=getIndexForProperty(personTable,""String_Node_Str"");
    long lastNameIndex=getIndexForProperty(personTable,""String_Node_Str"");
    long fullNameIndex=personTable.addColumn(ColumnType.STRING,""String_Node_Str"");
    for (int i=0; i < personTable.size(); i++) {
      personTable.setString(fullNameIndex,i,personTable.getString(fistNameIndex,i) + ""String_Node_Str"" + personTable.getString(lastNameIndex,i));
    }
    personTable.removeColumn(getIndexForProperty(personTable,""String_Node_Str""));
    personTable.removeColumn(getIndexForProperty(personTable,""String_Node_Str""));
    version++;
  }
  if (version == 1) {
    Table personTable=realm.getTable(Person.class);
    Table petTable=realm.getTable(Pet.class);
    petTable.addColumn(ColumnType.STRING,""String_Node_Str"");
    petTable.addColumn(ColumnType.STRING,""String_Node_Str"");
    long petsIndex=personTable.addColumnLink(ColumnType.LINK_LIST,""String_Node_Str"",petTable);
    long fullNameIndex=getIndexForProperty(personTable,""String_Node_Str"");
    for (int i=0; i < personTable.size(); i++) {
      if (personTable.getString(fullNameIndex,i).equals(""String_Node_Str"")) {
      }
    }
    version++;
  }
  if (version == 2) {
    Table petTable=realm.getTable(Pet.class);
    long oldTypeIndex=getIndexForProperty(petTable,""String_Node_Str"");
    long typeIndex=petTable.addColumn(ColumnType.INTEGER,""String_Node_Str"");
    for (int i=0; i < petTable.size(); i++) {
      String type=petTable.getString(oldTypeIndex,i);
      if (type.equals(""String_Node_Str"")) {
        petTable.setLong(typeIndex,i,1);
      }
 else       if (type.equals(""String_Node_Str"")) {
        petTable.setLong(typeIndex,i,2);
      }
 else       if (type.equals(""String_Node_Str"")) {
        petTable.setLong(typeIndex,i,3);
      }
    }
    petTable.removeColumn(oldTypeIndex);
    version++;
  }
  return version;
}",0.8231511254019293
155857,"private static Realm createAndValidate(String absolutePath,boolean validateSchema){
  Map<String,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath);
  if (realm == null) {
    realm=new Realm(absolutePath);
    realms.put(absolutePath,realm);
    realmsCache.set(realms);
  }
  if (validateSchema) {
    if (!validatedPaths.contains(absolutePath)) {
      Class<?> validationClass;
      try {
        validationClass=Class.forName(""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        throw new RealmException(""String_Node_Str"");
      }
      Method getProxyClassesMethod;
      try {
        getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
      }
 catch (      NoSuchMethodException e) {
        throw new RealmException(""String_Node_Str"");
      }
      List<String> proxyClasses;
      try {
        proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
      }
 catch (      IllegalAccessException e) {
        throw new RealmException(""String_Node_Str"");
      }
catch (      InvocationTargetException e) {
        throw new RealmException(""String_Node_Str"");
      }
      realm.beginTransaction();
      long version=realm.getVersion();
      realm.commitTransaction();
      for (      String className : proxyClasses) {
        String modelClassName=Iterables.getLast(Splitter.on(""String_Node_Str"").split(className));
        String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
        Class<?> generatedClass;
        try {
          generatedClass=Class.forName(generatedClassName);
        }
 catch (        ClassNotFoundException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
        }
        if (version == -1) {
          Method initTableMethod;
          try {
            initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          try {
            realm.beginTransaction();
            initTableMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
catch (          InvocationTargetException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
 finally {
            realm.commitTransaction();
          }
        }
        Method validateMethod;
        try {
          validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
        }
 catch (        NoSuchMethodException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
        }
        try {
          validateMethod.invoke(null,realm.transaction);
        }
 catch (        IllegalAccessException e) {
          throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
        }
catch (        InvocationTargetException e) {
          throw new RealmMigrationNeededException(e.getMessage());
        }
      }
      if (version == -1) {
        realm.beginTransaction();
        realm.setVersion(0);
        realm.commitTransaction();
      }
      validatedPaths.add(absolutePath);
    }
  }
  return realm;
}","private static Realm createAndValidate(String absolutePath,boolean validateSchema){
  Map<String,Realm> realms=realmsCache.get();
  Realm realm=realms.get(absolutePath);
  if (realm == null) {
    realm=new Realm(absolutePath);
    realms.put(absolutePath,realm);
    realmsCache.set(realms);
  }
  if (validateSchema) {
    if (!validatedPaths.contains(absolutePath)) {
      Class<?> validationClass;
      try {
        validationClass=Class.forName(""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        throw new RealmException(""String_Node_Str"");
      }
      Method getProxyClassesMethod;
      try {
        getProxyClassesMethod=validationClass.getMethod(""String_Node_Str"");
      }
 catch (      NoSuchMethodException e) {
        throw new RealmException(""String_Node_Str"");
      }
      List<String> proxyClasses;
      try {
        proxyClasses=(List<String>)getProxyClassesMethod.invoke(null);
      }
 catch (      IllegalAccessException e) {
        throw new RealmException(""String_Node_Str"");
      }
catch (      InvocationTargetException e) {
        throw new RealmException(""String_Node_Str"");
      }
      long version=realm.getVersion();
      try {
        if (version == UNVERSIONED) {
          realm.beginTransaction();
          realm.setVersion(0);
        }
        for (        String className : proxyClasses) {
          String modelClassName=Iterables.getLast(Splitter.on(""String_Node_Str"").split(className));
          String generatedClassName=""String_Node_Str"" + modelClassName + ""String_Node_Str"";
          Class<?> generatedClass;
          try {
            generatedClass=Class.forName(generatedClassName);
          }
 catch (          ClassNotFoundException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          if (version == UNVERSIONED) {
            Method initTableMethod;
            try {
              initTableMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
            }
 catch (            NoSuchMethodException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
            try {
              initTableMethod.invoke(null,realm.transaction);
            }
 catch (            IllegalAccessException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
catch (            InvocationTargetException e) {
              throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
            }
          }
          Method validateMethod;
          try {
            validateMethod=generatedClass.getMethod(""String_Node_Str"",new Class[]{ImplicitTransaction.class});
          }
 catch (          NoSuchMethodException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
          try {
            validateMethod.invoke(null,realm.transaction);
          }
 catch (          IllegalAccessException e) {
            throw new RealmException(""String_Node_Str"" + generatedClassName + ""String_Node_Str"");
          }
catch (          InvocationTargetException e) {
            throw new RealmMigrationNeededException(e.getMessage());
          }
        }
        validatedPaths.add(absolutePath);
      }
  finally {
        if (version == UNVERSIONED) {
          realm.commitTransaction();
        }
      }
    }
  }
  return realm;
}",0.8876293042369279
155858,"private long getVersion(){
  Table metadataTable=transaction.getTable(""String_Node_Str"");
  if (metadataTable.getColumnCount() == 0) {
    setVersion(-1);
  }
  return metadataTable.getLong(0,0);
}","private long getVersion(){
  if (!transaction.hasTable(""String_Node_Str"")) {
    return UNVERSIONED;
  }
  Table metadataTable=transaction.getTable(""String_Node_Str"");
  return metadataTable.getLong(0,0);
}",0.6352357320099256
155859,"public void generate() throws IOException, UnsupportedOperationException {
  String qualifiedGeneratedClassName=String.format(""String_Node_Str"",realmPackageName,className);
  JavaFileObject sourceFile=processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
  JavaWriter writer=new JavaWriter(new BufferedWriter(sourceFile.openWriter()));
  Elements elementUtils=processingEnvironment.getElementUtils();
  Types typeUtils=processingEnvironment.getTypeUtils();
  TypeMirror realmObject=elementUtils.getTypeElement(""String_Node_Str"").asType();
  DeclaredType realmList=typeUtils.getDeclaredType(elementUtils.getTypeElement(""String_Node_Str""),typeUtils.getWildcardType(null,null));
  writer.setIndent(""String_Node_Str"");
  writer.emitPackage(realmPackageName).emitEmptyLine();
  writer.emitImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",packageName + ""String_Node_Str"").emitEmptyLine();
  writer.beginType(qualifiedGeneratedClassName,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),className).emitEmptyLine();
  ListIterator<VariableElement> iterator=fields.listIterator();
  while (iterator.hasNext()) {
    int columnNumber=iterator.nextIndex();
    VariableElement field=iterator.next();
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      String realmType=JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
      String castingType=CASTING_TYPES.get(fieldTypeCanonicalName);
      writer.emitAnnotation(""String_Node_Str"");
      String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.beginMethod(fieldTypeCanonicalName,getterPrefix + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,realmType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",realmType,columnNumber,castingType);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.beginControlFlow(""String_Node_Str"",columnNumber);
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",genericType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.endMethod();
    }
 else {
      throw new UnsupportedOperationException(String.format(""String_Node_Str"",fieldTypeCanonicalName,fieldName));
    }
    writer.emitEmptyLine();
  }
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"");
  writer.beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",this.className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String fieldTypeName;
    if (fieldTypeCanonicalName.contains(""String_Node_Str"")) {
      fieldTypeName=fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
    }
 else {
      fieldTypeName=fieldTypeCanonicalName;
    }
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      writer.emitStatement(""String_Node_Str"",JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),fieldName.toLowerCase(Locale.getDefault()));
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.beginControlFlow(""String_Node_Str"",fieldTypeName);
      writer.emitStatement(""String_Node_Str"",fieldTypeName);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),fieldTypeName);
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.beginControlFlow(""String_Node_Str"",genericType);
      writer.emitStatement(""String_Node_Str"",genericType);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),genericType);
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",this.className);
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"",className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    writer.emitStatement(""String_Node_Str"",fieldName);
    writer.emitStatement(""String_Node_Str"",getterPrefix,capitaliseFirstChar(fieldName));
    writer.emitStatement(""String_Node_Str"",fieldName);
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"");
  int counter=0;
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
      for (      String statement : HASHCODE.get(fieldTypeCanonicalName)) {
        if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,capitaliseFirstChar(fieldName));
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,counter);
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,capitaliseFirstChar(fieldName));
        }
 else {
          throw new AssertionError();
        }
      }
    }
 else {
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,counter,capitaliseFirstChar(fieldName));
      writer.emitStatement(""String_Node_Str"",counter,counter);
    }
    counter++;
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  String proxyClassName=className + ""String_Node_Str"";
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),""String_Node_Str"",""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",proxyClassName,className,proxyClassName);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String capFieldName=capitaliseFirstChar(fieldName);
    String fieldTypeCanonicalName=field.asType().toString();
    if (HOW_TO_EQUAL.containsKey(fieldTypeCanonicalName)) {
switch (HOW_TO_EQUAL.get(fieldTypeCanonicalName)) {
case EQUALS_DIRECT:
        String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.emitStatement(""String_Node_Str"",capFieldName,className,getterPrefix,capFieldName);
    break;
case EQUALS_NULL:
  writer.emitStatement(""String_Node_Str"",capFieldName,capFieldName,className,capFieldName,className,capFieldName);
break;
case EQUALS_ARRAY:
writer.emitStatement(""String_Node_Str"",capFieldName,className,capFieldName);
break;
case EQUALS_COMPARE:
writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,capitaliseFirstChar(fieldName),className,capitaliseFirstChar(fieldName));
break;
}
}
 else if (typeUtils.isAssignable(field.asType(),realmObject) || typeUtils.isAssignable(field.asType(),realmList)) {
writer.emitStatement(""String_Node_Str"",capFieldName,capFieldName,className,capFieldName,className,capFieldName);
}
}
writer.emitStatement(""String_Node_Str"");
writer.endMethod();
writer.emitEmptyLine();
writer.endType();
writer.close();
}","public void generate() throws IOException, UnsupportedOperationException {
  String qualifiedGeneratedClassName=String.format(""String_Node_Str"",realmPackageName,className);
  JavaFileObject sourceFile=processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
  JavaWriter writer=new JavaWriter(new BufferedWriter(sourceFile.openWriter()));
  Elements elementUtils=processingEnvironment.getElementUtils();
  Types typeUtils=processingEnvironment.getTypeUtils();
  TypeMirror realmObject=elementUtils.getTypeElement(""String_Node_Str"").asType();
  DeclaredType realmList=typeUtils.getDeclaredType(elementUtils.getTypeElement(""String_Node_Str""),typeUtils.getWildcardType(null,null));
  writer.setIndent(""String_Node_Str"");
  writer.emitPackage(realmPackageName).emitEmptyLine();
  writer.emitImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",packageName + ""String_Node_Str"").emitEmptyLine();
  writer.beginType(qualifiedGeneratedClassName,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),className).emitEmptyLine();
  ListIterator<VariableElement> iterator=fields.listIterator();
  while (iterator.hasNext()) {
    int columnNumber=iterator.nextIndex();
    VariableElement field=iterator.next();
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      String realmType=JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
      String castingType=CASTING_TYPES.get(fieldTypeCanonicalName);
      writer.emitAnnotation(""String_Node_Str"");
      String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.beginMethod(fieldTypeCanonicalName,getterPrefix + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,realmType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",realmType,columnNumber,castingType);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.beginControlFlow(""String_Node_Str"",columnNumber);
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",genericType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.endMethod();
    }
 else {
      throw new UnsupportedOperationException(String.format(""String_Node_Str"",fieldTypeCanonicalName,fieldName));
    }
    writer.emitEmptyLine();
  }
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"");
  writer.beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",this.className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String fieldTypeName;
    if (fieldTypeCanonicalName.contains(""String_Node_Str"")) {
      fieldTypeName=fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
    }
 else {
      fieldTypeName=fieldTypeCanonicalName;
    }
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      writer.emitStatement(""String_Node_Str"",JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),fieldName.toLowerCase(Locale.getDefault()));
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.beginControlFlow(""String_Node_Str"",fieldTypeName);
      writer.emitStatement(""String_Node_Str"",fieldTypeName);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),fieldTypeName);
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.beginControlFlow(""String_Node_Str"",genericType);
      writer.emitStatement(""String_Node_Str"",genericType);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),genericType);
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",this.className);
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"",className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    writer.emitStatement(""String_Node_Str"",fieldName);
    writer.emitStatement(""String_Node_Str"",getterPrefix,capitaliseFirstChar(fieldName));
    writer.emitStatement(""String_Node_Str"",fieldName);
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"");
  int counter=0;
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
      for (      String statement : HASHCODE.get(fieldTypeCanonicalName)) {
        if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,capitaliseFirstChar(fieldName));
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,counter);
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,capitaliseFirstChar(fieldName));
        }
 else {
          throw new AssertionError();
        }
      }
    }
 else {
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,counter,capitaliseFirstChar(fieldName));
      writer.emitStatement(""String_Node_Str"",counter,counter);
    }
    counter++;
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  String proxyClassName=className + ""String_Node_Str"";
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),""String_Node_Str"",""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",proxyClassName,className,proxyClassName);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String capFieldName=capitaliseFirstChar(fieldName);
    String fieldTypeCanonicalName=field.asType().toString();
    if (HOW_TO_EQUAL.containsKey(fieldTypeCanonicalName)) {
switch (HOW_TO_EQUAL.get(fieldTypeCanonicalName)) {
case EQUALS_DIRECT:
        String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.emitStatement(""String_Node_Str"",getterPrefix,capFieldName,className,getterPrefix,capFieldName);
    break;
case EQUALS_NULL:
  writer.emitStatement(""String_Node_Str"",capFieldName,capFieldName,className,capFieldName,className,capFieldName);
break;
case EQUALS_ARRAY:
writer.emitStatement(""String_Node_Str"",capFieldName,className,capFieldName);
break;
case EQUALS_COMPARE:
writer.emitStatement(""String_Node_Str"",capitaliseFirstChar(fieldTypeCanonicalName),capitaliseFirstChar(fieldName),className,capitaliseFirstChar(fieldName));
break;
}
}
 else if (typeUtils.isAssignable(field.asType(),realmObject) || typeUtils.isAssignable(field.asType(),realmList)) {
writer.emitStatement(""String_Node_Str"",capFieldName,capFieldName,className,capFieldName,className,capFieldName);
}
}
writer.emitStatement(""String_Node_Str"");
writer.endMethod();
writer.emitEmptyLine();
writer.endType();
writer.close();
}",0.998421687865565
155860,"public void generate() throws IOException, UnsupportedOperationException {
  String qualifiedGeneratedClassName=String.format(""String_Node_Str"",packageName,className);
  JavaFileObject sourceFile=processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
  JavaWriter writer=new JavaWriter(new BufferedWriter(sourceFile.openWriter()));
  Elements elementUtils=processingEnvironment.getElementUtils();
  Types typeUtils=processingEnvironment.getTypeUtils();
  TypeMirror realmObject=elementUtils.getTypeElement(""String_Node_Str"").asType();
  DeclaredType realmList=typeUtils.getDeclaredType(elementUtils.getTypeElement(""String_Node_Str""),typeUtils.getWildcardType(null,null));
  writer.setIndent(""String_Node_Str"");
  writer.emitPackage(packageName).emitEmptyLine();
  writer.emitImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").emitEmptyLine();
  writer.beginType(qualifiedGeneratedClassName,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),className).emitEmptyLine();
  ListIterator<VariableElement> iterator=fields.listIterator();
  while (iterator.hasNext()) {
    int columnNumber=iterator.nextIndex();
    VariableElement field=iterator.next();
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      String realmType=JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
      String castingType=CASTING_TYPES.get(fieldTypeCanonicalName);
      writer.emitAnnotation(""String_Node_Str"");
      String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.beginMethod(fieldTypeCanonicalName,getterPrefix + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,realmType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",realmType,columnNumber,castingType);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.beginControlFlow(""String_Node_Str"",columnNumber);
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",genericType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.endMethod();
    }
 else {
      throw new UnsupportedOperationException(String.format(""String_Node_Str"",fieldTypeCanonicalName,fieldName));
    }
    writer.emitEmptyLine();
  }
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"");
  writer.beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",this.className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String fieldTypeName;
    if (fieldTypeCanonicalName.contains(""String_Node_Str"")) {
      fieldTypeName=fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
    }
 else {
      fieldTypeName=fieldTypeCanonicalName;
    }
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      writer.emitStatement(""String_Node_Str"",JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),fieldName.toLowerCase(Locale.getDefault()));
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.beginControlFlow(""String_Node_Str"",fieldTypeName);
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),fieldTypeName);
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.beginControlFlow(""String_Node_Str"",genericType);
      writer.emitStatement(""String_Node_Str"",genericCanonicalType);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),genericType);
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",this.className);
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"",className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    writer.emitStatement(""String_Node_Str"",fieldName);
    writer.emitStatement(""String_Node_Str"",getterPrefix,capitaliseFirstChar(fieldName));
    writer.emitStatement(""String_Node_Str"",fieldName);
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"");
  int counter=0;
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
      for (      String statement : HASHCODE.get(fieldTypeCanonicalName)) {
        if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,capitaliseFirstChar(fieldName));
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,counter);
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,capitaliseFirstChar(fieldName));
        }
 else {
          throw new AssertionError();
        }
      }
    }
 else {
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,counter,fieldName);
      writer.emitStatement(""String_Node_Str"",counter,counter);
    }
    counter++;
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.endType();
  writer.close();
}","public void generate() throws IOException, UnsupportedOperationException {
  String qualifiedGeneratedClassName=String.format(""String_Node_Str"",packageName,className);
  JavaFileObject sourceFile=processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
  JavaWriter writer=new JavaWriter(new BufferedWriter(sourceFile.openWriter()));
  Elements elementUtils=processingEnvironment.getElementUtils();
  Types typeUtils=processingEnvironment.getTypeUtils();
  TypeMirror realmObject=elementUtils.getTypeElement(""String_Node_Str"").asType();
  DeclaredType realmList=typeUtils.getDeclaredType(elementUtils.getTypeElement(""String_Node_Str""),typeUtils.getWildcardType(null,null));
  writer.setIndent(""String_Node_Str"");
  writer.emitPackage(packageName).emitEmptyLine();
  writer.emitImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").emitEmptyLine();
  writer.beginType(qualifiedGeneratedClassName,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),className).emitEmptyLine();
  ListIterator<VariableElement> iterator=fields.listIterator();
  while (iterator.hasNext()) {
    int columnNumber=iterator.nextIndex();
    VariableElement field=iterator.next();
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      String realmType=JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
      String castingType=CASTING_TYPES.get(fieldTypeCanonicalName);
      writer.emitAnnotation(""String_Node_Str"");
      String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.beginMethod(fieldTypeCanonicalName,getterPrefix + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,realmType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",realmType,columnNumber,castingType);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.beginControlFlow(""String_Node_Str"",columnNumber);
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",genericType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.endMethod();
    }
 else {
      throw new UnsupportedOperationException(String.format(""String_Node_Str"",fieldTypeCanonicalName,fieldName));
    }
    writer.emitEmptyLine();
  }
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"");
  writer.beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",this.className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String fieldTypeName;
    if (fieldTypeCanonicalName.contains(""String_Node_Str"")) {
      fieldTypeName=fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
    }
 else {
      fieldTypeName=fieldTypeCanonicalName;
    }
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      writer.emitStatement(""String_Node_Str"",JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),fieldName.toLowerCase(Locale.getDefault()));
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.beginControlFlow(""String_Node_Str"",fieldTypeName);
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),fieldTypeName);
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.beginControlFlow(""String_Node_Str"",genericType);
      writer.emitStatement(""String_Node_Str"",genericCanonicalType);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),genericType);
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",this.className);
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"",className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    writer.emitStatement(""String_Node_Str"",fieldName);
    writer.emitStatement(""String_Node_Str"",getterPrefix,capitaliseFirstChar(fieldName));
    writer.emitStatement(""String_Node_Str"",fieldName);
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"");
  int counter=0;
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
      for (      String statement : HASHCODE.get(fieldTypeCanonicalName)) {
        if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,capitaliseFirstChar(fieldName));
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,counter);
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,capitaliseFirstChar(fieldName));
        }
 else {
          throw new AssertionError();
        }
      }
    }
 else {
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,counter,capitaliseFirstChar(fieldName));
      writer.emitStatement(""String_Node_Str"",counter,counter);
    }
    counter++;
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.endType();
  writer.close();
}",0.9978365784656348
155861,"public void generate() throws IOException, UnsupportedOperationException {
  String qualifiedGeneratedClassName=String.format(""String_Node_Str"",packageName,className);
  JavaFileObject sourceFile=processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
  JavaWriter writer=new JavaWriter(new BufferedWriter(sourceFile.openWriter()));
  Elements elementUtils=processingEnvironment.getElementUtils();
  Types typeUtils=processingEnvironment.getTypeUtils();
  TypeMirror realmObject=elementUtils.getTypeElement(""String_Node_Str"").asType();
  DeclaredType realmList=typeUtils.getDeclaredType(elementUtils.getTypeElement(""String_Node_Str""),typeUtils.getWildcardType(null,null));
  writer.setIndent(""String_Node_Str"");
  writer.emitPackage(packageName).emitEmptyLine();
  writer.emitImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").emitEmptyLine();
  writer.beginType(qualifiedGeneratedClassName,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),className).emitEmptyLine();
  ListIterator<VariableElement> iterator=fields.listIterator();
  while (iterator.hasNext()) {
    int columnNumber=iterator.nextIndex();
    VariableElement field=iterator.next();
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      String realmType=JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
      String castingType=CASTING_TYPES.get(fieldTypeCanonicalName);
      writer.emitAnnotation(""String_Node_Str"");
      String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.beginMethod(fieldTypeCanonicalName,getterPrefix + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,realmType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",realmType,columnNumber,castingType);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.beginControlFlow(""String_Node_Str"",columnNumber);
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",genericType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.endMethod();
    }
 else {
      throw new UnsupportedOperationException(String.format(""String_Node_Str"",fieldTypeCanonicalName,fieldName));
    }
    writer.emitEmptyLine();
  }
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"");
  writer.beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",this.className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String fieldTypeName;
    if (fieldTypeCanonicalName.contains(""String_Node_Str"")) {
      fieldTypeName=fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
    }
 else {
      fieldTypeName=fieldTypeCanonicalName;
    }
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      writer.emitStatement(""String_Node_Str"",JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),fieldName.toLowerCase(Locale.getDefault()));
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.beginControlFlow(""String_Node_Str"",fieldTypeName);
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),fieldTypeName);
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.beginControlFlow(""String_Node_Str"",genericType);
      writer.emitStatement(""String_Node_Str"",genericCanonicalType);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),genericType);
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",this.className);
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"",className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    writer.emitStatement(""String_Node_Str"",fieldName);
    writer.emitStatement(""String_Node_Str"",getterPrefix,capitaliseFirstChar(fieldName));
    writer.emitStatement(""String_Node_Str"",fieldName);
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"");
  int counter=0;
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
      for (      String statement : HASHCODE.get(fieldTypeCanonicalName)) {
        if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,capitaliseFirstChar(fieldName));
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,counter);
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,capitaliseFirstChar(fieldName));
        }
 else {
          throw new AssertionError();
        }
      }
    }
 else {
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,counter,fieldName);
      writer.emitStatement(""String_Node_Str"",counter,counter);
    }
    counter++;
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.endType();
  writer.close();
}","public void generate() throws IOException, UnsupportedOperationException {
  String qualifiedGeneratedClassName=String.format(""String_Node_Str"",packageName,className);
  JavaFileObject sourceFile=processingEnvironment.getFiler().createSourceFile(qualifiedGeneratedClassName);
  JavaWriter writer=new JavaWriter(new BufferedWriter(sourceFile.openWriter()));
  Elements elementUtils=processingEnvironment.getElementUtils();
  Types typeUtils=processingEnvironment.getTypeUtils();
  TypeMirror realmObject=elementUtils.getTypeElement(""String_Node_Str"").asType();
  DeclaredType realmList=typeUtils.getDeclaredType(elementUtils.getTypeElement(""String_Node_Str""),typeUtils.getWildcardType(null,null));
  writer.setIndent(""String_Node_Str"");
  writer.emitPackage(packageName).emitEmptyLine();
  writer.emitImports(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").emitEmptyLine();
  writer.beginType(qualifiedGeneratedClassName,""String_Node_Str"",EnumSet.of(Modifier.PUBLIC),className).emitEmptyLine();
  ListIterator<VariableElement> iterator=fields.listIterator();
  while (iterator.hasNext()) {
    int columnNumber=iterator.nextIndex();
    VariableElement field=iterator.next();
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      String realmType=JAVA_TO_REALM_TYPES.get(fieldTypeCanonicalName);
      String castingType=CASTING_TYPES.get(fieldTypeCanonicalName);
      writer.emitAnnotation(""String_Node_Str"");
      String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      writer.beginMethod(fieldTypeCanonicalName,getterPrefix + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,realmType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",realmType,columnNumber,castingType);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.beginControlFlow(""String_Node_Str"",columnNumber);
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.endMethod();
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(fieldTypeCanonicalName,""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC));
      writer.emitStatement(""String_Node_Str"",genericType,columnNumber);
      writer.endMethod();
      writer.emitEmptyLine();
      writer.emitAnnotation(""String_Node_Str"");
      writer.beginMethod(""String_Node_Str"",""String_Node_Str"" + capitaliseFirstChar(fieldName),EnumSet.of(Modifier.PUBLIC),fieldTypeCanonicalName,""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"",columnNumber);
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.beginControlFlow(""String_Node_Str"");
      writer.emitStatement(""String_Node_Str"");
      writer.endControlFlow();
      writer.endMethod();
    }
 else {
      throw new UnsupportedOperationException(String.format(""String_Node_Str"",fieldTypeCanonicalName,fieldName));
    }
    writer.emitEmptyLine();
  }
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"");
  writer.beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"",this.className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String fieldTypeName;
    if (fieldTypeCanonicalName.contains(""String_Node_Str"")) {
      fieldTypeName=fieldTypeCanonicalName.substring(fieldTypeCanonicalName.lastIndexOf('.') + 1);
    }
 else {
      fieldTypeName=fieldTypeCanonicalName;
    }
    if (JAVA_TO_REALM_TYPES.containsKey(fieldTypeCanonicalName)) {
      writer.emitStatement(""String_Node_Str"",JAVA_TO_COLUMN_TYPES.get(fieldTypeCanonicalName),fieldName.toLowerCase(Locale.getDefault()));
    }
 else     if (typeUtils.isAssignable(field.asType(),realmObject)) {
      writer.beginControlFlow(""String_Node_Str"",fieldTypeName);
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),fieldTypeName);
    }
 else     if (typeUtils.isAssignable(field.asType(),realmList)) {
      String genericCanonicalType=((DeclaredType)field.asType()).getTypeArguments().get(0).toString();
      String genericType;
      if (genericCanonicalType.contains(""String_Node_Str"")) {
        genericType=genericCanonicalType.substring(genericCanonicalType.lastIndexOf('.') + 1);
      }
 else {
        genericType=genericCanonicalType;
      }
      writer.beginControlFlow(""String_Node_Str"",genericType);
      writer.emitStatement(""String_Node_Str"",genericCanonicalType);
      writer.endControlFlow();
      writer.emitStatement(""String_Node_Str"",fieldName.toLowerCase(Locale.getDefault()),genericType);
    }
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"",this.className);
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"",className);
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    String getterPrefix=fieldTypeCanonicalName.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    writer.emitStatement(""String_Node_Str"",fieldName);
    writer.emitStatement(""String_Node_Str"",getterPrefix,capitaliseFirstChar(fieldName));
    writer.emitStatement(""String_Node_Str"",fieldName);
  }
  writer.emitStatement(""String_Node_Str"");
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.emitAnnotation(""String_Node_Str"");
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC));
  writer.emitStatement(""String_Node_Str"");
  int counter=0;
  for (  VariableElement field : fields) {
    String fieldName=field.getSimpleName().toString();
    String fieldTypeCanonicalName=field.asType().toString();
    if (HASHCODE.containsKey(fieldTypeCanonicalName)) {
      for (      String statement : HASHCODE.get(fieldTypeCanonicalName)) {
        if (statement.contains(""String_Node_Str"") && statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,capitaliseFirstChar(fieldName));
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,counter,counter);
        }
 else         if (statement.contains(""String_Node_Str"")) {
          writer.emitStatement(statement,capitaliseFirstChar(fieldName));
        }
 else {
          throw new AssertionError();
        }
      }
    }
 else {
      writer.emitStatement(""String_Node_Str"",fieldTypeCanonicalName,counter,capitaliseFirstChar(fieldName));
      writer.emitStatement(""String_Node_Str"",counter,counter);
    }
    counter++;
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endMethod();
  writer.emitEmptyLine();
  writer.endType();
  writer.close();
}",0.9978365784656348
155862,"public boolean emitFields() throws IOException {
  for (  FieldInfo field : fields) {
    String originalType=field.fieldElement.asType().toString();
    String fullType=convertSimpleTypesToObject(originalType);
    String shortType=fullType.substring(fullType.lastIndexOf(""String_Node_Str"") + 1);
    String returnCast=""String_Node_Str"";
    String camelCaseFieldName=Character.toUpperCase(field.fieldName.charAt(0)) + field.fieldName.substring(1);
    if (originalType.compareTo(""String_Node_Str"") == 0) {
      fullType=""String_Node_Str"";
      shortType=""String_Node_Str"";
      returnCast=""String_Node_Str"" + originalType + ""String_Node_Str"";
    }
    if (shortType.compareTo(""String_Node_Str"") == 0) {
      fullType=""String_Node_Str"";
      shortType=""String_Node_Str"";
      returnCast=""String_Node_Str"";
    }
    String getterStmt=""String_Node_Str"" + returnCast + ""String_Node_Str""+ shortType+ ""String_Node_Str""+ field.fieldId+ ""String_Node_Str"";
    String setterStmt=""String_Node_Str"" + shortType + ""String_Node_Str""+ field.fieldId+ ""String_Node_Str"";
    writer.emitField(""String_Node_Str"",field.fieldId,EnumSet.of(Modifier.PRIVATE,Modifier.STATIC));
    writer.emitAnnotation(""String_Node_Str"").beginMethod(originalType,""String_Node_Str"" + camelCaseFieldName,EnumSet.of(Modifier.PUBLIC)).emitStatement(getterStmt).endMethod();
    writer.emitAnnotation(""String_Node_Str"").beginMethod(""String_Node_Str"",""String_Node_Str"" + camelCaseFieldName,EnumSet.of(Modifier.PUBLIC),originalType,""String_Node_Str"").emitStatement(setterStmt).endMethod().emitEmptyLine();
  }
  return true;
}","public boolean emitFields() throws IOException {
  int columnIndex=0;
  for (  FieldInfo field : fields) {
    String originalType=field.fieldElement.asType().toString();
    String fullType=convertSimpleTypesToObject(originalType);
    String shortType=fullType.substring(fullType.lastIndexOf(""String_Node_Str"") + 1);
    String returnCast=""String_Node_Str"";
    String camelCaseFieldName=Character.toUpperCase(field.fieldName.charAt(0)) + field.fieldName.substring(1);
    if (originalType.compareTo(""String_Node_Str"") == 0) {
      fullType=""String_Node_Str"";
      shortType=""String_Node_Str"";
      returnCast=""String_Node_Str"" + originalType + ""String_Node_Str"";
    }
    if (shortType.compareTo(""String_Node_Str"") == 0) {
      fullType=""String_Node_Str"";
      shortType=""String_Node_Str"";
      returnCast=""String_Node_Str"";
    }
    String getterStmt=""String_Node_Str"" + returnCast + ""String_Node_Str""+ shortType+ ""String_Node_Str""+ field.fieldId+ ""String_Node_Str"";
    String setterStmt=""String_Node_Str"" + shortType + ""String_Node_Str""+ field.fieldId+ ""String_Node_Str"";
    writer.emitField(""String_Node_Str"",field.fieldId,EnumSet.of(Modifier.PRIVATE,Modifier.STATIC),Integer.toString(columnIndex));
    columnIndex++;
    writer.emitAnnotation(""String_Node_Str"").beginMethod(originalType,""String_Node_Str"" + camelCaseFieldName,EnumSet.of(Modifier.PUBLIC)).emitStatement(getterStmt).endMethod();
    writer.emitAnnotation(""String_Node_Str"").beginMethod(""String_Node_Str"",""String_Node_Str"" + camelCaseFieldName,EnumSet.of(Modifier.PUBLIC),originalType,""String_Node_Str"").emitStatement(setterStmt).endMethod().emitEmptyLine();
  }
  return true;
}",0.977859778597786
155863,"public boolean generate() throws IOException {
  writer.setIndent(""String_Node_Str"");
  if (!emitPackage())   return false;
  if (!emitClass())   return false;
  if (!emitFields())   return false;
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"").beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"").emitStatement(""String_Node_Str"" + this.className + ""String_Node_Str"");
  for (int index=0; index < fields.size(); ++index) {
    FieldInfo field=fields.get(index);
    String fieldName=field.fieldId.substring(""String_Node_Str"".length());
    writer.emitStatement(field.fieldId + ""String_Node_Str"" + Integer.toString(index));
    writer.emitStatement(""String_Node_Str"",field.columnType,fieldName.toLowerCase(Locale.getDefault()));
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.endMethod().emitEmptyLine();
  writer.endType();
  writer.close();
  fields.clear();
  generatorState=GeneratorStates.PACKAGE;
  return true;
}","public boolean generate() throws IOException {
  writer.setIndent(""String_Node_Str"");
  if (!emitPackage())   return false;
  if (!emitClass())   return false;
  if (!emitFields())   return false;
  writer.beginMethod(""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.STATIC),""String_Node_Str"",""String_Node_Str"").beginControlFlow(""String_Node_Str"" + this.className + ""String_Node_Str"").emitStatement(""String_Node_Str"" + this.className + ""String_Node_Str"");
  for (int index=0; index < fields.size(); ++index) {
    FieldInfo field=fields.get(index);
    String fieldName=field.fieldId.substring(""String_Node_Str"".length());
    writer.emitStatement(""String_Node_Str"",field.columnType,fieldName.toLowerCase(Locale.getDefault()));
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.emitStatement(""String_Node_Str"" + this.className + ""String_Node_Str"");
  writer.endMethod().emitEmptyLine();
  writer.endType();
  writer.close();
  fields.clear();
  generatorState=GeneratorStates.PACKAGE;
  return true;
}",0.9604725124943208
155864,"public void setName(String value){
  row.setString(rowIndexName,value);
}","@Override public void setName(String value){
  row.setString(index_name,value);
}",0.8831168831168831
155865,"public int getAge(){
  return (int)row.getLong(rowIndexAge);
}","@Override public int getAge(){
  return (int)row.getLong(index_age);
}",0.8636363636363636
155866,"public String getName(){
  return row.getString(rowIndexName);
}","@Override public String getName(){
  return row.getString(index_name);
}",0.8676470588235294
155867,"public void setAge(int value){
  row.setLong(rowIndexAge,value);
}","@Override public void setAge(int value){
  row.setLong(index_age,value);
}",0.8714285714285714
155868,"public void setName(String value){
  row.setString(rowIndexName,value);
}","@Override public void setName(String value){
  row.setString(index_name,value);
}",0.8831168831168831
155869,"public String getName(){
  return row.getString(rowIndexName);
}","@Override public String getName(){
  return row.getString(index_name);
}",0.8676470588235294
155870,"public void addObjectsToRealm(){
  realm.beginWrite();
  for (int i=0; i < 10; i++) {
    AllColumns allColumns=realm.create(AllColumns.class);
    allColumns.setColumnString(""String_Node_Str"");
    allColumns.setColumnLong(i);
    allColumns.setColumnFloat(1.1F);
    allColumns.setColumnDouble(1.1);
    allColumns.setColumnBoolean(true);
    allColumns.setColumnDate(new Date());
    allColumns.setColumnBinary(new byte[20]);
    User user=realm.create(User.class);
    user.setId(i);
    user.setName(""String_Node_Str"");
    user.setEmail(""String_Node_Str"");
    allColumns.setColumnRealmObject(user);
  }
  realm.commit();
}","public void addObjectsToRealm(){
  realm.beginWrite();
  for (int i=0; i < 10; i++) {
    AllColumns allColumns=realm.create(AllColumns.class);
    allColumns.setColumnString(""String_Node_Str"");
    allColumns.setColumnLong(i);
    allColumns.setColumnFloat(1.1F);
    allColumns.setColumnDouble(1.1);
    allColumns.setColumnBoolean(true);
    allColumns.setColumnDate(new Date());
    User user=realm.create(User.class);
    user.setId(i);
    user.setName(""String_Node_Str"");
    user.setEmail(""String_Node_Str"");
  }
  realm.commit();
}",0.9238665526090676
155871,"public void testAddObject(){
  realm.beginWrite();
  AllColumns allColumns=realm.create(AllColumns.class);
  allColumns.setColumnString(""String_Node_Str"");
  allColumns.setColumnLong(1);
  allColumns.setColumnFloat(1.1F);
  allColumns.setColumnDouble(1.1);
  allColumns.setColumnBoolean(true);
  allColumns.setColumnDate(new Date());
  allColumns.setColumnBinary(new byte[20]);
  RealmTableOrViewList<AllColumns> list=realm.allObjects(AllColumns.class);
  assertEquals(1,list.size());
  try {
    realm.commit();
  }
 catch (  UnsupportedOperationException e) {
    e.printStackTrace();
  }
}","public void testAddObject(){
  realm.beginWrite();
  AllColumns allColumns=realm.create(AllColumns.class);
  allColumns.setColumnString(""String_Node_Str"");
  allColumns.setColumnLong(1);
  allColumns.setColumnFloat(1.1F);
  allColumns.setColumnDouble(1.1);
  allColumns.setColumnBoolean(true);
  allColumns.setColumnDate(new Date());
  RealmTableOrViewList<AllColumns> list=realm.allObjects(AllColumns.class);
  assertEquals(1,list.size());
  try {
    realm.commit();
  }
 catch (  UnsupportedOperationException e) {
    e.printStackTrace();
  }
}",0.9614035087719298
155872,"public void testCreate(){
  realm.beginWrite();
  AllColumns obj=realm.create(AllColumns.class);
  obj.setColumnString(""String_Node_Str"");
  obj.setColumnLong(1);
  obj.setColumnFloat(1.1F);
  obj.setColumnDouble(1.1);
  obj.setColumnBoolean(true);
  obj.setColumnDate(new Date());
  obj.setColumnBinary(new byte[20]);
  realm.commit();
  RealmList<AllColumns> result=realm.where(AllColumns.class).findAll();
  assertEquals(1,result.size());
}","public void testCreate(){
  realm.beginWrite();
  AllColumns obj=realm.create(AllColumns.class);
  obj.setColumnString(""String_Node_Str"");
  obj.setColumnLong(1);
  obj.setColumnFloat(1.1F);
  obj.setColumnDouble(1.1);
  obj.setColumnBoolean(true);
  obj.setColumnDate(new Date());
  realm.commit();
  RealmList<AllColumns> result=realm.where(AllColumns.class).findAll();
  assertEquals(1,result.size());
}",0.9564193168433452
155873,"public void testAdd(){
  realm.beginWrite();
  AllColumns obj=realm.create(AllColumns.class);
  obj.setColumnString(""String_Node_Str"");
  obj.setColumnLong(1);
  obj.setColumnFloat(1.1F);
  obj.setColumnDouble(1.1);
  obj.setColumnBoolean(true);
  obj.setColumnDate(new Date());
  obj.setColumnBinary(new byte[20]);
  User user=realm.create(User.class);
  user.setName(""String_Node_Str"");
  user.setEmail(""String_Node_Str"");
  user.setId(0);
  realm.commit();
  assertEquals(1,realm.allObjects(AllColumns.class).size());
  assertEquals(1,realm.allObjects(User.class).size());
}","public void testAdd(){
  realm.beginWrite();
  AllColumns obj=realm.create(AllColumns.class);
  obj.setColumnString(""String_Node_Str"");
  obj.setColumnLong(1);
  obj.setColumnFloat(1.1F);
  obj.setColumnDouble(1.1);
  obj.setColumnBoolean(true);
  obj.setColumnDate(new Date());
  User user=realm.create(User.class);
  user.setName(""String_Node_Str"");
  user.setEmail(""String_Node_Str"");
  user.setId(0);
  realm.commit();
  assertEquals(1,realm.allObjects(AllColumns.class).size());
  assertEquals(1,realm.allObjects(User.class).size());
}",0.9668755595344674
155874,"public Date getColumnDate(){
  return columnDate;
}","public java.util.Date getColumnDate(){
  return columnDate;
}",0.9107142857142856
155875,"public void setColumnString(String columnString){
  this.columnString=columnString;
}","public void setColumnString(String value){
  columnString=value;
}",0.7947019867549668
155876,"public void setColumnDouble(double columnDouble){
  this.columnDouble=columnDouble;
}","public void setColumnDouble(double value){
  columnDouble=value;
}",0.8211920529801324
155877,"public void setColumnFloat(float columnFloat){
  this.columnFloat=columnFloat;
}","public void setColumnFloat(float value){
  columnFloat=value;
}",0.7972027972027972
155878,"public void setColumnLong(long columnLong){
  this.columnLong=columnLong;
}","public void setColumnLong(long value){
  columnLong=value;
}",0.8
155879,"public void setColumnDate(Date columnDate){
  this.columnDate=columnDate;
}","public void setColumnDate(java.util.Date value){
  columnDate=value;
}",0.6482758620689655
155880,"public void setColumnBoolean(boolean columnBoolean){
  this.columnBoolean=columnBoolean;
}","public void setColumnBoolean(boolean value){
  columnBoolean=value;
}",0.8176100628930818
155881,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  for (  Element classElement : roundEnv.getElementsAnnotatedWith(Ignore.class)) {
    if (!classElement.getKind().equals(ElementKind.FIELD)) {
      error(""String_Node_Str"");
      return false;
    }
    if (!codeGenerator.add_Ignore(classElement.getSimpleName().toString())) {
      error(codeGenerator.getError());
      return false;
    }
  }
  for (  Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
    if (!classElement.getKind().equals(ElementKind.CLASS)) {
      error(""String_Node_Str"");
      return false;
    }
    TypeElement typeElement=(TypeElement)classElement;
    Element enclosingElement=typeElement.getEnclosingElement();
    if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
      error(""String_Node_Str"");
      return false;
    }
    try {
      PackageElement packageElement=(PackageElement)enclosingElement;
      String qName=packageElement.getQualifiedName().toString();
      if (qName != null) {
        String qualifiedClassName=qName + ""String_Node_Str"" + classElement.getSimpleName()+ ""String_Node_Str"";
        qualifiedClassName=qualifiedClassName.replace(""String_Node_Str"",""String_Node_Str"");
        JavaFileObject jfo=processingEnv.getFiler().createSourceFile(qualifiedClassName);
        codeGenerator.setBufferedWriter(new BufferedWriter(jfo.openWriter()));
        if (!codeGenerator.setPackageName(qName)) {
          error(codeGenerator.getError());
          return false;
        }
        if (!codeGenerator.setClassName(classElement.getSimpleName().toString())) {
          error(codeGenerator.getError());
          return false;
        }
        for (        Element element : typeElement.getEnclosedElements()) {
          if (element.getKind().equals(ElementKind.FIELD)) {
            String elementName=element.getSimpleName().toString();
            VariableElement varElem=(VariableElement)element;
            Set<Modifier> modifiers=varElem.getModifiers();
            for (Iterator<Modifier> m=modifiers.iterator(); m.hasNext(); ) {
              Modifier modifier=m.next();
              if (modifier == Modifier.PRIVATE) {
                if (!codeGenerator.add_Field(elementName,varElem)) {
                  error(codeGenerator.getError());
                  return false;
                }
              }
            }
          }
        }
        if (!codeGenerator.generate()) {
          error(codeGenerator.getError());
          return false;
        }
      }
    }
 catch (    IOException ex) {
      error(""String_Node_Str"" + ex.getMessage());
    }
  }
  return true;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  for (  Element classElement : roundEnv.getElementsAnnotatedWith(Ignore.class)) {
    if (!classElement.getKind().equals(ElementKind.FIELD)) {
      error(""String_Node_Str"");
      return false;
    }
    if (!codeGenerator.add_Ignore(classElement.getSimpleName().toString())) {
      error(codeGenerator.getError());
      return false;
    }
  }
  for (  Element classElement : roundEnv.getElementsAnnotatedWith(RealmClass.class)) {
    if (!classElement.getKind().equals(ElementKind.CLASS)) {
      error(""String_Node_Str"");
      return false;
    }
    TypeElement typeElement=(TypeElement)classElement;
    Element enclosingElement=typeElement.getEnclosingElement();
    if (!enclosingElement.getKind().equals(ElementKind.PACKAGE)) {
      error(""String_Node_Str"");
      return false;
    }
    try {
      PackageElement packageElement=(PackageElement)enclosingElement;
      String qName=packageElement.getQualifiedName().toString();
      if (qName != null) {
        String qualifiedClassName=qName + ""String_Node_Str"" + classElement.getSimpleName()+ ""String_Node_Str"";
        qualifiedClassName=qualifiedClassName.replace(""String_Node_Str"",""String_Node_Str"");
        JavaFileObject jfo=processingEnv.getFiler().createSourceFile(qualifiedClassName);
        codeGenerator.setBufferedWriter(new BufferedWriter(jfo.openWriter()));
        if (!codeGenerator.setPackageName(qName)) {
          error(codeGenerator.getError());
          return false;
        }
        if (!codeGenerator.setClassName(classElement.getSimpleName().toString())) {
          error(codeGenerator.getError());
          return false;
        }
        for (        Element element : typeElement.getEnclosedElements()) {
          if (element.getKind().equals(ElementKind.FIELD)) {
            String elementName=element.getSimpleName().toString();
            VariableElement varElem=(VariableElement)element;
            Set<Modifier> modifiers=varElem.getModifiers();
            for (Iterator<Modifier> m=modifiers.iterator(); m.hasNext(); ) {
              Modifier modifier=m.next();
              if (modifier == Modifier.PRIVATE) {
                if (!codeGenerator.setField(elementName,varElem)) {
                  error(codeGenerator.getError());
                  return false;
                }
              }
            }
          }
        }
        if (!codeGenerator.generate()) {
          error(codeGenerator.getError());
          return false;
        }
      }
    }
 catch (    IOException ex) {
      error(""String_Node_Str"" + ex.getMessage());
    }
  }
  return true;
}",0.9986976744186048
155882,"private boolean checkState(int checkState){
  if (writer == null) {
    error(""String_Node_Str"");
    return false;
  }
  if (state != checkState) {
    error(""String_Node_Str"");
    return false;
  }
  return true;
}","private boolean checkState(GeneratorStates checkState){
  if (writer == null) {
    setError(""String_Node_Str"");
    return false;
  }
  if (generatorState != checkState) {
    setError(""String_Node_Str"");
    return false;
  }
  return true;
}",0.915401301518438
155883,"public boolean setPackageName(String packageName) throws IOException {
  if (!checkState(0))   return false;
  this.packageName=packageName;
  writer.emitPackage(packageName).emitEmptyLine();
  state=1;
  return true;
}","public boolean setPackageName(String packageName) throws IOException {
  if (!checkState(GeneratorStates.PACKAGE))   return false;
  this.packageName=packageName;
  writer.emitPackage(packageName).emitEmptyLine().emitImports(""String_Node_Str"");
  generatorState=GeneratorStates.CLASS;
  return true;
}",0.8153846153846154
155884,"public boolean setClassName(String className) throws IOException {
  if (!checkState(1))   return false;
  writer.beginType(packageName + ""String_Node_Str"" + className+ ""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.FINAL),className).emitEmptyLine();
  state=2;
  fieldIndex=0;
  return true;
}","public boolean setClassName(String className) throws IOException {
  if (!checkState(GeneratorStates.CLASS))   return false;
  this.className=className;
  writer.beginType(packageName + ""String_Node_Str"" + className+ ""String_Node_Str"",""String_Node_Str"",EnumSet.of(Modifier.PUBLIC,Modifier.FINAL),className).emitEmptyLine();
  generatorState=GeneratorStates.METHODS;
  return true;
}",0.8102710413694721
155885,"public boolean generate() throws IOException {
  if (!checkState(2))   return false;
  writer.endType();
  writer.close();
  ignoreFields.clear();
  state=0;
  return true;
}","public boolean generate() throws IOException {
  if (!checkState(GeneratorStates.METHODS))   return false;
  writer.beginInitializer(true).emitStatement(""String_Node_Str"" + className + ""String_Node_Str"").emitStatement(""String_Node_Str"");
  writer.beginControlFlow(""String_Node_Str"");
  for (  String field : fields) {
    String fieldName=field.substring(""String_Node_Str"".length());
    writer.beginControlFlow(""String_Node_Str"",fieldName).emitStatement(""String_Node_Str"",field).endControlFlow();
  }
  writer.emitStatement(""String_Node_Str"");
  writer.endControlFlow();
  writer.endInitializer();
  writer.endType();
  writer.close();
  ignoreFields.clear();
  fields.clear();
  generatorState=GeneratorStates.PACKAGE;
  return true;
}",0.3754116355653128
155886,"@Test public void testLinkColumns(){
  Group group=new Group();
  Table table1=group.getTable(""String_Node_Str"");
  Table table2=group.getTable(""String_Node_Str"");
  table2.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  table2.addColumn(ColumnType.STRING,""String_Node_Str"");
  table2.add(1,""String_Node_Str"");
  table2.add(2,""String_Node_Str"");
  table2.add(3,""String_Node_Str"");
  table1.addColumnLink(ColumnType.LINK,""String_Node_Str"",table2);
  table1.addEmptyRow();
  table1.setLink(0,0,1);
  Table target=table1.getLinkTarget(0);
  System.gc();
  assertEquals(target.getColumnCount(),2);
  String test=target.getString(1,table1.getLink(0,0));
  assertEquals(test,""String_Node_Str"");
  group.close();
}","@Test public void testLinkColumns(){
  Group group=new Group();
  Table table1=group.getTable(""String_Node_Str"");
  Table table2=group.getTable(""String_Node_Str"");
  table2.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  table2.addColumn(ColumnType.STRING,""String_Node_Str"");
  table2.add(1,""String_Node_Str"");
  table2.add(2,""String_Node_Str"");
  table2.add(3,""String_Node_Str"");
  table1.addColumnLink(ColumnType.LINK,""String_Node_Str"",table2);
  table1.addEmptyRow();
  table1.setLink(0,0,1);
  Table target=table1.getLinkTarget(0);
  System.gc();
  assertEquals(target.getColumnCount(),2);
  String test=target.getString(1,table1.getLink(0,0));
  assertEquals(test,""String_Node_Str"");
}",0.9878831076265148
155887,"@Override public Date getDate(long columnIndex,long rowIndex){
  return new Date(nativeGetDateTime(nativePtr,columnIndex,rowIndex) * 1000);
}","@Override public Date getDate(long columnIndex,long rowIndex){
  System.err.println(""String_Node_Str"");
  System.err.println(nativeGetDateTime(nativePtr,columnIndex,rowIndex) * 1000);
  return new Date(nativeGetDateTime(nativePtr,columnIndex,rowIndex) * 1000);
}",0.6253101736972705
155888,"@Override public void setDate(long columnIndex,long rowIndex,Date date){
  if (immutable)   throwImmutable();
  nativeSetDate(nativePtr,columnIndex,rowIndex,date.getTime() / 1000);
}","@Override public void setDate(long columnIndex,long rowIndex,Date date){
  if (immutable)   throwImmutable();
  System.err.print(""String_Node_Str"");
  System.err.println(date.getTime() / 1000);
  nativeSetDate(nativePtr,columnIndex,rowIndex,date.getTime() / 1000);
}",0.8125
155889,"@BeforeMethod void init(){
  t=new Table();
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
  t.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  t.addColumn(ColumnType.DATE,""String_Node_Str"");
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.FLOAT,""String_Node_Str"");
  t.addColumn(ColumnType.DOUBLE,""String_Node_Str"");
  t.addColumn(ColumnType.MIXED,""String_Node_Str"");
  t.addColumn(ColumnType.TABLE,""String_Node_Str"");
  t.add(""String_Node_Str"",true,24,date1,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,35,date2,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",true,22,date3,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,22,date4,""String_Node_Str"",0.0f,0.0,0,null);
}","@BeforeMethod void init(){
  t=new Table();
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
  t.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  t.addColumn(ColumnType.DATE,""String_Node_Str"");
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.FLOAT,""String_Node_Str"");
  t.addColumn(ColumnType.DOUBLE,""String_Node_Str"");
  t.addColumn(ColumnType.MIXED,""String_Node_Str"");
  t.addColumn(ColumnType.TABLE,""String_Node_Str"");
  t.add(""String_Node_Str"",true,24,date1,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,35,date2,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",true,22,date3,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,22,date4,""String_Node_Str"",0.0f,0.0,0,null);
  System.err.println(""String_Node_Str"");
  System.err.println(date1.getTime() / 1000);
  t.setDate(3,0,date1);
  assertEquals(date1,t.getDate(3,0));
  assertEquals(date2,t.getDate(3,1));
  assertEquals(date3,t.getDate(3,2));
  assertEquals(date4,t.getDate(3,3));
}",0.8612137203166227
155890,"@Override public Date getDate(long columnIndex,long rowIndex){
  System.err.println(""String_Node_Str"");
  System.err.println(nativeGetDateTime(nativePtr,columnIndex,rowIndex) * 1000);
  return new Date(nativeGetDateTime(nativePtr,columnIndex,rowIndex) * 1000);
}","@Override public Date getDate(long columnIndex,long rowIndex){
  return new Date(nativeGetDateTime(nativePtr,columnIndex,rowIndex) * 1000);
}",0.6997518610421837
155891,"@Override public void setDate(long columnIndex,long rowIndex,Date date){
  if (immutable)   throwImmutable();
  System.err.print(""String_Node_Str"");
  System.err.println(date.getTime() / 1000);
  nativeSetDate(nativePtr,columnIndex,rowIndex,date.getTime() / 1000);
}","@Override public void setDate(long columnIndex,long rowIndex,Date date){
  if (immutable)   throwImmutable();
  nativeSetDate(nativePtr,columnIndex,rowIndex,date.getTime() / 1000);
}",0.8125
155892,"@BeforeMethod void init(){
  t=new Table();
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
  t.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  t.addColumn(ColumnType.DATE,""String_Node_Str"");
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.FLOAT,""String_Node_Str"");
  t.addColumn(ColumnType.DOUBLE,""String_Node_Str"");
  t.addColumn(ColumnType.MIXED,""String_Node_Str"");
  t.addColumn(ColumnType.TABLE,""String_Node_Str"");
  t.add(""String_Node_Str"",true,24,date1,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,35,date2,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",true,22,date3,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,22,date4,""String_Node_Str"",0.0f,0.0,0,null);
  System.err.println(""String_Node_Str"");
  System.err.println(date1.getTime() / 1000);
  t.setDate(3,0,date1);
  assertEquals(date1,t.getDate(3,0));
  assertEquals(date2,t.getDate(3,1));
  assertEquals(date3,t.getDate(3,2));
  assertEquals(date4,t.getDate(3,3));
}","@BeforeMethod void init(){
  t=new Table();
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.BOOLEAN,""String_Node_Str"");
  t.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  t.addColumn(ColumnType.DATE,""String_Node_Str"");
  t.addColumn(ColumnType.STRING,""String_Node_Str"");
  t.addColumn(ColumnType.FLOAT,""String_Node_Str"");
  t.addColumn(ColumnType.DOUBLE,""String_Node_Str"");
  t.addColumn(ColumnType.MIXED,""String_Node_Str"");
  t.addColumn(ColumnType.TABLE,""String_Node_Str"");
  t.add(""String_Node_Str"",true,24,date1,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,35,date2,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",true,22,date3,""String_Node_Str"",0.0f,0.0,0,null);
  t.add(""String_Node_Str"",false,22,date4,""String_Node_Str"",0.0f,0.0,0,null);
  assertEquals(date1,t.getDate(3,0));
  assertEquals(date2,t.getDate(3,1));
  assertEquals(date3,t.getDate(3,2));
  assertEquals(date4,t.getDate(3,3));
}",0.8539325842696629
155893,"@Test public void tableBinaryTest(){
  Table t=new Table();
  t.addColumn(ColumnType.ColumnTypeBinary,""String_Node_Str"");
  byte[] row0=new byte[]{1,2,3};
  byte[] row1=new byte[]{10,20,30};
  t.insertBinary(0,0,row0);
  t.insertBinary(0,1,row1);
  t.insertDone();
  byte[] nullByte=null;
  try {
    t.insertBinary(0,2,nullByte);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  ByteBuffer nullBuffer=null;
  try {
    t.insertBinary(0,2,nullBuffer);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  assertEquals(new byte[]{1,2,3},t.getBinaryByteArray(0,0));
  assertEquals(false,t.getBinaryByteArray(0,0) == new byte[]{1,2,3});
  byte[] newRow0=new byte[]{7,77,77};
  t.setBinaryByteArray(0,0,newRow0);
  assertEquals(new byte[]{7,77,77},t.getBinaryByteArray(0,0));
  assertEquals(false,t.getBinaryByteArray(0,0) == new byte[]{1,2,3});
  try {
    t.setBinaryByteArray(0,2,nullByte);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  try {
    t.setBinaryByteBuffer(0,2,nullBuffer);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
}","@Test public void tableBinaryTest(){
  Table t=new Table();
  t.addColumn(ColumnType.ColumnTypeBinary,""String_Node_Str"");
  byte[] row0=new byte[]{1,2,3};
  byte[] row1=new byte[]{10,20,30};
  t.insertBinary(0,0,row0);
  t.insertDone();
  t.insertBinary(0,1,row1);
  t.insertDone();
  byte[] nullByte=null;
  try {
    t.insertBinary(0,2,nullByte);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  ByteBuffer nullBuffer=null;
  try {
    t.insertBinary(0,2,nullBuffer);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  assertEquals(new byte[]{1,2,3},t.getBinaryByteArray(0,0));
  assertEquals(false,t.getBinaryByteArray(0,0) == new byte[]{1,2,3});
  byte[] newRow0=new byte[]{7,77,77};
  t.setBinaryByteArray(0,0,newRow0);
  assertEquals(new byte[]{7,77,77},t.getBinaryByteArray(0,0));
  assertEquals(false,t.getBinaryByteArray(0,0) == new byte[]{1,2,3});
  try {
    t.setBinaryByteArray(0,2,nullByte);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
  try {
    t.setBinaryByteBuffer(0,2,nullBuffer);
    fail(""String_Node_Str"");
  }
 catch (  NullPointerException e) {
  }
}",0.9921397379912664
155894,"@Test(expectedExceptions=UnsupportedOperationException.class) public void shouldThrowOnGetSubtableDefinitionFromSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.STRING,""String_Node_Str"");
  addresses.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  addresses.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  persons.getSubTable(2,0).getSubTableDefinition(2);
}","@Test(expectedExceptions=UnsupportedOperationException.class) public void shouldThrowOnGetSubtableDefinitionFromSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  persons.getSubTable(2,0).getSubTableDefinition(2);
}",0.4554347826086956
155895,"@Test(expectedExceptions=UnsupportedOperationException.class) public void shouldThrowOnAddColumnFromSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.STRING,""String_Node_Str"");
  addresses.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  addresses.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  persons.getSubTable(2,0).addColumn(ColumnType.INTEGER,""String_Node_Str"");
}","@Test(expectedExceptions=UnsupportedOperationException.class) public void shouldThrowOnAddColumnFromSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  persons.getSubTable(2,0).addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
}",0.4282655246252677
155896,"@Test public void removeColumnFromSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.STRING,""String_Node_Str"");
  addresses.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  addresses.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  assertEquals(persons.getSubTable(2,0).getColumnCount(),3);
  addresses.removeColumn(1);
  assertEquals(persons.getSubTable(2,0).getColumnCount(),2);
}","@Test public void removeColumnFromSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  assertEquals(persons.getSubTable(2,0).getColumnCount(),3);
  addresses.removeColumn(1);
  assertEquals(persons.getSubTable(2,0).getColumnCount(),2);
}",0.4670212765957446
155897,"@Test public void renameColumnInSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.STRING,""String_Node_Str"");
  addresses.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  addresses.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  assertEquals(""String_Node_Str"",persons.getSubTable(2,0).getColumnName(1));
  addresses.renameColumn(1,""String_Node_Str"");
  assertEquals(""String_Node_Str"",persons.getSubTable(2,0).getColumnName(1));
}","@Test public void renameColumnInSubtable(){
  Table persons=new Table();
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  assertEquals(""String_Node_Str"",persons.getSubTable(2,0).getColumnName(1));
  addresses.renameColumn(1,""String_Node_Str"");
  assertEquals(""String_Node_Str"",persons.getSubTable(2,0).getColumnName(1));
}",0.4686234817813765
155898,"@Test public void addColumnsToSubtables(){
  Table persons=new Table();
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.STRING,""String_Node_Str"");
  persons.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.STRING,""String_Node_Str"");
  addresses.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  addresses.addColumn(ColumnType.TABLE,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.INTEGER,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  assertEquals(persons.getColumnName(2),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getColumnName(2),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getSubTable(2,0).getColumnName(0),""String_Node_Str"");
  assertEquals(persons.getString(1,0),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getString(0,0),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getSubTable(2,0).getLong(0,0),12345678);
}","@Test public void addColumnsToSubtables(){
  Table persons=new Table();
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  persons.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition addresses=persons.getSubTableDefinition(2);
  addresses.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  addresses.addColumn(ColumnType.ColumnTypeTable,""String_Node_Str"");
  TableDefinition phone_numbers=addresses.getSubTableDefinition(2);
  phone_numbers.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  persons.add(new Object[]{""String_Node_Str"",""String_Node_Str"",new Object[][]{{""String_Node_Str"",1234,new Object[][]{{12345678}}}}});
  assertEquals(persons.getColumnName(2),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getColumnName(2),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getSubTable(2,0).getColumnName(0),""String_Node_Str"");
  assertEquals(persons.getString(1,0),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getString(0,0),""String_Node_Str"");
  assertEquals(persons.getSubTable(2,0).getSubTable(2,0).getLong(0,0),12345678);
}",0.5735174654752234
155899,"public static boolean versionCompatible(){
  return (nativeGetVersion() == REQUIRED_JNI_VERSION);
}","public static boolean versionCompatible(){
  boolean compatible=(nativeGetVersion() == REQUIRED_JNI_VERSION);
  if (!compatible)   System.err.println(""String_Node_Str"" + nativeGetVersion() + ""String_Node_Str""+ REQUIRED_JNI_VERSION+ ""String_Node_Str"");
  return compatible;
}",0.4932975871313673
155900,"public T next(){
  if (hasNext() == false) {
    throw new NoSuchElementException();
  }
  return (T)tableOrView.at(index++);
}","public T next(){
  if (hasNext() == false) {
    throw new NoSuchElementException();
  }
  return tableOrView.at(index++);
}",0.9880478087649402
155901,"public static void addNativeLibraryPath(String path){
  try {
    System.setProperty(JAVA_LIBRARY_PATH,System.getProperty(JAVA_LIBRARY_PATH) + System.getProperty(""String_Node_Str"") + path+ System.getProperty(""String_Node_Str""));
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public static void addNativeLibraryPath(String path){
  try {
    String libraryPath=System.getProperty(JAVA_LIBRARY_PATH) + PATH_SEP + path+ PATH_SEP;
    System.setProperty(JAVA_LIBRARY_PATH,libraryPath);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.740983606557377
155902,"/** 
 * Checks whether this table is empty or not.
 * @return true if empty, otherwise false.
 */
public boolean isEmpty(){
  return nativeSize(nativePtr) != 0;
}","/** 
 * Checks whether this table is empty or not.
 * @return true if empty, otherwise false.
 */
public boolean isEmpty(){
  return size() == 0;
}",0.9385113268608414
155903,"private void processAnnotatedElements(Set<? extends Element> elements) throws IOException {
  logger.info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  URI uri=filer.getResource(StandardLocation.SOURCE_OUTPUT,""String_Node_Str"",""String_Node_Str"").toUri();
  if (uri.toString().equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<File> sourcesPath=new LinkedList<File>();
  try {
    if (uri.getScheme() == null)     uri=new URI(""String_Node_Str"",uri.getSchemeSpecificPart(),uri.getFragment());
  }
 catch (  URISyntaxException e) {
    logger.error(""String_Node_Str"" + uri + ""String_Node_Str"");
  }
  File file=new File(uri);
  File generatedSourcesPath=file.getParentFile();
  String[] sourceFolders=getSourceFolders();
  while (generatedSourcesPath != null) {
    for (    String sourceFolder : sourceFolders) {
      File potentialPath=new File(generatedSourcesPath,sourceFolder);
      if (potentialPath.exists()) {
        sourcesPath.add(potentialPath);
        logger.info(""String_Node_Str"" + potentialPath);
      }
    }
    generatedSourcesPath=generatedSourcesPath.getParentFile();
  }
  sourcesPath.add(generatedSourcesPath);
  prepareTables(elements);
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      setupModelInfo(model);
    }
  }
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      processModel(sourcesPath,model);
    }
  }
}","private void processAnnotatedElements(Set<? extends Element> elements) throws IOException {
  logger.info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  URI uri=filer.getResource(StandardLocation.SOURCE_OUTPUT,""String_Node_Str"",""String_Node_Str"").toUri();
  if (uri.toString().equals(""String_Node_Str"")) {
    throw new RuntimeException(""String_Node_Str"");
  }
  List<File> sourcesPath=new LinkedList<File>();
  try {
    if (uri.getScheme() == null)     uri=new URI(""String_Node_Str"",uri.getSchemeSpecificPart(),uri.getFragment());
  }
 catch (  URISyntaxException e) {
    logger.error(""String_Node_Str"" + uri + ""String_Node_Str"");
  }
  File file=new File(uri);
  File outputFolder=file.getParentFile();
  File generatedSourcesPath=outputFolder;
  String[] sourceFolders=getSourceFolders();
  while (generatedSourcesPath != null) {
    for (    String sourceFolder : sourceFolders) {
      File potentialPath=new File(generatedSourcesPath,sourceFolder);
      if (potentialPath.exists()) {
        sourcesPath.add(potentialPath);
        logger.info(""String_Node_Str"" + potentialPath);
      }
    }
    generatedSourcesPath=generatedSourcesPath.getParentFile();
  }
  sourcesPath.add(outputFolder);
  logger.info(""String_Node_Str"" + outputFolder);
  prepareTables(elements);
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      setupModelInfo(model);
    }
  }
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      processModel(sourcesPath,model);
    }
  }
}",0.941471048513302
155904,"private String calculatePackageName(TypeElement model){
  Element parent=model.getEnclosingElement();
  while (parent != null && !(parent instanceof PackageElement)) {
    parent=parent.getEnclosingElement();
  }
  if (parent instanceof PackageElement) {
    PackageElement pkg=(PackageElement)parent;
    String pkgName=pkg.getQualifiedName().toString();
    return pkgName.isEmpty() ? ""String_Node_Str"" : pkgName + ""String_Node_Str"";
  }
 else {
    logger.error(""String_Node_Str"" + DEFAULT_PACKAGE);
    return DEFAULT_PACKAGE;
  }
}","private String calculatePackageName(TypeElement model){
  Element parent=model.getEnclosingElement();
  while (parent != null && !(parent instanceof PackageElement)) {
    parent=parent.getEnclosingElement();
  }
  if (parent instanceof PackageElement) {
    PackageElement pkg=(PackageElement)parent;
    String pkgName=pkg.getQualifiedName().toString();
    return pkgName.isEmpty() ? ""String_Node_Str"" : pkgName;
  }
 else {
    logger.error(""String_Node_Str"" + DEFAULT_PACKAGE);
    return DEFAULT_PACKAGE;
  }
}",0.9809885931558936
155905,"protected void writeToSourceFile(String pkg,String filename,String content,Element... originatingElements){
  Writer writer=null;
  try {
    String name=pkg + ""String_Node_Str"" + filename;
    logger.info(""String_Node_Str"" + name);
    FileObject fileRes=filer.createSourceFile(name,originatingElements);
    writer=fileRes.openWriter();
    writer.write(content);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + filename);
    throw new RuntimeException(""String_Node_Str"" + filename,e);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"" + filename);
        throw new RuntimeException(""String_Node_Str"" + filename,e);
      }
    }
  }
}","protected void writeToSourceFile(String pkg,String filename,String content,Element... originatingElements){
  Writer writer=null;
  try {
    String name=!pkg.isEmpty() ? pkg + ""String_Node_Str"" + filename : filename;
    logger.info(""String_Node_Str"" + name);
    FileObject fileRes=filer.createSourceFile(name,originatingElements);
    writer=fileRes.openWriter();
    writer.write(content);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + filename);
    throw new RuntimeException(""String_Node_Str"" + filename,e);
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
        logger.error(""String_Node_Str"" + filename);
        throw new RuntimeException(""String_Node_Str"" + filename,e);
      }
    }
  }
}",0.9820051413881749
155906,"private String calculatePackageName(TypeElement model){
  Element parent=model.getEnclosingElement();
  while (parent != null && !(parent instanceof PackageElement)) {
    parent=parent.getEnclosingElement();
  }
  if (parent instanceof PackageElement) {
    PackageElement pkg=(PackageElement)parent;
    return pkg.getQualifiedName() + ""String_Node_Str"";
  }
 else {
    logger.error(""String_Node_Str"" + DEFAULT_PACKAGE);
    return DEFAULT_PACKAGE;
  }
}","private String calculatePackageName(TypeElement model){
  Element parent=model.getEnclosingElement();
  while (parent != null && !(parent instanceof PackageElement)) {
    parent=parent.getEnclosingElement();
  }
  if (parent instanceof PackageElement) {
    PackageElement pkg=(PackageElement)parent;
    String pkgName=pkg.getQualifiedName().toString();
    return pkgName.isEmpty() ? ""String_Node_Str"" : pkgName + ""String_Node_Str"";
  }
 else {
    logger.error(""String_Node_Str"" + DEFAULT_PACKAGE);
    return DEFAULT_PACKAGE;
  }
}",0.9063444108761328
155907,"public static void main(String[] args){
  PeopleTable peopletable=new PeopleTable();
  peopletable.add(""String_Node_Str"",20,true);
  peopletable.add(""String_Node_Str"",21,false);
  peopletable.add(""String_Node_Str"",32,true);
  peopletable.add(""String_Node_Str"",43,false);
  peopletable.add(""String_Node_Str"",54,true);
  peopletable.insert(2,""String_Node_Str"",34,true);
  if (!peopletable.isEmpty()) {
    long s=peopletable.size();
  }
  System.out.println(""String_Node_Str"" + peopletable.size() + ""String_Node_Str"");
  String name=peopletable.at(2).getName();
  String name2=peopletable.at(2).name.get();
  peopletable.at(2).name.set(""String_Node_Str"");
  peopletable.at(2).setName(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ name2);
  System.out.println(""String_Node_Str"" + peopletable.at(2).getName());
  peopletable.remove(2);
  System.out.println(""String_Node_Str"" + peopletable.size() + ""String_Node_Str"");
  for (  People person : peopletable) {
    System.out.println(person.getName() + ""String_Node_Str"" + person.getAge()+ ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  People p=peopletable.name.System.out.println(p);
  PeopleQuery query=peopletable.age.between(20,35).name.contains(""String_Node_Str"").group().hired.equal(true).or().name.endsWith(""String_Node_Str"").endGroup();
  PeopleView match=query.findAll();
  System.out.println(match.size() + ""String_Node_Str"");
  System.out.println(match.age.sum() + ""String_Node_Str"");
  for (  People person : match) {
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  Group group=new Group();
  PeopleTable people1=new PeopleTable(group);
  people1.add(""String_Node_Str"",20,true);
  people1.add(""String_Node_Str"",21,false);
  try {
    group.writeToFile(""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Group fromDisk=new Group(""String_Node_Str"");
  PeopleTable people2=new PeopleTable(fromDisk);
  for (  People person : people2) {
    System.out.println(person.getName() + ""String_Node_Str"" + person.getAge()+ ""String_Node_Str"");
  }
  byte[] buffer=group.writeToMem();
  Group fromMem=new Group(buffer);
  PeopleTable people3=new PeopleTable(fromMem);
  for (  People person : people3) {
    System.out.println(person.getName() + ""String_Node_Str"" + person.getAge()+ ""String_Node_Str"");
  }
}","public static void main(String[] args){
  PeopleTable peopletable=new PeopleTable();
  peopletable.add(""String_Node_Str"",20,true);
  peopletable.add(""String_Node_Str"",21,false);
  peopletable.add(""String_Node_Str"",32,true);
  peopletable.add(""String_Node_Str"",43,false);
  peopletable.add(""String_Node_Str"",54,true);
  peopletable.insert(2,""String_Node_Str"",34,true);
  if (!peopletable.isEmpty()) {
    long s=peopletable.size();
  }
  System.out.println(""String_Node_Str"" + peopletable.size() + ""String_Node_Str"");
  String name=peopletable.at(2).getName();
  String name2=peopletable.at(2).name.get();
  peopletable.at(2).name.set(""String_Node_Str"");
  peopletable.at(2).setName(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + name + ""String_Node_Str""+ name2);
  System.out.println(""String_Node_Str"" + peopletable.at(2).getName());
  peopletable.remove(2);
  System.out.println(""String_Node_Str"" + peopletable.size() + ""String_Node_Str"");
  for (  People person : peopletable) {
    System.out.println(person.getName() + ""String_Node_Str"" + person.getAge()+ ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  People p=peopletable.name.equal(""String_Node_Str"").findFirst();
  System.out.println(p);
  PeopleQuery query=peopletable.age.between(20,35).name.contains(""String_Node_Str"").group().hired.equal(true).or().name.endsWith(""String_Node_Str"").endGroup();
  PeopleView match=query.findAll();
  System.out.println(match.size() + ""String_Node_Str"");
  System.out.println(match.age.sum() + ""String_Node_Str"");
  for (  People person : match) {
  }
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  Group group=new Group();
  PeopleTable people1=new PeopleTable(group);
  people1.add(""String_Node_Str"",20,true);
  people1.add(""String_Node_Str"",21,false);
  try {
    group.writeToFile(""String_Node_Str"");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Group fromDisk=new Group(""String_Node_Str"");
  PeopleTable people2=new PeopleTable(fromDisk);
  for (  People person : people2) {
    System.out.println(person.getName() + ""String_Node_Str"" + person.getAge()+ ""String_Node_Str"");
  }
  byte[] buffer=group.writeToMem();
  Group fromMem=new Group(buffer);
  PeopleTable people3=new PeopleTable(fromMem);
  for (  People person : people3) {
    System.out.println(person.getName() + ""String_Node_Str"" + person.getAge()+ ""String_Node_Str"");
  }
}",0.9916770703287556
155908,"public String getSpecFields(TypeElement model,File sourcePath){
  String modelName=model.toString();
  File sourceFile=findSourceFile(sourcePath,modelName);
  if (sourceFile == null) {
    logger.error(""String_Node_Str"");
    return null;
  }
  logger.info(""String_Node_Str"" + sourceFile);
  String source;
  try {
    source=FileUtils.readFileToString(sourceFile);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + sourceFile);
    return null;
  }
  Matcher m=Pattern.compile(""String_Node_Str"" + model.getSimpleName() + ""String_Node_Str"").matcher(source);
  if (m.find()) {
    String specSource=m.group(1).trim();
    return specSource;
  }
 else {
    logger.error(""String_Node_Str"" + model.getSimpleName());
    return null;
  }
}","public String getSpecFields(TypeElement model,File sourcePath){
  String modelName=model.toString();
  File sourceFile=findSourceFile(sourcePath,modelName);
  if (sourceFile == null) {
    logger.error(""String_Node_Str"");
    return null;
  }
  logger.info(""String_Node_Str"" + sourceFile);
  String source;
  try {
    source=FileUtils.readFileToString(sourceFile);
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"" + sourceFile);
    return null;
  }
  String spec=specMatcher.matchSpec(model.getSimpleName().toString(),source);
  if (spec == null) {
    logger.error(""String_Node_Str"" + modelName);
  }
  return spec;
}",0.7352517985611511
155909,"private File findSourceFile(File sourcePath,String modelName){
  String[] modelNameParts=modelName.split(""String_Node_Str"");
  for (  String part : modelNameParts) {
    File path=new File(sourcePath.getAbsolutePath() + File.separator + part);
    if (path.isDirectory()) {
      sourcePath=path;
    }
 else {
      File sourceFile=new File(path.getAbsolutePath() + ""String_Node_Str"");
      if (sourceFile.exists() && sourceFile.isFile()) {
        return sourceFile;
      }
 else {
        logger.error(""String_Node_Str"" + sourceFile);
        return null;
      }
    }
  }
  return null;
}","private File findSourceFile(File sourcePath,String modelName){
  String[] modelNameParts=modelName.split(""String_Node_Str"");
  for (  String part : modelNameParts) {
    File path=new File(sourcePath.getAbsolutePath() + File.separator + part);
    if (path.isDirectory()) {
      sourcePath=path;
    }
 else {
      File sourceFile=new File(path.getAbsolutePath() + ""String_Node_Str"");
      if (sourceFile.exists() && sourceFile.isFile()) {
        return sourceFile;
      }
 else {
        logger.warn(""String_Node_Str"" + sourceFile);
        return scanSourcePath(sourcePath,modelNameParts[modelNameParts.length - 1]);
      }
    }
  }
  return null;
}",0.9353551476456504
155910,"public TableSpecReader(AnnotationProcessingLogger logger){
  this.logger=logger;
}","public TableSpecReader(AnnotationProcessingLogger logger){
  this.logger=logger;
  this.specMatcher=new SpecMatcher(logger);
}",0.7884615384615384
155911,"private List<VariableElement> getFields(Element element){
  List<VariableElement> fields=new ArrayList<VariableElement>();
  List<? extends Element> dd=elementUtils.getAllMembers((TypeElement)element);
  for (  Element e : dd) {
    info(""String_Node_Str"" + e.getSimpleName());
  }
  for (  Element enclosedElement : element.getEnclosedElements()) {
    if (enclosedElement.getKind().equals(ElementKind.FIELD)) {
      info(""String_Node_Str"" + enclosedElement.getSimpleName());
      if (enclosedElement instanceof VariableElement) {
        VariableElement field=(VariableElement)enclosedElement;
        fields.add(field);
      }
    }
  }
  return fields;
}","private List<VariableElement> getFields(Element element){
  List<VariableElement> fields=new ArrayList<VariableElement>();
  for (  Element enclosedElement : element.getEnclosedElements()) {
    if (enclosedElement.getKind().equals(ElementKind.FIELD)) {
      if (enclosedElement instanceof VariableElement) {
        VariableElement field=(VariableElement)enclosedElement;
        fields.add(field);
      }
    }
  }
  return fields;
}",0.4990892531876138
155912,"@Override public void processAnnotations(Set<? extends TypeElement> annotations,RoundEnvironment env) throws Exception {
  for (  TypeElement annotation : annotations) {
    String annotationName=annotation.getQualifiedName().toString();
    if (annotationName.equals(Table.class.getCanonicalName())) {
      Set<? extends Element> elements=env.getElementsAnnotatedWith(annotation);
      processAnnotatedElements(elements);
    }
 else {
      warn(""String_Node_Str"" + annotationName);
    }
  }
}","@Override public void processAnnotations(Set<? extends TypeElement> annotations,RoundEnvironment env) throws Exception {
  fieldSorter=new FieldSorter(logger);
  for (  TypeElement annotation : annotations) {
    String annotationName=annotation.getQualifiedName().toString();
    if (annotationName.equals(Table.class.getCanonicalName())) {
      Set<? extends Element> elements=env.getElementsAnnotatedWith(annotation);
      processAnnotatedElements(elements);
    }
 else {
      logger.warn(""String_Node_Str"" + annotationName);
    }
  }
}",0.9558541266794626
155913,"private void processAnnotatedElements(Set<? extends Element> elements) throws IOException {
  info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  prepareTables(elements);
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      String modelType=model.getQualifiedName().toString();
      List<VariableElement> fields=getFields(element);
      String entity=StringUtils.capitalize(model.getSimpleName().toString());
      info(""String_Node_Str"" + entity + ""String_Node_Str""+ fields.size()+ ""String_Node_Str"");
      int index=0;
      final List<Model> columns=new ArrayList<Model>();
      for (      VariableElement field : fields) {
        String columnType=getColumnType(field);
        String fieldType=getAdjustedFieldType(field);
        String fieldName=field.getSimpleName().toString();
        boolean isSubtable=isSubtable(fieldType);
        String subtype=isSubtable ? getSubtableType(field) : null;
        Model column=new Model();
        column.put(""String_Node_Str"",fieldName);
        column.put(""String_Node_Str"",columnType);
        column.put(""String_Node_Str"",fieldType);
        column.put(""String_Node_Str"",index++);
        column.put(""String_Node_Str"",isSubtable);
        column.put(""String_Node_Str"",subtype);
        columns.add(column);
      }
      String packageName=""String_Node_Str"";
      boolean isNested=isSubtable(modelType);
      Map<String,Object> commonAttr=new HashMap<String,Object>();
      commonAttr.put(""String_Node_Str"",entity);
      commonAttr.put(""String_Node_Str"",columns);
      commonAttr.put(""String_Node_Str"",isNested);
      commonAttr.put(""String_Node_Str"",packageName);
      commonAttr.put(""String_Node_Str"",INFO_GENERATED);
      Model table=new Model();
      table.put(""String_Node_Str"",entity + ""String_Node_Str"");
      table.putAll(commonAttr);
      Model methodAdd=new Model();
      methodAdd.put(""String_Node_Str"",columns);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodAdd));
      Model methodInsert=new Model();
      methodInsert.put(""String_Node_Str"",columns);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodInsert));
      String tableContent=renderer.render(""String_Node_Str"",table);
      writeToFile(packageName,entity + ""String_Node_Str"",tableContent);
      Model cursor=new Model();
      cursor.put(""String_Node_Str"",entity);
      cursor.putAll(commonAttr);
      String cursorContent=renderer.render(""String_Node_Str"",cursor);
      writeToFile(packageName,entity + ""String_Node_Str"",cursorContent);
      Model view=new Model();
      view.put(""String_Node_Str"",entity + ""String_Node_Str"");
      view.putAll(commonAttr);
      String viewContent=renderer.render(""String_Node_Str"",view);
      writeToFile(packageName,entity + ""String_Node_Str"",viewContent);
      Model query=new Model();
      query.put(""String_Node_Str"",entity + ""String_Node_Str"");
      query.putAll(commonAttr);
      String queryContent=renderer.render(""String_Node_Str"",query);
      writeToFile(packageName,entity + ""String_Node_Str"",queryContent);
    }
  }
}","private void processAnnotatedElements(Set<? extends Element> elements) throws IOException {
  logger.info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  URI uri=filer.getResource(StandardLocation.SOURCE_OUTPUT,""String_Node_Str"",""String_Node_Str"").toUri();
  File file=new File(uri);
  File sourcesPath=file.getParentFile();
  prepareTables(elements);
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      String modelType=model.getQualifiedName().toString();
      List<VariableElement> fields=getFields(element);
      fieldSorter.sortFields(fields,model,sourcesPath);
      String entity=StringUtils.capitalize(model.getSimpleName().toString());
      logger.info(""String_Node_Str"" + entity + ""String_Node_Str""+ fields.size()+ ""String_Node_Str"");
      int index=0;
      final List<Model> columns=new ArrayList<Model>();
      for (      VariableElement field : fields) {
        String originalType=fieldType(field);
        String columnType=getColumnType(field);
        String fieldType=getAdjustedFieldType(field);
        String paramType=getParamType(field);
        String fieldName=field.getSimpleName().toString();
        boolean isSubtable=isSubtable(fieldType);
        String subtype=isSubtable ? getSubtableType(field) : null;
        Model column=new Model();
        column.put(""String_Node_Str"",fieldName);
        column.put(""String_Node_Str"",columnType);
        column.put(""String_Node_Str"",originalType);
        column.put(""String_Node_Str"",fieldType);
        column.put(""String_Node_Str"",paramType);
        column.put(""String_Node_Str"",index++);
        column.put(""String_Node_Str"",isSubtable);
        column.put(""String_Node_Str"",subtype);
        columns.add(column);
      }
      String packageName=""String_Node_Str"";
      boolean isNested=isSubtable(modelType);
      Map<String,Object> commonAttr=new HashMap<String,Object>();
      commonAttr.put(""String_Node_Str"",entity);
      commonAttr.put(""String_Node_Str"",columns);
      commonAttr.put(""String_Node_Str"",isNested);
      commonAttr.put(""String_Node_Str"",packageName);
      commonAttr.put(""String_Node_Str"",INFO_GENERATED);
      Model table=new Model();
      table.put(""String_Node_Str"",entity + ""String_Node_Str"");
      table.putAll(commonAttr);
      Model methodAdd=new Model();
      methodAdd.put(""String_Node_Str"",columns);
      methodAdd.put(""String_Node_Str"",entity);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodAdd));
      Model methodInsert=new Model();
      methodInsert.put(""String_Node_Str"",columns);
      methodInsert.put(""String_Node_Str"",entity);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodInsert));
      String tableContent=renderer.render(""String_Node_Str"",table);
      writeToFile(packageName,entity + ""String_Node_Str"",tableContent);
      Model cursor=new Model();
      cursor.put(""String_Node_Str"",entity);
      cursor.putAll(commonAttr);
      String cursorContent=renderer.render(""String_Node_Str"",cursor);
      writeToFile(packageName,entity + ""String_Node_Str"",cursorContent);
      Model view=new Model();
      view.put(""String_Node_Str"",entity + ""String_Node_Str"");
      view.putAll(commonAttr);
      String viewContent=renderer.render(""String_Node_Str"",view);
      writeToFile(packageName,entity + ""String_Node_Str"",viewContent);
      Model query=new Model();
      query.put(""String_Node_Str"",entity + ""String_Node_Str"");
      query.putAll(commonAttr);
      String queryContent=renderer.render(""String_Node_Str"",query);
      writeToFile(packageName,entity + ""String_Node_Str"",queryContent);
    }
  }
}",0.8912822005530491
155914,"private String getAdjustedFieldType(VariableElement field){
  String type=fieldType(field);
  if (NUM_TYPES.contains(type)) {
    type=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    type=""String_Node_Str"";
  }
  return type;
}","private String getAdjustedFieldType(VariableElement field){
  String type=fieldType(field);
  if (NUM_TYPES.contains(type)) {
    type=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    type=""String_Node_Str"";
  }
 else   if (type.equals(""String_Node_Str"")) {
    type=""String_Node_Str"";
  }
  return type;
}",0.8213058419243986
155915,"private void prepareTables(Set<? extends Element> elements){
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      String name=model.getQualifiedName().toString();
      if (isReferencedBy(model,elements)) {
        info(""String_Node_Str"" + name);
        subtables.put(name,model);
      }
 else {
        info(""String_Node_Str"" + name);
        tables.put(name,model);
      }
    }
  }
}","private void prepareTables(Set<? extends Element> elements){
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      String name=model.getQualifiedName().toString();
      if (isReferencedBy(model,elements)) {
        logger.info(""String_Node_Str"" + name);
        subtables.put(name,model);
      }
 else {
        logger.info(""String_Node_Str"" + name);
        tables.put(name,model);
      }
    }
  }
}",0.9852941176470588
155916,"private void processAnnotatedElements(Set<? extends Element> elements) throws IOException {
  logger.info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  URI uri=filer.getResource(StandardLocation.SOURCE_OUTPUT,""String_Node_Str"",""String_Node_Str"").toUri();
  File file=new File(uri);
  File sourcesPath=file.getParentFile();
  prepareTables(elements);
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      String modelType=model.getQualifiedName().toString();
      List<VariableElement> fields=getFields(element);
      fieldSorter.sortFields(fields,model,sourcesPath);
      String entity=StringUtils.capitalize(model.getSimpleName().toString());
      logger.info(""String_Node_Str"" + entity + ""String_Node_Str""+ fields.size()+ ""String_Node_Str"");
      int index=0;
      final List<Model> columns=new ArrayList<Model>();
      for (      VariableElement field : fields) {
        String originalType=fieldType(field);
        String columnType=getColumnType(field);
        String fieldType=getAdjustedFieldType(field);
        String paramType=getParamType(field);
        String fieldName=field.getSimpleName().toString();
        boolean isSubtable=isSubtable(fieldType);
        String subtype=isSubtable ? getSubtableType(field) : null;
        Model column=new Model();
        column.put(""String_Node_Str"",fieldName);
        column.put(""String_Node_Str"",columnType);
        column.put(""String_Node_Str"",originalType);
        column.put(""String_Node_Str"",fieldType);
        column.put(""String_Node_Str"",paramType);
        column.put(""String_Node_Str"",index++);
        column.put(""String_Node_Str"",isSubtable);
        column.put(""String_Node_Str"",subtype);
        columns.add(column);
      }
      String packageName=calculatePackageName(model);
      boolean isNested=isSubtable(modelType);
      Map<String,Object> commonAttr=new HashMap<String,Object>();
      commonAttr.put(""String_Node_Str"",entity);
      commonAttr.put(""String_Node_Str"",columns);
      commonAttr.put(""String_Node_Str"",isNested);
      commonAttr.put(""String_Node_Str"",packageName);
      commonAttr.put(""String_Node_Str"",INFO_GENERATED);
      Model table=new Model();
      table.put(""String_Node_Str"",entity + ""String_Node_Str"");
      table.putAll(commonAttr);
      Model methodAdd=new Model();
      methodAdd.put(""String_Node_Str"",columns);
      methodAdd.put(""String_Node_Str"",entity);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodAdd));
      Model methodInsert=new Model();
      methodInsert.put(""String_Node_Str"",columns);
      methodInsert.put(""String_Node_Str"",entity);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodInsert));
      String tableContent=renderer.render(""String_Node_Str"",table);
      writeToFile(packageName,entity + ""String_Node_Str"",tableContent,model);
      Model cursor=new Model();
      cursor.put(""String_Node_Str"",entity);
      cursor.putAll(commonAttr);
      String cursorContent=renderer.render(""String_Node_Str"",cursor);
      writeToFile(packageName,entity + ""String_Node_Str"",cursorContent,model);
      Model view=new Model();
      view.put(""String_Node_Str"",entity + ""String_Node_Str"");
      view.putAll(commonAttr);
      String viewContent=renderer.render(""String_Node_Str"",view);
      writeToFile(packageName,entity + ""String_Node_Str"",viewContent,model);
      Model query=new Model();
      query.put(""String_Node_Str"",entity + ""String_Node_Str"");
      query.putAll(commonAttr);
      String queryContent=renderer.render(""String_Node_Str"",query);
      writeToFile(packageName,entity + ""String_Node_Str"",queryContent,model);
    }
  }
}","private void processAnnotatedElements(Set<? extends Element> elements) throws IOException {
  logger.info(""String_Node_Str"" + elements.size() + ""String_Node_Str"");
  URI uri=filer.getResource(StandardLocation.SOURCE_OUTPUT,""String_Node_Str"",""String_Node_Str"").toUri();
  File file=new File(uri);
  File sourcesPath=file.getParentFile();
  prepareTables(elements);
  for (  Element element : elements) {
    if (element instanceof TypeElement) {
      TypeElement model=(TypeElement)element;
      String modelType=model.getQualifiedName().toString();
      List<VariableElement> fields=getFields(element);
      fieldSorter.sortFields(fields,model,sourcesPath);
      String entity=StringUtils.capitalize(model.getSimpleName().toString());
      logger.info(""String_Node_Str"" + entity + ""String_Node_Str""+ fields.size()+ ""String_Node_Str"");
      int index=0;
      final List<Model> columns=new ArrayList<Model>();
      for (      VariableElement field : fields) {
        String originalType=fieldType(field);
        String columnType=getColumnType(field);
        String fieldType=getAdjustedFieldType(field);
        String paramType=getParamType(field);
        String fieldName=field.getSimpleName().toString();
        boolean isSubtable=isSubtable(fieldType);
        String subtype=isSubtable ? getSubtableType(field) : null;
        Model column=new Model();
        column.put(""String_Node_Str"",fieldName);
        column.put(""String_Node_Str"",columnType);
        column.put(""String_Node_Str"",originalType);
        column.put(""String_Node_Str"",fieldType);
        column.put(""String_Node_Str"",paramType);
        column.put(""String_Node_Str"",index++);
        column.put(""String_Node_Str"",isSubtable);
        column.put(""String_Node_Str"",subtype);
        columns.add(column);
      }
      String packageName=calculatePackageName(model);
      boolean isNested=isSubtable(modelType);
      Map<String,Object> commonAttr=new HashMap<String,Object>();
      commonAttr.put(""String_Node_Str"",entity);
      commonAttr.put(""String_Node_Str"",columns);
      commonAttr.put(""String_Node_Str"",isNested);
      commonAttr.put(""String_Node_Str"",packageName);
      commonAttr.put(""String_Node_Str"",INFO_GENERATED);
      Model table=new Model();
      table.put(""String_Node_Str"",entity + ""String_Node_Str"");
      table.putAll(commonAttr);
      Model methodAdd=new Model();
      methodAdd.put(""String_Node_Str"",columns);
      methodAdd.put(""String_Node_Str"",entity);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodAdd));
      Model methodInsert=new Model();
      methodInsert.put(""String_Node_Str"",columns);
      methodInsert.put(""String_Node_Str"",entity);
      table.put(""String_Node_Str"",renderer.render(""String_Node_Str"",methodInsert));
      String tableContent=renderer.render(""String_Node_Str"",table);
      writeToSourceFile(packageName,entity + ""String_Node_Str"",tableContent,model);
      Model cursor=new Model();
      cursor.put(""String_Node_Str"",entity);
      cursor.putAll(commonAttr);
      String cursorContent=renderer.render(""String_Node_Str"",cursor);
      writeToSourceFile(packageName,entity,cursorContent,model);
      Model view=new Model();
      view.put(""String_Node_Str"",entity + ""String_Node_Str"");
      view.putAll(commonAttr);
      String viewContent=renderer.render(""String_Node_Str"",view);
      writeToSourceFile(packageName,entity + ""String_Node_Str"",viewContent,model);
      Model query=new Model();
      query.put(""String_Node_Str"",entity + ""String_Node_Str"");
      query.putAll(commonAttr);
      String queryContent=renderer.render(""String_Node_Str"",query);
      writeToSourceFile(packageName,entity + ""String_Node_Str"",queryContent,model);
    }
  }
}",0.9941144997324772
155917,"@Test(dataProvider=""String_Node_Str"") public void shouldStoreValuesOfMixedType(MixedData value1,MixedData value2,MixedData value3) throws Exception {
  TableBase table=new TableBase();
  TableSpec tableSpec=new TableSpec();
  tableSpec.addColumn(ColumnType.ColumnTypeMixed,""String_Node_Str"");
  table.updateFromSpec(tableSpec);
  table.insertMixed(0,0,Mixed.mixedValue(value1.value));
  table.insertDone();
  checkMixedCell(table,0,0,value1.type,value1.value);
  table.setMixed(0,0,Mixed.mixedValue(value2.value));
  checkMixedCell(table,0,0,value2.type,value2.value);
  table.setMixed(0,0,Mixed.mixedValue(value3.value));
  checkMixedCell(table,0,0,value3.type,value3.value);
}","@Test(dataProvider=""String_Node_Str"") public void shouldStoreValuesOfMixedType(MixedData value1,MixedData value2,MixedData value3) throws Exception {
  TableBase table=new TableBase();
  TableSpec tableSpec=new TableSpec();
  tableSpec.addColumn(ColumnType.ColumnTypeMixed,""String_Node_Str"");
  table.updateFromSpec(tableSpec);
  table.insertMixed(0,0,Mixed.mixedValue(value1.value));
  table.insertDone();
  checkMixedCell(table,0,0,value1.type,value1.value);
  table.setMixed(0,0,Mixed.mixedValue(value2.value));
  checkMixedCell(table,0,0,value2.type,value2.value);
  table.setMixed(0,0,Mixed.mixedValue(value3.value));
  checkMixedCell(table,0,0,value3.type,value3.value);
  table.close();
}",0.98761835396941
155918,"public static TestResult TestPerformance(IPerformance test,int rows){
  TestResult result=new TestResult();
  Timer timer=new Timer();
  int testNo=0;
  long memBefore=Util.getUsedMemory();
  memBefore=Util.getUsedMemory();
  test.buildTable(rows);
  result.javaDBMemUsed=Math.max(Util.getUsedMemory() - memBefore,1);
  result.nativeDBMemUsed=test.usedNativeMemory();
{
    test.begin_findSmallInt(SMALL_TEST_VAL + 1);
    timer.Start();
    for (int i=0; i < REPEAT_SEARCH; ++i) {
      if (test.findSmallInt(SMALL_TEST_VAL + 1)) {
        System.out.println(""String_Node_Str"");
        break;
      }
    }
    result.testTime[testNo++]=timer.GetTimeInMs();
    test.end_findSmallInt();
    System.out.printf(""String_Node_Str"");
  }
{
    test.begin_findByteInt(BYTE_TEST_VAL + 1);
    timer.Start();
    for (int i=0; i < REPEAT_SEARCH; ++i) {
      if (test.findByteInt(BYTE_TEST_VAL + 1)) {
        System.out.printf(""String_Node_Str"");
        break;
      }
    }
    result.testTime[testNo++]=timer.GetTimeInMs();
    test.end_findByteInt();
    System.out.printf(""String_Node_Str"");
  }
{
    test.begin_findString(""String_Node_Str"");
    timer.Start();
    for (int i=0; i < REPEAT_SEARCH; ++i) {
      if (test.findString(""String_Node_Str"")) {
        System.out.printf(""String_Node_Str"");
        break;
      }
    }
    result.testTime[testNo++]=timer.GetTimeInMs();
    test.end_findString();
    System.out.printf(""String_Node_Str"");
  }
  test.closeTable();
  return result;
}","public static TestResult TestPerformance(IPerformance test,int rows){
  TestResult result=new TestResult();
  Timer timer=new Timer();
  int testNo=0;
  if (pause)   util.waitForEnter();
  long memBefore=Util.getUsedMemory();
  memBefore=Util.getUsedMemory();
  test.buildTable(rows);
  result.javaDBMemUsed=Math.max(Util.getUsedMemory() - memBefore,1);
  result.nativeDBMemUsed=test.usedNativeMemory();
{
    test.begin_findSmallInt(SMALL_TEST_VAL + 1);
    timer.Start();
    for (int i=0; i < REPEAT_SEARCH; ++i) {
      if (test.findSmallInt(SMALL_TEST_VAL + 1)) {
        System.out.println(""String_Node_Str"");
        break;
      }
    }
    result.testTime[testNo++]=timer.GetTimeInMs();
    test.end_findSmallInt();
    System.out.printf(""String_Node_Str"");
  }
{
    test.begin_findByteInt(BYTE_TEST_VAL + 1);
    timer.Start();
    for (int i=0; i < REPEAT_SEARCH; ++i) {
      if (test.findByteInt(BYTE_TEST_VAL + 1)) {
        System.out.printf(""String_Node_Str"");
        break;
      }
    }
    result.testTime[testNo++]=timer.GetTimeInMs();
    test.end_findByteInt();
    System.out.printf(""String_Node_Str"");
  }
{
    test.begin_findString(""String_Node_Str"");
    timer.Start();
    for (int i=0; i < REPEAT_SEARCH; ++i) {
      if (test.findString(""String_Node_Str"")) {
        System.out.printf(""String_Node_Str"");
        break;
      }
    }
    result.testTime[testNo++]=timer.GetTimeInMs();
    test.end_findString();
    System.out.printf(""String_Node_Str"");
  }
  if (pause)   util.waitForEnter();
  test.closeTable();
  return result;
}",0.9764551994767822
155919,"public static void main(String[] args){
  TightDB.addNativeLibraryPath(""String_Node_Str"");
  int numOfValues=250000;
  System.out.println(""String_Node_Str"" + numOfValues + ""String_Node_Str""+ REPEAT_SEARCH+ ""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  TestResult tightdb=TestPerformance(new Tightdb(),numOfValues);
  System.out.print(""String_Node_Str"");
  TestResult javaArray=TestPerformance(new JavaArrayList(),numOfValues);
  System.out.print(""String_Node_Str"");
  TestResult sqlite=TestPerformance(new SQLiteTest(),numOfValues);
  System.out.println(""String_Node_Str"");
  String[] testText={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(""String_Node_Str"");
  for (int test=0; test < TESTS; ++test) {
    System.out.print(testText[test]);
    printTime(tightdb.testTime[test],""String_Node_Str"",""String_Node_Str"");
    printTime(javaArray.testTime[test],""String_Node_Str"",""String_Node_Str"");
    if (tightdb.testTime[test] > 0)     System.out.print(""String_Node_Str"" + javaArray.testTime[test] / tightdb.testTime[test] + ""String_Node_Str"");
 else     System.out.print(""String_Node_Str"");
    printTime(sqlite.testTime[test],""String_Node_Str"",""String_Node_Str"");
    if (tightdb.testTime[test] > 0)     System.out.print(""String_Node_Str"" + sqlite.testTime[test] / tightdb.testTime[test] + ""String_Node_Str"");
 else     System.out.print(""String_Node_Str"");
    System.out.println();
  }
  long tightTotal=tightdb.javaDBMemUsed + tightdb.nativeDBMemUsed;
  long javaTotal=javaArray.javaDBMemUsed + javaArray.nativeDBMemUsed;
  long sqliteTotal=sqlite.javaDBMemUsed + sqlite.nativeDBMemUsed;
  System.out.printf(""String_Node_Str"",toKB(tightTotal),toKB(javaTotal),javaTotal / tightTotal,toKB(sqliteTotal),sqliteTotal / tightTotal);
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args){
  TightDB.addNativeLibraryPath(""String_Node_Str"");
  int numOfValues=250000;
  System.out.println(""String_Node_Str"" + numOfValues + ""String_Node_Str""+ REPEAT_SEARCH+ ""String_Node_Str"");
  System.out.print(""String_Node_Str"");
  TestResult tightdb=TestPerformance(new Tightdb(),numOfValues);
  System.out.print(""String_Node_Str"");
  TestResult javaArray=TestPerformance(new JavaArrayList(),numOfValues);
  System.out.print(""String_Node_Str"");
  TestResult sqlite=TestPerformance(new SQLiteTest(),numOfValues);
  System.out.println(""String_Node_Str"");
  String[] testText={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  System.out.println(""String_Node_Str"");
  for (int test=0; test < TESTS; ++test) {
    System.out.print(testText[test]);
    printTime(tightdb.testTime[test],""String_Node_Str"",""String_Node_Str"");
    printTime(javaArray.testTime[test],""String_Node_Str"",""String_Node_Str"");
    if (tightdb.testTime[test] > 0)     System.out.print(""String_Node_Str"" + javaArray.testTime[test] / tightdb.testTime[test] + ""String_Node_Str"");
 else     System.out.print(""String_Node_Str"");
    printTime(sqlite.testTime[test],""String_Node_Str"",""String_Node_Str"");
    if (tightdb.testTime[test] > 0)     System.out.print(""String_Node_Str"" + sqlite.testTime[test] / tightdb.testTime[test] + ""String_Node_Str"");
 else     System.out.print(""String_Node_Str"");
    System.out.println();
  }
  long tightTotal=tightdb.javaDBMemUsed + tightdb.nativeDBMemUsed;
  long javaTotal=javaArray.javaDBMemUsed + javaArray.nativeDBMemUsed;
  long sqliteTotal=sqlite.javaDBMemUsed + sqlite.nativeDBMemUsed;
  System.out.printf(""String_Node_Str"",toKB(tightTotal),toKB(javaTotal),javaTotal / tightTotal,toKB(sqliteTotal),sqliteTotal / tightTotal);
  System.out.println(""String_Node_Str"");
  if (pause)   util.waitForEnter();
}",0.9903794762159271
155920,"private synchronized void close(){
  if (nativePtr != 0) {
    nativeClose(nativePtr);
    nativePtr=0;
  }
}","public synchronized void close(){
  if (nativePtr != 0) {
    nativeClose(nativePtr);
    nativePtr=0;
  }
}",0.9585253456221198
155921,"public static void main(String[] args){
  Group group=new Group();
  group.close();
  group.commit();
  TableBase a=group.getTable(""String_Node_Str"");
  int tableCount=group.getTableCount();
  String firstTableName=group.getTableName(0);
  if (group.hasTable(""String_Node_Str"")) {
  }
  if (group.isValid()) {
  }
  ByteBuffer buffer=group.writeToByteBuffer();
  File file=new File(""String_Node_Str"");
  try {
    group.writeToFile(file);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  try {
    group.writeToFile(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  byte[] mem=group.writeToMem();
}","public static void main(String[] args){
  Group group=new Group();
  group.close();
  group.commit();
  TableBase a=group.getTable(""String_Node_Str"");
  long tableCount=group.getTableCount();
  String firstTableName=group.getTableName(0);
  if (group.hasTable(""String_Node_Str"")) {
  }
  if (group.isValid()) {
  }
  ByteBuffer buffer=group.writeToByteBuffer();
  File file=new File(""String_Node_Str"");
  try {
    group.writeToFile(file);
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  try {
    group.writeToFile(""String_Node_Str"");
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
  byte[] mem=group.writeToMem();
}",0.9949964260185848
155922,"public int removeObsoleteGeneratedCode(ProcessingContext context,long beforeTimestamp){
  File directory=new File(context.getOutputPath());
  IOFileFilter fileFilter=new AndFileFilter(new SuffixFileFilter(""String_Node_Str""),new ObsoleteGeneratedCodeFilter());
  IOFileFilter dirFilter=TrueFileFilter.TRUE;
  Collection<File> files=FileUtils.listFiles(directory,fileFilter,dirFilter);
  int removedFilesCount=0;
  for (  File file : files) {
    if (file.lastModified() < beforeTimestamp) {
      context.getLogger().info(""String_Node_Str"",file);
      removedFilesCount++;
      file.deleteOnExit();
    }
  }
  return removedFilesCount;
}","public int removeObsoleteGeneratedCode(ProcessingContext context,long beforeTimestamp){
  File directory=new File(context.getOutputPath());
  if (!directory.exists() && context.getProfile() != null) {
    context.getLogger().info(""String_Node_Str"");
    directory=new File(context.getProfile());
  }
  context.getLogger().info(""String_Node_Str"",directory);
  IOFileFilter fileFilter=new AndFileFilter(new SuffixFileFilter(""String_Node_Str""),new ObsoleteGeneratedCodeFilter());
  IOFileFilter dirFilter=TrueFileFilter.TRUE;
  Collection<File> files=FileUtils.listFiles(directory,fileFilter,dirFilter);
  int removedFilesCount=0;
  for (  File file : files) {
    if (file.lastModified() < beforeTimestamp) {
      context.getLogger().info(""String_Node_Str"",file);
      removedFilesCount++;
      try {
        if (!file.delete()) {
          context.getLogger().warn(""String_Node_Str"",file);
          file.deleteOnExit();
        }
      }
 catch (      Exception e) {
        context.getLogger().warn(""String_Node_Str"",file);
        file.deleteOnExit();
      }
    }
  }
  return removedFilesCount;
}",0.7332185886402753
155923,"@Test(enabled=true) public void shouldSynchronizeNestedTables(){
  Group group=new Group();
  TableBase table=group.getTable(""String_Node_Str"");
  TableSpec tableSpec=new TableSpec();
  tableSpec.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  TableSpec subspec=tableSpec.addSubtableColumn(""String_Node_Str"");
  subspec.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  table.updateFromSpec(tableSpec);
  table.insertString(0,0,""String_Node_Str"");
  table.insertSubTable(1,0);
  assertEquals(1,table.size());
  TableBase subtable1=table.getSubTable(1,0);
  subtable1.insertLong(0,0,123);
  subtable1.insertDone();
  subtable1.close();
  assertEquals(1,subtable1.size());
  TableBase subtable2=table.getSubTable(1,0);
  assertEquals(1,subtable2.size());
  assertEquals(123,subtable2.getLong(0,0));
  table.clear();
}","@Test(enabled=true) public void shouldSynchronizeNestedTables(){
  Group group=new Group();
  TableBase table=group.getTable(""String_Node_Str"");
  TableSpec tableSpec=new TableSpec();
  tableSpec.addColumn(ColumnType.ColumnTypeString,""String_Node_Str"");
  TableSpec subspec=tableSpec.addSubtableColumn(""String_Node_Str"");
  subspec.addColumn(ColumnType.ColumnTypeInt,""String_Node_Str"");
  table.updateFromSpec(tableSpec);
  table.insertString(0,0,""String_Node_Str"");
  table.insertSubTable(1,0);
  table.insertDone();
  assertEquals(1,table.size());
  TableBase subtable1=table.getSubTable(1,0);
  subtable1.insertLong(0,0,123);
  subtable1.insertDone();
  assertEquals(1,subtable1.size());
  subtable1.close();
  TableBase subtable2=table.getSubTable(1,0);
  assertEquals(1,subtable2.size());
  assertEquals(123,subtable2.getLong(0,0));
  table.clear();
}",0.9621301775147928
155924,"@BeforeMethod public void init(){
  employees=new EmployeeTable();
  employees.add(FIRST_NAMES[0],LAST_NAMES[0],SALARIES[0],DRIVERS[0],PHOTOS[0],BIRTHDATES[0],EXTRAS[0]);
  employees.add(FIRST_NAMES[2],LAST_NAMES[2],SALARIES[2],DRIVERS[2],PHOTOS[2],BIRTHDATES[2],EXTRAS[2]);
  employees.insert(1,FIRST_NAMES[1],LAST_NAMES[1],SALARIES[1],DRIVERS[1],PHOTOS[1],BIRTHDATES[1],EXTRAS[1]);
}","@BeforeMethod public void init(){
  employees=new EmployeeTable();
  addEmployee(employees,EMPLOYEE0);
  addEmployee(employees,EMPLOYEE2);
  insertEmployee(employees,1,EMPLOYEE1);
}",0.4275618374558304
155925,"@BeforeMethod public void init(){
  EmployeeTable employeesTable=new EmployeeTable();
  employeesTable.add(NAME0,""String_Node_Str"",10000,true,new byte[]{1,2,3},new Date(),""String_Node_Str"");
  employeesTable.add(NAME2,""String_Node_Str"",10000,true,new byte[]{1,2,3},new Date(),true);
  employeesTable.insert(1,NAME1,""String_Node_Str"",30000,false,new byte[]{4,5},new Date(),1234);
  employees=employeesTable.where().findAll();
}","@BeforeMethod public void init(){
  EmployeeTable employeesTable=new EmployeeTable();
  addEmployee(employeesTable,EMPLOYEE0);
  addEmployee(employeesTable,EMPLOYEE2);
  insertEmployee(employeesTable,1,EMPLOYEE1);
  employees=employeesTable.where().findAll();
}",0.4395924308588064
155926,"@Test public void shouldFindFirstRecordByColumnValue() throws IllegalAccessException {
  Employee record1=employees.firstName.findFirst(EmployeesFixture.FIRST_NAMES[1]);
  assertEquals(1,record1.getPosition());
  Employee record2=employees.salary.findFirst(10000);
  assertEquals(0,record2.getPosition());
  Employee record3=employees.salary.findFirst(12345);
  assertNull(record3);
}","@Test public void shouldFindFirstRecordByColumnValue() throws IllegalAccessException {
  Employee record1=employees.firstName.findFirst(EmployeesFixture.EMPLOYEE1.firstName);
  assertEquals(1,record1.getPosition());
  Employee record2=employees.salary.findFirst(10000);
  assertEquals(0,record2.getPosition());
  Employee record3=employees.salary.findFirst(12345);
  assertNull(record3);
}",0.959896507115136
155927,"@Test public void shouldFindAllRecordsByColumnValue() throws IllegalAccessException {
  EmployeeView view1=employees.firstName.findAll(EmployeesFixture.FIRST_NAMES[1]);
  assertEquals(1,view1.size());
  EmployeeView view2=employees.salary.findAll(10000);
  assertEquals(2,view2.size());
  EmployeeView view3=employees.salary.findAll(12345);
  assertEquals(0,view3.size());
}","@Test public void shouldFindAllRecordsByColumnValue() throws IllegalAccessException {
  EmployeeView view1=employees.firstName.findAll(EmployeesFixture.EMPLOYEE1.firstName);
  assertEquals(1,view1.size());
  EmployeeView view2=employees.salary.findAll(10000);
  assertEquals(2,view2.size());
  EmployeeView view3=employees.salary.findAll(12345);
  assertEquals(0,view3.size());
}",0.9588313413014607
155928,"protected AbstractTable(EntityTypes<?,View,Cursor,Query> types,TableBase table){
  super(types,table);
  this.table=table;
  defineTableStructure();
}","protected AbstractTable(EntityTypes<?,View,Cursor,Query> types,TableBase table){
  super(types,table);
  this.table=table;
  if (table != null && table.getTableSpec().getColumnCount() <= 0) {
    final TableSpec spec=new TableSpec();
    specifyStructure(spec);
    table.updateFromSpec(spec);
  }
}",0.5657015590200446
155929,"private void defineTableStructure(){
  if (table != null) {
    final TableSpec spec=new TableSpec();
    specifyStructure(spec);
    table.updateFromSpec(spec);
  }
}","private void defineTableStructure(){
  if (table != null && table.getTableSpec().getColumnCount() <= 0) {
    final TableSpec spec=new TableSpec();
    specifyStructure(spec);
    table.updateFromSpec(spec);
  }
}",0.8789473684210526
155930,"/** 
 * Sets a value for a (string) cell. Note that if we call this method on the table for a particular column marked by the columnIndex, that column has to be an String based column which means the type of the column must be ColumnType.ColumnTypeString.
 * @param columnIndex column index of the cell
 * @param rowIndex row index of the cell
 * @param value
 */
public void setString(long columnIndex,long rowIndex,String value){
  nativeSetString(nativePtr,columnIndex,rowIndex,value);
}","/** 
 * Sets a value for a (string) cell.  Note that if we call this method on the table for a particular column  marked by the columnIndex, that column has to be an String based column which means the type of the column must be ColumnType.ColumnTypeString.
 * @param columnIndex column index of the cell
 * @param rowIndex row index of the cell
 * @param value
 */
public void setString(long columnIndex,long rowIndex,String value){
  nativeSetString(nativePtr,columnIndex,rowIndex,value);
}",0.9979633401221996
155931,"public TableBase getSubTable(long columnIndex,long rowIndex){
  return new TableBase(nativeGetSubTable(nativePtr,columnIndex,rowIndex));
}","/** 
 * Note: The subtable returned will have to be closed again after use. You can let javas garbage collector handle that or better yet call close() after use.
 * @param columnIndex column index of the cell
 * @param rowIndex row index of the cell
 * @return TableBase the subtable at the requested cell
 */
public TableBase getSubTable(long columnIndex,long rowIndex){
  return new TableBase(nativeGetSubTable(nativePtr,columnIndex,rowIndex));
}",0.4709897610921502
155932,"public AbstractSubtable(EntityTypes<?,View,Cursor,Query> types,TableBase subtable){
  super(types);
  this.subtable=subtable;
}","public AbstractSubtable(EntityTypes<?,View,Cursor,Query> types,TableBase subtable){
  super(types,subtable);
}",0.9113924050632912
155933,"private void defineTableStructure(){
  final TableSpec spec=new TableSpec();
  specifyStructure(spec);
  table.updateFromSpec(spec);
}","private void defineTableStructure(){
  if (table != null) {
    final TableSpec spec=new TableSpec();
    specifyStructure(spec);
    table.updateFromSpec(spec);
  }
}",0.8903654485049833
155934,"private AbstractTable(EntityTypes<?,View,Cursor,Query> types,TableBase table){
  super(types,table);
  this.table=table;
  defineTableStructure();
}","protected AbstractTable(EntityTypes<?,View,Cursor,Query> types,TableBase table){
  super(types,table);
  this.table=table;
  defineTableStructure();
}",0.9731543624161074
155935,"/** 
 * Returns a table with the specified name.
 * @param name The name of the table.
 * @return The table if it exists, otherwise null.
 */
public TableBase getTable(String name){
  if (hasTable(name)) {
    return new TableBase(nativeGetTableNativePtr(nativePtr,name));
  }
  return null;
}","/** 
 * Returns a table with the specified name.
 * @param name The name of the table.
 * @return The table if it exists, otherwise null.
 */
public TableBase getTable(String name){
  return new TableBase(nativeGetTableNativePtr(nativePtr,name));
}",0.9168207024029574
155936,"@Test public void shouldCreateTablesInGroup(){
  Group group=new Group();
  EmployeeTable employees=new EmployeeTable(group);
  employees.add(NAME0,""String_Node_Str"",10000,true,new byte[]{1,2,3},new Date(),""String_Node_Str"");
  employees.add(NAME2,""String_Node_Str"",20000,true,new byte[]{1,2,3},new Date(),true);
  employees.insert(1,NAME1,""String_Node_Str"",30000,false,new byte[]{4,5},new Date(),1234);
  assertEquals(NAME0,employees.at(0).getFirstName());
  assertEquals(NAME1,employees.at(1).getFirstName());
  assertEquals(NAME2,employees.at(2).getFirstName());
}","@Test public void shouldCreateTablesInGroup(){
  Group group=new Group();
  EmployeeTable employees=new EmployeeTable(group);
  employees.add(NAME0,""String_Node_Str"",10000,true,new byte[]{1,2,3},new Date(),""String_Node_Str"");
  employees.add(NAME2,""String_Node_Str"",20000,true,new byte[]{1,2,3},new Date(),true);
  employees.insert(1,NAME1,""String_Node_Str"",30000,false,new byte[]{4,5},new Date(),1234);
  EmployeeTable employees2=new EmployeeTable(group);
  assertEquals(NAME0,employees2.at(0).getFirstName());
  assertEquals(NAME1,employees2.at(1).getFirstName());
  assertEquals(NAME2,employees2.at(2).getFirstName());
}",0.9529411764705882
155937,"public long maximum(){
  return getView().maximum(columnIndex);
}","public long maximum(){
  return rowset.maximum(columnIndex);
}",0.9133858267716536
155938,"public long sum(){
  return getView().sum(columnIndex);
}","public long sum(){
  return rowset.sum(columnIndex);
}",0.9009009009009008
155939,"public long minimum(){
  return getView().minimum(columnIndex);
}","public long minimum(){
  return rowset.minimum(columnIndex);
}",0.9133858267716536
155940,"public String formatToCSV(){
  try {
    StringWriter sw=new StringWriter();
    CSVWriter writer=new CSVWriter(sw,',','""','""',""String_Node_Str"");
    for (    String[] rows : rows) {
      writer.writeNext(rows);
    }
    writer.close();
    return sw.toString();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","public String formatToCSV(){
  try {
    StringWriter sw=new StringWriter();
    CSVWriter writer=new CSVWriter(sw,',','""','""',""String_Node_Str"");
    for (    String[] row : rows) {
      writer.writeNext(row);
    }
    writer.close();
    return sw.toString();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9970238095238096
155941,"private int scanPage(int page){
  int n=maxPage;
  while (n <= page) {
    if (offsetMap.length <= n) {
      offsetMap=Arrays.copyOf(offsetMap,page + 1);
    }
    int cslot=n % cachePageId.length;
    cachePageId[cslot]=n;
    try {
      readPage(((long)n) * pageSize,offsetMap[n],cachePageData[cslot]);
    }
 catch (    MalformedInstanceIdException e) {
      long ptr=pointer[0];
      long iid=dumpBuffer.getID(ptr + 1);
      long ciid=iid >>> allignmentBits;
      int ps=(int)(((cidOffset - ciid + pageSize - 1) / (pageSize)));
      long oldIdBase=cidOffset;
      cidOffset-=ps * pageSize;
      long[] noffsetMap=new long[offsetMap.length + ps];
      Arrays.fill(noffsetMap,0,ps,0);
      System.arraycopy(offsetMap,0,noffsetMap,ps,offsetMap.length);
      offsetMap=noffsetMap;
      offsetMap[0]=ptr;
      int savedMaxPage=maxPage;
      boolean savedNestedScan=nestedScan;
      maxPage=0;
      nestedScan=true;
      scanPage(ps - 1);
      ps=(int)(compressID(oldIdBase) / pageSize);
      maxPage=savedMaxPage + ps;
      nestedScan=savedNestedScan;
      page+=ps;
      n+=ps;
      continue;
    }
    long noffs=pointer[0];
    if (noffs >= heap.getAllInstanceDumpBounds().endOffset) {
      scanComplete=true;
    }
    long rid=readID();
    if (rid != -1) {
      long nid=compressID(rid);
      int nn=(int)(nid / pageSize);
      if (offsetMap.length <= nn) {
        offsetMap=Arrays.copyOf(offsetMap,nn + 16);
      }
      for (int i=n + 1; i < nn; ++i) {
        if (offsetMap[i] == 0) {
          offsetMap[i]=-1;
        }
      }
      offsetMap[nn]=noffs;
      maxPage=Math.max(maxPage,nn);
      if (nn < maxPage) {
        if (nestedScan) {
          for (int i=n + 1; i <= page; ++i) {
            offsetMap[i]=-1;
          }
          return page;
        }
 else         if (maxPage == page) {
          return page;
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
      n=nn;
    }
 else {
      maxPage=n + 1;
      if (offsetMap.length <= maxPage) {
        offsetMap=Arrays.copyOf(offsetMap,maxPage + 1);
      }
      offsetMap[maxPage]=heap.getAllInstanceDumpBounds().endOffset;
      if (n < page) {
        if (nestedScan) {
          for (int i=n + 1; i <= page; ++i) {
            offsetMap[i]=-1;
          }
          return page;
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
      return n;
    }
  }
  return page;
}","private int scanPage(int page){
  int n=maxPage;
  while (n <= page) {
    if (offsetMap.length <= n) {
      offsetMap=Arrays.copyOf(offsetMap,page + 1);
    }
    int cslot=n % cachePageId.length;
    cachePageId[cslot]=n;
    try {
      readPage(((long)n) * pageSize,offsetMap[n],cachePageData[cslot]);
    }
 catch (    MalformedInstanceIdException e) {
      long ptr=pointer[0];
      long iid=dumpBuffer.getID(ptr + 1);
      long ciid=iid >>> allignmentBits;
      int ps=(int)(((cidOffset - ciid + pageSize - 1) / (pageSize)));
      long oldCidBase=cidOffset;
      cidOffset-=ps * pageSize;
      long[] noffsetMap=new long[offsetMap.length + ps];
      Arrays.fill(noffsetMap,0,ps,0);
      System.arraycopy(offsetMap,0,noffsetMap,ps,offsetMap.length);
      offsetMap=noffsetMap;
      offsetMap[0]=ptr;
      int savedMaxPage=maxPage;
      boolean savedNestedScan=nestedScan;
      maxPage=0;
      nestedScan=true;
      scanPage(ps - 1);
      ps=(int)(compressID(oldCidBase << allignmentBits) / pageSize);
      maxPage=savedMaxPage + ps;
      nestedScan=savedNestedScan;
      page+=ps;
      n+=ps;
      continue;
    }
    long noffs=pointer[0];
    if (noffs >= heap.getAllInstanceDumpBounds().endOffset) {
      scanComplete=true;
    }
    long rid=readID();
    if (rid != -1) {
      long nid=compressID(rid);
      int nn=(int)(nid / pageSize);
      if (offsetMap.length <= nn) {
        offsetMap=Arrays.copyOf(offsetMap,nn + 16);
      }
      for (int i=n + 1; i < nn; ++i) {
        if (offsetMap[i] == 0) {
          offsetMap[i]=-1;
        }
      }
      offsetMap[nn]=noffs;
      maxPage=Math.max(maxPage,nn);
      if (nn < maxPage) {
        if (nestedScan) {
          for (int i=n + 1; i <= page; ++i) {
            offsetMap[i]=-1;
          }
          return page;
        }
 else         if (maxPage == page) {
          return page;
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
      n=nn;
    }
 else {
      maxPage=n + 1;
      if (offsetMap.length <= maxPage) {
        offsetMap=Arrays.copyOf(offsetMap,maxPage + 1);
      }
      offsetMap[maxPage]=heap.getAllInstanceDumpBounds().endOffset;
      if (n < page) {
        if (nestedScan) {
          for (int i=n + 1; i <= page; ++i) {
            offsetMap[i]=-1;
          }
          return page;
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
      }
      return n;
    }
  }
  return page;
}",0.995190380761523
155942,"static HprofByteBuffer createHprofByteBuffer(File dumpFile) throws IOException {
  long fileLen=dumpFile.length();
  if (fileLen < MINIMAL_SIZE) {
    String errText=ResourceBundle.getBundle(""String_Node_Str"").getString(""String_Node_Str"");
    throw new IOException(errText);
  }
  try {
    if (fileLen < Integer.MAX_VALUE) {
      return new HprofMappedByteBuffer(dumpFile);
    }
 else {
      return new HprofLongMappedByteBuffer(dumpFile);
    }
  }
 catch (  IOException ex) {
    if (ex.getCause() instanceof OutOfMemoryError) {
      return new HprofFileBuffer(dumpFile);
    }
    throw ex;
  }
}","static HprofByteBuffer createHprofByteBuffer(File dumpFile) throws IOException {
  long fileLen=dumpFile.length();
  if (fileLen < MINIMAL_SIZE) {
    String errText=""String_Node_Str"";
    throw new IOException(errText);
  }
  try {
    if (fileLen < Integer.MAX_VALUE) {
      return new HprofMappedByteBuffer(dumpFile);
    }
 else {
      return new HprofLongMappedByteBuffer(dumpFile);
    }
  }
 catch (  IOException ex) {
    if (ex.getCause() instanceof OutOfMemoryError) {
      return new HprofFileBuffer(dumpFile);
    }
    throw ex;
  }
}",0.9523809523809524
155943,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ByteBuf buf=(ByteBuf)msg;
  if (buf.getUnsignedShort(buf.readerIndex()) == 0xfe02) {
    if (channel != null) {
      channel.writeAndFlush(new NetworkMessage(buf,remoteAddress));
    }
    return null;
  }
 else   if (buf.getByte(buf.readerIndex()) == '$') {
    return decodeInfo(channel,remoteAddress,buf.toString(StandardCharsets.US_ASCII).trim());
  }
 else   if (buf.getByte(buf.readerIndex() + 2) == ',') {
    return decodeText(channel,remoteAddress,buf.toString(StandardCharsets.US_ASCII).trim());
  }
 else {
    return decodeBinary(channel,remoteAddress,buf);
  }
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ByteBuf buf=(ByteBuf)msg;
  if (buf.getUnsignedShort(buf.readerIndex()) == 0xfe02) {
    if (channel != null) {
      channel.writeAndFlush(new NetworkMessage(buf.retain(),remoteAddress));
    }
    return null;
  }
 else   if (buf.getByte(buf.readerIndex()) == '$') {
    return decodeInfo(channel,remoteAddress,buf.toString(StandardCharsets.US_ASCII).trim());
  }
 else   if (buf.getByte(buf.readerIndex() + 2) == ',') {
    return decodeText(channel,remoteAddress,buf.toString(StandardCharsets.US_ASCII).trim());
  }
 else {
    return decodeBinary(channel,remoteAddress,buf);
  }
}",0.9934924078091106
155944,"@Override protected void addProtocolHandlers(PipelineBuilder pipeline){
  pipeline.addLast(""String_Node_Str"",new CharacterDelimiterFrameDecoder('\0'));
  pipeline.addLast(""String_Node_Str"",new TlvProtocolDecoder(TlvProtocol.this));
}","@Override protected void addProtocolHandlers(PipelineBuilder pipeline){
  pipeline.addLast(""String_Node_Str"",new CharacterDelimiterFrameDecoder(1024,'\0'));
  pipeline.addLast(""String_Node_Str"",new TlvProtocolDecoder(TlvProtocol.this));
}",0.989384288747346
155945,"@Override public void initTrackerServers(List<TrackerServer> serverList){
  serverList.add(new TrackerServer(false,getName()){
    @Override protected void addProtocolHandlers(    PipelineBuilder pipeline){
      pipeline.addLast(""String_Node_Str"",new CharacterDelimiterFrameDecoder('\0'));
      pipeline.addLast(""String_Node_Str"",new TlvProtocolDecoder(TlvProtocol.this));
    }
  }
);
}","@Override public void initTrackerServers(List<TrackerServer> serverList){
  serverList.add(new TrackerServer(false,getName()){
    @Override protected void addProtocolHandlers(    PipelineBuilder pipeline){
      pipeline.addLast(""String_Node_Str"",new CharacterDelimiterFrameDecoder(1024,'\0'));
      pipeline.addLast(""String_Node_Str"",new TlvProtocolDecoder(TlvProtocol.this));
    }
  }
);
}",0.9936143039591316
155946,"@Override public void run(Timeout timeout) throws Exception {
  if (!timeout.isCancelled()) {
    updateDevice(deviceId,Device.STATUS_UNKNOWN,null);
    activeDevices.remove(deviceId);
  }
}","@Override public void run(Timeout timeout){
  if (!timeout.isCancelled()) {
    updateDevice(deviceId,Device.STATUS_UNKNOWN,null);
  }
}",0.8343558282208589
155947,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ByteBuf buf) throws Exception {
  if (buf.readableBytes() < KEEP_ALIVE_LENGTH) {
    return null;
  }
  if (buf.getUnsignedByte(buf.readerIndex()) == 0xD0) {
    ByteBuf frame=buf.readRetainedSlice(KEEP_ALIVE_LENGTH);
    if (channel != null) {
      channel.writeAndFlush(new NetworkMessage(frame,channel.remoteAddress()));
    }
    return frame;
  }
 else {
    int index=BufferUtil.indexOf(""String_Node_Str"",buf);
    if (index != -1) {
      ByteBuf frame=buf.readRetainedSlice(index - buf.readerIndex());
      buf.skipBytes(2);
      return frame;
    }
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ByteBuf buf) throws Exception {
  if (buf.readableBytes() < KEEP_ALIVE_LENGTH) {
    return null;
  }
  if (buf.getUnsignedByte(buf.readerIndex()) == 0xD0) {
    ByteBuf frame=buf.readRetainedSlice(KEEP_ALIVE_LENGTH);
    if (channel != null) {
      frame.retain();
      channel.writeAndFlush(new NetworkMessage(frame,channel.remoteAddress()));
    }
    return frame;
  }
 else {
    int index=BufferUtil.indexOf(""String_Node_Str"",buf);
    if (index != -1) {
      ByteBuf frame=buf.readRetainedSlice(index - buf.readerIndex());
      buf.skipBytes(2);
      return frame;
    }
  }
  return null;
}",0.9835329341317364
155948,"@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  NetworkMessage networkMessage=(NetworkMessage)msg;
  Object originalMessage=networkMessage.getMessage();
  try {
    Object decodedMessage=decode(ctx.channel(),networkMessage.getRemoteAddress(),originalMessage);
    onMessageEvent(ctx.channel(),networkMessage.getRemoteAddress(),originalMessage,decodedMessage);
    if (decodedMessage == null) {
      decodedMessage=handleEmptyMessage(ctx.channel(),networkMessage.getRemoteAddress(),originalMessage);
    }
    if (decodedMessage != null) {
      if (decodedMessage instanceof Collection) {
        for (        Object o : (Collection)decodedMessage) {
          saveOriginal(o,originalMessage);
          ctx.fireChannelRead(o);
        }
      }
 else {
        saveOriginal(decodedMessage,originalMessage);
        ctx.fireChannelRead(decodedMessage);
      }
    }
  }
  finally {
    if (originalMessage instanceof ReferenceCounted) {
      ((ReferenceCounted)originalMessage).release();
    }
  }
}","@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  NetworkMessage networkMessage=(NetworkMessage)msg;
  Object originalMessage=networkMessage.getMessage();
  try {
    Object decodedMessage=decode(ctx.channel(),networkMessage.getRemoteAddress(),originalMessage);
    onMessageEvent(ctx.channel(),networkMessage.getRemoteAddress(),originalMessage,decodedMessage);
    if (decodedMessage == null) {
      decodedMessage=handleEmptyMessage(ctx.channel(),networkMessage.getRemoteAddress(),originalMessage);
    }
    if (decodedMessage != null) {
      if (decodedMessage instanceof Collection) {
        for (        Object o : (Collection)decodedMessage) {
          saveOriginal(o,originalMessage);
          ctx.fireChannelRead(o);
        }
      }
 else {
        saveOriginal(decodedMessage,originalMessage);
        ctx.fireChannelRead(decodedMessage);
      }
    }
  }
  finally {
    ReferenceCountUtil.release(originalMessage);
  }
}",0.947316592811423
155949,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  String type=parser.next();
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder();
  dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setValid(true);
  position.setLatitude(parser.nextDouble());
  position.setLongitude(parser.nextDouble());
  dateBuilder.setHour(parser.nextInt()).setMinute(parser.nextInt());
  position.setTime(dateBuilder.getDate());
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  parser.next();
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder();
  dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setValid(true);
  position.setLatitude(parser.nextDouble());
  position.setLongitude(parser.nextDouble());
  dateBuilder.setHour(parser.nextInt()).setMinute(parser.nextInt());
  position.setTime(dateBuilder.getDate());
  return position;
}",0.9929328621908128
155950,"private String decodeAlarm(long status){
  if ((status & 0x02000000) > 0) {
    return Position.ALARM_GEOFENCE_ENTER;
  }
  if ((status & 0x04000000) > 0) {
    return Position.ALARM_GEOFENCE_EXIT;
  }
  if ((status & 0x08000000) > 0) {
    return Position.ALARM_LOW_BATTERY;
  }
  if ((status & 0x20000000) > 0) {
    return Position.ALARM_VIBRATION;
  }
  if ((status & 0x80000000) > 0) {
    return Position.ALARM_OVERSPEED;
  }
  if ((status & 0x00010000) > 0) {
    return Position.ALARM_SOS;
  }
  if ((status & 0x00040000) > 0) {
    return Position.ALARM_POWER_CUT;
  }
  return null;
}","private String decodeAlarm(long status){
  if ((status & 0x02000000) != 0) {
    return Position.ALARM_GEOFENCE_ENTER;
  }
  if ((status & 0x04000000) != 0) {
    return Position.ALARM_GEOFENCE_EXIT;
  }
  if ((status & 0x08000000) != 0) {
    return Position.ALARM_LOW_BATTERY;
  }
  if ((status & 0x20000000) != 0) {
    return Position.ALARM_VIBRATION;
  }
  if ((status & 0x80000000) != 0) {
    return Position.ALARM_OVERSPEED;
  }
  if ((status & 0x00010000) != 0) {
    return Position.ALARM_SOS;
  }
  if ((status & 0x00040000) != 0) {
    return Position.ALARM_POWER_CUT;
  }
  return null;
}",0.982426778242678
155951,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  int beginIndex=sentence.indexOf('>');
  if (beginIndex != -1) {
    sentence=sentence.substring(beginIndex + 1);
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position(getProtocolName());
  Boolean valid=null;
  Integer event=null;
  if (parser.hasNext(3)) {
    event=parser.nextInt();
    position.setTime(getTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0)));
  }
 else   if (parser.hasNext()) {
    position.setTime(getTime(parser.nextInt(0)));
  }
  if (parser.hasNext()) {
    event=parser.nextInt();
  }
  if (parser.hasNext(6)) {
    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
  }
  if (parser.hasNext(4)) {
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_DEG));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_DEG));
  }
  if (parser.hasNext(6)) {
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN));
  }
  position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble(0)));
  position.setCourse(parser.nextDouble(0));
  if (parser.hasNext(4)) {
    valid=parser.nextInt() > 0;
    int input=parser.nextHexInt();
    position.set(Position.KEY_IGNITION,BitUtil.check(input,7));
    position.set(Position.KEY_INPUT,input);
    event=parser.nextInt();
    position.set(Position.KEY_HDOP,parser.nextInt());
  }
  if (parser.hasNext(4)) {
    position.set(Position.KEY_INPUT,parser.nextHexInt(0));
    position.set(Position.KEY_SATELLITES,parser.nextHexInt(0));
    position.set(Position.KEY_BATTERY,parser.nextInt(0));
    position.set(Position.KEY_ODOMETER,parser.nextLong(16,0));
  }
  if (parser.hasNext(4)) {
    valid=parser.nextInt() > 0;
    position.set(Position.KEY_PDOP,parser.nextInt());
    position.set(Position.KEY_RSSI,parser.nextInt());
    position.set(Position.PREFIX_TEMP + 1,parser.nextInt() * 0.01);
    position.set(Position.PREFIX_TEMP + 2,parser.nextInt() * 0.01);
  }
  position.setValid(valid != null ? valid : true);
  if (event != null) {
    position.set(Position.KEY_EVENT,event);
switch (event) {
case 22:
      position.set(Position.KEY_ALARM,Position.ALARM_ACCELERATION);
    break;
case 23:
  position.set(Position.KEY_ALARM,Position.ALARM_BRAKING);
break;
case 24:
position.set(Position.KEY_ALARM,Position.ALARM_ACCIDENT);
break;
case 26:
case 28:
position.set(Position.KEY_ALARM,Position.ALARM_CORNERING);
break;
default :
break;
}
}
String[] attributes=null;
beginIndex=sentence.indexOf(';');
if (beginIndex != -1) {
int endIndex=sentence.indexOf('<',beginIndex);
if (endIndex == -1) {
endIndex=sentence.length();
}
attributes=sentence.substring(beginIndex,endIndex).split(""String_Node_Str"");
}
return decodeAttributes(channel,remoteAddress,position,attributes);
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  int beginIndex=sentence.indexOf('>');
  if (beginIndex != -1) {
    sentence=sentence.substring(beginIndex + 1);
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position(getProtocolName());
  Boolean valid=null;
  Integer event=null;
  if (parser.hasNext(3)) {
    event=parser.nextInt();
    position.setTime(getTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0)));
  }
 else   if (parser.hasNext()) {
    position.setTime(getTime(parser.nextInt(0)));
  }
  if (parser.hasNext()) {
    event=parser.nextInt();
  }
  if (parser.hasNext(6)) {
    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
  }
  if (parser.hasNext(4)) {
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_DEG));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_DEG));
  }
  if (parser.hasNext(6)) {
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN));
  }
  position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble(0)));
  position.setCourse(parser.nextDouble(0));
  if (parser.hasNext(4)) {
    valid=parser.nextInt() > 0;
    int input=parser.nextHexInt();
    position.set(Position.KEY_IGNITION,BitUtil.check(input,7));
    position.set(Position.KEY_INPUT,input);
    event=parser.nextInt();
    position.set(Position.KEY_HDOP,parser.nextInt());
  }
  if (parser.hasNext(4)) {
    position.set(Position.KEY_INPUT,parser.nextHexInt(0));
    position.set(Position.KEY_SATELLITES,parser.nextHexInt(0));
    position.set(Position.KEY_BATTERY,parser.nextInt(0));
    position.set(Position.KEY_ODOMETER,parser.nextLong(16,0));
  }
  if (parser.hasNext(4)) {
    valid=parser.nextInt() > 0;
    position.set(Position.KEY_PDOP,parser.nextInt());
    position.set(Position.KEY_RSSI,parser.nextInt());
    position.set(Position.PREFIX_TEMP + 1,parser.nextInt() * 0.01);
    position.set(Position.PREFIX_TEMP + 2,parser.nextInt() * 0.01);
  }
  position.setValid(valid == null || valid);
  if (event != null) {
    position.set(Position.KEY_EVENT,event);
switch (event) {
case 22:
      position.set(Position.KEY_ALARM,Position.ALARM_ACCELERATION);
    break;
case 23:
  position.set(Position.KEY_ALARM,Position.ALARM_BRAKING);
break;
case 24:
position.set(Position.KEY_ALARM,Position.ALARM_ACCIDENT);
break;
case 26:
case 28:
position.set(Position.KEY_ALARM,Position.ALARM_CORNERING);
break;
default :
break;
}
}
String[] attributes=null;
beginIndex=sentence.indexOf(';');
if (beginIndex != -1) {
int endIndex=sentence.indexOf('<',beginIndex);
if (endIndex == -1) {
endIndex=sentence.length();
}
attributes=sentence.substring(beginIndex,endIndex).split(""String_Node_Str"");
}
return decodeAttributes(channel,remoteAddress,position,attributes);
}",0.998023064250412
155952,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(buf.getUnsignedByte(buf.readerIndex() + 3));
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    int length=buf.readUnsignedShort();
    int index=buf.readUnsignedShort();
    int recordFlags=buf.readUnsignedByte();
    if (BitUtil.check(recordFlags,0)) {
      buf.readUnsignedInt();
    }
    if (BitUtil.check(recordFlags,1)) {
      buf.readUnsignedInt();
    }
    if (BitUtil.check(recordFlags,2)) {
      buf.readUnsignedInt();
    }
    int serviceType=buf.readUnsignedByte();
    buf.readUnsignedByte();
    int recordEnd=buf.readerIndex() + length;
    Position position=new Position(getProtocolName());
    DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
    if (deviceSession != null) {
      position.setDeviceId(deviceSession.getDeviceId());
    }
    ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,0);
    response.writeShort(index);
    response.writeByte(0);
    sendResponse(channel,PT_RESPONSE,index,serviceType,MSG_RECORD_RESPONSE,response);
    while (buf.readerIndex() < recordEnd) {
      int type=buf.readUnsignedByte();
      int end=buf.readUnsignedShort() + buf.readerIndex();
      if (type == MSG_TERM_IDENTITY) {
        buf.readUnsignedInt();
        int flags=buf.readUnsignedByte();
        if (BitUtil.check(flags,0)) {
          buf.readUnsignedShort();
        }
        if (BitUtil.check(flags,1)) {
          getDeviceSession(channel,remoteAddress,buf.readBytes(15).toString(StandardCharsets.US_ASCII));
        }
        if (BitUtil.check(flags,2)) {
          getDeviceSession(channel,remoteAddress,buf.readBytes(16).toString(StandardCharsets.US_ASCII));
        }
        if (BitUtil.check(flags,3)) {
          buf.skipBytes(3);
        }
        if (BitUtil.check(flags,5)) {
          buf.skipBytes(3);
        }
        if (BitUtil.check(flags,6)) {
          buf.readUnsignedShort();
        }
        if (BitUtil.check(flags,7)) {
          getDeviceSession(channel,remoteAddress,buf.readBytes(15).toString(StandardCharsets.US_ASCII));
        }
        response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,0);
        response.writeByte(0);
        sendResponse(channel,PT_APPDATA,index,serviceType,MSG_RESULT_CODE,response);
      }
 else       if (type == MSG_POS_DATA) {
        position.setTime(new Date((buf.readUnsignedInt() + 1262304000) * 1000));
        position.setLatitude(buf.readUnsignedInt() * 90.0 / 0xFFFFFFFFL);
        position.setLongitude(buf.readUnsignedInt() * 180.0 / 0xFFFFFFFFL);
        int flags=buf.readUnsignedByte();
        position.setValid(BitUtil.check(flags,0));
        if (BitUtil.check(flags,5)) {
          position.setLatitude(-position.getLatitude());
        }
        if (BitUtil.check(flags,6)) {
          position.setLongitude(-position.getLongitude());
        }
        int speed=buf.readUnsignedShort();
        position.setSpeed(BitUtil.to(speed,14));
        position.setCourse(buf.readUnsignedByte() + (BitUtil.check(speed,15) ? 0x100 : 0));
        position.set(Position.KEY_ODOMETER,buf.readUnsignedMedium() * 100);
        position.set(Position.KEY_INPUT,buf.readUnsignedByte());
        position.set(Position.KEY_EVENT,buf.readUnsignedByte());
        if (BitUtil.check(flags,7)) {
          position.setAltitude(buf.readMedium());
        }
      }
 else       if (type == MSG_EXT_POS_DATA) {
        int flags=buf.readUnsignedByte();
        if (BitUtil.check(flags,0)) {
          position.set(Position.KEY_VDOP,buf.readUnsignedShort());
        }
        if (BitUtil.check(flags,1)) {
          position.set(Position.KEY_HDOP,buf.readUnsignedShort());
        }
        if (BitUtil.check(flags,2)) {
          position.set(Position.KEY_PDOP,buf.readUnsignedShort());
        }
        if (BitUtil.check(flags,3)) {
          position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
        }
      }
 else       if (type == MSG_AD_SENSORS_DATA) {
        buf.readUnsignedByte();
        position.set(Position.KEY_OUTPUT,buf.readUnsignedByte());
        buf.readUnsignedByte();
      }
      buf.readerIndex(end);
    }
    if (deviceSession != null) {
      positions.add(position);
    }
  }
  return positions.isEmpty() ? null : positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(buf.getUnsignedByte(buf.readerIndex() + 3));
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    int length=buf.readUnsignedShort();
    int index=buf.readUnsignedShort();
    int recordFlags=buf.readUnsignedByte();
    if (BitUtil.check(recordFlags,0)) {
      buf.readUnsignedInt();
    }
    if (BitUtil.check(recordFlags,1)) {
      buf.readUnsignedInt();
    }
    if (BitUtil.check(recordFlags,2)) {
      buf.readUnsignedInt();
    }
    int serviceType=buf.readUnsignedByte();
    buf.readUnsignedByte();
    int recordEnd=buf.readerIndex() + length;
    Position position=new Position(getProtocolName());
    DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
    if (deviceSession != null) {
      position.setDeviceId(deviceSession.getDeviceId());
    }
    ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,0);
    response.writeShort(index);
    response.writeByte(0);
    sendResponse(channel,PT_RESPONSE,index,serviceType,MSG_RECORD_RESPONSE,response);
    while (buf.readerIndex() < recordEnd) {
      int type=buf.readUnsignedByte();
      int end=buf.readUnsignedShort() + buf.readerIndex();
      if (type == MSG_TERM_IDENTITY) {
        buf.readUnsignedInt();
        int flags=buf.readUnsignedByte();
        if (BitUtil.check(flags,0)) {
          buf.readUnsignedShort();
        }
        if (BitUtil.check(flags,1)) {
          getDeviceSession(channel,remoteAddress,buf.readBytes(15).toString(StandardCharsets.US_ASCII).trim());
        }
        if (BitUtil.check(flags,2)) {
          getDeviceSession(channel,remoteAddress,buf.readBytes(16).toString(StandardCharsets.US_ASCII).trim());
        }
        if (BitUtil.check(flags,3)) {
          buf.skipBytes(3);
        }
        if (BitUtil.check(flags,5)) {
          buf.skipBytes(3);
        }
        if (BitUtil.check(flags,6)) {
          buf.readUnsignedShort();
        }
        if (BitUtil.check(flags,7)) {
          getDeviceSession(channel,remoteAddress,buf.readBytes(15).toString(StandardCharsets.US_ASCII).trim());
        }
        response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,0);
        response.writeByte(0);
        sendResponse(channel,PT_APPDATA,index,serviceType,MSG_RESULT_CODE,response);
      }
 else       if (type == MSG_POS_DATA) {
        position.setTime(new Date((buf.readUnsignedInt() + 1262304000) * 1000));
        position.setLatitude(buf.readUnsignedInt() * 90.0 / 0xFFFFFFFFL);
        position.setLongitude(buf.readUnsignedInt() * 180.0 / 0xFFFFFFFFL);
        int flags=buf.readUnsignedByte();
        position.setValid(BitUtil.check(flags,0));
        if (BitUtil.check(flags,5)) {
          position.setLatitude(-position.getLatitude());
        }
        if (BitUtil.check(flags,6)) {
          position.setLongitude(-position.getLongitude());
        }
        int speed=buf.readUnsignedShort();
        position.setSpeed(BitUtil.to(speed,14));
        position.setCourse(buf.readUnsignedByte() + (BitUtil.check(speed,15) ? 0x100 : 0));
        position.set(Position.KEY_ODOMETER,buf.readUnsignedMedium() * 100);
        position.set(Position.KEY_INPUT,buf.readUnsignedByte());
        position.set(Position.KEY_EVENT,buf.readUnsignedByte());
        if (BitUtil.check(flags,7)) {
          position.setAltitude(buf.readMedium());
        }
      }
 else       if (type == MSG_EXT_POS_DATA) {
        int flags=buf.readUnsignedByte();
        if (BitUtil.check(flags,0)) {
          position.set(Position.KEY_VDOP,buf.readUnsignedShort());
        }
        if (BitUtil.check(flags,1)) {
          position.set(Position.KEY_HDOP,buf.readUnsignedShort());
        }
        if (BitUtil.check(flags,2)) {
          position.set(Position.KEY_PDOP,buf.readUnsignedShort());
        }
        if (BitUtil.check(flags,3)) {
          position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
        }
      }
 else       if (type == MSG_AD_SENSORS_DATA) {
        buf.readUnsignedByte();
        position.set(Position.KEY_OUTPUT,buf.readUnsignedByte());
        buf.readUnsignedByte();
      }
      buf.readerIndex(end);
    }
    if (serviceType == SERVICE_TELEDATA && deviceSession != null) {
      positions.add(position);
    }
  }
  return positions.isEmpty() ? null : positions;
}",0.9936979518343462
155953,"@Test public void testDecode() throws Exception {
  EgtsProtocolDecoder decoder=new EgtsProtocolDecoder(new EgtsProtocol());
  verifyNull(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""),position(""String_Node_Str"",true,51.67569,55.59189));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  EgtsProtocolDecoder decoder=new EgtsProtocolDecoder(new EgtsProtocol());
  verifyNull(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNull(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""),position(""String_Node_Str"",true,51.67569,55.59189));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
}",0.8650580875781948
155954,"@Test public void testDecode() throws Exception {
  MegastekProtocolDecoder decoder=new MegastekProtocolDecoder(new MegastekProtocol());
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,22.63675,114.03299));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  MegastekProtocolDecoder decoder=new MegastekProtocolDecoder(new MegastekProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,22.63675,114.03299));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.982706002034588
155955,"public static byte[] parseHex(String string){
  try {
    return Hex.decodeHex(string);
  }
 catch (  DecoderException e) {
    throw new RuntimeException(e);
  }
}","public static byte[] parseHex(String string){
  try {
    return Hex.decodeHex(string.toCharArray());
  }
 catch (  DecoderException e) {
    throw new RuntimeException(e);
  }
}",0.95906432748538
155956,"private String decodeAlarm(String event){
  if (event.equals('Z')) {
    return Position.ALARM_LOW_BATTERY;
  }
 else   if (event.equals('X')) {
    return Position.ALARM_GEOFENCE_ENTER;
  }
 else   if (event.equals('T')) {
    return Position.ALARM_TAMPERING;
  }
 else   if (event.equals(""String_Node_Str"")) {
    return Position.ALARM_POWER_OFF;
  }
 else   if (event.equals('X')) {
    return Position.ALARM_GEOFENCE_ENTER;
  }
 else   if (event.equals('8')) {
    return Position.ALARM_SHOCK;
  }
 else   if (event.equals('7') && event.equals('4')) {
    return Position.ALARM_GEOFENCE_EXIT;
  }
 else   if (event.equals('6')) {
    return Position.ALARM_OVERSPEED;
  }
 else   if (event.equals('3')) {
    return Position.ALARM_SOS;
  }
  return null;
}","private String decodeAlarm(String event){
switch (event) {
case ""String_Node_Str"":
    return Position.ALARM_LOW_BATTERY;
case ""String_Node_Str"":
  return Position.ALARM_GEOFENCE_ENTER;
case ""String_Node_Str"":
return Position.ALARM_TAMPERING;
case ""String_Node_Str"":
return Position.ALARM_POWER_OFF;
case ""String_Node_Str"":
return Position.ALARM_SHOCK;
case ""String_Node_Str"":
case ""String_Node_Str"":
return Position.ALARM_GEOFENCE_EXIT;
case ""String_Node_Str"":
return Position.ALARM_OVERSPEED;
case ""String_Node_Str"":
return Position.ALARM_SOS;
default :
return null;
}
}",0.386175807663411
155957,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.startsWith(""String_Node_Str"") && channel != null) {
    channel.write(sentence + ""String_Node_Str"");
    return null;
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  String status=parser.next();
  position.setValid(status.toUpperCase().equals(""String_Node_Str""));
  position.set(Position.KEY_STATUS,status);
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble(0));
  position.setCourse(parser.nextDouble(0));
  dateBuilder.setDateReverse(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  position.setTime(dateBuilder.getDate());
  String eventCode=parser.next();
  String decodedAlarm=decodeAlarm(eventCode);
  if (decodedAlarm != null) {
    position.set(Position.KEY_ALARM,decodeAlarm(eventCode));
  }
  position.set(Position.KEY_EVENT,eventCode);
  double batteryVoltage=parser.nextDouble();
  if (parser.next().isEmpty()) {
    parser.next();
    batteryVoltage*=0.001;
  }
 else {
    batteryVoltage+=parser.nextDouble() * 0.001;
  }
  position.set(Position.KEY_BATTERY,batteryVoltage);
  position.set(Position.KEY_TOTAL_DISTANCE,parser.nextDouble());
  position.set(Position.KEY_GPS,parser.nextInt());
  position.set(Position.PREFIX_ADC + 1,parser.nextDouble() * 0.001);
  position.set(Position.PREFIX_ADC + 2,parser.nextDouble() * 0.001);
  String cellNetCodeString=parser.next();
  String cellIdString=parser.next();
  String countryCodeString=parser.next();
  String operatorCodeString=parser.next();
  if (cellNetCodeString != null && cellIdString != null && countryCodeString != null && operatorCodeString != null) {
    int cellNetCode=Integer.parseInt(cellNetCodeString,16);
    Long cellId=Long.parseLong(cellIdString,16);
    int countryCode=Integer.parseInt(countryCodeString);
    int operatorCode=Integer.parseInt(operatorCodeString);
    position.setNetwork(new Network(CellTower.from(countryCode,operatorCode,cellNetCode,cellId)));
  }
  String checksum=parser.next();
  String result=sentence.replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (checksum == null || Integer.parseInt(checksum,16) != Checksum.xor(result)) {
    return null;
  }
  if (channel != null) {
    if (eventCode.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
 else     if (eventCode.equals(""String_Node_Str"") || eventCode.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
 else     if (eventCode.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
 else     if (Character.isLowerCase(status.charAt(0))) {
      String response=""String_Node_Str"" + eventCode + ""String_Node_Str""+ checksum;
      response+=Checksum.nmea(response);
      response+=""String_Node_Str"";
      channel.write(response);
    }
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.startsWith(""String_Node_Str"") && channel != null) {
    channel.write(sentence + ""String_Node_Str"");
    return null;
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  String status=parser.next();
  position.setValid(status.toUpperCase().equals(""String_Node_Str""));
  position.set(Position.KEY_STATUS,status);
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble(0));
  position.setCourse(parser.nextDouble(0));
  dateBuilder.setDateReverse(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  position.setTime(dateBuilder.getDate());
  String eventCode=parser.next();
  position.set(Position.KEY_ALARM,decodeAlarm(eventCode));
  position.set(Position.KEY_EVENT,eventCode);
  double batteryVoltage=parser.nextDouble();
  if (parser.next().isEmpty()) {
    parser.next();
    batteryVoltage*=0.001;
  }
 else {
    batteryVoltage+=parser.nextDouble() * 0.001;
  }
  position.set(Position.KEY_BATTERY,batteryVoltage);
  position.set(Position.KEY_ODOMETER,parser.nextDouble());
  position.set(Position.KEY_GPS,parser.nextInt());
  position.set(Position.PREFIX_ADC + 1,parser.nextDouble() * 0.001);
  position.set(Position.PREFIX_ADC + 2,parser.nextDouble() * 0.001);
  String lac=parser.next();
  String cid=parser.next();
  String mcc=parser.next();
  String mnc=parser.next();
  if (lac != null && cid != null && mcc != null && mnc != null) {
    position.setNetwork(new Network(CellTower.from(Integer.parseInt(mcc),Integer.parseInt(mnc),Integer.parseInt(lac,16),Long.parseLong(cid,16))));
  }
  String checksum=parser.next();
  if (channel != null) {
    if (eventCode.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
 else     if (eventCode.equals(""String_Node_Str"") || eventCode.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
 else     if (eventCode.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
 else     if (Character.isLowerCase(status.charAt(0))) {
      String response=""String_Node_Str"" + eventCode + ""String_Node_Str""+ checksum;
      response+=Checksum.nmea(response);
      response+=""String_Node_Str"";
      channel.write(response);
    }
  }
  return position;
}",0.8691695108077361
155958,"@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletResponse httpResponse=((HttpServletResponse)response);
  try {
    HttpSession session=((HttpServletRequest)request).getSession(false);
    Long userId=null;
    if (session != null) {
      userId=(Long)session.getAttribute(SessionResource.USER_ID_KEY);
      if (userId != null) {
        Context.getPermissionsManager().checkUserEnabled(userId);
        Context.getStatisticsManager().registerRequest(userId);
      }
    }
    if (userId == null) {
      httpResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED);
      return;
    }
    String path=((HttpServletRequest)request).getPathInfo();
    String[] parts=path.split(""String_Node_Str"");
    if (parts.length < 2 || parts.length == 2 && !path.endsWith(""String_Node_Str"")) {
      Context.getPermissionsManager().checkAdmin(userId);
    }
 else {
      Device device=Context.getDeviceManager().getByUniqueId(parts[1]);
      if (device != null) {
        Context.getPermissionsManager().checkDevice(userId,device.getId());
      }
 else {
        httpResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
        return;
      }
    }
    chain.doFilter(request,response);
  }
 catch (  SecurityException e) {
    httpResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);
    httpResponse.getWriter().println(Log.exceptionStack(e));
  }
catch (  SQLException e) {
    httpResponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    httpResponse.getWriter().println(Log.exceptionStack(e));
  }
}","@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  try {
    HttpSession session=((HttpServletRequest)request).getSession(false);
    Long userId=null;
    if (session != null) {
      userId=(Long)session.getAttribute(SessionResource.USER_ID_KEY);
      if (userId != null) {
        Context.getPermissionsManager().checkUserEnabled(userId);
        Context.getStatisticsManager().registerRequest(userId);
      }
    }
    if (userId == null) {
      httpResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED);
      return;
    }
    String path=((HttpServletRequest)request).getPathInfo();
    String[] parts=path.split(""String_Node_Str"");
    if (parts.length < 2 || parts.length == 2 && !path.endsWith(""String_Node_Str"")) {
      Context.getPermissionsManager().checkAdmin(userId);
    }
 else {
      Device device=Context.getDeviceManager().getByUniqueId(parts[1]);
      if (device != null) {
        Context.getPermissionsManager().checkDevice(userId,device.getId());
      }
 else {
        httpResponse.sendError(HttpServletResponse.SC_NOT_FOUND);
        return;
      }
    }
    chain.doFilter(request,response);
  }
 catch (  SecurityException e) {
    httpResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);
    httpResponse.getWriter().println(Log.exceptionStack(e));
  }
catch (  SQLException e) {
    httpResponse.setStatus(HttpServletResponse.SC_BAD_REQUEST);
    httpResponse.getWriter().println(Log.exceptionStack(e));
  }
}",0.9993769470404984
155959,"private boolean decodeParam(String name,int index,JsonValue value,Position position){
switch (name) {
case ""String_Node_Str"":
    position.setTime(new Date(((JsonNumber)value).longValue() * 1000));
  return true;
case ""String_Node_Str"":
position.setLatitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setLongitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setSpeed(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setCourse(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setAltitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_SATELLITES,((JsonNumber)value).intValue());
return true;
case ""String_Node_Str"":
position.setValid(value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_HDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_PDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set((name.equals(""String_Node_Str"") ? Position.KEY_INPUT : Position.KEY_OUTPUT),((JsonNumber)value).intValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_ODOMETER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_POWER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_BATTERY,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_FUEL_LEVEL,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_RPM,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.PREFIX_TEMP + (index > 0 ? index : 0),((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_IGNITION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_MOTION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DEVICE_TEMP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DRIVER_UNIQUE_ID,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_VIN,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GENERAL);
}
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_TOW);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_ENTER);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_EXIT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_SHOCK);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_OVERSPEED);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_ACCELERATION);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BRAKING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_CORNERING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GPS_ANTENNA_CUT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_JAMMING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BONNET);
}
return true;
default :
return false;
}
}","private boolean decodeParam(String name,int index,JsonValue value,Position position){
switch (name) {
case ""String_Node_Str"":
    position.setTime(new Date(((JsonNumber)value).longValue() * 1000));
  return true;
case ""String_Node_Str"":
position.setLatitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setLongitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setSpeed(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setCourse(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setAltitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_SATELLITES,((JsonNumber)value).intValue());
return true;
case ""String_Node_Str"":
position.setValid(value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_HDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_PDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(name.equals(""String_Node_Str"") ? Position.KEY_INPUT : Position.KEY_OUTPUT,((JsonNumber)value).intValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_ODOMETER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_POWER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_BATTERY,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_FUEL_LEVEL,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_RPM,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.PREFIX_TEMP + (index > 0 ? index : 0),((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_IGNITION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_MOTION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DEVICE_TEMP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DRIVER_UNIQUE_ID,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_VIN,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GENERAL);
}
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_TOW);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_ENTER);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_EXIT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_SHOCK);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_OVERSPEED);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_ACCELERATION);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BRAKING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_CORNERING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GPS_ANTENNA_CUT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_JAMMING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BONNET);
}
return true;
default :
return false;
}
}",0.999755441428222
155960,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(1);
  String manufacturer=buf.readBytes(2).toString(StandardCharsets.US_ASCII);
  buf.skipBytes(1);
  int idLength=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)'*') - buf.readerIndex();
  String id=buf.readBytes(idLength).toString(StandardCharsets.US_ASCII);
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  buf.skipBytes(1);
  String index=null;
  if (idLength > 10) {
    int indexLength=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)'*') - buf.readerIndex();
    index=buf.readBytes(indexLength).toString(StandardCharsets.US_ASCII);
    buf.skipBytes(1);
  }
  buf.skipBytes(4);
  buf.skipBytes(1);
  buf.writerIndex(buf.writerIndex() - 1);
  int contentIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)',');
  if (contentIndex < 0) {
    contentIndex=buf.writerIndex();
  }
  String type=buf.readBytes(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
  if (contentIndex < buf.writerIndex()) {
    buf.readerIndex(contentIndex + 1);
  }
  if (type.equals(""String_Node_Str"")) {
    sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
    if (buf.readable()) {
      String[] values=buf.toString(StandardCharsets.US_ASCII).split(""String_Node_Str"");
      if (values.length >= 3) {
        Position position=new Position(getProtocolName());
        position.setDeviceId(deviceSession.getDeviceId());
        getLastLocation(position,null);
        position.set(Position.KEY_BATTERY_LEVEL,Integer.parseInt(values[2]));
        return position;
      }
    }
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")) {
    if (type.equals(""String_Node_Str"")) {
      sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
    }
    Parser parser=new Parser(PATTERN_POSITION,buf.toString(StandardCharsets.US_ASCII));
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
    position.setValid(parser.next().equals(""String_Node_Str""));
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
    position.setCourse(parser.nextDouble(0));
    position.setAltitude(parser.nextDouble(0));
    position.set(Position.KEY_SATELLITES,parser.nextInt(0));
    position.set(Position.KEY_RSSI,parser.nextInt(0));
    position.set(Position.KEY_BATTERY_LEVEL,parser.nextInt(0));
    position.set(Position.KEY_STEPS,parser.nextInt(0));
    int status=parser.nextHexInt(0);
    position.set(Position.KEY_ALARM,decodeAlarm(status));
    if (BitUtil.check(status,4)) {
      position.set(Position.KEY_MOTION,true);
    }
    decodeTail(position,parser.next());
    return position;
  }
 else   if (type.equals(""String_Node_Str"")) {
    sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    if (buf.readable()) {
      Position position=new Position(getProtocolName());
      position.setDeviceId(deviceSession.getDeviceId());
      getLastLocation(position,new Date());
      position.setValid(false);
      String pulse=buf.toString(StandardCharsets.US_ASCII);
      position.set(""String_Node_Str"",pulse);
      position.set(Position.KEY_RESULT,pulse);
      return position;
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    getLastLocation(position,null);
    int timeIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)',');
    buf.readerIndex(timeIndex + 12 + 2);
    position.set(Position.KEY_IMAGE,Context.getMediaManager().writeFile(id,buf,""String_Node_Str""));
    return position;
  }
 else   if (type.equals(""String_Node_Str"")) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    getLastLocation(position,null);
    position.set(Position.KEY_AUDIO,Context.getMediaManager().writeFile(id,buf,""String_Node_Str""));
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(1);
  String manufacturer=buf.readBytes(2).toString(StandardCharsets.US_ASCII);
  buf.skipBytes(1);
  int idLength=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)'*') - buf.readerIndex();
  String id=buf.readBytes(idLength).toString(StandardCharsets.US_ASCII);
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  buf.skipBytes(1);
  String index=null;
  if (idLength > 10) {
    int indexLength=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)'*') - buf.readerIndex();
    index=buf.readBytes(indexLength).toString(StandardCharsets.US_ASCII);
    buf.skipBytes(1);
  }
  buf.skipBytes(4);
  buf.skipBytes(1);
  buf.writerIndex(buf.writerIndex() - 1);
  int contentIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)',');
  if (contentIndex < 0) {
    contentIndex=buf.writerIndex();
  }
  String type=buf.readBytes(contentIndex - buf.readerIndex()).toString(StandardCharsets.US_ASCII);
  if (contentIndex < buf.writerIndex()) {
    buf.readerIndex(contentIndex + 1);
  }
  if (type.equals(""String_Node_Str"")) {
    sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"")) {
    sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
    if (buf.readable()) {
      String[] values=buf.toString(StandardCharsets.US_ASCII).split(""String_Node_Str"");
      if (values.length >= 3) {
        Position position=new Position(getProtocolName());
        position.setDeviceId(deviceSession.getDeviceId());
        getLastLocation(position,null);
        position.set(Position.KEY_BATTERY_LEVEL,Integer.parseInt(values[2]));
        return position;
      }
    }
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")|| type.equals(""String_Node_Str"")) {
    if (type.equals(""String_Node_Str"")) {
      sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
    }
    return decodePosition(deviceSession,buf.toString(StandardCharsets.US_ASCII));
  }
 else   if (type.equals(""String_Node_Str"")) {
    sendResponse(channel,manufacturer,id,index,""String_Node_Str"");
  }
 else   if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    if (buf.readable()) {
      Position position=new Position(getProtocolName());
      position.setDeviceId(deviceSession.getDeviceId());
      getLastLocation(position,new Date());
      position.setValid(false);
      String pulse=buf.toString(StandardCharsets.US_ASCII);
      position.set(""String_Node_Str"",pulse);
      position.set(Position.KEY_RESULT,pulse);
      return position;
    }
  }
 else   if (type.equals(""String_Node_Str"")) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    getLastLocation(position,null);
    int timeIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)',');
    buf.readerIndex(timeIndex + 12 + 2);
    position.set(Position.KEY_IMAGE,Context.getMediaManager().writeFile(id,buf,""String_Node_Str""));
    return position;
  }
 else   if (type.equals(""String_Node_Str"")) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    getLastLocation(position,null);
    position.set(Position.KEY_AUDIO,Context.getMediaManager().writeFile(id,buf,""String_Node_Str""));
    return position;
  }
  return null;
}",0.8583353207727165
155961,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(1);
  String id=ChannelBuffers.hexDump(buf.readBytes(6));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == 0x2086 || type == 0x2084 || type == 0x2082) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    buf.readUnsignedByte();
    buf.readUnsignedShort();
    position.setTime(decodeDate(buf));
    position.setLatitude(decodeCoordinate(BcdUtil.readInteger(buf,8)));
    position.setLongitude(decodeCoordinate(BcdUtil.readInteger(buf,9)));
    int flags=buf.readUnsignedByte();
    position.setValid(BitUtil.check(flags,0));
    if (!BitUtil.check(flags,1)) {
      position.setLatitude(-position.getLatitude());
    }
    if (!BitUtil.check(flags,1)) {
      position.setLongitude(-position.getLongitude());
    }
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    position.setCourse(buf.readUnsignedByte() * 2);
    position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
    position.set(Position.KEY_RSSI,buf.readUnsignedByte());
    position.set(Position.KEY_ODOMETER,buf.readUnsignedInt() * 1000);
    position.set(Position.KEY_STATUS,buf.readUnsignedInt());
    return position;
  }
 else   if (type == 0x3088) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    getLastLocation(position,null);
    buf.readUnsignedShort();
    buf.skipBytes(8);
    buf.skipBytes(8);
    position.set(""String_Node_Str"",decodeDate(buf).getTime());
    position.set(""String_Node_Str"",decodeDate(buf).getTime());
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(Position.KEY_FUEL_CONSUMPTION,buf.readUnsignedInt());
    position.set(Position.KEY_ODOMETER_TRIP,buf.readUnsignedInt());
    position.set(""String_Node_Str"",UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedByte() - 40);
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    for (    String speedType : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      position.set(speedType + ""String_Node_Str"",buf.readUnsignedShort());
      position.set(speedType + ""String_Node_Str"",buf.readUnsignedInt());
      position.set(speedType + ""String_Node_Str"",buf.readUnsignedInt());
    }
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedInt());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(1);
  String id=ChannelBuffers.hexDump(buf.readBytes(6));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == 0x2086 || type == 0x2084 || type == 0x2082) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    buf.readUnsignedByte();
    buf.readUnsignedShort();
    position.setTime(decodeDate(buf));
    position.setLatitude(decodeCoordinate(BcdUtil.readInteger(buf,8)));
    position.setLongitude(decodeCoordinate(BcdUtil.readInteger(buf,9)));
    int flags=buf.readUnsignedByte();
    position.setValid(BitUtil.check(flags,0));
    if (!BitUtil.check(flags,1)) {
      position.setLatitude(-position.getLatitude());
    }
    if (!BitUtil.check(flags,2)) {
      position.setLongitude(-position.getLongitude());
    }
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    position.setCourse(buf.readUnsignedByte() * 2);
    position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
    position.set(Position.KEY_RSSI,buf.readUnsignedByte());
    position.set(Position.KEY_ODOMETER,buf.readUnsignedInt() * 1000);
    position.set(Position.KEY_STATUS,buf.readUnsignedInt());
    return position;
  }
 else   if (type == 0x3088) {
    Position position=new Position(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    getLastLocation(position,null);
    buf.readUnsignedShort();
    buf.skipBytes(8);
    buf.skipBytes(8);
    position.set(""String_Node_Str"",decodeDate(buf).getTime());
    position.set(""String_Node_Str"",decodeDate(buf).getTime());
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(Position.KEY_FUEL_CONSUMPTION,buf.readUnsignedInt());
    position.set(Position.KEY_ODOMETER_TRIP,buf.readUnsignedInt());
    position.set(""String_Node_Str"",UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedByte() - 40);
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    for (    String speedType : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
      position.set(speedType + ""String_Node_Str"",buf.readUnsignedShort());
      position.set(speedType + ""String_Node_Str"",buf.readUnsignedInt());
      position.set(speedType + ""String_Node_Str"",buf.readUnsignedInt());
    }
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedInt());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    return position;
  }
  return null;
}",0.9996903065964696
155962,"@Test public void testDecode() throws Exception {
  Vt200ProtocolDecoder decoder=new Vt200ProtocolDecoder(new Vt200Protocol());
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Vt200ProtocolDecoder decoder=new Vt200ProtocolDecoder(new Vt200Protocol());
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}",0.9698692438885732
155963,"private boolean skipLimit(Position position,Position last){
  if (skipLimit != 0 && last != null) {
    return (position.getFixTime().getTime() - last.getFixTime().getTime()) > skipLimit;
  }
  return false;
}","private boolean skipLimit(Position position,Position last){
  if (skipLimit != 0 && last != null) {
    return (position.getServerTime().getTime() - last.getServerTime().getTime()) > skipLimit;
  }
  return false;
}",0.9575471698113208
155964,"@Path(""String_Node_Str"") @PUT public Response updateTotalDistance(DeviceTotalDistance entity) throws SQLException {
  Context.getPermissionsManager().checkDevice(getUserId(),entity.getDeviceId());
  Context.getDeviceManager().resetTotalDistance(entity);
  LogAction.resetTotalDistance(getUserId(),entity.getDeviceId());
  return Response.noContent().build();
}","@Path(""String_Node_Str"") @PUT public Response updateTotalDistance(DeviceTotalDistance entity) throws SQLException {
  Context.getPermissionsManager().checkDeviceManagerOrAdmin(getUserId(),entity.getDeviceId());
  Context.getDeviceManager().resetTotalDistance(entity);
  LogAction.resetTotalDistance(getUserId(),entity.getDeviceId());
  return Response.noContent().build();
}",0.9809264305177112
155965,"public void checkDevice(long userId,long deviceId) throws SecurityException {
  if (!Context.getDeviceManager().getUserItems(userId).contains(deviceId) && !getUserAdmin(userId)) {
    checkManager(userId);
    for (    long managedUserId : usersManager.getUserItems(userId)) {
      if (Context.getDeviceManager().getUserItems(managedUserId).contains(deviceId)) {
        return;
      }
    }
    throw new SecurityException(""String_Node_Str"");
  }
}","public void checkDevice(long userId,long deviceId) throws SecurityException {
  if (!Context.getDeviceManager().getUserItems(userId).contains(deviceId)) {
    checkDeviceManagerOrAdmin(userId,deviceId);
  }
}",0.5280728376327769
155966,"private boolean decodeParam(String name,int index,JsonValue value,Position position){
switch (name) {
case ""String_Node_Str"":
    position.setTime(new Date((((JsonNumber)value).longValue() * 1000)));
  return true;
case ""String_Node_Str"":
position.setLatitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setLongitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setSpeed(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setCourse(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setAltitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_SATELLITES,((JsonNumber)value).intValue());
return true;
case ""String_Node_Str"":
position.setValid(value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_HDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_PDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
String key=name.equals(""String_Node_Str"") ? Position.KEY_INPUT : Position.KEY_OUTPUT;
if (value == JsonValue.TRUE && index <= 32 && index >= 1) {
if (position.getInteger(key) == 0) {
position.set(key,1 << (index - 1));
}
 else {
position.set(key,(position.getInteger(key) | 1 << (index - 1)));
}
}
return true;
case ""String_Node_Str"":
position.set(Position.KEY_ODOMETER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_POWER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_BATTERY,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_FUEL_LEVEL,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_RPM,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.PREFIX_TEMP + (index > 0 ? index : 0),((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_IGNITION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_MOTION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DEVICE_TEMP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DRIVER_UNIQUE_ID,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_VIN,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GENERAL);
}
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_TOW);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_ENTER);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_EXIT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_SHOCK);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_OVERSPEED);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_ACCELERATION);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BRAKING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_CORNERING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GPS_ANTENNA_CUT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_JAMMING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BONNET);
}
return true;
default :
return false;
}
}","private boolean decodeParam(String name,int index,JsonValue value,Position position){
switch (name) {
case ""String_Node_Str"":
    position.setTime(new Date(((JsonNumber)value).longValue() * 1000));
  return true;
case ""String_Node_Str"":
position.setLatitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setLongitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setSpeed(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setCourse(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.setAltitude(((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_SATELLITES,((JsonNumber)value).intValue());
return true;
case ""String_Node_Str"":
position.setValid(value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_HDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_PDOP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
String key=name.equals(""String_Node_Str"") ? Position.KEY_INPUT : Position.KEY_OUTPUT;
if (value == JsonValue.TRUE && index <= 32 && index >= 1) {
if (position.getInteger(key) == 0) {
position.set(key,1 << (index - 1));
}
 else {
position.set(key,position.getInteger(key) | 1 << (index - 1));
}
}
return true;
case ""String_Node_Str"":
position.set(Position.KEY_ODOMETER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_POWER,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_BATTERY,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_FUEL_LEVEL,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
position.set(Position.KEY_RPM,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.PREFIX_TEMP + (index > 0 ? index : 0),((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_IGNITION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_MOTION,value == JsonValue.TRUE);
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DEVICE_TEMP,((JsonNumber)value).doubleValue());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_DRIVER_UNIQUE_ID,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
position.set(Position.KEY_VIN,((JsonString)value).getString());
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GENERAL);
}
return true;
case ""String_Node_Str"":
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_TOW);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_ENTER);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GEOFENCE_EXIT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_SHOCK);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_OVERSPEED);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_ACCELERATION);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BRAKING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_CORNERING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_GPS_ANTENNA_CUT);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_JAMMING);
}
return true;
case ""String_Node_Str"":
if (value == JsonValue.TRUE) {
position.set(Position.KEY_ALARM,Position.ALARM_BONNET);
}
return true;
default :
return false;
}
}",0.9995311767463666
155967,"private Object decodeCan(Channel channel,SocketAddress remoteAddress,String sentence) throws ParseException {
  Position position=new Position();
  position.setProtocol(getProtocolName());
  int index=0;
  String[] values=sentence.split(""String_Node_Str"");
  index+=1;
  index+=1;
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,values[index++]);
  position.setDeviceId(deviceSession.getDeviceId());
  index+=1;
  index+=1;
  index+=1;
  long reportMask=Long.parseLong(values[index++],16);
  if (BitUtil.check(reportMask,0)) {
    position.set(Position.KEY_VIN,values[index++]);
  }
  if (BitUtil.check(reportMask,1)) {
    position.set(Position.KEY_IGNITION,Integer.parseInt(values[index++]) > 0);
  }
  if (BitUtil.check(reportMask,2)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,3)) {
    position.set(""String_Node_Str"",Double.parseDouble(values[index++]));
  }
  if (BitUtil.check(reportMask,5)) {
    position.set(Position.KEY_RPM,Integer.parseInt(values[index++]));
  }
  if (BitUtil.check(reportMask,4)) {
    position.set(Position.KEY_OBD_SPEED,UnitsConverter.knotsFromKph(Integer.parseInt(values[index++])));
  }
  if (BitUtil.check(reportMask,6)) {
    position.set(Position.KEY_COOLANT_TEMP,Integer.parseInt(values[index++]));
  }
  if (BitUtil.check(reportMask,7)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,8)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,9)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,10)) {
    if (!values[index++].isEmpty()) {
      position.set(Position.KEY_THROTTLE,Integer.parseInt(values[index - 1]));
    }
  }
  if (BitUtil.check(reportMask,11)) {
    position.set(Position.KEY_HOURS,Double.parseDouble(values[index++]));
  }
  if (BitUtil.check(reportMask,12)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,13)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,14)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,15)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,16)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,17)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,18)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,19)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,20)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,21)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,29)) {
    index+=1;
  }
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  dateFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  if (BitUtil.check(reportMask,30)) {
    position.setValid(Integer.parseInt(values[index++]) > 0);
    if (!values[index].isEmpty()) {
      position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
      position.setCourse(Integer.parseInt(values[index++]));
      position.setAltitude(Double.parseDouble(values[index++]));
      position.setLongitude(Double.parseDouble(values[index++]));
      position.setLatitude(Double.parseDouble(values[index++]));
      position.setTime(dateFormat.parse(values[index++]));
    }
 else {
      index+=6;
      getLastLocation(position,null);
    }
  }
 else {
    getLastLocation(position,null);
  }
  if (BitUtil.check(reportMask,31)) {
    index+=4;
  }
  index+=1;
  if (ignoreFixTime) {
    position.setTime(dateFormat.parse(values[index]));
  }
 else {
    position.setDeviceTime(dateFormat.parse(values[index]));
  }
  return position;
}","private Object decodeCan(Channel channel,SocketAddress remoteAddress,String sentence) throws ParseException {
  Position position=new Position();
  position.setProtocol(getProtocolName());
  int index=0;
  String[] values=sentence.split(""String_Node_Str"");
  index+=1;
  index+=1;
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,values[index++]);
  position.setDeviceId(deviceSession.getDeviceId());
  index+=1;
  index+=1;
  index+=1;
  long reportMask=Long.parseLong(values[index++],16);
  if (BitUtil.check(reportMask,0)) {
    position.set(Position.KEY_VIN,values[index++]);
  }
  if (BitUtil.check(reportMask,1)) {
    position.set(Position.KEY_IGNITION,Integer.parseInt(values[index++]) > 0);
  }
  if (BitUtil.check(reportMask,2)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,3)) {
    position.set(""String_Node_Str"",Double.parseDouble(values[index++]));
  }
  if (BitUtil.check(reportMask,5)) {
    position.set(Position.KEY_RPM,Integer.parseInt(values[index++]));
  }
  if (BitUtil.check(reportMask,4)) {
    position.set(Position.KEY_OBD_SPEED,UnitsConverter.knotsFromKph(Integer.parseInt(values[index++])));
  }
  if (BitUtil.check(reportMask,6)) {
    position.set(Position.KEY_COOLANT_TEMP,Integer.parseInt(values[index++]));
  }
  if (BitUtil.check(reportMask,7)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,8)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,9)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,10) && !values[index++].isEmpty()) {
    position.set(Position.KEY_THROTTLE,Integer.parseInt(values[index - 1]));
  }
  if (BitUtil.check(reportMask,11)) {
    position.set(Position.KEY_HOURS,Double.parseDouble(values[index++]));
  }
  if (BitUtil.check(reportMask,12)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,13)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,14)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,15)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,16)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,17)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,18)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,19)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,20)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,21)) {
    index+=1;
  }
  if (BitUtil.check(reportMask,29)) {
    index+=1;
  }
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  dateFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  if (BitUtil.check(reportMask,30)) {
    position.setValid(Integer.parseInt(values[index++]) > 0);
    if (!values[index].isEmpty()) {
      position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
      position.setCourse(Integer.parseInt(values[index++]));
      position.setAltitude(Double.parseDouble(values[index++]));
      position.setLongitude(Double.parseDouble(values[index++]));
      position.setLatitude(Double.parseDouble(values[index++]));
      position.setTime(dateFormat.parse(values[index++]));
    }
 else {
      index+=6;
      getLastLocation(position,null);
    }
  }
 else {
    getLastLocation(position,null);
  }
  if (BitUtil.check(reportMask,31)) {
    index+=4;
  }
  index+=1;
  if (ignoreFixTime) {
    position.setTime(dateFormat.parse(values[index]));
  }
 else {
    position.setDeviceTime(dateFormat.parse(values[index]));
  }
  return position;
}",0.996437054631829
155968,"private Position decodeGprmc(DeviceSession deviceSession,String sentence,SocketAddress remoteAddress,Channel channel){
  if (deviceSession != null && channel != null && !(channel instanceof DatagramChannel)) {
    if (Context.getIdentityManager().lookupAttributeBoolean(deviceSession.getDeviceId(),getProtocolName() + ""String_Node_Str"",false,true)) {
      channel.write(""String_Node_Str"");
    }
  }
  Parser parser=new Parser(PATTERN_GPRMC,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (deviceSession != null) {
    position.setDeviceId(deviceSession.getDeviceId());
  }
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble(0));
  position.setCourse(parser.nextDouble(0));
  dateBuilder.setDateReverse(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  position.setTime(dateBuilder.getDate());
  if (parser.hasNext(5)) {
    position.set(Position.KEY_SATELLITES,parser.nextInt());
    deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
    if (deviceSession == null) {
      return null;
    }
    position.setDeviceId(deviceSession.getDeviceId());
    position.set(Position.KEY_IGNITION,parser.hasNext() && parser.next().equals(""String_Node_Str""));
    position.set(Position.KEY_FUEL_LEVEL,parser.nextInt(0));
    position.set(Position.KEY_BATTERY,parser.nextInt());
  }
  if (parser.hasNext()) {
    String[] parameters=parser.next().split(""String_Node_Str"");
    for (int i=1; i < parameters.length; i++) {
      position.set(Position.PREFIX_IO + i,parameters[i]);
    }
  }
  if (deviceSession != null) {
    return position;
  }
 else {
    this.position=position;
    return null;
  }
}","private Position decodeGprmc(DeviceSession deviceSession,String sentence,SocketAddress remoteAddress,Channel channel){
  if (deviceSession != null && channel != null && !(channel instanceof DatagramChannel) && Context.getIdentityManager().lookupAttributeBoolean(deviceSession.getDeviceId(),getProtocolName() + ""String_Node_Str"",false,true)) {
    channel.write(""String_Node_Str"");
  }
  Parser parser=new Parser(PATTERN_GPRMC,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (deviceSession != null) {
    position.setDeviceId(deviceSession.getDeviceId());
  }
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble(0));
  position.setCourse(parser.nextDouble(0));
  dateBuilder.setDateReverse(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  position.setTime(dateBuilder.getDate());
  if (parser.hasNext(5)) {
    position.set(Position.KEY_SATELLITES,parser.nextInt());
    deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
    if (deviceSession == null) {
      return null;
    }
    position.setDeviceId(deviceSession.getDeviceId());
    position.set(Position.KEY_IGNITION,parser.hasNext() && parser.next().equals(""String_Node_Str""));
    position.set(Position.KEY_FUEL_LEVEL,parser.nextInt(0));
    position.set(Position.KEY_BATTERY,parser.nextInt());
  }
  if (parser.hasNext()) {
    String[] parameters=parser.next().split(""String_Node_Str"");
    for (int i=1; i < parameters.length; i++) {
      position.set(Position.PREFIX_IO + i,parameters[i]);
    }
  }
  if (deviceSession != null) {
    return position;
  }
 else {
    this.position=position;
    return null;
  }
}",0.9938837920489296
155969,"@Override protected void addSpecificHandlers(ChannelPipeline pipeline){
  pipeline.addLast(""String_Node_Str"",new CharacterDelimiterFrameDecoder(1024,'\r'));
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new GenxProtocolDecoder(GenxProtocol.this));
}","@Override protected void addSpecificHandlers(ChannelPipeline pipeline){
  pipeline.addLast(""String_Node_Str"",new LineBasedFrameDecoder(1024));
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new GenxProtocolDecoder(GenxProtocol.this));
}",0.9452054794520548
155970,"@Override public void initTrackerServers(List<TrackerServer> serverList){
  serverList.add(new TrackerServer(new ServerBootstrap(),getName()){
    @Override protected void addSpecificHandlers(    ChannelPipeline pipeline){
      pipeline.addLast(""String_Node_Str"",new CharacterDelimiterFrameDecoder(1024,'\r'));
      pipeline.addLast(""String_Node_Str"",new StringDecoder());
      pipeline.addLast(""String_Node_Str"",new GenxProtocolDecoder(GenxProtocol.this));
    }
  }
);
}","@Override public void initTrackerServers(List<TrackerServer> serverList){
  serverList.add(new TrackerServer(new ServerBootstrap(),getName()){
    @Override protected void addSpecificHandlers(    ChannelPipeline pipeline){
      pipeline.addLast(""String_Node_Str"",new LineBasedFrameDecoder(1024));
      pipeline.addLast(""String_Node_Str"",new StringDecoder());
      pipeline.addLast(""String_Node_Str"",new GenxProtocolDecoder(GenxProtocol.this));
    }
  }
);
}",0.9658119658119658
155971,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String[] values=((String)msg).split(""String_Node_Str"");
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setValid(true);
  for (int i=0; i < Math.min(values.length,reportColumns.length); i++) {
switch (reportColumns[i]) {
case 1:
      DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,values[i]);
    if (deviceSession != null) {
      position.setDeviceId(deviceSession.getDeviceId());
    }
  break;
case 2:
position.setTime(new SimpleDateFormat(""String_Node_Str"").parse(values[i]));
break;
case 3:
position.setLatitude(Double.parseDouble(values[i]));
break;
case 4:
position.setLongitude(Double.parseDouble(values[i]));
break;
default :
break;
}
}
return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String[] values=((String)msg).split(""String_Node_Str"");
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setValid(true);
  for (int i=0; i < Math.min(values.length,reportColumns.length); i++) {
switch (reportColumns[i]) {
case 1:
      DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,values[i]);
    if (deviceSession != null) {
      position.setDeviceId(deviceSession.getDeviceId());
    }
  break;
case 2:
position.setTime(new SimpleDateFormat(""String_Node_Str"").parse(values[i]));
break;
case 3:
position.setLatitude(Double.parseDouble(values[i]));
break;
case 4:
position.setLongitude(Double.parseDouble(values[i]));
break;
default :
break;
}
}
return position.getDeviceId() != 0 ? position : null;
}",0.9784256559766764
155972,"private boolean decodeGps(Position position,ChannelBuffer buf,boolean hasLength){
  DateBuilder dateBuilder=new DateBuilder(timeZone).setDate(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
  position.setTime(dateBuilder.getDate());
  if (hasLength && buf.readUnsignedByte() == 0) {
    return false;
  }
  int length=buf.readUnsignedByte();
  position.set(Position.KEY_SATELLITES,BitUtil.to(length,4));
  length=BitUtil.from(length,4);
  double latitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  double longitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  int flags=buf.readUnsignedShort();
  position.setCourse(BitUtil.to(flags,10));
  position.setValid(BitUtil.check(flags,12));
  if (!BitUtil.check(flags,10)) {
    latitude=-latitude;
  }
  if (BitUtil.check(flags,11)) {
    longitude=-longitude;
  }
  position.setLatitude(latitude);
  position.setLongitude(longitude);
  if (BitUtil.check(flags,14)) {
    position.set(Position.KEY_IGNITION,BitUtil.check(flags,15));
  }
  return true;
}","private boolean decodeGps(Position position,ChannelBuffer buf,boolean hasLength){
  DateBuilder dateBuilder=new DateBuilder(timeZone).setDate(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
  position.setTime(dateBuilder.getDate());
  if (hasLength && buf.readUnsignedByte() == 0) {
    return false;
  }
  position.set(Position.KEY_SATELLITES,BitUtil.to(buf.readUnsignedByte(),4));
  double latitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  double longitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  int flags=buf.readUnsignedShort();
  position.setCourse(BitUtil.to(flags,10));
  position.setValid(BitUtil.check(flags,12));
  if (!BitUtil.check(flags,10)) {
    latitude=-latitude;
  }
  if (BitUtil.check(flags,11)) {
    longitude=-longitude;
  }
  position.setLatitude(latitude);
  position.setLongitude(longitude);
  if (BitUtil.check(flags,14)) {
    position.set(Position.KEY_IGNITION,BitUtil.check(flags,15));
  }
  return true;
}",0.957092819614711
155973,"private Position decode235(Channel channel,SocketAddress remoteAddress,String protocol,String[] values) throws ParseException {
  int index=0;
  String type=values[index++].substring(5);
  if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")&& !type.equals(""String_Node_Str"")) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    position.set(Position.KEY_ALARM,Position.ALARM_GENERAL);
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,values[index++]);
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  if (protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"")) {
    index+=1;
  }
  position.set(Position.KEY_VERSION_FW,values[index++]);
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  dateFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  position.setTime(dateFormat.parse(values[index++] + values[index++]));
  if (!protocol.equals(""String_Node_Str"")) {
    index+=1;
  }
  position.setLatitude(Double.parseDouble(values[index++]));
  position.setLongitude(Double.parseDouble(values[index++]));
  position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
  position.setCourse(Double.parseDouble(values[index++]));
  position.set(Position.KEY_SATELLITES,Integer.parseInt(values[index++]));
  position.setValid(values[index++].equals(""String_Node_Str""));
  position.set(Position.KEY_ODOMETER,Integer.parseInt(values[index++]));
  position.set(Position.KEY_POWER,Double.parseDouble(values[index++]));
  position.set(Position.PREFIX_IO + 1,values[index++]);
  index+=1;
  if (type.equals(""String_Node_Str"")) {
    position.set(Position.KEY_INDEX,Integer.parseInt(values[index++]));
  }
  if (hbm) {
    if (index < values.length) {
      position.set(Position.KEY_HOURS,Integer.parseInt(values[index++]));
    }
    if (index < values.length) {
      position.set(Position.KEY_BATTERY,Double.parseDouble(values[index++]));
    }
    if (index < values.length) {
      if (values[index++].equals(""String_Node_Str"")) {
        position.set(Position.KEY_ARCHIVE,true);
      }
    }
    if (includeAdc) {
      position.set(Position.PREFIX_ADC + 1,Double.parseDouble(values[index++]));
      position.set(Position.PREFIX_ADC + 2,Double.parseDouble(values[index++]));
      position.set(Position.PREFIX_ADC + 3,Double.parseDouble(values[index++]));
    }
    if (values.length - index >= 2) {
      String driverUniqueId=values[index++];
      if (values[index++].equals(""String_Node_Str"") && !driverUniqueId.isEmpty()) {
        position.set(Position.KEY_DRIVER_UNIQUE_ID,driverUniqueId);
      }
    }
    if (includeTemp) {
      for (int i=1; i <= 3; i++) {
        String temperature=values[index++];
        String value=temperature.substring(temperature.indexOf(':') + 1);
        if (!value.isEmpty()) {
          position.set(Position.PREFIX_TEMP + i,Double.parseDouble(value));
        }
      }
    }
  }
  return position;
}","private Position decode235(Channel channel,SocketAddress remoteAddress,String protocol,String[] values) throws ParseException {
  int index=0;
  String type=values[index++].substring(5);
  if (!type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"") && !type.equals(""String_Node_Str"")&& !type.equals(""String_Node_Str"")) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
    position.set(Position.KEY_ALARM,Position.ALARM_GENERAL);
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,values[index++]);
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  if (protocol.equals(""String_Node_Str"") || protocol.equals(""String_Node_Str"")) {
    index+=1;
  }
  position.set(Position.KEY_VERSION_FW,values[index++]);
  DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
  dateFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
  position.setTime(dateFormat.parse(values[index++] + values[index++]));
  if (!protocol.equals(""String_Node_Str"")) {
    index+=1;
  }
  position.setLatitude(Double.parseDouble(values[index++]));
  position.setLongitude(Double.parseDouble(values[index++]));
  position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
  position.setCourse(Double.parseDouble(values[index++]));
  position.set(Position.KEY_SATELLITES,Integer.parseInt(values[index++]));
  position.setValid(values[index++].equals(""String_Node_Str""));
  position.set(Position.KEY_ODOMETER,Integer.parseInt(values[index++]));
  position.set(Position.KEY_POWER,Double.parseDouble(values[index++]));
  position.set(Position.PREFIX_IO + 1,values[index++]);
  index+=1;
  if (type.equals(""String_Node_Str"")) {
    position.set(Position.KEY_INDEX,Integer.parseInt(values[index++]));
  }
  if (hbm) {
    if (index < values.length) {
      position.set(Position.KEY_HOURS,Integer.parseInt(values[index++]));
    }
    if (index < values.length) {
      position.set(Position.KEY_BATTERY,Double.parseDouble(values[index++]));
    }
    if (index < values.length && values[index++].equals(""String_Node_Str"")) {
      position.set(Position.KEY_ARCHIVE,true);
    }
    if (includeAdc) {
      position.set(Position.PREFIX_ADC + 1,Double.parseDouble(values[index++]));
      position.set(Position.PREFIX_ADC + 2,Double.parseDouble(values[index++]));
      position.set(Position.PREFIX_ADC + 3,Double.parseDouble(values[index++]));
    }
    if (values.length - index >= 2) {
      String driverUniqueId=values[index++];
      if (values[index++].equals(""String_Node_Str"") && !driverUniqueId.isEmpty()) {
        position.set(Position.KEY_DRIVER_UNIQUE_ID,driverUniqueId);
      }
    }
    if (includeTemp) {
      for (int i=1; i <= 3; i++) {
        String temperature=values[index++];
        String value=temperature.substring(temperature.indexOf(':') + 1);
        if (!value.isEmpty()) {
          position.set(Position.PREFIX_TEMP + i,Double.parseDouble(value));
        }
      }
    }
  }
  return position;
}",0.9826004428978172
155974,"private Object decodeInf(Channel channel,SocketAddress remoteAddress,String sentence){
  org.traccar.helper.PatternUtil.MatchResult matchResult=org.traccar.helper.PatternUtil.checkPattern(PATTERN_INF.pattern(),sentence);
  Parser parser=new Parser(PATTERN_INF,sentence);
  Position position=initPosition(parser,channel,remoteAddress);
  if (position == null) {
    return null;
  }
  position.set(Position.KEY_STATUS,parser.next());
  position.set(Position.KEY_RSSI,parser.nextInt());
  parser.next();
  position.set(Position.KEY_BATTERY,parser.nextDouble(0));
  position.set(Position.KEY_CHARGE,parser.nextInt(0) == 1);
  position.set(Position.KEY_BATTERY_LEVEL,parser.nextInt());
  position.set(Position.PREFIX_TEMP + 1,parser.next());
  position.set(Position.PREFIX_ADC + 1,parser.next());
  position.set(Position.PREFIX_ADC + 2,parser.next());
  position.set(Position.KEY_INPUT,parser.next());
  position.set(Position.KEY_OUTPUT,parser.next());
  getLastLocation(position,parser.nextDateTime());
  position.set(Position.KEY_INDEX,parser.nextHexInt(0));
  return position;
}","private Object decodeInf(Channel channel,SocketAddress remoteAddress,String sentence){
  Parser parser=new Parser(PATTERN_INF,sentence);
  Position position=initPosition(parser,channel,remoteAddress);
  if (position == null) {
    return null;
  }
  position.set(Position.KEY_STATUS,parser.next());
  position.set(Position.KEY_RSSI,parser.nextInt());
  parser.next();
  position.set(Position.KEY_BATTERY,parser.nextDouble(0));
  position.set(Position.KEY_CHARGE,parser.nextInt(0) == 1);
  position.set(Position.KEY_BATTERY_LEVEL,parser.nextInt());
  position.set(Position.PREFIX_TEMP + 1,parser.next());
  position.set(Position.PREFIX_ADC + 1,parser.next());
  position.set(Position.PREFIX_ADC + 2,parser.next());
  position.set(Position.KEY_INPUT,parser.next());
  position.set(Position.KEY_OUTPUT,parser.next());
  getLastLocation(position,parser.nextDateTime());
  position.set(Position.KEY_INDEX,parser.nextHexInt(0));
  return position;
}",0.9336633663366336
155975,"@Test public void testDecode() throws Exception {
  Gl200TextProtocolDecoder decoder=new Gl200TextProtocolDecoder(new Gl200Protocol());
  verifyNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,false,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,false,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNull(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Gl200TextProtocolDecoder decoder=new Gl200TextProtocolDecoder(new Gl200Protocol());
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,false,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,false,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNull(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPosition(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyPositions(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyNotNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyNull(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
  verifyAttributes(decoder,buffer(""String_Node_Str""));
}",0.2103136424860496
155976,"private Collection<Permission> getPermissions(Class<? extends BaseModel> owner,Class<? extends BaseModel> property) throws SQLException, ClassNotFoundException {
  return QueryBuilder.create(dataSource,getQuery(ACTION_SELECT_ALL,owner,property)).executePermissionsQuery();
}","public Collection<Permission> getPermissions(Class<? extends BaseModel> owner,Class<? extends BaseModel> property) throws SQLException, ClassNotFoundException {
  return QueryBuilder.create(dataSource,getQuery(ACTION_SELECT_ALL,owner,property)).executePermissionsQuery();
}",0.979890310786106
155977,"private List<Position> decodeBinary(ChannelBuffer buf,Channel channel,SocketAddress remoteAddress){
  List<Position> positions=new LinkedList<>();
  buf.readByte();
  boolean longFormat=buf.getUnsignedByte(buf.readerIndex()) == 0x75;
  String id=String.valueOf(Long.parseLong(ChannelBuffers.hexDump(buf.readBytes(5))));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  if (longFormat) {
    buf.readUnsignedByte();
  }
  int version=BitUtil.from(buf.readUnsignedByte(),4);
  buf.readUnsignedShort();
  while (buf.readableBytes() > 1) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    DateBuilder dateBuilder=new DateBuilder().setDateReverse(BcdUtil.readInteger(buf,2),BcdUtil.readInteger(buf,2),BcdUtil.readInteger(buf,2)).setTime(BcdUtil.readInteger(buf,2),BcdUtil.readInteger(buf,2),BcdUtil.readInteger(buf,2));
    position.setTime(dateBuilder.getDate());
    double latitude=convertCoordinate(BcdUtil.readInteger(buf,8));
    double longitude=convertCoordinate(BcdUtil.readInteger(buf,9));
    byte flags=buf.readByte();
    position.setValid((flags & 0x1) == 0x1);
    if ((flags & 0x2) == 0) {
      latitude=-latitude;
    }
    position.setLatitude(latitude);
    if ((flags & 0x4) == 0) {
      longitude=-longitude;
    }
    position.setLongitude(longitude);
    position.setSpeed(BcdUtil.readInteger(buf,2));
    position.setCourse(buf.readUnsignedByte() * 2.0);
    if (longFormat) {
      position.set(Position.KEY_ODOMETER,buf.readUnsignedInt() * 1000);
      position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
      buf.readUnsignedInt();
      position.set(Position.KEY_STATUS,buf.readUnsignedShort());
      int battery=buf.readUnsignedByte();
      if (battery == 0xff) {
        position.set(Position.KEY_CHARGE,true);
      }
 else {
        position.set(Position.KEY_BATTERY_LEVEL,battery);
      }
      CellTower cellTower=CellTower.fromCidLac(buf.readUnsignedShort(),buf.readUnsignedShort());
      cellTower.setSignalStrength((int)buf.readUnsignedByte());
      position.setNetwork(new Network(cellTower));
    }
 else     if (version == 1) {
      position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
      position.set(Position.KEY_POWER,buf.readUnsignedByte());
      buf.readByte();
      position.setAltitude(buf.readUnsignedShort());
      int cid=buf.readUnsignedShort();
      int lac=buf.readUnsignedShort();
      int rssi=buf.readUnsignedByte();
      if (cid != 0 && lac != 0) {
        CellTower cellTower=CellTower.fromCidLac(cid,lac);
        cellTower.setSignalStrength(rssi);
        position.setNetwork(new Network(cellTower));
      }
 else {
        position.set(Position.KEY_RSSI,rssi);
      }
    }
 else     if (version == 2) {
      int fuel=buf.readUnsignedByte() << 8;
      position.set(Position.KEY_STATUS,buf.readUnsignedInt());
      position.set(Position.KEY_ODOMETER,buf.readUnsignedInt() * 1000);
      fuel+=buf.readUnsignedByte();
      position.set(Position.KEY_FUEL_LEVEL,fuel);
    }
    positions.add(position);
  }
  buf.readUnsignedByte();
  return positions;
}","private List<Position> decodeBinary(ChannelBuffer buf,Channel channel,SocketAddress remoteAddress){
  List<Position> positions=new LinkedList<>();
  buf.readByte();
  boolean longFormat=buf.getUnsignedByte(buf.readerIndex()) == 0x75;
  String id=String.valueOf(Long.parseLong(ChannelBuffers.hexDump(buf.readBytes(5))));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  if (longFormat) {
    buf.readUnsignedByte();
  }
  int version=BitUtil.from(buf.readUnsignedByte(),4);
  buf.readUnsignedShort();
  while (buf.readableBytes() > 1) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    DateBuilder dateBuilder=new DateBuilder().setDay(BcdUtil.readInteger(buf,2)).setMonth(BcdUtil.readInteger(buf,2)).setYear(BcdUtil.readInteger(buf,2)).setHour(BcdUtil.readInteger(buf,2)).setMinute(BcdUtil.readInteger(buf,2)).setSecond(BcdUtil.readInteger(buf,2));
    position.setTime(dateBuilder.getDate());
    double latitude=convertCoordinate(BcdUtil.readInteger(buf,8));
    double longitude=convertCoordinate(BcdUtil.readInteger(buf,9));
    byte flags=buf.readByte();
    position.setValid((flags & 0x1) == 0x1);
    if ((flags & 0x2) == 0) {
      latitude=-latitude;
    }
    position.setLatitude(latitude);
    if ((flags & 0x4) == 0) {
      longitude=-longitude;
    }
    position.setLongitude(longitude);
    position.setSpeed(BcdUtil.readInteger(buf,2));
    position.setCourse(buf.readUnsignedByte() * 2.0);
    if (longFormat) {
      position.set(Position.KEY_ODOMETER,buf.readUnsignedInt() * 1000);
      position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
      buf.readUnsignedInt();
      position.set(Position.KEY_STATUS,buf.readUnsignedShort());
      int battery=buf.readUnsignedByte();
      if (battery == 0xff) {
        position.set(Position.KEY_CHARGE,true);
      }
 else {
        position.set(Position.KEY_BATTERY_LEVEL,battery);
      }
      CellTower cellTower=CellTower.fromCidLac(buf.readUnsignedShort(),buf.readUnsignedShort());
      cellTower.setSignalStrength((int)buf.readUnsignedByte());
      position.setNetwork(new Network(cellTower));
    }
 else     if (version == 1) {
      position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
      position.set(Position.KEY_POWER,buf.readUnsignedByte());
      buf.readByte();
      position.setAltitude(buf.readUnsignedShort());
      int cid=buf.readUnsignedShort();
      int lac=buf.readUnsignedShort();
      int rssi=buf.readUnsignedByte();
      if (cid != 0 && lac != 0) {
        CellTower cellTower=CellTower.fromCidLac(cid,lac);
        cellTower.setSignalStrength(rssi);
        position.setNetwork(new Network(cellTower));
      }
 else {
        position.set(Position.KEY_RSSI,rssi);
      }
    }
 else     if (version == 2) {
      int fuel=buf.readUnsignedByte() << 8;
      position.set(Position.KEY_STATUS,buf.readUnsignedInt());
      position.set(Position.KEY_ODOMETER,buf.readUnsignedInt() * 1000);
      fuel+=buf.readUnsignedByte();
      position.set(Position.KEY_FUEL_LEVEL,fuel);
    }
    positions.add(position);
  }
  buf.readUnsignedByte();
  return positions;
}",0.9896557048016056
155978,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  int beginIndex=sentence.indexOf('(');
  if (beginIndex != -1) {
    sentence=sentence.substring(beginIndex + 1);
  }
  if (channel != null) {
    String id=sentence.substring(0,12);
    String type=sentence.substring(12,16);
    if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
      String content=sentence.substring(16);
      if (content.length() >= 15) {
        getDeviceSession(channel,remoteAddress,content.substring(0,15));
      }
      if (type.equals(""String_Node_Str"")) {
        channel.write(""String_Node_Str"" + id + ""String_Node_Str"");
        return null;
      }
 else       if (type.equals(""String_Node_Str"")) {
        channel.write(""String_Node_Str"" + id + ""String_Node_Str"");
      }
    }
  }
  if (sentence.contains(""String_Node_Str"")) {
    return decodeBattery(channel,remoteAddress,sentence);
  }
 else   if (sentence.contains(""String_Node_Str"")) {
    return decodeNetwork(channel,remoteAddress,sentence);
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  boolean alternative=parser.next() != null;
  decodeType(position,parser.next(),parser.next());
  DateBuilder dateBuilder=new DateBuilder();
  if (alternative) {
    dateBuilder.setDateReverse(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  }
 else {
    dateBuilder.setDate(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  }
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
switch (Context.getConfig().getString(getProtocolName() + ""String_Node_Str"",""String_Node_Str"")) {
case ""String_Node_Str"":
    position.setSpeed(parser.nextDouble(0));
  break;
case ""String_Node_Str"":
position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble(0)));
break;
default :
position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
break;
}
dateBuilder.setTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
position.setTime(dateBuilder.getDate());
position.setCourse(parser.nextDouble(0));
String status=parser.next();
if (status != null) {
position.set(Position.KEY_STATUS,status);
int value=Integer.parseInt(new StringBuilder(status).reverse().toString(),2);
position.set(Position.KEY_CHARGE,!BitUtil.check(value,0));
position.set(Position.KEY_IGNITION,BitUtil.check(value,1));
}
position.set(Position.KEY_STATUS,parser.next());
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextLong(16,0));
}
if (parser.hasNext()) {
position.set(Position.PREFIX_TEMP + 1,parser.nextDouble(0));
}
return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  int beginIndex=sentence.indexOf('(');
  if (beginIndex != -1) {
    sentence=sentence.substring(beginIndex + 1);
  }
  if (channel != null) {
    String id=sentence.substring(0,12);
    String type=sentence.substring(12,16);
    if (type.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"" + id + ""String_Node_Str"");
      return null;
    }
 else     if (type.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"" + id + ""String_Node_Str"");
    }
  }
  if (sentence.contains(""String_Node_Str"")) {
    return decodeBattery(channel,remoteAddress,sentence);
  }
 else   if (sentence.contains(""String_Node_Str"")) {
    return decodeNetwork(channel,remoteAddress,sentence);
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  boolean alternative=parser.next() != null;
  decodeType(position,parser.next(),parser.next());
  DateBuilder dateBuilder=new DateBuilder();
  if (alternative) {
    dateBuilder.setDateReverse(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  }
 else {
    dateBuilder.setDate(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
  }
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
switch (Context.getConfig().getString(getProtocolName() + ""String_Node_Str"",""String_Node_Str"")) {
case ""String_Node_Str"":
    position.setSpeed(parser.nextDouble(0));
  break;
case ""String_Node_Str"":
position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble(0)));
break;
default :
position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));
break;
}
dateBuilder.setTime(parser.nextInt(0),parser.nextInt(0),parser.nextInt(0));
position.setTime(dateBuilder.getDate());
position.setCourse(parser.nextDouble(0));
String status=parser.next();
if (status != null) {
position.set(Position.KEY_STATUS,status);
int value=Integer.parseInt(new StringBuilder(status).reverse().toString(),2);
position.set(Position.KEY_CHARGE,!BitUtil.check(value,0));
position.set(Position.KEY_IGNITION,BitUtil.check(value,1));
}
position.set(Position.KEY_STATUS,parser.next());
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextLong(16,0));
}
if (parser.hasNext()) {
position.set(Position.PREFIX_TEMP + 1,parser.nextDouble(0));
}
return position;
}",0.9106588478785788
155979,"@Test public void testDecode() throws Exception {
  Tk103ProtocolDecoder decoder=new Tk103ProtocolDecoder(new Tk103Protocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,-25.92255,28.92222));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,45.45586,9.16626));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Tk103ProtocolDecoder decoder=new Tk103ProtocolDecoder(new Tk103Protocol());
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,-25.92255,28.92222));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,45.45586,9.16626));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNull(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.9910765141446743
155980,"@Override public void handleUpstream(final ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  final MessageEvent event=(MessageEvent)evt;
  Object message=event.getMessage();
  if (message instanceof Position) {
    final Position position=(Position)message;
    if (processInvalidPositions || position.getValid()) {
      if (geocoderReuseDistance != 0) {
        Position lastPosition=Context.getIdentityManager().getLastPosition(position.getDeviceId());
        if (lastPosition != null && lastPosition.getAddress() != null) {
          if (position.getDouble(Position.KEY_DISTANCE) <= geocoderReuseDistance) {
            position.setAddress(lastPosition.getAddress());
            Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
            return;
          }
        }
      }
      Context.getStatisticsManager().registerGeocoderRequest();
      geocoder.getAddress(addressFormat,position.getLatitude(),position.getLongitude(),new Geocoder.ReverseGeocoderCallback(){
        @Override public void onSuccess(        String address){
          position.setAddress(address);
          Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
        }
        @Override public void onFailure(        Throwable e){
          Log.warning(""String_Node_Str"",e);
          Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
        }
      }
);
    }
 else {
      Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
    }
  }
 else {
    Channels.fireMessageReceived(ctx,message,event.getRemoteAddress());
  }
}","@Override public void handleUpstream(final ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  final MessageEvent event=(MessageEvent)evt;
  Object message=event.getMessage();
  if (message instanceof Position) {
    final Position position=(Position)message;
    if (processInvalidPositions || position.getValid()) {
      if (geocoderReuseDistance != 0) {
        Position lastPosition=Context.getIdentityManager().getLastPosition(position.getDeviceId());
        if (lastPosition != null && lastPosition.getAddress() != null && position.getDouble(Position.KEY_DISTANCE) <= geocoderReuseDistance) {
          position.setAddress(lastPosition.getAddress());
          Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
          return;
        }
      }
      Context.getStatisticsManager().registerGeocoderRequest();
      geocoder.getAddress(addressFormat,position.getLatitude(),position.getLongitude(),new Geocoder.ReverseGeocoderCallback(){
        @Override public void onSuccess(        String address){
          position.setAddress(address);
          Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
        }
        @Override public void onFailure(        Throwable e){
          Log.warning(""String_Node_Str"",e);
          Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
        }
      }
);
    }
 else {
      Channels.fireMessageReceived(ctx,position,event.getRemoteAddress());
    }
  }
 else {
    Channels.fireMessageReceived(ctx,message,event.getRemoteAddress());
  }
}",0.9879590608067428
155981,"private File createFile(String uniqueId,String name) throws IOException {
  Path filePath=Paths.get(path,uniqueId,name);
  Files.createDirectories(filePath.getParent());
  return filePath.toFile();
}","private File createFile(String uniqueId,String name) throws IOException {
  Path filePath=Paths.get(path,uniqueId,name);
  Path directoryPath=filePath.getParent();
  if (directoryPath != null) {
    Files.createDirectories(directoryPath);
  }
  return filePath.toFile();
}",0.6284501061571125
155982,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int protocol=buf.readUnsignedByte();
  buf.readUnsignedByte();
  int index=buf.readUnsignedShort();
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  buf.readUnsignedShort();
  buf.readUnsignedShort();
  long id=buf.readUnsignedInt();
  buf.readUnsignedInt();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_INDEX,index);
  position.setValid(true);
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,String.valueOf(id));
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  if (protocol == 0x01 && (type == MSG_COMPACT || type == MSG_FULL)) {
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    position.setLatitude(buf.readUnsignedInt() * 0.0000001);
    position.setLongitude(buf.readUnsignedInt() * 0.0000001);
    position.set(Position.KEY_RSSI,buf.readUnsignedShort());
    position.set(Position.KEY_SATELLITES,buf.readUnsignedShort());
    position.set(Position.KEY_SATELLITES_VISIBLE,buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.setSpeed(buf.readUnsignedShort() * 0.194384);
    position.setCourse((double)buf.readUnsignedShort());
    position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
    position.set(Position.KEY_BATTERY,buf.readUnsignedShort());
    position.set(Position.KEY_CHARGE,buf.readUnsignedShort());
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    return position;
  }
 else   if (protocol == 0x80) {
    if (channel != null) {
      channel.write(ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,StandardCharsets.US_ASCII));
    }
    String sentence=buf.toString(StandardCharsets.US_ASCII);
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(sentence);
    if (!matcher.find()) {
      return null;
    }
    position.setLatitude(Double.parseDouble(matcher.group(1)));
    position.setLongitude(Double.parseDouble(matcher.group(2)));
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(sentence);
    if (matcher.find()) {
      for (int i=0; i < DIRECTIONS.length; i++) {
        if (matcher.group(1).equals(DIRECTIONS[i])) {
          position.setCourse(i * 45.0);
          break;
        }
      }
      position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(matcher.group(2))));
    }
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(sentence);
    if (!matcher.find()) {
      return null;
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    position.setTime(DateUtil.correctYear(dateFormat.parse(matcher.group(1) + ""String_Node_Str"" + Calendar.getInstance().get(Calendar.YEAR))));
    if (sentence.contains(""String_Node_Str"")) {
      position.set(Position.KEY_IGNITION,true);
    }
 else     if (sentence.contains(""String_Node_Str"")) {
      position.set(Position.KEY_IGNITION,false);
    }
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int protocol=buf.readUnsignedByte();
  buf.readUnsignedByte();
  int index=buf.readUnsignedShort();
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  buf.readUnsignedShort();
  buf.readUnsignedShort();
  long id=buf.readUnsignedInt();
  buf.readUnsignedInt();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_INDEX,index);
  position.setValid(true);
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,String.valueOf(id));
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  if (protocol == 0x01 && (type == MSG_COMPACT || type == MSG_FULL)) {
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    position.setLatitude(buf.readUnsignedInt() * 0.0000001);
    position.setLongitude(buf.readUnsignedInt() * 0.0000001);
    position.set(Position.KEY_RSSI,buf.readUnsignedShort());
    position.set(Position.KEY_SATELLITES,buf.readUnsignedShort());
    position.set(Position.KEY_SATELLITES_VISIBLE,buf.readUnsignedShort());
    position.set(""String_Node_Str"",buf.readUnsignedShort());
    position.setSpeed(buf.readUnsignedShort() * 0.194384);
    position.setCourse(buf.readUnsignedShort());
    position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
    position.set(Position.KEY_BATTERY,buf.readUnsignedShort());
    position.set(Position.KEY_CHARGE,buf.readUnsignedShort());
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    return position;
  }
 else   if (protocol == 0x80) {
    if (channel != null) {
      channel.write(ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,StandardCharsets.US_ASCII));
    }
    String sentence=buf.toString(StandardCharsets.US_ASCII);
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(sentence);
    if (!matcher.find()) {
      return null;
    }
    position.setLatitude(Double.parseDouble(matcher.group(1)));
    position.setLongitude(Double.parseDouble(matcher.group(2)));
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(sentence);
    if (matcher.find()) {
      for (int i=0; i < DIRECTIONS.length; i++) {
        if (matcher.group(1).equals(DIRECTIONS[i])) {
          position.setCourse(i * 45.0);
          break;
        }
      }
      position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(matcher.group(2))));
    }
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(sentence);
    if (!matcher.find()) {
      return null;
    }
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
    position.setTime(DateUtil.correctYear(dateFormat.parse(matcher.group(1) + ""String_Node_Str"" + Calendar.getInstance().get(Calendar.YEAR))));
    if (sentence.contains(""String_Node_Str"")) {
      position.set(Position.KEY_IGNITION,true);
    }
 else     if (sentence.contains(""String_Node_Str"")) {
      position.set(Position.KEY_IGNITION,false);
    }
    return position;
  }
  return null;
}",0.9987476518472136
155983,"public void checkUserLimit(long userId) throws SecurityException {
  int userLimit=users.get(userId).getUserLimit();
  if (userLimit != -1 && userPermissions.get(userId).size() >= userLimit) {
    throw new SecurityException(""String_Node_Str"");
  }
}","public void checkUserLimit(long userId) throws SecurityException {
  int userLimit=users.get(userId).getUserLimit();
  if (userLimit != -1 && getUserPermissions(userId).size() >= userLimit) {
    throw new SecurityException(""String_Node_Str"");
  }
}",0.9819639278557114
155984,"public void checkManager(long userId,long managedUserId) throws SecurityException {
  checkManager(userId);
  if (!userPermissions.get(userId).contains(managedUserId)) {
    throw new SecurityException(""String_Node_Str"");
  }
}","public void checkManager(long userId,long managedUserId) throws SecurityException {
  checkManager(userId);
  if (!getUserPermissions(userId).contains(managedUserId)) {
    throw new SecurityException(""String_Node_Str"");
  }
}",0.9801324503311258
155985,"public boolean hasKey(String key){
  if (useEnvVars && System.getenv().containsKey(getEnvVarName(key))) {
    return true;
  }
  return properties.containsKey(key);
}","public boolean hasKey(String key){
  return useEnvironmentVariables && System.getenv().containsKey(getEnvironmentVariableName(key)) || properties.containsKey(key);
}",0.7915407854984894
155986,"void load(String file) throws IOException {
  String defaultConfigFile=properties.getProperty(""String_Node_Str"");
  if (defaultConfigFile != null) {
    try (InputStream inputStream=new FileInputStream(defaultConfigFile)){
      properties.loadFromXML(inputStream);
    }
   }
  try (InputStream inputStream=new FileInputStream(file)){
    Properties props=new Properties();
    props.loadFromXML(inputStream);
    properties.putAll(props);
  }
   if (""String_Node_Str"".equals(System.getenv(""String_Node_Str""))) {
    useEnvVars=true;
  }
 else {
    useEnvVars=properties.getProperty(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"");
  }
}","void load(String file) throws IOException {
  Properties mainProperties=new Properties();
  try (InputStream inputStream=new FileInputStream(file)){
    mainProperties.loadFromXML(inputStream);
  }
   String defaultConfigFile=mainProperties.getProperty(""String_Node_Str"");
  if (defaultConfigFile != null) {
    try (InputStream inputStream=new FileInputStream(defaultConfigFile)){
      properties.loadFromXML(inputStream);
    }
   }
  properties.putAll(mainProperties);
  useEnvironmentVariables=Boolean.parseBoolean(System.getenv(""String_Node_Str"")) || Boolean.parseBoolean(properties.getProperty(""String_Node_Str""));
}",0.3962703962703963
155987,"private ChannelBuffer encodeContent(String content){
  ChannelBuffer buf=ChannelBuffers.dynamicBuffer();
  byte[] contentBytes=content.getBytes();
  buf.writeShort(contentBytes.length + 6);
  buf.writeShort(0);
  buf.writeByte(0x04);
  buf.writeByte(0);
  buf.writeBytes(content.getBytes(StandardCharsets.UTF_8));
  return buf;
}","private ChannelBuffer encodeContent(String content){
  ChannelBuffer buf=ChannelBuffers.dynamicBuffer();
  buf.writeShort(content.length() + 6);
  buf.writeShort(0);
  buf.writeByte(0x04);
  buf.writeByte(0);
  buf.writeBytes(content.getBytes(StandardCharsets.US_ASCII));
  return buf;
}",0.5064935064935064
155988,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,buf.readBytes(7).toString(StandardCharsets.US_ASCII));
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  position.set(""String_Node_Str"",buf.readUnsignedByte());
  position.set(""String_Node_Str"",buf.readUnsignedByte());
  position.set(Position.KEY_STATUS,buf.readUnsignedByte());
  position.set(Position.KEY_RSSI,buf.readUnsignedByte());
  position.set(Position.KEY_GPS,buf.readUnsignedByte());
  position.setTime(new DateBuilder().setDateReverse(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).getDate());
  position.setValid(true);
  double lat=buf.getUnsignedShort(buf.readerIndex()) / 100;
  lat+=(buf.readUnsignedShort() % 100 * 10000 + buf.readUnsignedShort()) / 600000.0;
  position.setLatitude(buf.readUnsignedByte() == 'S' ? -lat : lat);
  double lon=buf.getUnsignedMedium(buf.readerIndex()) / 100;
  lon+=(buf.readUnsignedMedium() % 100 * 10000 + buf.readUnsignedShort()) / 600000.0;
  position.setLongitude(buf.readUnsignedByte() == 'W' ? -lon : lon);
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  position.set(Position.KEY_INPUT,buf.readUnsignedShort());
  position.set(Position.KEY_OUTPUT,buf.readUnsignedByte());
  position.set(""String_Node_Str"",buf.readUnsignedByte());
  position.set(""String_Node_Str"",buf.readUnsignedShort());
  for (int i=1; i <= 5; i++) {
    position.set(Position.PREFIX_ADC + i,buf.readUnsignedShort());
  }
  position.set(Position.KEY_ODOMETER,buf.readUnsignedMedium());
  position.set(Position.KEY_RPM,buf.readUnsignedShort());
  if (channel != null) {
    channel.write(ChannelBuffers.copiedBuffer(""String_Node_Str"",StandardCharsets.US_ASCII),remoteAddress);
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,buf.readBytes(7).toString(StandardCharsets.US_ASCII));
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  position.set(""String_Node_Str"",buf.readUnsignedByte());
  position.set(""String_Node_Str"",buf.readUnsignedByte());
  position.set(Position.KEY_STATUS,buf.readUnsignedByte());
  position.set(Position.KEY_RSSI,buf.readUnsignedByte());
  position.set(Position.KEY_GPS,buf.readUnsignedByte());
  position.setTime(new DateBuilder().setDateReverse(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).getDate());
  position.setValid(true);
  double lat=(double)(buf.getUnsignedShort(buf.readerIndex()) / 100);
  lat+=(buf.readUnsignedShort() % 100 * 10000 + buf.readUnsignedShort()) / 600000.0;
  position.setLatitude(buf.readUnsignedByte() == 'S' ? -lat : lat);
  double lon=(double)(buf.getUnsignedMedium(buf.readerIndex()) / 100);
  lon+=(buf.readUnsignedMedium() % 100 * 10000 + buf.readUnsignedShort()) / 600000.0;
  position.setLongitude(buf.readUnsignedByte() == 'W' ? -lon : lon);
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  position.set(Position.KEY_INPUT,buf.readUnsignedShort());
  position.set(Position.KEY_OUTPUT,buf.readUnsignedByte());
  position.set(""String_Node_Str"",buf.readUnsignedByte());
  position.set(""String_Node_Str"",buf.readUnsignedShort());
  for (int i=1; i <= 5; i++) {
    position.set(Position.PREFIX_ADC + i,buf.readUnsignedShort());
  }
  position.set(Position.KEY_ODOMETER,buf.readUnsignedMedium());
  position.set(Position.KEY_RPM,buf.readUnsignedShort());
  if (channel != null) {
    channel.write(ChannelBuffers.copiedBuffer(""String_Node_Str"",StandardCharsets.US_ASCII),remoteAddress);
  }
  return position;
}",0.9953336444237052
155989,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  int event=parser.nextInt();
  position.set(Position.KEY_EVENT,event);
  position.set(Position.KEY_ALARM,decodeAlarm(event));
  if (event == 11) {
    position.set(Position.KEY_IGNITION,true);
  }
 else   if (event == 12) {
    position.set(Position.KEY_IGNITION,false);
  }
  position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
  if (parser.hasNext(6)) {
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
  }
  if (parser.hasNext(2)) {
    position.setLongitude(parser.nextDouble() / 10000);
    position.setLatitude(parser.nextDouble() / 10000);
  }
  position.setValid(parser.nextInt() != 1);
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  if (parser.hasNext()) {
    position.set(Position.KEY_SATELLITES,parser.nextInt());
  }
  position.set(Position.KEY_BATTERY,parser.nextInt());
  if (parser.hasNext()) {
    position.set(Position.KEY_POWER,parser.nextInt());
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  int event=parser.nextInt();
  position.set(Position.KEY_EVENT,event);
  position.set(Position.KEY_ALARM,decodeAlarm(event));
  if (event == 11) {
    position.set(Position.KEY_IGNITION,true);
  }
 else   if (event == 12) {
    position.set(Position.KEY_IGNITION,false);
  }
  position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
  if (parser.hasNext(6)) {
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
  }
  if (parser.hasNext(2)) {
    position.setLongitude(parser.nextDouble() / 10000);
    position.setLatitude(parser.nextDouble() / 10000);
  }
  position.setValid(parser.nextInt() != 1);
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  if (parser.hasNext()) {
    position.set(Position.KEY_SATELLITES,parser.nextInt());
  }
  position.set(Position.KEY_BATTERY,parser.nextInt());
  return position;
}",0.961225154773542
155990,"@Test public void testDecode() throws Exception {
  TelicProtocolDecoder decoder=new TelicProtocolDecoder(new TelicProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,47.53410,16.66530));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  TelicProtocolDecoder decoder=new TelicProtocolDecoder(new TelicProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,47.53410,16.66530));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.9590690208667736
155991,"public TaipProtocolDecoder(TaipProtocol protocol,boolean sendResponse){
  super(protocol);
}","public TaipProtocolDecoder(TaipProtocol protocol){
  super(protocol);
}",0.8711656441717791
155992,"@Test public void testDecode() throws Exception {
  TaipProtocolDecoder decoder=new TaipProtocolDecoder(new TaipProtocol(),false);
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,-26.82523,-65.23682));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,25.78391,-80.29452));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  TaipProtocolDecoder decoder=new TaipProtocolDecoder(new TaipProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,-26.82523,-65.23682));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,25.78391,-80.29452));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.9966555183946488
155993,"private void decodeLocation(Position position,Parser parser){
  int hdop=parser.nextInt();
  position.setValid(hdop > 0);
  position.set(Position.KEY_HDOP,hdop);
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  if (parser.hasNext(8)) {
    position.setValid(true);
    position.setLongitude(parser.nextDouble());
    position.setLatitude(parser.nextDouble());
    position.setTime(parser.nextDateTime());
  }
 else {
    getLastLocation(position,null);
  }
  if (parser.hasNext(6)) {
    int mcc=parser.nextInt();
    int mnc=parser.nextInt();
    if (parser.hasNext(2)) {
      position.setNetwork(new Network(CellTower.from(mcc,mnc,parser.nextInt(),parser.nextInt())));
    }
 else {
      position.setNetwork(new Network(CellTower.from(mcc,mnc,parser.nextInt(16),parser.nextInt(16))));
    }
  }
  position.set(Position.KEY_ODOMETER,parser.nextDouble() * 1000);
}","private void decodeLocation(Position position,Parser parser){
  int hdop=parser.nextInt();
  position.setValid(hdop > 0);
  position.set(Position.KEY_HDOP,hdop);
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  if (parser.hasNext(8)) {
    position.setValid(true);
    position.setLongitude(parser.nextDouble());
    position.setLatitude(parser.nextDouble());
    position.setTime(parser.nextDateTime());
  }
 else {
    getLastLocation(position,null);
  }
  if (parser.hasNext(6)) {
    int mcc=parser.nextInt();
    int mnc=parser.nextInt();
    if (parser.hasNext(2)) {
      position.setNetwork(new Network(CellTower.from(mcc,mnc,parser.nextInt(),parser.nextInt())));
    }
    if (parser.hasNext(2)) {
      position.setNetwork(new Network(CellTower.from(mcc,mnc,parser.nextInt(16),parser.nextInt(16))));
    }
  }
  position.set(Position.KEY_ODOMETER,parser.nextDouble() * 1000);
}",0.9853313100657562
155994,"@Test public void testDecode() throws Exception {
  Gl200ProtocolDecoder decoder=new Gl200ProtocolDecoder(new Gl200Protocol());
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,false,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,false,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Gl200ProtocolDecoder decoder=new Gl200ProtocolDecoder(new Gl200Protocol());
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,false,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,false,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyNotNull(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
}",0.2466637010676156
155995,"private void decodeD(Position position,ChannelBuffer buf,int selector,int event){
  if ((selector & 0x0008) != 0) {
    position.setValid((buf.readUnsignedByte() & 0x40) != 0);
  }
 else {
    getLastLocation(position,null);
  }
  if ((selector & 0x0004) != 0) {
    buf.skipBytes(4);
  }
  if ((selector & 0x0008) != 0) {
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    position.setLatitude(buf.readInt() / 1000000.0);
    position.setLongitude(buf.readInt() / 1000000.0);
    position.set(Position.KEY_SATELLITES_VISIBLE,buf.readUnsignedByte());
  }
  if ((selector & 0x0010) != 0) {
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.setCourse(buf.readUnsignedByte() * 2.0);
  }
  if ((selector & 0x0040) != 0) {
    position.set(Position.KEY_INPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0020) != 0) {
    position.set(Position.PREFIX_ADC + 1,buf.readUnsignedShort());
    position.set(Position.PREFIX_ADC + 2,buf.readUnsignedShort());
    position.set(Position.PREFIX_ADC + 3,buf.readUnsignedShort());
    position.set(Position.PREFIX_ADC + 4,buf.readUnsignedShort());
  }
  if ((selector & 0x8000) != 0) {
    position.set(Position.KEY_POWER,buf.readUnsignedShort() / 1000.0);
    position.set(Position.KEY_BATTERY,buf.readUnsignedShort());
  }
  if ((selector & 0x10000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x20000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x0080) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0100) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0040) != 0) {
    position.set(Position.KEY_OUTPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0200) != 0) {
    position.set(Position.KEY_RFID,(((long)buf.readUnsignedShort()) << 32) + buf.readUnsignedInt());
  }
  if ((selector & 0x0400) != 0) {
    buf.readUnsignedByte();
  }
  if ((selector & 0x0800) != 0) {
    position.setAltitude(buf.readShort());
  }
  if ((selector & 0x2000) != 0) {
    buf.readUnsignedShort();
  }
  if ((selector & 0x4000) != 0) {
    buf.skipBytes(8);
  }
  if ((selector & 0x80000) != 0) {
    buf.skipBytes(11);
  }
  if ((selector & 0x1000) != 0) {
    decodeEventData(position,buf,event);
  }
  if (Context.getConfig().getBoolean(getProtocolName() + ""String_Node_Str"") && buf.readable() && (selector & 0x1000) != 0 && event == EVENT_DATA) {
    decodeCanData(buf,position);
  }
}","private void decodeD(Position position,ChannelBuffer buf,int selector,int event){
  if ((selector & 0x0008) != 0) {
    position.setValid((buf.readUnsignedByte() & 0x40) != 0);
  }
 else {
    getLastLocation(position,null);
  }
  if ((selector & 0x0004) != 0) {
    buf.skipBytes(4);
  }
  if ((selector & 0x0008) != 0) {
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    position.setLatitude(buf.readInt() / 1000000.0);
    position.setLongitude(buf.readInt() / 1000000.0);
    position.set(Position.KEY_SATELLITES_VISIBLE,buf.readUnsignedByte());
  }
  if ((selector & 0x0010) != 0) {
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    position.setCourse(buf.readUnsignedByte() * 2.0);
  }
  if ((selector & 0x0040) != 0) {
    position.set(Position.KEY_INPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0020) != 0) {
    position.set(Position.PREFIX_ADC + 1,buf.readUnsignedShort());
    position.set(Position.PREFIX_ADC + 2,buf.readUnsignedShort());
    position.set(Position.PREFIX_ADC + 3,buf.readUnsignedShort());
    position.set(Position.PREFIX_ADC + 4,buf.readUnsignedShort());
  }
  if ((selector & 0x8000) != 0) {
    position.set(Position.KEY_POWER,buf.readUnsignedShort() * 0.001);
    position.set(Position.KEY_BATTERY,buf.readUnsignedShort() * 0.001);
  }
  if ((selector & 0x10000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x20000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x0080) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0100) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0040) != 0) {
    position.set(Position.KEY_OUTPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0200) != 0) {
    position.set(Position.KEY_RFID,(((long)buf.readUnsignedShort()) << 32) + buf.readUnsignedInt());
  }
  if ((selector & 0x0400) != 0) {
    buf.readUnsignedByte();
  }
  if ((selector & 0x0800) != 0) {
    position.setAltitude(buf.readShort());
  }
  if ((selector & 0x2000) != 0) {
    buf.readUnsignedShort();
  }
  if ((selector & 0x4000) != 0) {
    buf.skipBytes(8);
  }
  if ((selector & 0x80000) != 0) {
    buf.skipBytes(11);
  }
  if ((selector & 0x1000) != 0) {
    decodeEventData(position,buf,event);
  }
  if (Context.getConfig().getBoolean(getProtocolName() + ""String_Node_Str"") && buf.readable() && (selector & 0x1000) != 0 && event == EVENT_DATA) {
    decodeCanData(buf,position);
  }
}",0.9959669675436912
155996,"private static String formatUrl(String key){
  String url=""String_Node_Str"";
  if (key != null) {
    url+=""String_Node_Str"" + key;
  }
  return url;
}","private static String formatUrl(String key,String language){
  String url=""String_Node_Str"";
  url+=""String_Node_Str"";
  if (key != null) {
    url+=""String_Node_Str"" + key;
  }
  if (language != null) {
    url+=""String_Node_Str"" + language;
  }
  return url;
}",0.6731234866828087
155997,"public GeocodeFarmGeocoder(String key,int cacheSize){
  super(formatUrl(key),cacheSize);
}","public GeocodeFarmGeocoder(String key,String language,int cacheSize){
  super(formatUrl(key,language),cacheSize);
}",0.8780487804878049
155998,"private static String formatUrl(String url,String key){
  if (url == null) {
    url=""String_Node_Str"";
  }
  if (key != null) {
    url+=""String_Node_Str"" + key;
  }
  return url;
}","private static String formatUrl(String url,String key){
  if (url == null) {
    url=""String_Node_Str"";
  }
  url+=""String_Node_Str"";
  if (key != null) {
    url+=""String_Node_Str"" + key;
  }
  return url;
}",0.9333333333333332
155999,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String[] sentences=((String)msg).split(""String_Node_Str"");
  List<Position> positions=new ArrayList<>();
  Map<Integer,BitBuffer> buffers=new HashMap<>();
  for (  String sentence : sentences) {
    if (!sentence.isEmpty()) {
      Parser parser=new Parser(PATTERN,sentence);
      if (parser.matches()) {
        int count=parser.nextInt();
        int index=parser.nextInt();
        int id=parser.nextInt();
        Position position=null;
        if (count == 1) {
          BitBuffer bits=new BitBuffer();
          bits.writeEncoded(parser.next().getBytes());
          position=decodePayload(channel,remoteAddress,bits);
        }
 else {
          BitBuffer bits=buffers.get(id);
          if (bits == null) {
            bits=new BitBuffer();
            buffers.put(id,bits);
          }
          bits.writeEncoded(parser.next().getBytes());
          if (count == index) {
            position=decodePayload(channel,remoteAddress,bits);
            buffers.remove(id);
          }
        }
        if (position != null) {
          positions.add(position);
        }
      }
    }
  }
  return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String[] sentences=((String)msg).split(""String_Node_Str"");
  List<Position> positions=new ArrayList<>();
  Map<Integer,BitBuffer> buffers=new HashMap<>();
  for (  String sentence : sentences) {
    if (!sentence.isEmpty()) {
      Parser parser=new Parser(PATTERN,sentence);
      if (parser.matches()) {
        int count=parser.nextInt();
        int index=parser.nextInt();
        int id=parser.nextInt();
        Position position=null;
        if (count == 1) {
          BitBuffer bits=new BitBuffer();
          bits.writeEncoded(parser.next().getBytes(StandardCharsets.US_ASCII));
          position=decodePayload(channel,remoteAddress,bits);
        }
 else {
          BitBuffer bits=buffers.get(id);
          if (bits == null) {
            bits=new BitBuffer();
            buffers.put(id,bits);
          }
          bits.writeEncoded(parser.next().getBytes(StandardCharsets.US_ASCII));
          if (count == index) {
            position=decodePayload(channel,remoteAddress,bits);
            buffers.remove(id);
          }
        }
        if (position != null) {
          positions.add(position);
        }
      }
    }
  }
  return positions;
}",0.9800796812749004
156000,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 5) {
    return null;
  }
  int length;
  if (firstPacket) {
    firstPacket=false;
    length=buf.getUnsignedMedium(buf.readerIndex() + 2);
  }
 else {
    length=buf.getUnsignedMedium(buf.readerIndex() + 1);
  }
  length+=BLOCK_LENGTH;
  if (length % BLOCK_LENGTH != 0) {
    length=(length / BLOCK_LENGTH + 1) * BLOCK_LENGTH;
  }
  if (buf.readableBytes() >= length || buf.readableBytes() % ACK_LENGTH == 0) {
    if (buf != currentBuffer || buf.readableBytes() > acknowledgedBytes) {
      sendResponse(channel);
      currentBuffer=buf;
      acknowledgedBytes=buf.readableBytes();
    }
  }
  if (buf.readableBytes() >= length) {
    return buf.readBytes(length);
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 5) {
    return null;
  }
  int length;
  if (firstPacket) {
    firstPacket=false;
    length=buf.getUnsignedMedium(buf.readerIndex() + 2);
  }
 else {
    length=buf.getUnsignedMedium(buf.readerIndex() + 1);
  }
  length+=BLOCK_LENGTH;
  if (length % BLOCK_LENGTH != 0) {
    length=(length / BLOCK_LENGTH + 1) * BLOCK_LENGTH;
  }
  if ((buf.readableBytes() >= length || buf.readableBytes() % ACK_LENGTH == 0) && (buf != currentBuffer || buf.readableBytes() > acknowledgedBytes)) {
    sendResponse(channel);
    currentBuffer=buf;
    acknowledgedBytes=buf.readableBytes();
  }
  if (buf.readableBytes() >= length) {
    return buf.readBytes(length);
  }
  return null;
}",0.8580097087378641
