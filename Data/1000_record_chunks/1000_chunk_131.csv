record_number,buggy_code,fixed_code,code_similarity
130001,"@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"")) {
    RegisterManagement.getInstance().validateRegistration();
  }
  if (!CommonsPlugin.isHeadless()) {
    CorePlugin.getDefault().getCodeGeneratorService().initializeTemplates();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
}","@Override public void postStartup(){
  super.postStartup();
  if (!ArrayUtils.contains(Platform.getApplicationArgs(),EclipseCommandLine.TALEND_DISABLE_LOGINDIALOG_COMMAND)) {
    RegisterManagement.getInstance().validateRegistration();
  }
  if (!CommonsPlugin.isHeadless()) {
    CorePlugin.getDefault().getCodeGeneratorService().initializeTemplates();
  }
  PerspectiveReviewUtil.setPerspectiveTabs();
}",0.9198966408268734
130002,"/** 
 * DOC chuang Comment method ""checkColumnNames"".
 */
public String checkColumnNames(){
  List<SchemaTarget> list=getModel().getBeansList();
  Set<String> conflictNames=new HashSet<String>();
  Set<String> names=new HashSet<String>();
  Map<String,String> con=new HashMap<String,String>();
  int lstSize=list.size();
  for (int i=0; i < lstSize; i++) {
    String name=list.get(i).getTagName();
    String path=list.get(i).getRelativeXPathQuery();
    if (path == null) {
      path=""String_Node_Str"";
    }
    if (name == null)     name=""String_Node_Str"";
    if (!path.contains(""String_Node_Str"") && names.contains(name)) {
      if (con.get(name) != null && !con.get(name).contains(""String_Node_Str""))       conflictNames.add(name);
    }
 else {
      names.add(name);
      con.put(name,path);
    }
  }
  setRowBackground(list,conflictNames);
  if (conflictNames.isEmpty()) {
    return null;
  }
 else {
    StringBuffer buf=new StringBuffer();
    buf.append(Messages.getString(""String_Node_Str""));
    for (    String name : conflictNames) {
      buf.append(name);
      buf.append(""String_Node_Str"");
    }
    buf.deleteCharAt(buf.length() - 1);
    buf.append(Messages.getString(""String_Node_Str""));
    return buf.toString();
  }
}","/** 
 * DOC chuang Comment method ""checkColumnNames"".
 */
public String checkColumnNames(){
  List<SchemaTarget> list=getModel().getBeansList();
  Set<String> conflictNames=new HashSet<String>();
  Set<String> names=new HashSet<String>();
  int lstSize=list.size();
  for (int i=0; i < lstSize; i++) {
    String name=list.get(i).getTagName();
    String path=list.get(i).getRelativeXPathQuery();
    if (path == null) {
      path=""String_Node_Str"";
    }
    if (name == null)     name=""String_Node_Str"";
    if (names.contains(name)) {
      conflictNames.add(name);
    }
 else {
      names.add(name);
    }
  }
  setRowBackground(list,conflictNames);
  if (conflictNames.isEmpty()) {
    return null;
  }
 else {
    StringBuffer buf=new StringBuffer();
    buf.append(Messages.getString(""String_Node_Str""));
    for (    String name : conflictNames) {
      buf.append(name);
      buf.append(""String_Node_Str"");
    }
    buf.deleteCharAt(buf.length() - 1);
    buf.append(Messages.getString(""String_Node_Str""));
    return buf.toString();
  }
}",0.9144594007815892
130003,"private boolean checkResultSchema(UpdateResult result,Object object,Object parameter){
  if (object == null || parameter == null) {
    return false;
  }
  if (object instanceof IMetadataTable) {
    if (parameter instanceof ConnectionItem) {
      ConnectionItem connection=(ConnectionItem)parameter;
      String source=UpdateRepositoryHelper.getRepositorySourceName(connection);
      if (result.getRemark() != null) {
        if (result.getRemark().startsWith(source)) {
          return true;
        }
 else         if (result.isReadOnlyProcess()) {
          return true;
        }
 else {
          String[] split=result.getRemark().split(UpdatesConstants.SEGMENT_LINE);
          if (connection.getProperty() != null && split[0].equals(connection.getProperty().getId())) {
            return true;
          }
        }
      }
    }
 else     if (parameter instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
      IMetadataTable table1=((IMetadataTable)object);
      MetadataTable table2=(org.talend.core.model.metadata.builder.connection.MetadataTable)parameter;
      if (table1.getId() == null || table2.getId() == null) {
        return table1.getLabel().equals(table2.getLabel());
      }
 else {
        return table1.getId().equals(table2.getId());
      }
    }
 else     if (parameter instanceof SAPFunctionUnit) {
      IMetadataTable table1=((IMetadataTable)object);
      return table1.getId().equals(((SAPFunctionUnit)parameter).getMetadataTable().getId());
    }
 else     if (parameter instanceof Connection) {
      Set<MetadataTable> tables=ConnectionHelper.getTables((Connection)parameter);
      if (tables.size() == 1) {
        IMetadataTable table1=((IMetadataTable)object);
        MetadataTable table2=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
        return table1.getId().equals(table2.getId());
      }
    }
  }
  Object parameter2=result.getParameter();
  if (object instanceof String && parameter2 instanceof List) {
    List listParameter=(List)parameter2;
    if (listParameter.get(1) instanceof EUpdateResult) {
      return true;
    }
  }
  return false;
}","private boolean checkResultSchema(UpdateResult result,Object object,Object parameter){
  if (object == null || parameter == null) {
    return false;
  }
  if (object instanceof IMetadataTable) {
    if (parameter instanceof ConnectionItem) {
      ConnectionItem connection=(ConnectionItem)parameter;
      String source=UpdateRepositoryHelper.getRepositorySourceName(connection);
      if (result.getRemark() != null) {
        if (result.getRemark().startsWith(source)) {
          return true;
        }
 else         if (result.isReadOnlyProcess()) {
          return true;
        }
 else {
          String[] split=result.getRemark().split(UpdatesConstants.SEGMENT_LINE);
          if (connection.getProperty() != null && split[0].equals(connection.getProperty().getId())) {
            return true;
          }
        }
      }
    }
 else     if (parameter instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
      IMetadataTable table1=((IMetadataTable)object);
      MetadataTable table2=(org.talend.core.model.metadata.builder.connection.MetadataTable)parameter;
      if (table1.getId() == null || table2.getId() == null) {
        return table1.getLabel().equals(table2.getLabel());
      }
 else {
        return table1.getId().equals(table2.getId());
      }
    }
 else     if (parameter instanceof SAPFunctionUnit) {
      IMetadataTable table1=((IMetadataTable)object);
      return table1.getId().equals(((SAPFunctionUnit)parameter).getMetadataTable().getId());
    }
 else     if (parameter instanceof Connection) {
      Set<MetadataTable> tables=ConnectionHelper.getTables((Connection)parameter);
      if (tables.size() == 1) {
        IMetadataTable table1=((IMetadataTable)object);
        MetadataTable table2=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
        return table1.getId().equals(table2.getId());
      }
      if (parameter instanceof XmlFileConnection) {
        boolean isResult=false;
        for (        MetadataTable table : tables) {
          if (table.getId() != null && table.getId().equals(((IMetadataTable)object).getId())) {
            isResult=true;
            break;
          }
        }
        return isResult;
      }
    }
  }
  Object parameter2=result.getParameter();
  if (object instanceof String && parameter2 instanceof List) {
    List listParameter=(List)parameter2;
    if (listParameter.get(1) instanceof EUpdateResult) {
      return true;
    }
  }
  return false;
}",0.895044362692058
130004,"/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      }
 else {
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}","/** 
 * This method determine if the 'Finish' button is enable This method is called when 'Finish' button is pressed in the wizard. We will create an operation and run it using wizard as execution context.
 */
public boolean performFinish(){
  boolean formIsPerformed=false;
  IWizardPage finalPage=getCurrentPage();
  if (finalPage == null) {
    finalPage=propertiesWizardPage;
  }
  deleteTemFile();
  if (connection.isInputModel()) {
    if (finalPage instanceof XmlFileWizardPage) {
      int step=((XmlFileWizardPage)finalPage).step;
      if (step == 2) {
        formIsPerformed=finalPage.isPageComplete();
        if (formIsPerformed) {
          List schemas=connection.getSchema();
          Set tables=ConnectionHelper.getTables(connection);
          if (!schemas.isEmpty() && !tables.isEmpty()) {
            XmlXPathLoopDescriptor currentSchema=(XmlXPathLoopDescriptor)schemas.get(0);
            MetadataTable currentTable=(MetadataTable)tables.toArray(new MetadataTable[0])[0];
            if (!currentSchema.getAbsoluteXPathQuery().equals(oldAbstractQueryPath)) {
              resetMetadata(currentSchema.getSchemaTargets(),true);
            }
 else {
              resetMetadata(currentSchema.getSchemaTargets(),false);
            }
          }
        }
      }
 else {
        formIsPerformed=finalPage.isPageComplete();
      }
    }
 else {
      formIsPerformed=finalPage.isPageComplete();
    }
  }
 else {
    formIsPerformed=finalPage.isPageComplete();
  }
  if (formIsPerformed) {
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    try {
      if (creation) {
        String nextId=factory.getNextId();
        connectionProperty.setId(nextId);
        factory.create(connectionItem,propertiesWizardPage.getDestinationPath());
      }
 else {
        Map<String,SchemaTarget> schemaTargetMap=new HashMap<String,SchemaTarget>();
        EList<XmlXPathLoopDescriptor> schema=connection.getSchema();
        if (schema != null && schema.size() > 0) {
          XmlXPathLoopDescriptor xmlXPathLoopDescriptor=schema.get(0);
          if (xmlXPathLoopDescriptor != null) {
            EList<SchemaTarget> schemaTargets=xmlXPathLoopDescriptor.getSchemaTargets();
            if (schemaTargets != null && schemaTargets.size() > 0) {
              for (              SchemaTarget schemaTarget : schemaTargets) {
                schemaTargetMap.put(schemaTarget.getTagName(),schemaTarget);
              }
            }
          }
        }
        MetadataTable[] tables=ConnectionHelper.getTables(connectionItem.getConnection()).toArray(new MetadataTable[0]);
        for (        MetadataTable table : tables) {
          EList<MetadataColumn> columns=table.getColumns();
          Iterator<MetadataColumn> columnsIter=columns.iterator();
          while (columnsIter.hasNext()) {
            MetadataColumn column=columnsIter.next();
            if (schemaTargetMap.size() > 0 && schemaTargetMap.get(column.getLabel()) == null) {
              columnsIter.remove();
            }
          }
        }
        RepositoryUpdateManager.updateFileConnection(connectionItem);
        factory.save(connectionItem);
        closeLockStrategy();
      }
      ProxyRepositoryFactory.getInstance().saveProject(ProjectManager.getInstance().getCurrentProject());
    }
 catch (    PersistenceException e) {
      String detailError=e.toString();
      new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),detailError);
      log.error(Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + detailError);
      return false;
    }
    return true;
  }
 else {
    return false;
  }
}",0.7933421226104153
130005,"/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url.startsWith(h2Prefix)) {
        String path=url.substring(h2Prefix.length(),url.length());
        path=PathUtils.getPortablePath(path);
        url=h2Prefix + path;
      }
      return TalendQuoteUtils.addQuotes(url);
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getServerName());
  }
  return null;
}","/** 
 * DOC nrousseau Comment method ""getDatabaseValue"".
 * @param connection
 * @param value
 * @return
 */
private static Object getDatabaseValue(DatabaseConnection connection,String value){
  String databaseType=connection.getDatabaseType();
  if (value.equals(""String_Node_Str"")) {
    String typeByProduct=getStandardDbTypeFromConnection(databaseType);
    if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
      return EDatabaseTypeName.ORACLEFORSID.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
      return EDatabaseTypeName.ORACLESN.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_OCI.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
      return EDatabaseTypeName.ORACLE_RAC.getXmlName();
    }
 else     if (databaseType.equals(EDatabaseTypeName.MSSQL.getDisplayName())) {
      return EDatabaseTypeName.MSSQL.getXMLType();
    }
 else {
      return typeByProduct;
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
      if (databaseType.equals(""String_Node_Str"")) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getServerName())) {
      return connection.getServerName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getServerName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPort())) {
      return connection.getPort();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPort());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if ((""String_Node_Str"").equals(connection.getSID()) || connection.getSID() == null) {
      if (isContextMode(connection,connection.getDatasourceName())) {
        return connection.getDatasourceName();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
      }
    }
 else {
      if (isContextMode(connection,connection.getSID())) {
        return connection.getSID();
      }
 else {
        return TalendQuoteUtils.addQuotes(connection.getSID());
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUsername())) {
      return connection.getUsername();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUsername());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getPassword())) {
      return connection.getPassword();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getPassword());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getNullChar())) {
      return connection.getNullChar();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getNullChar());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getUiSchema())) {
      return connection.getUiSchema();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getUiSchema());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getFileFieldName())) {
      return connection.getFileFieldName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getFileFieldName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getAdditionalParams())) {
      return connection.getAdditionalParams();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getAdditionalParams());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String dbVersionString=connection.getDbVersionString();
    if (EDatabaseConnTemplate.ACCESS.getDBDisplayName().equals(databaseType)) {
      return dbVersionString;
    }
 else {
      String driverValue=EDatabaseVersion4Drivers.getDriversStr(databaseType,dbVersionString);
      if (isContextMode(connection,dbVersionString)) {
        return dbVersionString;
      }
 else {
        return driverValue;
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,databaseType)) {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
 else {
      if (databaseType.equals(EDatabaseTypeName.ORACLEFORSID.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLESN.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_OCI.getDisplayName())) {
        return ""String_Node_Str"";
      }
 else       if (databaseType.equals(EDatabaseTypeName.ORACLE_RAC.getDisplayName())) {
        return ""String_Node_Str"";
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDriverClass())) {
      return connection.getDriverClass();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDriverClass());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String url=connection.getURL();
    if (isContextMode(connection,url)) {
      return url;
    }
 else {
      String h2Prefix=""String_Node_Str"";
      if (url != null) {
        if (url.startsWith(h2Prefix)) {
          String path=url.substring(h2Prefix.length(),url.length());
          path=PathUtils.getPortablePath(path);
          url=h2Prefix + path;
          return url;
        }
      }
 else {
        return TalendQuoteUtils.addQuotes(url);
      }
    }
  }
  if (value.equals(""String_Node_Str"")) {
    List<Map<String,Object>> value2=new ArrayList<Map<String,Object>>();
    if (isContextMode(connection,connection.getDriverJarPath())) {
      Map<String,Object> line=new HashMap<String,Object>();
      line.put(""String_Node_Str"",connection.getDriverJarPath());
      value2.add(line);
    }
 else {
      String userDir=System.getProperty(""String_Node_Str"");
      String pathSeparator=System.getProperty(""String_Node_Str"");
      String defaultPath=userDir + pathSeparator + ""String_Node_Str""+ pathSeparator+ ""String_Node_Str"";
      String jarPath=connection.getDriverJarPath();
      if (jarPath == null) {
        return null;
      }
      try {
        Character comma=';';
        String[] jars=jarPath.split(comma.toString());
        boolean deployed=false;
        if (jars != null) {
          for (          String jar : jars) {
            File file=Path.fromOSString(jar).toFile();
            if (file.exists() && file.isFile()) {
              String fileName=file.getName();
              Map<String,Object> line=new HashMap<String,Object>();
              line.put(""String_Node_Str"",fileName);
              value2.add(line);
              if (!new File(defaultPath + pathSeparator + fileName).exists()) {
                try {
                  CoreRuntimePlugin.getInstance().getLibrariesService().deployLibrary(file.toURL());
                  deployed=true;
                }
 catch (                IOException e) {
                  ExceptionHandler.process(e);
                  return null;
                }
              }
            }
          }
          if (deployed) {
            CoreRuntimePlugin.getInstance().getLibrariesService().resetModulesNeeded();
          }
        }
      }
 catch (      Exception e) {
        return null;
      }
    }
    return value2;
  }
  if (value.equals(""String_Node_Str"")) {
    return new Boolean(CDCTypeMode.LOG_MODE.getName().equals(connection.getCdcTypeMode()));
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    String runningMode=""String_Node_Str"";
    if (EDatabaseTypeName.HSQLDB_IN_PROGRESS.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_SERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
 else     if (EDatabaseTypeName.HSQLDB_WEBSERVER.getXmlName().equals(databaseType)) {
      runningMode=""String_Node_Str"";
    }
    return runningMode;
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDBRootPath())) {
      return connection.getDBRootPath();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDBRootPath());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    if (isContextMode(connection,connection.getDatasourceName())) {
      return connection.getDatasourceName();
    }
 else {
      return TalendQuoteUtils.addQuotes(connection.getDatasourceName());
    }
  }
  if (value.equals(""String_Node_Str"")) {
    return TalendQuoteUtils.addQuotes(connection.getServerName());
  }
  return null;
}",0.995714918977491
130006,"private TableNode transferTableToTableNode(MetadataTable tableItem,TableNode parentNode){
  TableNode existTableNode=null;
  if (tableItem instanceof TdTable) {
    TdTable td=(TdTable)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(td.getLabel());
    existTableNode.setItemType(td.getTableType());
    existTableNode.setTable(td);
    existTableNode.setParent(parentNode);
    parentNode.addChild(existTableNode);
  }
 else   if (tableItem instanceof TdView) {
    TdView tv=(TdView)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(tv.getLabel());
    existTableNode.setItemType(tv.getTableType());
    existTableNode.setView(tv);
    existTableNode.setParent(parentNode);
    parentNode.addChild(existTableNode);
  }
  return existTableNode;
}","private TableNode transferTableToTableNode(MetadataTable tableItem,TableNode parentNode){
  TableNode existTableNode=null;
  if (tableItem instanceof TdTable) {
    TdTable td=(TdTable)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(td.getLabel());
    existTableNode.setItemType(td.getTableType());
    existTableNode.setTable(td);
    if (parentNode != null) {
      existTableNode.setParent(parentNode);
      parentNode.addChild(existTableNode);
    }
  }
 else   if (tableItem instanceof TdView) {
    TdView tv=(TdView)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(tv.getLabel());
    existTableNode.setItemType(tv.getTableType());
    existTableNode.setView(tv);
    if (parentNode != null) {
      existTableNode.setParent(parentNode);
      parentNode.addChild(existTableNode);
    }
  }
  return existTableNode;
}",0.9569429494079656
130007,"/** 
 * ldong Comment method ""getExistCheckedTable"".
 * @param tableNode
 * @return
 */
private TableNode getExistCheckedTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    EList<ModelElement> ownedElement=null;
    List<TableNode> tableNodes=getTableNodeInfo();
    TableNode parent=tableNode.getParent();
    int type=parent.getType();
    if (type == TableNode.CATALOG) {
      for (      TableNode catalogNode : tableNodes) {
        if (catalogNode.getType() == type) {
          if (!catalogNode.getValue().equals(parent.getValue())) {
            if (catalogNode.getCatalog() != null) {
              ownedElement=catalogNode.getCatalog().getOwnedElement();
              for (              ModelElement m : ownedElement) {
                if (m instanceof MetadataTable) {
                  String label=((MetadataTable)m).getLabel();
                  if (label.equals(tableNode.getValue())) {
                    if (((CatalogImpl)m.eContainer()).getName().equals(catalogNode.getValue())) {
                      return transferTableToTableNode((MetadataTable)m,catalogNode);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (type == TableNode.SCHEMA) {
      TableNode p=parent.getParent();
      if (p == null) {
        for (        TableNode schemaNode : tableNodes) {
          if (schemaNode.getType() == type) {
            if (!schemaNode.getValue().equals(parent.getValue())) {
              if (schemaNode.getSchema() != null) {
                ownedElement=schemaNode.getSchema().getOwnedElement();
                for (                ModelElement m : ownedElement) {
                  if (m instanceof MetadataTable) {
                    String label=((MetadataTable)m).getLabel();
                    if (label.equals(tableNode.getValue())) {
                      if (((SchemaImpl)m.eContainer()).getName().equals(schemaNode.getValue())) {
                        return transferTableToTableNode((MetadataTable)m,schemaNode);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
 else {
        for (        TableNode catalogNode : tableNodes) {
          if (catalogNode.getType() == TableNode.CATALOG) {
            if (catalogNode.getCatalog() != null) {
              if (catalogNode.getValue().equals(p.getValue())) {
                List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                for (                Schema schs : schemas) {
                  ownedElement=schs.getOwnedElement();
                  for (                  ModelElement m : ownedElement) {
                    if (m instanceof MetadataTable) {
                      String label=((MetadataTable)m).getLabel();
                      if (label.equals(tableNode.getValue())) {
                        List<TableNode> schemaNodeList=catalogNode.getChildren();
                        for (                        TableNode parentSchema : schemaNodeList) {
                          if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue()) && !parentSchema.getValue().equals(parent.getValue())) {
                            return transferTableToTableNode((MetadataTable)m,parentSchema);
                          }
                        }
                      }
                    }
                  }
                }
              }
 else {
                List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                for (                Schema schs : schemas) {
                  ownedElement=schs.getOwnedElement();
                  for (                  ModelElement m : ownedElement) {
                    if (m instanceof MetadataTable) {
                      String label=((MetadataTable)m).getLabel();
                      if (label.equals(tableNode.getValue())) {
                        List<TableNode> schemaNodeList=catalogNode.getChildren();
                        for (                        TableNode parentSchema : schemaNodeList) {
                          if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue())) {
                            return transferTableToTableNode((MetadataTable)m,parentSchema);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return null;
}","/** 
 * ldong Comment method ""getExistCheckedTable"".
 * @param tableNode
 * @return
 */
private TableNode getExistCheckedTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    EList<ModelElement> ownedElement=null;
    List<TableNode> tableNodes=getTableNodeInfo();
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      int type=parent.getType();
      if (type == TableNode.CATALOG) {
        for (        TableNode catalogNode : tableNodes) {
          if (catalogNode.getType() == type) {
            if (!catalogNode.getValue().equals(parent.getValue())) {
              if (catalogNode.getCatalog() != null) {
                ownedElement=catalogNode.getCatalog().getOwnedElement();
                for (                ModelElement m : ownedElement) {
                  if (m instanceof MetadataTable) {
                    String label=((MetadataTable)m).getLabel();
                    if (label.equals(tableNode.getValue())) {
                      if (((CatalogImpl)m.eContainer()).getName().equals(catalogNode.getValue())) {
                        return transferTableToTableNode((MetadataTable)m,catalogNode);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        if (p == null) {
          for (          TableNode schemaNode : tableNodes) {
            if (schemaNode.getType() == type) {
              if (!schemaNode.getValue().equals(parent.getValue())) {
                if (schemaNode.getSchema() != null) {
                  ownedElement=schemaNode.getSchema().getOwnedElement();
                  for (                  ModelElement m : ownedElement) {
                    if (m instanceof MetadataTable) {
                      String label=((MetadataTable)m).getLabel();
                      if (label.equals(tableNode.getValue())) {
                        if (((SchemaImpl)m.eContainer()).getName().equals(schemaNode.getValue())) {
                          return transferTableToTableNode((MetadataTable)m,schemaNode);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
 else {
          for (          TableNode catalogNode : tableNodes) {
            if (catalogNode.getType() == TableNode.CATALOG) {
              if (catalogNode.getCatalog() != null) {
                if (catalogNode.getValue().equals(p.getValue())) {
                  List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                  for (                  Schema schs : schemas) {
                    ownedElement=schs.getOwnedElement();
                    for (                    ModelElement m : ownedElement) {
                      if (m instanceof MetadataTable) {
                        String label=((MetadataTable)m).getLabel();
                        if (label.equals(tableNode.getValue())) {
                          List<TableNode> schemaNodeList=catalogNode.getChildren();
                          for (                          TableNode parentSchema : schemaNodeList) {
                            if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue()) && !parentSchema.getValue().equals(parent.getValue())) {
                              return transferTableToTableNode((MetadataTable)m,parentSchema);
                            }
                          }
                        }
                      }
                    }
                  }
                }
 else {
                  List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                  for (                  Schema schs : schemas) {
                    ownedElement=schs.getOwnedElement();
                    for (                    ModelElement m : ownedElement) {
                      if (m instanceof MetadataTable) {
                        String label=((MetadataTable)m).getLabel();
                        if (label.equals(tableNode.getValue())) {
                          List<TableNode> schemaNodeList=catalogNode.getChildren();
                          for (                          TableNode parentSchema : schemaNodeList) {
                            if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue())) {
                              return transferTableToTableNode((MetadataTable)m,parentSchema);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Object obj : ConnectionHelper.getTables(getConnection())) {
      if (obj == null) {
        continue;
      }
      MetadataTable table=(MetadataTable)obj;
      if (table.getLabel().equals(tableNode.getValue())) {
        return transferTableToTableNode(table,null);
      }
    }
  }
  return null;
}",0.942663378545006
130008,"protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
}","protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}",0.8572756857275686
130009,"/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      if ((istRunJob && elemparameter.getName().equals(""String_Node_Str"")) || (!elemparameter.isShow(copyElementParameterList) && (!elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()))) || elemparameter.getCategory().equals(EComponentCategory.MAIN)|| elemparameter.getCategory().equals(EComponentCategory.VIEW)|| elemparameter.getName().equals(IHTMLDocConstants.REPOSITORY)|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(EParameterFieldType.ENCODING_TYPE.getName())) {
        continue;
      }
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.setText(value);
    }
  }
}","/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      if ((istRunJob && elemparameter.getName().equals(""String_Node_Str"")) || (!elemparameter.isShow(copyElementParameterList) && (!elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()))) || elemparameter.getCategory().equals(EComponentCategory.MAIN)|| elemparameter.getCategory().equals(EComponentCategory.VIEW)|| elemparameter.getName().equals(IHTMLDocConstants.REPOSITORY)|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(EParameterFieldType.ENCODING_TYPE.getName())) {
        continue;
      }
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}",0.9910396814108946
130010,"@Override protected String getBeanString(org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
  return bean.getName();
}","@Override protected String getBeanString(org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
  return bean.getLabel();
}",0.982078853046595
130011,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField != null && originalField.getNodeValue() != null) {
        metadataColumn.setName(originalField.getNodeValue());
        UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueStringGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getName(),listColumns){
          @Override protected String getBeanString(          org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
            return bean.getName();
          }
        }
;
        metadataColumn.setName(uniqueStringGenerator.getUniqueString());
      }
 else {
        metadataColumn.setName(label.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9291889266634288
130012,"/** 
 * DOC chuang PatternCalendar constructor comment.
 * @param parent
 * @param calendar
 * @param pattern2
 */
public PatternCalendar(Composite parent,int style,String pattern,Calendar calendar){
  super(parent,style);
  final Composite composite=new Composite(this,SWT.BORDER);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginWidth=5;
  gridLayout.marginHeight=5;
  composite.setLayout(gridLayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  composite.setBackground(getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label patternLabel=new Label(composite,SWT.NONE);
  patternLabel.setText(Messages.getString(""String_Node_Str""));
  patternLabel.setBackground(patternLabel.getParent().getBackground());
  patternText=new Text(composite,SWT.BORDER);
  patternText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      onPatternChange();
    }
  }
);
  JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
  ContentProposalAdapterExtended contentProposalAdapter=ProposalUtils.getCommonProposal(patternText,proposalProvider);
  contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
  Label exampleLabel=new Label(composite,SWT.NONE);
  exampleLabel.setText(Messages.getString(""String_Node_Str""));
  exampleLabel.setBackground(patternLabel.getParent().getBackground());
  exampleValue=new Label(composite,SWT.NONE);
  exampleValue.setText(""String_Node_Str"");
  exampleValue.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (calendar != null) {
    setCalendar(calendar);
  }
  if (pattern != null) {
    patternText.setText(""String_Node_Str"" + pattern + ""String_Node_Str"");
  }
 else {
    patternText.setText(Messages.getString(""String_Node_Str""));
  }
}","/** 
 * DOC chuang PatternCalendar constructor comment.
 * @param parent
 * @param calendar
 * @param pattern2
 */
public PatternCalendar(Composite parent,int style,String pattern,Calendar calendar){
  super(parent,style);
  final Composite composite=new Composite(this,SWT.BORDER);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginWidth=5;
  gridLayout.marginHeight=5;
  composite.setLayout(gridLayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  composite.setBackground(getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label patternLabel=new Label(composite,SWT.NONE);
  patternLabel.setText(Messages.getString(""String_Node_Str""));
  patternLabel.setBackground(patternLabel.getParent().getBackground());
  patternText=new Text(composite,SWT.BORDER);
  patternText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      onPatternChange();
    }
  }
);
  JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
  ContentProposalAdapterExtended contentProposalAdapter=ProposalUtils.getCommonProposal(patternText,proposalProvider);
  contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
  Label exampleLabel=new Label(composite,SWT.NONE);
  exampleLabel.setText(Messages.getString(""String_Node_Str""));
  exampleLabel.setBackground(patternLabel.getParent().getBackground());
  exampleValue=new Label(composite,SWT.NONE);
  exampleValue.setText(""String_Node_Str"");
  exampleValue.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (calendar != null) {
    setCalendar(calendar);
  }
  if (pattern != null) {
    patternText.setText(""String_Node_Str"" + pattern + ""String_Node_Str"");
  }
 else {
    patternText.setText(defaultFormat);
  }
}",0.9875062468765616
130013,"private void updateTable(Property property){
  if (property == null) {
    return;
  }
  Connection connection=null;
  Item item=property.getItem();
  if (item instanceof ConnectionItem) {
    ConnectionItem cItem=(ConnectionItem)item;
    connection=cItem.getConnection();
  }
  if (connection == null) {
    return;
  }
  Set tables=null;
  if (table.eContainer() instanceof SAPFunctionUnit) {
    SAPFunctionUnit funUnit=(SAPFunctionUnit)table.eContainer();
    tables=ConnectionHelper.getTables(connection,funUnit);
  }
 else {
    tables=ConnectionHelper.getTables(connection);
  }
  if (tables != null) {
    Iterator iterator=tables.iterator();
    while (iterator.hasNext()) {
      Object obj=iterator.next();
      if (obj instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
        org.talend.core.model.metadata.builder.connection.MetadataTable repObj=(org.talend.core.model.metadata.builder.connection.MetadataTable)obj;
        if (table != null && table.getLabel() != null && table.getLabel().equals(repObj.getLabel()) && table.eContainer().equals(repObj.eContainer())) {
          table=repObj;
          break;
        }
      }
    }
  }
}","private void updateTable(Property property){
  if (property == null) {
    return;
  }
  Connection connection=null;
  Item item=property.getItem();
  if (item instanceof ConnectionItem) {
    ConnectionItem cItem=(ConnectionItem)item;
    connection=cItem.getConnection();
  }
  if (connection == null) {
    return;
  }
  Set tables=null;
  if (table.eContainer() instanceof SAPFunctionUnit) {
    SAPFunctionUnit funUnit=(SAPFunctionUnit)table.eContainer();
    tables=ConnectionHelper.getTables(connection,funUnit);
  }
 else {
    tables=ConnectionHelper.getTables(connection);
  }
  if (tables != null) {
    Iterator iterator=tables.iterator();
    while (iterator.hasNext()) {
      Object obj=iterator.next();
      if (obj instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
        org.talend.core.model.metadata.builder.connection.MetadataTable repObj=(org.talend.core.model.metadata.builder.connection.MetadataTable)obj;
        boolean sameParent=false;
        if (table.eContainer() instanceof ModelElement && repObj.eContainer() instanceof ModelElement) {
          ModelElement tableP=(ModelElement)table.eContainer();
          ModelElement repObjP=(ModelElement)repObj.eContainer();
          if (tableP.getName() != null && tableP.getName().equals(repObjP.getName())) {
            sameParent=true;
          }
        }
        if (table != null && table.getLabel() != null && table.getLabel().equals(repObj.getLabel()) && sameParent) {
          table=repObj;
          break;
        }
      }
    }
  }
}",0.8181154127100073
130014,"private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreePopulator treePopulator=new TreePopulator(new Tree(composite,SWT.None));
  XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
  XSDSchema xsdSchema=updateXSDSchema(file);
  ATreeNode treeRootNode=wizard.getTreeRootNode();
  if (treeRootNode == null)   return;
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      columns.add(metadataColumn);
    }
  }
}","private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreePopulator treePopulator=new TreePopulator(new Tree(composite,SWT.None));
  XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
  XSDSchema xsdSchema=updateXSDSchema(file);
  ATreeNode treeRootNode=wizard.getTreeRootNode();
  if (treeRootNode == null)   return;
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      columns.add(metadataColumn);
    }
  }
}",0.9631940112289458
130015,"/** 
 * DOC amaumont Comment method ""addLinks"".
 * @param relativeXpath
 * @param tableItemTarget
 * @param progressMonitor
 * @throws XPathExpressionException
 */
private void createFieldLinks(final String relativeXpathPrm,final TableItem tableItemTarget,IProgressMonitor progressMonitor,SchemaTarget schemaTarget){
  if (relativeXpathPrm == null || relativeXpathPrm.trim().length() == 0) {
    return;
  }
  boolean expressionIsAbsolute=false;
  if (relativeXpathPrm.trim().startsWith(""String_Node_Str"")) {
    expressionIsAbsolute=true;
  }
  String relativeXpath=relativeXpathPrm;
  Set<String> alreadyProcessedXPath=new HashSet<String>();
  if (!isXSDFile) {
    List<Node> nodeList=null;
    if (expressionIsAbsolute) {
      String expression=null;
      if (relativeXpath == null) {
        relativeXpath=""String_Node_Str"";
      }
      expression=relativeXpath;
      try {
        nodeList=this.nodeRetriever.retrieveNodeList(expression);
      }
 catch (      XPathExpressionException e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      if (allLoopNodes.size() > 0) {
        Node loopNode=allLoopNodes.get(0);
        try {
          if (relativeXpath == null) {
            relativeXpath=""String_Node_Str"";
          }
          final String resault=relativeXpath;
          nodeList=this.nodeRetriever.retrieveNodeListFromNode(relativeXpath,loopNode);
          if (nodeList == null) {
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + resault + ""String_Node_Str"");
              }
            }
);
            progressMonitor.setCanceled(true);
            XmlExtractorFieldModel schemaModel=this.fieldsTableEditorView.getModel();
            schemaModel.remove(schemaTarget);
            fieldsTableEditorView.getTable().redraw();
          }
 else           if (nodeList.size() == 0) {
            String currentLoopXPath=getCurrentLoopXPath();
            String expression=currentLoopXPath + ""String_Node_Str"" + relativeXpath;
            nodeList=this.nodeRetriever.retrieveNodeList(expression);
          }
        }
 catch (        XPathExpressionException e) {
          e.printStackTrace();
        }
      }
    }
    if (nodeList != null) {
      int length=nodeList.size();
      for (int i=0; i < length; i++) {
        if (progressMonitor != null && progressMonitor.isCanceled()) {
          break;
        }
        Node loopNode=nodeList.get(i);
        if (loopNode != null) {
          String absoluteXPathFromNode=nodeRetriever.getAbsoluteXPathFromNode(loopNode);
          if (!alreadyProcessedXPath.contains(absoluteXPathFromNode)) {
            TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(absoluteXPathFromNode);
            if (treeItemFromAbsoluteXPath != null) {
              addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
              alreadyProcessedXPath.add(absoluteXPathFromNode);
            }
          }
        }
      }
    }
  }
 else {
    String fullPath=""String_Node_Str"";
    if (!expressionIsAbsolute) {
      if (loopXpathNodes.size() > 0) {
        fullPath=loopXpathNodes.get(0) + ""String_Node_Str"";
      }
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=relativeXpath;
      }
    }
 else {
      fullPath=relativeXpath;
    }
    TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(fullPath);
    if (treeItemFromAbsoluteXPath != null && !alreadyProcessedXPath.contains(fullPath)) {
      addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
      alreadyProcessedXPath.add(fullPath);
    }
  }
}","/** 
 * DOC amaumont Comment method ""addLinks"".
 * @param relativeXpath
 * @param tableItemTarget
 * @param progressMonitor
 * @throws XPathExpressionException
 */
private void createFieldLinks(final String relativeXpathPrm,final TableItem tableItemTarget,IProgressMonitor progressMonitor,SchemaTarget schemaTarget){
  if (relativeXpathPrm == null || relativeXpathPrm.trim().length() == 0) {
    return;
  }
  boolean expressionIsAbsolute=false;
  if (relativeXpathPrm.trim().startsWith(""String_Node_Str"")) {
    expressionIsAbsolute=true;
  }
  String relativeXpath=relativeXpathPrm;
  Set<String> alreadyProcessedXPath=new HashSet<String>();
  if (!isXSDFile) {
    List<Node> nodeList=null;
    if (expressionIsAbsolute) {
      String expression=null;
      if (relativeXpath == null) {
        relativeXpath=""String_Node_Str"";
      }
      expression=relativeXpath;
      try {
        nodeList=this.nodeRetriever.retrieveNodeList(expression);
      }
 catch (      XPathExpressionException e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      if (allLoopNodes.size() > 0) {
        Node loopNode=allLoopNodes.get(0);
        try {
          if (relativeXpath == null) {
            relativeXpath=""String_Node_Str"";
          }
          final String resault=relativeXpath;
          nodeList=this.nodeRetriever.retrieveNodeListFromNode(relativeXpath,loopNode);
          if (nodeList == null) {
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + resault + ""String_Node_Str"");
              }
            }
);
            progressMonitor.setCanceled(true);
            XmlExtractorFieldModel schemaModel=this.fieldsTableEditorView.getModel();
            schemaModel.remove(schemaTarget);
            fieldsTableEditorView.getTable().redraw();
          }
 else           if (nodeList.size() == 0) {
            String currentLoopXPath=getCurrentLoopXPath();
            String expression=currentLoopXPath + ""String_Node_Str"" + relativeXpath;
            nodeList=this.nodeRetriever.retrieveNodeList(expression);
          }
        }
 catch (        XPathExpressionException e) {
          e.printStackTrace();
        }
      }
    }
    if (nodeList != null) {
      int length=nodeList.size();
      for (int i=0; i < length; i++) {
        if (progressMonitor != null && progressMonitor.isCanceled()) {
          break;
        }
        Node loopNode=nodeList.get(i);
        if (loopNode != null) {
          String absoluteXPathFromNode=nodeRetriever.getAbsoluteXPathFromNode(loopNode);
          if (!alreadyProcessedXPath.contains(absoluteXPathFromNode)) {
            TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(absoluteXPathFromNode);
            if (treeItemFromAbsoluteXPath != null) {
              addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
              alreadyProcessedXPath.add(absoluteXPathFromNode);
            }
          }
        }
      }
    }
  }
 else {
    String fullPath=""String_Node_Str"";
    if (!expressionIsAbsolute) {
      if (loopXpathNodes.size() > 0) {
        fullPath=loopXpathNodes.get(0) + ""String_Node_Str"";
      }
      if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
        relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
      }
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=relativeXpath;
      }
    }
 else {
      fullPath=relativeXpath;
    }
    TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(fullPath);
    if (treeItemFromAbsoluteXPath != null && !alreadyProcessedXPath.contains(fullPath)) {
      addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
      alreadyProcessedXPath.add(fullPath);
    }
  }
}",0.9791927231381466
130016,"/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    for (    String xpath : lookupInfo.keySet()) {
      Object lookupValue=lookupInfo.get(xpath);
      org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
      xpathObjectForLookup.setNamespaceURIs(nsMapping);
      Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
      String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
      String pattern=xpathToPatternMap.get(xpath);
      String javaType=xpathToTypeMap.get(xpath);
      Object value=ParserUtils.parse(text,javaType,pattern);
      if (lookupValue == null && value == null) {
      }
 else {
        if (value == null || !value.equals(lookupValue)) {
          reject=true;
          break;
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}","/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    if (!""String_Node_Str"".equals(matchingMode)) {
      for (      String xpath : lookupInfo.keySet()) {
        Object lookupValue=lookupInfo.get(xpath);
        org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
        xpathObjectForLookup.setNamespaceURIs(nsMapping);
        Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
        String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
        String pattern=xpathToPatternMap.get(xpath);
        String javaType=xpathToTypeMap.get(xpath);
        Object value=ParserUtils.parse(text,javaType,pattern);
        if (lookupValue == null && value == null) {
        }
 else {
          if (value == null || !value.equals(lookupValue)) {
            reject=true;
            break;
          }
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}",0.9766071099650028
130017,"public DocumentLookupCache(String matchingMode){
  if (""String_Node_Str"".equals(matchingMode)) {
    cache=new UniqueLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode)) {
    cache=new FirstLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode)) {
    cache=new AllMatchLookupCache();
  }
}","public DocumentLookupCache(String matchingMode){
  if (""String_Node_Str"".equals(matchingMode)) {
    cache=new UniqueLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode)) {
    cache=new FirstLookupCache();
  }
 else   if (""String_Node_Str"".equals(matchingMode) || ""String_Node_Str"".equals(matchingMode)) {
    cache=new AllMatchLookupCache();
  }
}",0.9391304347826088
130018,"private TableNode transferTableToTableNode(MetadataTable tableItem,TableNode parentNode){
  TableNode existTableNode=null;
  if (tableItem instanceof TdTable) {
    TdTable td=(TdTable)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(td.getLabel());
    existTableNode.setItemType(td.getTableType());
    existTableNode.setTable(td);
    existTableNode.setParent(parentNode);
    parentNode.addChild(existTableNode);
  }
 else   if (tableItem instanceof TdView) {
    TdView tv=(TdView)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(tv.getLabel());
    existTableNode.setItemType(tv.getTableType());
    existTableNode.setView(tv);
    existTableNode.setParent(parentNode);
    parentNode.addChild(existTableNode);
  }
  return existTableNode;
}","private TableNode transferTableToTableNode(MetadataTable tableItem,TableNode parentNode){
  TableNode existTableNode=null;
  if (tableItem instanceof TdTable) {
    TdTable td=(TdTable)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(td.getLabel());
    existTableNode.setItemType(td.getTableType());
    existTableNode.setTable(td);
    if (parentNode != null) {
      existTableNode.setParent(parentNode);
      parentNode.addChild(existTableNode);
    }
  }
 else   if (tableItem instanceof TdView) {
    TdView tv=(TdView)tableItem;
    existTableNode=new TableNode();
    existTableNode.setType(TableNode.TABLE);
    existTableNode.setValue(tv.getLabel());
    existTableNode.setItemType(tv.getTableType());
    existTableNode.setView(tv);
    if (parentNode != null) {
      existTableNode.setParent(parentNode);
      parentNode.addChild(existTableNode);
    }
  }
  return existTableNode;
}",0.9569429494079656
130019,"/** 
 * ldong Comment method ""getExistCheckedTable"".
 * @param tableNode
 * @return
 */
private TableNode getExistCheckedTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    EList<ModelElement> ownedElement=null;
    List<TableNode> tableNodes=getTableNodeInfo();
    TableNode parent=tableNode.getParent();
    int type=parent.getType();
    if (type == TableNode.CATALOG) {
      for (      TableNode catalogNode : tableNodes) {
        if (catalogNode.getType() == type) {
          if (!catalogNode.getValue().equals(parent.getValue())) {
            if (catalogNode.getCatalog() != null) {
              ownedElement=catalogNode.getCatalog().getOwnedElement();
              for (              ModelElement m : ownedElement) {
                if (m instanceof MetadataTable) {
                  String label=((MetadataTable)m).getLabel();
                  if (label.equals(tableNode.getValue())) {
                    if (((CatalogImpl)m.eContainer()).getName().equals(catalogNode.getValue())) {
                      return transferTableToTableNode((MetadataTable)m,catalogNode);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
 else     if (type == TableNode.SCHEMA) {
      TableNode p=parent.getParent();
      if (p == null) {
        for (        TableNode schemaNode : tableNodes) {
          if (schemaNode.getType() == type) {
            if (!schemaNode.getValue().equals(parent.getValue())) {
              if (schemaNode.getSchema() != null) {
                ownedElement=schemaNode.getSchema().getOwnedElement();
                for (                ModelElement m : ownedElement) {
                  if (m instanceof MetadataTable) {
                    String label=((MetadataTable)m).getLabel();
                    if (label.equals(tableNode.getValue())) {
                      if (((SchemaImpl)m.eContainer()).getName().equals(schemaNode.getValue())) {
                        return transferTableToTableNode((MetadataTable)m,schemaNode);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
 else {
        for (        TableNode catalogNode : tableNodes) {
          if (catalogNode.getType() == TableNode.CATALOG) {
            if (catalogNode.getCatalog() != null) {
              if (catalogNode.getValue().equals(p.getValue())) {
                List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                for (                Schema schs : schemas) {
                  ownedElement=schs.getOwnedElement();
                  for (                  ModelElement m : ownedElement) {
                    if (m instanceof MetadataTable) {
                      String label=((MetadataTable)m).getLabel();
                      if (label.equals(tableNode.getValue())) {
                        List<TableNode> schemaNodeList=catalogNode.getChildren();
                        for (                        TableNode parentSchema : schemaNodeList) {
                          if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue()) && !parentSchema.getValue().equals(parent.getValue())) {
                            return transferTableToTableNode((MetadataTable)m,parentSchema);
                          }
                        }
                      }
                    }
                  }
                }
              }
 else {
                List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                for (                Schema schs : schemas) {
                  ownedElement=schs.getOwnedElement();
                  for (                  ModelElement m : ownedElement) {
                    if (m instanceof MetadataTable) {
                      String label=((MetadataTable)m).getLabel();
                      if (label.equals(tableNode.getValue())) {
                        List<TableNode> schemaNodeList=catalogNode.getChildren();
                        for (                        TableNode parentSchema : schemaNodeList) {
                          if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue())) {
                            return transferTableToTableNode((MetadataTable)m,parentSchema);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return null;
}","/** 
 * ldong Comment method ""getExistCheckedTable"".
 * @param tableNode
 * @return
 */
private TableNode getExistCheckedTable(TableNode tableNode){
  if (tableNode != null && tableNode.getType() == TableNode.TABLE) {
    EList<ModelElement> ownedElement=null;
    List<TableNode> tableNodes=getTableNodeInfo();
    TableNode parent=tableNode.getParent();
    if (parent != null) {
      int type=parent.getType();
      if (type == TableNode.CATALOG) {
        for (        TableNode catalogNode : tableNodes) {
          if (catalogNode.getType() == type) {
            if (!catalogNode.getValue().equals(parent.getValue())) {
              if (catalogNode.getCatalog() != null) {
                ownedElement=catalogNode.getCatalog().getOwnedElement();
                for (                ModelElement m : ownedElement) {
                  if (m instanceof MetadataTable) {
                    String label=((MetadataTable)m).getLabel();
                    if (label.equals(tableNode.getValue())) {
                      if (((CatalogImpl)m.eContainer()).getName().equals(catalogNode.getValue())) {
                        return transferTableToTableNode((MetadataTable)m,catalogNode);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
 else       if (type == TableNode.SCHEMA) {
        TableNode p=parent.getParent();
        if (p == null) {
          for (          TableNode schemaNode : tableNodes) {
            if (schemaNode.getType() == type) {
              if (!schemaNode.getValue().equals(parent.getValue())) {
                if (schemaNode.getSchema() != null) {
                  ownedElement=schemaNode.getSchema().getOwnedElement();
                  for (                  ModelElement m : ownedElement) {
                    if (m instanceof MetadataTable) {
                      String label=((MetadataTable)m).getLabel();
                      if (label.equals(tableNode.getValue())) {
                        if (((SchemaImpl)m.eContainer()).getName().equals(schemaNode.getValue())) {
                          return transferTableToTableNode((MetadataTable)m,schemaNode);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
 else {
          for (          TableNode catalogNode : tableNodes) {
            if (catalogNode.getType() == TableNode.CATALOG) {
              if (catalogNode.getCatalog() != null) {
                if (catalogNode.getValue().equals(p.getValue())) {
                  List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                  for (                  Schema schs : schemas) {
                    ownedElement=schs.getOwnedElement();
                    for (                    ModelElement m : ownedElement) {
                      if (m instanceof MetadataTable) {
                        String label=((MetadataTable)m).getLabel();
                        if (label.equals(tableNode.getValue())) {
                          List<TableNode> schemaNodeList=catalogNode.getChildren();
                          for (                          TableNode parentSchema : schemaNodeList) {
                            if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue()) && !parentSchema.getValue().equals(parent.getValue())) {
                              return transferTableToTableNode((MetadataTable)m,parentSchema);
                            }
                          }
                        }
                      }
                    }
                  }
                }
 else {
                  List<Schema> schemas=CatalogHelper.getSchemas(catalogNode.getCatalog());
                  for (                  Schema schs : schemas) {
                    ownedElement=schs.getOwnedElement();
                    for (                    ModelElement m : ownedElement) {
                      if (m instanceof MetadataTable) {
                        String label=((MetadataTable)m).getLabel();
                        if (label.equals(tableNode.getValue())) {
                          List<TableNode> schemaNodeList=catalogNode.getChildren();
                          for (                          TableNode parentSchema : schemaNodeList) {
                            if (((SchemaImpl)m.eContainer()).getName().equals(parentSchema.getValue())) {
                              return transferTableToTableNode((MetadataTable)m,parentSchema);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 else {
    for (    Object obj : ConnectionHelper.getTables(getConnection())) {
      if (obj == null) {
        continue;
      }
      MetadataTable table=(MetadataTable)obj;
      if (table.getLabel().equals(tableNode.getValue())) {
        return transferTableToTableNode(table,null);
      }
    }
  }
  return null;
}",0.942663378545006
130020,"protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
}","protected void deleteTable(TableNode tableItem){
  Collection<MetadataTable> tables=new ArrayList<MetadataTable>();
  Iterator<MetadataTable> iterate=ConnectionHelper.getTables(getConnection()).iterator();
  while (iterate.hasNext()) {
    MetadataTable metadata=iterate.next();
    if (metadata != null && metadata.getLabel().equals(tableItem.getValue())) {
      tables.add(metadata);
    }
  }
  TableNode parent=tableItem.getParent();
  String catalog=""String_Node_Str"";
  String schema=""String_Node_Str"";
  if (parent != null) {
    if (parent.getType() == TableNode.CATALOG) {
      catalog=parent.getValue();
    }
 else     if (parent.getType() == TableNode.SCHEMA) {
      schema=parent.getValue();
      TableNode catalogNode=parent.getParent();
      if (catalogNode != null) {
        catalog=catalogNode.getValue();
      }
    }
  }
  boolean isAccess=EDatabaseTypeName.ACCESS.getDisplayName().equals(metadataconnection.getDbType());
  if (isAccess) {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,getConnection().getName(),getConnection(),tables);
  }
 else {
    ProjectNodeHelper.removeTablesFromCurrentCatalogOrSchema(catalog,schema,getConnection(),tables);
  }
}",0.8572756857275686
130021,"/** 
 * DOC amaumont Comment method ""init"".
 * @param tree
 * @param tables
 * @param backgroundRefresher
 */
public void init(Tree tree,Table[] tables,IBackgroundRefresher backgroundRefresher){
  this.display=tree.getDisplay();
  this.backgroundRefresher=backgroundRefresher;
  for (  Table table : tables) {
    new LinkableTable(this,backgroundRefresher,table,(BgDrawableComposite)this,false);
  }
  new LinkableTree(this,backgroundRefresher,tree,(BgDrawableComposite)this,true);
  this.tables=Arrays.asList(tables);
  this.tree=tree;
}","public void init(Tree tree,Table[] tables,IControlsLinker controlsLinker,IBackgroundRefresher backgroundRefresher){
  this.display=tree.getDisplay();
  this.backgroundRefresher=backgroundRefresher;
  for (  Table table : tables) {
    new LinkableTable(controlsLinker,backgroundRefresher,table,(BgDrawableComposite)this,false);
  }
  linkableTree=new LinkableTree(controlsLinker,backgroundRefresher,tree,(BgDrawableComposite)this,true);
  this.tables=Arrays.asList(tables);
  this.tree=tree;
}",0.8158914728682171
130022,"@Override protected void addFields(){
  mainSashFormComposite=new SashForm(this,SWT.HORIZONTAL | SWT.SMOOTH);
  mainSashFormComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  mainSashFormComposite.setBackgroundMode(SWT.INHERIT_FORCE);
  addSchemaViewer(mainSashFormComposite,300,100);
  addXmlFileViewer(mainSashFormComposite,400,100);
  mainSashFormComposite.setWeights(new int[]{40,60});
  linker=new XmlFileSchema2TreeLinker(mainSashFormComposite);
  linker.setForm(this);
  linker.init(schemaViewer.getTable(),xmlViewer);
}","@Override protected void addFields(){
  mainSashFormComposite=new SashForm(this,SWT.HORIZONTAL | SWT.SMOOTH);
  mainSashFormComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  mainSashFormComposite.setBackgroundMode(SWT.INHERIT_FORCE);
  addSchemaViewer(mainSashFormComposite,300,100);
  addXmlFileViewer(mainSashFormComposite,400,100);
  mainSashFormComposite.setWeights(new int[]{40,60});
  linker=new XmlFileSchema2TreeLinker(mainSashFormComposite);
  linker.setForm(this);
  linker.init(schemaViewer.getTable(),xmlViewer);
  XmlTree2SchemaLinker oppositeLinker=new XmlTree2SchemaLinker(mainSashFormComposite);
  oppositeLinker.setConnection(getConnection());
  oppositeLinker.setDelegateLinker(linker);
  oppositeLinker.init(xmlViewer,schemaViewer);
}",0.8255188316679477
130023,"public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    if (linker.linkSize() == 0) {
      linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
    }
  }
}","public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}",0.9599236641221374
130024,"public void onXPathValueChanged(Widget widget){
  linksManager.removeLinksFromDataItem2(widget.getData());
  createLinks();
}","public void onXPathValueChanged(Widget widget){
  if (widget != null) {
    linksManager.removeLinksFromDataItem2(widget.getData());
  }
  createLinks();
}",0.8928571428571429
130025,"/** 
 * DOC chuang PatternCalendar constructor comment.
 * @param parent
 * @param calendar
 * @param pattern2
 */
public PatternCalendar(Composite parent,int style,String pattern,Calendar calendar){
  super(parent,style);
  final Composite composite=new Composite(this,SWT.BORDER);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginWidth=5;
  gridLayout.marginHeight=5;
  composite.setLayout(gridLayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  composite.setBackground(getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label patternLabel=new Label(composite,SWT.NONE);
  patternLabel.setText(Messages.getString(""String_Node_Str""));
  patternLabel.setBackground(patternLabel.getParent().getBackground());
  patternText=new Text(composite,SWT.BORDER);
  patternText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      onPatternChange();
    }
  }
);
  JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
  ContentProposalAdapterExtended contentProposalAdapter=ProposalUtils.getCommonProposal(patternText,proposalProvider);
  contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
  Label exampleLabel=new Label(composite,SWT.NONE);
  exampleLabel.setText(Messages.getString(""String_Node_Str""));
  exampleLabel.setBackground(patternLabel.getParent().getBackground());
  exampleValue=new Label(composite,SWT.NONE);
  exampleValue.setText(""String_Node_Str"");
  exampleValue.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (calendar != null) {
    setCalendar(calendar);
  }
  if (pattern != null) {
    patternText.setText(""String_Node_Str"" + pattern + ""String_Node_Str"");
  }
 else {
    patternText.setText(Messages.getString(""String_Node_Str""));
  }
}","/** 
 * DOC chuang PatternCalendar constructor comment.
 * @param parent
 * @param calendar
 * @param pattern2
 */
public PatternCalendar(Composite parent,int style,String pattern,Calendar calendar){
  super(parent,style);
  final Composite composite=new Composite(this,SWT.BORDER);
  final GridLayout gridLayout=new GridLayout();
  gridLayout.numColumns=2;
  gridLayout.marginWidth=5;
  gridLayout.marginHeight=5;
  composite.setLayout(gridLayout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  composite.setBackground(getDisplay().getSystemColor(SWT.COLOR_WHITE));
  Label patternLabel=new Label(composite,SWT.NONE);
  patternLabel.setText(Messages.getString(""String_Node_Str""));
  patternLabel.setBackground(patternLabel.getParent().getBackground());
  patternText=new Text(composite,SWT.BORDER);
  patternText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  patternText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      onPatternChange();
    }
  }
);
  JavaSimpleDateFormatProposalProvider proposalProvider=new JavaSimpleDateFormatProposalProvider();
  ContentProposalAdapterExtended contentProposalAdapter=ProposalUtils.getCommonProposal(patternText,proposalProvider);
  contentProposalAdapter.setFilterStyle(ContentProposalAdapterExtended.FILTER_NONE);
  contentProposalAdapter.setProposalAcceptanceStyle(ContentProposalAdapterExtended.PROPOSAL_INSERT);
  Label exampleLabel=new Label(composite,SWT.NONE);
  exampleLabel.setText(Messages.getString(""String_Node_Str""));
  exampleLabel.setBackground(patternLabel.getParent().getBackground());
  exampleValue=new Label(composite,SWT.NONE);
  exampleValue.setText(""String_Node_Str"");
  exampleValue.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (calendar != null) {
    setCalendar(calendar);
  }
  if (pattern != null) {
    patternText.setText(""String_Node_Str"" + pattern + ""String_Node_Str"");
  }
 else {
    patternText.setText(defaultFormat);
  }
}",0.9875062468765616
130026,"/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      if ((istRunJob && elemparameter.getName().equals(""String_Node_Str"")) || (!elemparameter.isShow(copyElementParameterList) && (!elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()))) || elemparameter.getCategory().equals(EComponentCategory.MAIN)|| elemparameter.getCategory().equals(EComponentCategory.VIEW)|| elemparameter.getName().equals(IHTMLDocConstants.REPOSITORY)|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(EParameterFieldType.ENCODING_TYPE.getName())) {
        continue;
      }
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.setText(value);
    }
  }
}","/** 
 * Generates the element parameters information of component.
 * @param istMap
 * @param istRunJob
 * @param parametersElement
 * @param elementParameterList
 * @param node
 */
private void generateComponentElementParamInfo(boolean istRunJob,Element parametersElement,List elementParameterList,INode node){
  List<IElementParameter> copyElementParameterList=new ArrayList(elementParameterList);
  if (elementParameterList != null && elementParameterList.size() != 0) {
    for (int j=0; j < elementParameterList.size(); j++) {
      IElementParameter elemparameter=(IElementParameter)elementParameterList.get(j);
      if ((istRunJob && elemparameter.getName().equals(""String_Node_Str"")) || (!elemparameter.isShow(copyElementParameterList) && (!elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()))) || elemparameter.getCategory().equals(EComponentCategory.MAIN)|| elemparameter.getCategory().equals(EComponentCategory.VIEW)|| elemparameter.getName().equals(IHTMLDocConstants.REPOSITORY)|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(""String_Node_Str"")|| elemparameter.getName().equals(EParameterFieldType.ENCODING_TYPE.getName())) {
        continue;
      }
      Object eleObj=elemparameter.getValue();
      String value=""String_Node_Str"";
      if (eleObj != null) {
        value=eleObj.toString();
      }
      if (elemparameter.getName().equals(EParameterFieldType.PROPERTY_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForPropertyType=getRepositoryValueForPropertyType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForPropertyType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForPropertyType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.SCHEMA_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForSchemaType=getRepositoryValueForSchemaType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForSchemaType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForSchemaType;
      }
 else       if (elemparameter.getName().equals(EParameterFieldType.QUERYSTORE_TYPE.getName()) && value.equals(IHTMLDocConstants.REPOSITORY)) {
        String repositoryValueForQueryStoreType=getRepositoryValueForQueryStoreType(copyElementParameterList,""String_Node_Str"");
        value=repositoryValueForQueryStoreType == null ? IHTMLDocConstants.REPOSITORY_BUILT_IN : value.toString().toLowerCase() + ""String_Node_Str"" + repositoryValueForQueryStoreType;
      }
 else       if (elemparameter.getRepositoryValue() != null && elemparameter.getRepositoryValue().contains(""String_Node_Str"") && ProjectManager.getInstance().getCurrentProject().getEmfProject().isHidePassword() && !ContextParameterUtils.containContextVariables((String)elemparameter.getValue())) {
        value=""String_Node_Str"";
      }
      Element columnElement=parametersElement.addElement(""String_Node_Str"");
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(elemparameter.getDisplayName()));
      if (value.equalsIgnoreCase(IHTMLDocConstants.REPOSITORY_BUILT_IN)) {
        value=IHTMLDocConstants.DISPLAY_BUILT_IN;
      }
      columnElement.addAttribute(""String_Node_Str"",HTMLDocUtils.checkString(value));
    }
  }
}",0.9910396814108946
130027,"@Override protected String getBeanString(org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
  return bean.getName();
}","@Override protected String getBeanString(org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
  return bean.getLabel();
}",0.982078853046595
130028,"public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (originalField != null && originalField.getNodeValue() != null) {
        metadataColumn.setName(originalField.getNodeValue());
        UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueStringGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getName(),listColumns){
          @Override protected String getBeanString(          org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
            return bean.getName();
          }
        }
;
        metadataColumn.setName(uniqueStringGenerator.getUniqueString());
      }
 else {
        metadataColumn.setName(label.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}","public static MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn> loadMetadataColumnsAndDbmsIdFromFile(final File file) throws ParserConfigurationException, SAXException, IOException {
  final List<org.talend.core.model.metadata.builder.connection.MetadataColumn> listColumns=new ArrayList<org.talend.core.model.metadata.builder.connection.MetadataColumn>();
  String dbmsId=null;
  if (file != null) {
    final DocumentBuilderFactory fabrique=DocumentBuilderFactory.newInstance();
    final Bundle b=Platform.getBundle(CORE_RUNTIME_PLUGIN_ID);
    final URL url=FileLocator.toFileURL(FileLocator.find(b,new Path(SCHEMA_XSD),null));
    final File schema=new File(url.getPath());
    fabrique.setAttribute(SCHEMA_LANGUAGE,""String_Node_Str"");
    fabrique.setAttribute(SCHEMA_VALIDATOR,schema);
    fabrique.setValidating(true);
    final DocumentBuilder analyseur=fabrique.newDocumentBuilder();
    analyseur.setErrorHandler(new ErrorHandler(){
      public void error(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void fatalError(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
      public void warning(      final SAXParseException exception) throws SAXException {
        throw exception;
      }
    }
);
    final Document document=analyseur.parse(file);
    dbmsId=document.getDocumentElement().getAttribute(""String_Node_Str"");
    final NodeList nodes=document.getElementsByTagName(""String_Node_Str"");
    Set<String> columnsAlreadyAdded=new HashSet<String>();
    for (int i=0; i < nodes.getLength(); i++) {
      final org.talend.core.model.metadata.builder.connection.MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      final Node nodetoParse=nodes.item(i);
      final NamedNodeMap nodeMap=nodetoParse.getAttributes();
      final Node label=nodeMap.getNamedItem(""String_Node_Str"");
      final Node key=nodeMap.getNamedItem(""String_Node_Str"");
      final Node type=nodeMap.getNamedItem(""String_Node_Str"");
      final Node sourceType=nodeMap.getNamedItem(""String_Node_Str"");
      final Node length=nodeMap.getNamedItem(""String_Node_Str"");
      final Node precision=nodeMap.getNamedItem(""String_Node_Str"");
      final Node nullable=nodeMap.getNamedItem(""String_Node_Str"");
      final Node defaultValue=nodeMap.getNamedItem(""String_Node_Str"");
      final Node comment=nodeMap.getNamedItem(""String_Node_Str"");
      final Node pattern=nodeMap.getNamedItem(""String_Node_Str"");
      final Node originalField=nodeMap.getNamedItem(""String_Node_Str"");
      String nodeValue=MetadataToolHelper.validateColumnName(label.getNodeValue(),0);
      metadataColumn.setLabel(nodeValue);
      UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn> uniqueLabelGenerator=new UniqueStringGenerator<org.talend.core.model.metadata.builder.connection.MetadataColumn>(metadataColumn.getLabel(),listColumns){
        @Override protected String getBeanString(        org.talend.core.model.metadata.builder.connection.MetadataColumn bean){
          return bean.getLabel();
        }
      }
;
      metadataColumn.setLabel(uniqueLabelGenerator.getUniqueString());
      metadataColumn.setKey(Boolean.parseBoolean(key.getNodeValue()));
      metadataColumn.setTalendType(getNewTalendType(type.getNodeValue()));
      if (sourceType != null) {
        metadataColumn.setSourceType(sourceType.getNodeValue());
      }
      if (length.getNodeValue() != null) {
        try {
          metadataColumn.setLength(Integer.parseInt(length.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setLength(0);
        }
      }
 else {
        metadataColumn.setLength(0);
      }
      if (precision.getNodeValue() != null) {
        try {
          metadataColumn.setPrecision(Integer.parseInt(precision.getNodeValue()));
        }
 catch (        final NumberFormatException e) {
          metadataColumn.setPrecision(0);
        }
      }
 else {
        metadataColumn.setPrecision(0);
      }
      metadataColumn.setNullable(Boolean.parseBoolean(nullable.getNodeValue()));
      metadataColumn.setDefaultValue(defaultValue.getNodeValue());
      metadataColumn.setComment(comment.getNodeValue());
      if (pattern.getNodeValue() != null) {
        metadataColumn.setPattern(pattern.getNodeValue());
      }
      if (!columnsAlreadyAdded.contains(metadataColumn.getLabel())) {
        listColumns.add(metadataColumn);
        columnsAlreadyAdded.add(metadataColumn.getLabel());
      }
    }
  }
  return new MetadataColumnsAndDbmsId<org.talend.core.model.metadata.builder.connection.MetadataColumn>(listColumns,dbmsId);
}",0.9291889266634288
130029,"/** 
 * This method is to override the rule list.
 * @param dbType SupportDBUrlType.dbkey
 * @param catalog
 * @param schema
 * @param table
 * @param ruleParam
 */
public void overrideRuleList(String dbType,String catalog,String schema,String table,IElementParameter ruleParam);","/** 
 * This method is to override the rule list.
 * @param dbType (value = SupportDBUrlType.dbkey)
 * @param catalog
 * @param schema
 * @param table
 * @param ruleParam
 */
public void overrideRuleList(IElementParameter dbType,IElementParameter catalog,IElementParameter schema,IElementParameter table,IElementParameter ruleParam);",0.8333333333333334
130030,"/** 
 * DOC amaumont Comment method ""init"".
 * @param tree
 * @param tables
 * @param backgroundRefresher
 */
public void init(Tree tree,Table[] tables,IBackgroundRefresher backgroundRefresher){
  this.display=tree.getDisplay();
  this.backgroundRefresher=backgroundRefresher;
  for (  Table table : tables) {
    new LinkableTable(this,backgroundRefresher,table,(BgDrawableComposite)this,false);
  }
  new LinkableTree(this,backgroundRefresher,tree,(BgDrawableComposite)this,true);
  this.tables=Arrays.asList(tables);
  this.tree=tree;
}","public void init(Tree tree,Table[] tables,IControlsLinker controlsLinker,IBackgroundRefresher backgroundRefresher){
  this.display=tree.getDisplay();
  this.backgroundRefresher=backgroundRefresher;
  for (  Table table : tables) {
    new LinkableTable(controlsLinker,backgroundRefresher,table,(BgDrawableComposite)this,false);
  }
  linkableTree=new LinkableTree(controlsLinker,backgroundRefresher,tree,(BgDrawableComposite)this,true);
  this.tables=Arrays.asList(tables);
  this.tree=tree;
}",0.8158914728682171
130031,"@Override protected void addFields(){
  mainSashFormComposite=new SashForm(this,SWT.HORIZONTAL | SWT.SMOOTH);
  mainSashFormComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  mainSashFormComposite.setBackgroundMode(SWT.INHERIT_FORCE);
  addSchemaViewer(mainSashFormComposite,300,100);
  addXmlFileViewer(mainSashFormComposite,400,100);
  mainSashFormComposite.setWeights(new int[]{40,60});
  linker=new XmlFileSchema2TreeLinker(mainSashFormComposite);
  linker.setForm(this);
  linker.init(schemaViewer.getTable(),xmlViewer);
}","@Override protected void addFields(){
  mainSashFormComposite=new SashForm(this,SWT.HORIZONTAL | SWT.SMOOTH);
  mainSashFormComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  mainSashFormComposite.setBackgroundMode(SWT.INHERIT_FORCE);
  addSchemaViewer(mainSashFormComposite,300,100);
  addXmlFileViewer(mainSashFormComposite,400,100);
  mainSashFormComposite.setWeights(new int[]{40,60});
  linker=new XmlFileSchema2TreeLinker(mainSashFormComposite);
  linker.setForm(this);
  linker.init(schemaViewer.getTable(),xmlViewer);
  XmlTree2SchemaLinker oppositeLinker=new XmlTree2SchemaLinker(mainSashFormComposite);
  oppositeLinker.setConnection(getConnection());
  oppositeLinker.setDelegateLinker(linker);
  oppositeLinker.init(xmlViewer,schemaViewer);
}",0.8255188316679477
130032,"public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    if (linker.linkSize() == 0) {
      linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
    }
  }
}","public void redrawLinkers(){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  if (schemaViewer.getTable().getItems().length <= maxColumnsNumber + 1) {
    linker.removeAllLinks();
    TreeItem root=xmlViewer.getTree().getItem(0);
    TableItem[] tableItems=schemaViewer.getTable().getItems();
    initLinker(root,tableItems);
    linker.updateLinksStyleAndControlsSelection(xmlViewer.getTree(),true);
  }
}",0.9599236641221374
130033,"public void onXPathValueChanged(Widget widget){
  linksManager.removeLinksFromDataItem2(widget.getData());
  createLinks();
}","public void onXPathValueChanged(Widget widget){
  if (widget != null) {
    linksManager.removeLinksFromDataItem2(widget.getData());
  }
  createLinks();
}",0.8928571428571429
130034,"private void updateTable(Property property){
  if (property == null) {
    return;
  }
  Connection connection=null;
  Item item=property.getItem();
  if (item instanceof ConnectionItem) {
    ConnectionItem cItem=(ConnectionItem)item;
    connection=cItem.getConnection();
  }
  if (connection == null) {
    return;
  }
  Set tables=null;
  if (table.eContainer() instanceof SAPFunctionUnit) {
    SAPFunctionUnit funUnit=(SAPFunctionUnit)table.eContainer();
    tables=ConnectionHelper.getTables(connection,funUnit);
  }
 else {
    tables=ConnectionHelper.getTables(connection);
  }
  if (tables != null) {
    Iterator iterator=tables.iterator();
    while (iterator.hasNext()) {
      Object obj=iterator.next();
      if (obj instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
        org.talend.core.model.metadata.builder.connection.MetadataTable repObj=(org.talend.core.model.metadata.builder.connection.MetadataTable)obj;
        if (table != null && table.getLabel() != null && table.getLabel().equals(repObj.getLabel()) && table.eContainer().equals(repObj.eContainer())) {
          table=repObj;
          break;
        }
      }
    }
  }
}","private void updateTable(Property property){
  if (property == null) {
    return;
  }
  Connection connection=null;
  Item item=property.getItem();
  if (item instanceof ConnectionItem) {
    ConnectionItem cItem=(ConnectionItem)item;
    connection=cItem.getConnection();
  }
  if (connection == null) {
    return;
  }
  Set tables=null;
  if (table.eContainer() instanceof SAPFunctionUnit) {
    SAPFunctionUnit funUnit=(SAPFunctionUnit)table.eContainer();
    tables=ConnectionHelper.getTables(connection,funUnit);
  }
 else {
    tables=ConnectionHelper.getTables(connection);
  }
  if (tables != null) {
    Iterator iterator=tables.iterator();
    while (iterator.hasNext()) {
      Object obj=iterator.next();
      if (obj instanceof org.talend.core.model.metadata.builder.connection.MetadataTable) {
        org.talend.core.model.metadata.builder.connection.MetadataTable repObj=(org.talend.core.model.metadata.builder.connection.MetadataTable)obj;
        boolean sameParent=false;
        if (table.eContainer() instanceof ModelElement && repObj.eContainer() instanceof ModelElement) {
          ModelElement tableP=(ModelElement)table.eContainer();
          ModelElement repObjP=(ModelElement)repObj.eContainer();
          if (tableP.getName() != null && tableP.getName().equals(repObjP.getName())) {
            sameParent=true;
          }
        }
        if (table != null && table.getLabel() != null && table.getLabel().equals(repObj.getLabel()) && sameParent) {
          table=repObj;
          break;
        }
      }
    }
  }
}",0.8181154127100073
130035,"private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreePopulator treePopulator=new TreePopulator(new Tree(composite,SWT.None));
  XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
  XSDSchema xsdSchema=updateXSDSchema(file);
  ATreeNode treeRootNode=wizard.getTreeRootNode();
  if (treeRootNode == null)   return;
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      columns.add(metadataColumn);
    }
  }
}","private void prepareColumnsFromXSD(String file,List<MetadataColumn> columns,List<SchemaTarget> schemaTarget){
  Composite composite=Form.startNewGridLayout(this,2,false,SWT.CENTER,SWT.CENTER);
  composite.setVisible(false);
  TreePopulator treePopulator=new TreePopulator(new Tree(composite,SWT.None));
  XmlFileWizard wizard=((XmlFileWizard)getPage().getWizard());
  XSDSchema xsdSchema=updateXSDSchema(file);
  ATreeNode treeRootNode=wizard.getTreeRootNode();
  if (treeRootNode == null)   return;
  treePopulator.populateTree(xsdSchema,treeRootNode,null);
  MappingTypeRetriever retriever=MetadataTalendType.getMappingTypeRetriever(""String_Node_Str"");
  for (  SchemaTarget schema : schemaTarget) {
    String relativeXpath=schema.getRelativeXPathQuery();
    if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
      relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
    }
    String fullPath=schema.getSchema().getAbsoluteXPathQuery();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection(),true);
      fullPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fullPath));
    }
    String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
    if (relatedSplitedPaths.length > 1) {
      int pathsToRemove=relatedSplitedPaths.length - 1;
      String[] fullPathSplited=fullPath.split(""String_Node_Str"");
      fullPath=""String_Node_Str"";
      for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
        fullPath+=""String_Node_Str"" + fullPathSplited[i];
      }
      fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
    }
 else {
      fullPath+=""String_Node_Str"" + relativeXpath;
    }
    TreeItem treeItem=treePopulator.getTreeItem(fullPath);
    if (treeItem != null) {
      ATreeNode curNode=(ATreeNode)treeItem.getData();
      MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
      metadataColumn.setLabel(tableEditorView.getMetadataEditor().getNextGeneratedColumnName(schema.getTagName()));
      if (curNode == null || retriever == null) {
        metadataColumn.setTalendType(MetadataTalendType.getDefaultTalendType());
      }
 else {
        metadataColumn.setTalendType(retriever.getDefaultSelectedTalendType(""String_Node_Str"" + curNode.getOriginalDataType()));
      }
      columns.add(metadataColumn);
    }
  }
}",0.9631940112289458
130036,"/** 
 * DOC amaumont Comment method ""addLinks"".
 * @param relativeXpath
 * @param tableItemTarget
 * @param progressMonitor
 * @throws XPathExpressionException
 */
private void createFieldLinks(final String relativeXpathPrm,final TableItem tableItemTarget,IProgressMonitor progressMonitor,SchemaTarget schemaTarget){
  if (relativeXpathPrm == null || relativeXpathPrm.trim().length() == 0) {
    return;
  }
  boolean expressionIsAbsolute=false;
  if (relativeXpathPrm.trim().startsWith(""String_Node_Str"")) {
    expressionIsAbsolute=true;
  }
  String relativeXpath=relativeXpathPrm;
  Set<String> alreadyProcessedXPath=new HashSet<String>();
  if (!isXSDFile) {
    List<Node> nodeList=null;
    if (expressionIsAbsolute) {
      String expression=null;
      if (relativeXpath == null) {
        relativeXpath=""String_Node_Str"";
      }
      expression=relativeXpath;
      try {
        nodeList=this.nodeRetriever.retrieveNodeList(expression);
      }
 catch (      XPathExpressionException e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      if (allLoopNodes.size() > 0) {
        Node loopNode=allLoopNodes.get(0);
        try {
          if (relativeXpath == null) {
            relativeXpath=""String_Node_Str"";
          }
          final String resault=relativeXpath;
          nodeList=this.nodeRetriever.retrieveNodeListFromNode(relativeXpath,loopNode);
          if (nodeList == null) {
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + resault + ""String_Node_Str"");
              }
            }
);
            progressMonitor.setCanceled(true);
            XmlExtractorFieldModel schemaModel=this.fieldsTableEditorView.getModel();
            schemaModel.remove(schemaTarget);
            fieldsTableEditorView.getTable().redraw();
          }
 else           if (nodeList.size() == 0) {
            String currentLoopXPath=getCurrentLoopXPath();
            String expression=currentLoopXPath + ""String_Node_Str"" + relativeXpath;
            nodeList=this.nodeRetriever.retrieveNodeList(expression);
          }
        }
 catch (        XPathExpressionException e) {
          e.printStackTrace();
        }
      }
    }
    if (nodeList != null) {
      int length=nodeList.size();
      for (int i=0; i < length; i++) {
        if (progressMonitor != null && progressMonitor.isCanceled()) {
          break;
        }
        Node loopNode=nodeList.get(i);
        if (loopNode != null) {
          String absoluteXPathFromNode=nodeRetriever.getAbsoluteXPathFromNode(loopNode);
          if (!alreadyProcessedXPath.contains(absoluteXPathFromNode)) {
            TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(absoluteXPathFromNode);
            if (treeItemFromAbsoluteXPath != null) {
              addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
              alreadyProcessedXPath.add(absoluteXPathFromNode);
            }
          }
        }
      }
    }
  }
 else {
    String fullPath=""String_Node_Str"";
    if (!expressionIsAbsolute) {
      if (loopXpathNodes.size() > 0) {
        fullPath=loopXpathNodes.get(0) + ""String_Node_Str"";
      }
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=relativeXpath;
      }
    }
 else {
      fullPath=relativeXpath;
    }
    TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(fullPath);
    if (treeItemFromAbsoluteXPath != null && !alreadyProcessedXPath.contains(fullPath)) {
      addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
      alreadyProcessedXPath.add(fullPath);
    }
  }
}","/** 
 * DOC amaumont Comment method ""addLinks"".
 * @param relativeXpath
 * @param tableItemTarget
 * @param progressMonitor
 * @throws XPathExpressionException
 */
private void createFieldLinks(final String relativeXpathPrm,final TableItem tableItemTarget,IProgressMonitor progressMonitor,SchemaTarget schemaTarget){
  if (relativeXpathPrm == null || relativeXpathPrm.trim().length() == 0) {
    return;
  }
  boolean expressionIsAbsolute=false;
  if (relativeXpathPrm.trim().startsWith(""String_Node_Str"")) {
    expressionIsAbsolute=true;
  }
  String relativeXpath=relativeXpathPrm;
  Set<String> alreadyProcessedXPath=new HashSet<String>();
  if (!isXSDFile) {
    List<Node> nodeList=null;
    if (expressionIsAbsolute) {
      String expression=null;
      if (relativeXpath == null) {
        relativeXpath=""String_Node_Str"";
      }
      expression=relativeXpath;
      try {
        nodeList=this.nodeRetriever.retrieveNodeList(expression);
      }
 catch (      XPathExpressionException e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      if (allLoopNodes.size() > 0) {
        Node loopNode=allLoopNodes.get(0);
        try {
          if (relativeXpath == null) {
            relativeXpath=""String_Node_Str"";
          }
          final String resault=relativeXpath;
          nodeList=this.nodeRetriever.retrieveNodeListFromNode(relativeXpath,loopNode);
          if (nodeList == null) {
            Display.getDefault().asyncExec(new Runnable(){
              public void run(){
                MessageDialog.openError(null,""String_Node_Str"",""String_Node_Str"" + resault + ""String_Node_Str"");
              }
            }
);
            progressMonitor.setCanceled(true);
            XmlExtractorFieldModel schemaModel=this.fieldsTableEditorView.getModel();
            schemaModel.remove(schemaTarget);
            fieldsTableEditorView.getTable().redraw();
          }
 else           if (nodeList.size() == 0) {
            String currentLoopXPath=getCurrentLoopXPath();
            String expression=currentLoopXPath + ""String_Node_Str"" + relativeXpath;
            nodeList=this.nodeRetriever.retrieveNodeList(expression);
          }
        }
 catch (        XPathExpressionException e) {
          e.printStackTrace();
        }
      }
    }
    if (nodeList != null) {
      int length=nodeList.size();
      for (int i=0; i < length; i++) {
        if (progressMonitor != null && progressMonitor.isCanceled()) {
          break;
        }
        Node loopNode=nodeList.get(i);
        if (loopNode != null) {
          String absoluteXPathFromNode=nodeRetriever.getAbsoluteXPathFromNode(loopNode);
          if (!alreadyProcessedXPath.contains(absoluteXPathFromNode)) {
            TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(absoluteXPathFromNode);
            if (treeItemFromAbsoluteXPath != null) {
              addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
              alreadyProcessedXPath.add(absoluteXPathFromNode);
            }
          }
        }
      }
    }
  }
 else {
    String fullPath=""String_Node_Str"";
    if (!expressionIsAbsolute) {
      if (loopXpathNodes.size() > 0) {
        fullPath=loopXpathNodes.get(0) + ""String_Node_Str"";
      }
      if (relativeXpath != null && relativeXpath.endsWith(""String_Node_Str"")) {
        relativeXpath=relativeXpath.substring(0,relativeXpath.lastIndexOf(""String_Node_Str""));
      }
      String[] relatedSplitedPaths=relativeXpath.split(""String_Node_Str"");
      if (relatedSplitedPaths.length > 1) {
        int pathsToRemove=relatedSplitedPaths.length - 1;
        String[] fullPathSplited=fullPath.split(""String_Node_Str"");
        fullPath=""String_Node_Str"";
        for (int i=1; i < (fullPathSplited.length - pathsToRemove); i++) {
          fullPath+=""String_Node_Str"" + fullPathSplited[i];
        }
        fullPath+=""String_Node_Str"" + relatedSplitedPaths[pathsToRemove];
      }
 else {
        fullPath+=relativeXpath;
      }
    }
 else {
      fullPath=relativeXpath;
    }
    TreeItem treeItemFromAbsoluteXPath=treePopulator.getTreeItem(fullPath);
    if (treeItemFromAbsoluteXPath != null && !alreadyProcessedXPath.contains(fullPath)) {
      addFieldLink(treeItemFromAbsoluteXPath,treeItemFromAbsoluteXPath.getData(),tableItemTarget.getParent(),(SchemaTarget)tableItemTarget.getData());
      alreadyProcessedXPath.add(fullPath);
    }
  }
}",0.9791927231381466
130037,"public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path.lastSegment().equalsIgnoreCase(label)) {
    return;
  }
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}","public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}",0.9436152570480928
130038,"public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  if (path.lastSegment().equalsIgnoreCase(label)) {
    return;
  }
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}","public void renameFolder(ERepositoryObjectType type,IPath path,String label) throws PersistenceException {
  this.repositoryFactoryFromProvider.renameFolder(type,path,label);
  if (type == ERepositoryObjectType.PROCESS) {
    fireRepositoryPropertyChange(ERepositoryActionName.FOLDER_RENAME.getName(),path,label);
  }
  if (type == ERepositoryObjectType.JOBLET) {
    fireRepositoryPropertyChange(ERepositoryActionName.JOBLET_FOLDER_RENAME.getName(),path,label);
  }
  this.repositoryFactoryFromProvider.updateItemsPath(type,path.removeLastSegments(1).append(label));
}",0.9436152570480928
130039,"private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item);
  itemResource.getContents().clear();
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
    itemResource.getContents().addAll(screenshots);
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
    itemResource.getContents().addAll(screenshots);
  }
  return itemResource;
}","private Resource saveScreenshots(Item item){
  Resource itemResource=xmiResourceManager.getScreenshotResource(item);
  itemResource.getContents().clear();
  EMap screenshots=null;
  if (item instanceof ProcessItem) {
    screenshots=((ProcessItem)item).getProcess().getScreenshots();
    itemResource.getContents().addAll(EcoreUtil.copyAll(screenshots));
  }
 else   if (item instanceof JobletProcessItem) {
    screenshots=((JobletProcessItem)item).getJobletProcess().getScreenshots();
    itemResource.getContents().addAll(screenshots);
  }
  return itemResource;
}",0.9632286995515696
130040,"protected void initMetadataTable(List<FOXTreeNode> list,EList columnList){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  for (  FOXTreeNode node : list) {
    if (columnList.size() > maxColumnsNumber) {
      return;
    }
    MetadataEmfTableEditor editor=new MetadataEmfTableEditor();
    if (node instanceof Element) {
      String label=node.getLabel();
      if (!node.hasChildren() && label != null && !label.equals(""String_Node_Str"")) {
        String dataType=node.getDataType();
        MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
        metadataColumn.setLabel(editor.getNextGeneratedColumnName(label,columnList));
        metadataColumn.setOriginalField(label);
        metadataColumn.setTalendType(dataType);
        columnList.add(metadataColumn);
        node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metadataColumn));
      }
    }
    if (node instanceof Attribute) {
      String label=node.getLabel();
      if (label != null && !label.equals(""String_Node_Str"")) {
        String dataType=node.getDataType();
        MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
        metadataColumn.setLabel(editor.getNextGeneratedColumnName(label,columnList));
        metadataColumn.setOriginalField(label);
        metadataColumn.setTalendType(dataType);
        columnList.add(metadataColumn);
        node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metadataColumn));
      }
    }
    if (node.hasChildren()) {
      List<FOXTreeNode> children=node.getChildren();
      initMetadataTable(children,columnList);
    }
  }
}","protected void initMetadataTable(List<FOXTreeNode> list,EList columnList){
  int maxColumnsNumber=CoreRuntimePlugin.getInstance().getPreferenceStore().getInt(ITalendCorePrefConstants.MAXIMUM_AMOUNT_OF_COLUMNS_FOR_XML);
  for (  FOXTreeNode node : list) {
    if (columnList.size() > maxColumnsNumber) {
      return;
    }
    MetadataEmfTableEditor editor=new MetadataEmfTableEditor();
    if (node instanceof Element) {
      String label=node.getLabel();
      if (!node.hasChildren() && label != null && !label.equals(""String_Node_Str"")) {
        String columnName=label;
        if (columnName.contains(""String_Node_Str"")) {
          columnName=columnName.split(""String_Node_Str"")[1];
        }
        columnName=columnName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        String dataType=node.getDataType();
        MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
        metadataColumn.setLabel(editor.getNextGeneratedColumnName(columnName,columnList));
        metadataColumn.setOriginalField(label);
        metadataColumn.setTalendType(dataType);
        columnList.add(metadataColumn);
        node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metadataColumn));
      }
    }
    if (node instanceof Attribute) {
      String label=node.getLabel();
      if (label != null && !label.equals(""String_Node_Str"")) {
        String columnName=label;
        if (columnName.contains(""String_Node_Str"")) {
          columnName=columnName.split(""String_Node_Str"")[1];
        }
        columnName=columnName.replaceAll(""String_Node_Str"",""String_Node_Str"");
        String dataType=node.getDataType();
        MetadataColumn metadataColumn=ConnectionFactory.eINSTANCE.createMetadataColumn();
        metadataColumn.setLabel(editor.getNextGeneratedColumnName(columnName,columnList));
        metadataColumn.setOriginalField(label);
        metadataColumn.setTalendType(dataType);
        columnList.add(metadataColumn);
        node.setColumn(ConvertionHelper.convertToIMetaDataColumn(metadataColumn));
      }
    }
    if (node.hasChildren()) {
      List<FOXTreeNode> children=node.getChildren();
      initMetadataTable(children,columnList);
    }
  }
}",0.8719512195121951
130041,"public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionLoopWithXPathEditorView loopTableEditorView=linker.getLoopTableEditorView();
  if (loopTableEditorView.isReadOnly()) {
    return;
  }
  ExtendedTableModel<XmlXPathLoopDescriptor> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  XmlXPathLoopDescriptor pathLoopDescriptor=extendedTableModel.getBeansList().get(0);
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,pathLoopDescriptor,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithXPathEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<SchemaTarget> list=new ArrayList<SchemaTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0) {
        String loopPath=loopXpathNodes.get(0);
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        SchemaTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=extractColumnName(extractTagName(relativeXPath));
        newTargetEntry.setTagName(name);
        list.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}","public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Control control=dropTarget.getControl();
  XmlToSchemaDraggedData draggedData=XPathTransfer.getInstance().getDraggedData();
  List<TransferableXPathEntry> transferableEntryList=draggedData.getTransferableEntryList();
  ExtractionLoopWithXPathEditorView loopTableEditorView=linker.getLoopTableEditorView();
  if (loopTableEditorView.isReadOnly()) {
    return;
  }
  ExtendedTableModel<XmlXPathLoopDescriptor> extendedTableModel=loopTableEditorView.getExtendedTableModel();
  XmlXPathLoopDescriptor pathLoopDescriptor=extendedTableModel.getBeansList().get(0);
  if (linker.isLoopTable((Table)control)) {
    if (transferableEntryList.size() > 0) {
      String absoluteXPath=transferableEntryList.get(0).getAbsoluteXPath();
      TableViewerCreatorColumn xpathColumn=linker.getLoopTableEditorView().getXPathColumn();
      Display display=linker.getTree().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getTree().getShell().setCursor(cursor);
      loopTableEditorView.getTableViewerCreator().setBeanValue(xpathColumn,pathLoopDescriptor,absoluteXPath,true);
      linker.getTree().getShell().setCursor(null);
    }
  }
 else {
    ExtractionFieldsWithXPathEditorView tableEditorView=linker.getFieldsTableEditorView();
    Integer startInsertAtThisIndex=TableUtils.getItemIndexWhereInsertFromPosition(fieldsTable,new Point(event.x,event.y));
    List<SchemaTarget> fullSchemaTargetList=new ArrayList<SchemaTarget>(tableEditorView.getModel().getBeansList());
    List<SchemaTarget> list=new ArrayList<SchemaTarget>(transferableEntryList.size());
    for (    TransferableXPathEntry entry : transferableEntryList) {
      ArrayList<String> loopXpathNodes=linker.getLoopXpathNodes();
      if (loopXpathNodes.size() > 0) {
        String loopPath=loopXpathNodes.get(0);
        String relativeXPath=XPathPopulationUtil.populateColumnPath(loopPath,entry.getAbsoluteXPath());
        if (relativeXPath.startsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(1);
        }
        if (relativeXPath.endsWith(""String_Node_Str"")) {
          relativeXPath=relativeXPath.substring(0,relativeXPath.length() - 1);
        }
        if (relativeXPath.trim().equals(""String_Node_Str"")) {
          relativeXPath=""String_Node_Str"";
        }
        SchemaTarget newTargetEntry=linker.getNewSchemaTargetEntry(relativeXPath);
        String name=extractColumnName(extractTagName(relativeXPath),fullSchemaTargetList);
        newTargetEntry.setTagName(name);
        list.add(newTargetEntry);
        fullSchemaTargetList.add(newTargetEntry);
      }
    }
    tableEditorView.getTableViewerCreator().getTableViewer().refresh();
    loopTable.deselectAll();
    fieldsTable.deselectAll();
    linker.getTree().deselectAll();
    if (list.size() > 0) {
      ExtendedTableAddCommand addCommand=new ExtendedTableAddCommand(tableEditorView.getModel(),list,startInsertAtThisIndex);
      tableEditorView.getExtendedTableViewer().executeCommand(addCommand);
    }
  }
  linker.updateLinksStyleAndControlsSelection(control,true);
}",0.9692532942898976
130042,"/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @return
 */
public static String extractTagName(String currentExpr){
  String[] exprs=currentExpr.split(""String_Node_Str"");
  if (exprs.length > 0) {
    currentExpr=exprs[exprs.length - 1];
  }
  return currentExpr;
}","/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @return
 */
public static String extractTagName(String currentExpr){
  String[] exprs=currentExpr.split(""String_Node_Str"");
  if (exprs.length > 0) {
    currentExpr=exprs[exprs.length - 1];
  }
  if (currentExpr.contains(""String_Node_Str"")) {
    currentExpr=currentExpr.split(""String_Node_Str"")[1];
  }
  return currentExpr;
}",0.8132992327365729
130043,"/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @return
 */
public static String extractColumnName(String currentExpr){
  return currentExpr.replaceAll(""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Extract last word of an expression, the last character must be a letter or a number.
 * @param currentExpr
 * @param fullSchemaTargetList
 * @return
 */
public static String extractColumnName(String currentExpr,List<SchemaTarget> fullSchemaTargetList){
  String columnName=currentExpr.replaceAll(""String_Node_Str"",""String_Node_Str"");
  UniqueStringGenerator<SchemaTarget> uniqueStringGenerator=new UniqueStringGenerator<SchemaTarget>(columnName,fullSchemaTargetList){
    @Override protected String getBeanString(    SchemaTarget bean){
      return bean.getTagName();
    }
  }
;
  columnName=uniqueStringGenerator.getUniqueString();
  return columnName;
}",0.5485961123110151
130044,"public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length == 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    if (!CommonsPlugin.isHeadless() && PlatformUI.isWorkbenchRunning()) {
      MessageDialog.openError(Display.getCurrent().getActiveShell(),""String_Node_Str"",exception.getMessage());
    }
  }
  return null;
}","public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length == 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    if (!CommonsPlugin.isHeadless() && PlatformUI.isWorkbenchRunning()) {
      MessageDialog.openError(Display.getCurrent().getActiveShell(),""String_Node_Str"",exception.getMessage());
    }
  }
  return null;
}",0.9834450137958218
130045,"/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      if (!CommonsPlugin.isHeadless()) {
        coreService.initializeTemplates();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      try {
        TokenCollectorFactory.getFactory().priorCollect();
      }
 catch (      Exception e) {
        throw new PersistenceException(e);
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}","/** 
 * DOC tang Comment method ""logOnProject"".
 * @param project
 * @param monitorWrap
 * @throws PersistenceException
 * @throws LoginException
 */
public void logOnProject(Project project,IProgressMonitor monitor) throws LoginException, PersistenceException {
  try {
    TimeMeasure.display=CommonsPlugin.isDebugMode();
    TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
    TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
    TimeMeasure.begin(""String_Node_Str"");
    try {
      System.getProperties().put(""String_Node_Str"",Boolean.FALSE.toString());
      fullLogonFinished=false;
      SubMonitor subMonitor=SubMonitor.convert(monitor,MAX_TASKS);
      SubMonitor currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      LanguageManager.reset();
      getRepositoryContext().setProject(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.beforeLogon(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(""String_Node_Str"",1);
      executeMigrations(project,true,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      this.repositoryFactoryFromProvider.logOnProject(project);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      emptyTempFolder(project);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.componentsReset();
      coreService.initializeComponents(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      executeMigrations(project,false,currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      coreService.deleteAllJobs(false);
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      try {
        coreService.syncAllRoutines();
        coreService.syncAllBeans();
      }
 catch (      SystemException e1) {
      }
      if (PluginChecker.isRulesPluginLoaded()) {
        coreService.syncAllRules();
      }
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      currentMonitor=subMonitor.newChild(1,SubMonitor.SUPPRESS_NONE);
      currentMonitor.beginTask(Messages.getString(""String_Node_Str""),1);
      coreService.syncLibraries(currentMonitor);
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      if (PluginChecker.isSAPWizardPluginLoaded()) {
        coreService.synchronizeSapLib();
      }
      if (!CommonsPlugin.isHeadless()) {
        coreService.initializeTemplates();
      }
      coreService.resetUniservLibraries();
      TimeMeasure.step(""String_Node_Str"",""String_Node_Str"");
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceDescription description=workspace.getDescription();
      description.setAutoBuilding(false);
      try {
        workspace.setDescription(description);
      }
 catch (      CoreException e) {
      }
      coreService.createStatsLogAndImplicitParamter(project);
      coreService.synchronizeMapptingXML();
      try {
        TokenCollectorFactory.getFactory().priorCollect();
      }
 catch (      Exception e) {
        throw new PersistenceException(e);
      }
      fullLogonFinished=true;
    }
  finally {
      TimeMeasure.end(""String_Node_Str"");
      TimeMeasure.display=false;
      TimeMeasure.displaySteps=false;
      TimeMeasure.measureActive=false;
    }
    String str[]=new String[]{getRepositoryContext().getUser() + ""String_Node_Str"",projectManager.getCurrentProject() + ""String_Node_Str""};
    log.info(Messages.getString(""String_Node_Str"",str));
  }
 catch (  LoginException e) {
    logOffProject();
    throw e;
  }
catch (  PersistenceException e) {
    logOffProject();
    throw e;
  }
catch (  RuntimeException e) {
    logOffProject();
    throw e;
  }
}",0.991162474507138
130046,"/** 
 * self definition:escape char ,for example -->'\\'
 */
public static String addEscapeChars(String padding_chars,char escapeChar){
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < padding_chars.length(); i++) {
    char c=padding_chars.charAt(i);
    if (!(Character.isLetterOrDigit(c) || c == '_')) {
      sb.append(escapeChar);
      sb.append(c);
    }
 else {
      sb.append(c);
    }
  }
  return sb.toString();
}","/** 
 * self definition:escape char ,for example -->'\\'
 */
public static String addEscapeChars(String padding_chars,char escapeChar){
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < padding_chars.length(); i++) {
    char c=padding_chars.charAt(i);
    if (!(Character.isLetterOrDigit(c) || c == '_' || Character.isWhitespace(c))) {
      sb.append(escapeChar);
      sb.append(c);
    }
 else {
      sb.append(c);
    }
  }
  return sb.toString();
}",0.967670011148272
130047,"/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(String itemName,TreeSelection selectionInClipboard){
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getRepositoryObjectType()),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    try {
      Item testNewItem=createNewItem();
      if (testNewItem != null) {
        if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
          return Messages.getString(""String_Node_Str"");
        }
      }
    }
 catch (    PersistenceException e) {
      return Messages.getString(""String_Node_Str"");
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}","/** 
 * DOC YeXiaowei Comment method ""isValid"".
 * @param itemName
 * @param selectionInClipboard
 * @return null means valid, other means some error exist
 */
private String validJobName(String itemName,TreeSelection selectionInClipboard){
  if (!isValid(itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
  IRepositoryService service=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
  IProxyRepositoryFactory repositoryFactory=service.getProxyRepositoryFactory();
  if (itemName.length() == 0) {
    return Messages.getString(""String_Node_Str"");
  }
 else   if (!Pattern.matches(RepositoryConstants.getPattern(((RepositoryNode)selectionInClipboard.toArray()[0]).getObject().getRepositoryObjectType()),itemName)) {
    return Messages.getString(""String_Node_Str"");
  }
 else {
    try {
      Item testNewItem=createNewItem();
      if (testNewItem != null) {
        if (!repositoryFactory.isNameAvailable(testNewItem,itemName)) {
          return Messages.getString(""String_Node_Str"");
        }
      }
    }
 catch (    PersistenceException e) {
      return Messages.getString(""String_Node_Str"");
    }
    if (isKeyword(itemName)) {
      return Messages.getString(""String_Node_Str"");
    }
  }
  return null;
}",0.9668552950687146
130048,"public String isValid(String newText){
  return validJobName(newText,selectionInClipboard);
}","public static boolean isValid(String str){
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  return pattern.matcher(str).matches();
}",0.4137931034482758
130049,"public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length == 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    if (!CommonsPlugin.isHeadless() && PlatformUI.isWorkbenchRunning()) {
      MessageDialog.openError(Display.getCurrent().getActiveShell(),""String_Node_Str"",exception.getMessage());
    }
  }
  return null;
}","public Property getProperty(){
  exception=null;
  try {
    IProxyRepositoryFactory factory=null;
    if (!GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      return null;
    }
    factory=((IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class)).getProxyRepositoryFactory();
    IRepositoryViewObject object=factory.getLastVersion(id);
    if (object == null) {
      throw new PersistenceException(""String_Node_Str"" + label + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
    this.customImage=null;
    Property property=object.getProperty();
    this.id=property.getId();
    this.author=property.getAuthor();
    this.creationDate=property.getCreationDate();
    this.description=property.getDescription();
    this.modificationDate=property.getModificationDate();
    this.label=property.getLabel();
    this.purpose=property.getPurpose();
    this.statusCode=property.getStatusCode();
    this.version=property.getVersion();
    this.type=ERepositoryObjectType.getItemType(property.getItem());
    this.deleted=property.getItem().getState().isDeleted();
    this.path=property.getItem().getState().getPath();
    repositoryStatus=factory.getStatus(property.getItem());
    InformationLevel informationLevel=property.getMaxInformationLevel();
    informationStatus=factory.getStatus(informationLevel);
    if (type == ERepositoryObjectType.JOBLET) {
      JobletProcessItem item=(JobletProcessItem)property.getItem();
      if (item.getIcon() != null && item.getIcon().getInnerContent() != null && item.getIcon().getInnerContent().length == 0) {
        customImage=getJobletCustomIcon(property);
        customImage=ImageUtils.propertyLabelScale(property.getId(),customImage,ICON_SIZE.ICON_16);
      }
    }
 else     if (type == ERepositoryObjectType.DOCUMENTATION) {
      this.customImage=ImageProvider.getImage(RepositoryImageProvider.getIcon(type));
      Item item=property.getItem();
      if (item instanceof DocumentationItem) {
        customImage=coreSerivce.getImageWithDocExt(((DocumentationItem)item).getExtension());
      }
 else       if (item instanceof LinkDocumentationItem) {
        customImage=coreSerivce.getImageWithSpecial(customImage).createImage();
      }
    }
    return property;
  }
 catch (  PersistenceException e) {
    exception=e;
    if (!CommonsPlugin.isHeadless() && PlatformUI.isWorkbenchRunning()) {
      MessageDialog.openError(Display.getCurrent().getActiveShell(),""String_Node_Str"",exception.getMessage());
    }
  }
  return null;
}",0.9670542635658916
130050,"/** 
 * this creates or updates the org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY by adding or changing the command with value, except if value is null then the command shall be removed.
 * @param command the command to add or update or remove (if value is null) (usually starts with a -)
 * @param value the value of the command or null if the command is to removed.
 */
static public void updateOrCreateExitDataPropertyWithCommand(String command,String value){
  StringBuffer result=new StringBuffer(512);
  String currentProperty=System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY);
  if (currentProperty != null) {
    Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
    Matcher restartMatcher=commandPattern.matcher(currentProperty);
    if (value != null) {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + value+ EclipseCommandLine.NEW_LINE);
      }
 else {
        int indexOfVmArgs=currentProperty.indexOf(CMD_VMARGS);
        if (indexOfVmArgs >= 0) {
          currentProperty=currentProperty.substring(0,indexOfVmArgs) + command + EclipseCommandLine.NEW_LINE+ value+ EclipseCommandLine.NEW_LINE+ currentProperty.substring(indexOfVmArgs);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY + ""String_Node_Str""+ EclipseCommandLine.CMD_VMARGS);
        }
      }
    }
 else {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(""String_Node_Str"");
      }
    }
    result.append(currentProperty);
  }
 else {
    String property=System.getProperty(EclipseCommandLine.PROP_VM);
    result.append(property);
    result.append(EclipseCommandLine.NEW_LINE);
    String vmargs=System.getProperty(EclipseCommandLine.PROP_VMARGS);
    if (vmargs != null) {
      result.append(vmargs);
    }
    property=System.getProperty(EclipseCommandLine.PROP_COMMANDS);
    if (property == null) {
      if (value != null) {
        result.append(command);
        result.append(EclipseCommandLine.NEW_LINE);
        result.append(value);
        result.append(EclipseCommandLine.NEW_LINE);
      }
    }
 else {
      Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
      Matcher restartMatcher=commandPattern.matcher(property);
      if (value != null) {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + value+ EclipseCommandLine.NEW_LINE);
        }
 else {
          result.append(command);
          result.append(EclipseCommandLine.NEW_LINE);
          result.append(value);
          result.append(EclipseCommandLine.NEW_LINE);
        }
      }
 else {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(EclipseCommandLine.NEW_LINE);
        }
      }
      result.append(property);
    }
    if (vmargs != null) {
      result.append(EclipseCommandLine.CMD_VMARGS);
      result.append(EclipseCommandLine.NEW_LINE);
      result.append(vmargs);
    }
  }
  System.setProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY,result.toString());
}","/** 
 * this creates or updates the org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY by adding or changing the command with value, except if value is null then the command shall be removed.
 * @param command the command to add or update or remove (if value is null) (usually starts with a -)
 * @param value the value of the command,if the value is null,will only update the commmand
 * @param delete the flag used to trigger delete or insert/update the command
 */
static public void updateOrCreateExitDataPropertyWithCommand(String command,String value,boolean delete){
  boolean isValueNull=false;
  if (value == null || ""String_Node_Str"".equals(value)) {
    isValueNull=true;
  }
  StringBuffer result=new StringBuffer(512);
  String currentProperty=System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY);
  if (currentProperty != null) {
    Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
    Matcher restartMatcher=commandPattern.matcher(currentProperty);
    if (delete) {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(""String_Node_Str"");
      }
    }
 else {
      if (restartMatcher.find()) {
        currentProperty=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
      }
 else {
        int indexOfVmArgs=currentProperty.indexOf(CMD_VMARGS);
        if (indexOfVmArgs >= 0) {
          currentProperty=currentProperty.substring(0,indexOfVmArgs) + command + EclipseCommandLine.NEW_LINE+ (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE)+ currentProperty.substring(indexOfVmArgs);
        }
 else {
          throw new IllegalArgumentException(""String_Node_Str"" + org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY + ""String_Node_Str""+ EclipseCommandLine.CMD_VMARGS);
        }
      }
    }
    result.append(currentProperty);
  }
 else {
    String property=System.getProperty(EclipseCommandLine.PROP_VM);
    result.append(property);
    result.append(EclipseCommandLine.NEW_LINE);
    String vmargs=System.getProperty(EclipseCommandLine.PROP_VMARGS);
    if (vmargs != null) {
      result.append(vmargs);
    }
    property=System.getProperty(EclipseCommandLine.PROP_COMMANDS);
    if (property == null) {
      if (value != null) {
        result.append(command);
        result.append(EclipseCommandLine.NEW_LINE);
        if (!isValueNull) {
          result.append(value);
          result.append(EclipseCommandLine.NEW_LINE);
        }
      }
    }
 else {
      Pattern commandPattern=Pattern.compile(command + ""String_Node_Str"");
      Matcher restartMatcher=commandPattern.matcher(property);
      if (delete) {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(EclipseCommandLine.NEW_LINE);
        }
      }
 else {
        if (restartMatcher.find()) {
          property=restartMatcher.replaceAll(command + EclipseCommandLine.NEW_LINE + (isValueNull ? ""String_Node_Str"" : value + EclipseCommandLine.NEW_LINE));
        }
 else {
          result.append(command);
          result.append(EclipseCommandLine.NEW_LINE);
          if (!isValueNull) {
            result.append(value);
            result.append(EclipseCommandLine.NEW_LINE);
          }
        }
      }
      result.append(property);
    }
    if (vmargs != null) {
      result.append(EclipseCommandLine.CMD_VMARGS);
      result.append(EclipseCommandLine.NEW_LINE);
      result.append(vmargs);
    }
  }
  System.setProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY,result.toString());
}",0.8293387236500145
130051,"public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.setRCPMode();
    }
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"") && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RESTART_COMMAND,""String_Node_Str"");
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RESTART_COMMAND,""String_Node_Str"");
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null);
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}","public Object start(IApplicationContext context) throws Exception {
  Display display=PlatformUI.createDisplay();
  try {
    Shell shell=new Shell(display,SWT.ON_TOP);
    boolean inuse=!acquireWorkspaceLock(shell);
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IRepositoryService.class)) {
      IRepositoryService repositoryService=(IRepositoryService)GlobalServiceRegister.getDefault().getService(IRepositoryService.class);
      repositoryService.setRCPMode();
    }
    if (!ArrayUtils.contains(Platform.getApplicationArgs(),""String_Node_Str"") && !Boolean.parseBoolean(System.getProperty(""String_Node_Str""))) {
      openLicenseAndRegister(shell);
    }
    IMigrationToolService service=(IMigrationToolService)GlobalServiceRegister.getDefault().getService(IMigrationToolService.class);
    service.executeWorspaceTasks();
    boolean logUserOnProject=logUserOnProject(display.getActiveShell(),inuse);
    try {
      if (!logUserOnProject) {
        context.applicationRunning();
        return EXIT_OK;
      }
    }
  finally {
      if (shell != null) {
        shell.dispose();
      }
    }
    if (System.getProperty(org.eclipse.equinox.app.IApplicationContext.EXIT_DATA_PROPERTY) != null) {
      return IApplication.EXIT_RELAUNCH;
    }
    boolean afterUpdate=false;
    if (GlobalServiceRegister.getDefault().isServiceRegistered(ICoreTisService.class)) {
      ICoreTisService tisService=(ICoreTisService)GlobalServiceRegister.getDefault().getService(ICoreTisService.class);
      afterUpdate=tisService.needRestartAfterUpdate();
    }
    if (LoginComposite.isRestart) {
      if (afterUpdate) {
        EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,""String_Node_Str"",false);
        return IApplication.EXIT_RELAUNCH;
      }
      return IApplication.EXIT_RESTART;
    }
    Tweaklets.setDefault(WorkbenchImplementation.KEY,new Workbench3xImplementation4CoolBar());
    int returnCode=PlatformUI.createAndRunWorkbench(display,new ApplicationWorkbenchAdvisor());
    if (returnCode == PlatformUI.RETURN_RESTART) {
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_RELOAD_COMMAND,""String_Node_Str"",false);
      EclipseCommandLine.updateOrCreateExitDataPropertyWithCommand(EclipseCommandLine.TALEND_PROJECT_TYPE_COMMAND,null,true);
      return IApplication.EXIT_RELAUNCH;
    }
 else {
      return IApplication.EXIT_OK;
    }
  }
  finally {
    display.dispose();
    releaseWorkspaceLock();
  }
}",0.9930734217296656
130052,"/** 
 * lookup document action
 * @param doc
 * @param loopPath
 * @param lookupInfo
 * @param xpathOfResults
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    for (    String xpath : lookupInfo.keySet()) {
      Object lookupValue=lookupInfo.get(xpath);
      org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
      xpathObjectForLookup.setNamespaceURIs(nsMapping);
      Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
      if (lookupValue == null && nodeOfLookup == null) {
      }
 else       if (!xpathObjectForLookup.valueOf(node).equals(lookupValue)) {
        reject=true;
        break;
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}","/** 
 * lookup document action
 * @param loopXPath
 * @param lookupInfo
 * @param xpathOfResults
 * @param nsMapping
 * @param xpathToTypeMap
 * @param xpathToPatternMap
 * @param matchingMode
 * @return
 */
public List<Map<String,Object>> LookupDocument(String loopXPath,Map<String,Object> lookupInfo,Map<String,String> xpathOfResults,Map<String,String> nsMapping,Map<String,String> xpathToTypeMap,Map<String,String> xpathToPatternMap,String matchingMode){
  if (doc == null || lookupInfo == null) {
    return null;
  }
  List<Map<String,Object>> result=new ArrayList<Map<String,Object>>();
  org.dom4j.Document document=doc.getDocument();
  org.dom4j.XPath xpathObjectForDoc=document.createXPath(loopXPath);
  xpathObjectForDoc.setNamespaceURIs(nsMapping);
  java.util.List<org.dom4j.tree.AbstractNode> nodes=xpathObjectForDoc.selectNodes(document);
  for (  org.dom4j.tree.AbstractNode node : nodes) {
    boolean reject=false;
    for (    String xpath : lookupInfo.keySet()) {
      Object lookupValue=lookupInfo.get(xpath);
      org.dom4j.XPath xpathObjectForLookup=node.createXPath(xpath);
      xpathObjectForLookup.setNamespaceURIs(nsMapping);
      Node nodeOfLookup=xpathObjectForLookup.selectSingleNode(node);
      String text=(nodeOfLookup == null ? null : xpathObjectForLookup.valueOf(node));
      String pattern=xpathToPatternMap.get(xpath);
      String javaType=xpathToTypeMap.get(xpath);
      Object value=ParserUtils.parse(text,javaType,pattern);
      if (lookupValue == null && value == null) {
      }
 else {
        if (value == null || !value.equals(lookupValue)) {
          reject=true;
          break;
        }
      }
    }
    if (reject) {
    }
 else {
      Map<String,Object> row=new HashMap<String,Object>();
      for (      Object key : xpathOfResults.keySet()) {
        String xpath=xpathOfResults.get(key);
        org.dom4j.XPath xpathObjectForResult=node.createXPath(xpath);
        xpathObjectForResult.setNamespaceURIs(nsMapping);
        Node nodeOfResult=xpathObjectForResult.selectSingleNode(node);
        row.put(key.toString(),nodeOfResult == null ? null : nodeOfResult.getText());
      }
      result.add(row);
    }
  }
  int count=result.size();
  if (count > 0) {
    if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(count - 1));
      return singleResult;
    }
 else     if (""String_Node_Str"".equals(matchingMode)) {
      List<Map<String,Object>> singleResult=new ArrayList<Map<String,Object>>();
      singleResult.add(result.get(0));
      return singleResult;
    }
  }
  return result;
}",0.8610210696920584
130053,"public static Object parse(String text,String javaType,String pattern){
  if (""String_Node_Str"".equals(javaType)) {
    return text;
  }
  if (text == null || text.length() == 0) {
    boolean isPrimitiveType=primitiveType.contains(javaType);
    if (!isPrimitiveType) {
      return null;
    }
 else {
      text=primitiveTypeToDefaultValueMap.get(javaType);
    }
  }
 else {
    if (""String_Node_Str"".equals(javaType)) {
      return ParserUtils.parseTo_Date(text,pattern);
    }
    if (""String_Node_Str"".equals(javaType)) {
      return text.getBytes();
    }
  }
  try {
    Method method=ParserUtils.class.getMethod(""String_Node_Str"" + javaType,String.class);
    return method.invoke(null,text);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}","public static Object parse(String text,String javaType,String pattern){
  if (""String_Node_Str"".equals(javaType) || ""String_Node_Str"".equals(javaType)) {
    return text;
  }
  if (text == null || text.length() == 0) {
    boolean isPrimitiveType=primitiveType.contains(javaType);
    if (!isPrimitiveType) {
      return null;
    }
 else {
      text=primitiveTypeToDefaultValueMap.get(javaType);
    }
  }
 else {
    if (""String_Node_Str"".equals(javaType)) {
      return ParserUtils.parseTo_Date(text,pattern);
    }
    if (""String_Node_Str"".equals(javaType)) {
      return text.getBytes();
    }
  }
  try {
    Method method=ParserUtils.class.getMethod(""String_Node_Str"" + javaType,String.class);
    return method.invoke(null,text);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0.9761904761904762
130054,"public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=xmiResourceManager.resourceSet.getResources().get(i);
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (object instanceof Property) {
        if (((Property)object).getItem() instanceof FolderItem) {
          continue;
        }
        if (((Property)object).getItem() instanceof RoutineItem) {
          RoutineItem item=(RoutineItem)((Property)object).getItem();
          if (item.isBuiltIn()) {
            continue;
          }
        }
        if (((Property)object).getItem() instanceof SQLPatternItem) {
          SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
          if (item.isSystem()) {
            continue;
          }
        }
        ERepositoryStatus status=getStatus(((Property)object).getItem());
        if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
          continue;
        }
        resourceToUnload.add(resource);
        if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
          boolean toKeepInMemorySinceDeleted=false;
          if (((Property)object).getItem().getState().isDeleted()) {
            toKeepInMemorySinceDeleted=true;
          }
 else           if (((Property)object).getItem() instanceof ConnectionItem) {
            Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
            boolean haveTableDeleted=false;
            for (            MetadataTable table : ConnectionHelper.getTables(connection)) {
              if (SubItemHelper.isDeleted(table)) {
                haveTableDeleted=true;
                break;
              }
            }
            if (!haveTableDeleted) {
              QueriesConnection queriesConnection=connection.getQueries();
              if (queriesConnection != null) {
                for (                Query query : queriesConnection.getQuery()) {
                  if (SubItemHelper.isDeleted(query)) {
                    haveTableDeleted=true;
                    break;
                  }
                }
              }
              if (connection instanceof SAPConnection) {
                SAPConnection sapConn=(SAPConnection)connection;
                if (!haveTableDeleted) {
                  EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                  for (                  SAPFunctionUnit unit : funtions) {
                    if (SubItemHelper.isDeleted(unit)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (!haveTableDeleted) {
                  EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                  for (                  SAPIDocUnit iDoc : iDocs) {
                    if (SubItemHelper.isDeleted(iDoc)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
              }
            }
            if (haveTableDeleted) {
              toKeepInMemorySinceDeleted=true;
            }
          }
          if (!toKeepInMemorySinceDeleted) {
            ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
            ((Property)object).getItem().setParent(null);
          }
        }
        possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
      }
    }
  }
  kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=kaka.get(i);
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (!(object instanceof Property)) {
        if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
          resourceToUnload.add(resource);
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}","public void unloadUnlockedResources(){
  if (!ProxyRepositoryFactory.getInstance().isFullLogonFinished()) {
    return;
  }
  List<Resource> resourceToUnload=new ArrayList<Resource>();
  List<URI> possibleItemsURItoUnload=new ArrayList<URI>();
  EList<Resource> kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=xmiResourceManager.resourceSet.getResources().get(i);
    if (resource == null) {
      continue;
    }
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (object instanceof Property) {
        if (((Property)object).getItem() instanceof FolderItem) {
          continue;
        }
        if (((Property)object).getItem() instanceof RoutineItem) {
          RoutineItem item=(RoutineItem)((Property)object).getItem();
          if (item.isBuiltIn()) {
            continue;
          }
        }
        if (((Property)object).getItem() instanceof SQLPatternItem) {
          SQLPatternItem item=(SQLPatternItem)((Property)object).getItem();
          if (item.isSystem()) {
            continue;
          }
        }
        ERepositoryStatus status=getStatus(((Property)object).getItem());
        if ((status == ERepositoryStatus.LOCK_BY_USER) || (status == ERepositoryStatus.NOT_UP_TO_DATE)) {
          continue;
        }
        resourceToUnload.add(resource);
        if (((Property)object).getItem() != null && ((Property)object).getItem().getParent() != null && (((Property)object).getItem().getParent()) instanceof FolderItem) {
          boolean toKeepInMemorySinceDeleted=false;
          if (((Property)object).getItem().getState().isDeleted()) {
            toKeepInMemorySinceDeleted=true;
          }
 else           if (((Property)object).getItem() instanceof ConnectionItem) {
            Connection connection=((ConnectionItem)((Property)object).getItem()).getConnection();
            boolean haveTableDeleted=false;
            for (            MetadataTable table : ConnectionHelper.getTables(connection)) {
              if (SubItemHelper.isDeleted(table)) {
                haveTableDeleted=true;
                break;
              }
            }
            if (!haveTableDeleted) {
              QueriesConnection queriesConnection=connection.getQueries();
              if (queriesConnection != null) {
                for (                Query query : queriesConnection.getQuery()) {
                  if (SubItemHelper.isDeleted(query)) {
                    haveTableDeleted=true;
                    break;
                  }
                }
              }
              if (connection instanceof SAPConnection) {
                SAPConnection sapConn=(SAPConnection)connection;
                if (!haveTableDeleted) {
                  EList<SAPFunctionUnit> funtions=sapConn.getFuntions();
                  for (                  SAPFunctionUnit unit : funtions) {
                    if (SubItemHelper.isDeleted(unit)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
                if (!haveTableDeleted) {
                  EList<SAPIDocUnit> iDocs=sapConn.getIDocs();
                  for (                  SAPIDocUnit iDoc : iDocs) {
                    if (SubItemHelper.isDeleted(iDoc)) {
                      haveTableDeleted=true;
                      break;
                    }
                  }
                }
              }
            }
            if (haveTableDeleted) {
              toKeepInMemorySinceDeleted=true;
            }
          }
          if (!toKeepInMemorySinceDeleted) {
            ((FolderItem)((Property)object).getItem().getParent()).getChildren().remove(((Property)object).getItem());
            ((Property)object).getItem().setParent(null);
          }
        }
        possibleItemsURItoUnload.add(xmiResourceManager.getItemResourceURI(resource.getURI()));
      }
    }
  }
  kaka=xmiResourceManager.resourceSet.getResources();
  for (int i=0; i < kaka.size(); i++) {
    Resource resource=kaka.get(i);
    final EList<EObject> contents=resource.getContents();
    for (int j=0; j < contents.size(); j++) {
      EObject object=contents.get(j);
      if (!(object instanceof Property)) {
        if (possibleItemsURItoUnload.contains(resource.getURI()) && !resourceToUnload.contains(resource)) {
          resourceToUnload.add(resource);
        }
      }
    }
  }
  AbstractResourceChangesService resChangeService=TDQServiceRegister.getInstance().getResourceChangeService(AbstractResourceChangesService.class);
  for (int i=0; i < resourceToUnload.size(); i++) {
    Resource resource=resourceToUnload.get(i);
    if (resource.isLoaded()) {
      if (resChangeService != null) {
        resChangeService.handleUnload(resource);
      }
      resource.unload();
    }
  }
}",0.9949124949124948
130055,"public static boolean hasSameNameButDifferentCase(FileName fileName){
  return !fileName.getResourceLabel().equals(fileName.getLastVersionProperty().getLabel()) && fileName.getResourceLabel().equalsIgnoreCase(fileName.getLastVersionProperty().getLabel());
}","public static boolean hasSameNameButDifferentCase(FileName fileName){
  return !fileName.getResourceLabel().equals(fileName.getLastVersionProperty().getLabel().replace('#','$')) && fileName.getResourceLabel().equalsIgnoreCase(fileName.getLastVersionProperty().getLabel().replace('#','$'));
}",0.937956204379562
130056,"public static boolean mustChangeLabel(FileName fileName){
  return !fileName.getResourceLabel().equals(fileName.getLastVersionProperty().getLabel());
}","public static boolean mustChangeLabel(FileName fileName){
  return !fileName.getResourceLabel().equals(fileName.getLastVersionProperty().getLabel().replace('#','$'));
}",0.9467084639498432
130057,"public static String getExpectedFileName(String label,String version){
  StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(label);
  stringBuffer.append(ResourceFilenameHelper.SEPARATOR);
  stringBuffer.append(version);
  return stringBuffer.toString();
}","public static String getExpectedFileName(String label,String version){
  StringBuffer stringBuffer=new StringBuffer();
  stringBuffer.append(label.replace('#','$'));
  stringBuffer.append(ResourceFilenameHelper.SEPARATOR);
  stringBuffer.append(version);
  return stringBuffer.toString();
}",0.9698046181172292
130058,"public static String format_Date_Locale(java.util.Date date,String pattern,String locale){
  if (date != null) {
    return TalendDate.formatDateLocale(pattern,date,locale);
  }
 else {
    return null;
  }
}","public static String format_Date_Locale(java.util.Date date,String pattern,String locale){
  if (date != null) {
    return TalendDate.formatDateLocale(pattern == null ? Constant.dateDefaultPattern : pattern,date,locale);
  }
 else {
    return null;
  }
}",0.896551724137931
130059,"public static String format_Date(java.util.Date date,String pattern){
  if (date != null) {
    return TalendDate.formatDate(pattern,date);
  }
 else {
    return null;
  }
}","public static String format_Date(java.util.Date date,String pattern){
  if (date != null) {
    return TalendDate.formatDate(pattern == null ? Constant.dateDefaultPattern : pattern,date);
  }
 else {
    return null;
  }
}",0.8787878787878788
130060,"@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath)) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          boolean find=false;
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          XMLFileNode selectedNode=getConnection().getRoot().get(0);
          if (selectedNode != null) {
            String xmlPath=selectedNode.getXMLPath();
            if (xmlPath != null && xmlPath.length() > 0) {
              xmlPath=xmlPath.substring(xmlPath.lastIndexOf(""String_Node_Str"") + 1);
              for (int i=0; i < rootNodes.size(); i++) {
                ATreeNode node=rootNodes.get(i);
                if (xmlPath.equals(node.getValue())) {
                  valid=treePopulator.populateTree(xsdSchema,node,treeNodes);
                  if (treeNodes.size() > 0) {
                    treeNode=treeNodes.get(0);
                    find=true;
                    break;
                  }
                }
              }
            }
          }
          if (!find) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}","@Override protected void initialize(){
  getConnection().setInputModel(false);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    xmlXsdFilePath.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlXsdPath=xmlXsdFilePath.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlXsdPath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,xmlXsdFilePath.getText()));
    }
    if (!new File(xmlXsdPath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlXsdPath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlXsdPath)) {
      try {
        XSDSchema xsdSchema=TreeUtil.getXSDSchema(xmlXsdPath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(xsdSchema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
          if (rootNode == null) {
            valid=treePopulator.populateTree(xsdSchema,rootNodes.get(0),treeNodes);
          }
 else {
            valid=treePopulator.populateTree(xsdSchema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlXsdPath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  if (getConnection().getOutputFilePath() != null) {
    outputFilePath.setText(getConnection().getOutputFilePath());
  }
  adaptFormToEditable();
}",0.5123443764507281
130061,"private void initRootCombo(){
  List<ATreeNode> rootNodes=((XmlFileWizard)getPage().getWizard()).getRootNodes();
  if (rootNodes != null) {
    rootComboViewer.setInput(rootNodes);
    XMLFileNode selectedNode=getConnection().getRoot().get(0);
    String xmlPath=selectedNode.getXMLPath();
    if (xmlPath != null && xmlPath.length() > 0) {
      xmlPath=xmlPath.substring(xmlPath.lastIndexOf(""String_Node_Str"") + 1);
      for (int i=0; i < rootNodes.size(); i++) {
        ATreeNode node=rootNodes.get(i);
        if (xmlPath.equals(node.getValue())) {
          rootCombo.select(i);
          break;
        }
      }
    }
  }
}","private void initRootCombo(){
  List<ATreeNode> rootNodes=((XmlFileWizard)getPage().getWizard()).getRootNodes();
  if (rootNodes != null) {
    rootComboViewer.setInput(rootNodes);
    ATreeNode rootNode=getDefaultRootNode(rootNodes);
    rootCombo.select(rootNodes.indexOf(rootNode));
  }
}",0.4398699891657638
130062,"/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  getConnection().setInputModel(true);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    fileFieldXml.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlFilePath=fileFieldXml.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlFilePath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fileFieldXml.getText()));
    }
    if (!new File(xmlFilePath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlFilePath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlFilePath)) {
      try {
        XSDSchema schema=TreeUtil.getXSDSchema(xmlFilePath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(schema);
        if (rootNodes.size() > 0) {
          if (!getConnection().getRoot().isEmpty()) {
            XMLFileNode selectedNode=getConnection().getRoot().get(0);
            if (selectedNode != null) {
              String xmlPath=selectedNode.getXMLPath();
              if (xmlPath != null && xmlPath.length() > 0) {
                xmlPath=xmlPath.substring(xmlPath.lastIndexOf(""String_Node_Str"") + 1);
                for (int i=0; i < rootNodes.size(); i++) {
                  ATreeNode node=rootNodes.get(i);
                  if (xmlPath.equals(node.getValue())) {
                    List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
                    valid=treePopulator.populateTree(schema,node,treeNodes);
                    if (treeNodes.size() > 0) {
                      treeNode=treeNodes.get(0);
                    }
                    break;
                  }
                }
              }
            }
          }
 else {
            String xmlPath=getConnection().getSchema().get(0).getAbsoluteXPathQuery();
            if (xmlPath != null && xmlPath.length() > 0) {
              xmlPath=xmlPath.substring(xmlPath.lastIndexOf(""String_Node_Str"") + 1);
              boolean found=false;
              for (int i=0; i < rootNodes.size(); i++) {
                ATreeNode node=rootNodes.get(i);
                if (xmlPath.equals(node.getValue())) {
                  List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
                  valid=treePopulator.populateTree(schema,node,treeNodes);
                  if (treeNodes.size() > 0) {
                    treeNode=treeNodes.get(0);
                  }
                  found=true;
                  break;
                }
              }
              if (!found) {
                for (int i=0; i < rootNodes.size(); i++) {
                  ATreeNode node=rootNodes.get(i);
                  String[] nodeValue=((String)node.getValue()).split(""String_Node_Str"");
                  if (nodeValue.length > 1) {
                    if (xmlPath.equals(nodeValue[1])) {
                      List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
                      valid=treePopulator.populateTree(schema,node,treeNodes);
                      if (treeNodes.size() > 0) {
                        treeNode=treeNodes.get(0);
                      }
                      found=true;
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlFilePath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  adaptFormToEditable();
}","/** 
 * Initialize value, forceFocus first field.
 */
@Override protected void initialize(){
  getConnection().setInputModel(true);
  this.treePopulator=new TreePopulator(availableXmlTree);
  if (getConnection().getXmlFilePath() != null) {
    fileFieldXml.setText(getConnection().getXmlFilePath().replace(""String_Node_Str"",""String_Node_Str""));
    checkFieldsValue();
    String xmlFilePath=fileFieldXml.getText();
    if (isContextMode()) {
      ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
      xmlFilePath=TalendQuoteUtils.removeQuotes(ConnectionContextHelper.getOriginalValue(contextType,fileFieldXml.getText()));
    }
    if (!new File(xmlFilePath).exists() && getConnection().getFileContent() != null && getConnection().getFileContent().length > 0) {
      initFileContent();
      xmlFilePath=tempXmlXsdPath;
    }
    if (XmlUtil.isXSDFile(xmlFilePath)) {
      try {
        XSDSchema schema=TreeUtil.getXSDSchema(xmlFilePath);
        List<ATreeNode> rootNodes=new XSDPopulationUtil2().getAllRootNodes(schema);
        if (rootNodes.size() > 0) {
          ATreeNode rootNode=getDefaultRootNode(rootNodes);
          if (rootNode != null) {
            List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
            valid=treePopulator.populateTree(schema,rootNode,treeNodes);
            if (treeNodes.size() > 0) {
              treeNode=treeNodes.get(0);
            }
          }
 else {
            String xmlPath=getConnection().getSchema().get(0).getAbsoluteXPathQuery();
            if (xmlPath != null && xmlPath.length() > 0) {
              xmlPath=xmlPath.substring(xmlPath.lastIndexOf(""String_Node_Str"") + 1);
              boolean found=false;
              for (int i=0; i < rootNodes.size(); i++) {
                ATreeNode node=rootNodes.get(i);
                if (xmlPath.equals(node.getValue())) {
                  List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
                  valid=treePopulator.populateTree(schema,node,treeNodes);
                  if (treeNodes.size() > 0) {
                    treeNode=treeNodes.get(0);
                  }
                  found=true;
                  break;
                }
              }
              if (!found) {
                for (int i=0; i < rootNodes.size(); i++) {
                  ATreeNode node=rootNodes.get(i);
                  String[] nodeValue=((String)node.getValue()).split(""String_Node_Str"");
                  if (nodeValue.length > 1) {
                    if (xmlPath.equals(nodeValue[1])) {
                      List<ATreeNode> treeNodes=new ArrayList<ATreeNode>();
                      valid=treePopulator.populateTree(schema,node,treeNodes);
                      if (treeNodes.size() > 0) {
                        treeNode=treeNodes.get(0);
                      }
                      found=true;
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        ExceptionHandler.process(e);
      }
    }
 else {
      valid=this.treePopulator.populateTree(xmlFilePath,treeNode);
    }
  }
  if (getConnection().getEncoding() != null && !getConnection().getEncoding().equals(""String_Node_Str"")) {
    encodingCombo.setText(getConnection().getEncoding());
  }
 else {
    encodingCombo.select(0);
  }
  encodingCombo.clearSelection();
  adaptFormToEditable();
}",0.6132589345024578
130063,"public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    this.repositoryFactoryFromProvider.lock(item);
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}","public void lock(Item item) throws PersistenceException, LoginException {
  if (getStatus(item).isPotentiallyEditable()) {
    this.repositoryFactoryFromProvider.lock(item);
    if ((item instanceof JobletProcessItem || item instanceof ProcessItem) && getStatus(item) == ERepositoryStatus.LOCK_BY_USER) {
      String docId=item.getProperty().getId() + ""String_Node_Str"";
      IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
      if (repositoryViewObject != null) {
        Property property=repositoryViewObject.getProperty();
        Item documentationItem=property.getItem();
        this.repositoryFactoryFromProvider.lock(documentationItem);
      }
    }
    String str[]=new String[]{item.toString(),getRepositoryContext().getUser().toString()};
    log.debug(Messages.getString(""String_Node_Str"",str));
  }
}",0.5327935222672064
130064,"public void unlock(Item obj) throws PersistenceException, LoginException {
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}","public void unlock(Item obj) throws PersistenceException, LoginException {
  if (getStatus(obj) == ERepositoryStatus.LOCK_BY_USER || obj instanceof JobletDocumentationItem || obj instanceof JobDocumentationItem) {
    Date commitDate=obj.getState().getCommitDate();
    Date modificationDate=obj.getProperty().getModificationDate();
    if (modificationDate == null || commitDate == null || modificationDate.before(commitDate)) {
      this.repositoryFactoryFromProvider.unlock(obj);
      if (obj instanceof JobletProcessItem || obj instanceof ProcessItem) {
        String docId=obj.getProperty().getId() + ""String_Node_Str"";
        IRepositoryViewObject repositoryViewObject=this.repositoryFactoryFromProvider.getLastVersion(projectManager.getCurrentProject(),docId);
        if (repositoryViewObject != null) {
          Property property=repositoryViewObject.getProperty();
          Item documentationItem=property.getItem();
          this.repositoryFactoryFromProvider.unlock(documentationItem);
        }
      }
      String str[]=new String[]{obj.toString(),getRepositoryContext().getUser().toString()};
      log.debug(Messages.getString(""String_Node_Str"",str));
    }
  }
}",0.706267029972752
130065,"/** 
 * Main Fields addControls.
 */
protected void addFieldsListeners(){
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
        if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
          if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
            getConnection().setRowSeparatorValue(""String_Node_Str"");
          }
 else {
            getConnection().setRowSeparatorValue(""String_Node_Str"");
          }
        }
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
protected void addFieldsListeners(){
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
        if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
          if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
            getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
 else {
            getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
}",0.9796067006554988
130066,"public void modifyText(final ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
    if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        getConnection().setRowSeparatorValue(""String_Node_Str"");
      }
 else {
        getConnection().setRowSeparatorValue(""String_Node_Str"");
      }
    }
    fileViewerText.setText(Messages.getString(""String_Node_Str""));
    checkFilePathAndManageIt();
  }
}","public void modifyText(final ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
    if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
 else {
        getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
    }
    fileViewerText.setText(Messages.getString(""String_Node_Str""));
    checkFilePathAndManageIt();
  }
}",0.954983922829582
130067,"/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  scrolledCompositeFileViewer.getHorizontalBar().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      int hSelection=scrolledCompositeFileViewer.getHorizontalBar().getSelection();
      graphicRule.setBounds(5 - hSelection,5,filePositionalViewer.getText().getSize().x,graphicRule.getSize().y);
    }
  }
);
  scrolledCompositeFileViewer.addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      int compositeXsize=filePositionalViewer.getText().getSize().x;
      int compositeYsize=graphicRule.getSize().y;
      if (compositeXsize <= 10000) {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(10000,compositeYsize);
      }
 else {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(compositeXsize,compositeYsize);
      }
    }
  }
);
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        checkFilePathAndManageIt(true);
      }
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFilePathAndManageIt(true);
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
      if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
        if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
          getConnection().setRowSeparatorValue(""String_Node_Str"");
        }
 else {
          getConnection().setRowSeparatorValue(""String_Node_Str"");
        }
      }
      checkFilePathAndManageIt(false);
    }
  }
);
  filePositionalViewer.getFieldSeparatorValue().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String value=filePositionalViewer.getFieldSeparatorValue().getText();
        String valueToField=value;
        if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
          if (value.equals(""String_Node_Str"")) {
            valueToField=""String_Node_Str"";
          }
 else {
            valueToField=value + ""String_Node_Str"";
          }
        }
        if (!fieldSeparatorText.getText().equals(valueToField)) {
          fieldSeparatorText.setEditable(false);
          fieldSeparatorText.setText(valueToField);
          fieldSeparatorText.setEditable(true);
          fieldPositionText.setEditable(false);
          fieldPositionText.setText(filePositionalViewer.calculatePositionX());
          fieldPositionText.setEditable(true);
          checkFieldsValue();
        }
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String separatorValue=TalendQuoteUtils.addQuotes(fieldSeparatorText.getText());
        getConnection().setFieldSeparatorValue(separatorValue);
        if (fieldSeparatorText.getEditable() && getConnection().getFieldSeparatorValue().equals(separatorValue)) {
          if (!checkFieldSeparatorValue()) {
            fieldPositionText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.cleanAllMarkers();
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
            }
          }
 else {
            String value=getValidateFieldSeparator(separatorValue);
            Point selection=fieldSeparatorText.getSelection();
            if ((!value.equals(TalendQuoteUtils.removeQuotes(getConnection().getFieldSeparatorValue())))) {
              fieldPositionText.setEditable(false);
              if (filePositionalViewer.getVisible()) {
                filePositionalViewer.setEnabled(false);
                graphicRule.setEnabled(false);
                filePositionalViewer.cleanAllMarkers();
              }
            }
 else {
              filePositionalViewer.setEnabled(true);
              graphicRule.setEnabled(true);
              filePositionalViewer.setSeparatorValue(value,filePositionalViewer.getVisible());
              String newPosition=filePositionalViewer.calculatePositionX();
              if (!fieldPositionText.getText().equals(newPosition)) {
                fieldPositionText.setEditable(false);
                fieldPositionText.setText(newPosition);
              }
              fieldPositionText.setEditable(true);
            }
            fieldSeparatorText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldPositionText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (fieldPositionText.getEditable()) {
          if (!checkFieldPositionValue()) {
            fieldSeparatorText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
              filePositionalViewer.cleanAllMarkers();
            }
          }
 else {
            filePositionalViewer.setEnabled(true);
            graphicRule.setEnabled(true);
            String value=getValidateFieldPosition(fieldPositionText.getText());
            Point selection=fieldPositionText.getSelection();
            filePositionalViewer.setPositionValue(value,filePositionalViewer.getVisible());
            fieldSeparatorText.setEditable(true);
            value=filePositionalViewer.getSeparatorValue();
            if (fieldSeparatorText.getText().equals(""String_Node_Str"")) {
              fieldSeparatorText.setText(""String_Node_Str"");
            }
 else             if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
              fieldSeparatorText.setText(value + ""String_Node_Str"");
            }
 else {
              fieldSeparatorText.setText(value);
            }
            fieldPositionText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldPositionText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldPosition(fieldPositionText.getText(),e.character,fieldPositionText.getSelection().x);
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
@Override protected void addFieldsListeners(){
  scrolledCompositeFileViewer.getHorizontalBar().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event e){
      int hSelection=scrolledCompositeFileViewer.getHorizontalBar().getSelection();
      graphicRule.setBounds(5 - hSelection,5,filePositionalViewer.getText().getSize().x,graphicRule.getSize().y);
    }
  }
);
  scrolledCompositeFileViewer.addControlListener(new ControlListener(){
    public void controlMoved(    ControlEvent e){
    }
    public void controlResized(    ControlEvent e){
      int compositeXsize=filePositionalViewer.getText().getSize().x;
      int compositeYsize=graphicRule.getSize().y;
      if (compositeXsize <= 10000) {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(10000,compositeYsize);
      }
 else {
        graphicRule.setBounds(5,5,500,0);
        graphicRule.setSize(compositeXsize,compositeYsize);
      }
    }
  }
);
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        checkFilePathAndManageIt(true);
      }
    }
  }
);
  encodingCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setEncoding(encodingCombo.getText());
      checkFilePathAndManageIt(true);
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
      if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
        if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
 else {
          getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
        }
      }
      checkFilePathAndManageIt(false);
    }
  }
);
  filePositionalViewer.getFieldSeparatorValue().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isContextMode()) {
        String value=filePositionalViewer.getFieldSeparatorValue().getText();
        String valueToField=value;
        if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
          if (value.equals(""String_Node_Str"")) {
            valueToField=""String_Node_Str"";
          }
 else {
            valueToField=value + ""String_Node_Str"";
          }
        }
        if (!fieldSeparatorText.getText().equals(valueToField)) {
          fieldSeparatorText.setEditable(false);
          fieldSeparatorText.setText(valueToField);
          fieldSeparatorText.setEditable(true);
          fieldPositionText.setEditable(false);
          fieldPositionText.setText(filePositionalViewer.calculatePositionX());
          fieldPositionText.setEditable(true);
          checkFieldsValue();
        }
      }
    }
  }
);
  fieldSeparatorText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        String separatorValue=TalendQuoteUtils.addQuotes(fieldSeparatorText.getText());
        getConnection().setFieldSeparatorValue(separatorValue);
        if (fieldSeparatorText.getEditable() && getConnection().getFieldSeparatorValue().equals(separatorValue)) {
          if (!checkFieldSeparatorValue()) {
            fieldPositionText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.cleanAllMarkers();
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
            }
          }
 else {
            String value=getValidateFieldSeparator(separatorValue);
            Point selection=fieldSeparatorText.getSelection();
            if ((!value.equals(TalendQuoteUtils.removeQuotes(getConnection().getFieldSeparatorValue())))) {
              fieldPositionText.setEditable(false);
              if (filePositionalViewer.getVisible()) {
                filePositionalViewer.setEnabled(false);
                graphicRule.setEnabled(false);
                filePositionalViewer.cleanAllMarkers();
              }
            }
 else {
              filePositionalViewer.setEnabled(true);
              graphicRule.setEnabled(true);
              filePositionalViewer.setSeparatorValue(value,filePositionalViewer.getVisible());
              String newPosition=filePositionalViewer.calculatePositionX();
              if (!fieldPositionText.getText().equals(newPosition)) {
                fieldPositionText.setEditable(false);
                fieldPositionText.setText(newPosition);
              }
              fieldPositionText.setEditable(true);
            }
            fieldSeparatorText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldSeparatorText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldSeparator(fieldSeparatorText.getText(),e.character,fieldSeparatorText.getSelection().x);
      }
    }
  }
);
  fieldPositionText.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (fieldPositionText.getEditable()) {
          if (!checkFieldPositionValue()) {
            fieldSeparatorText.setEditable(false);
            if (filePositionalViewer.getVisible()) {
              filePositionalViewer.setEnabled(false);
              graphicRule.setEnabled(false);
              filePositionalViewer.cleanAllMarkers();
            }
          }
 else {
            filePositionalViewer.setEnabled(true);
            graphicRule.setEnabled(true);
            String value=getValidateFieldPosition(fieldPositionText.getText());
            Point selection=fieldPositionText.getSelection();
            filePositionalViewer.setPositionValue(value,filePositionalViewer.getVisible());
            fieldSeparatorText.setEditable(true);
            value=filePositionalViewer.getSeparatorValue();
            if (fieldSeparatorText.getText().equals(""String_Node_Str"")) {
              fieldSeparatorText.setText(""String_Node_Str"");
            }
 else             if (fieldSeparatorText.getText().contains(""String_Node_Str"")) {
              fieldSeparatorText.setText(value + ""String_Node_Str"");
            }
 else {
              fieldSeparatorText.setText(value);
            }
            fieldPositionText.setSelection(selection.x);
          }
        }
      }
    }
  }
);
  fieldPositionText.addKeyListener(new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      if (isContextMode()) {
        e.doit=false;
      }
 else {
        e.doit=charIsAcceptedOnFieldPosition(fieldPositionText.getText(),e.character,fieldPositionText.getSelection().x);
      }
    }
  }
);
}",0.9961738179830556
130068,"/** 
 * Main Fields addControls.
 */
protected void addFieldsListeners(){
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
        if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
          if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
            getConnection().setRowSeparatorValue(""String_Node_Str"");
          }
 else {
            getConnection().setRowSeparatorValue(""String_Node_Str"");
          }
        }
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
}","/** 
 * Main Fields addControls.
 */
protected void addFieldsListeners(){
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFilePath(PathUtils.getPortablePath(fileField.getText()));
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
  fileFormatCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
        if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
          if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
            getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
 else {
            getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
          }
        }
        fileViewerText.setText(Messages.getString(""String_Node_Str""));
        checkFilePathAndManageIt();
      }
    }
  }
);
}",0.9796067006554988
130069,"public void modifyText(final ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
    if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        getConnection().setRowSeparatorValue(""String_Node_Str"");
      }
 else {
        getConnection().setRowSeparatorValue(""String_Node_Str"");
      }
    }
    fileViewerText.setText(Messages.getString(""String_Node_Str""));
    checkFilePathAndManageIt();
  }
}","public void modifyText(final ModifyEvent e){
  if (!isContextMode()) {
    getConnection().setFormat(FileFormat.getByName(fileFormatCombo.getText()));
    if (getConnection().getRowSeparatorType() == RowSeparator.STANDART_EOL_LITERAL) {
      if (getConnection().getFormat().toString().equals(FileFormat.MAC_LITERAL.getName())) {
        getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
 else {
        getConnection().setRowSeparatorValue(TalendQuoteUtils.addQuotes(""String_Node_Str""));
      }
    }
    fileViewerText.setText(Messages.getString(""String_Node_Str""));
    checkFilePathAndManageIt();
  }
}",0.954983922829582
130070,"public void updateConnection(){
  ConnectionHelper.getTables(getConnection());
  EList root=getConnection().getRoot();
  EList loop=getConnection().getLoop();
  EList group=getConnection().getGroup();
  root.clear();
  loop.clear();
  group.clear();
  List<FOXTreeNode> node=(List<FOXTreeNode>)xmlViewer.getInput();
  FOXTreeNode foxTreeNode=node.get(0);
  if (foxTreeNode != null) {
    initNodeOrder(foxTreeNode);
    tableLoader((Element)foxTreeNode,""String_Node_Str"",root,foxTreeNode.getDefaultValue());
    Element loopNode=(Element)TreeUtil.getLoopNode(foxTreeNode);
    if (loopNode != null) {
      String path=TreeUtil.getPath(loopNode);
      tableLoader(loopNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),loop,loopNode.getDefaultValue());
    }
    Element groupNode=(Element)TreeUtil.getGroupNode(foxTreeNode);
    if (groupNode != null) {
      String path=TreeUtil.getPath(groupNode);
      tableLoader(groupNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),group,groupNode.getDefaultValue());
    }
  }
}","public void updateConnection(){
  ConnectionHelper.getTables(getConnection());
  EList root=getConnection().getRoot();
  EList loop=getConnection().getLoop();
  EList group=getConnection().getGroup();
  root.clear();
  loop.clear();
  group.clear();
  List<FOXTreeNode> node=(List<FOXTreeNode>)xmlViewer.getInput();
  FOXTreeNode foxTreeNode=node.get(0);
  if (foxTreeNode != null) {
    initNodeOrder(foxTreeNode);
    if (!foxTreeNode.isLoop()) {
      tableLoader((Element)foxTreeNode,""String_Node_Str"",root,foxTreeNode.getDefaultValue());
    }
    Element loopNode=(Element)TreeUtil.getLoopNode(foxTreeNode);
    if (loopNode != null) {
      String path=TreeUtil.getPath(loopNode);
      tableLoader(loopNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),loop,loopNode.getDefaultValue());
    }
    Element groupNode=(Element)TreeUtil.getGroupNode(foxTreeNode);
    if (groupNode != null) {
      String path=TreeUtil.getPath(groupNode);
      tableLoader(groupNode,path.substring(0,path.lastIndexOf(""String_Node_Str"")),group,groupNode.getDefaultValue());
    }
  }
}",0.9806694955209808
130071,"private void initXmlTreeData(){
  treeData.clear();
  EList root=getConnection().getRoot();
  EList loop=getConnection().getLoop();
  EList group=getConnection().getGroup();
  FOXTreeNode rootNode=null;
  FOXTreeNode current=null;
  FOXTreeNode temp=null;
  FOXTreeNode mainNode=null;
  String mainPath=null;
  String currentPath=null;
  String defaultValue=null;
  int nodeOrder=0;
  boolean haveOrder=true;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    String orderValue=String.valueOf(node.getOrder());
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=node.getOrder();
    }
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      temp.setDataType(type);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=node.getRelatedColumn();
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    String orderValue=String.valueOf(node.getOrder());
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=node.getOrder();
    }
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      temp.setDataType(type);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=node.getRelatedColumn();
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  isFirst=true;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    String orderValue=String.valueOf(node.getOrder());
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=node.getOrder();
    }
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      temp.setDataType(type);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      temp.setDataType(type);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=node.getRelatedColumn();
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(getColumn(columnName));
    }
  }
  if (rootNode == null) {
    rootNode=new Element(""String_Node_Str"");
  }
  rootNode.setParent(null);
  if (haveOrder) {
    orderNode(rootNode);
  }
  treeData.add(rootNode);
}","private void initXmlTreeData(){
  treeData.clear();
  EList root=getConnection().getRoot();
  EList loop=getConnection().getLoop();
  EList group=getConnection().getGroup();
  FOXTreeNode rootNode=null;
  FOXTreeNode current=null;
  FOXTreeNode temp=null;
  FOXTreeNode mainNode=null;
  String mainPath=null;
  String currentPath=null;
  String defaultValue=null;
  int nodeOrder=0;
  boolean haveOrder=true;
  for (int i=0; i < root.size(); i++) {
    XMLFileNode node=(XMLFileNode)root.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    String orderValue=String.valueOf(node.getOrder());
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=node.getOrder();
    }
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      temp.setDataType(type);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=node.getRelatedColumn();
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  boolean isFirst=true;
  for (int i=0; i < group.size(); i++) {
    XMLFileNode node=(XMLFileNode)group.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    String orderValue=String.valueOf(node.getOrder());
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=node.getOrder();
    }
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      temp.setDataType(type);
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setGroup(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=node.getRelatedColumn();
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(getColumn(columnName));
    }
  }
  current=mainNode;
  currentPath=mainPath;
  isFirst=true;
  for (int i=0; i < loop.size(); i++) {
    XMLFileNode node=(XMLFileNode)loop.get(i);
    String newPath=node.getXMLPath();
    defaultValue=node.getDefaultValue();
    String type=node.getType();
    String orderValue=String.valueOf(node.getOrder());
    if (orderValue == null || ""String_Node_Str"".equals(orderValue)) {
      haveOrder=false;
    }
    if (haveOrder) {
      nodeOrder=node.getOrder();
    }
    if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new Attribute(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setAttribute(true);
      temp.setDataType(type);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else     if (node.getAttribute().equals(""String_Node_Str"")) {
      temp=new NameSpaceNode(newPath);
      temp.setDefaultValue(defaultValue);
      temp.setNameSpace(true);
      temp.setDataType(type);
      current.addChild(temp);
    }
 else {
      temp=this.addElement(current,currentPath,newPath,defaultValue);
      temp.setDataType(type);
      if (rootNode == null) {
        rootNode=temp;
      }
      if (node.getAttribute().equals(""String_Node_Str"")) {
        temp.setMain(true);
        mainNode=temp;
        mainPath=newPath;
      }
      if (isFirst) {
        temp.setLoop(true);
        isFirst=false;
      }
      current=temp;
      currentPath=newPath;
    }
    if (haveOrder) {
      temp.setOrder(nodeOrder);
    }
    String columnName=node.getRelatedColumn();
    if (columnName != null && columnName.length() > 0) {
      temp.setColumn(getColumn(columnName));
    }
  }
  if (rootNode == null) {
    rootNode=new Element(""String_Node_Str"");
  }
  rootNode.setParent(null);
  if (haveOrder) {
    orderNode(rootNode);
  }
  treeData.add(rootNode);
}",0.9941576477348912
130072,"private boolean createChildNode(FOXTreeNode node){
  if (node.getColumn() != null) {
    if (!MessageDialog.openConfirm(xmlViewer.getControl().getShell(),""String_Node_Str"",""String_Node_Str"" + node.getLabel() + ""String_Node_Str"")) {
      return false;
    }
    node.setColumn(null);
  }
  String label=""String_Node_Str"";
  while (!StringUtil.validateLabelForXML(label)) {
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
    int status=dialog.open();
    if (status == InputDialog.OK) {
      label=dialog.getValue().trim();
    }
    if (status == InputDialog.CANCEL) {
      return false;
    }
  }
  FOXTreeNode child=new Element(label);
  node.addChild(child);
  this.xmlViewer.refresh();
  this.xmlViewer.expandAll();
  return true;
}","private boolean createChildNode(FOXTreeNode node){
  if (node.getColumn() != null) {
    if (!MessageDialog.openConfirm(xmlViewer.getControl().getShell(),""String_Node_Str"",""String_Node_Str"" + node.getLabel() + ""String_Node_Str"")) {
      return false;
    }
    node.setColumn(null);
  }
  String label=""String_Node_Str"";
  while (!StringUtil.validateLabelForXML(label)) {
    InputDialog dialog=new InputDialog(null,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
    int status=dialog.open();
    if (status == InputDialog.OK) {
      label=dialog.getValue().trim();
    }
    if (status == InputDialog.CANCEL) {
      return false;
    }
  }
  FOXTreeNode child=new Element(label);
  node.addChild(child);
  if (node.getParent() == null && node.isLoop()) {
    node.setLoop(false);
  }
  this.xmlViewer.refresh();
  this.xmlViewer.expandAll();
  return true;
}",0.9521531100478468
130073,"@Override public void selectionChanged(IStructuredSelection selection){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node == null) {
    this.setEnabled(false);
    return;
  }
  if (node instanceof Attribute) {
    this.setEnabled(false);
    return;
  }
  if (node instanceof NameSpaceNode) {
    this.setEnabled(false);
    return;
  }
  this.setEnabled(TreeUtil.checkTreeLoopNode(node));
}","@Override public void selectionChanged(IStructuredSelection selection){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (node == null) {
    this.setEnabled(false);
    return;
  }
  this.setEnabled(TreeUtil.canSetAsLoop(node));
}",0.6344238975817923
130074,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    if (xsdElementDeclarationParticle.getTypeDefinition() instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
    }
 else {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,parentNode,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    if (namespace == null && typeDef.getTargetNamespace() != null && !typeDef.getTargetNamespace().equals(parentNode.getCurrentNamespace())) {
      namespace=typeDef.getTargetNamespace();
      if (!XSDConstants.isSchemaForSchemaNamespace(namespace)) {
        prefix=namespaceToPrefix.get(namespace);
        if (prefix == null) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
 else {
            prefix=""String_Node_Str"" + prefixNumberGenerated;
            prefixNumberGenerated++;
          }
          namespaceToPrefix.put(namespace,prefix);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,parentNode,currentPath);
    }
  }
}",0.7274772241592622
130075,"public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute2){
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue())) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdTypeDefinition.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}","public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute2){
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue())) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdTypeDefinition.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
          node.setCurrentNamespace(xsdTypeDefinition.getTargetNamespace());
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}",0.988935378893538
130076,"public XSDSchema getXSDSchema(String fileName) throws URISyntaxException, MalformedURLException {
  ResourceSet resourceSet=new ResourceSetImpl();
  XSDResourceImpl xsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  XSDSchema xsdSchema=xsdResource.getSchema();
  return xsdSchema;
}","public XSDSchema getXSDSchema(String fileName) throws URISyntaxException, MalformedURLException {
  XSDResourceImpl mainXsdResource=(XSDResourceImpl)resourceSet.getResource(URI.createFileURI(fileName),true);
  boolean haveExternalDependenciesWithoutLocation=false;
  for (  Resource resource : resourceSet.getResources()) {
    if (resource instanceof XSDResourceImpl) {
      XSDResourceImpl xsdResource=(XSDResourceImpl)resource;
      for (      EObject object : xsdResource.getSchema().getContents()) {
        if (object instanceof XSDImport) {
          XSDImport xsdImport=(XSDImport)object;
          if (StringUtils.isEmpty(xsdImport.getSchemaLocation())) {
            for (            Resource resource2 : resourceSet.getResources()) {
              if (resource2 instanceof XSDResourceImpl) {
                XSDResourceImpl xsdResource2=(XSDResourceImpl)resource2;
                if (xsdResource2.getSchema().getTargetNamespace() != null && xsdResource2.getSchema().getTargetNamespace().equals(xsdImport.getNamespace())) {
                  xsdImport.setSchemaLocation(xsdResource2.getSchema().getSchemaLocation());
                  haveExternalDependenciesWithoutLocation=true;
                }
              }
            }
          }
        }
      }
    }
  }
  XSDSchema xsdSchema=mainXsdResource.getSchema();
  if (haveExternalDependenciesWithoutLocation) {
    xsdSchema.setElement(xsdSchema.getDocument().getDocumentElement());
  }
  return xsdSchema;
}",0.1388888888888889
130077,"public Property getProperty(){
  Property property=viewObject.getProperty();
  updataColumn(property);
  return property;
}","public Property getProperty(){
  Property property=viewObject.getProperty();
  updateColumn(property);
  return property;
}",0.991869918699187
130078,"public Property getProperty(){
  Property property=viewObject.getProperty();
  updataCatalog(property);
  return property;
}","public Property getProperty(){
  Property property=viewObject.getProperty();
  updateCatalog(property);
  return property;
}",0.9919354838709676
130079,"public Property getProperty(){
  Property property=viewObject.getProperty();
  updataCatalog(property);
  return property;
}","public Property getProperty(){
  Property property=viewObject.getProperty();
  updateCatalog(property);
  return property;
}",0.9919354838709676
130080,"public Property getProperty(){
  Property property=viewObject.getProperty();
  updataTable(property);
  return property;
}","public Property getProperty(){
  Property property=viewObject.getProperty();
  updateTable(property);
  return property;
}",0.9918032786885246
130081,"public Property getProperty(){
  Property property=viewObject.getProperty();
  updataCatalog(property);
  return property;
}","public Property getProperty(){
  Property property=viewObject.getProperty();
  updateCatalog(property);
  return property;
}",0.9919354838709676
130082,"public Property getProperty(){
  Property property=viewObject.getProperty();
  updataCatalog(property);
  return property;
}","public Property getProperty(){
  Property property=viewObject.getProperty();
  updateCatalog(property);
  return property;
}",0.9919354838709676
130083,"private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    if (namespace == null && typeDef.getTargetNamespace() != null && !typeDef.getTargetNamespace().equals(parentNode.getCurrentNamespace())) {
      namespace=typeDef.getTargetNamespace();
      if (!XSDConstants.isSchemaForSchemaNamespace(namespace)) {
        prefix=namespaceToPrefix.get(namespace);
        if (prefix == null) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
 else {
            prefix=""String_Node_Str"" + prefixNumberGenerated;
            prefixNumberGenerated++;
          }
          namespaceToPrefix.put(namespace,prefix);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,parentNode,currentPath);
    }
  }
}","private void addParticleDetail(XSDSchema xsdSchema,XSDParticle xsdParticle,ATreeNode parentNode,String currentPath) throws OdaException {
  XSDTerm xsdTerm=xsdParticle.getTerm();
  if (xsdTerm instanceof XSDElementDeclaration) {
    XSDElementDeclaration xsdElementDeclarationParticle=(XSDElementDeclaration)xsdTerm;
    ATreeNode partNode=new ATreeNode();
    String elementName=xsdElementDeclarationParticle.getName();
    String prefix=null;
    String namespace=xsdElementDeclarationParticle.getTargetNamespace();
    XSDTypeDefinition typeDef=xsdElementDeclarationParticle.getTypeDefinition();
    if (namespace != null) {
      prefix=namespaceToPrefix.get(namespace);
      if (prefix == null) {
        prefix=((XSDElementDeclaration)xsdTerm).getQName().contains(""String_Node_Str"") ? ((XSDElementDeclaration)xsdTerm).getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (namespaceToPrefix.containsValue(prefix)) {
          prefix=prefix + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          partNode.addChild(namespaceNode);
        }
      }
    }
    partNode.setCurrentNamespace(namespace);
    if (prefix != null && !prefix.isEmpty()) {
      elementName=prefix + ""String_Node_Str"" + elementName;
    }
    partNode.setValue(elementName);
    partNode.setType(ATreeNode.ELEMENT_TYPE);
    partNode.setDataType(xsdElementDeclarationParticle.getName());
    parentNode.addChild(partNode);
    boolean resolvedAsComplex=false;
    if (typeDef instanceof XSDComplexTypeDefinition) {
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclarationParticle.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getQName());
        }
        addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
      }
      resolvedAsComplex=true;
    }
 else     if (typeDef.getTargetNamespace() != null) {
      resolvedAsComplex=true;
      if (!currentPath.contains(""String_Node_Str"" + elementName + ""String_Node_Str"")) {
        String path=currentPath + elementName + ""String_Node_Str"";
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinition(typeDef.getQName());
        XSDTypeDefinition xsdTypeDefinition=xsdElementDeclarationParticle.getTypeDefinition();
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          partNode.setDataType(xsdTypeDefinition.getName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          addComplexTypeDetails(xsdSchema,partNode,xsdTypeDefinition,prefix,namespace,path);
        }
 else {
          resolvedAsComplex=false;
        }
      }
    }
    if (!resolvedAsComplex) {
      String dataType=xsdElementDeclarationParticle.getTypeDefinition().getQName();
      if (xsdElementDeclarationParticle.getTypeDefinition().getBaseType() != null) {
        if (!""String_Node_Str"".equals(xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName())) {
          dataType=xsdElementDeclarationParticle.getTypeDefinition().getBaseType().getQName();
        }
      }
      partNode.setDataType(dataType);
    }
  }
 else   if (xsdTerm instanceof XSDModelGroup) {
    XSDModelGroup xsdModelGroup=(XSDModelGroup)xsdTerm;
    for (Iterator j=xsdModelGroup.getParticles().iterator(); j.hasNext(); ) {
      XSDParticle childParticle=(XSDParticle)j.next();
      addParticleDetail(xsdSchema,childParticle,parentNode,currentPath);
    }
  }
}",0.9097458475085052
130084,"public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute2){
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue())) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdTypeDefinition.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
          node.setCurrentNamespace(xsdTypeDefinition.getTargetNamespace());
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}","public ATreeNode getSchemaTree(XSDSchema xsdSchema,ATreeNode selectedNode,boolean includeAttribute2){
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  prefixNumberGenerated=1;
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  try {
    for (Iterator i=all.iterator(); i.hasNext(); ) {
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)i.next();
      String elementName=xsdElementDeclaration.getName();
      ATreeNode node=new ATreeNode();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      String originalElementName=xsdElementDeclaration.getName();
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
        }
        if (isEnableGeneratePrefix() && (prefix == null || prefix.isEmpty())) {
          prefix=""String_Node_Str"" + prefixNumberGenerated;
          prefixNumberGenerated++;
        }
        if (prefix != null && !prefix.isEmpty()) {
          elementName=prefix + ""String_Node_Str"" + xsdElementDeclaration.getName();
          namespaceToPrefix.put(namespace,prefix);
        }
 else {
          ATreeNode namespaceNode=new ATreeNode();
          namespaceNode.setDataType(""String_Node_Str"");
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(namespace);
          node.addChild(namespaceNode);
        }
      }
      if (!elementName.equals(selectedNode.getValue()) && (!(prefixNumberGenerated > 1 && originalElementName.equals(selectedNode.getValue())))) {
        namespaceToPrefix.clear();
        prefixNumberGenerated=1;
        continue;
      }
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
      }
      List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
      Collections.reverse(namespaceList);
      for (      String currentNamespace : namespaceList) {
        ATreeNode namespaceNode=null;
        if (currentNamespace != null) {
          prefix=namespaceToPrefix.get(currentNamespace);
          namespaceNode=new ATreeNode();
          namespaceNode.setDataType(prefix);
          namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
          namespaceNode.setValue(currentNamespace);
          node.addAsFirstChild(namespaceNode);
        }
      }
      rootNodes.add(node);
      break;
    }
    if (rootNodes.isEmpty()) {
      all=new ArrayList(xsdSchema.getTypeDefinitions());
      for (Iterator i=all.iterator(); i.hasNext(); ) {
        XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)i.next();
        String elementName=xsdTypeDefinition.getQName();
        if (!elementName.equals(selectedNode.getValue())) {
          continue;
        }
        ATreeNode node=new ATreeNode();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdTypeDefinition.getURI());
        if (generalType.getContainer() != null) {
          xsdTypeDefinition=generalType;
        }
        if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
          node.setDataType(xsdTypeDefinition.getQName());
        }
        if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
          String prefix=elementName.contains(""String_Node_Str"") ? elementName.split(""String_Node_Str"")[0] : ""String_Node_Str"";
          String namespace=xsdTypeDefinition.getTargetNamespace();
          addComplexTypeDetails(xsdSchema,node,xsdTypeDefinition,prefix,namespace,""String_Node_Str"" + elementName + ""String_Node_Str"");
        }
        if (xsdTypeDefinition.getTargetNamespace() != null) {
          String prefix=namespaceToPrefix.get(xsdTypeDefinition.getTargetNamespace());
          if (prefix != null) {
            node.setValue(prefix + ""String_Node_Str"" + xsdTypeDefinition.getName());
          }
          node.setCurrentNamespace(xsdTypeDefinition.getTargetNamespace());
        }
        List<String> namespaceList=new ArrayList(namespaceToPrefix.keySet());
        Collections.reverse(namespaceList);
        for (        String namespace : namespaceList) {
          ATreeNode namespaceNode=null;
          if (namespace != null) {
            String prefix=namespaceToPrefix.get(namespace);
            namespaceNode=new ATreeNode();
            namespaceNode.setDataType(prefix);
            namespaceNode.setType(ATreeNode.NAMESPACE_TYPE);
            namespaceNode.setValue(namespace);
            node.addAsFirstChild(namespaceNode);
          }
        }
        rootNodes.add(node);
        break;
      }
    }
  }
 catch (  OdaException e) {
    e.printStackTrace();
  }
  return rootNodes.get(0);
}",0.9423693560967156
130085,"public List<ATreeNode> getAllRootNodes(XSDSchema xsdSchema) throws OdaException {
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  List<String> rootNodesName=new ArrayList<String>();
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  all.addAll(xsdSchema.getTypeDefinitions());
  all=XSDNamedComponentImpl.sortNamedComponents(all);
  for (Iterator i=all.iterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof XSDElementDeclaration) {
      ATreeNode node=new ATreeNode();
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)o;
      String elementName=xsdElementDeclaration.getQName();
      node.setValue(elementName);
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
        rootNodesName.add((String)node.getValue());
        rootNodes.add(node);
      }
    }
 else {
      XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)o;
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        ATreeNode node=new ATreeNode();
        String elementName=xsdTypeDefinition.getQName();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
          rootNodesName.add((String)node.getValue());
          rootNodes.add(node);
        }
      }
    }
  }
  return rootNodes;
}","public List<ATreeNode> getAllRootNodes(XSDSchema xsdSchema) throws OdaException {
  List<ATreeNode> rootNodes=new ArrayList<ATreeNode>();
  List<String> rootNodesName=new ArrayList<String>();
  List all=new ArrayList(xsdSchema.getElementDeclarations());
  all.addAll(xsdSchema.getTypeDefinitions());
  all=XSDNamedComponentImpl.sortNamedComponents(all);
  for (Iterator i=all.iterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof XSDElementDeclaration) {
      ATreeNode node=new ATreeNode();
      XSDElementDeclaration xsdElementDeclaration=(XSDElementDeclaration)o;
      String elementName=xsdElementDeclaration.getQName();
      node.setType(ATreeNode.ELEMENT_TYPE);
      node.setDataType(xsdElementDeclaration.getName());
      XSDTypeDefinition xsdTypeDefinition=xsdElementDeclaration.getTypeDefinition();
      String prefix=null;
      String namespace=xsdElementDeclaration.getTargetNamespace();
      node.setCurrentNamespace(namespace);
      XSDTypeDefinition typeDef=xsdElementDeclaration.getTypeDefinition();
      if (namespace != null) {
        prefix=xsdElementDeclaration.getQName().contains(""String_Node_Str"") ? xsdElementDeclaration.getQName().split(""String_Node_Str"")[0] : ""String_Node_Str"";
        if (prefix == null || prefix.isEmpty()) {
          if (xsdSchema.getQNamePrefixToNamespaceMap().containsValue(typeDef.getTargetNamespace())) {
            for (            String key : xsdSchema.getQNamePrefixToNamespaceMap().keySet()) {
              if (xsdSchema.getQNamePrefixToNamespaceMap().get(key).equals(typeDef.getTargetNamespace())) {
                prefix=key;
              }
            }
          }
          if (prefix != null && !prefix.isEmpty()) {
            elementName=prefix + ""String_Node_Str"" + elementName;
          }
        }
      }
      node.setValue(elementName);
      XSDComplexTypeDefinition generalType=xsdSchema.resolveComplexTypeDefinitionURI(xsdElementDeclaration.getURI());
      if (generalType.getContainer() != null) {
        xsdTypeDefinition=generalType;
      }
      if (xsdTypeDefinition != null && xsdTypeDefinition.getName() != null) {
        node.setDataType(xsdTypeDefinition.getName());
      }
      if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
        rootNodesName.add((String)node.getValue());
        rootNodes.add(node);
      }
    }
 else {
      XSDTypeDefinition xsdTypeDefinition=(XSDTypeDefinition)o;
      if (xsdTypeDefinition instanceof XSDComplexTypeDefinition) {
        ATreeNode node=new ATreeNode();
        String elementName=xsdTypeDefinition.getQName();
        node.setValue(elementName);
        node.setType(ATreeNode.ELEMENT_TYPE);
        node.setDataType(xsdTypeDefinition.getName());
        if (!rootNodes.contains(node) && !rootNodesName.contains(node.getValue())) {
          rootNodesName.add((String)node.getValue());
          rootNodes.add(node);
        }
      }
    }
  }
  return rootNodes;
}",0.7894312222670432
130086,"public static List<TreeItem> collectAllItems(TreeItem treeItem){
  List<TreeItem> list=new ArrayList<TreeItem>();
  TreeItem[] items=treeItem.getItems();
  for (  TreeItem item : items) {
    list.add(item);
    list.addAll(collectAllItems(item));
  }
  return list;
}","public static List<TreeItem> collectAllItems(TreeItem treeItem){
  List<TreeItem> list=new ArrayList<TreeItem>();
  list.add(treeItem);
  TreeItem[] items=treeItem.getItems();
  for (  TreeItem item : items) {
    list.addAll(collectAllItems(item));
  }
  return list;
}",0.9219330855018588
130087,"public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    return;
  }
  Control control=dropTarget.getControl();
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  IMetadataTable table=null;
  if (draggedData.getTable() instanceof MetadataTable) {
    table=ConvertionHelper.convert((MetadataTable)draggedData.getTable());
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    if (!targetNode.hasChildren()) {
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setDefaultValue(null);
      targetNode.setColumn(metaColumn);
      targetNode.setTable(table);
      targetNode.setDataType(metaColumn.getTalendType());
      linker.getXMLViewer().refresh(targetNode);
      linker.getXMLViewer().expandAll();
      Display display=linker.getSource().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getSource().getShell().setCursor(cursor);
      linker.valuedChanged(targetItem);
      linker.getSource().getShell().setCursor(null);
    }
  }
 else   if (dragdedData.size() > 0) {
    DragAndDrogDialog dialog=new DragAndDrogDialog(null);
    dialog.open();
    if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
      return;
    }
    if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_TEXT)) {
      if (targetNode.hasChildren()) {
        List<FOXTreeNode> children=targetNode.getChildren();
        for (        FOXTreeNode foxTreeNode : children) {
          if (!(foxTreeNode instanceof Attribute)) {
            MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
            return;
          }
        }
      }
 else       if (targetNode.getParent() == null) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setColumn(metaColumn);
      targetNode.setDataType(metaColumn.getTalendType());
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_SUBELEMENT)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      if (targetNode.getColumn() != null) {
        if (!MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"")) {
          return;
        }
        targetNode.setColumn(null);
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getElementChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setDataType(metaColumn.getTalendType());
            node.setTable(table);
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Element(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      if (targetNode instanceof Element && targetNode.getParent() == null && targetNode.isLoop()) {
        targetNode.setLoop(false);
      }
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_ATTRIBUTE)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getAttributeChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setTable(table);
            node.setDataType(metaColumn.getTalendType());
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Attribute(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      setDefaultFixValue(targetNode);
    }
    linker.getXMLViewer().refresh();
    linker.getXMLViewer().expandAll();
    Display display=linker.getSource().getDisplay();
    Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
    linker.getSource().getShell().setCursor(cursor);
    linker.valuedChanged(targetItem);
    linker.getSource().getShell().setCursor(null);
  }
  linker.getXMLViewer().refresh();
  linker.getXMLViewer().expandAll();
  linker.updateLinksStyleAndControlsSelection(control,true);
  linker.getForm().updateConnection();
  linker.getForm().updateStatus();
}","public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    return;
  }
  Control control=dropTarget.getControl();
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  IMetadataTable table=null;
  if (draggedData.getTable() instanceof MetadataTable) {
    table=ConvertionHelper.convert((MetadataTable)draggedData.getTable());
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    if (!targetNode.hasChildren()) {
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setDefaultValue(null);
      targetNode.setColumn(metaColumn);
      targetNode.setTable(table);
      targetNode.setDataType(metaColumn.getTalendType());
      linker.getXMLViewer().refresh(targetNode);
      linker.getXMLViewer().expandAll();
      Display display=linker.getSource().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getSource().getShell().setCursor(cursor);
      linker.valuedChanged(targetItem);
      linker.getSource().getShell().setCursor(null);
    }
  }
 else   if (dragdedData.size() > 0) {
    DragAndDrogDialog dialog=new DragAndDrogDialog(null);
    dialog.open();
    if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
      return;
    }
    if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_TEXT)) {
      if (targetNode.hasChildren()) {
        List<FOXTreeNode> children=targetNode.getChildren();
        for (        FOXTreeNode foxTreeNode : children) {
          if (!(foxTreeNode instanceof Attribute) && !(foxTreeNode instanceof NameSpaceNode)) {
            MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
            return;
          }
        }
      }
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setColumn(metaColumn);
      targetNode.setDataType(metaColumn.getTalendType());
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_SUBELEMENT)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      if (targetNode.getColumn() != null) {
        if (!MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"")) {
          return;
        }
        targetNode.setColumn(null);
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getElementChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setDataType(metaColumn.getTalendType());
            node.setTable(table);
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Element(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      if (targetNode instanceof Element && targetNode.getParent() == null && targetNode.isLoop()) {
        targetNode.setLoop(false);
      }
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_ATTRIBUTE)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getAttributeChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setTable(table);
            node.setDataType(metaColumn.getTalendType());
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Attribute(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      setDefaultFixValue(targetNode);
    }
    linker.getXMLViewer().refresh();
    linker.getXMLViewer().expandAll();
    Display display=linker.getSource().getDisplay();
    Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
    linker.getSource().getShell().setCursor(cursor);
    linker.valuedChanged(targetItem);
    linker.getSource().getShell().setCursor(null);
  }
  linker.getXMLViewer().refresh();
  linker.getXMLViewer().expandAll();
  linker.updateLinksStyleAndControlsSelection(control,true);
  linker.getForm().updateConnection();
  linker.getForm().updateStatus();
}",0.977703061405061
130088,"@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
}","@Override public void run(){
  FOXTreeNode node=(FOXTreeNode)this.getStructuredSelection().getFirstElement();
  if (createChildNode(node)) {
    form.redrawLinkers();
  }
  form.updateConnection();
  form.updateStatus();
}",0.9453681710213776
130089,"public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    return;
  }
  Control control=dropTarget.getControl();
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  IMetadataTable table=null;
  if (draggedData.getTable() instanceof MetadataTable) {
    table=ConvertionHelper.convert((MetadataTable)draggedData.getTable());
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    if (!targetNode.hasChildren()) {
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setDefaultValue(null);
      targetNode.setColumn(metaColumn);
      targetNode.setTable(table);
      targetNode.setDataType(metaColumn.getTalendType());
      linker.getXMLViewer().refresh(targetNode);
      linker.getXMLViewer().expandAll();
      Display display=linker.getSource().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getSource().getShell().setCursor(cursor);
      linker.valuedChanged(targetItem);
      linker.getSource().getShell().setCursor(null);
    }
  }
 else   if (dragdedData.size() > 0) {
    DragAndDrogDialog dialog=new DragAndDrogDialog(null);
    dialog.open();
    if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
      return;
    }
    if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_TEXT)) {
      if (targetNode.hasChildren()) {
        List<FOXTreeNode> children=targetNode.getChildren();
        for (        FOXTreeNode foxTreeNode : children) {
          if (!(foxTreeNode instanceof Attribute)) {
            MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
            return;
          }
        }
      }
 else       if (targetNode.getParent() == null) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setColumn(metaColumn);
      targetNode.setDataType(metaColumn.getTalendType());
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_SUBELEMENT)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      if (targetNode.getColumn() != null) {
        if (!MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"")) {
          return;
        }
        targetNode.setColumn(null);
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getElementChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setDataType(metaColumn.getTalendType());
            node.setTable(table);
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Element(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_ATTRIBUTE)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getAttributeChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setTable(table);
            node.setDataType(metaColumn.getTalendType());
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Attribute(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      setDefaultFixValue(targetNode);
    }
    linker.getXMLViewer().refresh();
    linker.getXMLViewer().expandAll();
    Display display=linker.getSource().getDisplay();
    Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
    linker.getSource().getShell().setCursor(cursor);
    linker.valuedChanged(targetItem);
    linker.getSource().getShell().setCursor(null);
  }
  linker.getXMLViewer().refresh();
  linker.getXMLViewer().expandAll();
  linker.updateLinksStyleAndControlsSelection(control,true);
  linker.getForm().updateConnection();
  linker.getForm().updateStatus();
}","public void drop(DropTargetEvent event){
  DropTarget dropTarget=(DropTarget)event.getSource();
  Item targetItem=(Item)event.item;
  if (targetItem == null) {
    return;
  }
  Control control=dropTarget.getControl();
  LocalDraggedData draggedData=LocalDataTransfer.getInstance().getDraggedData();
  List<Object> dragdedData=draggedData.getTransferableEntryList();
  IMetadataTable table=null;
  if (draggedData.getTable() instanceof MetadataTable) {
    table=ConvertionHelper.convert((MetadataTable)draggedData.getTable());
  }
  FOXTreeNode targetNode=(FOXTreeNode)(targetItem.getData());
  if (dragdedData.size() == 1 && isDropRelatedColumn(event)) {
    if (!targetNode.hasChildren()) {
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setDefaultValue(null);
      targetNode.setColumn(metaColumn);
      targetNode.setTable(table);
      targetNode.setDataType(metaColumn.getTalendType());
      linker.getXMLViewer().refresh(targetNode);
      linker.getXMLViewer().expandAll();
      Display display=linker.getSource().getDisplay();
      Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
      linker.getSource().getShell().setCursor(cursor);
      linker.valuedChanged(targetItem);
      linker.getSource().getShell().setCursor(null);
    }
  }
 else   if (dragdedData.size() > 0) {
    DragAndDrogDialog dialog=new DragAndDrogDialog(null);
    dialog.open();
    if (dialog.getReturnCode() == IDialogConstants.CANCEL_ID) {
      return;
    }
    if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_TEXT)) {
      if (targetNode.hasChildren()) {
        List<FOXTreeNode> children=targetNode.getChildren();
        for (        FOXTreeNode foxTreeNode : children) {
          if (!(foxTreeNode instanceof Attribute)) {
            MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
            return;
          }
        }
      }
 else       if (targetNode.getParent() == null) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)dragdedData.get(0));
      targetNode.setColumn(metaColumn);
      targetNode.setDataType(metaColumn.getTalendType());
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_SUBELEMENT)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      if (targetNode.getColumn() != null) {
        if (!MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"")) {
          return;
        }
        targetNode.setColumn(null);
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getElementChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setDataType(metaColumn.getTalendType());
            node.setTable(table);
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Element(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      if (targetNode instanceof Element && targetNode.getParent() == null && targetNode.isLoop()) {
        targetNode.setLoop(false);
      }
      setDefaultFixValue(targetNode);
    }
 else     if (dialog.getSelectValue().equals(DragAndDrogDialog.CREATE_AS_ATTRIBUTE)) {
      if (!(targetNode instanceof Element)) {
        MessageDialog.openConfirm(control.getShell(),""String_Node_Str"",""String_Node_Str"" + targetNode.getLabel() + ""String_Node_Str"");
        return;
      }
      for (      Object obj : dragdedData) {
        IMetadataColumn metaColumn=ConvertionHelper.convertToIMetaDataColumn((MetadataColumn)obj);
        boolean isContain=false;
        for (        FOXTreeNode node : ((Element)targetNode).getAttributeChildren()) {
          if (node.getLabel().equals(metaColumn.getLabel())) {
            node.setColumn(metaColumn);
            node.setTable(table);
            node.setDataType(metaColumn.getTalendType());
            setDefaultFixValue(node);
            isContain=true;
          }
        }
        if (!isContain) {
          FOXTreeNode child=new Attribute(metaColumn.getLabel());
          child.setColumn(metaColumn);
          child.setDataType(metaColumn.getTalendType());
          child.setTable(table);
          targetNode.addChild(child);
        }
      }
      setDefaultFixValue(targetNode);
    }
    linker.getXMLViewer().refresh();
    linker.getXMLViewer().expandAll();
    Display display=linker.getSource().getDisplay();
    Cursor cursor=new Cursor(display,SWT.CURSOR_WAIT);
    linker.getSource().getShell().setCursor(cursor);
    linker.valuedChanged(targetItem);
    linker.getSource().getShell().setCursor(null);
  }
  linker.getXMLViewer().refresh();
  linker.getXMLViewer().expandAll();
  linker.updateLinksStyleAndControlsSelection(control,true);
  linker.getForm().updateConnection();
  linker.getForm().updateStatus();
}",0.987373068432671
130090,"public String format(double d,String pattern){
  return String.valueOf(d);
}","public static String format(double d,String pattern){
  return String.valueOf(d);
}",0.9559748427672956
130091,"/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param AbstractConnection conn
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,String dbType){
  DatabaseMetaData dbMetaData=null;
  try {
    if (needFakeDatabaseMetaData(dbType)) {
      dbMetaData=createFakeDatabaseMetaData(conn);
    }
 else     if (ExtractMetaDataUtils.metadataCon != null && teradataNeedFakeDatabaseMetaData(dbType) && ExtractMetaDataUtils.metadataCon.isSqlMode()) {
      dbMetaData=createTeradataFakeDatabaseMetaData(conn);
      TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
      teraDbmeta.setDatabaseName(ExtractMetaDataUtils.metadataCon.getDatabase());
    }
 else     if (sasNeedFakeDatabaseMetaData(dbType)) {
      dbMetaData=createSASFakeDatabaseMetaData(conn);
    }
 else {
      dbMetaData=conn.getMetaData();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return dbMetaData;
}","/** 
 * DOC cantoine. Method to return DatabaseMetaData of a DB connection.
 * @param AbstractConnection conn
 * @return DatabaseMetaData
 */
public static DatabaseMetaData getDatabaseMetaData(Connection conn,String dbType){
  DatabaseMetaData dbMetaData=null;
  try {
    if (dbType.equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
      dbMetaData=createFakeDatabaseMetaData(conn);
    }
 else     if (ExtractMetaDataUtils.metadataCon != null && dbType.equals(EDatabaseTypeName.TERADATA.getXmlName()) && ExtractMetaDataUtils.metadataCon.isSqlMode()) {
      dbMetaData=createTeradataFakeDatabaseMetaData(conn);
      TeradataDataBaseMetadata teraDbmeta=(TeradataDataBaseMetadata)dbMetaData;
      teraDbmeta.setDatabaseName(ExtractMetaDataUtils.metadataCon.getDatabase());
    }
 else     if (dbType.equals(EDatabaseTypeName.SAS.getXmlName())) {
      dbMetaData=createSASFakeDatabaseMetaData(conn);
    }
 else {
      dbMetaData=conn.getMetaData();
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
  return dbMetaData;
}",0.9030856149500216
130092,"/** 
 * check if a FakeDatabaseMetaData is needed. only for db2 on z/os right now.
 * @param dbMetaData
 * @return
 */
public static boolean needFakeDatabaseMetaData(String dbType){
  if (dbType.equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
    return true;
  }
  return false;
}","public static boolean needFakeDatabaseMetaData(String dbType,boolean isSqlMode){
  if (dbType.equals(EDatabaseTypeName.IBMDB2ZOS.getXmlName())) {
    return true;
  }
 else   if (dbType.equals(EDatabaseTypeName.TERADATA.getXmlName()) && isSqlMode) {
    return true;
  }
 else   if (dbType.equals(EDatabaseTypeName.SAS.getXmlName())) {
    return true;
  }
  return false;
}",0.3581183611532625
130093,"/** 
 * @author cantoine
 */
public Attributes getNext() throws IOException {
  int type=1;
  boolean encoded=false;
  Attributes entry=null;
  int linenr=0;
  entry=null;
  StringBuffer dn;
  StringBuffer value=dn=null;
  String line;
  String attribute;
  String sDN;
  lastDN=line=attribute=sDN=null;
  while ((line=reader.readLine()) != null) {
    int len=line.length();
    linenr++;
    if (len <= 0 || line.charAt(0) != '#') {
      if (len > 0 && line.charAt(0) == ' ') {
        if (value == null) {
          lastDN=null;
        }
        value.append(line.substring(1));
      }
 else       if (len == 0) {
        if (attribute != null && value != null) {
          if (entry == null) {
            entry=new BasicAttributes(true);
          }
          add(entry,attribute,value.toString(),type);
          attribute=null;
          value=null;
        }
        if (dn != null && lastDN == null) {
          lastDN=getDN(dn,type);
        }
        if (entry != null) {
          return entry;
        }
      }
 else {
        int pos=line.indexOf(""String_Node_Str"");
        if (pos == -1) {
          lastDN=null;
        }
        if (dn != null && lastDN == null) {
          lastDN=getDN(dn,type);
        }
        if (attribute != null && value != null) {
          if (entry == null) {
            entry=new BasicAttributes(true);
          }
          add(entry,attribute,value.toString(),type);
        }
        int to=pos;
        int from=pos + 1;
        if (line.charAt(from) == ':') {
          if (line.charAt(from - 1) != ':') {
            type=2;
            from++;
          }
 else {
            type=1;
            from+=2;
          }
        }
 else         if (line.charAt(from) == '<') {
          type=3;
          from++;
        }
 else {
          type=1;
        }
        if (line.charAt(from) == ' ') {
          from++;
        }
        attribute=line.substring(0,to);
        value=new StringBuffer(line.substring(from));
        if (dn == null) {
          dn=value;
          attribute=null;
        }
      }
    }
  }
  return entry;
}","/** 
 * @author cantoine
 */
public Attributes getNext() throws IOException {
  int type=1;
  boolean encoded=false;
  Attributes entry=null;
  int linenr=0;
  entry=null;
  StringBuffer dn;
  StringBuffer value=dn=null;
  String line;
  String attribute;
  String sDN;
  lastDN=line=attribute=sDN=null;
  while ((line=reader.readLine()) != null) {
    int len=line.length();
    linenr++;
    if (len <= 0 || line.charAt(0) != '#' && line.charAt(0) != '-') {
      if (len > 0 && line.charAt(0) == ' ') {
        if (value == null) {
          lastDN=null;
        }
        value.append(line.substring(1));
      }
 else       if (len == 0) {
        if (attribute != null && value != null) {
          if (entry == null) {
            entry=new BasicAttributes(true);
          }
          add(entry,attribute,value.toString(),type);
          attribute=null;
          value=null;
        }
        if (dn != null && lastDN == null) {
          lastDN=getDN(dn,type);
        }
        if (entry != null) {
          return entry;
        }
      }
 else {
        int pos=line.indexOf(""String_Node_Str"");
        if (pos == -1) {
          lastDN=null;
        }
        if (dn != null && lastDN == null) {
          lastDN=getDN(dn,type);
        }
        if (attribute != null && value != null) {
          if (entry == null) {
            entry=new BasicAttributes(true);
          }
          add(entry,attribute,value.toString(),type);
        }
        int to=pos;
        int from=pos + 1;
        if (line.charAt(from) == ':') {
          if (line.charAt(from - 1) != ':') {
            type=2;
            from++;
          }
 else {
            type=1;
            from+=2;
          }
        }
 else         if (line.charAt(from) == '<') {
          type=3;
          from++;
        }
 else {
          type=1;
        }
        if (line.charAt(from) == ' ') {
          from++;
        }
        attribute=line.substring(0,to);
        value=new StringBuffer(line.substring(from));
        if (dn == null) {
          dn=value;
          attribute=null;
        }
      }
    }
  }
  return entry;
}",0.984096843104676
130094,"public static String addQuotesWithSpaceFieldForSQLStringForce(String fieldName,String dbType,boolean simple){
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  final String quote=getQuoteByDBType(name);
  boolean isCheck=false;
  String preferenceValue=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  isCheck=Boolean.parseBoolean(preferenceValue);
  String temp=removeQuotes(fieldName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(temp);
  boolean isSqlKeyword=KeywordsValidator.isSqlKeyword(temp,name.getProduct());
  boolean isH2=EDatabaseTypeName.H2 == name;
  if (((!matcher.matches() || isSqlKeyword) && !isH2 && EDatabaseTypeName.SAS != name && EDatabaseTypeName.IMPALA != name) || isIBMDB2ContainLowerCase(dbType,fieldName)) {
    isCheck=true;
  }
  if (!isCheck && isPSQLSimilar(name) && !EDatabaseTypeName.MYSQL.equals(name)) {
    return fieldName;
  }
  String newFieldName=fieldName;
  newFieldName=TalendQuoteUtils.addQuotesForSQLString(newFieldName,quote,simple);
  return newFieldName;
}","public static String addQuotesWithSpaceFieldForSQLStringForce(String fieldName,String dbType,boolean simple){
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  final String quote=getQuoteByDBType(name);
  boolean isCheck=false;
  String preferenceValue=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  isCheck=Boolean.parseBoolean(preferenceValue);
  String temp=removeQuotes(fieldName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(temp);
  Pattern pattern2=Pattern.compile(""String_Node_Str"");
  Matcher matcher2=pattern2.matcher(temp);
  boolean isSqlKeyword=KeywordsValidator.isSqlKeyword(temp,name.getProduct());
  boolean isH2=EDatabaseTypeName.H2 == name;
  if (((!matcher.matches() || matcher2.matches() || isSqlKeyword) && !isH2 && EDatabaseTypeName.SAS != name && EDatabaseTypeName.IMPALA != name) || isIBMDB2ContainLowerCase(dbType,fieldName)) {
    isCheck=true;
  }
  if (!isCheck && isPSQLSimilar(name) && !EDatabaseTypeName.MYSQL.equals(name)) {
    return fieldName;
  }
  String newFieldName=fieldName;
  newFieldName=TalendQuoteUtils.addQuotesForSQLString(newFieldName,quote,simple);
  return newFieldName;
}",0.9491094147582696
130095,"public TableNode(){
  children=new ArrayList<TableNode>();
}","public TableNode(){
  children=new ArrayList<TableNode>();
  columnDataList=new ArrayList<Object>();
}",0.7407407407407407
130096,"private void updateLeafItem(final TreeItem treeItem,boolean promptNeeded,int nodeType){
  if (treeItem == null) {
    return;
  }
  Object data=treeItem.getData();
  if (data != null && data instanceof TableNode) {
    treeItem.setChecked(promptNeeded);
    TableNode tableNode=(TableNode)data;
    if (tableNode.getType() == nodeType) {
      if (promptNeeded) {
        MetadataTable existTable=getExistTable(treeItem.getText(0));
        if (existTable != null) {
          refreshExistItem(existTable,treeItem);
        }
 else {
          treeItem.setText(2,""String_Node_Str"");
          treeItem.setText(3,Messages.getString(""String_Node_Str""));
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(treeItem,-1);
        }
      }
 else {
        clearTableItem(treeItem);
        if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
          countPending--;
        }
      }
    }
 else {
      if (!treeItem.getExpanded()) {
        viewer.expandToLevel(tableNode,1);
      }
      for (      TreeItem colItem : treeItem.getItems()) {
        updateLeafItem(colItem,promptNeeded,nodeType);
      }
    }
  }
}","private void updateLeafItem(final TreeItem treeItem,boolean promptNeeded,int nodeType){
  if (treeItem == null) {
    return;
  }
  Object data=treeItem.getData();
  if (data != null && data instanceof TableNode) {
    treeItem.setChecked(promptNeeded);
    TableNode tableNode=(TableNode)data;
    if (tableNode.getType() == nodeType) {
      if (promptNeeded) {
        MetadataTable existTable=getExistTable(treeItem.getText(0));
        if (existTable != null) {
          refreshExistItem(existTable,treeItem);
        }
 else {
          treeItem.setText(2,""String_Node_Str"");
          treeItem.setText(3,Messages.getString(""String_Node_Str""));
          refreshColumnData(tableNode,treeItem);
          countPending++;
          parentWizardPage.setPageComplete(false);
          refreshTable(treeItem,-1);
        }
      }
 else {
        clearTableItem(treeItem);
        if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
          countPending--;
        }
      }
    }
 else {
      if (!treeItem.getExpanded()) {
        viewer.expandToLevel(tableNode,1);
      }
      for (      TreeItem colItem : treeItem.getItems()) {
        updateLeafItem(colItem,promptNeeded,nodeType);
      }
    }
  }
}",0.9802339653085922
130097,"@Override public void run(){
  orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
  boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
  if (confirm) {
    TreeItem existItem=getExistItem(existTable);
    TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
    if (existItem == null) {
      if (existTableItem == null) {
        return;
      }
 else {
        clearTableItem(existTableItem,true);
      }
    }
 else {
      clearTableItem(existItem);
      existItem.setChecked(false);
    }
    item.setText(3,Messages.getString(""String_Node_Str""));
    countPending++;
    parentWizardPage.setPageComplete(false);
    refreshTable(item,-1);
  }
 else {
    item.setChecked(false);
    boolean hasCheckedItem=false;
    TreeItem parentItem=item.getParentItem();
    if (parentItem != null) {
      for (      TreeItem i : parentItem.getItems()) {
        if (i.getChecked()) {
          hasCheckedItem=true;
          break;
        }
      }
    }
    if (!hasCheckedItem && parentItem != null) {
      parentItem.setChecked(false);
    }
  }
}","@Override public void run(){
  orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
  boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
  if (confirm) {
    TreeItem existItem=getExistItem(existTable);
    TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
    if (existItem == null) {
      if (existTableItem == null) {
        return;
      }
 else {
        clearTableItem(existTableItem,true);
      }
    }
 else {
      clearTableItem(existItem);
      existItem.setChecked(false);
    }
    item.setText(3,Messages.getString(""String_Node_Str""));
    refreshColumnData(existTableItem,item);
    countPending++;
    parentWizardPage.setPageComplete(false);
    refreshTable(item,-1);
  }
 else {
    item.setChecked(false);
    boolean hasCheckedItem=false;
    TreeItem parentItem=item.getParentItem();
    if (parentItem != null) {
      for (      TreeItem i : parentItem.getItems()) {
        if (i.getChecked()) {
          hasCheckedItem=true;
          break;
        }
      }
    }
    if (!hasCheckedItem && parentItem != null) {
      parentItem.setChecked(false);
    }
  }
}",0.9829589465530596
130098,"/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TreeItem treeItem=(TreeItem)e.item;
        Object data=treeItem.getData();
        TableNode tableNode=(TableNode)data;
        int type=tableNode.getType();
        boolean promptNeeded=treeItem.getChecked();
        if (useProvider()) {
          if (type != TableNode.COLUMN) {
            treeItem.setGrayed(true);
          }
          if (type == TableNode.TABLE) {
            viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
            for (            TreeItem childItem : treeItem.getItems()) {
              if (childItem.getData() != null) {
                TableNode childNode=(TableNode)childItem.getData();
                int childNodeType=childNode.getType();
                if (childNodeType == TableNode.COLUMN_FAMILY) {
                  childItem.setChecked(promptNeeded);
                  for (                  TreeItem colItem : childItem.getItems()) {
                    updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
                  }
                }
 else                 if (childNodeType == TableNode.COLUMN) {
                  updateLeafItem(childItem,promptNeeded,TableNode.COLUMN);
                }
              }
            }
          }
 else           if (type == TableNode.COLUMN_FAMILY) {
            viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
            for (            TreeItem colItem : treeItem.getItems()) {
              updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
            }
          }
 else           if (type == TableNode.COLUMN) {
            updateLeafItem(treeItem,promptNeeded,TableNode.COLUMN);
          }
        }
 else {
          if (type != TableNode.TABLE) {
            treeItem.setGrayed(true);
          }
          if (type == TableNode.CATALOG) {
            for (            TreeItem schemaItem : treeItem.getItems()) {
              if (schemaItem.getData() != null) {
                int t=((TableNode)schemaItem.getData()).getType();
                if (t == TableNode.SCHEMA) {
                  for (                  TreeItem tableItem : schemaItem.getItems()) {
                    updateItem(tableItem,promptNeeded,true);
                  }
                }
 else                 if (t == TableNode.TABLE) {
                  updateItem(schemaItem,promptNeeded,true);
                }
              }
            }
          }
 else           if (type == TableNode.SCHEMA) {
            for (            TreeItem tableItem : treeItem.getItems()) {
              updateItem(tableItem,promptNeeded,true);
            }
          }
 else           if (type == TableNode.TABLE) {
            if (promptNeeded) {
              MetadataTable existTable=getExistTable(treeItem.getText(0));
              if (existTable != null) {
                refreshExistItem(existTable,treeItem);
              }
 else {
                treeItem.setText(2,""String_Node_Str"");
                treeItem.setText(3,Messages.getString(""String_Node_Str""));
                countPending++;
                parentWizardPage.setPageComplete(false);
                refreshTable(treeItem,-1);
              }
            }
 else {
              clearTableItem(treeItem);
              if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
                countPending--;
              }
            }
          }
        }
        boolean pageC=pageComplete();
        if (pageC) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}","/** 
 * DOC qzhang Comment method ""addTableListener"".
 */
private void addTableListener(){
  tree.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      if (e.detail == SWT.CHECK) {
        TreeItem treeItem=(TreeItem)e.item;
        Object data=treeItem.getData();
        TableNode tableNode=(TableNode)data;
        int type=tableNode.getType();
        boolean promptNeeded=treeItem.getChecked();
        if (useProvider()) {
          if (type != TableNode.COLUMN) {
            treeItem.setGrayed(true);
          }
          if (type == TableNode.TABLE) {
            viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
            for (            TreeItem childItem : treeItem.getItems()) {
              if (childItem.getData() != null) {
                TableNode childNode=(TableNode)childItem.getData();
                int childNodeType=childNode.getType();
                if (childNodeType == TableNode.COLUMN_FAMILY) {
                  childItem.setChecked(promptNeeded);
                  for (                  TreeItem colItem : childItem.getItems()) {
                    updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
                  }
                }
 else                 if (childNodeType == TableNode.COLUMN) {
                  updateLeafItem(childItem,promptNeeded,TableNode.COLUMN);
                }
              }
            }
          }
 else           if (type == TableNode.COLUMN_FAMILY) {
            viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
            for (            TreeItem colItem : treeItem.getItems()) {
              updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
            }
          }
 else           if (type == TableNode.COLUMN) {
            updateLeafItem(treeItem,promptNeeded,TableNode.COLUMN);
          }
        }
 else {
          if (type != TableNode.TABLE) {
            treeItem.setGrayed(true);
          }
          if (type == TableNode.CATALOG) {
            for (            TreeItem schemaItem : treeItem.getItems()) {
              if (schemaItem.getData() != null) {
                int t=((TableNode)schemaItem.getData()).getType();
                if (t == TableNode.SCHEMA) {
                  for (                  TreeItem tableItem : schemaItem.getItems()) {
                    updateItem(tableItem,promptNeeded,true);
                  }
                }
 else                 if (t == TableNode.TABLE) {
                  updateItem(schemaItem,promptNeeded,true);
                }
              }
            }
          }
 else           if (type == TableNode.SCHEMA) {
            for (            TreeItem tableItem : treeItem.getItems()) {
              updateItem(tableItem,promptNeeded,true);
            }
          }
 else           if (type == TableNode.TABLE) {
            if (promptNeeded) {
              MetadataTable existTable=getExistTable(treeItem.getText(0));
              if (existTable != null) {
                refreshExistItem(existTable,treeItem);
              }
 else {
                treeItem.setText(2,""String_Node_Str"");
                treeItem.setText(3,Messages.getString(""String_Node_Str""));
                refreshColumnData(tableNode,treeItem);
                countPending++;
                parentWizardPage.setPageComplete(false);
                refreshTable(treeItem,-1);
              }
            }
 else {
              clearTableItem(treeItem);
              if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
                countPending--;
              }
            }
          }
        }
        boolean pageC=pageComplete();
        if (pageC) {
          parentWizardPage.setPageComplete(false);
        }
      }
    }
  }
);
}",0.9927906671909816
130099,"private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
        if (existItem == null) {
          if (existTableItem == null) {
            return;
          }
 else {
            clearTableItem(existTableItem,true);
          }
        }
 else {
          clearTableItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(3,Messages.getString(""String_Node_Str""));
        countPending++;
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem && parentItem != null) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}","private void refreshExistItem(final MetadataTable existTable,final TreeItem item){
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      orgomg.cwm.objectmodel.core.Package pack=(orgomg.cwm.objectmodel.core.Package)existTable.eContainer();
      boolean confirm=MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + existTable.getLabel() + ""String_Node_Str""+ pack.getName()+ ""String_Node_Str"");
      if (confirm) {
        TreeItem existItem=getExistItem(existTable);
        TableNode existTableItem=getExistCheckedTable((TableNode)item.getData());
        if (existItem == null) {
          if (existTableItem == null) {
            return;
          }
 else {
            clearTableItem(existTableItem,true);
          }
        }
 else {
          clearTableItem(existItem);
          existItem.setChecked(false);
        }
        item.setText(3,Messages.getString(""String_Node_Str""));
        refreshColumnData(existTableItem,item);
        countPending++;
        parentWizardPage.setPageComplete(false);
        refreshTable(item,-1);
      }
 else {
        item.setChecked(false);
        boolean hasCheckedItem=false;
        TreeItem parentItem=item.getParentItem();
        if (parentItem != null) {
          for (          TreeItem i : parentItem.getItems()) {
            if (i.getChecked()) {
              hasCheckedItem=true;
              break;
            }
          }
        }
        if (!hasCheckedItem && parentItem != null) {
          parentItem.setChecked(false);
        }
      }
    }
  }
);
}",0.984858044164038
130100,"/** 
 * refreshTable. This Methos execute the CreateTable in a Thread task.
 * @param tableItem
 * @param size
 */
private void refreshTable(final TreeItem treeItem,final int size){
  if (threadExecutor == null) {
    return;
  }
  if (!threadExecutor.isThreadRunning(treeItem) && !useProvider()) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == TableNode.TABLE) {
      IMetadataConnection metadataConn=getIMetadataConnection();
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConn);
          RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem);
          String value=node.getValue();
          if (!(isExistingNames(value))) {
            threadExecutor.execute(runnable);
          }
        }
 catch (        ClassNotFoundException e) {
          e.printStackTrace();
        }
catch (        InstantiationException e) {
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        SQLException e) {
          e.printStackTrace();
        }
      }
 else {
        if (managerConnection.check(getIMetadataConnection(),true)) {
          RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem);
          String value=node.getValue();
          if (!(isExistingNames(value))) {
            threadExecutor.execute(runnable);
          }
        }
      }
    }
  }
 else   if (useProvider() && !threadExecutor.isThreadRunning(treeItem)) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == provider.getRunnableAccessNodeType()) {
      RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem){
        @Override public void run(){
          if (isCanceled()) {
            return;
          }
          checkConnectionIsDone=true;
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              provider.executeInRunnable(metadataconnection,treeItem.getData(),getConnection());
              if (isCanceled()) {
                return;
              }
              updateUIInThreadIfThread();
            }
          }
);
        }
        @Override public void updateUIInThreadIfThread(){
          if (treeItem.isDisposed()) {
            return;
          }
          if (checkConnectionIsDone) {
            treeItem.setText(3,Messages.getString(""String_Node_Str""));
            countSuccess++;
          }
 else {
            updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
            new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
          }
          count++;
          updateStatus(IStatus.OK,null);
          parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
        }
      }
;
      String value=node.getValue();
      if (!(isExistingNames(value))) {
        threadExecutor.execute(runnable);
      }
    }
  }
 else {
    RetrieveColumnRunnable runnable=threadExecutor.getRunnable(treeItem);
    runnable.setCanceled(false);
  }
}","/** 
 * refreshTable. This Methos execute the CreateTable in a Thread task.
 * @param tableItem
 * @param size
 */
private void refreshTable(final TreeItem treeItem,final int size){
  if (threadExecutor == null) {
    return;
  }
  if (!threadExecutor.isThreadRunning(treeItem) && !useProvider()) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == TableNode.TABLE) {
      IMetadataConnection metadataConn=getIMetadataConnection();
      if (EDatabaseTypeName.HIVE.getXmlName().equalsIgnoreCase(metadataConn.getDbType())) {
        try {
          HiveConnectionManager.getInstance().checkConnection(metadataConn);
          RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem);
          String value=node.getValue();
          if (!(isExistingNames(value))) {
            threadExecutor.execute(runnable);
          }
        }
 catch (        ClassNotFoundException e) {
          e.printStackTrace();
        }
catch (        InstantiationException e) {
          e.printStackTrace();
        }
catch (        IllegalAccessException e) {
          e.printStackTrace();
        }
catch (        SQLException e) {
          e.printStackTrace();
        }
      }
 else {
        if (managerConnection.check(getIMetadataConnection(),true)) {
          RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem);
          String value=node.getValue();
          if (!(isExistingNames(value))) {
            threadExecutor.execute(runnable);
          }
        }
      }
    }
  }
 else   if (useProvider() && !threadExecutor.isThreadRunning(treeItem)) {
    TableNode node=(TableNode)treeItem.getData();
    if (node.getType() == provider.getRunnableAccessNodeType()) {
      RetrieveColumnRunnable runnable=new RetrieveColumnRunnable(treeItem){
        @Override public void run(){
          if (isCanceled()) {
            return;
          }
          checkConnectionIsDone=true;
          Display.getDefault().syncExec(new Runnable(){
            @Override public void run(){
              provider.executeInRunnable(metadataconnection,treeItem.getData(),getConnection());
              if (isCanceled()) {
                return;
              }
              updateUIInThreadIfThread();
            }
          }
);
        }
        @Override public void updateUIInThreadIfThread(){
          if (treeItem.isDisposed()) {
            return;
          }
          if (checkConnectionIsDone) {
            treeItem.setText(3,Messages.getString(""String_Node_Str""));
            countSuccess++;
          }
 else {
            updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
            new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
          }
          refreshColumnData(tableNode,treeItem);
          count++;
          updateStatus(IStatus.OK,null);
          parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
        }
      }
;
      String value=node.getValue();
      if (!(isExistingNames(value))) {
        threadExecutor.execute(runnable);
      }
    }
  }
 else {
    RetrieveColumnRunnable runnable=threadExecutor.getRunnable(treeItem);
    runnable.setCanceled(false);
  }
}",0.9926193703871063
130101,"/** 
 * wzhang Comment method ""updateItem"".
 * @param item
 * @param checked
 */
private void updateItem(final TreeItem item,boolean checked,boolean isEvent){
  if (item == null) {
    return;
  }
  Object data=item.getData();
  if (data != null && data instanceof TableNode) {
    TableNode tableNode=(TableNode)data;
    if (tableNode.getType() == TableNode.TABLE) {
      String pattern=getNameFilter();
      SearchPattern matcher=new SearchPattern();
      matcher.setPattern(pattern);
      if (!matcher.matches(tableNode.getValue())) {
        return;
      }
      if (isEvent) {
        Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
        for (        MetadataTable table : tables) {
          if (table.getLabel().equals(tableNode.getValue())) {
            item.setChecked(true);
          }
        }
        item.setChecked(!checked);
      }
      if (checked) {
        if (!item.getChecked()) {
          MetadataTable existTable=getExistTable(item.getText(0));
          if (existTable != null) {
            refreshExistItem(existTable,item);
          }
 else {
            item.setText(3,Messages.getString(""String_Node_Str""));
            countPending++;
            parentWizardPage.setPageComplete(false);
            refreshTable(item,-1);
          }
        }
 else {
          updateStatus(IStatus.OK,null);
        }
        item.setChecked(true);
      }
 else {
        if (item.getChecked()) {
          clearTableItem(item);
          item.setChecked(false);
        }
      }
    }
  }
}","/** 
 * wzhang Comment method ""updateItem"".
 * @param item
 * @param checked
 */
private void updateItem(final TreeItem item,boolean checked,boolean isEvent){
  if (item == null) {
    return;
  }
  Object data=item.getData();
  if (data != null && data instanceof TableNode) {
    TableNode tableNode=(TableNode)data;
    if (tableNode.getType() == TableNode.TABLE) {
      String pattern=getNameFilter();
      SearchPattern matcher=new SearchPattern();
      matcher.setPattern(pattern);
      if (!matcher.matches(tableNode.getValue())) {
        return;
      }
      if (isEvent) {
        Set<MetadataTable> tables=ConnectionHelper.getTables(getConnection());
        for (        MetadataTable table : tables) {
          if (table.getLabel().equals(tableNode.getValue())) {
            item.setChecked(true);
          }
        }
        item.setChecked(!checked);
      }
      if (checked) {
        if (!item.getChecked()) {
          MetadataTable existTable=getExistTable(item.getText(0));
          if (existTable != null) {
            refreshExistItem(existTable,item);
          }
 else {
            item.setText(3,Messages.getString(""String_Node_Str""));
            refreshColumnData(tableNode,item);
            countPending++;
            parentWizardPage.setPageComplete(false);
            refreshTable(item,-1);
          }
        }
 else {
          updateStatus(IStatus.OK,null);
        }
        item.setChecked(true);
      }
 else {
        if (item.getChecked()) {
          clearTableItem(item);
          item.setChecked(false);
        }
      }
    }
  }
}",0.9850366125437758
130102,"/** 
 * createTable.
 * @param tableItem
 */
protected void createTable(TreeItem tableItem){
  String tableString=tableItem.getText(0);
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection(),true);
  if (!checkConnectionIsDone) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_TABLE.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
 else     if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_VIEW.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdView();
    }
 else {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
    dbtable.getTaggedValue().add(CoreFactory.eINSTANCE.createTaggedValue());
    List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
    metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableItem.getText(0));
    tableItem.setText(2,""String_Node_Str"" + metadataColumns.size());
    tableItem.setText(3,Messages.getString(""String_Node_Str""));
    countSuccess++;
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    initExistingNames();
    String labelName=IndiceHelper.getIndexedLabel(tableString,existingNames);
    if (forTemplate) {
      labelName=MetadataToolHelper.validateValue(labelName);
    }
    dbtable.setLabel(labelName);
    dbtable.setSourceName(tableItem.getText(0));
    dbtable.setId(factory.getNextId());
    dbtable.setTableType(ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString));
    List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
    Iterator iterate=metadataColumns.iterator();
    while (iterate.hasNext()) {
      MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
      metadataColumnsValid.add(metadataColumn);
      dbtable.getColumns().add(metadataColumn);
    }
    if (!ConnectionHelper.getTables(getConnection()).contains(dbtable) && !limitTemplateTable(dbtable)) {
      Catalog c=(Catalog)ConnectionHelper.getPackage((getConnection().getSID()),getConnection(),Catalog.class);
      if (c != null) {
        PackageHelper.addMetadataTable(dbtable,c);
      }
 else {
        Schema s=(Schema)ConnectionHelper.getPackage((getConnection().getSID()),getConnection(),Schema.class);
        if (s != null) {
          PackageHelper.addMetadataTable(dbtable,s);
        }
      }
    }
  }
}","/** 
 * createTable.
 * @param tableItem
 */
protected void createTable(TreeItem tableItem){
  String tableString=tableItem.getText(0);
  boolean checkConnectionIsDone=managerConnection.check(getIMetadataConnection(),true);
  if (!checkConnectionIsDone) {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
 else {
    if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_TABLE.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
 else     if (ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString).equals(ETableTypes.TABLETYPE_VIEW.getName())) {
      dbtable=RelationalFactory.eINSTANCE.createTdView();
    }
 else {
      dbtable=RelationalFactory.eINSTANCE.createTdTable();
    }
    dbtable.getTaggedValue().add(CoreFactory.eINSTANCE.createTaggedValue());
    List<TdColumn> metadataColumns=new ArrayList<TdColumn>();
    metadataColumns=ExtractMetaDataFromDataBase.returnMetadataColumnsFormTable(metadataconnection,tableItem.getText(0));
    tableItem.setText(2,""String_Node_Str"" + metadataColumns.size());
    tableItem.setText(3,Messages.getString(""String_Node_Str""));
    refreshColumnData((TableNode)tableItem.getData(),tableItem);
    countSuccess++;
    IProxyRepositoryFactory factory=ProxyRepositoryFactory.getInstance();
    initExistingNames();
    String labelName=IndiceHelper.getIndexedLabel(tableString,existingNames);
    if (forTemplate) {
      labelName=MetadataToolHelper.validateValue(labelName);
    }
    dbtable.setLabel(labelName);
    dbtable.setSourceName(tableItem.getText(0));
    dbtable.setId(factory.getNextId());
    dbtable.setTableType(ExtractMetaDataFromDataBase.getTableTypeByTableName(tableString));
    List<MetadataColumn> metadataColumnsValid=new ArrayList<MetadataColumn>();
    Iterator iterate=metadataColumns.iterator();
    while (iterate.hasNext()) {
      MetadataColumn metadataColumn=(MetadataColumn)iterate.next();
      metadataColumnsValid.add(metadataColumn);
      dbtable.getColumns().add(metadataColumn);
    }
    if (!ConnectionHelper.getTables(getConnection()).contains(dbtable) && !limitTemplateTable(dbtable)) {
      Catalog c=(Catalog)ConnectionHelper.getPackage((getConnection().getSID()),getConnection(),Catalog.class);
      if (c != null) {
        PackageHelper.addMetadataTable(dbtable,c);
      }
 else {
        Schema s=(Schema)ConnectionHelper.getPackage((getConnection().getSID()),getConnection(),Schema.class);
        if (s != null) {
          PackageHelper.addMetadataTable(dbtable,s);
        }
      }
    }
  }
}",0.9879829913107784
130103,"private void refreshItem(TreeItem item){
  if (item != null && item.getData() != null) {
    int type=((TableNode)item.getData()).getType();
    if (type == TableNode.TABLE) {
      item.setChecked(false);
      if (item.getData() != null) {
        TableNode node=(TableNode)item.getData();
        if (isExistTable(node)) {
          item.setChecked(true);
          Integer num=tableColumnNums.get(item.getText(0));
          if (num != null) {
            item.setText(2,num.toString());
            item.setText(3,Messages.getString(""String_Node_Str""));
          }
 else {
            refreshTable(item,-1);
          }
        }
      }
    }
  }
}","private void refreshItem(TreeItem item){
  if (item != null && item.getData() != null) {
    int type=((TableNode)item.getData()).getType();
    if (type == TableNode.TABLE) {
      item.setChecked(false);
      if (item.getData() != null) {
        TableNode node=(TableNode)item.getData();
        if (isExistTable(node)) {
          item.setChecked(true);
          Integer num=tableColumnNums.get(item.getText(0));
          if (num != null) {
            item.setText(2,num.toString());
            item.setText(3,Messages.getString(""String_Node_Str""));
            refreshColumnData(node,item);
          }
 else {
            refreshTable(item,-1);
          }
        }
      }
    }
  }
}",0.9689349112426036
130104,"@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TreeItem treeItem=(TreeItem)e.item;
    Object data=treeItem.getData();
    TableNode tableNode=(TableNode)data;
    int type=tableNode.getType();
    boolean promptNeeded=treeItem.getChecked();
    if (useProvider()) {
      if (type != TableNode.COLUMN) {
        treeItem.setGrayed(true);
      }
      if (type == TableNode.TABLE) {
        viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
        for (        TreeItem childItem : treeItem.getItems()) {
          if (childItem.getData() != null) {
            TableNode childNode=(TableNode)childItem.getData();
            int childNodeType=childNode.getType();
            if (childNodeType == TableNode.COLUMN_FAMILY) {
              childItem.setChecked(promptNeeded);
              for (              TreeItem colItem : childItem.getItems()) {
                updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
              }
            }
 else             if (childNodeType == TableNode.COLUMN) {
              updateLeafItem(childItem,promptNeeded,TableNode.COLUMN);
            }
          }
        }
      }
 else       if (type == TableNode.COLUMN_FAMILY) {
        viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
        for (        TreeItem colItem : treeItem.getItems()) {
          updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
        }
      }
 else       if (type == TableNode.COLUMN) {
        updateLeafItem(treeItem,promptNeeded,TableNode.COLUMN);
      }
    }
 else {
      if (type != TableNode.TABLE) {
        treeItem.setGrayed(true);
      }
      if (type == TableNode.CATALOG) {
        for (        TreeItem schemaItem : treeItem.getItems()) {
          if (schemaItem.getData() != null) {
            int t=((TableNode)schemaItem.getData()).getType();
            if (t == TableNode.SCHEMA) {
              for (              TreeItem tableItem : schemaItem.getItems()) {
                updateItem(tableItem,promptNeeded,true);
              }
            }
 else             if (t == TableNode.TABLE) {
              updateItem(schemaItem,promptNeeded,true);
            }
          }
        }
      }
 else       if (type == TableNode.SCHEMA) {
        for (        TreeItem tableItem : treeItem.getItems()) {
          updateItem(tableItem,promptNeeded,true);
        }
      }
 else       if (type == TableNode.TABLE) {
        if (promptNeeded) {
          MetadataTable existTable=getExistTable(treeItem.getText(0));
          if (existTable != null) {
            refreshExistItem(existTable,treeItem);
          }
 else {
            treeItem.setText(2,""String_Node_Str"");
            treeItem.setText(3,Messages.getString(""String_Node_Str""));
            countPending++;
            parentWizardPage.setPageComplete(false);
            refreshTable(treeItem,-1);
          }
        }
 else {
          clearTableItem(treeItem);
          if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            countPending--;
          }
        }
      }
    }
    boolean pageC=pageComplete();
    if (pageC) {
      parentWizardPage.setPageComplete(false);
    }
  }
}","@Override public void widgetSelected(final SelectionEvent e){
  if (e.detail == SWT.CHECK) {
    TreeItem treeItem=(TreeItem)e.item;
    Object data=treeItem.getData();
    TableNode tableNode=(TableNode)data;
    int type=tableNode.getType();
    boolean promptNeeded=treeItem.getChecked();
    if (useProvider()) {
      if (type != TableNode.COLUMN) {
        treeItem.setGrayed(true);
      }
      if (type == TableNode.TABLE) {
        viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
        for (        TreeItem childItem : treeItem.getItems()) {
          if (childItem.getData() != null) {
            TableNode childNode=(TableNode)childItem.getData();
            int childNodeType=childNode.getType();
            if (childNodeType == TableNode.COLUMN_FAMILY) {
              childItem.setChecked(promptNeeded);
              for (              TreeItem colItem : childItem.getItems()) {
                updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
              }
            }
 else             if (childNodeType == TableNode.COLUMN) {
              updateLeafItem(childItem,promptNeeded,TableNode.COLUMN);
            }
          }
        }
      }
 else       if (type == TableNode.COLUMN_FAMILY) {
        viewer.expandToLevel(tableNode,AbstractTreeViewer.ALL_LEVELS);
        for (        TreeItem colItem : treeItem.getItems()) {
          updateLeafItem(colItem,promptNeeded,TableNode.COLUMN);
        }
      }
 else       if (type == TableNode.COLUMN) {
        updateLeafItem(treeItem,promptNeeded,TableNode.COLUMN);
      }
    }
 else {
      if (type != TableNode.TABLE) {
        treeItem.setGrayed(true);
      }
      if (type == TableNode.CATALOG) {
        for (        TreeItem schemaItem : treeItem.getItems()) {
          if (schemaItem.getData() != null) {
            int t=((TableNode)schemaItem.getData()).getType();
            if (t == TableNode.SCHEMA) {
              for (              TreeItem tableItem : schemaItem.getItems()) {
                updateItem(tableItem,promptNeeded,true);
              }
            }
 else             if (t == TableNode.TABLE) {
              updateItem(schemaItem,promptNeeded,true);
            }
          }
        }
      }
 else       if (type == TableNode.SCHEMA) {
        for (        TreeItem tableItem : treeItem.getItems()) {
          updateItem(tableItem,promptNeeded,true);
        }
      }
 else       if (type == TableNode.TABLE) {
        if (promptNeeded) {
          MetadataTable existTable=getExistTable(treeItem.getText(0));
          if (existTable != null) {
            refreshExistItem(existTable,treeItem);
          }
 else {
            treeItem.setText(2,""String_Node_Str"");
            treeItem.setText(3,Messages.getString(""String_Node_Str""));
            refreshColumnData(tableNode,treeItem);
            countPending++;
            parentWizardPage.setPageComplete(false);
            refreshTable(treeItem,-1);
          }
        }
 else {
          clearTableItem(treeItem);
          if (treeItem.getText() != null && treeItem.getText().equals(Messages.getString(""String_Node_Str""))) {
            countPending--;
          }
        }
      }
    }
    boolean pageC=pageComplete();
    if (pageC) {
      parentWizardPage.setPageComplete(false);
    }
  }
}",0.9922267946959304
130105,"@Override public void updateUIInThreadIfThread(){
  if (treeItem.isDisposed()) {
    return;
  }
  if (checkConnectionIsDone) {
    treeItem.setText(3,Messages.getString(""String_Node_Str""));
    countSuccess++;
  }
 else {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
  count++;
  updateStatus(IStatus.OK,null);
  parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
}","@Override public void updateUIInThreadIfThread(){
  if (treeItem.isDisposed()) {
    return;
  }
  if (checkConnectionIsDone) {
    treeItem.setText(3,Messages.getString(""String_Node_Str""));
    countSuccess++;
  }
 else {
    updateStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
    new ErrorDialogWidthDetailArea(getShell(),PID,Messages.getString(""String_Node_Str""),managerConnection.getMessageException());
  }
  refreshColumnData(tableNode,treeItem);
  count++;
  updateStatus(IStatus.OK,null);
  parentWizardPage.setPageComplete(threadExecutor.getQueue().isEmpty() && (threadExecutor.getActiveCount() == 0 || countSuccess == countPending));
}",0.9680933852140078
130106,"@Override public String getColumnText(Object element,int columnIndex){
  TableNode tableNode=(TableNode)element;
  int type=tableNode.getType();
switch (columnIndex) {
case 0:
    String value=tableNode.getValue();
  if (value == null) {
    return ""String_Node_Str"";
  }
return value;
case 1:
if (type == TableNode.CATALOG) {
return ""String_Node_Str"";
}
 else if (type == TableNode.SCHEMA) {
return ""String_Node_Str"";
}
 else {
return tableNode.getItemType();
}
default :
return ""String_Node_Str"";
}
}","@Override public String getColumnText(Object element,int columnIndex){
  TableNode tableNode=(TableNode)element;
  int type=tableNode.getType();
  List<Object> columnData=tableNode.getColumnDataList();
switch (columnIndex) {
case 0:
    String value=tableNode.getValue();
  if (value == null) {
    return ""String_Node_Str"";
  }
return value;
case 1:
if (type == TableNode.CATALOG) {
return ""String_Node_Str"";
}
 else if (type == TableNode.SCHEMA) {
return ""String_Node_Str"";
}
 else {
return tableNode.getItemType();
}
default :
if (columnData != null && columnIndex < columnData.size()) {
Object columnObj=columnData.get(columnIndex);
if (columnObj != null) {
return columnObj.toString();
}
}
return ""String_Node_Str"";
}
}",0.8189233278955954
130107,"private ConnectionUserPerReader(){
  proper=new EncryptedProperties();
  isRead=false;
  path=new Path(Platform.getConfigurationLocation().getURL().getPath()).toFile().getAbsolutePath();
  String tmp=String.valueOf(path.charAt(path.length() - 1));
  if (!tmp.equals(File.separator)) {
    perfile=new File(path + File.separator + perfileName);
  }
 else {
    perfile=new File(path + perfileName);
  }
}","private ConnectionUserPerReader(){
  proper=new EncryptedProperties();
  isRead=false;
  path=new Path(Platform.getInstanceLocation().getURL().getPath()).toFile().getAbsolutePath();
  String tmp=String.valueOf(path.charAt(path.length() - 1));
  if (!tmp.equals(File.separator)) {
    perfile=new File(path + File.separator + perfileName);
  }
 else {
    perfile=new File(path + perfileName);
  }
}",0.9737827715355806
130108,"public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam,StringBuffer retProposedSchema){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final String product=EDatabaseTypeName.getTypeFromDisplayName(dbType).getProduct();
      final boolean equals=EDatabaseTypeName.ORACLEFORSID.getProduct().equals(product) || EDatabaseTypeName.TERADATA.getProduct().equals(product) || EDatabaseTypeName.VERTICA.getProduct().equals(product);
      if (!checkSchemaConnection(schema,connection,equals,dbType,retProposedSchema)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    if (connection != null) {
      ConnectionUtils.closeConnection(connection);
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}","public static ConnectionStatus testConnection(String dbType,String url,String username,String pwd,String schema,final String driverClassName,final String driverJarPath,String dbVersionString,String additionalParam,StringBuffer retProposedSchema){
  Connection connection=null;
  ConnectionStatus connectionStatus=new ConnectionStatus();
  connectionStatus.setResult(false);
  DriverShim wapperDriver=null;
  try {
    List list=new ArrayList();
    list=ExtractMetaDataUtils.getInstance().connect(dbType,url,username,pwd,driverClassName,driverJarPath,dbVersionString,additionalParam);
    if (list != null && list.size() > 0) {
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof Connection) {
          connection=(Connection)list.get(i);
        }
        if (list.get(i) instanceof DriverShim) {
          wapperDriver=(DriverShim)list.get(i);
        }
      }
    }
    if ((schema != null) && (schema.compareTo(""String_Node_Str"") != 0)) {
      final boolean notCaseSensitive=!ManagerConnection.isSchemaCaseSensitive(EDatabaseTypeName.getTypeFromDisplayName(dbType));
      if (!checkSchemaConnection(schema,connection,notCaseSensitive,dbType,retProposedSchema)) {
        connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
        return connectionStatus;
      }
    }
    connectionStatus.setResult(true);
    connectionStatus.setMessageException(Messages.getString(""String_Node_Str""));
  }
 catch (  SQLException e) {
    ExceptionHandler.process(e);
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
catch (  Exception e) {
    connectionStatus.setMessageException(ExceptionUtils.getFullStackTrace(e));
  }
 finally {
    if (connection != null) {
      ConnectionUtils.closeConnection(connection);
    }
    ExtractManager extractManager=ExtractManagerFactory.createByDisplayName(dbType);
    if (extractManager != null) {
      extractManager.closeConnection(null,wapperDriver);
      if (driverClassName.equals(EDatabase4DriverClassName.JAVADB_EMBEDED.getDriverClass())) {
        extractManager.closeConnectionForDerby(wapperDriver);
      }
    }
  }
  return connectionStatus;
}",0.9070385126162018
130109,"public static boolean isSchemaFromSidOrDatabase(EDatabaseTypeName inType){
  if (EDatabaseTypeName.TERADATA.equals(inType) || EDatabaseTypeName.IMPALA.equals(inType)) {
    return true;
  }
 else {
    return false;
  }
}","public static boolean isSchemaFromSidOrDatabase(EDatabaseTypeName inType){
  if (EDatabaseTypeName.TERADATA.equals(inType) || EDatabaseTypeName.IMPALA.equals(inType) || EDatabaseTypeName.AS400.equals(inType)) {
    return true;
  }
 else {
    return false;
  }
}",0.9132231404958676
130110,"private List<TableNode> getTableNodeInfo(){
  List<TableNode> tableNodes=new ArrayList<TableNode>();
  DatabaseConnection connection=(DatabaseConnection)metadataconnection.getCurrentConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(connection);
    if (schemas.isEmpty()) {
      return tableNodes;
    }
 else {
      for (      Schema s : schemas) {
        TableNode schemaNode=new TableNode();
        schemaNode.setSchema(s);
        schemaNode.setValue(s.getName());
        schemaNode.setType(TableNode.SCHEMA);
        schemaNode.setMetadataConn(metadataconnection);
        schemaNode.setParas(tableInfoParameters);
        if (s.getName() != null && !s.getName().equals(MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS)) {
          tableNodes.add(schemaNode);
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      TableNode catalogNode=new TableNode();
      catalogNode.setCatalog(c);
      catalogNode.setValue(c.getName());
      catalogNode.setType(TableNode.CATALOG);
      catalogNode.setMetadataConn(metadataconnection);
      catalogNode.setParas(tableInfoParameters);
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        tableNodes.add(catalogNode);
      }
 else {
        for (        Schema s : schemas) {
          TableNode schemaNode=new TableNode();
          schemaNode.setSchema(s);
          schemaNode.setValue(s.getName());
          schemaNode.setType(TableNode.SCHEMA);
          schemaNode.setMetadataConn(metadataconnection);
          schemaNode.setParas(tableInfoParameters);
          schemaNode.setParent(catalogNode);
          catalogNode.addChild(schemaNode);
        }
        tableNodes.add(catalogNode);
      }
    }
  }
  return tableNodes;
}","private List<TableNode> getTableNodeInfo(){
  List<TableNode> tableNodes=new ArrayList<TableNode>();
  DatabaseConnection connection=(DatabaseConnection)metadataconnection.getCurrentConnection();
  List<Catalog> catalogs=ConnectionHelper.getCatalogs(connection);
  if (catalogs.isEmpty()) {
    List<Schema> schemas=ConnectionHelper.getSchema(connection);
    String specifiedSchema=null;
    if (ManagerConnection.isSchemaFromSidOrDatabase(EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType()))) {
      String sid=connection.getSID();
      if (sid != null && sid.length() > 0) {
        specifiedSchema=sid;
      }
    }
    if (schemas.isEmpty()) {
      return tableNodes;
    }
 else {
      EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(connection.getDatabaseType());
      for (      Schema s : schemas) {
        TableNode schemaNode=new TableNode();
        schemaNode.setSchema(s);
        schemaNode.setValue(s.getName());
        schemaNode.setType(TableNode.SCHEMA);
        schemaNode.setMetadataConn(metadataconnection);
        schemaNode.setParas(tableInfoParameters);
        if (s.getName() != null && !s.getName().equals(MetadataConnectionUtils.FAKE_SCHEMA_SYNONYMS)) {
          boolean canAdd=true;
          if (specifiedSchema != null) {
            if (ManagerConnection.isSchemaCaseSensitive(dbType)) {
              if (!s.getName().equals(specifiedSchema)) {
                canAdd=false;
              }
            }
 else {
              if (!s.getName().toLowerCase().equals(specifiedSchema.toLowerCase())) {
                canAdd=false;
              }
            }
          }
          if (canAdd) {
            tableNodes.add(schemaNode);
          }
        }
      }
    }
  }
 else {
    for (    Catalog c : catalogs) {
      TableNode catalogNode=new TableNode();
      catalogNode.setCatalog(c);
      catalogNode.setValue(c.getName());
      catalogNode.setType(TableNode.CATALOG);
      catalogNode.setMetadataConn(metadataconnection);
      catalogNode.setParas(tableInfoParameters);
      List<Schema> schemas=CatalogHelper.getSchemas(c);
      if (schemas.isEmpty()) {
        tableNodes.add(catalogNode);
      }
 else {
        for (        Schema s : schemas) {
          TableNode schemaNode=new TableNode();
          schemaNode.setSchema(s);
          schemaNode.setValue(s.getName());
          schemaNode.setType(TableNode.SCHEMA);
          schemaNode.setMetadataConn(metadataconnection);
          schemaNode.setParas(tableInfoParameters);
          schemaNode.setParent(catalogNode);
          catalogNode.addChild(schemaNode);
        }
        tableNodes.add(catalogNode);
      }
    }
  }
  return tableNodes;
}",0.7880910683012259
130111,"public static boolean checkSchemaConnection(String schema,Connection connection,boolean notCaseSensitive,String dbType,StringBuffer retPropsedSchema) throws SQLException {
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  DatabaseMetaData dbMetaData=extractMeta.getDatabaseMetaData(connection,dbType);
  String proposeSchema=null;
  if (dbMetaData != null) {
    ResultSet rs=dbMetaData.getSchemas();
    while (rs.next()) {
      if (notCaseSensitive) {
        if (rs.getString(1).toLowerCase().compareTo(schema.toLowerCase()) == 0) {
          extractMeta.setSchema(rs.getString(1));
          rs.close();
          return (true);
        }
      }
 else {
        String schemaFromDB=rs.getString(1);
        if (schemaFromDB.toLowerCase().compareTo(schema.toLowerCase()) == 0) {
          if (schemaFromDB.compareTo(schema) == 0) {
            extractMeta.setSchema(schema);
            rs.close();
            return (true);
          }
 else {
            proposeSchema=schemaFromDB;
          }
        }
      }
    }
    rs.close();
  }
  if (retPropsedSchema != null && proposeSchema != null) {
    String title=Messages.getString(""String_Node_Str"");
    String proposeMessage=Messages.getString(""String_Node_Str"",new Object[]{schema,proposeSchema});
    MessageDialog messageDialog=new MessageDialog(new Shell(),title,null,proposeMessage,MessageDialog.CONFIRM,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL},0);
    if (messageDialog.open() == 0) {
      retPropsedSchema.append(proposeSchema);
      return true;
    }
  }
  return false;
}","public static boolean checkSchemaConnection(final String schema,Connection connection,boolean notCaseSensitive,String dbType,final StringBuffer retPropsedSchema) throws SQLException {
  ExtractMetaDataUtils extractMeta=ExtractMetaDataUtils.getInstance();
  DatabaseMetaData dbMetaData=extractMeta.getDatabaseMetaData(connection,dbType);
  final StringBuffer proposeSchema=new StringBuffer();
  if (dbMetaData != null) {
    ResultSet rs=dbMetaData.getSchemas();
    while (rs.next()) {
      if (notCaseSensitive) {
        if (rs.getString(1).toLowerCase().compareTo(schema.toLowerCase()) == 0) {
          extractMeta.setSchema(rs.getString(1));
          rs.close();
          return (true);
        }
      }
 else {
        String schemaFromDB=rs.getString(1);
        if (schemaFromDB.toLowerCase().compareTo(schema.toLowerCase()) == 0) {
          if (schemaFromDB.compareTo(schema) == 0) {
            extractMeta.setSchema(schema);
            rs.close();
            return (true);
          }
 else {
            proposeSchema.append(schemaFromDB);
          }
        }
      }
    }
    rs.close();
  }
  if (retPropsedSchema != null && 0 < proposeSchema.length()) {
    final StringBuffer userSelectResult=new StringBuffer();
    Display.getDefault().syncExec(new Runnable(){
      public void run(){
        String title=Messages.getString(""String_Node_Str"");
        String proposeMessage=Messages.getString(""String_Node_Str"",new Object[]{schema,proposeSchema});
        MessageDialog messageDialog=new MessageDialog(new Shell(),title,null,proposeMessage,MessageDialog.CONFIRM,new String[]{IDialogConstants.YES_LABEL,IDialogConstants.NO_LABEL},0);
        if (messageDialog.open() == 0) {
          retPropsedSchema.append(proposeSchema);
          userSelectResult.append(""String_Node_Str"");
        }
      }
    }
);
    if (0 < userSelectResult.length()) {
      return true;
    }
  }
  return false;
}",0.8732234223990903
130112,"@Override public boolean isValidForDataViewer(IMetadataTable metadataTable){
  return true;
}","@Override public boolean isValidForDataViewer(Connection connection,IMetadataTable metadataTable){
  if (!canHandle(connection)) {
    return false;
  }
  return true;
}",0.7099236641221374
130113,"/** 
 * DOC ycbai Comment method ""isValidForDataViewer"". <p> Check if the table can do data viewer.
 * @param metadataTable
 * @return
 */
public boolean isValidForDataViewer(IMetadataTable metadataTable);","/** 
 * DOC ycbai Comment method ""isValidForDataViewer"". <p> Check if the table can do data viewer.
 * @param connection
 * @param metadataTable
 * @return
 */
public boolean isValidForDataViewer(Connection connection,IMetadataTable metadataTable);",0.9050772626931568
130114,"@Override public boolean isValidForDataViewer(IMetadataTable metadataTable){
  return true;
}","@Override public boolean isValidForDataViewer(Connection connection,IMetadataTable metadataTable){
  if (!canHandle(connection)) {
    return false;
  }
  return true;
}",0.7099236641221374
130115,"public boolean hasChildren(Object element){
  if (element instanceof SheetNode) {
    return ((SheetNode)element).getChildren() != null && ((SheetNode)element).getChildren().size() > 0;
  }
  return false;
}","@Override public boolean hasChildren(Object element){
  if (element instanceof SheetNode) {
    return ((SheetNode)element).getChildren() != null && ((SheetNode)element).getChildren().size() > 0;
  }
  return false;
}",0.9764150943396226
130116,"@SuppressWarnings(""String_Node_Str"") public void run(){
  disposeExistColumns();
  final List<String[]> input=excelReader.readSheet(sheetName);
  if (input == null) {
    viewer.setInput(getEmptyInput());
    return;
  }
  int maxLength=0;
  for (int i=0, z=input.size(); i < z; i++) {
    int x=input.get(i).length;
    if (x > maxLength) {
      maxLength=x;
    }
  }
  String[] names=ExcelReader.getColumnsTitle(maxLength);
  List columns=getConnection().getSheetColumns();
  columns.clear();
  for (  String name : names) {
    columns.add(name);
    TableColumn tableColumn=new TableColumn(viewer.getTable(),SWT.NONE);
    tableColumn.setText(name);
    tableColumn.setWidth(WIDTH);
  }
  viewer.setInput(input);
}","@Override @SuppressWarnings(""String_Node_Str"") public void run(){
  disposeExistColumns();
  final List<String[]> input=excelReader.readSheet(sheetName);
  if (input == null) {
    viewer.setInput(getEmptyInput());
    return;
  }
  int maxLength=0;
  for (int i=0, z=input.size(); i < z; i++) {
    int x=input.get(i).length;
    if (x > maxLength) {
      maxLength=x;
    }
  }
  String[] names=ExcelReader.getColumnsTitle(maxLength);
  List columns=getConnection().getSheetColumns();
  columns.clear();
  for (  String name : names) {
    columns.add(name);
    TableColumn tableColumn=new TableColumn(viewer.getTable(),SWT.NONE);
    tableColumn.setText(name);
    tableColumn.setWidth(WIDTH);
  }
  viewer.setInput(input);
}",0.993103448275862
130117,"private void addTreeListener(){
  sheetViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      fillSheetList();
      checkFieldsValue();
    }
  }
);
}","private void addTreeListener(){
  sheetViewer.addCheckStateListener(new ICheckStateListener(){
    @Override public void checkStateChanged(    CheckStateChangedEvent event){
      fillSheetList();
      checkFieldsValue();
    }
  }
);
}",0.978448275862069
130118,"public String getColumnText(Object element,int columnIndex){
  if (element instanceof String[]) {
    try {
      return ((String[])element)[columnIndex];
    }
 catch (    Exception e) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}","@Override public String getColumnText(Object element,int columnIndex){
  if (element instanceof String[]) {
    try {
      return ((String[])element)[columnIndex];
    }
 catch (    Exception e) {
      return ""String_Node_Str"";
    }
  }
  return ""String_Node_Str"";
}",0.981060606060606
130119,"public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","@Override public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}",0.9367088607594936
130120,"public void addListener(ILabelProviderListener listener){
}","@Override public void addListener(ILabelProviderListener listener){
}",0.921875
130121,"public void setVisible(boolean visible){
  super.setVisible(visible);
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    initAllParameters();
    initTreeSelectStates();
    checkFieldsValue();
  }
}","@Override public void setVisible(boolean visible){
  super.setVisible(visible);
  if (isReadOnly() != readOnly) {
    adaptFormToReadOnly();
  }
  if (visible) {
    initAllParameters();
    initTreeSelectStates();
    checkFieldsValue();
  }
}",0.9790794979079498
130122,"public void widgetSelected(final SelectionEvent e){
  getShell().close();
}","@Override public void widgetSelected(final SelectionEvent e){
  getShell().close();
}",0.9375
130123,"private void createPerlSheetsViewer(Composite parent){
  sheetViewer=new ContainerCheckedTreeViewer(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.SINGLE| SWT.BORDER);
  sheetViewer.setContentProvider(new ITreeContentProvider(){
    public Object[] getChildren(    Object parentElement){
      if (parentElement instanceof SheetNode) {
        return ((SheetNode)parentElement).getChildren().toArray();
      }
      return null;
    }
    public Object getParent(    Object element){
      return null;
    }
    public boolean hasChildren(    Object element){
      if (element instanceof SheetNode) {
        return ((SheetNode)element).getChildren() != null && ((SheetNode)element).getChildren().size() > 0;
      }
      return false;
    }
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof List) {
        return ((List)inputElement).toArray();
      }
      return null;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  sheetViewer.setLabelProvider(new ILabelProvider(){
    public Image getImage(    Object element){
      return null;
    }
    public String getText(    Object element){
      if (element instanceof SheetNode) {
        return ((SheetNode)element).getLabel();
      }
      return null;
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
);
  initSheetViewer();
  sheetViewer.expandAll();
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=2;
  sheetViewer.getTree().setLayoutData(data);
  addTreeListener();
}","private void createPerlSheetsViewer(Composite parent){
  sheetViewer=new ContainerCheckedTreeViewer(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.SINGLE| SWT.BORDER);
  sheetViewer.setContentProvider(new ITreeContentProvider(){
    @Override public Object[] getChildren(    Object parentElement){
      if (parentElement instanceof SheetNode) {
        return ((SheetNode)parentElement).getChildren().toArray();
      }
      return null;
    }
    @Override public Object getParent(    Object element){
      return null;
    }
    @Override public boolean hasChildren(    Object element){
      if (element instanceof SheetNode) {
        return ((SheetNode)element).getChildren() != null && ((SheetNode)element).getChildren().size() > 0;
      }
      return false;
    }
    @Override public Object[] getElements(    Object inputElement){
      if (inputElement instanceof List) {
        return ((List)inputElement).toArray();
      }
      return null;
    }
    @Override public void dispose(){
    }
    @Override public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  sheetViewer.setLabelProvider(new ILabelProvider(){
    @Override public Image getImage(    Object element){
      return null;
    }
    @Override public String getText(    Object element){
      if (element instanceof SheetNode) {
        return ((SheetNode)element).getLabel();
      }
      return null;
    }
    @Override public void addListener(    ILabelProviderListener listener){
    }
    @Override public void dispose(){
    }
    @Override public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    @Override public void removeListener(    ILabelProviderListener listener){
    }
  }
);
  initSheetViewer();
  sheetViewer.expandAll();
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=2;
  sheetViewer.getTree().setLayoutData(data);
  addTreeListener();
}",0.9682371625198518
130124,"@Override protected boolean checkFieldsValue(){
  if (!isContextMode()) {
    fileField.setEditable(true);
  }
  if (fileField.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  String modeText=modeCombo.getText();
  if (!(modeText.equals(""String_Node_Str"") || modeText.equals(""String_Node_Str""))) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!getConnection().isSelectAllSheets() && !isContextMode()) {
    if (getConnection().getSheetList() == null || getConnection().getSheetList().size() <= 0) {
      updateStatus(IStatus.ERROR,""String_Node_Str"");
      return false;
    }
  }
  updateStatus(IStatus.OK,null);
  return true;
}","@Override protected boolean checkFieldsValue(){
  if (!isContextMode()) {
    fileField.setEditable(true);
  }
  if (!errorSet.isEmpty()) {
    return false;
  }
  if (fileField.getText() == ""String_Node_Str"") {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  String modeText=modeCombo.getText();
  if (!(modeText.equals(""String_Node_Str"") || modeText.equals(""String_Node_Str""))) {
    updateStatus(IStatus.ERROR,Messages.getString(""String_Node_Str""));
    return false;
  }
  if (!isContextMode()) {
    Object elements[]=sheetViewer.getCheckedElements();
    if (elements == null || elements.length <= 0) {
      updateStatus(IStatus.ERROR,""String_Node_Str"");
      return false;
    }
  }
  updateStatus(IStatus.OK,null);
  return true;
}",0.824211204121056
130125,"public String getText(Object element){
  if (element instanceof SheetNode) {
    return ((SheetNode)element).getLabel();
  }
  return null;
}","@Override public String getText(Object element){
  if (element instanceof SheetNode) {
    return ((SheetNode)element).getLabel();
  }
  return null;
}",0.9657534246575342
130126,"public void removeListener(ILabelProviderListener listener){
}","@Override public void removeListener(ILabelProviderListener listener){
}",0.9253731343283582
130127,"@Override protected void addUtilsButtonListeners(){
  if (!isInWizard()) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}","@Override protected void addUtilsButtonListeners(){
  if (!isInWizard()) {
    cancelButton.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      final SelectionEvent e){
        getShell().close();
      }
    }
);
  }
}",0.98046875
130128,"@Override protected void addFieldsListeners(){
  serverCombo.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (isVisible()) {
          try {
            viewExcelFile();
            restoreSelectedSheets();
            checkFieldsValue();
          }
 catch (          BiffException e1) {
            getConnection().setFilePath(null);
            updateErrorStatus(e1.getMessage());
            makeViewerGroupAvailable(false);
          }
catch (          IOException e1) {
            getConnection().setFilePath(null);
            updateErrorStatus(e1.getMessage());
            makeViewerGroupAvailable(false);
          }
          if (isXlsx) {
            selectModeBtn.setSelection(true);
            modeCombo.setReadOnly(false);
          }
 else {
            selectModeBtn.setSelection(false);
            modeCombo.setReadOnly(true);
          }
          if ((EVENT_MODE).equals(generationMode)) {
            modeCombo.select(1);
          }
 else {
            modeCombo.select(0);
          }
          updateStatus();
        }
      }
    }
  }
);
  sheetsCombo.getCombo().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (isVisible()) {
        String sheet=sheetsCombo.getText().trim();
        viewSheet(sheet);
        checkFieldsValue();
      }
    }
  }
);
  selectModeBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (selectModeBtn.getSelection()) {
        modeCombo.setReadOnly(false);
      }
 else {
        modeCombo.setReadOnly(true);
        generationMode=USER_MODE;
      }
      updateStatus();
    }
  }
);
  modeCombo.getCombo().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int index=modeCombo.getSelectionIndex();
      if (index == 0) {
        generationMode=USER_MODE;
      }
 else {
        generationMode=EVENT_MODE;
      }
      updateStatus();
    }
  }
);
  modeCombo.getCombo().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
    }
  }
);
}","@Override protected void addFieldsListeners(){
  serverCombo.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      getConnection().setServer(serverCombo.getText());
      checkFieldsValue();
    }
  }
);
  fileField.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    final ModifyEvent e){
      if (!isContextMode()) {
        if (isVisible()) {
          errorSet.remove(ERRORSET_FILEFIELD);
          try {
            viewExcelFile();
            restoreSelectedSheets();
            checkFieldsValue();
          }
 catch (          BiffException e1) {
            getConnection().setFilePath(null);
            errorSet.add(ERRORSET_FILEFIELD);
            updateErrorStatus(e1.getMessage());
            makeViewerGroupAvailable(false);
          }
catch (          IOException e1) {
            getConnection().setFilePath(null);
            errorSet.add(ERRORSET_FILEFIELD);
            updateErrorStatus(e1.getMessage());
            makeViewerGroupAvailable(false);
          }
          if (isXlsx) {
            selectModeBtn.setSelection(true);
            modeCombo.setReadOnly(false);
          }
 else {
            selectModeBtn.setSelection(false);
            modeCombo.setReadOnly(true);
          }
          if ((EVENT_MODE).equals(generationMode)) {
            modeCombo.select(1);
          }
 else {
            modeCombo.select(0);
          }
          updateStatus();
        }
      }
    }
  }
);
  sheetsCombo.getCombo().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (isVisible()) {
        String sheet=sheetsCombo.getText().trim();
        viewSheet(sheet);
        checkFieldsValue();
      }
    }
  }
);
  selectModeBtn.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (selectModeBtn.getSelection()) {
        modeCombo.setReadOnly(false);
      }
 else {
        modeCombo.setReadOnly(true);
        generationMode=USER_MODE;
      }
      updateStatus();
    }
  }
);
  modeCombo.getCombo().addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      int index=modeCombo.getSelectionIndex();
      if (index == 0) {
        generationMode=USER_MODE;
      }
 else {
        generationMode=EVENT_MODE;
      }
      updateStatus();
    }
  }
);
  modeCombo.getCombo().addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      checkFieldsValue();
    }
  }
);
}",0.968756140695618
130129,"public Image getColumnImage(Object element,int columnIndex){
  return null;
}","@Override public Image getColumnImage(Object element,int columnIndex){
  return null;
}",0.9390243902439024
130130,"private void viewSheet(final String sheetName){
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(viewer.getTable().getShell());
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        getConnection().setSheetName(sheetName);
        Display.getDefault().syncExec(new Runnable(){
          @SuppressWarnings(""String_Node_Str"") public void run(){
            disposeExistColumns();
            final List<String[]> input=excelReader.readSheet(sheetName);
            if (input == null) {
              viewer.setInput(getEmptyInput());
              return;
            }
            int maxLength=0;
            for (int i=0, z=input.size(); i < z; i++) {
              int x=input.get(i).length;
              if (x > maxLength) {
                maxLength=x;
              }
            }
            String[] names=ExcelReader.getColumnsTitle(maxLength);
            List columns=getConnection().getSheetColumns();
            columns.clear();
            for (            String name : names) {
              columns.add(name);
              TableColumn tableColumn=new TableColumn(viewer.getTable(),SWT.NONE);
              tableColumn.setText(name);
              tableColumn.setWidth(WIDTH);
            }
            viewer.setInput(input);
          }
        }
);
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    updateErrorStatus(e.getMessage());
  }
catch (  InterruptedException e) {
    updateErrorStatus(e.getMessage());
  }
}","private void viewSheet(final String sheetName){
  ProgressMonitorDialog dialog=new ProgressMonitorDialog(viewer.getTable().getShell());
  errorSet.remove(ERRORSET_EXCELPREVIEW);
  try {
    dialog.run(true,false,new IRunnableWithProgress(){
      @Override public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        getConnection().setSheetName(sheetName);
        Display.getDefault().syncExec(new Runnable(){
          @Override @SuppressWarnings(""String_Node_Str"") public void run(){
            disposeExistColumns();
            final List<String[]> input=excelReader.readSheet(sheetName);
            if (input == null) {
              viewer.setInput(getEmptyInput());
              return;
            }
            int maxLength=0;
            for (int i=0, z=input.size(); i < z; i++) {
              int x=input.get(i).length;
              if (x > maxLength) {
                maxLength=x;
              }
            }
            String[] names=ExcelReader.getColumnsTitle(maxLength);
            List columns=getConnection().getSheetColumns();
            columns.clear();
            for (            String name : names) {
              columns.add(name);
              TableColumn tableColumn=new TableColumn(viewer.getTable(),SWT.NONE);
              tableColumn.setText(name);
              tableColumn.setWidth(WIDTH);
            }
            viewer.setInput(input);
          }
        }
);
        monitor.done();
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    errorSet.add(ERRORSET_EXCELPREVIEW);
    updateErrorStatus(e.getMessage());
  }
catch (  InterruptedException e) {
    errorSet.add(ERRORSET_EXCELPREVIEW);
    updateErrorStatus(e.getMessage());
  }
}",0.9590443686006824
130131,"/** 
 * DOC yexiaowei Comment method ""createTableViewer"".
 * @param compositeExcelViewer
 */
private void createTableViewer(Composite compositeExcelViewer){
  viewer=new TableViewer(compositeExcelViewer,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Table table=viewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData layData=new GridData(GridData.FILL_BOTH);
  layData.horizontalSpan=2;
  table.setLayoutData(layData);
  viewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof List) {
        return ((List)inputElement).toArray();
      }
      return null;
    }
    public void dispose(){
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      if (element instanceof String[]) {
        try {
          return ((String[])element)[columnIndex];
        }
 catch (        Exception e) {
          return ""String_Node_Str"";
        }
      }
      return ""String_Node_Str"";
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return true;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
);
}","/** 
 * DOC yexiaowei Comment method ""createTableViewer"".
 * @param compositeExcelViewer
 */
private void createTableViewer(Composite compositeExcelViewer){
  viewer=new TableViewer(compositeExcelViewer,SWT.FULL_SELECTION | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER);
  Table table=viewer.getTable();
  table.setHeaderVisible(true);
  table.setLinesVisible(true);
  GridData layData=new GridData(GridData.FILL_BOTH);
  layData.horizontalSpan=2;
  table.setLayoutData(layData);
  viewer.setContentProvider(new IStructuredContentProvider(){
    @Override public Object[] getElements(    Object inputElement){
      if (inputElement instanceof List) {
        return ((List)inputElement).toArray();
      }
      return null;
    }
    @Override public void dispose(){
    }
    @Override public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
  }
);
  viewer.setLabelProvider(new ITableLabelProvider(){
    @Override public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    @Override public String getColumnText(    Object element,    int columnIndex){
      if (element instanceof String[]) {
        try {
          return ((String[])element)[columnIndex];
        }
 catch (        Exception e) {
          return ""String_Node_Str"";
        }
      }
      return ""String_Node_Str"";
    }
    @Override public void addListener(    ILabelProviderListener listener){
    }
    @Override public void dispose(){
    }
    @Override public boolean isLabelProperty(    Object element,    String property){
      return true;
    }
    @Override public void removeListener(    ILabelProviderListener listener){
    }
  }
);
}",0.9727107337780472
130132,"public Object[] getElements(Object inputElement){
  if (inputElement instanceof List) {
    return ((List)inputElement).toArray();
  }
  return null;
}","@Override public Object[] getElements(Object inputElement){
  if (inputElement instanceof List) {
    return ((List)inputElement).toArray();
  }
  return null;
}",0.967948717948718
130133,"public void dispose(){
}","@Override public void dispose(){
}",0.8275862068965517
130134,"public void checkStateChanged(CheckStateChangedEvent event){
  fillSheetList();
  checkFieldsValue();
}","@Override public void checkStateChanged(CheckStateChangedEvent event){
  fillSheetList();
  checkFieldsValue();
}",0.9537037037037036
130135,"public Image getImage(Object element){
  return null;
}","@Override public Image getImage(Object element){
  return null;
}",0.9166666666666666
130136,"public boolean isLabelProperty(Object element,String property){
  return true;
}","@Override public boolean isLabelProperty(Object element,String property){
  return true;
}",0.9411764705882352
130137,"@Override protected IStatus run(IProgressMonitor monitor){
  try {
    futureTask.get();
  }
 catch (  Exception e) {
  }
  return Status.OK_STATUS;
}","@Override protected IStatus run(IProgressMonitor monitor){
  try {
    futureTask.get();
  }
 catch (  Throwable e) {
  }
  return Status.OK_STATUS;
}",0.9466666666666668
130138,abstract protected T runWithCancel(IProgressMonitor monitor) throws Exception ;,abstract protected T runWithCancel(IProgressMonitor monitor) throws Throwable ;,0.8987341772151899
130139,"@Override protected ResourcesManager runWithCancel(IProgressMonitor monitor) throws Exception {
  return fileUnityManager.doUnify(true);
}","@Override protected ResourcesManager runWithCancel(IProgressMonitor monitor) throws Throwable {
  return fileUnityManager.doUnify(true);
}",0.9420289855072465
130140,"public void updateItemsList(final String path,final boolean fromDir,boolean isneedUpdate){
  if (!isneedUpdate && path.equals(lastWorkedPath)) {
    return;
  }
  lastWorkedPath=path;
  CheckboxTreeViewer viewer=filteredCheckboxTree.getViewer();
  if (StringUtils.isEmpty(path)) {
    selectedItemRecords.clear();
    viewer.refresh(true);
    TreeItem topItem=viewer.getTree().getTopItem();
    if (topItem != null) {
      viewer.setSubtreeChecked(topItem.getData(),false);
    }
  }
 else {
    File srcFile=new File(path);
    try {
      final FileResourcesUnityManager fileUnityManager=ResourcesManagerFactory.getInstance().createFileUnityManager(srcFile);
      AProgressMonitorDialogWithCancel<ResourcesManager> dialogWithCancel=new AProgressMonitorDialogWithCancel<ResourcesManager>(getShell()){
        @Override protected ResourcesManager runWithCancel(        IProgressMonitor monitor) throws Exception {
          return fileUnityManager.doUnify(true);
        }
      }
;
      String executingMessage=Messages.getString(""String_Node_Str"");
      String waitingFinishMessage=Messages.getString(""String_Node_Str"");
      dialogWithCancel.run(executingMessage,waitingFinishMessage,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
      Exception executeException=dialogWithCancel.getExecuteException();
      if (executeException != null) {
        throw executeException;
      }
      resManager=dialogWithCancel.getExecuteResult();
    }
 catch (    FileNotFoundException e) {
      return;
    }
catch (    ZipException e) {
      displayErrorDialog(Messages.getString(""String_Node_Str""));
      archivePathField.setFocus();
    }
catch (    TarException e) {
      displayErrorDialog(Messages.getString(""String_Node_Str""));
      archivePathField.setFocus();
    }
catch (    IOException e) {
      displayErrorDialog(Messages.getString(""String_Node_Str""));
      archivePathField.setFocus();
    }
catch (    Exception e) {
      displayErrorDialog(e.getMessage());
      archivePathField.setFocus();
    }
    if (resManager == null) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
      setPageComplete(false);
    }
 else {
      populateItems(this.overwriteButton.getSelection());
    }
  }
}","public void updateItemsList(final String path,final boolean fromDir,boolean isneedUpdate){
  if (!isneedUpdate && path.equals(lastWorkedPath)) {
    return;
  }
  lastWorkedPath=path;
  CheckboxTreeViewer viewer=filteredCheckboxTree.getViewer();
  if (StringUtils.isEmpty(path)) {
    selectedItemRecords.clear();
    viewer.refresh(true);
    TreeItem topItem=viewer.getTree().getTopItem();
    if (topItem != null) {
      viewer.setSubtreeChecked(topItem.getData(),false);
    }
  }
 else {
    File srcFile=new File(path);
    try {
      final FileResourcesUnityManager fileUnityManager=ResourcesManagerFactory.getInstance().createFileUnityManager(srcFile);
      AProgressMonitorDialogWithCancel<ResourcesManager> dialogWithCancel=new AProgressMonitorDialogWithCancel<ResourcesManager>(getShell()){
        @Override protected ResourcesManager runWithCancel(        IProgressMonitor monitor) throws Throwable {
          return fileUnityManager.doUnify(true);
        }
      }
;
      String executingMessage=Messages.getString(""String_Node_Str"");
      String waitingFinishMessage=Messages.getString(""String_Node_Str"");
      dialogWithCancel.run(executingMessage,waitingFinishMessage,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
      Throwable executeException=dialogWithCancel.getExecuteException();
      if (executeException != null) {
        throw executeException;
      }
      resManager=dialogWithCancel.getExecuteResult();
    }
 catch (    FileNotFoundException e) {
      return;
    }
catch (    ZipException e) {
      displayErrorDialog(Messages.getString(""String_Node_Str""));
      archivePathField.setFocus();
    }
catch (    TarException e) {
      displayErrorDialog(Messages.getString(""String_Node_Str""));
      archivePathField.setFocus();
    }
catch (    IOException e) {
      displayErrorDialog(Messages.getString(""String_Node_Str""));
      archivePathField.setFocus();
    }
catch (    Throwable e) {
      displayErrorDialog(e.getMessage());
      archivePathField.setFocus();
    }
    if (resManager == null) {
      setErrorMessage(Messages.getString(""String_Node_Str""));
      setPageComplete(false);
    }
 else {
      populateItems(this.overwriteButton.getSelection());
    }
  }
}",0.9879410451094238
130141,"private void checkConnection(final StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (!isContextMode()) {
      if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
 else       if (EDatabaseTypeName.NETEZZA.getProduct().equals(c.getProductId()) || MetadataFillFactory.isJdbcNetezza(c.getDatabaseType(),c.getDriverClass())) {
        if (sidOrDatabaseText != null) {
          sidOrDatabaseText.setText(sidOrDatabaseText.getText().toUpperCase());
        }
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(getUppercaseNetezzaUrl(urlConnectionStringText.getText()));
        }
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(getUppercaseNetezzaUrl(generalJdbcUrlText.getText()));
        }
      }
    }
  }
  final ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
      if (EImpalaDistributions.CUSTOM != EImpalaDistributions.getDistributionByName(impalaDistributionCombo.getText(),true)) {
        versionStr=EImpalaDistribution4Versions.indexOfByVersionDisplay(impalaVersionCombo.getText()).getVersionValue();
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  AProgressMonitorDialogWithCancel<Boolean> checkingDialog;
  if (dbType.isUseProvider()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(metadataConn,retProposedSchema);
      }
    }
;
  }
 else   if (isHiveDBConnSelected()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.checkHiveConnection(metadataConn);
      }
    }
;
  }
 else {
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(retProposedSchema);
      }
    }
;
  }
  String executeMessage=Messages.getString(""String_Node_Str"");
  Throwable executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  checkButton.setEnabled(true);
  if (checkingDialog.isUserCanncelled()) {
    return;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return;
    }
    databaseSettingIsValide=false;
  }
 else {
    databaseSettingIsValide=checkingDialog.getExecuteResult();
  }
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=null;
    Exception exception=managerConnection.getException();
    if (exception instanceof WarningSQLException) {
      mainMsg=exception.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else     if (exception == null && executeException != null) {
      mainMsg=executeException.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else {
      mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
      new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
    }
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
  }
}","private void checkConnection(final StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (!isContextMode()) {
      if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
 else       if (EDatabaseTypeName.NETEZZA.getProduct().equals(c.getProductId()) || MetadataFillFactory.isJdbcNetezza(c.getDatabaseType(),c.getDriverClass())) {
        if (sidOrDatabaseText != null) {
          sidOrDatabaseText.setText(sidOrDatabaseText.getText().toUpperCase());
        }
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(getUppercaseNetezzaUrl(urlConnectionStringText.getText()));
        }
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(getUppercaseNetezzaUrl(generalJdbcUrlText.getText()));
        }
      }
    }
  }
  final ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
      if (EImpalaDistributions.CUSTOM != EImpalaDistributions.getDistributionByName(impalaDistributionCombo.getText(),true)) {
        versionStr=EImpalaDistribution4Versions.indexOfByVersionDisplay(impalaVersionCombo.getText()).getVersionValue();
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  AProgressMonitorDialogWithCancel<Boolean> checkingDialog;
  if (dbType.isUseProvider()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Throwable {
        return managerConnection.check(metadataConn,retProposedSchema);
      }
    }
;
  }
 else   if (isHiveDBConnSelected()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Throwable {
        return managerConnection.checkHiveConnection(metadataConn);
      }
    }
;
  }
 else {
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Throwable {
        return managerConnection.check(retProposedSchema);
      }
    }
;
  }
  String executeMessage=Messages.getString(""String_Node_Str"");
  Throwable executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  checkButton.setEnabled(true);
  if (checkingDialog.isUserCanncelled()) {
    return;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return;
    }
    databaseSettingIsValide=false;
  }
 else {
    databaseSettingIsValide=checkingDialog.getExecuteResult();
  }
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=null;
    Exception exception=managerConnection.getException();
    if (exception instanceof WarningSQLException) {
      mainMsg=exception.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else     if (exception == null && executeException != null) {
      mainMsg=executeException.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else {
      mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
      new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
    }
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
  }
}",0.996330025825744
130142,"@Override protected Boolean runWithCancel(IProgressMonitor monitor) throws Exception {
  return managerConnection.check(retProposedSchema);
}","@Override protected Boolean runWithCancel(IProgressMonitor monitor) throws Throwable {
  return managerConnection.check(retProposedSchema);
}",0.9432624113475178
130143,"public static void copyFolder(File resFolder,File destFolder){
  try {
    if (!resFolder.exists()) {
      return;
    }
    destFolder.mkdirs();
    String[] file=resFolder.list();
    File temp=null;
    for (    String element : file) {
      temp=new File(resFolder,element);
      if (temp.isFile()) {
        FileInputStream input=new FileInputStream(temp);
        FileOutputStream output=new FileOutputStream(new File(destFolder,temp.getName()));
        byte[] b=new byte[1024 * 5];
        int len;
        while ((len=input.read(b)) != -1) {
          output.write(b,0,len);
        }
        output.flush();
        output.close();
        input.close();
      }
      if (temp.isDirectory()) {
        copyFolder(new File(resFolder,element),new File(destFolder,element));
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}","public static void copyFolder(File resFolder,File destFolder,boolean interruptable) throws Exception {
  Thread currentThread=Thread.currentThread();
  if (interruptable && currentThread.isInterrupted()) {
    throw new InterruptedException();
  }
  if (!resFolder.exists()) {
    return;
  }
  destFolder.mkdirs();
  String[] file=resFolder.list();
  File temp=null;
  for (  String element : file) {
    if (interruptable && currentThread.isInterrupted()) {
      throw new InterruptedException();
    }
    temp=new File(resFolder,element);
    if (temp.isFile()) {
      FileInputStream input=new FileInputStream(temp);
      FileOutputStream output=new FileOutputStream(new File(destFolder,temp.getName()));
      byte[] b=new byte[1024 * 5];
      int len;
      while ((len=input.read(b)) != -1) {
        if (interruptable && currentThread.isInterrupted()) {
          break;
        }
        output.write(b,0,len);
      }
      output.flush();
      output.close();
      input.close();
    }
    if (temp.isDirectory()) {
      copyFolder(new File(resFolder,element),new File(destFolder,element));
    }
  }
}",0.7032193158953722
130144,"@SuppressWarnings(""String_Node_Str"") public ResourcesManager doUnify() throws TarException, ZipException, FileNotFoundException, IOException {
  final File originalFile=getOriginalFileResouce();
  Assert.isNotNull(originalFile);
  final String absolutePath=originalFile.getAbsolutePath();
  if (!originalFile.exists()) {
    throw new FileNotFoundException(absolutePath);
  }
  final File tmpWorkFolder=getTmpResWorkFolder();
  if (originalFile.isDirectory()) {
    FileCopyUtils.copyFolder(originalFile,tmpWorkFolder);
  }
 else   if (originalFile.isFile()) {
    this.isArchiveFile=true;
    ProviderManager archiveProviderManager=null;
    ILeveledImportStructureProvider importProvider=null;
    if (ArchiveFileManipulations.isTarFile(absolutePath)) {
      TarFile tarFile=new TarFile(originalFile);
      importProvider=new TarLeveledStructureProvider(tarFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
 else     if (ArchiveFileManipulations.isZipFile(absolutePath)) {
      ZipFile zipFile=new ZipFile(originalFile);
      importProvider=new ZipLeveledStructureProvider(zipFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
    if (archiveProviderManager != null && importProvider != null) {
      if (!archiveProviderManager.collectPath2Object(importProvider.getRoot())) {
        throw new IOException(""String_Node_Str"");
      }
      try {
        decompress(archiveProviderManager,tmpWorkFolder);
      }
  finally {
        if (archiveProviderManager != null) {
          archiveProviderManager.closeResource();
        }
      }
    }
  }
  collectPath2Object(tmpWorkFolder);
  return this;
}","@SuppressWarnings(""String_Node_Str"") public ResourcesManager doUnify(boolean interruptable) throws TarException, ZipException, FileNotFoundException, IOException {
  final File originalFile=getOriginalFileResouce();
  Assert.isNotNull(originalFile);
  final String absolutePath=originalFile.getAbsolutePath();
  if (!originalFile.exists()) {
    throw new FileNotFoundException(absolutePath);
  }
  final File tmpWorkFolder=getTmpResWorkFolder();
  if (originalFile.isDirectory()) {
    try {
      FileCopyUtils.copyFolder(originalFile,tmpWorkFolder,interruptable);
    }
 catch (    Exception e) {
      ExceptionHandler.process(e);
    }
  }
 else   if (originalFile.isFile()) {
    this.isArchiveFile=true;
    ProviderManager archiveProviderManager=null;
    ILeveledImportStructureProvider importProvider=null;
    if (ArchiveFileManipulations.isTarFile(absolutePath)) {
      TarFile tarFile=new TarFile(originalFile);
      importProvider=new TarLeveledStructureProvider(tarFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
 else     if (ArchiveFileManipulations.isZipFile(absolutePath)) {
      ZipFile zipFile=new ZipFile(originalFile);
      importProvider=new ZipLeveledStructureProvider(zipFile);
      archiveProviderManager=ResourcesManagerFactory.getInstance().createResourcesManager(importProvider);
    }
    if (archiveProviderManager != null && importProvider != null) {
      if (!archiveProviderManager.collectPath2Object(importProvider.getRoot())) {
        throw new IOException(""String_Node_Str"");
      }
      try {
        decompress(archiveProviderManager,tmpWorkFolder,interruptable);
      }
  finally {
        if (archiveProviderManager != null) {
          archiveProviderManager.closeResource();
        }
      }
    }
  }
  collectPath2Object(tmpWorkFolder,interruptable);
  return this;
}",0.9580016469942356
130145,"private void decompress(ResourcesManager srcManager,File destRootFolder) throws IOException {
  Set<IPath> paths=srcManager.getPaths();
  for (  IPath path : paths) {
    InputStream bis=srcManager.getStream(path);
    File destFile=new File(destRootFolder,path.toPortableString());
    File parentFile=destFile.getParentFile();
    if (!parentFile.exists()) {
      parentFile.mkdirs();
    }
    BufferedOutputStream bos=null;
    try {
      bos=new BufferedOutputStream(new FileOutputStream(destFile),BUFFER_SIZE);
      int count;
      byte data[]=new byte[BUFFER_SIZE];
      while ((count=bis.read(data,0,BUFFER_SIZE)) != -1) {
        bos.write(data,0,count);
      }
    }
  finally {
      if (bos != null) {
        bos.flush();
        bos.close();
      }
      bis.close();
    }
  }
}","private void decompress(ResourcesManager srcManager,File destRootFolder,boolean interrupable) throws IOException {
  Set<IPath> paths=srcManager.getPaths();
  Thread currentThread=Thread.currentThread();
  try {
    for (    IPath path : paths) {
      if (interrupable && currentThread.isInterrupted()) {
        throw new InterruptedException();
      }
      InputStream bis=srcManager.getStream(path);
      File destFile=new File(destRootFolder,path.toPortableString());
      File parentFile=destFile.getParentFile();
      if (!parentFile.exists()) {
        parentFile.mkdirs();
      }
      BufferedOutputStream bos=null;
      try {
        bos=new BufferedOutputStream(new FileOutputStream(destFile),BUFFER_SIZE);
        int count;
        byte data[]=new byte[BUFFER_SIZE];
        while ((count=bis.read(data,0,BUFFER_SIZE)) != -1) {
          if (interrupable && currentThread.isInterrupted()) {
            break;
          }
          bos.write(data,0,count);
        }
      }
  finally {
        if (bos != null) {
          bos.flush();
          bos.close();
        }
        bis.close();
      }
    }
  }
 catch (  Exception e) {
    ExceptionHandler.process(e);
  }
}",0.7656798795785248
130146,"private boolean doCollectItemFiles(File directory){
  File[] contents=directory.listFiles();
  if (contents != null) {
    for (    File content : contents) {
      File file=content;
      if (file.isFile()) {
        add(file.getAbsolutePath(),file);
      }
      if (file.isDirectory()) {
        if ((!FilesUtils.isSVNFolder(file))) {
          collectPath2Object(content);
        }
      }
    }
  }
  return true;
}","private boolean doCollectItemFiles(File directory,boolean interruptable){
  File[] contents=directory.listFiles();
  Thread currentThread=Thread.currentThread();
  if (contents != null) {
    for (    File content : contents) {
      if (interruptable && currentThread.isInterrupted()) {
        return false;
      }
      File file=content;
      if (file.isFile()) {
        add(file.getAbsolutePath(),file);
      }
      if (file.isDirectory()) {
        if ((!FilesUtils.isSVNFolder(file))) {
          collectPath2Object(content);
        }
      }
    }
  }
  return true;
}",0.8417910447761194
130147,"@Override public boolean collectPath2Object(Object root){
  return doCollectItemFiles((File)root);
}","public boolean collectPath2Object(Object root,boolean interruptable){
  if (interruptable && Thread.currentThread().isInterrupted()) {
    return false;
  }
  return doCollectItemFiles((File)root,interruptable);
}",0.5750798722044729
130148,"public static void copyFolder(File resFolder,File destFolder,boolean interruptable) throws Exception {
  Thread currentThread=Thread.currentThread();
  if (interruptable && currentThread.isInterrupted()) {
    throw new InterruptedException();
  }
  if (!resFolder.exists()) {
    return;
  }
  destFolder.mkdirs();
  String[] file=resFolder.list();
  File temp=null;
  for (  String element : file) {
    if (interruptable && currentThread.isInterrupted()) {
      throw new InterruptedException();
    }
    temp=new File(resFolder,element);
    if (temp.isFile()) {
      FileInputStream input=new FileInputStream(temp);
      FileOutputStream output=new FileOutputStream(new File(destFolder,temp.getName()));
      byte[] b=new byte[1024 * 5];
      int len;
      while ((len=input.read(b)) != -1) {
        if (interruptable && currentThread.isInterrupted()) {
          break;
        }
        output.write(b,0,len);
      }
      output.flush();
      output.close();
      input.close();
    }
    if (temp.isDirectory()) {
      copyFolder(new File(resFolder,element),new File(destFolder,element));
    }
  }
}","public static void copyFolder(File resFolder,File destFolder,boolean interruptable) throws Exception {
  Thread currentThread=Thread.currentThread();
  if (interruptable && currentThread.isInterrupted()) {
    throw new InterruptedException();
  }
  if (!resFolder.exists()) {
    return;
  }
  destFolder.mkdirs();
  String[] file=resFolder.list();
  File temp=null;
  for (  String element : file) {
    if (interruptable && currentThread.isInterrupted()) {
      throw new InterruptedException();
    }
    temp=new File(resFolder,element);
    if (temp.isFile()) {
      FileInputStream input=new FileInputStream(temp);
      FileOutputStream output=new FileOutputStream(new File(destFolder,temp.getName()));
      byte[] b=new byte[1024 * 5];
      int len;
      while ((len=input.read(b)) != -1) {
        if (interruptable && currentThread.isInterrupted()) {
          break;
        }
        output.write(b,0,len);
      }
      output.flush();
      output.close();
      input.close();
    }
    if (temp.isDirectory()) {
      copyFolder(new File(resFolder,element),new File(destFolder,element),interruptable);
    }
  }
}",0.9937943262411348
130149,"private boolean doCollectItemFiles(File directory,boolean interruptable){
  File[] contents=directory.listFiles();
  Thread currentThread=Thread.currentThread();
  if (contents != null) {
    for (    File content : contents) {
      if (interruptable && currentThread.isInterrupted()) {
        return false;
      }
      File file=content;
      if (file.isFile()) {
        add(file.getAbsolutePath(),file);
      }
      if (file.isDirectory()) {
        if ((!FilesUtils.isSVNFolder(file))) {
          collectPath2Object(content);
        }
      }
    }
  }
  return true;
}","private boolean doCollectItemFiles(File directory,boolean interruptable){
  File[] contents=directory.listFiles();
  Thread currentThread=Thread.currentThread();
  if (contents != null) {
    for (    File content : contents) {
      if (interruptable && currentThread.isInterrupted()) {
        return false;
      }
      File file=content;
      if (file.isFile()) {
        add(file.getAbsolutePath(),file);
      }
      if (file.isDirectory()) {
        if ((!FilesUtils.isSVNFolder(file))) {
          collectPath2Object(content,interruptable);
        }
      }
    }
  }
  return true;
}",0.9083191850594228
130150,"@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  ERepositoryObjectType mrRepObjType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (mrRepObjType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(mrRepObjType,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  if (ERepositoryObjectType.ROUTINES != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(ERepositoryObjectType.ROUTINES,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  ERepositoryObjectType routeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (routeType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> routeList=service.getProxyRepositoryFactory().getAll(routeType,true,false);
      if (routeList != null && routeList.size() > 0) {
        list.addAll(routeList);
      }
    }
  }
  return list;
}","@Override protected List<IRepositoryViewObject> loadRepViewObjectWithOtherTypes() throws PersistenceException {
  List<IRepositoryViewObject> list=new ArrayList<IRepositoryViewObject>();
  List<IRepositoryViewObject> processList=getAllProcessTypeObjectsWithoutCurrentType();
  if (processList != null && !processList.isEmpty()) {
    list.addAll(processList);
  }
  if (ERepositoryObjectType.ROUTINES != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> mrList=service.getProxyRepositoryFactory().getAll(ERepositoryObjectType.ROUTINES,true,false);
      if (mrList != null && mrList.size() > 0) {
        list.addAll(mrList);
      }
    }
  }
  ERepositoryObjectType routeType=ERepositoryObjectType.valueOf(ERepositoryObjectType.class,""String_Node_Str"");
  if (routeType != null) {
    if (GlobalServiceRegister.getDefault().isServiceRegistered(IProxyRepositoryService.class)) {
      IProxyRepositoryService service=(IProxyRepositoryService)GlobalServiceRegister.getDefault().getService(IProxyRepositoryService.class);
      List<IRepositoryViewObject> routeList=service.getProxyRepositoryFactory().getAll(routeType,true,false);
      if (routeList != null && routeList.size() > 0) {
        list.addAll(routeList);
      }
    }
  }
  return list;
}",0.8110189573459715
130151,"public boolean hasChildren(Object element){
  return ((Folder)element).getChildren().size() > 0;
}","@Override public boolean hasChildren(Object element){
  return ((Folder)element).getChildren().size() > 0;
}",0.9514563106796116
130152,"public void run(){
  evaluateTextField();
}","@Override public void run(){
  evaluateTextField();
}",0.8958333333333334
130153,"private void openFolderSelectionDialog(boolean needCancelButton){
  RepositoryFolderSelectionDialog dialog=new RepositoryFolderSelectionDialog(getShell());
  dialog.setInput(getRepositoryObjectType());
  dialog.setContentProvider(new FoldersContentProvider());
  dialog.setLabelProvider(new FoldersLabelProvider(dialog));
  dialog.setTreeListener(new ITreeViewerListener(){
    public void treeCollapsed(    TreeExpansionEvent event){
      setItemImage(event,true);
    }
    public void treeExpanded(    TreeExpansionEvent event){
      setItemImage(event,false);
    }
    /** 
 * yzhang Comment method ""setItemImage"".
 * @param event
 */
    private void setItemImage(    TreeExpansionEvent event,    boolean isCollpased){
      Tree tree=((TreeViewer)event.getSource()).getTree();
      Object element=event.getElement();
      TreeItem item=getTreeObject(tree,element);
      if (isCollpased) {
        item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
      }
 else {
        item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
      }
    }
  }
);
  dialog.setTitle(Messages.getString(""String_Node_Str""));
  dialog.setMessage(Messages.getString(""String_Node_Str""));
  if (dialog.open() == Window.OK) {
    if (dialog.getResult().length > 0) {
      Folder folder=(Folder)dialog.getResult()[0];
      if (folder.getPath() == null) {
        pathText.setText(""String_Node_Str"");
      }
 else {
        String pathString=""String_Node_Str"";
        if (folder != null) {
          pathString=getFolderPath(getParentsFolder(folder));
        }
        pathText.setText(pathString);
        this.path=pathString;
      }
    }
  }
}","private void openFolderSelectionDialog(boolean needCancelButton){
  RepositoryFolderSelectionDialog dialog=new RepositoryFolderSelectionDialog(getShell());
  dialog.setInput(getRepositoryObjectType());
  dialog.setContentProvider(new FoldersContentProvider());
  dialog.setLabelProvider(new FoldersLabelProvider(dialog));
  dialog.setTreeListener(new ITreeViewerListener(){
    @Override public void treeCollapsed(    TreeExpansionEvent event){
      setItemImage(event,true);
    }
    @Override public void treeExpanded(    TreeExpansionEvent event){
      setItemImage(event,false);
    }
    /** 
 * yzhang Comment method ""setItemImage"".
 * @param event
 */
    private void setItemImage(    TreeExpansionEvent event,    boolean isCollpased){
      Tree tree=((TreeViewer)event.getSource()).getTree();
      Object element=event.getElement();
      TreeItem item=getTreeObject(tree,element);
      if (isCollpased) {
        item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_CLOSE_ICON));
      }
 else {
        item.setImage(ImageProvider.getImage(ECoreImage.FOLDER_OPEN_ICON));
      }
    }
  }
);
  dialog.setTitle(Messages.getString(""String_Node_Str""));
  dialog.setMessage(Messages.getString(""String_Node_Str""));
  if (dialog.open() == Window.OK) {
    if (dialog.getResult().length > 0) {
      Folder folder=(Folder)dialog.getResult()[0];
      if (folder.getPath() == null) {
        pathText.setText(""String_Node_Str"");
      }
 else {
        String pathString=""String_Node_Str"";
        if (folder != null) {
          pathString=getFolderPath(getParentsFolder(folder));
        }
        pathText.setText(pathString);
        this.path=pathString;
      }
    }
  }
}",0.9940476190476192
130154,"public Object[] getChildren(Object parentElement){
  return ((Folder)parentElement).getChildren().toArray();
}","@Override public Object[] getChildren(Object parentElement){
  return ((Folder)parentElement).getChildren().toArray();
}",0.9565217391304348
130155,"public void modifyText(ModifyEvent e){
  property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
  property.setModificationDate(new Date());
  updatePageStatus();
}","@Override public void modifyText(ModifyEvent e){
  property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
  property.setModificationDate(new Date());
  updatePageStatus();
}",0.9732620320855616
130156,"public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    Collections.sort(folders);
    Folder root=formdFolderTree(folders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}","@Override public Object[] getElements(Object inputElement){
  ERepositoryObjectType type=(ERepositoryObjectType)inputElement;
  IProxyRepositoryFactory factory=CoreRuntimePlugin.getInstance().getProxyRepositoryFactory();
  try {
    List<String> folders=factory.getFolders(type);
    Collections.sort(folders);
    Folder root=formdFolderTree(folders);
    return new Folder[]{root};
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
    return new String[0];
  }
}",0.989648033126294
130157,"public void dispose(){
}","@Override public void dispose(){
}",0.8275862068965517
130158,"protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
            property.setModificationDate(new Date());
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
      if (property != null && nameStatus.getSeverity() == IStatus.OK && purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
        updatePageStatus();
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      if (property != null && purposeStatus.getSeverity() == IStatus.OK && descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        property.setModificationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        property.setModificationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  regListeners();
}","protected void addListeners(){
  nameText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (!isSaveAs) {
        if (nameText.getText().length() == 0) {
          nameModifiedByUser=false;
        }
 else {
          nameModifiedByUser=true;
        }
        evaluateTextField();
      }
 else {
        if (nameText.getText().equalsIgnoreCase(orignalName)) {
          nameStatus=createOkStatus();
          updatePageStatus();
          if (versionText.getText().equalsIgnoreCase(orignalVersion)) {
            setPageComplete(false);
          }
 else {
            setPageComplete(true);
          }
          if (property != null && nameStatus.getSeverity() == IStatus.OK) {
            property.setDisplayName(StringUtils.trimToNull(nameText.getText()));
            property.setLabel(getPropertyLabel(StringUtils.trimToNull(nameText.getText())));
            property.setModificationDate(new Date());
          }
        }
 else {
          nameModifiedByUser=true;
          evaluateTextField();
        }
      }
      if (property != null && nameStatus.getSeverity() == IStatus.OK && purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
        updatePageStatus();
      }
    }
  }
);
  purposeText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (purposeText.getText().length() == 0) {
        purposeStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        purposeStatus=createOkStatus();
      }
      if (property != null && purposeStatus.getSeverity() == IStatus.OK && descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
      property.setPurpose(StringUtils.trimToNull(purposeText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  descriptionText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      if (descriptionText.getText().length() == 0) {
        commentStatus=createStatus(IStatus.WARNING,Messages.getString(""String_Node_Str""));
      }
 else {
        commentStatus=createOkStatus();
      }
      property.setDescription(StringUtils.trimToNull(descriptionText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  if (allowVerchange) {
    versionMajorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMajor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        property.setModificationDate(new Date());
        updatePageStatus();
      }
    }
);
    versionMinorBtn.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        String version=property.getVersion();
        if (lastVersionFound != null && VersionUtils.compareTo(lastVersionFound,version) > 0) {
          version=lastVersionFound;
        }
        version=VersionUtils.upMinor(version);
        versionText.setText(version);
        property.setVersion(version);
        property.setCreationDate(new Date());
        property.setModificationDate(new Date());
        updatePageStatus();
      }
    }
);
  }
  statusText.addModifyListener(new ModifyListener(){
    @Override public void modifyText(    ModifyEvent e){
      property.setStatusCode(statusHelper.getStatusCode(statusText.getText()));
      property.setModificationDate(new Date());
      updatePageStatus();
    }
  }
);
  regListeners();
}",0.9949874686716792
130159,"protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  this.property=property;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        listExistingObjects=loadRepositoryViewObjectList();
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      Display d=DisplayUtils.getDisplay();
      if (d != null) {
        d.syncExec(new Runnable(){
          public void run(){
            evaluateTextField();
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
}","protected PropertiesWizardPage(String pageName,final Property property,IPath destinationPath,boolean readOnly,boolean editPath,String lastVersionFound){
  super(pageName);
  statusHelper=new StatusHelper(CoreRuntimePlugin.getInstance().getProxyRepositoryFactory());
  this.destinationPath=destinationPath;
  this.readOnly=readOnly;
  this.editPath=editPath;
  nameStatus=createOkStatus();
  purposeStatus=createOkStatus();
  commentStatus=createOkStatus();
  this.lastVersionFound=lastVersionFound;
  this.property=property;
  Job job=new Job(""String_Node_Str""){
    @Override protected IStatus run(    IProgressMonitor monitor){
      try {
        listExistingObjects=loadRepositoryViewObjectList();
      }
 catch (      PersistenceException e) {
        return new org.eclipse.core.runtime.Status(IStatus.ERROR,""String_Node_Str"",1,""String_Node_Str"",e);
      }
      retrieveNameFinished=true;
      Display d=DisplayUtils.getDisplay();
      if (d != null) {
        d.syncExec(new Runnable(){
          @Override public void run(){
            evaluateTextField();
          }
        }
);
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setUser(false);
  job.setPriority(Job.BUILD);
  job.schedule();
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
}",0.996481351161154
130160,"public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","@Override public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}",0.9367088607594936
130161,"public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
  if (allowVerchange) {
    Label versionLab=new Label(parent,SWT.NONE);
    versionLab.setText(Messages.getString(""String_Node_Str""));
    Composite versionContainer=new Composite(parent,SWT.NONE);
    versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    GridLayout versionLayout=new GridLayout(3,false);
    versionLayout.marginHeight=0;
    versionLayout.marginWidth=0;
    versionLayout.horizontalSpacing=0;
    versionContainer.setLayout(versionLayout);
    versionText=new Text(versionContainer,SWT.BORDER);
    versionText.setEnabled(false);
    versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    versionMajorBtn=new Button(versionContainer,SWT.PUSH);
    versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
    versionMajorBtn.setEnabled(!readOnly && allowVerchange);
    versionMinorBtn=new Button(versionContainer,SWT.PUSH);
    versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
    versionMinorBtn.setEnabled(!readOnly && allowVerchange);
  }
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
  createBottomPart(parent);
}","@Override public void createControl(Composite parent){
  GridData data;
  Label nameLab=new Label(parent,SWT.NONE);
  nameLab.setText(Messages.getString(""String_Node_Str""));
  nameText=new Text(parent,SWT.BORDER);
  nameText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  nameText.setEditable(!readOnly);
  Label purposeLab=new Label(parent,SWT.NONE);
  purposeLab.setText(Messages.getString(""String_Node_Str""));
  purposeText=new Text(parent,SWT.BORDER);
  purposeText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  purposeText.setEditable(!readOnly);
  Label descriptionLab=new Label(parent,SWT.NONE);
  descriptionLab.setText(Messages.getString(""String_Node_Str""));
  descriptionLab.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  descriptionText=new Text(parent,SWT.BORDER | SWT.MULTI | SWT.WRAP| SWT.V_SCROLL);
  data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=60;
  descriptionText.setLayoutData(data);
  descriptionText.setEditable(!readOnly);
  Label authorLab=new Label(parent,SWT.NONE);
  authorLab.setText(Messages.getString(""String_Node_Str""));
  authorText=new Text(parent,SWT.BORDER);
  authorText.setEnabled(false);
  authorText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label lockerLab=new Label(parent,SWT.NONE);
  lockerLab.setText(Messages.getString(""String_Node_Str""));
  lockerText=new Text(parent,SWT.BORDER);
  lockerText.setEnabled(false);
  lockerText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  IBrandingService brandingService=(IBrandingService)GlobalServiceRegister.getDefault().getService(IBrandingService.class);
  allowVerchange=brandingService.getBrandingConfiguration().isAllowChengeVersion();
  if (allowVerchange) {
    Label versionLab=new Label(parent,SWT.NONE);
    versionLab.setText(Messages.getString(""String_Node_Str""));
    Composite versionContainer=new Composite(parent,SWT.NONE);
    versionContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    GridLayout versionLayout=new GridLayout(3,false);
    versionLayout.marginHeight=0;
    versionLayout.marginWidth=0;
    versionLayout.horizontalSpacing=0;
    versionContainer.setLayout(versionLayout);
    versionText=new Text(versionContainer,SWT.BORDER);
    versionText.setEnabled(false);
    versionText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    versionMajorBtn=new Button(versionContainer,SWT.PUSH);
    versionMajorBtn.setText(Messages.getString(""String_Node_Str""));
    versionMajorBtn.setEnabled(!readOnly && allowVerchange);
    versionMinorBtn=new Button(versionContainer,SWT.PUSH);
    versionMinorBtn.setText(Messages.getString(""String_Node_Str""));
    versionMinorBtn.setEnabled(!readOnly && allowVerchange);
  }
  Label statusLab=new Label(parent,SWT.NONE);
  statusLab.setText(Messages.getString(""String_Node_Str""));
  statusText=new CCombo(parent,SWT.BORDER);
  statusText.setEditable(false);
  List<org.talend.core.model.properties.Status> statusList;
  try {
    if (property != null) {
      statusList=statusHelper.getStatusList(property);
      statusText.setItems(toArray(statusList));
      statusText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      statusText.setEnabled(!readOnly);
    }
  }
 catch (  PersistenceException e) {
    ExceptionHandler.process(e);
  }
  Label pathLab=new Label(parent,SWT.NONE);
  pathLab.setText(Messages.getString(""String_Node_Str""));
  Composite pathContainer=new Composite(parent,SWT.NONE);
  pathContainer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  GridLayout pathLayout=new GridLayout(2,false);
  pathLayout.marginHeight=0;
  pathLayout.marginWidth=0;
  pathLayout.horizontalSpacing=0;
  pathContainer.setLayout(pathLayout);
  pathText=new Text(pathContainer,SWT.BORDER);
  pathText.setEnabled(false);
  pathText.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  if (editPath) {
    Button button=new Button(pathContainer,SWT.PUSH);
    button.setText(Messages.getString(""String_Node_Str""));
    button.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        openFolderSelectionDialog(NEED_CANCEL_BUTTON);
      }
    }
);
    if (destinationPath == null) {
      openFolderSelectionDialog(!NEED_CANCEL_BUTTON);
    }
  }
  createBottomPart(parent);
}",0.9988401762932034
130162,"public void treeExpanded(TreeExpansionEvent event){
  setItemImage(event,false);
}","@Override public void treeExpanded(TreeExpansionEvent event){
  setItemImage(event,false);
}",0.942528735632184
130163,"public Object getParent(Object element){
  return null;
}","@Override public Object getParent(Object element){
  return null;
}",0.9193548387096774
130164,"public void treeCollapsed(TreeExpansionEvent event){
  setItemImage(event,true);
}","@Override public void treeCollapsed(TreeExpansionEvent event){
  setItemImage(event,true);
}",0.942528735632184
130165,"public Exception getExecuteException(){
  return executeException;
}","public Throwable getExecuteException(){
  return executeException;
}",0.8823529411764706
130166,"@Override public T call() throws Exception {
  T result=null;
  try {
    result=runnableWithCancel(monitor);
  }
 catch (  Exception e) {
    executeException=e;
  }
  return result;
}","@Override public T call() throws Exception {
  T result=null;
  try {
    result=runnableWithCancel(monitor);
  }
 catch (  Throwable e) {
    executeException=e;
  }
  return result;
}",0.9567567567567568
130167,abstract protected T runnableWithCancel(IProgressMonitor monitor) throws Exception ;,abstract protected T runnableWithCancel(IProgressMonitor monitor) throws Throwable ;,0.9047619047619048
130168,"private void checkConnection(final StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (!isContextMode()) {
      if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
 else       if (EDatabaseTypeName.NETEZZA.getProduct().equals(c.getProductId()) || MetadataFillFactory.isJdbcNetezza(c.getDatabaseType(),c.getDriverClass())) {
        if (sidOrDatabaseText != null) {
          sidOrDatabaseText.setText(sidOrDatabaseText.getText().toUpperCase());
        }
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(getUppercaseNetezzaUrl(urlConnectionStringText.getText()));
        }
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(getUppercaseNetezzaUrl(generalJdbcUrlText.getText()));
        }
      }
    }
  }
  final ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
      if (EImpalaDistributions.CUSTOM != EImpalaDistributions.getDistributionByName(impalaDistributionCombo.getText(),true)) {
        versionStr=EImpalaDistribution4Versions.indexOfByVersionDisplay(impalaVersionCombo.getText()).getVersionValue();
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  AProgressMonitorDialogWithCancel<Boolean> checkingDialog;
  if (dbType.isUseProvider()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(metadataConn,retProposedSchema);
      }
    }
;
  }
 else   if (isHiveDBConnSelected()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.checkHiveConnection(metadataConn);
      }
    }
;
  }
 else {
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(retProposedSchema);
      }
    }
;
  }
  String executeMessage=Messages.getString(""String_Node_Str"");
  Exception executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  checkButton.setEnabled(true);
  if (checkingDialog.isUserCanncelled()) {
    return;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return;
    }
    databaseSettingIsValide=false;
  }
 else {
    databaseSettingIsValide=checkingDialog.getExecuteResult();
  }
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=null;
    Exception exception=managerConnection.getException();
    if (exception instanceof WarningSQLException) {
      mainMsg=exception.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else     if (exception == null && executeException != null) {
      mainMsg=executeException.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else {
      mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
      new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
    }
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
  }
}","private void checkConnection(final StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (!isContextMode()) {
      if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
 else       if (EDatabaseTypeName.NETEZZA.getProduct().equals(c.getProductId()) || MetadataFillFactory.isJdbcNetezza(c.getDatabaseType(),c.getDriverClass())) {
        if (sidOrDatabaseText != null) {
          sidOrDatabaseText.setText(sidOrDatabaseText.getText().toUpperCase());
        }
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(getUppercaseNetezzaUrl(urlConnectionStringText.getText()));
        }
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(getUppercaseNetezzaUrl(generalJdbcUrlText.getText()));
        }
      }
    }
  }
  final ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
      if (EImpalaDistributions.CUSTOM != EImpalaDistributions.getDistributionByName(impalaDistributionCombo.getText(),true)) {
        versionStr=EImpalaDistribution4Versions.indexOfByVersionDisplay(impalaVersionCombo.getText()).getVersionValue();
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  AProgressMonitorDialogWithCancel<Boolean> checkingDialog;
  if (dbType.isUseProvider()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(metadataConn,retProposedSchema);
      }
    }
;
  }
 else   if (isHiveDBConnSelected()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.checkHiveConnection(metadataConn);
      }
    }
;
  }
 else {
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(retProposedSchema);
      }
    }
;
  }
  String executeMessage=Messages.getString(""String_Node_Str"");
  Throwable executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  checkButton.setEnabled(true);
  if (checkingDialog.isUserCanncelled()) {
    return;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return;
    }
    databaseSettingIsValide=false;
  }
 else {
    databaseSettingIsValide=checkingDialog.getExecuteResult();
  }
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=null;
    Exception exception=managerConnection.getException();
    if (exception instanceof WarningSQLException) {
      mainMsg=exception.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else     if (exception == null && executeException != null) {
      mainMsg=executeException.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else {
      mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
      new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
    }
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
  }
}",0.998776675275248
130169,"public List<ImportItem> populateImportingItems(ResourcesManager resManager,boolean overwrite,IProgressMonitor progressMonitor,boolean enableProductChecking) throws Exception {
  IProgressMonitor monitor=progressMonitor;
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  try {
    prePopulate(monitor,resManager);
    ImportCacheHelper.getInstance().beforePopulateItems();
    if (resManager == null) {
      return Collections.emptyList();
    }
    Set<IPath> resPaths=resManager.getPaths();
    monitor.beginTask(Messages.getString(""String_Node_Str""),resPaths.size());
    List<ImportItem> items=new ArrayList<ImportItem>();
    ImportHandlerHelper importHandlerHelper=new ImportHandlerHelper();
    for (    IPath path : resPaths) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      ImportItem importItem=importHandlerHelper.computeImportItem(monitor,resManager,path,overwrite);
      if (importItem != null) {
        IImportItemsHandler importHandler=findValidImportHandler(importItem,enableProductChecking);
        if (importHandler != null) {
          if (importHandler instanceof ImportBasicHandler) {
            ImportBasicHandler importBasicHandler=(ImportBasicHandler)importHandler;
            if (importBasicHandler.checkItem(resManager,importItem,overwrite)) {
              importBasicHandler.checkAndSetProject(resManager,importItem);
            }
          }
        }
 else {
          importItem=null;
        }
      }
      if (importItem == null) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,enableProductChecking);
        if (importHandler != null) {
          importItem=importHandler.createImportItem(progressMonitor,resManager,path,overwrite,items);
        }
      }
      if (importItem != null && !items.contains(importItem)) {
        items.add(importItem);
      }
      monitor.worked(1);
    }
    postPopulate(monitor,resManager,items.toArray(new ImportItem[0]));
    return items;
  }
  finally {
    ImportCacheHelper.getInstance().afterPopulateItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}","public List<ImportItem> populateImportingItems(ResourcesManager resManager,boolean overwrite,IProgressMonitor progressMonitor,boolean enableProductChecking) throws Exception {
  IProgressMonitor monitor=progressMonitor;
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  TimeMeasure.display=CommonsPlugin.isDebugMode();
  TimeMeasure.displaySteps=CommonsPlugin.isDebugMode();
  TimeMeasure.measureActive=CommonsPlugin.isDebugMode();
  TimeMeasure.begin(""String_Node_Str"");
  try {
    prePopulate(monitor,resManager);
    ImportCacheHelper.getInstance().beforePopulateItems();
    if (resManager == null) {
      return Collections.emptyList();
    }
    Set<IPath> resPaths=resManager.getPaths();
    monitor.beginTask(Messages.getString(""String_Node_Str""),resPaths.size());
    List<ImportItem> items=new ArrayList<ImportItem>();
    List<IPath> resourcesPathsList=new ArrayList<IPath>(resPaths);
    Collections.sort(resourcesPathsList,new Comparator<IPath>(){
      @Override public int compare(      IPath o1,      IPath o2){
        return o1.toPortableString().compareTo(o2.toPortableString());
      }
    }
);
    List<IPath> doneList=new ArrayList<IPath>();
    ImportHandlerHelper importHandlerHelper=new ImportHandlerHelper();
    for (    IPath path : resourcesPathsList) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      if (!importHandlerHelper.validResourcePath(path)) {
        IImportItemsHandler importHandler=findValidImportHandler(resManager,path,enableProductChecking);
        if (importHandler != null) {
          ImportItem importItem=importHandler.createImportItem(progressMonitor,resManager,path,overwrite,items);
          if (importItem != null && !items.contains(importItem)) {
            items.add(importItem);
            doneList.add(path);
          }
        }
        monitor.worked(1);
      }
    }
    resourcesPathsList.removeAll(doneList);
    for (    IPath path : resPaths) {
      if (monitor.isCanceled()) {
        return Collections.emptyList();
      }
      ImportItem importItem=importHandlerHelper.computeImportItem(monitor,resManager,path,overwrite);
      if (importItem != null) {
        IImportItemsHandler importHandler=findValidImportHandler(importItem,enableProductChecking);
        if (importHandler != null) {
          if (importHandler instanceof ImportBasicHandler) {
            ImportBasicHandler importBasicHandler=(ImportBasicHandler)importHandler;
            if (importBasicHandler.checkItem(resManager,importItem,overwrite)) {
              importBasicHandler.checkAndSetProject(resManager,importItem);
            }
          }
        }
 else {
          importItem=null;
        }
      }
      if (importItem != null && !items.contains(importItem)) {
        items.add(importItem);
      }
      monitor.worked(1);
    }
    postPopulate(monitor,resManager,items.toArray(new ImportItem[0]));
    return items;
  }
  finally {
    ImportCacheHelper.getInstance().afterPopulateItems();
    TimeMeasure.end(""String_Node_Str"");
    TimeMeasure.display=false;
    TimeMeasure.displaySteps=false;
    TimeMeasure.measureActive=false;
  }
}",0.6783042394014963
130170,"/** 
 * According to the valid resource path, resolve the EMF properties file, and check the overwrite status or be valid item or not, etc.
 * @param monitor
 * @param resManager
 * @param resourcePath according to the this path to calculate the item record.
 * @param overwrite
 * @return if not valid, will return null.
 */
public ImportItem computeImportItem(IProgressMonitor monitor,ResourcesManager resManager,IPath resourcePath,boolean overwrite) throws Exception {
  if (resManager == null || resourcePath == null) {
    return null;
  }
  if (!ImportCacheHelper.getInstance().getXmiResourceManager().isPropertyFile(resourcePath.lastSegment())) {
    return null;
  }
  ImportItem importItem=new ImportItem(resourcePath);
  Resource resource=HandlerUtil.loadResource(resManager,importItem);
  if (resource != null) {
    importItem.setProperty((Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty()));
  }
 else {
    ResourceNotFoundException ex=new ResourceNotFoundException(Messages.getString(""String_Node_Str"",importItem.getPath().lastSegment(),HandlerUtil.getValidItemRelativePath(resManager,importItem.getPath())));
    importItem.addError(ex.getMessage());
  }
  return importItem;
}","/** 
 * According to the valid resource path, resolve the EMF properties file, and check the overwrite status or be valid item or not, etc.
 * @param monitor
 * @param resManager
 * @param resourcePath according to the this path to calculate the item record.
 * @param overwrite
 * @return if not valid, will return null.
 */
public ImportItem computeImportItem(IProgressMonitor monitor,ResourcesManager resManager,IPath resourcePath,boolean overwrite) throws Exception {
  if (resManager == null || resourcePath == null) {
    return null;
  }
  if (!validResourcePath(resourcePath)) {
    return null;
  }
  ImportItem importItem=new ImportItem(resourcePath);
  Resource resource=HandlerUtil.loadResource(resManager,importItem);
  if (resource != null) {
    importItem.setProperty((Property)EcoreUtil.getObjectByType(resource.getContents(),PropertiesPackage.eINSTANCE.getProperty()));
  }
 else {
    ResourceNotFoundException ex=new ResourceNotFoundException(Messages.getString(""String_Node_Str"",importItem.getPath().lastSegment(),HandlerUtil.getValidItemRelativePath(resManager,importItem.getPath())));
    importItem.addError(ex.getMessage());
  }
  return importItem;
}",0.9541132699462588
130171,"/** 
 * return true if it is netezza.
 * @param databaseMetaData
 * @return
 * @throws SQLException
 */
public static boolean isNetezza(DatabaseMetaData databaseMetaData){
  try {
    if (databaseMetaData != null && StringUtils.startsWithIgnoreCase(databaseMetaData.getDriverName(),""String_Node_Str"") && StringUtils.startsWithIgnoreCase(databaseMetaData.getDatabaseProductName(),""String_Node_Str"")) {
      return true;
    }
  }
 catch (  SQLException e) {
    log.warn(e);
  }
  return false;
}","/** 
 * return true if it is netezza.
 * @param databaseMetaData
 * @return
 * @throws SQLException
 */
public static boolean isNetezza(DatabaseMetaData databaseMetaData){
  try {
    if (databaseMetaData != null && databaseMetaData.getDriverName() != null && databaseMetaData.getDriverName().toLowerCase().startsWith(""String_Node_Str"") && databaseMetaData.getDatabaseProductName() != null && databaseMetaData.getDatabaseProductName().toLowerCase().startsWith(""String_Node_Str"")) {
      return true;
    }
  }
 catch (  SQLException e) {
    log.warn(e);
  }
  return false;
}",0.7027027027027027
130172,"private void checkConnection(final StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (!isContextMode()) {
      if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
 else       if (EDatabaseTypeName.NETEZZA.getProduct().equals(c.getProductId()) || MetadataFillFactory.isJdbcNetezza(c.getDatabaseType(),c.getDriverClass())) {
        if (sidOrDatabaseText != null) {
          sidOrDatabaseText.setText(sidOrDatabaseText.getText().toUpperCase());
        }
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(getUppercaseNetezzaUrl(urlConnectionStringText.getText()));
        }
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(getUppercaseNetezzaUrl(generalJdbcUrlText.getText()));
        }
      }
    }
  }
  final ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
      if (EImpalaDistributions.CUSTOM != EImpalaDistributions.getDistributionByName(impalaDistributionCombo.getText(),true)) {
        versionStr=EImpalaDistribution4Versions.indexOfByVersionDisplay(impalaVersionCombo.getText()).getVersionValue();
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  AProgressMonitorDialogWithCancel<Boolean> checkingDialog;
  if (dbType.isUseProvider()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(metadataConn,retProposedSchema);
      }
    }
;
  }
 else   if (isHiveDBConnSelected()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.checkHiveConnection(metadataConn);
      }
    }
;
  }
 else {
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(retProposedSchema);
      }
    }
;
  }
  String executeMessage=Messages.getString(""String_Node_Str"");
  Exception executeException=null;
  int timeout=DatabaseConnectionParameterUtil.getDefaultDBConnectionTimeout();
  if (0 < timeout) {
    timeout+=5;
  }
  try {
    checkingDialog.run(executeMessage,null,true,timeout);
  }
 catch (  Exception e) {
    executeException=e;
  }
  checkButton.setEnabled(true);
  if (checkingDialog.isUserCanncelled()) {
    return;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return;
    }
    databaseSettingIsValide=false;
  }
 else {
    databaseSettingIsValide=checkingDialog.getExecuteResult();
  }
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=null;
    Exception exception=managerConnection.getException();
    if (exception instanceof WarningSQLException) {
      mainMsg=exception.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else     if (exception == null && executeException != null) {
      mainMsg=executeException.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else {
      mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
      new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
    }
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
  }
}","private void checkConnection(final StringBuffer retProposedSchema){
  if (isSqliteFileFieldInvalidate()) {
    return;
  }
  checkButton.setEnabled(false);
  if (connectionItem.getConnection() instanceof DatabaseConnection) {
    DatabaseConnection c=(DatabaseConnection)connectionItem.getConnection();
    if (!isContextMode()) {
      if (EDatabaseTypeName.ORACLEFORSID.getProduct().equals(c.getProductId())) {
        schemaText.setText(schemaText.getText().toUpperCase());
      }
 else       if (EDatabaseTypeName.NETEZZA.getProduct().equals(c.getProductId()) || MetadataFillFactory.isJdbcNetezza(c.getDatabaseType(),c.getDriverClass())) {
        if (sidOrDatabaseText != null) {
          sidOrDatabaseText.setText(sidOrDatabaseText.getText().toUpperCase());
        }
        if (urlConnectionStringText != null) {
          urlConnectionStringText.setText(getUppercaseNetezzaUrl(urlConnectionStringText.getText()));
        }
        if (generalJdbcUrlText != null) {
          generalJdbcUrlText.setText(getUppercaseNetezzaUrl(generalJdbcUrlText.getText()));
        }
      }
    }
  }
  final ManagerConnection managerConnection=new ManagerConnection();
  if (isContextMode()) {
    selectedContextType=ConnectionContextHelper.getContextTypeForContextMode(connectionItem.getConnection());
    String urlStr=DBConnectionContextUtils.setManagerConnectionValues(managerConnection,connectionItem,selectedContextType,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),dbTypeCombo.getSelectionIndex());
    if (urlStr == null || isHiveDBConnSelected()) {
      if (dbTypeCombo.getText().equals(EDatabaseConnTemplate.GENERAL_JDBC.getDBDisplayName())) {
        DatabaseConnection dbConn=(DatabaseConnection)connectionItem.getConnection();
        ContextType contextType=ConnectionContextHelper.getContextTypeForContextMode(dbConn);
        urlStr=ConnectionContextHelper.getOriginalValue(contextType,dbConn.getURL());
      }
 else {
        urlStr=getStringConnection();
      }
    }
    urlConnectionStringText.setText(urlStr);
  }
 else {
    String versionStr=dbVersionCombo.getText();
    if (EDatabaseTypeName.HIVE.getDisplayName().equals(dbTypeCombo.getText())) {
      EDatabaseVersion4Drivers driver=EDatabaseVersion4Drivers.indexOfByVersionDisplay(hiveModeCombo.getText());
      versionStr=driver.getVersionValue();
    }
 else     if (EDatabaseTypeName.IMPALA.getDisplayName().equals(dbTypeCombo.getText())) {
      urlConnectionStringText.setText(getStringConnection());
      if (EImpalaDistributions.CUSTOM != EImpalaDistributions.getDistributionByName(impalaDistributionCombo.getText(),true)) {
        versionStr=EImpalaDistribution4Versions.indexOfByVersionDisplay(impalaVersionCombo.getText()).getVersionValue();
      }
    }
 else {
      EDatabaseVersion4Drivers version=EDatabaseVersion4Drivers.indexOfByVersionDisplay(versionStr);
      if (version != null) {
        versionStr=version.getVersionValue();
      }
    }
    managerConnection.setValue(0,dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()),isGeneralJDBC() ? generalJdbcUrlText.getText() : urlConnectionStringText.getText(),serverText.getText(),isGeneralJDBC() ? generalJdbcUserText.getText() : usernameText.getText(),isGeneralJDBC() ? generalJdbcPasswordText.getText() : passwordText.getText(),sidOrDatabaseText.getText(),portText.getText(),fileField.getText(),datasourceText.getText(),isGeneralJDBC() ? jDBCschemaText.getText() : schemaText.getText(),additionParamText.getText(),generalJdbcClassNameText.getText(),generalJdbcDriverjarText.getText(),enableDbVersion() ? versionStr : null,metadataconnection.getOtherParameters());
    managerConnection.setDbRootPath(directoryField.getText());
  }
  managerConnection.setValueProperties(sqlSyntaxCombo.getItem(sqlSyntaxCombo.getSelectionIndex()),stringQuoteText.getText(),nullCharText.getText());
  EDatabaseTypeName dbType=EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex()));
  AProgressMonitorDialogWithCancel<Boolean> checkingDialog;
  if (dbType.isUseProvider()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(metadataConn,retProposedSchema);
      }
    }
;
  }
 else   if (isHiveDBConnSelected()) {
    final IMetadataConnection metadataConn=ConvertionHelper.convert(connectionItem.getConnection(),true);
    if (isHiveEmbeddedMode()) {
      doHivePreSetup((DatabaseConnection)metadataConn.getCurrentConnection());
    }
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.checkHiveConnection(metadataConn);
      }
    }
;
  }
 else {
    checkingDialog=new AProgressMonitorDialogWithCancel<Boolean>(getShell()){
      @Override protected Boolean runWithCancel(      IProgressMonitor monitor) throws Exception {
        return managerConnection.check(retProposedSchema);
      }
    }
;
  }
  String executeMessage=Messages.getString(""String_Node_Str"");
  Exception executeException=null;
  try {
    checkingDialog.run(executeMessage,null,true,AProgressMonitorDialogWithCancel.ENDLESS_WAIT_TIME);
  }
 catch (  Exception e) {
    executeException=e;
  }
  checkButton.setEnabled(true);
  if (checkingDialog.isUserCanncelled()) {
    return;
  }
  if (checkingDialog.getExecuteException() != null) {
    executeException=checkingDialog.getExecuteException();
  }
  if (executeException != null) {
    if (executeException instanceof InterruptedException) {
      CommonExceptionHandler.process(executeException,Priority.WARN);
      return;
    }
    databaseSettingIsValide=false;
  }
 else {
    databaseSettingIsValide=checkingDialog.getExecuteResult();
  }
  if (databaseSettingIsValide) {
    if (!isReadOnly()) {
      updateStatus(IStatus.OK,null);
    }
    MessageDialog.openInformation(getShell(),Messages.getString(""String_Node_Str""),""String_Node_Str"" + connectionItem.getProperty().getDisplayName() + ""String_Node_Str""+ Messages.getString(""String_Node_Str""));
    if (!isReadOnly()) {
      if (isContextMode()) {
        adaptFormToEditable();
      }
 else {
        setPropertiesFormEditable(true);
      }
    }
    String msg=checkDBVersion();
    if (msg != null) {
      updateStatus(IStatus.WARNING,msg);
    }
  }
 else {
    String mainMsg=null;
    Exception exception=managerConnection.getException();
    if (exception instanceof WarningSQLException) {
      mainMsg=exception.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else     if (exception == null && executeException != null) {
      mainMsg=executeException.getMessage();
      MessageDialog.openWarning(getShell(),Messages.getString(""String_Node_Str""),mainMsg);
    }
 else {
      mainMsg=Messages.getString(""String_Node_Str"") + ""String_Node_Str"" + Messages.getString(""String_Node_Str"");
      new ErrorDialogWidthDetailArea(getShell(),PID,mainMsg,managerConnection.getMessageException());
    }
    if (!isReadOnly()) {
      updateStatus(IStatus.WARNING,mainMsg);
    }
  }
}",0.981137178013657
130173,"private void createTables(RepositoryNode recBinNode,RepositoryNode node,final IRepositoryViewObject repObj,Connection metadataConnection,List<IRepositoryViewObject> validationRules){
  if (metadataConnection instanceof DatabaseConnection) {
    RepositoryNode tablesNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    node.getChildren().add(tablesNode);
    RepositoryNode viewsNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    node.getChildren().add(viewsNode);
    RepositoryNode synonymsNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    node.getChildren().add(synonymsNode);
    DatabaseConnection dbconn=(DatabaseConnection)metadataConnection;
    List<MetadataTable> allTables=ConnectionHelper.getTablesWithOrders(dbconn);
    Iterator metadataTables=allTables.iterator();
    while (metadataTables.hasNext()) {
      org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable=(org.talend.core.model.metadata.builder.connection.MetadataTable)metadataTables.next();
      if (SubItemHelper.isDeleted(metadataTable)) {
        continue;
      }
      String typeTable=null;
      if (metadataTable != null && metadataTable.getTableType() != null) {
        typeTable=metadataTable.getTableType();
        if (typeTable.equals(MetadataManager.TYPE_TABLE)) {
          createTable(recBinNode,tablesNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
 else         if (typeTable.equals(MetadataManager.TYPE_VIEW)) {
          createTable(recBinNode,viewsNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
 else         if (typeTable.equals(MetadataManager.TYPE_SYNONYM)) {
          createTable(recBinNode,synonymsNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
 else         if (typeTable.equals(MetadataManager.TYPE_ALIAS)) {
          createTable(recBinNode,synonymsNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
      }
 else {
        createTable(recBinNode,tablesNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
      }
    }
    if (!ConnectionUtils.isHiveConnection(dbconn.getURL())) {
      RepositoryNode queriesNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
      node.getChildren().add(queriesNode);
      QueriesConnection queriesConnection=(metadataConnection).getQueries();
      if (queriesConnection != null) {
        createTables(recBinNode,queriesNode,repObj,queriesConnection.getQuery(),ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
      }
    }
    Item item=node.getObject().getProperty().getItem();
    if (item instanceof DatabaseConnectionItem) {
      DatabaseConnectionItem connectionItem=(DatabaseConnectionItem)item;
      DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
      if (PluginChecker.isCDCPluginLoaded()) {
        ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
        if (service != null && service.canCreateCDCConnection(connection)) {
          RepositoryNode cdcNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
          node.getChildren().add(cdcNode);
          service.createCDCTypes(recBinNode,cdcNode,connection.getCdcConns());
        }
      }
    }
  }
 else   if (metadataConnection instanceof SAPConnection) {
    createSAPTableNodes(recBinNode,repObj,metadataConnection,node,validationRules);
    StableRepositoryNode functionNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    functionNode.setChildrenObjectType(ERepositoryObjectType.METADATA_SAP_FUNCTION);
    node.getChildren().add(functionNode);
    createSAPFunctionNodes(recBinNode,repObj,metadataConnection,functionNode,validationRules);
    StableRepositoryNode iDocNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    iDocNode.setChildrenObjectType(ERepositoryObjectType.METADATA_SAP_IDOC);
    node.getChildren().add(iDocNode);
    createSAPIDocNodes(recBinNode,repObj,metadataConnection,iDocNode);
  }
 else   if (metadataConnection instanceof SalesforceSchemaConnection) {
    createSalesforceModuleNodes(recBinNode,repObj,metadataConnection,node,validationRules);
  }
 else {
    Set<org.talend.core.model.metadata.builder.connection.MetadataTable> tableset=ConnectionHelper.getTables(metadataConnection);
    EList tables=new BasicEList();
    tables.addAll(tableset);
    createTables(recBinNode,node,repObj,tables,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
  }
}","private void createTables(RepositoryNode recBinNode,RepositoryNode node,final IRepositoryViewObject repObj,Connection metadataConnection,List<IRepositoryViewObject> validationRules){
  if (metadataConnection instanceof DatabaseConnection) {
    RepositoryNode tablesNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    node.getChildren().add(tablesNode);
    RepositoryNode viewsNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    node.getChildren().add(viewsNode);
    RepositoryNode synonymsNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    node.getChildren().add(synonymsNode);
    DatabaseConnection dbconn=(DatabaseConnection)metadataConnection;
    List<MetadataTable> allTables=ConnectionHelper.getTablesWithOrders(dbconn);
    Iterator metadataTables=allTables.iterator();
    while (metadataTables.hasNext()) {
      org.talend.core.model.metadata.builder.connection.MetadataTable metadataTable=(org.talend.core.model.metadata.builder.connection.MetadataTable)metadataTables.next();
      if (SubItemHelper.isDeleted(metadataTable)) {
        continue;
      }
      String typeTable=null;
      if (metadataTable != null && metadataTable.getTableType() != null) {
        typeTable=metadataTable.getTableType();
        if (typeTable.equals(MetadataManager.TYPE_TABLE)) {
          createTable(recBinNode,tablesNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
 else         if (typeTable.equals(MetadataManager.TYPE_VIEW)) {
          createTable(recBinNode,viewsNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
 else         if (typeTable.equals(MetadataManager.TYPE_SYNONYM)) {
          createTable(recBinNode,synonymsNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
 else         if (typeTable.equals(MetadataManager.TYPE_ALIAS)) {
          createTable(recBinNode,synonymsNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
        }
      }
 else {
        createTable(recBinNode,tablesNode,repObj,metadataTable,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
      }
    }
    boolean isImpala=false;
    if (metadataConnection instanceof DatabaseConnection) {
      if (EDatabaseTypeName.IMPALA.getDisplayName().equals(((DatabaseConnection)metadataConnection).getDatabaseType())) {
        isImpala=true;
      }
    }
    if (!ConnectionUtils.isHiveConnection(dbconn.getURL()) || isImpala) {
      RepositoryNode queriesNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
      node.getChildren().add(queriesNode);
      QueriesConnection queriesConnection=(metadataConnection).getQueries();
      if (queriesConnection != null) {
        createTables(recBinNode,queriesNode,repObj,queriesConnection.getQuery(),ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
      }
    }
    Item item=node.getObject().getProperty().getItem();
    if (item instanceof DatabaseConnectionItem) {
      DatabaseConnectionItem connectionItem=(DatabaseConnectionItem)item;
      DatabaseConnection connection=(DatabaseConnection)connectionItem.getConnection();
      if (PluginChecker.isCDCPluginLoaded()) {
        ICDCProviderService service=(ICDCProviderService)GlobalServiceRegister.getDefault().getService(ICDCProviderService.class);
        if (service != null && service.canCreateCDCConnection(connection)) {
          RepositoryNode cdcNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
          node.getChildren().add(cdcNode);
          service.createCDCTypes(recBinNode,cdcNode,connection.getCdcConns());
        }
      }
    }
  }
 else   if (metadataConnection instanceof SAPConnection) {
    createSAPTableNodes(recBinNode,repObj,metadataConnection,node,validationRules);
    StableRepositoryNode functionNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    functionNode.setChildrenObjectType(ERepositoryObjectType.METADATA_SAP_FUNCTION);
    node.getChildren().add(functionNode);
    createSAPFunctionNodes(recBinNode,repObj,metadataConnection,functionNode,validationRules);
    StableRepositoryNode iDocNode=new StableRepositoryNode(node,Messages.getString(""String_Node_Str""),ECoreImage.FOLDER_CLOSE_ICON);
    iDocNode.setChildrenObjectType(ERepositoryObjectType.METADATA_SAP_IDOC);
    node.getChildren().add(iDocNode);
    createSAPIDocNodes(recBinNode,repObj,metadataConnection,iDocNode);
  }
 else   if (metadataConnection instanceof SalesforceSchemaConnection) {
    createSalesforceModuleNodes(recBinNode,repObj,metadataConnection,node,validationRules);
  }
 else {
    Set<org.talend.core.model.metadata.builder.connection.MetadataTable> tableset=ConnectionHelper.getTables(metadataConnection);
    EList tables=new BasicEList();
    tables.addAll(tableset);
    createTables(recBinNode,node,repObj,tables,ERepositoryObjectType.METADATA_CON_TABLE,validationRules);
  }
}",0.9745454545454544
130174,"public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=conn.getMetaData().getURL();
          boolean isInProcessModeHsql=ConnectionUtils.isInProcessModeHsql(url);
          if (isInProcessModeHsql) {
            ConnectionUtils.executeShutDownForHSQL(conn);
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}","public void closeConnection(boolean force){
  try {
    if (conn != null && !conn.isClosed()) {
      if (isReconnect || force) {
        if (conn.getMetaData() != null) {
          String url=null;
          try {
            url=conn.getMetaData().getURL();
          }
 catch (          Exception e) {
          }
          boolean isInProcessModeHsql=ConnectionUtils.isInProcessModeHsql(url);
          if (isInProcessModeHsql) {
            ConnectionUtils.executeShutDownForHSQL(conn);
          }
        }
        conn.close();
      }
    }
  }
 catch (  SQLException e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
catch (  Exception e) {
    log.error(e.toString());
    throw new RuntimeException(e);
  }
}",0.9317038102084833
130175,"public static String splitQueryData(String oldName,String newName,String value){
  final int length=value.length();
  LinkedHashMap<Integer,Integer> quotaStrings=new LinkedHashMap<Integer,Integer>();
  List<Point> functionNameAreas=new ArrayList<Point>();
  int start=-1;
  int end=-2;
  char ch;
  for (int i=0; i < length; i++) {
    ch=value.charAt(i);
    if (ch == '\""') {
      if (isEscapeSequence(value,i)) {
        continue;
      }
      if (0 <= start && end < start) {
        end=i;
        quotaStrings.put(start,end);
      }
 else {
        start=i;
      }
    }
  }
{
  }
  StringBuffer strBuffer=new StringBuffer();
  String subString=null;
  int vStart=0;
  int vEnd=0;
  int methodMaxIndex=0;
  int calcMaxIndex=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vStart == start) {
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        subString=subString.replaceAll(oldName,newName);
      }
    }
 else {
      subString=value.substring(vStart,vEnd);
      calcMaxIndex=calcMethodArea(subString,value,vStart,functionNameAreas,methodMaxIndex);
      if (methodMaxIndex < calcMaxIndex) {
        methodMaxIndex=calcMaxIndex;
      }
      String replacedString=doVaribleReplace(oldName,newName,value,functionNameAreas,vStart,vEnd);
      strBuffer.append(replacedString);
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        subString=subString.replaceAll(oldName,newName);
      }
    }
    strBuffer.append(subString);
    vStart=end;
  }
  if (vStart < length) {
    vEnd=length;
    String replacedString=doVaribleReplace(oldName,newName,value,functionNameAreas,vStart,vEnd);
    strBuffer.append(replacedString);
  }
  return strBuffer.toString();
}","public static String splitQueryData(String oldName,String newName,String value){
  inputString=value;
  final int length=value.length();
  LinkedHashMap<Integer,Integer> quotaStrings=new LinkedHashMap<Integer,Integer>();
  List<FunctionInfo> functions=new ArrayList<FunctionInfo>();
  int start=-1;
  int end=-2;
  char ch;
  for (int i=0; i < length; i++) {
    ch=value.charAt(i);
    if (ch == '\""') {
      if (isEscapeSequence(value,i)) {
        continue;
      }
      if (0 <= start && end < start) {
        end=i;
        quotaStrings.put(start,end);
      }
 else {
        start=i;
      }
    }
  }
{
  }
  StringBuffer strBuffer=new StringBuffer();
  String subString=null;
  int vStart=0;
  int vEnd=0;
  int methodMaxIndex=-1;
  vStart=0;
  vEnd=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vStart != start) {
      subString=value.substring(vStart,vEnd);
      calcMethodArea(subString,value,vStart,functions);
    }
    vStart=end;
  }
  vStart=0;
  vEnd=0;
  start=0;
  end=0;
  for (  Entry<Integer,Integer> entry : quotaStrings.entrySet()) {
    start=entry.getKey();
    end=entry.getValue() + 1;
    vEnd=start;
    if (vStart == start) {
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        subString=subString.replaceAll(oldName,newName);
      }
    }
 else {
      subString=value.substring(vStart,vEnd);
      if (methodMaxIndex < start) {
        methodMaxIndex=FunctionInfo.getMaxIndexForCurrentParentFunction(start,functions);
      }
      String replacedString=doVaribleReplace(oldName,newName,value,functions,vStart,vEnd);
      strBuffer.append(replacedString);
      subString=value.substring(start,end);
      if (start < methodMaxIndex) {
        FunctionInfo function=FunctionInfo.getParentFunctionFromList(start,end,functions);
        Point funcNameArea=function.getNameArea();
        String functionName=value.substring(funcNameArea.x,funcNameArea.y);
        if (functionName.matches(""String_Node_Str"")) {
          subString=subString.replaceAll(oldName,newName);
        }
 else {
          if (subString.equals(""String_Node_Str"" + oldName + ""String_Node_Str"")) {
            subString=""String_Node_Str"" + newName + ""String_Node_Str"";
          }
        }
      }
    }
    strBuffer.append(subString);
    vStart=end;
  }
  if (vStart < length) {
    vEnd=length;
    String replacedString=doVaribleReplace(oldName,newName,value,functions,vStart,vEnd);
    strBuffer.append(replacedString);
  }
  return strBuffer.toString();
}",0.5699044232051567
130176,"/** 
 * DOC cmeng Comment method ""doVaribleReplace"".
 * @param oldName
 * @param newName
 * @param value
 * @param functionNameAreas
 * @param vStart
 * @param vEnd
 */
private static String doVaribleReplace(String oldName,String newName,String value,List<Point> functionNameAreas,int vStart,int vEnd){
  if (value.trim().isEmpty()) {
    return value;
  }
  StringBuffer replacedString=new StringBuffer();
  int replaceableStart=vStart;
  int replaceableEnd=vEnd;
  for (  Point functionNameArea : functionNameAreas) {
    if (vEnd <= functionNameArea.x) {
      break;
    }
    if (functionNameArea.y <= vStart) {
      continue;
    }
    if (replaceableStart < functionNameArea.x) {
      replaceableEnd=functionNameArea.x;
      String replaceableString=value.substring(replaceableStart,replaceableEnd);
      replacedString.append(doReplace(oldName,newName,replaceableString));
      replacedString.append(doReplace(oldName,newName,value.substring(functionNameArea.x,functionNameArea.y)));
    }
 else {
      replacedString.append(doReplace(oldName,newName,value.substring(functionNameArea.x,functionNameArea.y)));
    }
    replaceableStart=functionNameArea.y;
  }
  if (replaceableStart < vEnd) {
    String replaceableString=value.substring(replaceableStart,vEnd);
    replacedString.append(doReplace(oldName,newName,replaceableString));
  }
  return replacedString.toString();
}","/** 
 * DOC cmeng Comment method ""doVaribleReplace"".
 * @param oldName
 * @param newName
 * @param value
 * @param functionNameAreas
 * @param vStart
 * @param vEnd
 */
private static String doVaribleReplace(String oldName,String newName,String value,List<FunctionInfo> functions,int vStart,int vEnd){
  if (value.trim().isEmpty()) {
    return value;
  }
  StringBuffer replacedString=new StringBuffer();
  int replaceableStart=vStart;
  int replaceableEnd=vEnd;
  List<FunctionInfo> replaceableFunctions=FunctionInfo.getFunctionsInSpecifiedAreaFromList(vStart,vEnd,functions);
  for (  FunctionInfo funcInfo : replaceableFunctions) {
    Point functionNameArea=funcInfo.getNameArea();
    if (vEnd <= functionNameArea.x) {
      break;
    }
    if (functionNameArea.y <= vStart) {
      continue;
    }
    if (replaceableStart < functionNameArea.x) {
      replaceableEnd=functionNameArea.x;
      String replaceableString=value.substring(replaceableStart,replaceableEnd);
      replacedString.append(doReplace(oldName,newName,replaceableString));
      replacedString.append(doReplace(oldName,newName,value.substring(functionNameArea.x,functionNameArea.y)));
    }
 else {
      replacedString.append(doReplace(oldName,newName,value.substring(functionNameArea.x,functionNameArea.y)));
    }
    replaceableStart=functionNameArea.y;
  }
  if (replaceableStart < vEnd) {
    String replaceableString=value.substring(replaceableStart,vEnd);
    replacedString.append(doReplace(oldName,newName,replaceableString));
  }
  return replacedString.toString();
}",0.7858839497794368
130177,"private static int calcMethodArea(String varibleString,String wholeString,int beginIndex,List<Point> functionNameAreas,int lastIndex){
  String regex=""String_Node_Str"";
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(varibleString);
  int i=0;
  int varibleStringMaxIndex=beginIndex + varibleString.length() - 1;
  while (matcher.find()) {
    boolean isInQuota=false;
    int parenthesisNum=0;
    Point functionNameArea=new Point(beginIndex + matcher.start(),beginIndex + matcher.end());
    functionNameAreas.add(functionNameArea);
    if (varibleStringMaxIndex < i || varibleStringMaxIndex < lastIndex) {
      continue;
    }
    for (i=matcher.end(); i < wholeString.length(); i++) {
      char ch=wholeString.charAt(i);
      if (ch == '\""' && !isEscapeSequence(wholeString,i)) {
        isInQuota=!isInQuota;
      }
      if (isInQuota) {
        continue;
      }
      if (ch == '(') {
        parenthesisNum++;
      }
 else       if (ch == ')') {
        parenthesisNum--;
      }
      if (parenthesisNum < 0) {
        break;
      }
    }
  }
  return i;
}","private static int calcMethodArea(String varibleString,String wholeString,int beginIndex,List<FunctionInfo> functions){
  String regex=""String_Node_Str"";
  java.util.regex.Pattern pattern=java.util.regex.Pattern.compile(regex);
  Matcher matcher=pattern.matcher(varibleString);
  int i=0;
  int currentMaxIndex=i;
  while (matcher.find()) {
    boolean isInQuota=false;
    int parenthesisNum=0;
    int matchedStart=matcher.start();
    int matchedEnd=matcher.end();
    Point functionNameArea=new Point(beginIndex + matchedStart,beginIndex + matchedEnd);
    FunctionInfo funcInfo=new FunctionInfo(functionNameArea);
    Point functionParamArea=new Point(-1,-1);
    funcInfo.setParamArea(functionParamArea);
    i=beginIndex + matchedEnd;
    functionParamArea.x=i;
    for (; i < wholeString.length(); i++) {
      char ch=wholeString.charAt(i);
      if (ch == '\""' && !isEscapeSequence(wholeString,i)) {
        isInQuota=!isInQuota;
      }
      if (isInQuota) {
        continue;
      }
      if (ch == '(') {
        parenthesisNum++;
      }
 else       if (ch == ')') {
        parenthesisNum--;
      }
      if (parenthesisNum < 0) {
        break;
      }
    }
    functionParamArea.y=i;
    FunctionInfo.addFunctionToList(funcInfo,functions);
    if (currentMaxIndex < i) {
      currentMaxIndex=i;
    }
  }
  return currentMaxIndex;
}",0.6017699115044248
130178,"public FunctionInfo getParentFunction(int x,int y){
  FunctionInfo parentFunction=null;
  int minDistance=-1;
  for (  FunctionInfo funcInfo : subFunctions) {
    int paramX=funcInfo.paramArea.x;
    int paramY=funcInfo.paramArea.y;
    if (paramX <= x && y <= paramY) {
      if (!funcInfo.subFunctions.isEmpty()) {
        FunctionInfo retFuncInfo=funcInfo.getParentFunction(x,y);
        if (retFuncInfo != null) {
          int distance=x - retFuncInfo.paramArea.x + retFuncInfo.paramArea.y - y;
          if (minDistance < 0 || distance < minDistance) {
            minDistance=distance;
            parentFunction=retFuncInfo;
          }
          continue;
        }
      }
      int distance=x - paramX + paramY - y;
      if (minDistance < 0 || distance < minDistance) {
        minDistance=distance;
        parentFunction=funcInfo;
      }
    }
  }
  if (minDistance < 0) {
    int paramX=this.paramArea.x;
    int paramY=this.paramArea.y;
    if (paramX <= x && y <= paramY) {
      parentFunction=this;
    }
  }
  return parentFunction;
}","public FunctionInfo getParentFunction(int x,int y){
  FunctionInfo parentFunction=null;
  for (  FunctionInfo funcInfo : subFunctions) {
    int paramX=funcInfo.paramArea.x;
    int paramY=funcInfo.paramArea.y;
    if (paramX <= x && y <= paramY) {
      if (!funcInfo.subFunctions.isEmpty()) {
        FunctionInfo retFuncInfo=funcInfo.getParentFunction(x,y);
        if (retFuncInfo != null) {
          return retFuncInfo;
        }
      }
      return funcInfo;
    }
  }
  int paramX=this.paramArea.x;
  int paramY=this.paramArea.y;
  if (paramX <= x && y <= paramY) {
    parentFunction=this;
  }
  return parentFunction;
}",0.5780415430267062
130179,"public static List<FunctionInfo> getFunctionsInSpecifiedAreaFromList(int x,int y,List<FunctionInfo> functionList){
  List<FunctionInfo> findedList=new ArrayList<FunctionInfo>();
  for (  FunctionInfo funcInfo : functionList) {
    Point nameArea=funcInfo.getNameArea();
    if (x <= nameArea.x && nameArea.y <= y) {
      findedList.add(funcInfo);
      List<FunctionInfo> subFuncs=funcInfo.getSubFunctions();
      if (subFuncs != null && !subFuncs.isEmpty()) {
        List<FunctionInfo> findedListInSubFuncs=getFunctionsInSpecifiedAreaFromList(x,y,subFuncs);
        if (findedListInSubFuncs != null && !findedListInSubFuncs.isEmpty()) {
          findedList.addAll(findedListInSubFuncs);
        }
      }
    }
 else {
      break;
    }
  }
  return findedList;
}","public static List<FunctionInfo> getFunctionsInSpecifiedAreaFromList(int x,int y,List<FunctionInfo> functionList){
  List<FunctionInfo> findedList=new ArrayList<FunctionInfo>();
  for (  FunctionInfo funcInfo : functionList) {
    Point nameArea=funcInfo.getNameArea();
    if (y < nameArea.y) {
      break;
    }
    if (x <= nameArea.x && nameArea.y <= y) {
      findedList.add(funcInfo);
      List<FunctionInfo> subFuncs=funcInfo.getSubFunctions();
      if (subFuncs != null && !subFuncs.isEmpty()) {
        List<FunctionInfo> findedListInSubFuncs=getFunctionsInSpecifiedAreaFromList(x,y,subFuncs);
        if (findedListInSubFuncs != null && !findedListInSubFuncs.isEmpty()) {
          findedList.addAll(findedListInSubFuncs);
        }
      }
    }
  }
  return findedList;
}",0.9254498714652956
130180,"@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ addTypesToSql(types)+ ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}","@Override public ResultSet getTables(String catalog,String database,String tableNamePattern,String[] types) throws SQLException {
  if (databaseName != null && !databaseName.trim().isEmpty()) {
    database=databaseName;
  }
  String sql=null;
  if (types != null && types.length > 0) {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ addTypesToSql(types)+ ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
 else {
    sql=""String_Node_Str"" + database + ""String_Node_Str""+ tableNamePattern+ ""String_Node_Str"";
  }
  ResultSet rs=null;
  Statement stmt=null;
  List<String[]> list=new ArrayList<String[]>();
  try {
    stmt=connection.createStatement();
    rs=stmt.executeQuery(sql);
    while (rs.next()) {
      String name=rs.getString(""String_Node_Str"").trim();
      if (database == null || ""String_Node_Str"".equals(database)) {
        database=rs.getString(""String_Node_Str"").trim();
      }
      String type=rs.getString(""String_Node_Str"").trim();
      String[] r=new String[]{""String_Node_Str"",database,name,type,""String_Node_Str""};
      list.add(r);
    }
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
 finally {
    try {
      rs.close();
      stmt.close();
    }
 catch (    Exception e) {
    }
  }
  TeradataResultSet tableResultSet=new TeradataResultSet();
  tableResultSet.setMetadata(TABLE_META);
  tableResultSet.setData(list);
  return tableResultSet;
}",0.987908961593172
130181,"/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      StringBuffer retProposedSchema=new StringBuffer();
      checkConnection(retProposedSchema);
      if (0 < retProposedSchema.length()) {
        if (schemaText != null) {
          schemaText.setText(retProposedSchema.toString());
        }
      }
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          try {
            forceSetFlagForHiveCreateDefaultDB();
          }
 catch (          ClassNotFoundException e1) {
            e1.printStackTrace();
          }
          doRemoveHiveSetup();
        }
      }
    }
  }
);
}","/** 
 * addButtonControls.
 * @param cancelButton
 */
@Override protected void addUtilsButtonListeners(){
  checkButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    final SelectionEvent e){
      StringBuffer retProposedSchema=new StringBuffer();
      checkConnection(retProposedSchema);
      if (0 < retProposedSchema.length()) {
        if (ManagerConnection.isSchemaFromSidOrDatabase(EDatabaseTypeName.getTypeFromDbType(dbTypeCombo.getItem(dbTypeCombo.getSelectionIndex())))) {
          if (sidOrDatabaseText != null) {
            sidOrDatabaseText.setText(retProposedSchema.toString());
          }
        }
 else         if (schemaText != null) {
          schemaText.setText(retProposedSchema.toString());
        }
      }
      if (isHiveDBConnSelected()) {
        if (isHiveEmbeddedMode()) {
          try {
            forceSetFlagForHiveCreateDefaultDB();
          }
 catch (          ClassNotFoundException e1) {
            e1.printStackTrace();
          }
          doRemoveHiveSetup();
        }
      }
    }
  }
);
}",0.8459086078639745
130182,"@Override public void applicationRunning(){
  org.eclipse.e4.ui.workbench.IWorkbench e4Workbench=(org.eclipse.e4.ui.workbench.IWorkbench)PlatformUI.getWorkbench();
  PerspectiveReviewUtil perspectiveReviewUtil=new PerspectiveReviewUtil();
  ContextInjectionFactory.inject(perspectiveReviewUtil,e4Workbench.getApplication().getContext().getActiveLeaf());
  perspectiveReviewUtil.checkPerspectiveDisplayItems();
}","@Override public void applicationRunning(){
  if (!PlatformUI.isWorkbenchRunning()) {
    return;
  }
  org.eclipse.e4.ui.workbench.IWorkbench e4Workbench=(org.eclipse.e4.ui.workbench.IWorkbench)PlatformUI.getWorkbench();
  PerspectiveReviewUtil perspectiveReviewUtil=new PerspectiveReviewUtil();
  ContextInjectionFactory.inject(perspectiveReviewUtil,e4Workbench.getApplication().getContext().getActiveLeaf());
  perspectiveReviewUtil.checkPerspectiveDisplayItems();
}",0.9340909090909092
130183,"public static String addQuotesWithSpaceFieldForSQLStringForce(String fieldName,String dbType,boolean simple){
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  final String quote=getQuoteByDBType(name);
  boolean isCheck=false;
  String preferenceValue=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  isCheck=Boolean.parseBoolean(preferenceValue);
  String temp=removeQuotes(fieldName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(temp);
  boolean isSqlKeyword=KeywordsValidator.isSqlKeyword(temp,name.getProduct());
  boolean isH2=EDatabaseTypeName.H2 == name;
  if (((!matcher.matches() || isSqlKeyword) && !isH2 && EDatabaseTypeName.SAS != name) || isIBMDB2ContainLowerCase(dbType,fieldName)) {
    isCheck=true;
  }
  if (!isCheck && isPSQLSimilar(name) && !EDatabaseTypeName.MYSQL.equals(name)) {
    return fieldName;
  }
  String newFieldName=fieldName;
  newFieldName=TalendQuoteUtils.addQuotesForSQLString(newFieldName,quote,simple);
  return newFieldName;
}","public static String addQuotesWithSpaceFieldForSQLStringForce(String fieldName,String dbType,boolean simple){
  EDatabaseTypeName name=EDatabaseTypeName.getTypeFromDbType(dbType);
  final String quote=getQuoteByDBType(name);
  boolean isCheck=false;
  String preferenceValue=CorePlugin.getDefault().getPreferenceStore().getString(ITalendCorePrefConstants.SQL_ADD_QUOTE);
  isCheck=Boolean.parseBoolean(preferenceValue);
  String temp=removeQuotes(fieldName);
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(temp);
  boolean isSqlKeyword=KeywordsValidator.isSqlKeyword(temp,name.getProduct());
  boolean isH2=EDatabaseTypeName.H2 == name;
  if (((!matcher.matches() || isSqlKeyword) && !isH2 && EDatabaseTypeName.SAS != name && EDatabaseTypeName.IMPALA != name) || isIBMDB2ContainLowerCase(dbType,fieldName)) {
    isCheck=true;
  }
  if (!isCheck && isPSQLSimilar(name) && !EDatabaseTypeName.MYSQL.equals(name)) {
    return fieldName;
  }
  String newFieldName=fieldName;
  newFieldName=TalendQuoteUtils.addQuotesForSQLString(newFieldName,quote,simple);
  return newFieldName;
}",0.983651226158038
130184,"@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String type=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}","@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String type=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      type=convertSpecialTableType(type);
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}",0.9896245059288538
130185,"public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String temptableType=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}","public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String temptableType=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      temptableType=convertSpecialTableType(temptableType);
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}",0.9900431463657484
130186,"@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String type=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}","@Override public List<TdView> fillViews(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> viewFilter,String viewPattern,String[] tableType){
  List<TdView> viewList=new ArrayList<TdView>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return viewList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,viewPattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String type=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      type=convertSpecialTableType(type);
      if (!isCreateElement(viewFilter,tableName)) {
        continue;
      }
      boolean flag=true;
      String tableComment=null;
      if (pack != null) {
        Connection c=ConnectionHelper.getConnection(pack);
        flag=MetadataConnectionUtils.isOracle8i(c);
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdView table=RelationalFactory.eINSTANCE.createTdView();
      table.setName(tableName);
      table.setTableType(type);
      table.setLabel(table.getName());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      viewList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,viewList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return viewList;
}",0.9896245059288538
130187,"public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String temptableType=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}","public List<TdTable> fillTables(Package pack,DatabaseMetaData dbJDBCMetadata,List<String> tableFilter,String tablePattern,String[] tableType){
  List<TdTable> tableList=new ArrayList<TdTable>();
  if (dbJDBCMetadata == null) {
    return null;
  }
  Package catalogOrSchema=PackageHelper.getCatalogOrSchema(pack);
  String catalogName=null;
  String schemaPattern=null;
  if (catalogOrSchema != null) {
    if (catalogOrSchema instanceof Catalog) {
      catalogName=catalogOrSchema.getName();
      if (MetadataConnectionUtils.isAS400(catalogOrSchema)) {
        return tableList;
      }
    }
 else {
      Package parentCatalog=PackageHelper.getParentPackage(catalogOrSchema);
      schemaPattern=catalogOrSchema.getName();
      catalogName=parentCatalog == null ? null : parentCatalog.getName();
    }
  }
  try {
    boolean flag=true;
    String tableComment=null;
    List<String> tablesToFilter=new ArrayList<String>();
    if (pack != null) {
      Connection c=ConnectionHelper.getConnection(pack);
      flag=MetadataConnectionUtils.isOracle8i(c);
      boolean isOracle=MetadataConnectionUtils.isOracle(c);
      boolean isOracleJdbc=MetadataConnectionUtils.isOracleJDBC(c);
      if ((isOracle || isOracleJdbc) && !flag) {
        Statement stmt;
        try {
          stmt=dbJDBCMetadata.getConnection().createStatement();
          ResultSet rsTables=stmt.executeQuery(TableInfoParameters.ORACLE_10G_RECBIN_SQL);
          tablesToFilter=ExtractMetaDataFromDataBase.getTableNamesFromQuery(rsTables,dbJDBCMetadata.getConnection());
          rsTables.close();
          stmt.close();
        }
 catch (        SQLException e) {
          ExceptionHandler.process(e);
        }
      }
    }
    ResultSet tables=dbJDBCMetadata.getTables(catalogName,schemaPattern,tablePattern,tableType);
    while (tables.next()) {
      String tableName=getStringFromResultSet(tables,GetTable.TABLE_NAME.name());
      String temptableType=getStringFromResultSet(tables,GetTable.TABLE_TYPE.name());
      temptableType=convertSpecialTableType(temptableType);
      if (TableType.VIEW.toString().equals(temptableType)) {
        continue;
      }
      if (!isCreateElement(tableFilter,tableName)) {
        continue;
      }
      if (tableName == null || tablesToFilter.contains(tableName) || tableName.startsWith(""String_Node_Str"")) {
        continue;
      }
      if (!flag) {
        tableComment=getTableComment(dbJDBCMetadata,tables,tableName,catalogName,schemaPattern);
      }
      TdTable table=RelationalFactory.eINSTANCE.createTdTable();
      table.setName(tableName);
      table.setTableType(temptableType);
      table.setLabel(table.getName());
      table.setId(EcoreUtil.generateUUID());
      if (tableComment != null) {
        ColumnSetHelper.setComment(tableComment,table);
      }
      tableList.add(table);
    }
    if (isLinked()) {
      PackageHelper.addMetadataTable(ListUtils.castList(MetadataTable.class,tableList),pack);
    }
  }
 catch (  SQLException e) {
    log.error(e,e);
  }
  return tableList;
}",0.9900431463657484
130188,"private void download(final FileDownloader fd){
  Bundle b=new Bundle();
  b.putString(""String_Node_Str"",""String_Node_Str"");
  fd.set_notification(TargetActivity.class,b);
  downloaded_file=fd.get_file_name();
  try {
    Log.i(""String_Node_Str"",fd.download_url);
    progress_bar.setMax(0);
    progress_bar.setProgress(0);
    fd.download(new ProgressUpdateListener(){
      @Override public void on_update(      int downloaded_size){
        Log.i(""String_Node_Str"",Long.toString(Thread.currentThread().getId()));
        Log.i(""String_Node_Str"",Integer.toString(downloaded_size));
        Log.i(""String_Node_Str"",Integer.toString(fd.get_file_size()));
        progress_bar.setMax(fd.get_file_size());
        progress_bar.setProgress(downloaded_size);
        Log.i(""String_Node_Str"",Integer.toString(progress_bar.getProgress()));
        Log.i(""String_Node_Str"",Integer.toString(progress_bar.getMax()));
        float num=(float)progress_bar.getProgress() / (float)progress_bar.getMax();
        int result=(int)(num * 100);
        Log.i(""String_Node_Str"",Integer.toString(result));
        result_view.setText(Integer.toString(result) + ""String_Node_Str"");
        if (progress_bar.getProgress() == progress_bar.getMax()) {
          downloaded_file_view.setText(stored_dir + ""String_Node_Str"" + downloaded_file);
        }
      }
    }
);
  }
 catch (  Exception e) {
    handler.obtainMessage(-1).sendToTarget();
    Log.i(""String_Node_Str"",e.getMessage());
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
  }
}","private void download(final FileDownloader fd){
  Bundle b=new Bundle();
  b.putString(""String_Node_Str"",""String_Node_Str"");
  fd2.set_notification(TargetActivity.class,b);
  downloaded_file=fd.get_file_name();
  try {
    Log.i(""String_Node_Str"",fd.download_url);
    progress_bar.setMax(0);
    progress_bar.setProgress(0);
    fd2.download(new ProgressUpdateListener(){
      @Override public void on_update(      int downloaded_size){
        Log.i(""String_Node_Str"",Long.toString(Thread.currentThread().getId()));
        Log.i(""String_Node_Str"",Integer.toString(downloaded_size));
        Log.i(""String_Node_Str"",Integer.toString(fd2.get_file_size()));
        progress_bar.setMax(fd2.get_file_size());
        progress_bar.setProgress(downloaded_size);
        Log.i(""String_Node_Str"",Integer.toString(progress_bar.getProgress()));
        Log.i(""String_Node_Str"",Integer.toString(progress_bar.getMax()));
        float num=(float)progress_bar.getProgress() / (float)progress_bar.getMax();
        int result=(int)(num * 100);
        Log.i(""String_Node_Str"",Integer.toString(result));
        result_view.setText(Integer.toString(result) + ""String_Node_Str"");
        if (progress_bar.getProgress() == progress_bar.getMax()) {
          downloaded_file_view.setText(stored_dir + ""String_Node_Str"" + downloaded_file);
        }
      }
    }
);
  }
 catch (  Exception e) {
    handler.obtainMessage(-1).sendToTarget();
    Log.i(""String_Node_Str"",e.getMessage());
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
  }
}",0.998703823720026
130189,"@Override public void on_update(int downloaded_size){
  Log.i(""String_Node_Str"",Long.toString(Thread.currentThread().getId()));
  Log.i(""String_Node_Str"",Integer.toString(downloaded_size));
  Log.i(""String_Node_Str"",Integer.toString(fd.get_file_size()));
  progress_bar.setMax(fd.get_file_size());
  progress_bar.setProgress(downloaded_size);
  Log.i(""String_Node_Str"",Integer.toString(progress_bar.getProgress()));
  Log.i(""String_Node_Str"",Integer.toString(progress_bar.getMax()));
  float num=(float)progress_bar.getProgress() / (float)progress_bar.getMax();
  int result=(int)(num * 100);
  Log.i(""String_Node_Str"",Integer.toString(result));
  result_view.setText(Integer.toString(result) + ""String_Node_Str"");
  if (progress_bar.getProgress() == progress_bar.getMax()) {
    downloaded_file_view.setText(stored_dir + ""String_Node_Str"" + downloaded_file);
  }
}","@Override public void on_update(int downloaded_size){
  Log.i(""String_Node_Str"",Long.toString(Thread.currentThread().getId()));
  Log.i(""String_Node_Str"",Integer.toString(downloaded_size));
  Log.i(""String_Node_Str"",Integer.toString(fd2.get_file_size()));
  progress_bar.setMax(fd2.get_file_size());
  progress_bar.setProgress(downloaded_size);
  Log.i(""String_Node_Str"",Integer.toString(progress_bar.getProgress()));
  Log.i(""String_Node_Str"",Integer.toString(progress_bar.getMax()));
  float num=(float)progress_bar.getProgress() / (float)progress_bar.getMax();
  int result=(int)(num * 100);
  Log.i(""String_Node_Str"",Integer.toString(result));
  result_view.setText(Integer.toString(result) + ""String_Node_Str"");
  if (progress_bar.getProgress() == progress_bar.getMax()) {
    downloaded_file_view.setText(stored_dir + ""String_Node_Str"" + downloaded_file);
  }
}",0.9988452655889144
130190,"public FileDownloader get_download_store(int obj_id){
  if (download_store_list == null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
  for (  FileDownloader item : download_store_list) {
    if (item.obj_id == obj_id) {
      Log.i(""String_Node_Str"",Integer.toString(item.obj_id));
      Log.i(""String_Node_Str"",Integer.toString(item.file_size));
      return item;
    }
  }
  return null;
}","public FileDownloader get_download_store(int obj_id){
  if (download_store_list == null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
  for (  FileDownloader item : download_store_list) {
    if (item.get_obj_id() == obj_id) {
      Log.i(""String_Node_Str"",Integer.toString(item.get_obj_id()));
      Log.i(""String_Node_Str"",Integer.toString(item.file_size));
      return item;
    }
  }
  return null;
}",0.9858823529411764
130191,"@Override public void run(){
  final int obj_id=download_manager.obj_id;
  final NotificationServiceBar notification_service_bar=new NotificationServiceBar(getApplicationContext(),DownloadService.this);
  if (get_download_store(download_manager.obj_id) == null) {
    notification_service_bar.wait_notification(download_manager,notice_id);
  }
  save_download_manager(download_manager);
  new AsyncTask<Void,FileDownloader,Void>(){
    @Override protected Void doInBackground(    Void... objects){
      try {
        download_manager.init_connection(context);
        file_size=download_manager.file_size;
        download_manager.save_thread_data();
        download_manager.is_finished=false;
        while (!download_manager.is_finished) {
          Thread.sleep(900);
          if (get_download_store(obj_id).should_stop) {
            download_manager.should_stop=true;
            Log.i(""String_Node_Str"",""String_Node_Str"");
            return null;
          }
 else {
            Log.i(""String_Node_Str"",""String_Node_Str"");
          }
          if (get_download_store(obj_id).should_pause) {
            download_manager.should_pause=true;
            Log.i(""String_Node_Str"",""String_Node_Str"");
            return null;
          }
 else {
            Log.i(""String_Node_Str"",""String_Node_Str"");
          }
          download_manager.is_finished=true;
          download_manager.continue_download_with_thread();
          notification_service_bar.handle_notification(download_manager,notice_id);
          if (download_manager.listener != null) {
            Log.i(""String_Node_Str"",""String_Node_Str"");
            publishProgress(download_manager);
          }
        }
        return null;
      }
 catch (      Exception e) {
        Log.i(""String_Node_Str"",e.toString());
        e.printStackTrace();
      }
      return null;
    }
    @Override protected void onProgressUpdate(    FileDownloader... result){
      FileDownloader download_manager=result[0];
      Log.i(""String_Node_Str"",Thread.currentThread().toString());
      Intent in=new Intent(""String_Node_Str"");
      Log.i(""String_Node_Str"",Integer.toString(download_manager.file_size));
      in.putExtra(""String_Node_Str"",download_manager);
      getApplicationContext().sendBroadcast(in);
      download_manager.listener.on_update(download_manager.downloaded_size);
    }
    @Override protected void onPostExecute(    Void result){
      if (download_manager.should_stop) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        clear_notice_bar(notice_id);
        clear_local_thread_data(download_manager);
        stop_service();
        return;
      }
      if (download_manager.should_pause) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      build_download_done_notification(download_manager);
      clear_notice_bar(notice_id);
      clear_local_thread_data(download_manager);
      stop_service();
    }
  }
.execute();
}","@Override public void run(){
  final int obj_id=download_manager.get_obj_id();
  final NotificationServiceBar notification_service_bar=new NotificationServiceBar(getApplicationContext(),DownloadService.this);
  if (get_download_store(download_manager.get_obj_id()) == null) {
    notification_service_bar.wait_notification(download_manager,notice_id);
  }
  save_download_manager(download_manager);
  new AsyncTask<Void,FileDownloader,Void>(){
    @Override protected Void doInBackground(    Void... objects){
      try {
        download_manager.init_connection(context);
        file_size=download_manager.file_size;
        download_manager.save_thread_data();
        download_manager.is_finished=false;
        while (!download_manager.is_finished) {
          Thread.sleep(900);
          if (get_download_store(obj_id).should_stop) {
            download_manager.should_stop=true;
            Log.i(""String_Node_Str"",""String_Node_Str"");
            return null;
          }
 else {
            Log.i(""String_Node_Str"",""String_Node_Str"");
          }
          if (get_download_store(obj_id).should_pause) {
            download_manager.should_pause=true;
            Log.i(""String_Node_Str"",""String_Node_Str"");
            return null;
          }
 else {
            Log.i(""String_Node_Str"",""String_Node_Str"");
          }
          download_manager.is_finished=true;
          download_manager.continue_download_with_thread();
          notification_service_bar.handle_notification(download_manager,notice_id);
          if (download_manager.listener != null) {
            Log.i(""String_Node_Str"",""String_Node_Str"");
            publishProgress(download_manager);
          }
        }
        return null;
      }
 catch (      Exception e) {
        Log.i(""String_Node_Str"",e.toString());
        e.printStackTrace();
      }
      return null;
    }
    @Override protected void onProgressUpdate(    FileDownloader... result){
      FileDownloader download_manager=result[0];
      Log.i(""String_Node_Str"",Thread.currentThread().toString());
      Intent in=new Intent(""String_Node_Str"");
      Log.i(""String_Node_Str"",Integer.toString(download_manager.file_size));
      in.putExtra(""String_Node_Str"",download_manager);
      getApplicationContext().sendBroadcast(in);
      download_manager.listener.on_update(download_manager.downloaded_size);
    }
    @Override protected void onPostExecute(    Void result){
      if (download_manager.should_stop) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        clear_notice_bar(notice_id);
        clear_local_thread_data(download_manager);
        stop_service();
        return;
      }
      if (download_manager.should_pause) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        return;
      }
      build_download_done_notification(download_manager);
      clear_notice_bar(notice_id);
      clear_local_thread_data(download_manager);
      stop_service();
    }
  }
.execute();
}",0.9979709164693946
130192,"@Override public int onStartCommand(final Intent intent,int flags,int startId){
  Log.i(""String_Node_Str"",""String_Node_Str"");
  FileDownloader download_manager=intent.getParcelableExtra(""String_Node_Str"");
  Log.i(""String_Node_Str"",download_manager.get_test());
  Log.i(""String_Node_Str"",Integer.toString(download_manager.obj_id));
  if (download_manager.should_stop) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  if (download_manager.should_pause) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  FileTaskThread file_task_thread=new FileTaskThread(intent,download_manager,download_manager.notice_id);
  file_task_thread.run();
  should_stop_foreground=intent.getBooleanExtra(""String_Node_Str"",false);
  if (should_stop_foreground) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  return START_REDELIVER_INTENT;
}","@Override public int onStartCommand(final Intent intent,int flags,int startId){
  Log.i(""String_Node_Str"",""String_Node_Str"");
  FileDownloader download_manager=intent.getParcelableExtra(""String_Node_Str"");
  Log.i(""String_Node_Str"",download_manager.get_test());
  Log.i(""String_Node_Str"",Integer.toString(download_manager.get_obj_id()));
  if (download_manager.should_stop) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  if (download_manager.should_pause) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  FileTaskThread file_task_thread=new FileTaskThread(intent,download_manager,download_manager.notice_id);
  file_task_thread.run();
  should_stop_foreground=intent.getBooleanExtra(""String_Node_Str"",false);
  if (should_stop_foreground) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  return START_REDELIVER_INTENT;
}",0.9964285714285714
130193,"private void save_download_manager(FileDownloader fd){
  int obj_id=fd.obj_id;
  FileDownloader download_store=get_download_store(obj_id);
  if (download_store == null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    download_store_list.add(fd);
  }
 else {
    download_store_list.remove(download_store);
    download_store_list.add(fd);
  }
  if (fd.should_pause) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  if (fd.should_stop) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
}","private void save_download_manager(FileDownloader fd){
  int obj_id=fd.get_obj_id();
  FileDownloader download_store=get_download_store(obj_id);
  if (download_store == null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    download_store_list.add(fd);
  }
 else {
    download_store_list.remove(download_store);
    download_store_list.add(fd);
  }
  if (fd.should_pause) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
  if (fd.should_stop) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
}",0.9940711462450592
130194,"public FileDownloader(Context context,String download_url,File file_save_dir,int thread_num){
  this.context=context;
  this.download_url=download_url;
  this.save_file=file_save_dir;
  this.thread_num=thread_num;
  if (this.obj_id == 0) {
    this.obj_id=this.hashCode();
    Log.i(""String_Node_Str"",Integer.toString(obj_id));
  }
}","public FileDownloader(Context context,String download_url,File file_save_dir,int thread_num){
  this.context=context;
  this.download_url=download_url;
  this.save_file=file_save_dir;
  this.thread_num=thread_num;
  if (this.obj_id == 0) {
    set_obj_id();
    Log.i(""String_Node_Str"",Integer.toString(obj_id));
  }
}",0.9646697388632872
130195,"/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db;
  try {
    db=db_open_helper.getWritableDatabase();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
    return;
  }
  if (db == null) {
    return;
  }
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}","/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db;
  try {
    db=db_open_helper.getWritableDatabase();
  }
 catch (  android.database.sqlite.SQLiteDatabaseLockedException e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
    return;
  }
  if (db == null) {
    return;
  }
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}",0.966153846153846
130196,"public FileDownloader get_download_store(int obj_id){
  if (download_store_list == null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
  for (  FileDownloader item : download_store_list) {
    if (item.obj_id == obj_id) {
      return item;
    }
  }
  return null;
}","public FileDownloader get_download_store(int obj_id){
  if (download_store_list == null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
  for (  FileDownloader item : download_store_list) {
    if (item.obj_id == obj_id) {
      Log.i(""String_Node_Str"",Integer.toString(item.obj_id));
      Log.i(""String_Node_Str"",Integer.toString(item.file_size));
      return item;
    }
  }
  return null;
}",0.8016877637130801
130197,"public FileDownloader(Context context,String download_url,File file_save_dir,int thread_num){
  this.context=context;
  this.download_url=download_url;
  this.save_file=file_save_dir;
  this.thread_num=thread_num;
}","public FileDownloader(Context context,String download_url,File file_save_dir,int thread_num){
  this.context=context;
  this.download_url=download_url;
  this.save_file=file_save_dir;
  this.thread_num=thread_num;
  this.obj_id=this.hashCode();
}",0.9327548806941433
130198,"/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db=db_open_helper.getWritableDatabase();
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}","/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db=null;
  try {
    db=db_open_helper.getWritableDatabase();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
  }
  if (db == null) {
    return;
  }
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}",0.8542435424354243
130199,"/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db=null;
  try {
    db=db_open_helper.getWritableDatabase();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
    return;
  }
  if (db == null) {
    return;
  }
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}","/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db;
  try {
    db=db_open_helper.getWritableDatabase();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
    return;
  }
  if (db == null) {
    return;
  }
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}",0.9960348929421096
130200,"public int get_file_size(){
  try {
    Intent download_service=new Intent(context,DownloadService.class);
    context.bindService(download_service,m_connection,Context.BIND_AUTO_CREATE);
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
  }
  return file_size;
}","public int get_file_size(){
  try {
    Log.i(""String_Node_Str"",Integer.toString(obj_id));
    Intent download_service=new Intent(context,DownloadService.class);
    context.bindService(download_service,m_connection,Context.BIND_AUTO_CREATE);
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
  }
  return file_size;
}",0.9185185185185184
130201,"@Override public void onServiceConnected(ComponentName className,IBinder service){
  DownloadService.LocalBinder binder=(DownloadService.LocalBinder)service;
  m_service=binder.getService();
  file_size=m_service.get_download_store(obj_id).file_size;
  m_bound=true;
}","@Override public void onServiceConnected(ComponentName className,IBinder service){
  DownloadService.LocalBinder binder=(DownloadService.LocalBinder)service;
  m_service=binder.getService();
  Log.i(""String_Node_Str"",Integer.toString(obj_id));
  file_size=m_service.get_download_store(obj_id).file_size;
  m_bound=true;
}",0.9100169779286928
130202,"public FileDownloader(Context context,String download_url,File file_save_dir,int thread_num){
  this.context=context;
  this.download_url=download_url;
  this.save_file=file_save_dir;
  this.thread_num=thread_num;
  this.obj_id=this.hashCode();
}","public FileDownloader(Context context,String download_url,File file_save_dir,int thread_num){
  this.context=context;
  this.download_url=download_url;
  this.save_file=file_save_dir;
  this.thread_num=thread_num;
  if (this.obj_id == 0) {
    this.obj_id=this.hashCode();
    Log.i(""String_Node_Str"",Integer.toString(obj_id));
  }
}",0.8497409326424871
130203,"/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db=null;
  try {
    db=db_open_helper.getWritableDatabase();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
  }
  if (db == null) {
    return;
  }
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}","/** 
 * 实时更新每条线程已经下载的文件长度
 * @param path
 * @param map
 */
public void update(String path,Map<Integer,Integer> map){
  SQLiteDatabase db=null;
  try {
    db=db_open_helper.getWritableDatabase();
  }
 catch (  Exception e) {
    Log.i(""String_Node_Str"",e.toString());
    e.printStackTrace();
    return;
  }
  if (db == null) {
    return;
  }
  db.beginTransaction();
  try {
    for (    Map.Entry<Integer,Integer> entry : map.entrySet()) {
      db.execSQL(""String_Node_Str"",new Object[]{entry.getValue(),path,entry.getKey()});
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  db.close();
}",0.9904306220095692
130204,"public DirectoryWatcher(final String... dirs){
  try {
    this.watcher=FileSystems.getDefault().newWatchService();
    this.keys=new HashMap<>();
    registerAll(dirs);
    LOGGER.info(""String_Node_Str"",dirs);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","public DirectoryWatcher(final String... dirs){
  try {
    this.watcher=FileSystems.getDefault().newWatchService();
    this.keys=new HashMap<>();
    for (    String dir : dirs) {
      registerAll(Paths.get(dir));
    }
    LOGGER.info(""String_Node_Str"",dirs);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.8954248366013072
130205,"@Override public void run(){
  while (true) {
    try {
      WatchKey key=watcher.take();
      Path dir=keys.get(key);
      for (      WatchEvent<?> event : key.pollEvents()) {
        WatchEvent<Path> ev=cast(event);
        Path child=dir.resolve(ev.context());
        r.run();
        if (event.kind() == ENTRY_CREATE) {
          if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
            registerAll(child);
          }
        }
      }
      boolean valid=key.reset();
      if (!valid) {
        keys.remove(key);
        if (keys.isEmpty()) {
          break;
        }
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}","@Override public void run(){
  while (true) {
    try {
      WatchKey key=watcher.take();
      Path dir=keys.get(key);
      for (      WatchEvent<?> event : key.pollEvents()) {
        WatchEvent<Path> ev=cast(event);
        Path child=dir.resolve(ev.context());
        if (child.toFile().isFile()) {
          LOGGER.info(""String_Node_Str"");
          try {
            r.run();
          }
 catch (          Exception e) {
            LOGGER.error(""String_Node_Str"",e);
          }
          if (event.kind() == ENTRY_CREATE) {
            if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
              registerAll(child);
            }
          }
        }
        boolean valid=key.reset();
        if (!valid) {
          keys.remove(key);
          if (keys.isEmpty()) {
            break;
          }
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
}",0.7712082262210797
130206,"public void watchRunning(final Runnable r){
  final Thread thread=new Thread(){
    @Override public void run(){
      while (true) {
        try {
          WatchKey key=watcher.take();
          Path dir=keys.get(key);
          for (          WatchEvent<?> event : key.pollEvents()) {
            WatchEvent<Path> ev=cast(event);
            Path child=dir.resolve(ev.context());
            r.run();
            if (event.kind() == ENTRY_CREATE) {
              if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
                registerAll(child);
              }
            }
          }
          boolean valid=key.reset();
          if (!valid) {
            keys.remove(key);
            if (keys.isEmpty()) {
              break;
            }
          }
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
  }
;
  thread.start();
}","public void watchRunning(final Runnable r){
  final Thread thread=new Thread(){
    @Override public void run(){
      while (true) {
        try {
          WatchKey key=watcher.take();
          Path dir=keys.get(key);
          for (          WatchEvent<?> event : key.pollEvents()) {
            WatchEvent<Path> ev=cast(event);
            Path child=dir.resolve(ev.context());
            if (child.toFile().isFile()) {
              LOGGER.info(""String_Node_Str"");
              try {
                r.run();
              }
 catch (              Exception e) {
                LOGGER.error(""String_Node_Str"",e);
              }
              if (event.kind() == ENTRY_CREATE) {
                if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
                  registerAll(child);
                }
              }
            }
            boolean valid=key.reset();
            if (!valid) {
              keys.remove(key);
              if (keys.isEmpty()) {
                break;
              }
            }
          }
        }
 catch (        Exception ignored) {
        }
      }
    }
  }
;
  thread.start();
}",0.7613412228796844
130207,"NestedProperty(){
  super(ACCESSOR,PROPERTY_KEY);
}","NestedProperty(){
  super(ACCESSOR,ID);
}",0.8478260869565217
130208,"@Test public void nestedProperties(){
  TokenStream tokenStream=new TokenStream(Wave(),PropertyKey(""String_Node_Str""),Accessor(),PropertyKey(""String_Node_Str""),Wave());
  assertNotNull(NonTerminal.EVALUATION.buildAbstractSyntaxTree(tokenStream));
}","@Test public void nestedProperties(){
  TokenStream tokenStream=new TokenStream(Wave(),PropertyKey(""String_Node_Str""),Accessor(),PropertyKey(""String_Node_Str""),Accessor(),PropertyKey(""String_Node_Str""),Wave());
  assertNotNull(NonTerminal.EVALUATION.buildAbstractSyntaxTree(tokenStream));
}",0.9219330855018588
130209,"@Override public void run(){
  try {
    while (true) {
      WatchKey key=watcher.take();
      Path dir=keys.get(key);
      for (      WatchEvent<?> event : key.pollEvents()) {
        WatchEvent<Path> ev=cast(event);
        Path child=dir.resolve(ev.context());
        r.run();
        if (event.kind() == ENTRY_CREATE) {
          if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
            registerAll(child);
          }
        }
      }
      boolean valid=key.reset();
      if (!valid) {
        keys.remove(key);
        if (keys.isEmpty()) {
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public void run(){
  while (true) {
    try {
      WatchKey key=watcher.take();
      Path dir=keys.get(key);
      for (      WatchEvent<?> event : key.pollEvents()) {
        WatchEvent<Path> ev=cast(event);
        Path child=dir.resolve(ev.context());
        LOGGER.info(event.kind().name());
        r.run();
        if (event.kind() == ENTRY_CREATE) {
          if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
            registerAll(child);
          }
        }
      }
      boolean valid=key.reset();
      if (!valid) {
        keys.remove(key);
        if (keys.isEmpty()) {
          break;
        }
      }
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
}",0.8815028901734104
130210,"public void watchRunning(final Runnable r){
  final Thread thread=new Thread(){
    @Override public void run(){
      try {
        while (true) {
          WatchKey key=watcher.take();
          Path dir=keys.get(key);
          for (          WatchEvent<?> event : key.pollEvents()) {
            WatchEvent<Path> ev=cast(event);
            Path child=dir.resolve(ev.context());
            r.run();
            if (event.kind() == ENTRY_CREATE) {
              if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
                registerAll(child);
              }
            }
          }
          boolean valid=key.reset();
          if (!valid) {
            keys.remove(key);
            if (keys.isEmpty()) {
              break;
            }
          }
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  thread.start();
}","public void watchRunning(final Runnable r){
  final Thread thread=new Thread(){
    @Override public void run(){
      while (true) {
        try {
          WatchKey key=watcher.take();
          Path dir=keys.get(key);
          for (          WatchEvent<?> event : key.pollEvents()) {
            WatchEvent<Path> ev=cast(event);
            Path child=dir.resolve(ev.context());
            LOGGER.info(event.kind().name());
            r.run();
            if (event.kind() == ENTRY_CREATE) {
              if (Files.isDirectory(child,NOFOLLOW_LINKS)) {
                registerAll(child);
              }
            }
          }
          boolean valid=key.reset();
          if (!valid) {
            keys.remove(key);
            if (keys.isEmpty()) {
              break;
            }
          }
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"",e);
        }
      }
    }
  }
;
  thread.start();
}",0.8624454148471615
130211,"private static void getHadoopConfigurationFromUser(HadoopConfigurationPropertyLoader hcpl) throws IOException {
  String hadoopHome;
  String hadoopType;
  String distributionType;
  Properties prop=new Properties();
  prop.load(JumbuneAgent.class.getClassLoader().getResourceAsStream(DISTRIBUTION_PROPERTIES));
  hadoopType=prop.getProperty(HADOOP_DISTRIBUTION);
  if (hadoopType.equalsIgnoreCase(YARN)) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(H) && !distributionType.equalsIgnoreCase(C))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(M))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
  hadoopHome=System.getenv(""String_Node_Str"");
  String promptedHadoopHome;
  if (hadoopHome != null && !""String_Node_Str"".equals(hadoopHome.trim())) {
    CONSOLE_LOGGER.info(""String_Node_Str"" + hadoopHome + ""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=hadoopHome;
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=""String_Node_Str"";
    }
  }
  hadoopHome=validateHadoopHome(promptedHadoopHome);
  hcpl.setHadoopHome(hadoopHome);
  hcpl.setDistributionType(distributionType);
  hcpl.setHadoopType(hadoopType);
  CONSOLE_LOGGER.info(""String_Node_Str"");
  String hasSeparateUsers=SCANNER.nextLine().trim();
  while (!(""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers) || ""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers))) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hasSeparateUsers=SCANNER.nextLine().trim();
  }
  String hdfsUser;
  String yarnUser;
  String mapredUser;
  String hdfsPasswd=null;
  String yarnPasswd=null;
  String mapredPasswd=null;
  if (""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers)) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=""String_Node_Str"";
      yarnUser=""String_Node_Str"";
      mapredUser=""String_Node_Str"";
    }
 else {
      mapredUser=yarnUser=hdfsUser;
    }
    hdfsPasswd=promptPassword(hdfsUser);
    mapredPasswd=yarnPasswd=hdfsPasswd;
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=""String_Node_Str"";
    }
    hdfsPasswd=promptPassword(hdfsUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    yarnUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(yarnUser)) {
      yarnUser=""String_Node_Str"";
    }
    yarnPasswd=promptPassword(yarnUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    mapredUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(mapredUser)) {
      mapredUser=""String_Node_Str"";
    }
    mapredPasswd=promptPassword(mapredUser);
  }
  hcpl.setYarnUser(yarnUser);
  hcpl.setYarnPasswd(yarnPasswd);
  hcpl.setHdfsUser(hdfsUser);
  hcpl.setHdfsPasswd(hdfsPasswd);
  hcpl.setMapredUser(mapredUser);
  hcpl.setMapredPasswd(mapredPasswd);
  hcpl.persistPropertiesToDisk();
}","private static void getHadoopConfigurationFromUser(HadoopConfigurationPropertyLoader hcpl) throws IOException {
  String hadoopHome;
  String hadoopType;
  String distributionType;
  Properties prop=new Properties();
  prop.load(JumbuneAgent.class.getClassLoader().getResourceAsStream(DISTRIBUTION_PROPERTIES));
  hadoopType=prop.getProperty(HADOOP_DISTRIBUTION);
  if (hadoopType.equalsIgnoreCase(YARN)) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(H) && !distributionType.equalsIgnoreCase(C))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(M))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
  hadoopHome=System.getenv(""String_Node_Str"");
  String promptedHadoopHome;
  if (hadoopHome != null && !""String_Node_Str"".equals(hadoopHome.trim())) {
    CONSOLE_LOGGER.info(""String_Node_Str"" + hadoopHome + ""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=hadoopHome;
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=""String_Node_Str"";
    }
  }
  hadoopHome=validateHadoopHome(promptedHadoopHome);
  hcpl.setHadoopHome(hadoopHome);
  hcpl.setDistributionType(distributionType);
  hcpl.setHadoopType(hadoopType);
  String currentWorkingUser=System.getProperty(""String_Node_Str"");
  CONSOLE_LOGGER.info(""String_Node_Str"");
  String hasSeparateUsers=SCANNER.nextLine().trim();
  while (!(""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers) || ""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers))) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hasSeparateUsers=SCANNER.nextLine().trim();
  }
  String hdfsUser;
  String yarnUser;
  String mapredUser;
  String hdfsPasswd=null;
  String yarnPasswd=null;
  String mapredPasswd=null;
  if (""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers)) {
    CONSOLE_LOGGER.info(""String_Node_Str"" + currentWorkingUser + ""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=currentWorkingUser;
      yarnUser=currentWorkingUser;
      mapredUser=currentWorkingUser;
    }
 else {
      mapredUser=yarnUser=hdfsUser;
    }
    hdfsPasswd=promptPassword(hdfsUser);
    mapredPasswd=yarnPasswd=hdfsPasswd;
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=""String_Node_Str"";
    }
    hdfsPasswd=promptPassword(hdfsUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    yarnUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(yarnUser)) {
      yarnUser=""String_Node_Str"";
    }
    yarnPasswd=promptPassword(yarnUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    mapredUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(mapredUser)) {
      mapredUser=""String_Node_Str"";
    }
    mapredPasswd=promptPassword(mapredUser);
  }
  hcpl.setYarnUser(yarnUser);
  hcpl.setYarnPasswd(yarnPasswd);
  hcpl.setHdfsUser(hdfsUser);
  hcpl.setHdfsPasswd(hdfsPasswd);
  hcpl.setMapredUser(mapredUser);
  hcpl.setMapredPasswd(mapredPasswd);
  hcpl.persistPropertiesToDisk();
}",0.9712123259899986
130212,"private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  if (response != null && !response.isEmpty() && response.indexOf(""String_Node_Str"") != -1) {
    result=response.substring((response.indexOf(""String_Node_Str"") + 1),response.length());
    result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  }
  LOGGER.debug(""String_Node_Str"" + result);
  if (result != null) {
    String recursiveResponse=getAbsoluteConfDirPath(result,config);
    if (recursiveResponse != null) {
      result=recursiveResponse;
    }
  }
  return result;
}","private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  int responseIndex=response.indexOf(""String_Node_Str"");
  if (response != null && !response.isEmpty() && responseIndex != -1) {
    result=response.substring((responseIndex + 1),response.length());
    result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  }
  LOGGER.debug(""String_Node_Str"" + result);
  if (result != null) {
    String recursiveResponse=getAbsoluteConfDirPath(result,config);
    if (recursiveResponse != null) {
      result=recursiveResponse;
    }
  }
  return result;
}",0.93841642228739
130213,"/** 
 * This method is responsible for populating the clean up phase details.
 * @return TaskOutputDetails contains the details of the clean up phase.
 */
private PhaseDetails prepareCleanupDetails(JobInfo jobInfo,Map<TaskAttemptID,TaskAttemptInfo> tasks){
  PhaseDetails phaseDetails=new PhaseDetails();
  List<TaskOutputDetails> cleanupTaskOuptputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskType(""String_Node_Str"");
  taskOutputDetails.setTaskID(""String_Node_Str"");
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
    taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  }
  long startPoint=getMaxReduceTime(tasks,jobInfo.getSubmitTime());
  taskOutputDetails.setStartPoint(startPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getStartPoint());
  long endPoint=(jobInfo.getFinishTime() - jobInfo.getSubmitTime()) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getEndPoint());
  taskOutputDetails.setDataFlowRate(0);
  cleanupTaskOuptputDetails.add(taskOutputDetails);
  phaseDetails.setTaskOutputDetails(cleanupTaskOuptputDetails);
  phaseDetails.setAvgDataFlowRate(0);
  return phaseDetails;
}","/** 
 * This method is responsible for populating the clean up phase details.
 * @return TaskOutputDetails contains the details of the clean up phase.
 */
private PhaseDetails prepareCleanupDetails(JobInfo jobInfo,Map<TaskAttemptID,TaskAttemptInfo> tasks){
  PhaseDetails phaseDetails=new PhaseDetails();
  List<TaskOutputDetails> cleanupTaskOuptputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskType(""String_Node_Str"");
  taskOutputDetails.setTaskID(""String_Node_Str"");
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
    taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  }
  long startPoint=getMaxReduceTime(tasks,jobInfo.getSubmitTime());
  taskOutputDetails.setStartPoint(startPoint);
  long endPoint=(jobInfo.getFinishTime() - jobInfo.getSubmitTime()) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  taskOutputDetails.setDataFlowRate(0);
  cleanupTaskOuptputDetails.add(taskOutputDetails);
  phaseDetails.setTaskOutputDetails(cleanupTaskOuptputDetails);
  phaseDetails.setAvgDataFlowRate(0);
  return phaseDetails;
}",0.9480421686746988
130214,"/** 
 * @param jobInfo contains the details of the job.
 * @param additionalJobInfo contains the cpuusage,memory usage and task type details.
 * @return the job output containing the details of each phase.
 */
@SuppressWarnings(""String_Node_Str"") private JobOutput getJobOutput(JobInfo jobInfo){
  JobOutput jobOutput=new JobOutput();
  jobOutput.setJobID(jobInfo.getJobId().toString());
  jobOutput.setJobName(jobInfo.getJobname());
  jobOutput.setUser(jobInfo.getUsername());
  jobOutput.setOutcome(jobInfo.getJobStatus());
  long referencedZeroTime=jobInfo.getSubmitTime();
  long startTime=jobInfo.getSubmitTime();
  long finishTime=jobInfo.getFinishTime();
  long timeInMilliSec=(finishTime - startTime);
  long totalTimeInSecs=timeInMilliSec / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  jobOutput.setTotalTime(totalTimeInSecs);
  LOGGER.info(""String_Node_Str"" + jobOutput.getTotalTime());
  jobOutput.setTotalTimeInMilliSec(timeInMilliSec);
  PhaseOutput phaseOutput=new PhaseOutput();
  PhaseDetails mapPhaseDetails=new PhaseDetails();
  PhaseDetails reducePhaseDetails=new PhaseDetails();
  Map<TaskAttemptID,TaskAttemptInfo> tasks=jobInfo.getAllCompletedTaskAttempts();
  List<TaskOutputDetails> mapTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  List<TaskOutputDetails> reduceTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails mapTaskDetails=null;
  TaskOutputDetails reduceTaskDetails=null;
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    if (TaskType.MAP.equals(task.getKey().getTaskType())) {
      mapTaskDetails=addMapPhaseDetails(task,referencedZeroTime);
      mapTaskOutputDetails.add(mapTaskDetails);
    }
 else     if (TaskType.REDUCE.equals(task.getKey().getTaskType())) {
      reduceTaskDetails=addReducePhaseDetails(task,referencedZeroTime);
      reduceTaskOutputDetails.add(reduceTaskDetails);
    }
  }
  mapPhaseDetails.setTaskOutputDetails(mapTaskOutputDetails);
  long mapDataFlowRate=calculateAvgDataFlow(mapTaskOutputDetails);
  mapPhaseDetails.setAvgDataFlowRate(mapDataFlowRate);
  phaseOutput.setMapDetails(mapPhaseDetails);
  reducePhaseDetails.setTaskOutputDetails(reduceTaskOutputDetails);
  long reduceDataFlowRate=calculateAvgDataFlow(reduceTaskOutputDetails);
  reducePhaseDetails.setAvgDataFlowRate(reduceDataFlowRate);
  phaseOutput.setReduceDetails(reducePhaseDetails);
  PhaseDetails setupDetails=prepareSetupDetails(jobInfo,tasks);
  phaseOutput.setSetupDetails(setupDetails);
  PhaseDetails cleanupDetails=prepareCleanupDetails(jobInfo,tasks);
  phaseOutput.setCleanupDetails(cleanupDetails);
  jobOutput.setPhaseOutput(phaseOutput);
  return jobOutput;
}","/** 
 * @param jobInfo contains the details of the job.
 * @param additionalJobInfo contains the cpuusage,memory usage and task type details.
 * @return the job output containing the details of each phase.
 */
@SuppressWarnings(""String_Node_Str"") private JobOutput getJobOutput(JobInfo jobInfo){
  JobOutput jobOutput=new JobOutput();
  jobOutput.setJobID(jobInfo.getJobId().toString());
  jobOutput.setJobName(jobInfo.getJobname());
  jobOutput.setUser(jobInfo.getUsername());
  jobOutput.setOutcome(jobInfo.getJobStatus());
  long referencedZeroTime=jobInfo.getSubmitTime();
  long startTime=jobInfo.getSubmitTime();
  long finishTime=jobInfo.getFinishTime();
  long timeInMilliSec=(finishTime - startTime);
  long totalTimeInSecs=timeInMilliSec / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  jobOutput.setTotalTime(totalTimeInSecs);
  jobOutput.setTotalTimeInMilliSec(timeInMilliSec);
  PhaseOutput phaseOutput=new PhaseOutput();
  PhaseDetails mapPhaseDetails=new PhaseDetails();
  PhaseDetails reducePhaseDetails=new PhaseDetails();
  Map<TaskAttemptID,TaskAttemptInfo> tasks=jobInfo.getAllCompletedTaskAttempts();
  List<TaskOutputDetails> mapTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  List<TaskOutputDetails> reduceTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails mapTaskDetails=null;
  TaskOutputDetails reduceTaskDetails=null;
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    if (TaskType.MAP.equals(task.getKey().getTaskType())) {
      mapTaskDetails=addMapPhaseDetails(task,referencedZeroTime);
      mapTaskOutputDetails.add(mapTaskDetails);
    }
 else     if (TaskType.REDUCE.equals(task.getKey().getTaskType())) {
      reduceTaskDetails=addReducePhaseDetails(task,referencedZeroTime);
      reduceTaskOutputDetails.add(reduceTaskDetails);
    }
  }
  mapPhaseDetails.setTaskOutputDetails(mapTaskOutputDetails);
  long mapDataFlowRate=calculateAvgDataFlow(mapTaskOutputDetails);
  mapPhaseDetails.setAvgDataFlowRate(mapDataFlowRate);
  phaseOutput.setMapDetails(mapPhaseDetails);
  reducePhaseDetails.setTaskOutputDetails(reduceTaskOutputDetails);
  long reduceDataFlowRate=calculateAvgDataFlow(reduceTaskOutputDetails);
  reducePhaseDetails.setAvgDataFlowRate(reduceDataFlowRate);
  phaseOutput.setReduceDetails(reducePhaseDetails);
  PhaseDetails setupDetails=prepareSetupDetails(jobInfo,tasks);
  phaseOutput.setSetupDetails(setupDetails);
  PhaseDetails cleanupDetails=prepareCleanupDetails(jobInfo,tasks);
  phaseOutput.setCleanupDetails(cleanupDetails);
  jobOutput.setPhaseOutput(phaseOutput);
  return jobOutput;
}",0.9884140550807218
130215,"/** 
 * This method is responsible for populating the reduce phase details.
 * @return TaskOutputDetails contains the details of the reduce phase.
 */
private TaskOutputDetails addReducePhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter reduceOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputRecords(reduceOutputRecords.getValue());
  Counter reduceOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(reduceOutputBytes.getValue());
  long shuffleStartTime=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(shuffleStartTime);
  taskOutputDetails.setShuffleStart(shuffleStartTime);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getShuffleStart());
  long shuffleEnd=((taskAttemptInfo.getShuffleFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setShuffleEnd(shuffleEnd);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getShuffleEnd());
  taskOutputDetails.setSortStart(shuffleEnd);
  long sortEnd=(taskAttemptInfo.getSortFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setSortEnd(sortEnd);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getSortEnd());
  taskOutputDetails.setReduceStart(sortEnd);
  taskOutputDetails.setReduceEnd((taskAttemptInfo.getFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setEndPoint(taskOutputDetails.getReduceEnd());
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getReduceEnd());
  long dataFlowRate=reduceOutputBytes.getValue() / (taskOutputDetails.getReduceEnd() - shuffleStartTime);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  return taskOutputDetails;
}","/** 
 * This method is responsible for populating the reduce phase details.
 * @return TaskOutputDetails contains the details of the reduce phase.
 */
private TaskOutputDetails addReducePhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter reduceOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputRecords(reduceOutputRecords.getValue());
  Counter reduceOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(reduceOutputBytes.getValue());
  long shuffleStartTime=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(shuffleStartTime);
  taskOutputDetails.setShuffleStart(shuffleStartTime);
  long shuffleEnd=((taskAttemptInfo.getShuffleFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setShuffleEnd(shuffleEnd);
  taskOutputDetails.setSortStart(shuffleEnd);
  long sortEnd=(taskAttemptInfo.getSortFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setSortEnd(sortEnd);
  taskOutputDetails.setReduceStart(sortEnd);
  taskOutputDetails.setReduceEnd((taskAttemptInfo.getFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setEndPoint(taskOutputDetails.getReduceEnd());
  long dataFlowRate=reduceOutputBytes.getValue() / (taskOutputDetails.getReduceEnd() - shuffleStartTime);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  return taskOutputDetails;
}",0.9450592885375494
130216,"/** 
 * Adds detail for a Map phase.
 * @param task2 
 * @param task2 the tasks
 * @param referencedZeroTime 
 * @param referencedZeroTime the start time
 * @param additionalJobInfo 
 * @return the phase details
 */
private TaskOutputDetails addMapPhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  long startPoint=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(startPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getStartPoint());
  long endPoint=(taskAttemptInfo.getMapFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getEndPoint());
  taskOutputDetails.setTimeTaken(endPoint - startPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getTimeTaken());
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup fileSystemCounters=counters.getGroup(""String_Node_Str"");
  Counter inputBytes=fileSystemCounters.findCounter(""String_Node_Str"");
  long dataFlowRate=inputBytes.getValue() / (endPoint - startPoint);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter mapOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  taskOutputDetails.setOutputRecords(mapOutputRecords.getValue());
  Counter mapOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(mapOutputBytes.getValue());
  return taskOutputDetails;
}","/** 
 * Adds detail for a Map phase.
 * @param task2 
 * @param task2 the tasks
 * @param referencedZeroTime 
 * @param referencedZeroTime the start time
 * @param additionalJobInfo 
 * @return the phase details
 */
private TaskOutputDetails addMapPhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  long startPoint=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(startPoint);
  long endPoint=(taskAttemptInfo.getMapFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  taskOutputDetails.setTimeTaken(endPoint - startPoint);
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup fileSystemCounters=counters.getGroup(""String_Node_Str"");
  Counter inputBytes=fileSystemCounters.findCounter(""String_Node_Str"");
  long dataFlowRate=inputBytes.getValue() / (endPoint - startPoint);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter mapOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  taskOutputDetails.setOutputRecords(mapOutputRecords.getValue());
  Counter mapOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(mapOutputBytes.getValue());
  return taskOutputDetails;
}",0.9426809773920988
130217,"/** 
 * Gets the job details.
 * @param yamlLoader the loader
 * @param jobID the job id
 * @return the job details
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws ClassNotFoundException 
 */
public JobOutput getJobDetails(Loader loader,String jobID) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  String appHome=yamlLoader.getjHome() + File.separator;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  String agentHome=RemotingUtil.getAgentHome(yamlConfig);
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
  String logsHistory=null;
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String user=yamlConfig.getMaster().getUser();
  logsHistory=changeLogHistoryPathAccToHadoopVersion(HADOOP_HOME,hadoopVersion,user);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  boolean isYarn=yamlConfig.getEnableYarn().equals(Enable.TRUE);
  String logfilePath=null;
  String relLocalPath=null;
  if (!isYarn) {
    logfilePath=getLogFilePath(jobID,remoter,logsHistory,builder);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    String relRemotePath=relLocalPath + RUMEN;
    StringBuilder stringAppender=new StringBuilder(agentHome);
    stringAppender.append(File.separator).append(relRemotePath).append(File.separator);
    String pathToRumenDir=stringAppender.toString();
    String jsonFilepath=pathToRumenDir + JSON_FILE;
    String topologyFilePath=pathToRumenDir + TOPOLOGY_FILE;
    builder.getCommandBatch().clear();
    builder.addCommand(MKDIR_CMD + pathToRumenDir,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    String remoteHadoopLib=HADOOP_HOME + LIB;
    Properties props=loadHadoopJarConfigurationProperties();
    String coreJar;
    if (SupportedHadoopDistributions.HADOOP_NON_YARN.equals(hadoopVersion)) {
      coreJar=HADOOP_HOME + props.getProperty(""String_Node_Str"");
    }
 else {
      coreJar=HADOOP_HOME + WILDCARD;
    }
    String commonsLoggingJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsCliJar=remoteHadoopLib + props.getProperty(""String_Node_Str"");
    String commonsConfigurationJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsLangJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperAslJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperCoreJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String rumenJar=agentHome + LIB + props.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Versioning.BUILD_VERSION+ Versioning.DISTRIBUTION_NAME+ ""String_Node_Str"";
    StringBuilder sb=new StringBuilder(JAVA_CP_CMD);
    checkHadoopVersionsForRumen(hadoopVersion,logfilePath,jsonFilepath,topologyFilePath,coreJar,commonsLoggingJar,commonsCliJar,commonsConfigurationJar,commonsLangJar,jacksonMapperAslJar,jacksonMapperCoreJar,rumenJar,sb);
    LOGGER.debug(""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
    startRumenProcessing(remoter,relLocalPath,relRemotePath,sb);
    remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
    remoter.receiveLogFiles(relLocalPath,relRemotePath);
    LOGGER.debug(""String_Node_Str"" + relRemotePath);
    Gson gson=new Gson();
    JobDetails jobDetails=extractJobDetails(appHome,relLocalPath,gson);
    return convertToFinalOutput(jobDetails);
  }
 else {
    String relativeRemotePath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName() + File.separator+ jobID;
    String remotePath=agentHome + relativeRemotePath;
    builder.addCommand(MKDIR_CMD + remotePath,false,null,CommandType.FS);
    builder.addCommand(CHMOD_CMD + remotePath,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    checkAndgetCurrentLogFilePathForYarn(remoter,logsHistory,yamlLoader.getYamlConfiguration(),agentHome,remotePath,jobID);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relLocalPath,relativeRemotePath);
    String absolutePath=appHome + relLocalPath + jobID+ File.separator;
    String fileName=checkAndGetHistFile(absolutePath);
    String localPath=absolutePath + fileName;
    java.lang.reflect.Method method=null;
    Class<?> yarnJobStatsUtility=null;
    try {
      yarnJobStatsUtility=Class.forName(YARN_JOB_STATS_UTILITY_CLASS);
      method=yarnJobStatsUtility.getDeclaredMethod(YARN_JOB_STATS_UTILITY_CLASS_PARSE_METHOD,String.class);
      return (JobOutput)method.invoke(yarnJobStatsUtility.newInstance(),localPath);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e.getCause());
    }
  }
  return null;
}","/** 
 * Gets the job details.
 * @param yamlLoader the loader
 * @param jobID the job id
 * @return the job details
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws ClassNotFoundException 
 */
public JobOutput getJobDetails(Loader loader,String jobID) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  String appHome=yamlLoader.getjHome() + File.separator;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  String agentHome=RemotingUtil.getAgentHome(yamlConfig);
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
  String logsHistory=null;
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String user=yamlConfig.getMaster().getUser();
  logsHistory=changeLogHistoryPathAccToHadoopVersion(HADOOP_HOME,hadoopVersion,user);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  boolean isYarn=yamlConfig.getEnableYarn().equals(Enable.TRUE);
  String logfilePath=null;
  String relLocalPath=null;
  if (!isYarn) {
    logfilePath=getLogFilePath(jobID,remoter,logsHistory,builder);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    String relRemotePath=relLocalPath + RUMEN;
    StringBuilder stringAppender=new StringBuilder(agentHome);
    stringAppender.append(File.separator).append(relRemotePath).append(File.separator);
    String pathToRumenDir=stringAppender.toString();
    String jsonFilepath=pathToRumenDir + JSON_FILE;
    String topologyFilePath=pathToRumenDir + TOPOLOGY_FILE;
    builder.getCommandBatch().clear();
    builder.addCommand(MKDIR_CMD + pathToRumenDir,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    String remoteHadoopLib=HADOOP_HOME + LIB;
    Properties props=loadHadoopJarConfigurationProperties();
    String coreJar;
    if (SupportedHadoopDistributions.HADOOP_NON_YARN.equals(hadoopVersion)) {
      coreJar=HADOOP_HOME + props.getProperty(""String_Node_Str"");
    }
 else {
      coreJar=HADOOP_HOME + WILDCARD;
    }
    String commonsLoggingJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsCliJar=remoteHadoopLib + props.getProperty(""String_Node_Str"");
    String commonsConfigurationJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsLangJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperAslJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperCoreJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String rumenJar=agentHome + LIB + props.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Versioning.BUILD_VERSION+ Versioning.DISTRIBUTION_NAME+ ""String_Node_Str"";
    StringBuilder sb=new StringBuilder(JAVA_CP_CMD);
    checkHadoopVersionsForRumen(hadoopVersion,logfilePath,jsonFilepath,topologyFilePath,coreJar,commonsLoggingJar,commonsCliJar,commonsConfigurationJar,commonsLangJar,jacksonMapperAslJar,jacksonMapperCoreJar,rumenJar,sb);
    LOGGER.debug(""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
    startRumenProcessing(remoter,relLocalPath,relRemotePath,sb);
    remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
    remoter.receiveLogFiles(relLocalPath,relRemotePath);
    LOGGER.debug(""String_Node_Str"" + relRemotePath);
    Gson gson=new Gson();
    JobDetails jobDetails=extractJobDetails(appHome,relLocalPath,gson);
    return convertToFinalOutput(jobDetails);
  }
 else {
    String relativeRemotePath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName() + File.separator+ jobID;
    String remotePath=agentHome + relativeRemotePath;
    builder.addCommand(MKDIR_CMD + remotePath,false,null,CommandType.FS);
    builder.addCommand(CHMOD_CMD + remotePath,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    checkAndgetCurrentLogFilePathForYarn(remoter,logsHistory,yamlLoader.getYamlConfiguration(),agentHome,remotePath,jobID);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relLocalPath,relativeRemotePath);
    String absolutePath=appHome + relLocalPath + jobID+ File.separator;
    String fileName=checkAndGetHistFile(absolutePath);
    String localPath=absolutePath + fileName;
    java.lang.reflect.Method method=null;
    Class<?> yarnJobStatsUtility=null;
    try {
      yarnJobStatsUtility=Class.forName(YARN_JOB_STATS_UTILITY_CLASS);
      method=yarnJobStatsUtility.getDeclaredMethod(YARN_JOB_STATS_UTILITY_CLASS_PARSE_METHOD,String.class);
      return (JobOutput)method.invoke(yarnJobStatsUtility.newInstance(),localPath);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  return null;
}",0.9988412514484356
130218,"public static String copyAndGetHadoopConfigurationFilePath(String remoteAbsolutePath,Loader loader){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String jumbuneHome=yamlLoader.getjHome();
  String dirInJumbuneHome=jumbuneHome + File.separator + Constants.JOB_JARS_LOC+ yamlLoader.getJumbuneJobName();
  File dir=new File(dirInJumbuneHome);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  String jumbuneJobName=yamlLoader.getJumbuneJobName() + File.separator;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  jumbuneHome=new String(jumbuneHome + File.separator);
  String destinationReceiveDir=jumbuneHome + Constants.JOB_JARS_LOC + jumbuneJobName;
  Remoter remoter=getRemoter(yamlConfig,""String_Node_Str"");
  String copyCommand=new StringBuilder().append(""String_Node_Str"").append(remoteAbsolutePath).append(""String_Node_Str"").append(getAgentHome(yamlConfig)).append(""String_Node_Str"").append(jumbuneJobName).toString();
  CommandWritableBuilder builder=new CommandWritableBuilder();
  builder.addCommand(MAKE_JOBJARS_DIR_ON_AGENT + jumbuneJobName,false,null,CommandType.FS).addCommand(copyCommand,false,null,CommandType.FS);
  remoter.fireAndForgetCommand(builder.getCommandWritable());
  String fileName=remoteAbsolutePath.substring(remoteAbsolutePath.lastIndexOf(File.separator) + 1);
  remoter.receiveLogFiles(File.separator + Constants.JOB_JARS_LOC + jumbuneJobName,File.separator + Constants.JOB_JARS_LOC + jumbuneJobName+ fileName);
  return destinationReceiveDir + File.separator + fileName;
}","/** 
 * * This method returns the absoluate path of a given configuration file on the remote HADOOP machine. This expects that the given configuration file name to be correct and the file resides in <HADOOP_HOME>/conf directory.
 * @param loader the loader
 * @param hadoopConfigurationFile which we wants to receive the path of.
 * @return the string
 */
@Deprecated public static String copyAndGetHadoopConfigurationFilePath(Loader loader,String hadoopConfigurationFile){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String jumbuneHome=yamlLoader.getjHome();
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  String jumbuneJobName=yamlLoader.getJumbuneJobName() + File.separator;
  String dirInJumbuneHome=jumbuneHome + File.separator + Constants.JOB_JARS_LOC+ yamlLoader.getJumbuneJobName();
  File dir=new File(dirInJumbuneHome);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  HadoopDistributionLocator hadoopUtility=getDistributionLocator(getHadoopVersion(yamlConfig));
  String hadoopConfDir=hadoopUtility.getHadoopConfDirPath(yamlConfig);
  jumbuneHome=new String(jumbuneHome + File.separator);
  String destinationReceiveDir=jumbuneHome + Constants.JOB_JARS_LOC + jumbuneJobName;
  Remoter remoter=getRemoter(yamlConfig,jumbuneHome);
  String copyCommand=new StringBuilder().append(""String_Node_Str"").append(hadoopConfDir).append(hadoopConfigurationFile).append(""String_Node_Str"").append(getAgentHome(yamlConfig)).append(""String_Node_Str"").append(jumbuneJobName).toString();
  CommandWritableBuilder builder=new CommandWritableBuilder();
  builder.addCommand(MAKE_JOBJARS_DIR_ON_AGENT + jumbuneJobName,false,null,CommandType.FS).addCommand(copyCommand,false,null,CommandType.FS);
  remoter.fireAndForgetCommand(builder.getCommandWritable());
  remoter.receiveLogFiles(File.separator + Constants.JOB_JARS_LOC + jumbuneJobName,File.separator + Constants.JOB_JARS_LOC + jumbuneJobName+ hadoopConfigurationFile);
  return destinationReceiveDir;
}",0.648
130219,"/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}","/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      LOGGER.debug(""String_Node_Str"");
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}",0.7023863124718596
130220,"/** 
 * * This method retrieves out a Hadoop configuration parameters value. User has to specify appropriate Hadoop configuration file and configuration name. This method assumes that given configuration file is present in HADOOP_HOME/conf directory.
 * @param loader the loader
 * @param hadoopConfigurationFile configuration file in Hadoop configuration directory
 * @param configurationToGet Hadoop configuration parameter.
 * @return configuration value.
 */
public static String getHadoopConfigurationValue(Loader loader,String hadoopConfigurationFile,String configurationToGet){
  String destinationReceiveDir=copyAndGetHadoopConfigurationFilePath(loader,hadoopConfigurationFile);
  return parseConfiguration(destinationReceiveDir + ""String_Node_Str"" + hadoopConfigurationFile,configurationToGet);
}","/** 
 * * This method retrieves out a Hadoop configuration parameters value. User has to specify appropriate Hadoop configuration file and configuration name. This method assumes that given configuration file is present in HADOOP_HOME/conf directory.
 * @param loader the loader
 * @param hadoopConfigurationFile configuration file in Hadoop configuration directory
 * @param configurationToGet Hadoop configuration parameter.
 * @return configuration value.
 */
public static String getHadoopConfigurationValue(Loader loader,String hadoopConfigurationFile,String configurationToGet){
  String hadoopConfDir=RemotingUtil.getHadoopConfigurationDirPath(loader);
  String destinationReceiveDir=copyAndGetConfigurationFilePath(loader,hadoopConfDir,hadoopConfigurationFile);
  return parseConfiguration(destinationReceiveDir + ""String_Node_Str"" + hadoopConfigurationFile,configurationToGet);
}",0.9438865918487892
130221,"private void setMemPhaseResourceUsage(List<TaskOutputDetails> taskDetails,Map<Long,IntervalStats> statsMap,JobOutput jobOutput,String jobID,PhaseType phase) throws UnknownHostException {
  IntervalStats intervalStats;
  List<Float> cpuPer;
  List<Float> memPer;
  float maxPhaseMem=0;
  float totalPhaseCpu=0;
  int interval=0;
  Map<NodeSystemStats,Float> memStatsMap=new HashMap<NodeSystemStats,Float>();
  int minStartPoint=-1, maxEndPoint=0;
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,null);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  String remoteHadoop=RemotingUtil.getHadoopHome(remoter,yamlConfig) + File.separator;
  String user=yamlConfig.getMaster().getUser();
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String logsHistory=changeLogHistoryPathAccToHadoopVersion(remoteHadoop,hadoopVersion,user);
  String command=jobID + RemotingConstants.SINGLE_SPACE + logsHistory;
  builder.addCommand(command,false,null,CommandType.FS).setApiInvokeHints(ApiInvokeHintsEnum.GET_HADOOP_CONFIG);
  String configFilePath=(String)remoter.fireCommandAndGetObjectResponse(builder.getCommandWritable());
  String destinationReceiveDir=RemotingUtil.copyAndGetHadoopConfigurationFilePath(configFilePath,loader);
  for (  TaskOutputDetails tod : taskDetails) {
    String location=convertHostNameToIP(tod.getLocation());
    float mem=tod.getResourceUsageMetrics().getPhysicalMemoryUsage();
    minStartPoint=setMinStartPoint(minStartPoint,tod.getStartPoint());
    long start=minStartPoint;
    maxEndPoint=setMaxEndPoint(maxEndPoint,tod.getEndPoint());
    long end=maxEndPoint;
    long startPt=Math.max(start,DELAY_INTERVAL);
    float memoryStats=0.0f;
    String jvmChildOpts=null;
    if (PhaseType.REDUCE.equals(phase)) {
      jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      }
    }
 else {
      jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      }
    }
    if (jvmChildOpts != null) {
      int childOptsVal=ConfigurationUtil.getJavaOptsinMB(jvmChildOpts);
      memoryStats=((mem / (childOptsVal * 1024 * 1024)) * 100);
      int avg=(int)(tod.getEndPoint() - startPt) / 2;
      interval=(int)(avg + startPt);
      maxPhaseMem=setMaxPhaseMemory(memoryStats,maxPhaseMem);
    }
  }
  if (statsMap.containsKey(interval)) {
    intervalStats=statsMap.get(interval);
    cpuPer=intervalStats.getCpuStats();
    memPer=intervalStats.getMemStats();
  }
 else {
    intervalStats=new IntervalStats();
    cpuPer=new ArrayList<Float>();
    memPer=new ArrayList<Float>();
  }
  setIntervalStats(statsMap,0.0f,maxPhaseMem,intervalStats,cpuPer,memPer,interval);
}","private void setMemPhaseResourceUsage(List<TaskOutputDetails> taskDetails,Map<Long,IntervalStats> statsMap,JobOutput jobOutput,String jobID,PhaseType phase) throws UnknownHostException {
  IntervalStats intervalStats;
  List<Float> cpuPer;
  List<Float> memPer;
  float maxPhaseMem=0;
  float totalPhaseCpu=0;
  int interval=0;
  Map<NodeSystemStats,Float> memStatsMap=new HashMap<NodeSystemStats,Float>();
  int minStartPoint=-1, maxEndPoint=0;
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,null);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  String remoteHadoop=RemotingUtil.getHadoopHome(remoter,yamlConfig) + File.separator;
  String user=yamlConfig.getMaster().getUser();
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String logsHistory=changeLogHistoryPathAccToHadoopVersion(remoteHadoop,hadoopVersion,user);
  String command=jobID + RemotingConstants.SINGLE_SPACE + logsHistory;
  builder.addCommand(command,false,null,CommandType.FS).setApiInvokeHints(ApiInvokeHintsEnum.GET_HADOOP_CONFIG);
  String configFilePath=(String)remoter.fireCommandAndGetObjectResponse(builder.getCommandWritable());
  String fileName=configFilePath.substring(configFilePath.lastIndexOf(File.separator) + 1);
  configFilePath=configFilePath.substring(0,configFilePath.lastIndexOf(File.separator) + 1);
  String configurationFilePath=RemotingUtil.copyAndGetConfigurationFilePath(loader,configFilePath,fileName) + File.separator + fileName;
  for (  TaskOutputDetails tod : taskDetails) {
    String location=convertHostNameToIP(tod.getLocation());
    float mem=tod.getResourceUsageMetrics().getPhysicalMemoryUsage();
    minStartPoint=setMinStartPoint(minStartPoint,tod.getStartPoint());
    long start=minStartPoint;
    maxEndPoint=setMaxEndPoint(maxEndPoint,tod.getEndPoint());
    long end=maxEndPoint;
    long startPt=Math.max(start,DELAY_INTERVAL);
    float memoryStats=0.0f;
    String jvmChildOpts=null;
    if (PhaseType.REDUCE.equals(phase)) {
      jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      }
    }
 else {
      jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      }
    }
    if (jvmChildOpts != null) {
      int childOptsVal=ConfigurationUtil.getJavaOptsinMB(jvmChildOpts);
      memoryStats=((mem / (childOptsVal * 1024 * 1024)) * 100);
      int avg=(int)(tod.getEndPoint() - startPt) / 2;
      interval=(int)(avg + startPt);
      maxPhaseMem=setMaxPhaseMemory(memoryStats,maxPhaseMem);
    }
  }
  if (statsMap.containsKey(interval)) {
    intervalStats=statsMap.get(interval);
    cpuPer=intervalStats.getCpuStats();
    memPer=intervalStats.getMemStats();
  }
 else {
    intervalStats=new IntervalStats();
    cpuPer=new ArrayList<Float>();
    memPer=new ArrayList<Float>();
  }
  setIntervalStats(statsMap,0.0f,maxPhaseMem,intervalStats,cpuPer,memPer,interval);
}",0.9309806371018112
130222,"/** 
 * Check mr job field.
 * @param config object of yamlConfig class
 * @param failedCasesList error list
 */
protected void checkMrJobField(Config config){
  Map<String,String> failedCases=new HashMap<String,String>();
  Map<String,String> suggetion=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (isEnable(yamlConfig.getEnableStaticJobProfiling()) || yamlConfig.getDebugAnalysis().getEnumValue()) {
    checkNullEmptyAndMessage(failedCases,yamlConfig.getInputFile(),ErrorMessages.BASIC_INPUT_PATH_EMPTY,""String_Node_Str"");
    validateJobs(config,failedCases,suggetion);
  }
  addToValidationList(Constants.JOBS_VALIDATION,failedCases,suggetion);
}","/** 
 * Check mr job field.
 * @param config object of yamlConfig class
 * @param failedCasesList error list
 */
protected void checkMrJobField(Config config){
  Map<String,String> failedCases=new HashMap<String,String>();
  Map<String,String> suggetion=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (!isEnable(yamlConfig.getEnableStaticJobProfiling()) || yamlConfig.getDebugAnalysis().getEnumValue()) {
    checkNullEmptyAndMessage(failedCases,yamlConfig.getInputFile(),ErrorMessages.BASIC_INPUT_PATH_EMPTY,""String_Node_Str"");
    validateJobs(config,failedCases,suggetion);
  }
  addToValidationList(Constants.JOBS_VALIDATION,failedCases,suggetion);
}",0.99927060539752
130223,"/** 
 * This method checks whether the jar location given corresponds to a valid jar file or not.
 * @param yamlConfig
 */
public void validateJarPath(YamlConfig yamlConfig){
  if (isEnable(yamlConfig.getDebugAnalysis()) || (isEnable(yamlConfig.getEnableStaticJobProfiling()) && isEnable(yamlConfig.getRunJobFromJumbune()))) {
    String inputFile=yamlConfig.getInputFile();
    Map<String,String> failedCases=new HashMap<String,String>();
    boolean isLocalSystemJar=isEnable(yamlConfig.getIsLocalSystemJar());
    if (inputFile != null) {
      boolean endsWithJar=inputFile.trim().endsWith(""String_Node_Str"");
      if ((((!endsWithJar || !new File(inputFile).exists()) && (!isLocalSystemJar)) || (isLocalSystemJar && !endsWithJar))) {
        failedCases.put(inputFile,errorMessages.get(ErrorMessages.SUPPLIED_JAR_INVALID));
        failedValidation.put(""String_Node_Str"",failedCases);
      }
    }
 else {
      failedCases.put(inputFile,errorMessages.get(ErrorMessages.SUPPLIED_JAR_INVALID));
      failedValidation.put(""String_Node_Str"",failedCases);
    }
  }
}","/** 
 * This method checks whether the jar location given corresponds to a valid jar file or not.
 * @param yamlConfig
 */
public void validateJarPath(YamlConfig yamlConfig){
  if (isEnable(yamlConfig.getDebugAnalysis()) || (isEnable(yamlConfig.getEnableStaticJobProfiling()) && isEnable(yamlConfig.getRunJobFromJumbune()))) {
    String inputFile=yamlConfig.getInputFile();
    Map<String,String> failedCases=new HashMap<String,String>();
    boolean isLocalSystemJar=isEnable(yamlConfig.getIsLocalSystemJar());
    if (inputFile != null) {
      boolean endsWithJar=inputFile.trim().endsWith(""String_Node_Str"");
      if ((((!endsWithJar || !new File(inputFile).exists()) && (!isLocalSystemJar)) || (isLocalSystemJar && !endsWithJar))) {
        failedCases.put(inputFile,errorMessages.get(ErrorMessages.SUPPLIED_JAR_INVALID));
        failedValidation.put(""String_Node_Str"",failedCases);
      }
    }
 else {
      failedCases.put(inputFile,errorMessages.get(ErrorMessages.BASIC_INPUT_PATH_EMPTY));
      failedValidation.put(""String_Node_Str"",failedCases);
    }
  }
}",0.9850746268656716
130224,"@Override public String getHadoopConfDirPath(YamlConfig config){
  StringBuilder responseAppender=new StringBuilder();
  String response=RemotingUtil.executeCommand(config,ECHO_HADOOP_CONF_DIR);
  LOGGER.info(""String_Node_Str"" + response);
  if (response != null || !response.isEmpty()) {
    return response;
  }
  responseAppender=responseAppender.append(getHadoopHomeDirPath(config)).append(File.separator).append(CONF_DIR);
  return responseAppender.toString();
}","@Override public String getHadoopConfDirPath(YamlConfig config){
  StringBuilder responseAppender=new StringBuilder();
  String response=RemotingUtil.executeCommand(config,ECHO_HADOOP_CONF_DIR);
  LOGGER.info(""String_Node_Str"" + response);
  if (response != null && !response.trim().isEmpty()) {
    return response;
  }
  responseAppender=responseAppender.append(getHadoopHomeDirPath(config)).append(File.separator).append(CONF_DIR);
  return responseAppender.toString();
}",0.9883103081827844
130225,"@Override public String getHadoopConfDirPath(YamlConfig config){
  String possibleDirList=RemotingUtil.executeCommand(config,WHEREIS_HADOOP);
  checkEmptyDir(possibleDirList);
  String[] splittedDirList=possibleDirList.split(""String_Node_Str"");
  String absoluteDirPath=null;
  for (int index=1; index < splittedDirList.length; index++) {
    absoluteDirPath=getAbsoluteConfDirPath(splittedDirList[index],config);
    if (absoluteDirPath != null && !absoluteDirPath.isEmpty()) {
      break;
    }
  }
  absoluteDirPath=absoluteDirPath.trim();
  checkEmptyDir(absoluteDirPath);
  return absoluteDirPath;
}","@Override public String getHadoopConfDirPath(YamlConfig config){
  String absoluteDirPath=null;
  absoluteDirPath=getAbsoluteConfDirPath(expectedConf,config);
  if (absoluteDirPath == null || absoluteDirPath.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + expectedConf);
  }
  LOGGER.debug(""String_Node_Str"" + absoluteDirPath);
  absoluteDirPath=absoluteDirPath.trim();
  checkEmptyDir(absoluteDirPath);
  return absoluteDirPath;
}",0.1849056603773584
130226,"private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  if (response != null || !response.isEmpty()) {
    result=response.substring((response.indexOf(""String_Node_Str"") + 1),response.length());
  }
  result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  return result;
}","private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  if (response != null && !response.isEmpty() && response.indexOf(""String_Node_Str"") != -1) {
    result=response.substring((response.indexOf(""String_Node_Str"") + 1),response.length());
    result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  }
  LOGGER.debug(""String_Node_Str"" + result);
  if (result != null) {
    String recursiveResponse=getAbsoluteConfDirPath(result,config);
    if (recursiveResponse != null) {
      result=recursiveResponse;
    }
  }
  return result;
}",0.6391608391608392
130227,"private void checkEmptyDir(String possibleDirList){
  if (possibleDirList == null || possibleDirList.isEmpty()) {
    throw new IllegalArgumentException(error_message);
  }
}","private boolean checkEmptyDir(String possibleDirList){
  if (possibleDirList == null || possibleDirList.isEmpty()) {
    return true;
  }
  return false;
}",0.7659574468085106
130228,"/** 
 * Gets the job counter beans.
 * @return the job counter beans
 */
public static List<JobCounterBean> getJobCounterBeans(){
  return jobCounterBeans;
}","/** 
 * Gets the job counter beans.
 * @return the job counter beans
 */
public List<JobCounterBean> getJobCounterBeans(){
  return jobCounterBeans;
}",0.977198697068404
130229,"/** 
 * Fetch cluster configuration properties.
 * @param loader the loader
 * @return the string
 */
private static String fetchClusterConfigurationProperties(Loader loader){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String expectedLocation=new StringBuilder().append(YamlLoader.getjHome()).append(File.separator).append(Constants.JOB_JARS_LOC).append(yamlLoader.getJumbuneJobName()).append(""String_Node_Str"").toString();
  File file=new File(expectedLocation);
  if (!file.exists() || file.isDirectory()) {
    Master master=yamlLoader.getMasterInfo();
    Remoter remoter=new Remoter(master.getHost(),Integer.valueOf(master.getAgentPort()));
    String relativePath=File.separator + Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relativePath,""String_Node_Str"");
  }
  return expectedLocation;
}","/** 
 * Fetch cluster configuration properties.
 * @param loader the loader
 * @return the string
 */
private String fetchClusterConfigurationProperties(Loader loader){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String expectedLocation=new StringBuilder().append(YamlLoader.getjHome()).append(File.separator).append(Constants.JOB_JARS_LOC).append(yamlLoader.getJumbuneJobName()).append(""String_Node_Str"").toString();
  File file=new File(expectedLocation);
  if (!file.exists() || file.isDirectory()) {
    Master master=yamlLoader.getMasterInfo();
    Remoter remoter=new Remoter(master.getHost(),Integer.valueOf(master.getAgentPort()));
    String relativePath=File.separator + Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relativePath,""String_Node_Str"");
  }
  return expectedLocation;
}",0.99581589958159
130230,"/** 
 * Process exception condition.
 * @param processName the process name
 * @param map the map
 * @param reader the reader
 * @param jobName the job name
 * @param line the line
 * @throws IOException Signals that an I/O exception has occurred.
 */
private static void processExceptionCondition(String processName,Map<String,String> map,BufferedReader reader,String jobName,String line) throws IOException {
  LOGGER.error(""String_Node_Str"" + line);
  map.put(ERRORANDEXCEPTION,line);
  while (true) {
    String lineTmp=line;
    lineTmp=reader.readLine();
    if (lineTmp == null) {
      break;
    }
    LOGGER.error(lineTmp);
  }
  JobCounterBean jobCounterBean=new JobCounterBean();
  jobCounterBean.setProcessName(processName);
  jobCounterBean.setJobName(jobName);
  jobCounterBean.setJobStatsMap(map);
  jobCounterBeans.add(jobCounterBean);
}","/** 
 * Process exception condition.
 * @param processName the process name
 * @param map the map
 * @param reader the reader
 * @param jobName the job name
 * @param line the line
 * @throws IOException Signals that an I/O exception has occurred.
 */
private void processExceptionCondition(String processName,Map<String,String> map,BufferedReader reader,String jobName,String line) throws IOException {
  LOGGER.error(""String_Node_Str"" + line);
  map.put(ERRORANDEXCEPTION,line);
  while (true) {
    String lineTmp=line;
    lineTmp=reader.readLine();
    if (lineTmp == null) {
      break;
    }
    LOGGER.error(lineTmp);
  }
  JobCounterBean jobCounterBean=new JobCounterBean();
  jobCounterBean.setProcessName(processName);
  jobCounterBean.setJobName(jobName);
  jobCounterBean.setJobStatsMap(map);
  jobCounterBeans.add(jobCounterBean);
}",0.9958847736625516
130231,"/** 
 * Sets the job counter map.
 * @param processName the process name
 * @param response the response
 * @param loader the loader
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static void setJobCounterBeans(String processName,String response,Loader loader) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<String> jobs=new LinkedList<String>();
  Map<String,String> map=null;
  BufferedReader reader=new BufferedReader(new StringReader(response));
  String line=null;
  String jobName=null;
  boolean isYarnJob=false;
  JobCounterBean jobCounterBean=new JobCounterBean();
  isYarnJob=FileUtil.getPropertyFromFile(fetchClusterConfigurationProperties(loader),HADOOP_TYPE).equalsIgnoreCase(""String_Node_Str"");
  while (true) {
    line=reader.readLine();
    if (line == null) {
      break;
    }
    map=new HashMap<String,String>();
    if (line.contains(RUNNING_JOB)) {
      jobName=line.split(RUNNING_JOB)[1];
      jobs.add(jobName);
    }
 else     if (line.contains(COUNTERS)) {
      int count=new Integer(line.split(COUNTERS)[1].trim());
      while (count > 0) {
        line=reader.readLine();
        if (line == null) {
          break;
        }
        if (line.contains(""String_Node_Str"")) {
          String[] counterDetail=null;
          if (isYarnJob) {
            counterDetail=line.split(""String_Node_Str"");
          }
 else {
            counterDetail=line.split(MAPRED_JOBCLIENT)[1].split(""String_Node_Str"");
          }
          map.put(counterDetail[0].trim(),counterDetail[1].trim());
          count--;
        }
      }
      jobCounterBean.setProcessName(processName);
      jobCounterBean.setJobName(jobName);
      jobCounterBean.setJobStatsMap(map);
      jobCounterBeans.add(jobCounterBean);
      jobName=null;
    }
 else     if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
      processExceptionCondition(processName,map,reader,jobName,line);
    }
  }
  if (reader != null) {
    reader.close();
  }
}","/** 
 * Sets the job counter map.
 * @param processName the process name
 * @param response the response
 * @param loader the loader
 * @throws IOException Signals that an I/O exception has occurred.
 */
public void setJobCounterBeans(String processName,String response,Loader loader) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<String> jobs=new LinkedList<String>();
  Map<String,String> map=null;
  BufferedReader reader=new BufferedReader(new StringReader(response));
  String line=null;
  String jobName=null;
  boolean isYarnJob=false;
  JobCounterBean jobCounterBean=new JobCounterBean();
  isYarnJob=FileUtil.getPropertyFromFile(fetchClusterConfigurationProperties(loader),HADOOP_TYPE).equalsIgnoreCase(""String_Node_Str"");
  while (true) {
    line=reader.readLine();
    if (line == null) {
      break;
    }
    map=new HashMap<String,String>();
    if (line.contains(RUNNING_JOB)) {
      jobName=line.split(RUNNING_JOB)[1];
      jobs.add(jobName);
    }
 else     if (line.contains(COUNTERS)) {
      int count=new Integer(line.split(COUNTERS)[1].trim());
      while (count > 0) {
        line=reader.readLine();
        if (line == null) {
          break;
        }
        if (line.contains(""String_Node_Str"")) {
          String[] counterDetail=null;
          if (isYarnJob) {
            counterDetail=line.split(""String_Node_Str"");
          }
 else {
            counterDetail=line.split(MAPRED_JOBCLIENT)[1].split(""String_Node_Str"");
          }
          map.put(counterDetail[0].trim(),counterDetail[1].trim());
          count--;
        }
      }
      jobCounterBean.setProcessName(processName);
      jobCounterBean.setJobName(jobName);
      jobCounterBean.setJobStatsMap(map);
      jobCounterBeans.add(jobCounterBean);
      jobName=null;
    }
 else     if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
      processExceptionCondition(processName,map,reader,jobName,line);
    }
  }
  if (reader != null) {
    reader.close();
  }
}",0.9982703236965652
130232,"/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=HadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(JobCounterBean.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(JobCounterBean.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}","/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader,HadoopJobCounters hadoopJobCounters) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=hadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}",0.9932960893854748
130233,"@Override protected boolean execute(Map<Parameters,String> params) throws JumbuneException {
  String debugAnalyserReport=null;
  Map<String,String> report=null;
  try {
    LOGGER.info(""String_Node_Str"");
    YamlLoader yamlLoader=(YamlLoader)super.getLoader();
    YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
    yamlConfig.getDebuggerConf().getLogLevel().put(""String_Node_Str"",LogLevel.TRUE);
    yamlConfig.getDebuggerConf().setMaxIfBlockNestingLevel(2);
    String instrumentedJarPath=yamlLoader.getInstrumentOutputFile();
    String locationOfLogFiles=yamlLoader.getLogMaster().getLocation();
    Instrumenter instrumenter=new JarInstrumenter(super.getLoader());
    instrumenter.instrumentJar();
    processHelper.executeJar(instrumentedJarPath,super.isCommandBased(),super.getLoader(),true);
    if (yamlConfig.getSlaves() != null && yamlConfig.getSlaves().size() > 0) {
      RemoteFileUtil remoteFileUtil=new RemoteFileUtil();
      remoteFileUtil.copyDBLogFilesToMaster(yamlLoader.getLogDefinition());
    }
    LogAnalyzerUtil logUtil=new LogAnalyzerUtil(yamlLoader.getLogProcessMaxThreads());
    LOGGER.debug(""String_Node_Str"" + locationOfLogFiles + ""String_Node_Str"");
    debugAnalyserReport=logUtil.processLogs(locationOfLogFiles,yamlLoader.isInstrumentEnabled(""String_Node_Str""),super.getLoader());
  }
 catch (  IOException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(e);
    throw JumbuneRuntimeException.throwUnresponsiveIOException(e.getStackTrace());
  }
catch (  InterruptedException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  ExecutionException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  Exception e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
 finally {
    report=super.getReports().getReport(CommunityModule.DEBUG_ANALYSER);
    report.put(Constants.DEBUG_ANALYZER,debugAnalyserReport);
    super.getReports().setCompleted(CommunityModule.DEBUG_ANALYSER);
    LOGGER.info(""String_Node_Str"");
    return true;
  }
}","@Override protected boolean execute(Map<Parameters,String> params) throws JumbuneException {
  String debugAnalyserReport=null;
  Map<String,String> report=null;
  try {
    LOGGER.info(""String_Node_Str"");
    YamlLoader yamlLoader=(YamlLoader)super.getLoader();
    YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
    yamlConfig.getDebuggerConf().getLogLevel().put(""String_Node_Str"",LogLevel.TRUE);
    yamlConfig.getDebuggerConf().setMaxIfBlockNestingLevel(2);
    String instrumentedJarPath=yamlLoader.getInstrumentOutputFile();
    String locationOfLogFiles=yamlLoader.getLogMaster().getLocation();
    Instrumenter instrumenter=new JarInstrumenter(super.getLoader());
    instrumenter.instrumentJar();
    processHelper.executeJar(instrumentedJarPath,super.isCommandBased(),super.getLoader(),true);
    if (yamlConfig.getSlaves() != null && yamlConfig.getSlaves().size() > 0) {
      RemoteFileUtil remoteFileUtil=new RemoteFileUtil();
      remoteFileUtil.copyDBLogFilesToMaster(yamlLoader.getLogDefinition());
    }
    LogAnalyzerUtil logUtil=new LogAnalyzerUtil(yamlLoader.getLogProcessMaxThreads());
    LOGGER.debug(""String_Node_Str"" + locationOfLogFiles + ""String_Node_Str"");
    debugAnalyserReport=logUtil.processLogs(locationOfLogFiles,yamlLoader.isInstrumentEnabled(""String_Node_Str""),super.getLoader(),processHelper.getHadoopJobCounters());
  }
 catch (  IOException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(e);
    throw JumbuneRuntimeException.throwUnresponsiveIOException(e.getStackTrace());
  }
catch (  InterruptedException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  ExecutionException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  Exception e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
 finally {
    report=super.getReports().getReport(CommunityModule.DEBUG_ANALYSER);
    report.put(Constants.DEBUG_ANALYZER,debugAnalyserReport);
    super.getReports().setCompleted(CommunityModule.DEBUG_ANALYSER);
    LOGGER.info(""String_Node_Str"");
    return true;
  }
}",0.9925327951564076
130234,"/** 
 * <p> </p>
 * @param bean Job process bean
 * @param jobCounterMap Existing map
 * @param yamlLoader
 * @param isDebugged
 * @throws IOException
 */
private void populateJobCounterMap(JobProcessBean bean,Map<String,Map<String,String>> jobCounterMap,Loader loader,Boolean isDebugged) throws IOException {
  if (isYarnJob) {
    jobCounterMap.putAll(getRemoteYarnJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
 else {
    jobCounterMap.putAll(getRemoteJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
  HadoopJobCounters.setJobCounterBeans(bean.getJobName(),bean.getProcessResponse(),loader);
}","/** 
 * <p> </p>
 * @param bean Job process bean
 * @param jobCounterMap Existing map
 * @param yamlLoader
 * @param isDebugged
 * @throws IOException
 */
private void populateJobCounterMap(JobProcessBean bean,Map<String,Map<String,String>> jobCounterMap,Loader loader,Boolean isDebugged) throws IOException {
  if (isYarnJob) {
    jobCounterMap.putAll(getRemoteYarnJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
 else {
    jobCounterMap.putAll(getRemoteJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
  hadoopJobCounters=new HadoopJobCounters();
  hadoopJobCounters.setJobCounterBeans(bean.getJobName(),bean.getProcessResponse(),loader);
}",0.9672250546249088
130235,"@SuppressWarnings(""String_Node_Str"") @Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  super.service(request,response);
  Config config=null;
  HttpReportsBean reports=new HttpReportsBean();
  HttpSession session=request.getSession();
  LOG.info(""String_Node_Str"");
  HadoopJobCounters.getJobCounterBeans().clear();
  try {
    HttpExecutorService service=new HttpExecutorService();
    if (ServletFileUpload.isMultipartContent(request)) {
      config=saveUsersResources(request);
      YamlConfig yamlConfig=(YamlConfig)config;
      saveJsonToJumbuneHome(yamlConfig);
      String agentHome=RemotingUtil.getAgentHome(yamlConfig);
      WebUtil util=new WebUtil();
      ClasspathElement cse=ConfigurationUtil.loadJumbuneSuppliedJarList();
      processClassPathElement(cse,agentHome);
      yamlConfig.getClasspath().setJumbuneSupplied(cse);
      String jarFilePath=YamlLoader.getjHome() + ""String_Node_Str"" + Constants.JOB_JARS_LOC+ yamlConfig.getFormattedJumbuneJobName()+ Constants.MR_RESOURCES;
      checkAndSendMrJobJarOnAgent(yamlConfig,jarFilePath);
      LOG.debug(""String_Node_Str"" + yamlConfig + ""String_Node_Str"");
      modifyDebugParameters(yamlConfig);
      modifyProfilingParameters(yamlConfig);
      setInputFileInConfig(yamlConfig);
      session.setAttribute(REPORTS_BEAN,reports);
      request.setAttribute(STATS_INTERVAL,Constants.TEN_THOUSAND);
      String tabs=util.getTabsInformation(yamlConfig);
      request.setAttribute(JOB_NAME,yamlConfig.getJumbuneJobName());
      Loader loader=service.runInSeperateThread(yamlConfig,reports);
      session.setAttribute(""String_Node_Str"",service);
      setClusterProfilingAttributes(request,yamlConfig,loader);
      session.setAttribute(LOADER,loader);
      request.setAttribute(JOB_JSON,this.jsonString);
      request.setAttribute(TABS,tabs);
      final RequestDispatcher rd=getServletContext().getRequestDispatcher(WebConstants.RESULT_URL);
      rd.forward(request,response);
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
 catch (  JumbuneException htfException) {
    throw new ServletException(htfException);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new ServletException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  super.service(request,response);
  Config config=null;
  HttpReportsBean reports=new HttpReportsBean();
  HttpSession session=request.getSession();
  LOG.info(""String_Node_Str"");
  try {
    HttpExecutorService service=new HttpExecutorService();
    if (ServletFileUpload.isMultipartContent(request)) {
      config=saveUsersResources(request);
      YamlConfig yamlConfig=(YamlConfig)config;
      saveJsonToJumbuneHome(yamlConfig);
      String agentHome=RemotingUtil.getAgentHome(yamlConfig);
      WebUtil util=new WebUtil();
      ClasspathElement cse=ConfigurationUtil.loadJumbuneSuppliedJarList();
      processClassPathElement(cse,agentHome);
      yamlConfig.getClasspath().setJumbuneSupplied(cse);
      String jarFilePath=YamlLoader.getjHome() + ""String_Node_Str"" + Constants.JOB_JARS_LOC+ yamlConfig.getFormattedJumbuneJobName()+ Constants.MR_RESOURCES;
      checkAndSendMrJobJarOnAgent(yamlConfig,jarFilePath);
      LOG.debug(""String_Node_Str"" + yamlConfig + ""String_Node_Str"");
      modifyDebugParameters(yamlConfig);
      modifyProfilingParameters(yamlConfig);
      setInputFileInConfig(yamlConfig);
      session.setAttribute(REPORTS_BEAN,reports);
      request.setAttribute(STATS_INTERVAL,Constants.TEN_THOUSAND);
      String tabs=util.getTabsInformation(yamlConfig);
      request.setAttribute(JOB_NAME,yamlConfig.getJumbuneJobName());
      Loader loader=service.runInSeperateThread(yamlConfig,reports);
      session.setAttribute(""String_Node_Str"",service);
      setClusterProfilingAttributes(request,yamlConfig,loader);
      session.setAttribute(LOADER,loader);
      request.setAttribute(JOB_JSON,this.jsonString);
      request.setAttribute(TABS,tabs);
      final RequestDispatcher rd=getServletContext().getRequestDispatcher(WebConstants.RESULT_URL);
      rd.forward(request,response);
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
 catch (  JumbuneException htfException) {
    throw new ServletException(htfException);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new ServletException(e);
  }
}",0.9889673433362752
130236,"/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}","/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}",0.964074579354252
130237,"/** 
 * * create object of ErrorMessageLoader class if it is not instantiated otherwise returns already used object this method load message file as an input stream.
 * @return single instance of ErrorMessageLoader
 */
public static ErrorMessageLoader getInstance(){
  if (instance == null) {
    final String messageFileName=INPUT_VALIDATION_MESSAGE_FILE;
    final InputStream msgStream=ErrorMessageLoader.class.getClassLoader().getResourceAsStream(messageFileName);
    try {
      instance=new ErrorMessageLoader(msgStream);
    }
 catch (    JumbuneException e) {
      LOGGER.error(e);
    }
 finally {
      try {
        if (msgStream != null) {
          msgStream.close();
        }
      }
 catch (      IOException e) {
        LOGGER.error(e.getMessage());
      }
    }
  }
  return instance;
}","/** 
 * * create object of ErrorMessageLoader class if it is not instantiated otherwise returns already used object this method load message file as an input stream.
 * @return single instance of ErrorMessageLoader
 */
public static ErrorMessageLoader getInstance(){
  if (instance == null) {
    final String messageFileName=inputValidationMessageFile;
    final InputStream msgStream=ErrorMessageLoader.class.getClassLoader().getResourceAsStream(messageFileName);
    try {
      instance=new ErrorMessageLoader(msgStream);
    }
 catch (    JumbuneException e) {
      LOGGER.error(e);
    }
 finally {
      try {
        if (msgStream != null) {
          msgStream.close();
        }
      }
 catch (      IOException e) {
        LOGGER.error(e.getMessage());
      }
    }
  }
  return instance;
}",0.9696218226906386
130238,"/** 
 * Checks if is atleast one module enabled.
 * @param config the config
 * @return true, if is atleast one module enabled
 */
private boolean isAtleastOneModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  boolean isProfiling=isProfilingModuleEnabled(config);
  if (isEnable(yamlConfig.getEnableDataValidation()) || isEnable(yamlConfig.getHadoopJobProfile()) || isEnable(yamlConfig.getDebugAnalysis())|| isProfiling) {
    result=true;
  }
  return result;
}","/** 
 * Checks if is atleast one module enabled.
 * @param config the config
 * @return true, if is atleast one module enabled
 */
protected boolean isAtleastOneModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  boolean isProfiling=isProfilingModuleEnabled(config);
  if (isEnable(yamlConfig.getEnableDataValidation()) || isEnable(yamlConfig.getHadoopJobProfile()) || isEnable(yamlConfig.getDebugAnalysis())|| isProfiling) {
    result=true;
  }
  return result;
}",0.98828125
130239,"/** 
 * Checks if  profiling module enabled.
 * @param config the config
 * @return true, if profiling module is enabled
 */
private boolean isProfilingModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  if (isEnable(yamlConfig.getEnableStaticJobProfiling())) {
    result=true;
  }
  return result;
}","/** 
 * Checks if  profiling module enabled.
 * @param config the config
 * @return true, if profiling module is enabled
 */
protected boolean isProfilingModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  if (isEnable(yamlConfig.getEnableStaticJobProfiling())) {
    result=true;
  }
  return result;
}",0.9828571428571428
130240,"/** 
 * Generate the list of files and make them into DataValidationFileSplit.
 * @param job the job
 * @return the splits
 * @throws IOException Signals that an I/O exception has occurred.
 */
@Override public List<InputSplit> getSplits(JobContext job) throws IOException {
  long minSize=Math.max(getFormatMinSplitSize(),getMinSplitSize(job));
  long maxSize=getMaxSplitSize(job);
  List<InputSplit> splits=new ArrayList<InputSplit>();
  for (  FileStatus file : listStatus(job)) {
    generateSplits(job,minSize,maxSize,splits,file);
  }
  LOGGER.debug(""String_Node_Str"" + splits.size());
  return splits;
}","/** 
 * Generate the list of files and make them into DataValidationFileSplit.
 * @param job the job
 * @return the splits
 * @throws IOException Signals that an I/O exception has occurred.
 */
@Override public List<InputSplit> getSplits(JobContext job) throws IOException {
  long minSize=Math.max(getFormatMinSplitSize(),getMinSplitSize(job));
  long maxSize=getMaxSplitSize(job);
  List<InputSplit> splits=new ArrayList<InputSplit>();
  setData(job,minSize,maxSize,splits,listStatus(job));
  LOGGER.debug(""String_Node_Str"" + splits.size());
  return splits;
}",0.9215017064846416
130241,"@SuppressWarnings(""String_Node_Str"") protected void setup(Mapper.Context context) throws IOException, InterruptedException {
  String dvBeanString=context.getConfiguration().get(DataValidationConstants.DATA_VALIDATION_BEAN_STRING);
  Gson gson=new Gson();
  Type type=new TypeToken<DataValidationBean>(){
  }
.getType();
  DataValidationBean dataValidationBean=gson.fromJson(dvBeanString,type);
  fieldSeparator=dataValidationBean.getFieldSeparator();
  fieldSeparator=fieldSeparator.replaceAll(Constants.SPACE_SEPARATOR,Constants.SPACE);
  fieldValidationList=dataValidationBean.getFieldValidationList();
  expectedNumOfFields=dataValidationBean.getNumOfFields();
  InputSplit is=context.getInputSplit();
  if (is instanceof DataValidationFileSplit) {
    fileName=((DataValidationFileSplit)is).getPath().getName();
  }
}","@SuppressWarnings(""String_Node_Str"") protected void setup(Mapper.Context context) throws IOException, InterruptedException {
  String dvBeanString=context.getConfiguration().get(DataValidationConstants.DATA_VALIDATION_BEAN_STRING);
  Gson gson=new Gson();
  Type type=new TypeToken<DataValidationBean>(){
  }
.getType();
  DataValidationBean dataValidationBean=gson.fromJson(dvBeanString,type);
  fieldSeparator=dataValidationBean.getFieldSeparator();
  fieldSeparator=fieldSeparator.replaceAll(Constants.SPACE_SEPARATOR,Constants.SPACE);
  fieldValidationList=dataValidationBean.getFieldValidationList();
  expectedNumOfFields=dataValidationBean.getNumOfFields();
  InputSplit is=context.getInputSplit();
  if (is instanceof DataValidationFileSplit) {
    fileName=((DataValidationFileSplit)is).getPath().toUri().getPath();
    fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"").substring(1,fileName.length());
  }
}",0.9327251995438997
130242,"@Override public String toString(){
  return ""String_Node_Str"" + distributedHDFSPath + ""String_Node_Str""+ master+ ""String_Node_Str""+ slaves+ ""String_Node_Str""+ hadoopJobProfile+ ""String_Node_Str""+ enableYarn+ ""String_Node_Str""+ enableDataValidation+ ""String_Node_Str""+ debugAnalysis+ ""String_Node_Str""+ enableStaticJobProfiling+ ""String_Node_Str""+ profilingParams+ ""String_Node_Str""+ jobs+ ""String_Node_Str""+ includeClassJar+ ""String_Node_Str""+ inputFile+ ""String_Node_Str""+ doNotInstrument+ ""String_Node_Str""+ Arrays.toString(mapperSuperClasses)+ ""String_Node_Str""+ Arrays.toString(reducerSuperClasses)+ ""String_Node_Str""+ debuggerConf+ ""String_Node_Str""+ classpath+ ""String_Node_Str""+ regexValidations+ ""String_Node_Str""+ userValidations+ ""String_Node_Str""+ partitionerSampleInterval+ ""String_Node_Str""+ sJumbuneHome+ ""String_Node_Str""+ hdfsInputPath+ ""String_Node_Str""+ dataValidation+ ""String_Node_Str""+ jumbuneJobName+ ""String_Node_Str""+ slaveParam+ ""String_Node_Str""+ runJobFromJumbune+ ""String_Node_Str""+ existingJobName+ ""String_Node_Str""+ isLocalSystemJar+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + distributedHDFSPath + ""String_Node_Str""+ master+ ""String_Node_Str""+ slaves+ ""String_Node_Str""+ hadoopJobProfile+ ""String_Node_Str""+ enableYarn+ ""String_Node_Str""+ enableDataValidation+ ""String_Node_Str""+ debugAnalysis+ ""String_Node_Str""+ enableStaticJobProfiling+ ""String_Node_Str""+ profilingParams+ ""String_Node_Str""+ jobs+ ""String_Node_Str""+ includeClassJar+ ""String_Node_Str""+ inputFile+ ""String_Node_Str""+ doNotInstrument+ ""String_Node_Str""+ Arrays.toString(mapperSuperClasses)+ ""String_Node_Str""+ Arrays.toString(reducerSuperClasses)+ ""String_Node_Str""+ debuggerConf+ ""String_Node_Str""+ classpath+ ""String_Node_Str""+ logKeyValues+ ""String_Node_Str""+ regexValidations+ ""String_Node_Str""+ userValidations+ ""String_Node_Str""+ partitionerSampleInterval+ ""String_Node_Str""+ sJumbuneHome+ ""String_Node_Str""+ hdfsInputPath+ ""String_Node_Str""+ dataValidation+ ""String_Node_Str""+ jumbuneJobName+ ""String_Node_Str""+ slaveParam+ ""String_Node_Str""+ runJobFromJumbune+ ""String_Node_Str""+ existingJobName+ ""String_Node_Str""+ isLocalSystemJar+ ""String_Node_Str"";
}",0.9850340136054422
130243,"/** 
 * * this method validate the inputs of debugging in jumbune.In web UI this field is in Debug Analysis tab
 * @param config the config
 */
private void validateDebugField(Config config){
  YamlLoader yamlLoader=new YamlLoader(config);
  Map<String,String> failedDebug=new HashMap<String,String>();
  Map<String,String> suggestionDebug=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INSTR_REGEX_KEY)) {
    if (!yamlConfig.getRegexValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getRegexValidations(),ErrorMessages.DEBUG_REGEX_CLASS_INVALID,ErrorMessages.DEBUG_REGEX_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_REGEX_VALIDATION_EMPTY));
    }
  }
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INST_USER_KEY)) {
    if (!yamlConfig.getUserValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getUserValidations(),ErrorMessages.DEBUG_INST_REGEX_INVALID,ErrorMessages.DEBUG_INST_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_USERDEFINE_VALIDATION_EMPTY));
    }
  }
  addToValidationList(Constants.DEBUGGER_VALIDATION,failedDebug,suggestionDebug);
}","/** 
 * * this method validate the inputs of debugging in jumbune.In web UI this field is in Debug Analysis tab
 * @param config the config
 */
private void validateDebugField(Config config){
  YamlLoader yamlLoader=new YamlLoader(config);
  Map<String,String> failedDebug=new HashMap<String,String>();
  Map<String,String> suggestionDebug=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (!ifDebuggerValidationsEnabled(config)) {
    failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.BOTH_DEBUGGER_VALIDATIONS_NULL));
  }
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INSTR_REGEX_KEY)) {
    if (!yamlConfig.getRegexValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getRegexValidations(),ErrorMessages.DEBUG_REGEX_CLASS_INVALID,ErrorMessages.DEBUG_REGEX_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_REGEX_VALIDATION_EMPTY));
    }
  }
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INST_USER_KEY)) {
    if (!yamlConfig.getUserValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getUserValidations(),ErrorMessages.DEBUG_INST_REGEX_INVALID,ErrorMessages.DEBUG_INST_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_USERDEFINE_VALIDATION_EMPTY));
    }
  }
  addToValidationList(Constants.DEBUGGER_VALIDATION,failedDebug,suggestionDebug);
}",0.945326278659612
130244,"/** 
 * Gets the value by job name and property.
 * @param jobList the job list
 * @param jobName the job name
 * @param property the property
 * @return the value by job name and property
 */
public String getValueByJobNameAndProperty(List<JobCounterBean> jobList,String jobName,String property){
  for (  JobCounterBean bean : jobList) {
    if (bean.getJobName().equalsIgnoreCase(jobName)) {
      return bean.getJobStatsMap().get(property);
    }
  }
  return null;
}","/** 
 * Gets the value by job name and property.
 * @param jobList the job list
 * @param jobName the job name
 * @param property the property
 * @return the value by job name and property
 */
public String getValueByJobNameAndProperty(String jobName,String property){
  for (  JobCounterBean bean : jobCounterBeans) {
    if (bean.getJobName().equalsIgnoreCase(jobName)) {
      return bean.getJobStatsMap().get(property);
    }
  }
  return null;
}",0.6384364820846905
130245,"/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader,HadoopJobCounters hadoopJobCounters) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=hadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}","/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader,HadoopJobCounters hadoopJobCounters) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=hadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}",0.9964285714285714
130246,"/** 
 * This method is called to get job parameters.
 * @param jobDef
 * @param inputJarPath
 * @param isMainClassDefined Is main class defined in jar manifest
 * @return List<String>
 */
private List<String> getJobExecutionParams(String hadoopHome,JobDefinition jobDef,String inputJarPath,boolean isMainClassDefined,String jobName){
  List<String> jobExeParaList=new ArrayList<String>();
  jobExeParaList.add(hadoopHome + YamlLoader.getHadoopCommand());
  jobExeParaList.add(YamlLoader.getHadoopCommandType());
  jobExeParaList.add(inputJarPath);
  if (!isMainClassDefined) {
    jobExeParaList.add(jobDef.getJobClass());
  }
  jobExeParaList.add(Constants.LIB_JARS);
  String jarNames=addUserSuppliedDependencyJars(jobName);
  jobExeParaList.add(hadoopHome + Constants.LOG4J2_API_JAR + ""String_Node_Str""+ hadoopHome+ Constants.LOG4J2_CORE_JAR+ jarNames);
  if (jobDef.getParameters() != null) {
    populateJobExecParamList(jobDef,jobExeParaList);
  }
  return jobExeParaList;
}","/** 
 * This method is called to get job parameters.
 * @param jobDef
 * @param inputJarPath
 * @param isMainClassDefined Is main class defined in jar manifest
 * @return List<String>
 */
private List<String> getJobExecutionParams(String hadoopHome,JobDefinition jobDef,String inputJarPath,boolean isMainClassDefined,String jobName){
  List<String> jobExeParaList=new ArrayList<String>();
  jobExeParaList.add(hadoopHome + YamlLoader.getHadoopCommand());
  jobExeParaList.add(YamlLoader.getHadoopCommandType());
  jobExeParaList.add(inputJarPath);
  if (!isMainClassDefined) {
    jobExeParaList.add(jobDef.getJobClass());
  }
  jobExeParaList.add(Constants.LIB_JARS);
  String jarNames=addUserSuppliedDependencyJars(jobName);
  jobExeParaList.add(""String_Node_Str"" + Constants.LOG4J2_API_JAR + ""String_Node_Str""+ Constants.LOG4J2_CORE_JAR+ jarNames);
  if (jobDef.getParameters() != null) {
    populateJobExecParamList(jobDef,jobExeParaList);
  }
  return jobExeParaList;
}",0.9800511508951406
130247,"/** 
 * @return all contour points in this area, without repetition.
 */
public MPointDouble[] getPoints(){
  RedBlackBST<MPointDouble,Boolean> bst=new RedBlackBST<MPointDouble,Boolean>();
  ArrayList<MPointDouble> points=new ArrayList<MPointDouble>();
  for (PathIterator pi=this.getPathIterator(null); !pi.isDone(); pi.next()) {
    double[] coordinates=new double[6];
    int type=pi.currentSegment(coordinates);
    if (type != PathIterator.SEG_CLOSE) {
      MPointDouble p=new MPointDouble(coordinates[0],coordinates[1]);
      if (!bst.contains(p)) {
        points.add(p);
        bst.put(p,true);
      }
    }
  }
  MPointDouble[] res=points.toArray(new MPointDouble[0]);
  return res;
}","/** 
 * @return all contour points in this area, without repetition.
 */
public MPointDouble[] getPoints(){
  ArrayList<MPointDouble> points=new ArrayList<MPointDouble>();
  for (PathIterator pi=this.getPathIterator(null); !pi.isDone(); pi.next()) {
    double[] coordinates=new double[6];
    int type=pi.currentSegment(coordinates);
    if (type != PathIterator.SEG_CLOSE) {
      MPointDouble p=new MPointDouble(coordinates[0],coordinates[1]);
      points.add(p);
    }
  }
  MPointDouble[] res=points.toArray(new MPointDouble[0]);
  return res;
}",0.7467948717948718
130248,"public static void main(String[] args){
  if (args.length < 0) {
    printUsage();
  }
 else {
    try {
      String command=args[0];
      launch(command);
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
      System.out.println(""String_Node_Str"");
      printFileSpecifications();
    }
  }
}","public static void main(String[] args){
  if (args.length < 1) {
    printUsage();
  }
 else {
    try {
      String command=args[0];
      launch(command);
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      e.printStackTrace();
      System.out.println(""String_Node_Str"");
      printFileSpecifications();
    }
  }
}",0.9974937343358397
130249,"private static void getHadoopConfigurationFromUser(HadoopConfigurationPropertyLoader hcpl) throws IOException {
  String hadoopHome;
  String hadoopType;
  String distributionType;
  Properties prop=new Properties();
  prop.load(JumbuneAgent.class.getClassLoader().getResourceAsStream(DISTRIBUTION_PROPERTIES));
  hadoopType=prop.getProperty(HADOOP_DISTRIBUTION);
  if (hadoopType.equalsIgnoreCase(YARN)) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(H) && !distributionType.equalsIgnoreCase(C))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(M))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
  hadoopHome=System.getenv(""String_Node_Str"");
  String promptedHadoopHome;
  if (hadoopHome != null && !""String_Node_Str"".equals(hadoopHome.trim())) {
    CONSOLE_LOGGER.info(""String_Node_Str"" + hadoopHome + ""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=hadoopHome;
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=""String_Node_Str"";
    }
  }
  hadoopHome=validateHadoopHome(promptedHadoopHome);
  hcpl.setHadoopHome(hadoopHome);
  hcpl.setDistributionType(distributionType);
  hcpl.setHadoopType(hadoopType);
  CONSOLE_LOGGER.info(""String_Node_Str"");
  String hasSeparateUsers=SCANNER.nextLine().trim();
  while (!(""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers) || ""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers))) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hasSeparateUsers=SCANNER.nextLine().trim();
  }
  String hdfsUser;
  String yarnUser;
  String mapredUser;
  String hdfsPasswd=null;
  String yarnPasswd=null;
  String mapredPasswd=null;
  if (""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers)) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=""String_Node_Str"";
      yarnUser=""String_Node_Str"";
      mapredUser=""String_Node_Str"";
    }
 else {
      mapredUser=yarnUser=hdfsUser;
    }
    hdfsPasswd=promptPassword(hdfsUser);
    mapredPasswd=yarnPasswd=hdfsPasswd;
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=""String_Node_Str"";
    }
    hdfsPasswd=promptPassword(hdfsUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    yarnUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(yarnUser)) {
      yarnUser=""String_Node_Str"";
    }
    yarnPasswd=promptPassword(yarnUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    mapredUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(mapredUser)) {
      mapredUser=""String_Node_Str"";
    }
    mapredPasswd=promptPassword(mapredUser);
  }
  hcpl.setYarnUser(yarnUser);
  hcpl.setYarnPasswd(yarnPasswd);
  hcpl.setHdfsUser(hdfsUser);
  hcpl.setHdfsPasswd(hdfsPasswd);
  hcpl.setMapredUser(mapredUser);
  hcpl.setMapredPasswd(mapredPasswd);
  hcpl.persistPropertiesToDisk();
}","private static void getHadoopConfigurationFromUser(HadoopConfigurationPropertyLoader hcpl) throws IOException {
  String hadoopHome;
  String hadoopType;
  String distributionType;
  Properties prop=new Properties();
  prop.load(JumbuneAgent.class.getClassLoader().getResourceAsStream(DISTRIBUTION_PROPERTIES));
  hadoopType=prop.getProperty(HADOOP_DISTRIBUTION);
  if (hadoopType.equalsIgnoreCase(YARN)) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(H) && !distributionType.equalsIgnoreCase(C))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    distributionType=SCANNER.nextLine().trim();
    while (distributionType.isEmpty() || (!distributionType.equalsIgnoreCase(A) && !distributionType.equalsIgnoreCase(M))) {
      CONSOLE_LOGGER.info(""String_Node_Str"");
      distributionType=SCANNER.nextLine().trim();
    }
  }
  hadoopHome=System.getenv(""String_Node_Str"");
  String promptedHadoopHome;
  if (hadoopHome != null && !""String_Node_Str"".equals(hadoopHome.trim())) {
    CONSOLE_LOGGER.info(""String_Node_Str"" + hadoopHome + ""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=hadoopHome;
    }
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    promptedHadoopHome=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(promptedHadoopHome)) {
      promptedHadoopHome=""String_Node_Str"";
    }
  }
  hadoopHome=validateHadoopHome(promptedHadoopHome);
  hcpl.setHadoopHome(hadoopHome);
  hcpl.setDistributionType(distributionType);
  hcpl.setHadoopType(hadoopType);
  String currentWorkingUser=System.getProperty(""String_Node_Str"");
  CONSOLE_LOGGER.info(""String_Node_Str"");
  String hasSeparateUsers=SCANNER.nextLine().trim();
  while (!(""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers) || ""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers))) {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hasSeparateUsers=SCANNER.nextLine().trim();
  }
  String hdfsUser;
  String yarnUser;
  String mapredUser;
  String hdfsPasswd=null;
  String yarnPasswd=null;
  String mapredPasswd=null;
  if (""String_Node_Str"".equalsIgnoreCase(hasSeparateUsers)) {
    CONSOLE_LOGGER.info(""String_Node_Str"" + currentWorkingUser + ""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=currentWorkingUser;
      yarnUser=currentWorkingUser;
      mapredUser=currentWorkingUser;
    }
 else {
      mapredUser=yarnUser=hdfsUser;
    }
    hdfsPasswd=promptPassword(hdfsUser);
    mapredPasswd=yarnPasswd=hdfsPasswd;
  }
 else {
    CONSOLE_LOGGER.info(""String_Node_Str"");
    hdfsUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(hdfsUser)) {
      hdfsUser=""String_Node_Str"";
    }
    hdfsPasswd=promptPassword(hdfsUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    yarnUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(yarnUser)) {
      yarnUser=""String_Node_Str"";
    }
    yarnPasswd=promptPassword(yarnUser);
    CONSOLE_LOGGER.info(""String_Node_Str"");
    mapredUser=SCANNER.nextLine().trim();
    if (""String_Node_Str"".equals(mapredUser)) {
      mapredUser=""String_Node_Str"";
    }
    mapredPasswd=promptPassword(mapredUser);
  }
  hcpl.setYarnUser(yarnUser);
  hcpl.setYarnPasswd(yarnPasswd);
  hcpl.setHdfsUser(hdfsUser);
  hcpl.setHdfsPasswd(hdfsPasswd);
  hcpl.setMapredUser(mapredUser);
  hcpl.setMapredPasswd(mapredPasswd);
  hcpl.persistPropertiesToDisk();
}",0.9712123259899986
130250,"/** 
 * Gets the job details.
 * @param yamlLoader the loader
 * @param jobID the job id
 * @return the job details
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws ClassNotFoundException 
 */
public JobOutput getJobDetails(Loader loader,String jobID) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  String appHome=yamlLoader.getjHome() + File.separator;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  String agentHome=RemotingUtil.getAgentHome(yamlConfig);
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
  String logsHistory=null;
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String user=yamlConfig.getMaster().getUser();
  logsHistory=changeLogHistoryPathAccToHadoopVersion(HADOOP_HOME,hadoopVersion,user);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  boolean isYarn=yamlConfig.getEnableYarn().equals(Enable.TRUE);
  String logfilePath=null;
  String relLocalPath=null;
  if (!isYarn) {
    logfilePath=getLogFilePath(jobID,remoter,logsHistory,builder);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    String relRemotePath=relLocalPath + RUMEN;
    StringBuilder stringAppender=new StringBuilder(agentHome);
    stringAppender.append(File.separator).append(relRemotePath).append(File.separator);
    String pathToRumenDir=stringAppender.toString();
    String jsonFilepath=pathToRumenDir + JSON_FILE;
    String topologyFilePath=pathToRumenDir + TOPOLOGY_FILE;
    builder.getCommandBatch().clear();
    builder.addCommand(MKDIR_CMD + pathToRumenDir,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    String remoteHadoopLib=HADOOP_HOME + LIB;
    Properties props=loadHadoopJarConfigurationProperties();
    String coreJar;
    if (SupportedHadoopDistributions.HADOOP_NON_YARN.equals(hadoopVersion)) {
      coreJar=HADOOP_HOME + props.getProperty(""String_Node_Str"");
    }
 else {
      coreJar=HADOOP_HOME + WILDCARD;
    }
    String commonsLoggingJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsCliJar=remoteHadoopLib + props.getProperty(""String_Node_Str"");
    String commonsConfigurationJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsLangJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperAslJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperCoreJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String rumenJar=agentHome + LIB + props.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Versioning.BUILD_VERSION+ Versioning.DISTRIBUTION_NAME+ ""String_Node_Str"";
    StringBuilder sb=new StringBuilder(JAVA_CP_CMD);
    checkHadoopVersionsForRumen(hadoopVersion,logfilePath,jsonFilepath,topologyFilePath,coreJar,commonsLoggingJar,commonsCliJar,commonsConfigurationJar,commonsLangJar,jacksonMapperAslJar,jacksonMapperCoreJar,rumenJar,sb);
    LOGGER.debug(""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
    startRumenProcessing(remoter,relLocalPath,relRemotePath,sb);
    remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
    remoter.receiveLogFiles(relLocalPath,relRemotePath);
    LOGGER.debug(""String_Node_Str"" + relRemotePath);
    Gson gson=new Gson();
    JobDetails jobDetails=extractJobDetails(appHome,relLocalPath,gson);
    return convertToFinalOutput(jobDetails);
  }
 else {
    String relativeRemotePath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName() + File.separator+ jobID;
    String remotePath=agentHome + relativeRemotePath;
    builder.addCommand(MKDIR_CMD + remotePath,false,null,CommandType.FS);
    builder.addCommand(CHMOD_CMD + remotePath,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    checkAndgetCurrentLogFilePathForYarn(remoter,logsHistory,yamlLoader.getYamlConfiguration(),agentHome,remotePath,jobID);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relLocalPath,relativeRemotePath);
    String absolutePath=appHome + relLocalPath + jobID+ File.separator;
    String fileName=checkAndGetHistFile(absolutePath);
    String localPath=absolutePath + fileName;
    java.lang.reflect.Method method=null;
    Class<?> yarnJobStatsUtility=null;
    try {
      yarnJobStatsUtility=Class.forName(YARN_JOB_STATS_UTILITY_CLASS);
      method=yarnJobStatsUtility.getDeclaredMethod(YARN_JOB_STATS_UTILITY_CLASS_PARSE_METHOD,String.class);
      return (JobOutput)method.invoke(yarnJobStatsUtility.newInstance(),localPath);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e.getCause());
    }
  }
  return null;
}","/** 
 * Gets the job details.
 * @param yamlLoader the loader
 * @param jobID the job id
 * @return the job details
 * @throws IOException Signals that an I/O exception has occurred.
 * @throws ClassNotFoundException 
 */
public JobOutput getJobDetails(Loader loader,String jobID) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  String appHome=yamlLoader.getjHome() + File.separator;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  String agentHome=RemotingUtil.getAgentHome(yamlConfig);
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
  String logsHistory=null;
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String user=yamlConfig.getMaster().getUser();
  logsHistory=changeLogHistoryPathAccToHadoopVersion(HADOOP_HOME,hadoopVersion,user);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  boolean isYarn=yamlConfig.getEnableYarn().equals(Enable.TRUE);
  String logfilePath=null;
  String relLocalPath=null;
  if (!isYarn) {
    logfilePath=getLogFilePath(jobID,remoter,logsHistory,builder);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    String relRemotePath=relLocalPath + RUMEN;
    StringBuilder stringAppender=new StringBuilder(agentHome);
    stringAppender.append(File.separator).append(relRemotePath).append(File.separator);
    String pathToRumenDir=stringAppender.toString();
    String jsonFilepath=pathToRumenDir + JSON_FILE;
    String topologyFilePath=pathToRumenDir + TOPOLOGY_FILE;
    builder.getCommandBatch().clear();
    builder.addCommand(MKDIR_CMD + pathToRumenDir,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    String remoteHadoopLib=HADOOP_HOME + LIB;
    Properties props=loadHadoopJarConfigurationProperties();
    String coreJar;
    if (SupportedHadoopDistributions.HADOOP_NON_YARN.equals(hadoopVersion)) {
      coreJar=HADOOP_HOME + props.getProperty(""String_Node_Str"");
    }
 else {
      coreJar=HADOOP_HOME + WILDCARD;
    }
    String commonsLoggingJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsCliJar=remoteHadoopLib + props.getProperty(""String_Node_Str"");
    String commonsConfigurationJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String commonsLangJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperAslJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String jacksonMapperCoreJar=agentHome + LIB + props.getProperty(""String_Node_Str"");
    String rumenJar=agentHome + LIB + props.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ Versioning.BUILD_VERSION+ Versioning.DISTRIBUTION_NAME+ ""String_Node_Str"";
    StringBuilder sb=new StringBuilder(JAVA_CP_CMD);
    checkHadoopVersionsForRumen(hadoopVersion,logfilePath,jsonFilepath,topologyFilePath,coreJar,commonsLoggingJar,commonsCliJar,commonsConfigurationJar,commonsLangJar,jacksonMapperAslJar,jacksonMapperCoreJar,rumenJar,sb);
    LOGGER.debug(""String_Node_Str"" + sb.toString() + ""String_Node_Str"");
    startRumenProcessing(remoter,relLocalPath,relRemotePath,sb);
    remoter=RemotingUtil.getRemoter(yamlLoader,appHome);
    remoter.receiveLogFiles(relLocalPath,relRemotePath);
    LOGGER.debug(""String_Node_Str"" + relRemotePath);
    Gson gson=new Gson();
    JobDetails jobDetails=extractJobDetails(appHome,relLocalPath,gson);
    return convertToFinalOutput(jobDetails);
  }
 else {
    String relativeRemotePath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName() + File.separator+ jobID;
    String remotePath=agentHome + relativeRemotePath;
    builder.addCommand(MKDIR_CMD + remotePath,false,null,CommandType.FS);
    builder.addCommand(CHMOD_CMD + remotePath,false,null,CommandType.FS);
    remoter.fireAndForgetCommand(builder.getCommandWritable());
    checkAndgetCurrentLogFilePathForYarn(remoter,logsHistory,yamlLoader.getYamlConfiguration(),agentHome,remotePath,jobID);
    relLocalPath=Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relLocalPath,relativeRemotePath);
    String absolutePath=appHome + relLocalPath + jobID+ File.separator;
    String fileName=checkAndGetHistFile(absolutePath);
    String localPath=absolutePath + fileName;
    java.lang.reflect.Method method=null;
    Class<?> yarnJobStatsUtility=null;
    try {
      yarnJobStatsUtility=Class.forName(YARN_JOB_STATS_UTILITY_CLASS);
      method=yarnJobStatsUtility.getDeclaredMethod(YARN_JOB_STATS_UTILITY_CLASS_PARSE_METHOD,String.class);
      return (JobOutput)method.invoke(yarnJobStatsUtility.newInstance(),localPath);
    }
 catch (    Exception e) {
      LOGGER.error(""String_Node_Str"",e);
    }
  }
  return null;
}",0.9988412514484356
130251,"public static String copyAndGetHadoopConfigurationFilePath(String remoteAbsolutePath,Loader loader){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String jumbuneHome=yamlLoader.getjHome();
  String dirInJumbuneHome=jumbuneHome + File.separator + Constants.JOB_JARS_LOC+ yamlLoader.getJumbuneJobName();
  File dir=new File(dirInJumbuneHome);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  String jumbuneJobName=yamlLoader.getJumbuneJobName() + File.separator;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  jumbuneHome=new String(jumbuneHome + File.separator);
  String destinationReceiveDir=jumbuneHome + Constants.JOB_JARS_LOC + jumbuneJobName;
  Remoter remoter=getRemoter(yamlConfig,""String_Node_Str"");
  String copyCommand=new StringBuilder().append(""String_Node_Str"").append(remoteAbsolutePath).append(""String_Node_Str"").append(getAgentHome(yamlConfig)).append(""String_Node_Str"").append(jumbuneJobName).toString();
  CommandWritableBuilder builder=new CommandWritableBuilder();
  builder.addCommand(MAKE_JOBJARS_DIR_ON_AGENT + jumbuneJobName,false,null,CommandType.FS).addCommand(copyCommand,false,null,CommandType.FS);
  remoter.fireAndForgetCommand(builder.getCommandWritable());
  String fileName=remoteAbsolutePath.substring(remoteAbsolutePath.lastIndexOf(File.separator) + 1);
  remoter.receiveLogFiles(File.separator + Constants.JOB_JARS_LOC + jumbuneJobName,File.separator + Constants.JOB_JARS_LOC + jumbuneJobName+ fileName);
  return destinationReceiveDir + File.separator + fileName;
}","/** 
 * * This method returns the absoluate path of a given configuration file on the remote HADOOP machine. This expects that the given configuration file name to be correct and the file resides in <HADOOP_HOME>/conf directory.
 * @param loader the loader
 * @param hadoopConfigurationFile which we wants to receive the path of.
 * @return the string
 */
@Deprecated public static String copyAndGetHadoopConfigurationFilePath(Loader loader,String hadoopConfigurationFile){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String jumbuneHome=yamlLoader.getjHome();
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  String jumbuneJobName=yamlLoader.getJumbuneJobName() + File.separator;
  String dirInJumbuneHome=jumbuneHome + File.separator + Constants.JOB_JARS_LOC+ yamlLoader.getJumbuneJobName();
  File dir=new File(dirInJumbuneHome);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  HadoopDistributionLocator hadoopUtility=getDistributionLocator(getHadoopVersion(yamlConfig));
  String hadoopConfDir=hadoopUtility.getHadoopConfDirPath(yamlConfig);
  jumbuneHome=new String(jumbuneHome + File.separator);
  String destinationReceiveDir=jumbuneHome + Constants.JOB_JARS_LOC + jumbuneJobName;
  Remoter remoter=getRemoter(yamlConfig,jumbuneHome);
  String copyCommand=new StringBuilder().append(""String_Node_Str"").append(hadoopConfDir).append(hadoopConfigurationFile).append(""String_Node_Str"").append(getAgentHome(yamlConfig)).append(""String_Node_Str"").append(jumbuneJobName).toString();
  CommandWritableBuilder builder=new CommandWritableBuilder();
  builder.addCommand(MAKE_JOBJARS_DIR_ON_AGENT + jumbuneJobName,false,null,CommandType.FS).addCommand(copyCommand,false,null,CommandType.FS);
  remoter.fireAndForgetCommand(builder.getCommandWritable());
  remoter.receiveLogFiles(File.separator + Constants.JOB_JARS_LOC + jumbuneJobName,File.separator + Constants.JOB_JARS_LOC + jumbuneJobName+ hadoopConfigurationFile);
  return destinationReceiveDir;
}",0.648
130252,"/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}","/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      LOGGER.debug(""String_Node_Str"");
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}",0.7023863124718596
130253,"/** 
 * * This method retrieves out a Hadoop configuration parameters value. User has to specify appropriate Hadoop configuration file and configuration name. This method assumes that given configuration file is present in HADOOP_HOME/conf directory.
 * @param loader the loader
 * @param hadoopConfigurationFile configuration file in Hadoop configuration directory
 * @param configurationToGet Hadoop configuration parameter.
 * @return configuration value.
 */
public static String getHadoopConfigurationValue(Loader loader,String hadoopConfigurationFile,String configurationToGet){
  String destinationReceiveDir=copyAndGetHadoopConfigurationFilePath(loader,hadoopConfigurationFile);
  return parseConfiguration(destinationReceiveDir + ""String_Node_Str"" + hadoopConfigurationFile,configurationToGet);
}","/** 
 * * This method retrieves out a Hadoop configuration parameters value. User has to specify appropriate Hadoop configuration file and configuration name. This method assumes that given configuration file is present in HADOOP_HOME/conf directory.
 * @param loader the loader
 * @param hadoopConfigurationFile configuration file in Hadoop configuration directory
 * @param configurationToGet Hadoop configuration parameter.
 * @return configuration value.
 */
public static String getHadoopConfigurationValue(Loader loader,String hadoopConfigurationFile,String configurationToGet){
  String hadoopConfDir=RemotingUtil.getHadoopConfigurationDirPath(loader);
  String destinationReceiveDir=copyAndGetConfigurationFilePath(loader,hadoopConfDir,hadoopConfigurationFile);
  return parseConfiguration(destinationReceiveDir + ""String_Node_Str"" + hadoopConfigurationFile,configurationToGet);
}",0.9438865918487892
130254,"private void setMemPhaseResourceUsage(List<TaskOutputDetails> taskDetails,Map<Long,IntervalStats> statsMap,JobOutput jobOutput,String jobID,PhaseType phase) throws UnknownHostException {
  IntervalStats intervalStats;
  List<Float> cpuPer;
  List<Float> memPer;
  float maxPhaseMem=0;
  float totalPhaseCpu=0;
  int interval=0;
  Map<NodeSystemStats,Float> memStatsMap=new HashMap<NodeSystemStats,Float>();
  int minStartPoint=-1, maxEndPoint=0;
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,null);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  String remoteHadoop=RemotingUtil.getHadoopHome(remoter,yamlConfig) + File.separator;
  String user=yamlConfig.getMaster().getUser();
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String logsHistory=changeLogHistoryPathAccToHadoopVersion(remoteHadoop,hadoopVersion,user);
  String command=jobID + RemotingConstants.SINGLE_SPACE + logsHistory;
  builder.addCommand(command,false,null,CommandType.FS).setApiInvokeHints(ApiInvokeHintsEnum.GET_HADOOP_CONFIG);
  String configFilePath=(String)remoter.fireCommandAndGetObjectResponse(builder.getCommandWritable());
  String destinationReceiveDir=RemotingUtil.copyAndGetHadoopConfigurationFilePath(configFilePath,loader);
  for (  TaskOutputDetails tod : taskDetails) {
    String location=convertHostNameToIP(tod.getLocation());
    float mem=tod.getResourceUsageMetrics().getPhysicalMemoryUsage();
    minStartPoint=setMinStartPoint(minStartPoint,tod.getStartPoint());
    long start=minStartPoint;
    maxEndPoint=setMaxEndPoint(maxEndPoint,tod.getEndPoint());
    long end=maxEndPoint;
    long startPt=Math.max(start,DELAY_INTERVAL);
    float memoryStats=0.0f;
    String jvmChildOpts=null;
    if (PhaseType.REDUCE.equals(phase)) {
      jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      }
    }
 else {
      jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(destinationReceiveDir,""String_Node_Str"");
      }
    }
    if (jvmChildOpts != null) {
      int childOptsVal=ConfigurationUtil.getJavaOptsinMB(jvmChildOpts);
      memoryStats=((mem / (childOptsVal * 1024 * 1024)) * 100);
      int avg=(int)(tod.getEndPoint() - startPt) / 2;
      interval=(int)(avg + startPt);
      maxPhaseMem=setMaxPhaseMemory(memoryStats,maxPhaseMem);
    }
  }
  if (statsMap.containsKey(interval)) {
    intervalStats=statsMap.get(interval);
    cpuPer=intervalStats.getCpuStats();
    memPer=intervalStats.getMemStats();
  }
 else {
    intervalStats=new IntervalStats();
    cpuPer=new ArrayList<Float>();
    memPer=new ArrayList<Float>();
  }
  setIntervalStats(statsMap,0.0f,maxPhaseMem,intervalStats,cpuPer,memPer,interval);
}","private void setMemPhaseResourceUsage(List<TaskOutputDetails> taskDetails,Map<Long,IntervalStats> statsMap,JobOutput jobOutput,String jobID,PhaseType phase) throws UnknownHostException {
  IntervalStats intervalStats;
  List<Float> cpuPer;
  List<Float> memPer;
  float maxPhaseMem=0;
  float totalPhaseCpu=0;
  int interval=0;
  Map<NodeSystemStats,Float> memStatsMap=new HashMap<NodeSystemStats,Float>();
  int minStartPoint=-1, maxEndPoint=0;
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  Remoter remoter=RemotingUtil.getRemoter(yamlLoader,null);
  CommandWritableBuilder builder=new CommandWritableBuilder();
  String remoteHadoop=RemotingUtil.getHadoopHome(remoter,yamlConfig) + File.separator;
  String user=yamlConfig.getMaster().getUser();
  SupportedHadoopDistributions hadoopVersion=RemotingUtil.getHadoopVersion(yamlConfig);
  String logsHistory=changeLogHistoryPathAccToHadoopVersion(remoteHadoop,hadoopVersion,user);
  String command=jobID + RemotingConstants.SINGLE_SPACE + logsHistory;
  builder.addCommand(command,false,null,CommandType.FS).setApiInvokeHints(ApiInvokeHintsEnum.GET_HADOOP_CONFIG);
  String configFilePath=(String)remoter.fireCommandAndGetObjectResponse(builder.getCommandWritable());
  String fileName=configFilePath.substring(configFilePath.lastIndexOf(File.separator) + 1);
  configFilePath=configFilePath.substring(0,configFilePath.lastIndexOf(File.separator) + 1);
  String configurationFilePath=RemotingUtil.copyAndGetConfigurationFilePath(loader,configFilePath,fileName) + File.separator + fileName;
  for (  TaskOutputDetails tod : taskDetails) {
    String location=convertHostNameToIP(tod.getLocation());
    float mem=tod.getResourceUsageMetrics().getPhysicalMemoryUsage();
    minStartPoint=setMinStartPoint(minStartPoint,tod.getStartPoint());
    long start=minStartPoint;
    maxEndPoint=setMaxEndPoint(maxEndPoint,tod.getEndPoint());
    long end=maxEndPoint;
    long startPt=Math.max(start,DELAY_INTERVAL);
    float memoryStats=0.0f;
    String jvmChildOpts=null;
    if (PhaseType.REDUCE.equals(phase)) {
      jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      }
    }
 else {
      jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      if (jvmChildOpts == null) {
        jvmChildOpts=RemotingUtil.parseConfiguration(configurationFilePath,""String_Node_Str"");
      }
    }
    if (jvmChildOpts != null) {
      int childOptsVal=ConfigurationUtil.getJavaOptsinMB(jvmChildOpts);
      memoryStats=((mem / (childOptsVal * 1024 * 1024)) * 100);
      int avg=(int)(tod.getEndPoint() - startPt) / 2;
      interval=(int)(avg + startPt);
      maxPhaseMem=setMaxPhaseMemory(memoryStats,maxPhaseMem);
    }
  }
  if (statsMap.containsKey(interval)) {
    intervalStats=statsMap.get(interval);
    cpuPer=intervalStats.getCpuStats();
    memPer=intervalStats.getMemStats();
  }
 else {
    intervalStats=new IntervalStats();
    cpuPer=new ArrayList<Float>();
    memPer=new ArrayList<Float>();
  }
  setIntervalStats(statsMap,0.0f,maxPhaseMem,intervalStats,cpuPer,memPer,interval);
}",0.9309806371018112
130255,"/** 
 * Check mr job field.
 * @param config object of yamlConfig class
 * @param failedCasesList error list
 */
protected void checkMrJobField(Config config){
  Map<String,String> failedCases=new HashMap<String,String>();
  Map<String,String> suggetion=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (isEnable(yamlConfig.getEnableStaticJobProfiling()) || yamlConfig.getDebugAnalysis().getEnumValue()) {
    checkNullEmptyAndMessage(failedCases,yamlConfig.getInputFile(),ErrorMessages.BASIC_INPUT_PATH_EMPTY,""String_Node_Str"");
    validateJobs(config,failedCases,suggetion);
  }
  addToValidationList(Constants.JOBS_VALIDATION,failedCases,suggetion);
}","/** 
 * Check mr job field.
 * @param config object of yamlConfig class
 * @param failedCasesList error list
 */
protected void checkMrJobField(Config config){
  Map<String,String> failedCases=new HashMap<String,String>();
  Map<String,String> suggetion=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (!isEnable(yamlConfig.getEnableStaticJobProfiling()) || yamlConfig.getDebugAnalysis().getEnumValue()) {
    checkNullEmptyAndMessage(failedCases,yamlConfig.getInputFile(),ErrorMessages.BASIC_INPUT_PATH_EMPTY,""String_Node_Str"");
    validateJobs(config,failedCases,suggetion);
  }
  addToValidationList(Constants.JOBS_VALIDATION,failedCases,suggetion);
}",0.99927060539752
130256,"/** 
 * This method checks whether the jar location given corresponds to a valid jar file or not.
 * @param yamlConfig
 */
public void validateJarPath(YamlConfig yamlConfig){
  if (isEnable(yamlConfig.getDebugAnalysis()) || (isEnable(yamlConfig.getEnableStaticJobProfiling()) && isEnable(yamlConfig.getRunJobFromJumbune()))) {
    String inputFile=yamlConfig.getInputFile();
    Map<String,String> failedCases=new HashMap<String,String>();
    boolean isLocalSystemJar=isEnable(yamlConfig.getIsLocalSystemJar());
    if (inputFile != null) {
      boolean endsWithJar=inputFile.trim().endsWith(""String_Node_Str"");
      if ((((!endsWithJar || !new File(inputFile).exists()) && (!isLocalSystemJar)) || (isLocalSystemJar && !endsWithJar))) {
        failedCases.put(inputFile,errorMessages.get(ErrorMessages.SUPPLIED_JAR_INVALID));
        failedValidation.put(""String_Node_Str"",failedCases);
      }
    }
 else {
      failedCases.put(inputFile,errorMessages.get(ErrorMessages.SUPPLIED_JAR_INVALID));
      failedValidation.put(""String_Node_Str"",failedCases);
    }
  }
}","/** 
 * This method checks whether the jar location given corresponds to a valid jar file or not.
 * @param yamlConfig
 */
public void validateJarPath(YamlConfig yamlConfig){
  if (isEnable(yamlConfig.getDebugAnalysis()) || (isEnable(yamlConfig.getEnableStaticJobProfiling()) && isEnable(yamlConfig.getRunJobFromJumbune()))) {
    String inputFile=yamlConfig.getInputFile();
    Map<String,String> failedCases=new HashMap<String,String>();
    boolean isLocalSystemJar=isEnable(yamlConfig.getIsLocalSystemJar());
    if (inputFile != null) {
      boolean endsWithJar=inputFile.trim().endsWith(""String_Node_Str"");
      if ((((!endsWithJar || !new File(inputFile).exists()) && (!isLocalSystemJar)) || (isLocalSystemJar && !endsWithJar))) {
        failedCases.put(inputFile,errorMessages.get(ErrorMessages.SUPPLIED_JAR_INVALID));
        failedValidation.put(""String_Node_Str"",failedCases);
      }
    }
 else {
      failedCases.put(inputFile,errorMessages.get(ErrorMessages.BASIC_INPUT_PATH_EMPTY));
      failedValidation.put(""String_Node_Str"",failedCases);
    }
  }
}",0.9850746268656716
130257,"@Override public String getHadoopConfDirPath(YamlConfig config){
  StringBuilder responseAppender=new StringBuilder();
  String response=RemotingUtil.executeCommand(config,ECHO_HADOOP_CONF_DIR);
  LOGGER.info(""String_Node_Str"" + response);
  if (response != null || !response.isEmpty()) {
    return response;
  }
  responseAppender=responseAppender.append(getHadoopHomeDirPath(config)).append(File.separator).append(CONF_DIR);
  return responseAppender.toString();
}","@Override public String getHadoopConfDirPath(YamlConfig config){
  StringBuilder responseAppender=new StringBuilder();
  String response=RemotingUtil.executeCommand(config,ECHO_HADOOP_CONF_DIR);
  LOGGER.info(""String_Node_Str"" + response);
  if (response != null && !response.trim().isEmpty()) {
    return response;
  }
  responseAppender=responseAppender.append(getHadoopHomeDirPath(config)).append(File.separator).append(CONF_DIR);
  return responseAppender.toString();
}",0.9883103081827844
130258,"@Override public String getHadoopConfDirPath(YamlConfig config){
  String possibleDirList=RemotingUtil.executeCommand(config,WHEREIS_HADOOP);
  checkEmptyDir(possibleDirList);
  String[] splittedDirList=possibleDirList.split(""String_Node_Str"");
  String absoluteDirPath=null;
  for (int index=1; index < splittedDirList.length; index++) {
    absoluteDirPath=getAbsoluteConfDirPath(splittedDirList[index],config);
    if (absoluteDirPath != null && !absoluteDirPath.isEmpty()) {
      break;
    }
  }
  absoluteDirPath=absoluteDirPath.trim();
  checkEmptyDir(absoluteDirPath);
  return absoluteDirPath;
}","@Override public String getHadoopConfDirPath(YamlConfig config){
  String absoluteDirPath=null;
  absoluteDirPath=getAbsoluteConfDirPath(expectedConf,config);
  if (absoluteDirPath == null || absoluteDirPath.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"" + expectedConf);
  }
  LOGGER.debug(""String_Node_Str"" + absoluteDirPath);
  absoluteDirPath=absoluteDirPath.trim();
  checkEmptyDir(absoluteDirPath);
  return absoluteDirPath;
}",0.1849056603773584
130259,"private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  if (response != null || !response.isEmpty()) {
    result=response.substring((response.indexOf(""String_Node_Str"") + 1),response.length());
  }
  result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  return result;
}","private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  if (response != null && !response.isEmpty() && response.indexOf(""String_Node_Str"") != -1) {
    result=response.substring((response.indexOf(""String_Node_Str"") + 1),response.length());
    result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  }
  LOGGER.debug(""String_Node_Str"" + result);
  if (result != null) {
    String recursiveResponse=getAbsoluteConfDirPath(result,config);
    if (recursiveResponse != null) {
      result=recursiveResponse;
    }
  }
  return result;
}",0.6391608391608392
130260,"private void checkEmptyDir(String possibleDirList){
  if (possibleDirList == null || possibleDirList.isEmpty()) {
    throw new IllegalArgumentException(error_message);
  }
}","private boolean checkEmptyDir(String possibleDirList){
  if (possibleDirList == null || possibleDirList.isEmpty()) {
    return true;
  }
  return false;
}",0.7659574468085106
130261,"private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  if (response != null && !response.isEmpty() && response.indexOf(""String_Node_Str"") != -1) {
    result=response.substring((response.indexOf(""String_Node_Str"") + 1),response.length());
    result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  }
  LOGGER.debug(""String_Node_Str"" + result);
  if (result != null) {
    String recursiveResponse=getAbsoluteConfDirPath(result,config);
    if (recursiveResponse != null) {
      result=recursiveResponse;
    }
  }
  return result;
}","private String getAbsoluteConfDirPath(String dir,YamlConfig config){
  String result=null, response=null;
  if (dir == null || dir.trim().isEmpty() || !dir.contains(""String_Node_Str"")) {
    throw new IllegalArgumentException(error_message);
  }
  response=RemotingUtil.executeCommand(config,LS_PREFIX_PART + dir + LS_CDH_POSTFIX_PART);
  int responseIndex=response.indexOf(""String_Node_Str"");
  if (response != null && !response.isEmpty() && responseIndex != -1) {
    result=response.substring((responseIndex + 1),response.length());
    result=result.endsWith(File.separator) ? result : result.trim() + File.separator;
  }
  LOGGER.debug(""String_Node_Str"" + result);
  if (result != null) {
    String recursiveResponse=getAbsoluteConfDirPath(result,config);
    if (recursiveResponse != null) {
      result=recursiveResponse;
    }
  }
  return result;
}",0.93841642228739
130262,"/** 
 * This method is responsible for populating the clean up phase details.
 * @return TaskOutputDetails contains the details of the clean up phase.
 */
private PhaseDetails prepareCleanupDetails(JobInfo jobInfo,Map<TaskAttemptID,TaskAttemptInfo> tasks){
  PhaseDetails phaseDetails=new PhaseDetails();
  List<TaskOutputDetails> cleanupTaskOuptputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskType(""String_Node_Str"");
  taskOutputDetails.setTaskID(""String_Node_Str"");
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
    taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  }
  long startPoint=getMaxReduceTime(tasks,jobInfo.getSubmitTime());
  taskOutputDetails.setStartPoint(startPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getStartPoint());
  long endPoint=(jobInfo.getFinishTime() - jobInfo.getSubmitTime()) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getEndPoint());
  taskOutputDetails.setDataFlowRate(0);
  cleanupTaskOuptputDetails.add(taskOutputDetails);
  phaseDetails.setTaskOutputDetails(cleanupTaskOuptputDetails);
  phaseDetails.setAvgDataFlowRate(0);
  return phaseDetails;
}","/** 
 * This method is responsible for populating the clean up phase details.
 * @return TaskOutputDetails contains the details of the clean up phase.
 */
private PhaseDetails prepareCleanupDetails(JobInfo jobInfo,Map<TaskAttemptID,TaskAttemptInfo> tasks){
  PhaseDetails phaseDetails=new PhaseDetails();
  List<TaskOutputDetails> cleanupTaskOuptputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskType(""String_Node_Str"");
  taskOutputDetails.setTaskID(""String_Node_Str"");
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
    taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  }
  long startPoint=getMaxReduceTime(tasks,jobInfo.getSubmitTime());
  taskOutputDetails.setStartPoint(startPoint);
  long endPoint=(jobInfo.getFinishTime() - jobInfo.getSubmitTime()) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  taskOutputDetails.setDataFlowRate(0);
  cleanupTaskOuptputDetails.add(taskOutputDetails);
  phaseDetails.setTaskOutputDetails(cleanupTaskOuptputDetails);
  phaseDetails.setAvgDataFlowRate(0);
  return phaseDetails;
}",0.9480421686746988
130263,"/** 
 * @param jobInfo contains the details of the job.
 * @param additionalJobInfo contains the cpuusage,memory usage and task type details.
 * @return the job output containing the details of each phase.
 */
@SuppressWarnings(""String_Node_Str"") private JobOutput getJobOutput(JobInfo jobInfo){
  JobOutput jobOutput=new JobOutput();
  jobOutput.setJobID(jobInfo.getJobId().toString());
  jobOutput.setJobName(jobInfo.getJobname());
  jobOutput.setUser(jobInfo.getUsername());
  jobOutput.setOutcome(jobInfo.getJobStatus());
  long referencedZeroTime=jobInfo.getSubmitTime();
  long startTime=jobInfo.getSubmitTime();
  long finishTime=jobInfo.getFinishTime();
  long timeInMilliSec=(finishTime - startTime);
  long totalTimeInSecs=timeInMilliSec / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  jobOutput.setTotalTime(totalTimeInSecs);
  LOGGER.info(""String_Node_Str"" + jobOutput.getTotalTime());
  jobOutput.setTotalTimeInMilliSec(timeInMilliSec);
  PhaseOutput phaseOutput=new PhaseOutput();
  PhaseDetails mapPhaseDetails=new PhaseDetails();
  PhaseDetails reducePhaseDetails=new PhaseDetails();
  Map<TaskAttemptID,TaskAttemptInfo> tasks=jobInfo.getAllCompletedTaskAttempts();
  List<TaskOutputDetails> mapTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  List<TaskOutputDetails> reduceTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails mapTaskDetails=null;
  TaskOutputDetails reduceTaskDetails=null;
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    if (TaskType.MAP.equals(task.getKey().getTaskType())) {
      mapTaskDetails=addMapPhaseDetails(task,referencedZeroTime);
      mapTaskOutputDetails.add(mapTaskDetails);
    }
 else     if (TaskType.REDUCE.equals(task.getKey().getTaskType())) {
      reduceTaskDetails=addReducePhaseDetails(task,referencedZeroTime);
      reduceTaskOutputDetails.add(reduceTaskDetails);
    }
  }
  mapPhaseDetails.setTaskOutputDetails(mapTaskOutputDetails);
  long mapDataFlowRate=calculateAvgDataFlow(mapTaskOutputDetails);
  mapPhaseDetails.setAvgDataFlowRate(mapDataFlowRate);
  phaseOutput.setMapDetails(mapPhaseDetails);
  reducePhaseDetails.setTaskOutputDetails(reduceTaskOutputDetails);
  long reduceDataFlowRate=calculateAvgDataFlow(reduceTaskOutputDetails);
  reducePhaseDetails.setAvgDataFlowRate(reduceDataFlowRate);
  phaseOutput.setReduceDetails(reducePhaseDetails);
  PhaseDetails setupDetails=prepareSetupDetails(jobInfo,tasks);
  phaseOutput.setSetupDetails(setupDetails);
  PhaseDetails cleanupDetails=prepareCleanupDetails(jobInfo,tasks);
  phaseOutput.setCleanupDetails(cleanupDetails);
  jobOutput.setPhaseOutput(phaseOutput);
  return jobOutput;
}","/** 
 * @param jobInfo contains the details of the job.
 * @param additionalJobInfo contains the cpuusage,memory usage and task type details.
 * @return the job output containing the details of each phase.
 */
@SuppressWarnings(""String_Node_Str"") private JobOutput getJobOutput(JobInfo jobInfo){
  JobOutput jobOutput=new JobOutput();
  jobOutput.setJobID(jobInfo.getJobId().toString());
  jobOutput.setJobName(jobInfo.getJobname());
  jobOutput.setUser(jobInfo.getUsername());
  jobOutput.setOutcome(jobInfo.getJobStatus());
  long referencedZeroTime=jobInfo.getSubmitTime();
  long startTime=jobInfo.getSubmitTime();
  long finishTime=jobInfo.getFinishTime();
  long timeInMilliSec=(finishTime - startTime);
  long totalTimeInSecs=timeInMilliSec / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  jobOutput.setTotalTime(totalTimeInSecs);
  jobOutput.setTotalTimeInMilliSec(timeInMilliSec);
  PhaseOutput phaseOutput=new PhaseOutput();
  PhaseDetails mapPhaseDetails=new PhaseDetails();
  PhaseDetails reducePhaseDetails=new PhaseDetails();
  Map<TaskAttemptID,TaskAttemptInfo> tasks=jobInfo.getAllCompletedTaskAttempts();
  List<TaskOutputDetails> mapTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  List<TaskOutputDetails> reduceTaskOutputDetails=new ArrayList<TaskOutputDetails>();
  TaskOutputDetails mapTaskDetails=null;
  TaskOutputDetails reduceTaskDetails=null;
  for (  Map.Entry<TaskAttemptID,TaskAttemptInfo> task : tasks.entrySet()) {
    if (TaskType.MAP.equals(task.getKey().getTaskType())) {
      mapTaskDetails=addMapPhaseDetails(task,referencedZeroTime);
      mapTaskOutputDetails.add(mapTaskDetails);
    }
 else     if (TaskType.REDUCE.equals(task.getKey().getTaskType())) {
      reduceTaskDetails=addReducePhaseDetails(task,referencedZeroTime);
      reduceTaskOutputDetails.add(reduceTaskDetails);
    }
  }
  mapPhaseDetails.setTaskOutputDetails(mapTaskOutputDetails);
  long mapDataFlowRate=calculateAvgDataFlow(mapTaskOutputDetails);
  mapPhaseDetails.setAvgDataFlowRate(mapDataFlowRate);
  phaseOutput.setMapDetails(mapPhaseDetails);
  reducePhaseDetails.setTaskOutputDetails(reduceTaskOutputDetails);
  long reduceDataFlowRate=calculateAvgDataFlow(reduceTaskOutputDetails);
  reducePhaseDetails.setAvgDataFlowRate(reduceDataFlowRate);
  phaseOutput.setReduceDetails(reducePhaseDetails);
  PhaseDetails setupDetails=prepareSetupDetails(jobInfo,tasks);
  phaseOutput.setSetupDetails(setupDetails);
  PhaseDetails cleanupDetails=prepareCleanupDetails(jobInfo,tasks);
  phaseOutput.setCleanupDetails(cleanupDetails);
  jobOutput.setPhaseOutput(phaseOutput);
  return jobOutput;
}",0.9884140550807218
130264,"/** 
 * This method is responsible for populating the reduce phase details.
 * @return TaskOutputDetails contains the details of the reduce phase.
 */
private TaskOutputDetails addReducePhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter reduceOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputRecords(reduceOutputRecords.getValue());
  Counter reduceOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(reduceOutputBytes.getValue());
  long shuffleStartTime=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(shuffleStartTime);
  taskOutputDetails.setShuffleStart(shuffleStartTime);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getShuffleStart());
  long shuffleEnd=((taskAttemptInfo.getShuffleFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setShuffleEnd(shuffleEnd);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getShuffleEnd());
  taskOutputDetails.setSortStart(shuffleEnd);
  long sortEnd=(taskAttemptInfo.getSortFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setSortEnd(sortEnd);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getSortEnd());
  taskOutputDetails.setReduceStart(sortEnd);
  taskOutputDetails.setReduceEnd((taskAttemptInfo.getFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setEndPoint(taskOutputDetails.getReduceEnd());
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getReduceEnd());
  long dataFlowRate=reduceOutputBytes.getValue() / (taskOutputDetails.getReduceEnd() - shuffleStartTime);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  return taskOutputDetails;
}","/** 
 * This method is responsible for populating the reduce phase details.
 * @return TaskOutputDetails contains the details of the reduce phase.
 */
private TaskOutputDetails addReducePhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter reduceOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputRecords(reduceOutputRecords.getValue());
  Counter reduceOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(reduceOutputBytes.getValue());
  long shuffleStartTime=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(shuffleStartTime);
  taskOutputDetails.setShuffleStart(shuffleStartTime);
  long shuffleEnd=((taskAttemptInfo.getShuffleFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setShuffleEnd(shuffleEnd);
  taskOutputDetails.setSortStart(shuffleEnd);
  long sortEnd=(taskAttemptInfo.getSortFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setSortEnd(sortEnd);
  taskOutputDetails.setReduceStart(sortEnd);
  taskOutputDetails.setReduceEnd((taskAttemptInfo.getFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS);
  taskOutputDetails.setEndPoint(taskOutputDetails.getReduceEnd());
  long dataFlowRate=reduceOutputBytes.getValue() / (taskOutputDetails.getReduceEnd() - shuffleStartTime);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  return taskOutputDetails;
}",0.9450592885375494
130265,"/** 
 * Adds detail for a Map phase.
 * @param task2 
 * @param task2 the tasks
 * @param referencedZeroTime 
 * @param referencedZeroTime the start time
 * @param additionalJobInfo 
 * @return the phase details
 */
private TaskOutputDetails addMapPhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  long startPoint=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(startPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getStartPoint());
  long endPoint=(taskAttemptInfo.getMapFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getEndPoint());
  taskOutputDetails.setTimeTaken(endPoint - startPoint);
  LOGGER.info(""String_Node_Str"" + taskOutputDetails.getTimeTaken());
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup fileSystemCounters=counters.getGroup(""String_Node_Str"");
  Counter inputBytes=fileSystemCounters.findCounter(""String_Node_Str"");
  long dataFlowRate=inputBytes.getValue() / (endPoint - startPoint);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter mapOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  taskOutputDetails.setOutputRecords(mapOutputRecords.getValue());
  Counter mapOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(mapOutputBytes.getValue());
  return taskOutputDetails;
}","/** 
 * Adds detail for a Map phase.
 * @param task2 
 * @param task2 the tasks
 * @param referencedZeroTime 
 * @param referencedZeroTime the start time
 * @param additionalJobInfo 
 * @return the phase details
 */
private TaskOutputDetails addMapPhaseDetails(Entry<TaskAttemptID,TaskAttemptInfo> task,long referencedZeroTime){
  TaskAttemptInfo taskAttemptInfo=(TaskAttemptInfo)(task.getValue());
  TaskOutputDetails taskOutputDetails=new TaskOutputDetails();
  taskOutputDetails.setTaskStatus(taskAttemptInfo.getTaskStatus());
  taskOutputDetails.setTaskType(taskAttemptInfo.getTaskType().toString());
  taskOutputDetails.setTaskID(taskAttemptInfo.getAttemptId().getTaskID().toString());
  long startPoint=(taskAttemptInfo.getStartTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setStartPoint(startPoint);
  long endPoint=(taskAttemptInfo.getMapFinishTime() - referencedZeroTime) / CONVERSION_FACTOR_MILLISECS_TO_SECS;
  taskOutputDetails.setEndPoint(endPoint);
  taskOutputDetails.setTimeTaken(endPoint - startPoint);
  taskOutputDetails.setLocation(taskAttemptInfo.getHostname());
  Counters counters=taskAttemptInfo.getCounters();
  CounterGroup fileSystemCounters=counters.getGroup(""String_Node_Str"");
  Counter inputBytes=fileSystemCounters.findCounter(""String_Node_Str"");
  long dataFlowRate=inputBytes.getValue() / (endPoint - startPoint);
  taskOutputDetails.setDataFlowRate(dataFlowRate);
  CounterGroup mapReduceTaskCounters=counters.getGroup(""String_Node_Str"");
  Counter mapOutputRecords=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  Counter physicalMemoryBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  ResourceUsageMetrics rum=new ResourceUsageMetrics();
  rum.setPhysicalMemoryUsage(physicalMemoryBytes.getValue());
  taskOutputDetails.setResourceUsageMetrics(rum);
  taskOutputDetails.setOutputRecords(mapOutputRecords.getValue());
  Counter mapOutputBytes=mapReduceTaskCounters.findCounter(""String_Node_Str"");
  taskOutputDetails.setOutputBytes(mapOutputBytes.getValue());
  return taskOutputDetails;
}",0.9426809773920988
130266,"/** 
 * Gets the job counter beans.
 * @return the job counter beans
 */
public static List<JobCounterBean> getJobCounterBeans(){
  return jobCounterBeans;
}","/** 
 * Gets the job counter beans.
 * @return the job counter beans
 */
public List<JobCounterBean> getJobCounterBeans(){
  return jobCounterBeans;
}",0.977198697068404
130267,"/** 
 * Fetch cluster configuration properties.
 * @param loader the loader
 * @return the string
 */
private static String fetchClusterConfigurationProperties(Loader loader){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String expectedLocation=new StringBuilder().append(YamlLoader.getjHome()).append(File.separator).append(Constants.JOB_JARS_LOC).append(yamlLoader.getJumbuneJobName()).append(""String_Node_Str"").toString();
  File file=new File(expectedLocation);
  if (!file.exists() || file.isDirectory()) {
    Master master=yamlLoader.getMasterInfo();
    Remoter remoter=new Remoter(master.getHost(),Integer.valueOf(master.getAgentPort()));
    String relativePath=File.separator + Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relativePath,""String_Node_Str"");
  }
  return expectedLocation;
}","/** 
 * Fetch cluster configuration properties.
 * @param loader the loader
 * @return the string
 */
private String fetchClusterConfigurationProperties(Loader loader){
  YamlLoader yamlLoader=(YamlLoader)loader;
  String expectedLocation=new StringBuilder().append(YamlLoader.getjHome()).append(File.separator).append(Constants.JOB_JARS_LOC).append(yamlLoader.getJumbuneJobName()).append(""String_Node_Str"").toString();
  File file=new File(expectedLocation);
  if (!file.exists() || file.isDirectory()) {
    Master master=yamlLoader.getMasterInfo();
    Remoter remoter=new Remoter(master.getHost(),Integer.valueOf(master.getAgentPort()));
    String relativePath=File.separator + Constants.JOB_JARS_LOC + yamlLoader.getJumbuneJobName();
    remoter.receiveLogFiles(relativePath,""String_Node_Str"");
  }
  return expectedLocation;
}",0.99581589958159
130268,"/** 
 * Process exception condition.
 * @param processName the process name
 * @param map the map
 * @param reader the reader
 * @param jobName the job name
 * @param line the line
 * @throws IOException Signals that an I/O exception has occurred.
 */
private static void processExceptionCondition(String processName,Map<String,String> map,BufferedReader reader,String jobName,String line) throws IOException {
  LOGGER.error(""String_Node_Str"" + line);
  map.put(ERRORANDEXCEPTION,line);
  while (true) {
    String lineTmp=line;
    lineTmp=reader.readLine();
    if (lineTmp == null) {
      break;
    }
    LOGGER.error(lineTmp);
  }
  JobCounterBean jobCounterBean=new JobCounterBean();
  jobCounterBean.setProcessName(processName);
  jobCounterBean.setJobName(jobName);
  jobCounterBean.setJobStatsMap(map);
  jobCounterBeans.add(jobCounterBean);
}","/** 
 * Process exception condition.
 * @param processName the process name
 * @param map the map
 * @param reader the reader
 * @param jobName the job name
 * @param line the line
 * @throws IOException Signals that an I/O exception has occurred.
 */
private void processExceptionCondition(String processName,Map<String,String> map,BufferedReader reader,String jobName,String line) throws IOException {
  LOGGER.error(""String_Node_Str"" + line);
  map.put(ERRORANDEXCEPTION,line);
  while (true) {
    String lineTmp=line;
    lineTmp=reader.readLine();
    if (lineTmp == null) {
      break;
    }
    LOGGER.error(lineTmp);
  }
  JobCounterBean jobCounterBean=new JobCounterBean();
  jobCounterBean.setProcessName(processName);
  jobCounterBean.setJobName(jobName);
  jobCounterBean.setJobStatsMap(map);
  jobCounterBeans.add(jobCounterBean);
}",0.9958847736625516
130269,"/** 
 * Sets the job counter map.
 * @param processName the process name
 * @param response the response
 * @param loader the loader
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static void setJobCounterBeans(String processName,String response,Loader loader) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<String> jobs=new LinkedList<String>();
  Map<String,String> map=null;
  BufferedReader reader=new BufferedReader(new StringReader(response));
  String line=null;
  String jobName=null;
  boolean isYarnJob=false;
  JobCounterBean jobCounterBean=new JobCounterBean();
  isYarnJob=FileUtil.getPropertyFromFile(fetchClusterConfigurationProperties(loader),HADOOP_TYPE).equalsIgnoreCase(""String_Node_Str"");
  while (true) {
    line=reader.readLine();
    if (line == null) {
      break;
    }
    map=new HashMap<String,String>();
    if (line.contains(RUNNING_JOB)) {
      jobName=line.split(RUNNING_JOB)[1];
      jobs.add(jobName);
    }
 else     if (line.contains(COUNTERS)) {
      int count=new Integer(line.split(COUNTERS)[1].trim());
      while (count > 0) {
        line=reader.readLine();
        if (line == null) {
          break;
        }
        if (line.contains(""String_Node_Str"")) {
          String[] counterDetail=null;
          if (isYarnJob) {
            counterDetail=line.split(""String_Node_Str"");
          }
 else {
            counterDetail=line.split(MAPRED_JOBCLIENT)[1].split(""String_Node_Str"");
          }
          map.put(counterDetail[0].trim(),counterDetail[1].trim());
          count--;
        }
      }
      jobCounterBean.setProcessName(processName);
      jobCounterBean.setJobName(jobName);
      jobCounterBean.setJobStatsMap(map);
      jobCounterBeans.add(jobCounterBean);
      jobName=null;
    }
 else     if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
      processExceptionCondition(processName,map,reader,jobName,line);
    }
  }
  if (reader != null) {
    reader.close();
  }
}","/** 
 * Sets the job counter map.
 * @param processName the process name
 * @param response the response
 * @param loader the loader
 * @throws IOException Signals that an I/O exception has occurred.
 */
public void setJobCounterBeans(String processName,String response,Loader loader) throws IOException {
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<String> jobs=new LinkedList<String>();
  Map<String,String> map=null;
  BufferedReader reader=new BufferedReader(new StringReader(response));
  String line=null;
  String jobName=null;
  boolean isYarnJob=false;
  JobCounterBean jobCounterBean=new JobCounterBean();
  isYarnJob=FileUtil.getPropertyFromFile(fetchClusterConfigurationProperties(loader),HADOOP_TYPE).equalsIgnoreCase(""String_Node_Str"");
  while (true) {
    line=reader.readLine();
    if (line == null) {
      break;
    }
    map=new HashMap<String,String>();
    if (line.contains(RUNNING_JOB)) {
      jobName=line.split(RUNNING_JOB)[1];
      jobs.add(jobName);
    }
 else     if (line.contains(COUNTERS)) {
      int count=new Integer(line.split(COUNTERS)[1].trim());
      while (count > 0) {
        line=reader.readLine();
        if (line == null) {
          break;
        }
        if (line.contains(""String_Node_Str"")) {
          String[] counterDetail=null;
          if (isYarnJob) {
            counterDetail=line.split(""String_Node_Str"");
          }
 else {
            counterDetail=line.split(MAPRED_JOBCLIENT)[1].split(""String_Node_Str"");
          }
          map.put(counterDetail[0].trim(),counterDetail[1].trim());
          count--;
        }
      }
      jobCounterBean.setProcessName(processName);
      jobCounterBean.setJobName(jobName);
      jobCounterBean.setJobStatsMap(map);
      jobCounterBeans.add(jobCounterBean);
      jobName=null;
    }
 else     if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
      processExceptionCondition(processName,map,reader,jobName,line);
    }
  }
  if (reader != null) {
    reader.close();
  }
}",0.9982703236965652
130270,"/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=HadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(JobCounterBean.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(JobCounterBean.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}","/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader,HadoopJobCounters hadoopJobCounters) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=hadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}",0.9932960893854748
130271,"@Override protected boolean execute(Map<Parameters,String> params) throws JumbuneException {
  String debugAnalyserReport=null;
  Map<String,String> report=null;
  try {
    LOGGER.info(""String_Node_Str"");
    YamlLoader yamlLoader=(YamlLoader)super.getLoader();
    YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
    yamlConfig.getDebuggerConf().getLogLevel().put(""String_Node_Str"",LogLevel.TRUE);
    yamlConfig.getDebuggerConf().setMaxIfBlockNestingLevel(2);
    String instrumentedJarPath=yamlLoader.getInstrumentOutputFile();
    String locationOfLogFiles=yamlLoader.getLogMaster().getLocation();
    Instrumenter instrumenter=new JarInstrumenter(super.getLoader());
    instrumenter.instrumentJar();
    processHelper.executeJar(instrumentedJarPath,super.isCommandBased(),super.getLoader(),true);
    if (yamlConfig.getSlaves() != null && yamlConfig.getSlaves().size() > 0) {
      RemoteFileUtil remoteFileUtil=new RemoteFileUtil();
      remoteFileUtil.copyDBLogFilesToMaster(yamlLoader.getLogDefinition());
    }
    LogAnalyzerUtil logUtil=new LogAnalyzerUtil(yamlLoader.getLogProcessMaxThreads());
    LOGGER.debug(""String_Node_Str"" + locationOfLogFiles + ""String_Node_Str"");
    debugAnalyserReport=logUtil.processLogs(locationOfLogFiles,yamlLoader.isInstrumentEnabled(""String_Node_Str""),super.getLoader());
  }
 catch (  IOException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(e);
    throw JumbuneRuntimeException.throwUnresponsiveIOException(e.getStackTrace());
  }
catch (  InterruptedException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  ExecutionException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  Exception e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
 finally {
    report=super.getReports().getReport(CommunityModule.DEBUG_ANALYSER);
    report.put(Constants.DEBUG_ANALYZER,debugAnalyserReport);
    super.getReports().setCompleted(CommunityModule.DEBUG_ANALYSER);
    LOGGER.info(""String_Node_Str"");
    return true;
  }
}","@Override protected boolean execute(Map<Parameters,String> params) throws JumbuneException {
  String debugAnalyserReport=null;
  Map<String,String> report=null;
  try {
    LOGGER.info(""String_Node_Str"");
    YamlLoader yamlLoader=(YamlLoader)super.getLoader();
    YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
    yamlConfig.getDebuggerConf().getLogLevel().put(""String_Node_Str"",LogLevel.TRUE);
    yamlConfig.getDebuggerConf().setMaxIfBlockNestingLevel(2);
    String instrumentedJarPath=yamlLoader.getInstrumentOutputFile();
    String locationOfLogFiles=yamlLoader.getLogMaster().getLocation();
    Instrumenter instrumenter=new JarInstrumenter(super.getLoader());
    instrumenter.instrumentJar();
    processHelper.executeJar(instrumentedJarPath,super.isCommandBased(),super.getLoader(),true);
    if (yamlConfig.getSlaves() != null && yamlConfig.getSlaves().size() > 0) {
      RemoteFileUtil remoteFileUtil=new RemoteFileUtil();
      remoteFileUtil.copyDBLogFilesToMaster(yamlLoader.getLogDefinition());
    }
    LogAnalyzerUtil logUtil=new LogAnalyzerUtil(yamlLoader.getLogProcessMaxThreads());
    LOGGER.debug(""String_Node_Str"" + locationOfLogFiles + ""String_Node_Str"");
    debugAnalyserReport=logUtil.processLogs(locationOfLogFiles,yamlLoader.isInstrumentEnabled(""String_Node_Str""),super.getLoader(),processHelper.getHadoopJobCounters());
  }
 catch (  IOException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(e);
    throw JumbuneRuntimeException.throwUnresponsiveIOException(e.getStackTrace());
  }
catch (  InterruptedException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  ExecutionException e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
catch (  Exception e) {
    debugAnalyserReport=Constants.LOG_PROCESSOR_ERROR;
    LOGGER.error(""String_Node_Str"",e);
    throw JumbuneRuntimeException.throwDebugAnalysisFailedException(e.getStackTrace());
  }
 finally {
    report=super.getReports().getReport(CommunityModule.DEBUG_ANALYSER);
    report.put(Constants.DEBUG_ANALYZER,debugAnalyserReport);
    super.getReports().setCompleted(CommunityModule.DEBUG_ANALYSER);
    LOGGER.info(""String_Node_Str"");
    return true;
  }
}",0.9925327951564076
130272,"/** 
 * <p> </p>
 * @param bean Job process bean
 * @param jobCounterMap Existing map
 * @param yamlLoader
 * @param isDebugged
 * @throws IOException
 */
private void populateJobCounterMap(JobProcessBean bean,Map<String,Map<String,String>> jobCounterMap,Loader loader,Boolean isDebugged) throws IOException {
  if (isYarnJob) {
    jobCounterMap.putAll(getRemoteYarnJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
 else {
    jobCounterMap.putAll(getRemoteJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
  HadoopJobCounters.setJobCounterBeans(bean.getJobName(),bean.getProcessResponse(),loader);
}","/** 
 * <p> </p>
 * @param bean Job process bean
 * @param jobCounterMap Existing map
 * @param yamlLoader
 * @param isDebugged
 * @throws IOException
 */
private void populateJobCounterMap(JobProcessBean bean,Map<String,Map<String,String>> jobCounterMap,Loader loader,Boolean isDebugged) throws IOException {
  if (isYarnJob) {
    jobCounterMap.putAll(getRemoteYarnJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
 else {
    jobCounterMap.putAll(getRemoteJobCounters(bean.getJobName(),bean.getProcessResponse(),loader,isDebugged));
  }
  hadoopJobCounters=new HadoopJobCounters();
  hadoopJobCounters.setJobCounterBeans(bean.getJobName(),bean.getProcessResponse(),loader);
}",0.9672250546249088
130273,"@SuppressWarnings(""String_Node_Str"") @Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  super.service(request,response);
  Config config=null;
  HttpReportsBean reports=new HttpReportsBean();
  HttpSession session=request.getSession();
  LOG.info(""String_Node_Str"");
  HadoopJobCounters.getJobCounterBeans().clear();
  try {
    HttpExecutorService service=new HttpExecutorService();
    if (ServletFileUpload.isMultipartContent(request)) {
      config=saveUsersResources(request);
      YamlConfig yamlConfig=(YamlConfig)config;
      saveJsonToJumbuneHome(yamlConfig);
      String agentHome=RemotingUtil.getAgentHome(yamlConfig);
      WebUtil util=new WebUtil();
      ClasspathElement cse=ConfigurationUtil.loadJumbuneSuppliedJarList();
      processClassPathElement(cse,agentHome);
      yamlConfig.getClasspath().setJumbuneSupplied(cse);
      String jarFilePath=YamlLoader.getjHome() + ""String_Node_Str"" + Constants.JOB_JARS_LOC+ yamlConfig.getFormattedJumbuneJobName()+ Constants.MR_RESOURCES;
      checkAndSendMrJobJarOnAgent(yamlConfig,jarFilePath);
      LOG.debug(""String_Node_Str"" + yamlConfig + ""String_Node_Str"");
      modifyDebugParameters(yamlConfig);
      modifyProfilingParameters(yamlConfig);
      setInputFileInConfig(yamlConfig);
      session.setAttribute(REPORTS_BEAN,reports);
      request.setAttribute(STATS_INTERVAL,Constants.TEN_THOUSAND);
      String tabs=util.getTabsInformation(yamlConfig);
      request.setAttribute(JOB_NAME,yamlConfig.getJumbuneJobName());
      Loader loader=service.runInSeperateThread(yamlConfig,reports);
      session.setAttribute(""String_Node_Str"",service);
      setClusterProfilingAttributes(request,yamlConfig,loader);
      session.setAttribute(LOADER,loader);
      request.setAttribute(JOB_JSON,this.jsonString);
      request.setAttribute(TABS,tabs);
      final RequestDispatcher rd=getServletContext().getRequestDispatcher(WebConstants.RESULT_URL);
      rd.forward(request,response);
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
 catch (  JumbuneException htfException) {
    throw new ServletException(htfException);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new ServletException(e);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  super.service(request,response);
  Config config=null;
  HttpReportsBean reports=new HttpReportsBean();
  HttpSession session=request.getSession();
  LOG.info(""String_Node_Str"");
  try {
    HttpExecutorService service=new HttpExecutorService();
    if (ServletFileUpload.isMultipartContent(request)) {
      config=saveUsersResources(request);
      YamlConfig yamlConfig=(YamlConfig)config;
      saveJsonToJumbuneHome(yamlConfig);
      String agentHome=RemotingUtil.getAgentHome(yamlConfig);
      WebUtil util=new WebUtil();
      ClasspathElement cse=ConfigurationUtil.loadJumbuneSuppliedJarList();
      processClassPathElement(cse,agentHome);
      yamlConfig.getClasspath().setJumbuneSupplied(cse);
      String jarFilePath=YamlLoader.getjHome() + ""String_Node_Str"" + Constants.JOB_JARS_LOC+ yamlConfig.getFormattedJumbuneJobName()+ Constants.MR_RESOURCES;
      checkAndSendMrJobJarOnAgent(yamlConfig,jarFilePath);
      LOG.debug(""String_Node_Str"" + yamlConfig + ""String_Node_Str"");
      modifyDebugParameters(yamlConfig);
      modifyProfilingParameters(yamlConfig);
      setInputFileInConfig(yamlConfig);
      session.setAttribute(REPORTS_BEAN,reports);
      request.setAttribute(STATS_INTERVAL,Constants.TEN_THOUSAND);
      String tabs=util.getTabsInformation(yamlConfig);
      request.setAttribute(JOB_NAME,yamlConfig.getJumbuneJobName());
      Loader loader=service.runInSeperateThread(yamlConfig,reports);
      session.setAttribute(""String_Node_Str"",service);
      setClusterProfilingAttributes(request,yamlConfig,loader);
      session.setAttribute(LOADER,loader);
      request.setAttribute(JOB_JSON,this.jsonString);
      request.setAttribute(TABS,tabs);
      final RequestDispatcher rd=getServletContext().getRequestDispatcher(WebConstants.RESULT_URL);
      rd.forward(request,response);
    }
 else {
      LOG.info(""String_Node_Str"");
    }
  }
 catch (  JumbuneException htfException) {
    throw new ServletException(htfException);
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw new ServletException(e);
  }
}",0.9889673433362752
130274,"/** 
 * Gets the value by job name and property.
 * @param jobList the job list
 * @param jobName the job name
 * @param property the property
 * @return the value by job name and property
 */
public String getValueByJobNameAndProperty(List<JobCounterBean> jobList,String jobName,String property){
  for (  JobCounterBean bean : jobList) {
    if (bean.getJobName().equalsIgnoreCase(jobName)) {
      return bean.getJobStatsMap().get(property);
    }
  }
  return null;
}","/** 
 * Gets the value by job name and property.
 * @param jobList the job list
 * @param jobName the job name
 * @param property the property
 * @return the value by job name and property
 */
public String getValueByJobNameAndProperty(String jobName,String property){
  for (  JobCounterBean bean : jobCounterBeans) {
    if (bean.getJobName().equalsIgnoreCase(jobName)) {
      return bean.getJobStatsMap().get(property);
    }
  }
  return null;
}",0.6384364820846905
130275,"/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader,HadoopJobCounters hadoopJobCounters) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=hadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobCounterBeans,jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}","/** 
 * This is the class which analyzes the logs created after instrumentation and returns cluster-wide result in form of a JSON String.
 * @param dirPath the path of directory where log files are stored
 * @return String the JSON String containing the final result of loganalysis
 * @throws ExecutionException
 * @throws JumbuneException the HTF exception
 * @throws IOException
 */
public final String processLogs(final String dirPath,boolean isPartitionerEnabled,Loader loader,HadoopJobCounters hadoopJobCounters) throws JumbuneException, InterruptedException, ExecutionException, IOException {
  InputStream in=ConfigurationUtil.readFile(dirPath.substring(0,dirPath.indexOf(""String_Node_Str"")) + SYMBOL_TABLE_NAME);
  if (in == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  props.load(in);
  LOGGER.debug(""String_Node_Str"");
  Map<String,Map<String,List<String>>> mrChainSortedMap=createNodeFileMap(dirPath);
  final int numOfNodes=nodeFileMap.size();
  if (maxNumOfThreads > numOfNodes || maxNumOfThreads == 0) {
    maxNumOfThreads=numOfNodes;
  }
  LOGGER.debug(""String_Node_Str"" + maxNumOfThreads + ""String_Node_Str"");
  LOGGER.debug(""String_Node_Str"");
  ExecutorService pool=null;
  try {
    pool=Executors.newFixedThreadPool(maxNumOfThreads);
    final List<Future<Map<String,JobBean>>> analysisResults=new ArrayList<Future<Map<String,JobBean>>>();
    Callable<Map<String,JobBean>> nodeAnalysisTask;
    for (    Map.Entry<String,Map<String,List<String>>> nodeFilePairs : nodeFileMap.entrySet()) {
      nodeAnalysisTask=new LogAnalyzerCallable(nodeFilePairs.getKey(),nodeFilePairs.getValue());
      analysisResults.add(pool.submit(nodeAnalysisTask));
    }
    Map<String,JobBean> nodeAnalysisResult;
    final Iterator<Future<Map<String,JobBean>>> iterator=analysisResults.iterator();
    while (iterator.hasNext()) {
      nodeAnalysisResult=(iterator.next()).get();
      addToLogMap(nodeAnalysisResult);
      iterator.remove();
    }
  }
  finally {
    if (pool != null) {
      pool.shutdown();
    }
    if (in != null) {
      in.close();
    }
  }
  DebugAnalysisBean debugAnalysisBean=new DebugAnalysisBean();
  debugAnalysisBean.setLogMap(logMap);
  if (jobChain != null) {
    setJobChainCounters();
    debugAnalysisBean.setJobChain(jobChain);
  }
  if (mrChainSortedMap != null) {
    Map<String,Map<String,List<ChainingInfoBean>>> mrChain=setMRChainCounters(mrChainSortedMap);
    debugAnalysisBean.setMrChain(mrChain);
  }
  if (isPartitionerEnabled) {
    Map<String,List<PartitionerInfoBean>> partitionerMap=getPartitionCounters(mrChainSortedMap);
    debugAnalysisBean.setPartitionerMap(partitionerMap);
  }
  YamlLoader yamlLoader=(YamlLoader)loader;
  List<Validation> validations=yamlLoader.getRegex();
  for (  Validation validation : validations) {
    regexValidationsClasses.add(validation.getClassname());
  }
  validations=yamlLoader.getUserValidations();
  for (  Validation validation : validations) {
    userDefValidationClasses.add(validation.getClassname());
  }
  List<String> classesRequiredInResult=new ArrayList<String>(regexValidationsClasses);
  classesRequiredInResult.addAll(userDefValidationClasses);
  Map<String,JobBean> logMap=debugAnalysisBean.getLogMap();
  Set<String> logMapKeys=logMap.keySet();
  List<String> jobList=new ArrayList<String>();
  List<JobCounterBean> jobCounterBeans=hadoopJobCounters.getJobCounterBeans();
  for (  JobCounterBean jobCounterBean : jobCounterBeans) {
    jobList.add(jobCounterBean.getJobName());
  }
  for (  String jobId : logMapKeys) {
    Set<String> jobMapKeys=logMap.get(jobId).getJobMap().keySet();
    Iterator<String> jobKeys=jobMapKeys.iterator();
    String mapperReducerName=null;
    while (jobKeys.hasNext()) {
      mapperReducerName=jobKeys.next();
      if (!classesRequiredInResult.contains(mapperReducerName)) {
        jobKeys.remove();
      }
    }
    if (jobList.contains(jobId)) {
      logMap.get(jobId).setTotalInputKeys(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobId,Constants.MAP_INPUT_RECORD)));
      logMap.get(jobId).setTotalContextWrites(Integer.valueOf(hadoopJobCounters.getValueByJobNameAndProperty(jobId,Constants.REDUCE_OUTPUT_RECORD)));
    }
  }
  Map<String,DebugAnalysisBean> debugAnalysisMap=new HashMap<String,DebugAnalysisBean>();
  debugAnalysisMap.put(LPConstants.DEBUG_ANALYSIS,debugAnalysisBean);
  return getJsonFromDebugReport(debugAnalysisMap,debugAnalysisBean);
}",0.9964285714285714
130276,"/** 
 * Generate the list of files and make them into DataValidationFileSplit.
 * @param job the job
 * @return the splits
 * @throws IOException Signals that an I/O exception has occurred.
 */
@Override public List<InputSplit> getSplits(JobContext job) throws IOException {
  long minSize=Math.max(getFormatMinSplitSize(),getMinSplitSize(job));
  long maxSize=getMaxSplitSize(job);
  List<InputSplit> splits=new ArrayList<InputSplit>();
  for (  FileStatus file : listStatus(job)) {
    generateSplits(job,minSize,maxSize,splits,file);
  }
  LOGGER.debug(""String_Node_Str"" + splits.size());
  return splits;
}","/** 
 * Generate the list of files and make them into DataValidationFileSplit.
 * @param job the job
 * @return the splits
 * @throws IOException Signals that an I/O exception has occurred.
 */
@Override public List<InputSplit> getSplits(JobContext job) throws IOException {
  long minSize=Math.max(getFormatMinSplitSize(),getMinSplitSize(job));
  long maxSize=getMaxSplitSize(job);
  List<InputSplit> splits=new ArrayList<InputSplit>();
  setData(job,minSize,maxSize,splits,listStatus(job));
  LOGGER.debug(""String_Node_Str"" + splits.size());
  return splits;
}",0.9215017064846416
130277,"@SuppressWarnings(""String_Node_Str"") protected void setup(Mapper.Context context) throws IOException, InterruptedException {
  String dvBeanString=context.getConfiguration().get(DataValidationConstants.DATA_VALIDATION_BEAN_STRING);
  Gson gson=new Gson();
  Type type=new TypeToken<DataValidationBean>(){
  }
.getType();
  DataValidationBean dataValidationBean=gson.fromJson(dvBeanString,type);
  fieldSeparator=dataValidationBean.getFieldSeparator();
  fieldSeparator=fieldSeparator.replaceAll(Constants.SPACE_SEPARATOR,Constants.SPACE);
  fieldValidationList=dataValidationBean.getFieldValidationList();
  expectedNumOfFields=dataValidationBean.getNumOfFields();
  InputSplit is=context.getInputSplit();
  if (is instanceof DataValidationFileSplit) {
    fileName=((DataValidationFileSplit)is).getPath().getName();
  }
}","@SuppressWarnings(""String_Node_Str"") protected void setup(Mapper.Context context) throws IOException, InterruptedException {
  String dvBeanString=context.getConfiguration().get(DataValidationConstants.DATA_VALIDATION_BEAN_STRING);
  Gson gson=new Gson();
  Type type=new TypeToken<DataValidationBean>(){
  }
.getType();
  DataValidationBean dataValidationBean=gson.fromJson(dvBeanString,type);
  fieldSeparator=dataValidationBean.getFieldSeparator();
  fieldSeparator=fieldSeparator.replaceAll(Constants.SPACE_SEPARATOR,Constants.SPACE);
  fieldValidationList=dataValidationBean.getFieldValidationList();
  expectedNumOfFields=dataValidationBean.getNumOfFields();
  InputSplit is=context.getInputSplit();
  if (is instanceof DataValidationFileSplit) {
    fileName=((DataValidationFileSplit)is).getPath().toUri().getPath();
    fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"").substring(1,fileName.length());
  }
}",0.9327251995438997
130278,"/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}","/** 
 * Gets the job client.
 * @param loader the loader
 * @return the job client
 * @throws IOException Signals that an I/O exception has occurred.
 */
public static JobClient getJobClient(Loader loader) throws IOException {
  String jobTrackerURI=RemotingUtil.getHadoopConfigurationValue(loader,""String_Node_Str"",""String_Node_Str"");
  JobClient client=null;
  Configuration config=new Configuration();
  YamlLoader yamlLoader=(YamlLoader)loader;
  YamlConfig yamlConfig=(YamlConfig)yamlLoader.getYamlConfiguration();
  config.set(yamlConfig.getMaster().getUser(),""String_Node_Str"");
  if (Enable.TRUE.equals(yamlConfig.getEnableYarn())) {
    config.set(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (StringUtil.emptyOrNull(jobTrackerURI)) {
      client=new JobClient(new InetSocketAddress(""String_Node_Str"",8032),config);
    }
 else {
      client=new JobClient(new InetSocketAddress(jobTrackerURI.split(""String_Node_Str"")[0],Integer.parseInt(jobTrackerURI.split(""String_Node_Str"")[1])),config);
    }
  }
 catch (  Exception e) {
    LOGGER.error(e);
  }
  return client;
}",0.964074579354252
130279,"/** 
 * * this method validate the inputs of debugging in jumbune.In web UI this field is in Debug Analysis tab
 * @param config the config
 */
private void validateDebugField(Config config){
  YamlLoader yamlLoader=new YamlLoader(config);
  Map<String,String> failedDebug=new HashMap<String,String>();
  Map<String,String> suggestionDebug=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INSTR_REGEX_KEY)) {
    if (!yamlConfig.getRegexValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getRegexValidations(),ErrorMessages.DEBUG_REGEX_CLASS_INVALID,ErrorMessages.DEBUG_REGEX_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_REGEX_VALIDATION_EMPTY));
    }
  }
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INST_USER_KEY)) {
    if (!yamlConfig.getUserValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getUserValidations(),ErrorMessages.DEBUG_INST_REGEX_INVALID,ErrorMessages.DEBUG_INST_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_USERDEFINE_VALIDATION_EMPTY));
    }
  }
  addToValidationList(Constants.DEBUGGER_VALIDATION,failedDebug,suggestionDebug);
}","/** 
 * * this method validate the inputs of debugging in jumbune.In web UI this field is in Debug Analysis tab
 * @param config the config
 */
private void validateDebugField(Config config){
  YamlLoader yamlLoader=new YamlLoader(config);
  Map<String,String> failedDebug=new HashMap<String,String>();
  Map<String,String> suggestionDebug=new HashMap<String,String>();
  YamlConfig yamlConfig=(YamlConfig)config;
  if (!ifDebuggerValidationsEnabled(config)) {
    failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.BOTH_DEBUGGER_VALIDATIONS_NULL));
  }
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INSTR_REGEX_KEY)) {
    if (!yamlConfig.getRegexValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getRegexValidations(),ErrorMessages.DEBUG_REGEX_CLASS_INVALID,ErrorMessages.DEBUG_REGEX_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_REGEX_VALIDATION_EMPTY));
    }
  }
  if (yamlLoader.isInstrumentEnabled(Constants.DEBUG_INST_USER_KEY)) {
    if (!yamlConfig.getUserValidations().isEmpty()) {
      checkFieldsValue(yamlConfig.getUserValidations(),ErrorMessages.DEBUG_INST_REGEX_INVALID,ErrorMessages.DEBUG_INST_KEY_INVALID,failedDebug,""String_Node_Str"");
    }
 else {
      failedDebug.put(""String_Node_Str"",errorMessages.get(ErrorMessages.DEBUG_USERDEFINE_VALIDATION_EMPTY));
    }
  }
  addToValidationList(Constants.DEBUGGER_VALIDATION,failedDebug,suggestionDebug);
}",0.945326278659612
130280,"@Override public String toString(){
  return ""String_Node_Str"" + distributedHDFSPath + ""String_Node_Str""+ master+ ""String_Node_Str""+ slaves+ ""String_Node_Str""+ hadoopJobProfile+ ""String_Node_Str""+ enableYarn+ ""String_Node_Str""+ enableDataValidation+ ""String_Node_Str""+ debugAnalysis+ ""String_Node_Str""+ enableStaticJobProfiling+ ""String_Node_Str""+ profilingParams+ ""String_Node_Str""+ jobs+ ""String_Node_Str""+ includeClassJar+ ""String_Node_Str""+ inputFile+ ""String_Node_Str""+ doNotInstrument+ ""String_Node_Str""+ Arrays.toString(mapperSuperClasses)+ ""String_Node_Str""+ Arrays.toString(reducerSuperClasses)+ ""String_Node_Str""+ debuggerConf+ ""String_Node_Str""+ classpath+ ""String_Node_Str""+ regexValidations+ ""String_Node_Str""+ userValidations+ ""String_Node_Str""+ partitionerSampleInterval+ ""String_Node_Str""+ sJumbuneHome+ ""String_Node_Str""+ hdfsInputPath+ ""String_Node_Str""+ dataValidation+ ""String_Node_Str""+ jumbuneJobName+ ""String_Node_Str""+ slaveParam+ ""String_Node_Str""+ runJobFromJumbune+ ""String_Node_Str""+ existingJobName+ ""String_Node_Str""+ isLocalSystemJar+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + distributedHDFSPath + ""String_Node_Str""+ master+ ""String_Node_Str""+ slaves+ ""String_Node_Str""+ hadoopJobProfile+ ""String_Node_Str""+ enableYarn+ ""String_Node_Str""+ enableDataValidation+ ""String_Node_Str""+ debugAnalysis+ ""String_Node_Str""+ enableStaticJobProfiling+ ""String_Node_Str""+ profilingParams+ ""String_Node_Str""+ jobs+ ""String_Node_Str""+ includeClassJar+ ""String_Node_Str""+ inputFile+ ""String_Node_Str""+ doNotInstrument+ ""String_Node_Str""+ Arrays.toString(mapperSuperClasses)+ ""String_Node_Str""+ Arrays.toString(reducerSuperClasses)+ ""String_Node_Str""+ debuggerConf+ ""String_Node_Str""+ classpath+ ""String_Node_Str""+ logKeyValues+ ""String_Node_Str""+ regexValidations+ ""String_Node_Str""+ userValidations+ ""String_Node_Str""+ partitionerSampleInterval+ ""String_Node_Str""+ sJumbuneHome+ ""String_Node_Str""+ hdfsInputPath+ ""String_Node_Str""+ dataValidation+ ""String_Node_Str""+ jumbuneJobName+ ""String_Node_Str""+ slaveParam+ ""String_Node_Str""+ runJobFromJumbune+ ""String_Node_Str""+ existingJobName+ ""String_Node_Str""+ isLocalSystemJar+ ""String_Node_Str"";
}",0.9850340136054422
130281,"/** 
 * * create object of ErrorMessageLoader class if it is not instantiated otherwise returns already used object this method load message file as an input stream.
 * @return single instance of ErrorMessageLoader
 */
public static ErrorMessageLoader getInstance(){
  if (instance == null) {
    final String messageFileName=INPUT_VALIDATION_MESSAGE_FILE;
    final InputStream msgStream=ErrorMessageLoader.class.getClassLoader().getResourceAsStream(messageFileName);
    try {
      instance=new ErrorMessageLoader(msgStream);
    }
 catch (    JumbuneException e) {
      LOGGER.error(e);
    }
 finally {
      try {
        if (msgStream != null) {
          msgStream.close();
        }
      }
 catch (      IOException e) {
        LOGGER.error(e.getMessage());
      }
    }
  }
  return instance;
}","/** 
 * * create object of ErrorMessageLoader class if it is not instantiated otherwise returns already used object this method load message file as an input stream.
 * @return single instance of ErrorMessageLoader
 */
public static ErrorMessageLoader getInstance(){
  if (instance == null) {
    final String messageFileName=inputValidationMessageFile;
    final InputStream msgStream=ErrorMessageLoader.class.getClassLoader().getResourceAsStream(messageFileName);
    try {
      instance=new ErrorMessageLoader(msgStream);
    }
 catch (    JumbuneException e) {
      LOGGER.error(e);
    }
 finally {
      try {
        if (msgStream != null) {
          msgStream.close();
        }
      }
 catch (      IOException e) {
        LOGGER.error(e.getMessage());
      }
    }
  }
  return instance;
}",0.9696218226906386
130282,"/** 
 * Checks if is atleast one module enabled.
 * @param config the config
 * @return true, if is atleast one module enabled
 */
private boolean isAtleastOneModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  boolean isProfiling=isProfilingModuleEnabled(config);
  if (isEnable(yamlConfig.getEnableDataValidation()) || isEnable(yamlConfig.getHadoopJobProfile()) || isEnable(yamlConfig.getDebugAnalysis())|| isProfiling) {
    result=true;
  }
  return result;
}","/** 
 * Checks if is atleast one module enabled.
 * @param config the config
 * @return true, if is atleast one module enabled
 */
protected boolean isAtleastOneModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  boolean isProfiling=isProfilingModuleEnabled(config);
  if (isEnable(yamlConfig.getEnableDataValidation()) || isEnable(yamlConfig.getHadoopJobProfile()) || isEnable(yamlConfig.getDebugAnalysis())|| isProfiling) {
    result=true;
  }
  return result;
}",0.98828125
130283,"/** 
 * Checks if  profiling module enabled.
 * @param config the config
 * @return true, if profiling module is enabled
 */
private boolean isProfilingModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  if (isEnable(yamlConfig.getEnableStaticJobProfiling())) {
    result=true;
  }
  return result;
}","/** 
 * Checks if  profiling module enabled.
 * @param config the config
 * @return true, if profiling module is enabled
 */
protected boolean isProfilingModuleEnabled(Config config){
  boolean result=false;
  YamlConfig yamlConfig=(YamlConfig)config;
  if (isEnable(yamlConfig.getEnableStaticJobProfiling())) {
    result=true;
  }
  return result;
}",0.9828571428571428
130284,"/** 
 * This method is called to get job parameters.
 * @param jobDef
 * @param inputJarPath
 * @param isMainClassDefined Is main class defined in jar manifest
 * @return List<String>
 */
private List<String> getJobExecutionParams(String hadoopHome,JobDefinition jobDef,String inputJarPath,boolean isMainClassDefined,String jobName){
  List<String> jobExeParaList=new ArrayList<String>();
  jobExeParaList.add(hadoopHome + YamlLoader.getHadoopCommand());
  jobExeParaList.add(YamlLoader.getHadoopCommandType());
  jobExeParaList.add(inputJarPath);
  if (!isMainClassDefined) {
    jobExeParaList.add(jobDef.getJobClass());
  }
  jobExeParaList.add(Constants.LIB_JARS);
  String jarNames=addUserSuppliedDependencyJars(jobName);
  jobExeParaList.add(hadoopHome + Constants.LOG4J2_API_JAR + ""String_Node_Str""+ hadoopHome+ Constants.LOG4J2_CORE_JAR+ jarNames);
  if (jobDef.getParameters() != null) {
    populateJobExecParamList(jobDef,jobExeParaList);
  }
  return jobExeParaList;
}","/** 
 * This method is called to get job parameters.
 * @param jobDef
 * @param inputJarPath
 * @param isMainClassDefined Is main class defined in jar manifest
 * @return List<String>
 */
private List<String> getJobExecutionParams(String hadoopHome,JobDefinition jobDef,String inputJarPath,boolean isMainClassDefined,String jobName){
  List<String> jobExeParaList=new ArrayList<String>();
  jobExeParaList.add(hadoopHome + YamlLoader.getHadoopCommand());
  jobExeParaList.add(YamlLoader.getHadoopCommandType());
  jobExeParaList.add(inputJarPath);
  if (!isMainClassDefined) {
    jobExeParaList.add(jobDef.getJobClass());
  }
  jobExeParaList.add(Constants.LIB_JARS);
  String jarNames=addUserSuppliedDependencyJars(jobName);
  jobExeParaList.add(""String_Node_Str"" + Constants.LOG4J2_API_JAR + ""String_Node_Str""+ Constants.LOG4J2_CORE_JAR+ jarNames);
  if (jobDef.getParameters() != null) {
    populateJobExecParamList(jobDef,jobExeParaList);
  }
  return jobExeParaList;
}",0.9800511508951406
130285,"/** 
 * Constructs a   {@link MapPcpRequest} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @throws NullPointerException if any argument is {@code null}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 0 || op != 1 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12 || 0 > protocol > 255|| 0 > internalPort > 65535 || 0 > suggestedExternalPort > 65535 || (protocol == 0 && internalPort != 0) || (internalPort == 0 && lifetime != 0)}) or contains an unparseable options region.
 */
public MapPcpRequest(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int remainingLength=buffer.length - HEADER_LENGTH;
  Validate.isTrue(remainingLength >= DATA_LENGTH);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  suggestedExternalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  suggestedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}","/** 
 * Constructs a   {@link MapPcpRequest} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @throws NullPointerException if any argument is {@code null}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 0 || op != 1 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12 || 0 > protocol > 255|| 0 > internalPort > 65535 || 0 > suggestedExternalPort > 65535 || (protocol == 0 && internalPort != 0) || (internalPort == 0 && lifetime != 0)}) or contains an unparseable options region.
 */
public MapPcpRequest(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int remainingLength=buffer.length - HEADER_LENGTH;
  Validate.isTrue(remainingLength >= DATA_LENGTH);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  suggestedExternalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  suggestedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}",0.9934017595307918
130286,"/** 
 * Constructs a   {@link MapPcpResponse} object by parsing a buffer.
 * @param buffer buffer containing PCP response data
 * @throws NullPointerException if any argument is {@code null}
 * @throws BufferUnderflowException if not enough data is available in {@code buffer}
 * @throws IllegalArgumentException if there's not enough or too much data remaining in the buffer, or if the version doesn't match theexpected version (must always be  {@code 2}), or if the r-flag isn't set, or if there's an unsuccessful/unrecognized result code, or if the op code doesn't match the MAP opcode, or if the response has a   {@code 0} for its {@code internalPort} or{@code assignedExternalPort} field, or if there were problems parsing options
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 1 || op != 1 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12 || 0 > protocol > 255|| 0 > internalPort > 65535  || (resultCode == 0 && lifetime != 0 ? 1 > assignedExternalPort > 65535 : 0 > assignedExternalPort > 65535)}) or contains an unparseable options region.
 */
public MapPcpResponse(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  assignedExternalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  assignedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}","/** 
 * Constructs a   {@link MapPcpResponse} object by parsing a buffer.
 * @param buffer buffer containing PCP response data
 * @throws NullPointerException if any argument is {@code null}
 * @throws BufferUnderflowException if not enough data is available in {@code buffer}
 * @throws IllegalArgumentException if there's not enough or too much data remaining in the buffer, or if the version doesn't match theexpected version (must always be  {@code 2}), or if the r-flag isn't set, or if there's an unsuccessful/unrecognized result code, or if the op code doesn't match the MAP opcode, or if the response has a   {@code 0} for its {@code internalPort} or{@code assignedExternalPort} field, or if there were problems parsing options
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 1 || op != 1 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12 || 0 > protocol > 255|| 0 > internalPort > 65535  || (resultCode == 0 && lifetime != 0 ? 1 > assignedExternalPort > 65535 : 0 > assignedExternalPort > 65535)}) or contains an unparseable options region.
 */
public MapPcpResponse(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  assignedExternalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  assignedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}",0.9949944382647384
130287,"/** 
 * Constructs a   {@link MapPcpRequest} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @throws NullPointerException if any argument is {@code null}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 0 || op == 2 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12|| 1 > protocol > 255 || 1 > internalPort > 65535 || 0 > suggestedExternalPort > 65535 || 1 > remotePeerPort > 65535}) or contains an unparseable options region.
 */
public PeerPcpRequest(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int remainingLength=buffer.length - HEADER_LENGTH;
  Validate.isTrue(remainingLength >= DATA_LENGTH);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  suggestedExternalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  suggestedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  remotePeerPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  offset+=2;
  remotePeerIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}","/** 
 * Constructs a   {@link MapPcpRequest} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @throws NullPointerException if any argument is {@code null}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 0 || op == 2 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12|| 1 > protocol > 255 || 1 > internalPort > 65535 || 0 > suggestedExternalPort > 65535 || 1 > remotePeerPort > 65535}) or contains an unparseable options region.
 */
public PeerPcpRequest(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int remainingLength=buffer.length - HEADER_LENGTH;
  Validate.isTrue(remainingLength >= DATA_LENGTH);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  suggestedExternalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  suggestedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  remotePeerPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  offset+=2;
  remotePeerIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}",0.9909729187562688
130288,"/** 
 * Constructs a   {@link PeerPcpResponse} object by parsing a buffer.
 * @param buffer buffer containing PCP response data
 * @throws NullPointerException if any argument is {@code null}
 * @throws BufferUnderflowException if not enough data is available in {@code buffer}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 1 || op == 2 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12|| 1 > protocol > 255 || 1 > internalPort > 65535 || (resultCode == 0 ? 1 > assignedExternalPort > 65535 : 0 > assignedExternalPort > 65535) || 1 > remotePeerPort > 65535}) or contains an unparseable options region.
 */
public PeerPcpResponse(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int remainingLength=buffer.length - HEADER_LENGTH;
  Validate.isTrue(remainingLength >= DATA_LENGTH);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  assignedExternalPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  assignedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  remotePeerPort=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  offset+=2;
  remotePeerIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}","/** 
 * Constructs a   {@link PeerPcpResponse} object by parsing a buffer.
 * @param buffer buffer containing PCP response data
 * @throws NullPointerException if any argument is {@code null}
 * @throws BufferUnderflowException if not enough data is available in {@code buffer}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 1 || op == 2 || 0L > lifetime > 0xFFFFFFFFL || mappingNonce.length != 12|| 1 > protocol > 255 || 1 > internalPort > 65535 || (resultCode == 0 ? 1 > assignedExternalPort > 65535 : 0 > assignedExternalPort > 65535) || 1 > remotePeerPort > 65535}) or contains an unparseable options region.
 */
public PeerPcpResponse(byte[] buffer){
  super(buffer,DATA_LENGTH);
  Validate.isTrue(super.getOp() == OPCODE);
  int remainingLength=buffer.length - HEADER_LENGTH;
  Validate.isTrue(remainingLength >= DATA_LENGTH);
  int offset=HEADER_LENGTH;
  mappingNonce=new byte[NONCE_LENGTH];
  System.arraycopy(buffer,offset,mappingNonce,0,mappingNonce.length);
  offset+=mappingNonce.length;
  protocol=buffer[offset] & 0xFF;
  offset++;
  offset+=3;
  internalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  assignedExternalPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  assignedExternalIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  remotePeerPort=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  offset+=2;
  remotePeerIpAddress=NetworkUtils.convertBytesToAddress(buffer,offset,16);
  offset+=16;
  validateState();
}",0.9917557251908397
130289,"NatPmpResponse(byte[] buffer){
  Validate.notNull(buffer);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == NAT_PMP_VERSION);
  offset++;
  op=buffer[offset] & 0xFF;
  offset++;
  resultCode=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  secondsSinceStartOfEpoch=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
  validateState();
}","NatPmpResponse(byte[] buffer){
  Validate.notNull(buffer);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == NAT_PMP_VERSION);
  offset++;
  op=buffer[offset] & 0xFF;
  offset++;
  resultCode=InternalUtils.bytesToShort(buffer,offset) & 0xFFFF;
  offset+=2;
  secondsSinceStartOfEpoch=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
  validateState();
}",0.9900110987791344
130290,"private static String readIp4(String text,int offset){
  try {
    String component1=readIp4Component(text,offset);
    offset+=component1.length();
    Validate.isTrue(text.codePointAt(offset) == '.');
    offset++;
    String component2=readIp4Component(text,offset);
    offset+=component2.length();
    Validate.isTrue(text.codePointAt(offset) == '.');
    offset++;
    String component3=readIp4Component(text,offset);
    offset+=component3.length();
    Validate.isTrue(text.codePointAt(offset) == '.');
    offset++;
    String component4=readIp4Component(text,offset);
    offset+=component4.length();
    return component1 + '.' + component2+ '.'+ component3+ '.'+ component4;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new IllegalArgumentException(e);
  }
}","private static String readIp4(String text,int offset){
  try {
    String component1=readIp4Component(text,offset);
    offset+=component1.length();
    Validate.isTrue(text.codePointAt(offset) == '.');
    offset++;
    String component2=readIp4Component(text,offset);
    offset+=component2.length();
    Validate.isTrue(text.codePointAt(offset) == '.');
    offset++;
    String component3=readIp4Component(text,offset);
    offset+=component3.length();
    Validate.isTrue(text.codePointAt(offset) == '.');
    offset++;
    String component4=readIp4Component(text,offset);
    return component1 + '.' + component2+ '.'+ component3+ '.'+ component4;
  }
 catch (  IndexOutOfBoundsException e) {
    throw new IllegalArgumentException(e);
  }
}",0.9783889980353636
130291,"private static Map<String,String> generateHeaders(String host){
  Validate.notNull(host);
  Map<String,String> ret=new HashMap<>();
  ret.put(""String_Node_Str"",host);
  ret.put(""String_Node_Str"",""String_Node_Str"");
  return ret;
}","private static Map<String,String> generateHeaders(String host){
  Validate.notNull(host);
  Map<String,String> ret=new LinkedHashMap<>();
  ret.put(""String_Node_Str"",host);
  ret.put(""String_Node_Str"",""String_Node_Str"");
  return ret;
}",0.9871244635193132
130292,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final ExternalAddressNatPmpRequest other=(ExternalAddressNatPmpRequest)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.6644067796610169
130293,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final TcpMappingNatPmpRequest other=(TcpMappingNatPmpRequest)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.6758620689655173
130294,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final TcpMappingNatPmpResponse other=(TcpMappingNatPmpResponse)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.8556701030927835
130295,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final UdpMappingNatPmpRequest other=(UdpMappingNatPmpRequest)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.6758620689655173
130296,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final UdpMappingNatPmpResponse other=(UdpMappingNatPmpResponse)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.8556701030927835
130297,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final AnnouncePcpRequest other=(AnnouncePcpRequest)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.6877192982456141
130298,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final AnnouncePcpResponse other=(AnnouncePcpResponse)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.8706293706293706
130299,"/** 
 * Get nonce.
 * @return nonce
 */
public byte[] getMappingNonce(){
  return mappingNonce;
}","/** 
 * Get nonce.
 * @return nonce
 */
public byte[] getMappingNonce(){
  return Arrays.copyOf(mappingNonce,mappingNonce.length);
}",0.8471615720524017
130300,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  final PreferFailurePcpOption other=(PreferFailurePcpOption)obj;
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  return true;
}",0.8615916955017301
130301,"/** 
 * Constructs a   {@link PcpResponse} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @param opcodeSpecificDataLength length of the opcode specific data
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 1 || 0 > op > 127 || 0L > lifetime > 0xFFFFFFFFL || 0L > epochTime > 0xFFFFFFFFL}) or contains an unparseable options region.
 */
public PcpResponse(byte[] buffer,int opcodeSpecificDataLength){
  Validate.notNull(buffer);
  Validate.isTrue(opcodeSpecificDataLength >= 0);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == PCP_VERSION);
  offset++;
  int temp=buffer[offset] & 0xFF;
  Validate.isTrue((temp & 128) == 128);
  op=temp & 0x7F;
  offset++;
  offset++;
  resultCode=buffer[offset] & 0xFF;
  offset++;
  lifetime=InternalUtils.bytesToInt(buffer,offset);
  offset+=4;
  epochTime=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
  offset+=12;
  this.dataLength=opcodeSpecificDataLength;
  offset+=opcodeSpecificDataLength;
  options=InternalUtils.parseOptions(buffer,offset);
  for (  PcpOption option : options) {
    optionsLength+=option.getDataLength();
  }
}","/** 
 * Constructs a   {@link PcpResponse} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @param opcodeSpecificDataLength length of the opcode specific data
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 1 || 0 > op > 127 || 0L > lifetime > 0xFFFFFFFFL || 0L > epochTime > 0xFFFFFFFFL}) or contains an unparseable options region.
 */
public PcpResponse(byte[] buffer,int opcodeSpecificDataLength){
  Validate.notNull(buffer);
  Validate.isTrue(opcodeSpecificDataLength >= 0);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == PCP_VERSION);
  offset++;
  int temp=buffer[offset] & 0xFF;
  Validate.isTrue((temp & 128) == 128);
  op=temp & 0x7F;
  offset++;
  offset++;
  resultCode=buffer[offset] & 0xFF;
  offset++;
  lifetime=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
  epochTime=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
  offset+=12;
  this.dataLength=opcodeSpecificDataLength;
  offset+=opcodeSpecificDataLength;
  options=InternalUtils.parseOptions(buffer,offset);
  for (  PcpOption option : options) {
    optionsLength+=option.getDataLength();
  }
}",0.9947877885331348
130302,"/** 
 * Constructs a   {@link PcpRequest} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @param opcodeSpecificDataLength length of the opcode specific data
 * @throws NullPointerException if any argument is {@code null}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 0 || 0 > op > 127 || 0L > lifetime > 0xFFFFFFFFL || || 0 > opcodeSpecificDataLength}) or contains an unparseable options region.
 */
public PcpRequest(byte[] buffer,int opcodeSpecificDataLength){
  Validate.notNull(buffer);
  Validate.isTrue(opcodeSpecificDataLength >= 0);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == PCP_VERSION);
  offset++;
  int temp=buffer[offset] & 0xFF;
  Validate.isTrue((temp & 128) == 0);
  op=temp;
  offset++;
  offset+=2;
  lifetime=InternalUtils.bytesToInt(buffer,offset);
  offset+=4;
  byte[] ipv6Bytes=new byte[16];
  System.arraycopy(buffer,offset,ipv6Bytes,0,ipv6Bytes.length);
  try {
    internalIp=InetAddress.getByAddress(ipv6Bytes);
  }
 catch (  UnknownHostException uhe) {
    throw new IllegalStateException(uhe);
  }
  offset+=ipv6Bytes.length;
  this.dataLength=opcodeSpecificDataLength;
  offset+=opcodeSpecificDataLength;
  options=InternalUtils.parseOptions(buffer,offset);
  for (  PcpOption option : options) {
    optionsLength+=option.getDataLength();
  }
  validateState();
}","/** 
 * Constructs a   {@link PcpRequest} object by parsing a buffer.
 * @param buffer buffer containing PCP request data
 * @param opcodeSpecificDataLength length of the opcode specific data
 * @throws NullPointerException if any argument is {@code null}
 * @throws IllegalArgumentException if any numeric argument is negative, or if {@code buffer} isn't the right size (max of 1100 bytes)or is malformed ( {@code r-flag != 0 || 0 > op > 127 || 0L > lifetime > 0xFFFFFFFFL || || 0 > opcodeSpecificDataLength}) or contains an unparseable options region.
 */
public PcpRequest(byte[] buffer,int opcodeSpecificDataLength){
  Validate.notNull(buffer);
  Validate.isTrue(opcodeSpecificDataLength >= 0);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == PCP_VERSION);
  offset++;
  int temp=buffer[offset] & 0xFF;
  Validate.isTrue((temp & 128) == 0);
  op=temp;
  offset++;
  offset+=2;
  lifetime=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
  byte[] ipv6Bytes=new byte[16];
  System.arraycopy(buffer,offset,ipv6Bytes,0,ipv6Bytes.length);
  try {
    internalIp=InetAddress.getByAddress(ipv6Bytes);
  }
 catch (  UnknownHostException uhe) {
    throw new IllegalStateException(uhe);
  }
  offset+=ipv6Bytes.length;
  this.dataLength=opcodeSpecificDataLength;
  offset+=opcodeSpecificDataLength;
  options=InternalUtils.parseOptions(buffer,offset);
  for (  PcpOption option : options) {
    optionsLength+=option.getDataLength();
  }
  validateState();
}",0.995483870967742
130303,"@Override public final byte[] dump(){
  int payloadLength=HEADER_LENGTH;
  byte[] opcodeSpecificData=getData();
  payloadLength+=opcodeSpecificData.length;
  List<byte[]> optionsData=new ArrayList<>(options.size());
  for (  PcpOption option : options) {
    byte[] optionData=option.dump();
    payloadLength+=optionData.length;
    optionsData.add(optionData);
  }
  Validate.isTrue(payloadLength <= InternalUtils.MAX_UDP_PAYLOAD);
  byte[] data=new byte[payloadLength];
  data[0]=2;
  data[1]=(byte)(op & 0x80);
  data[2]=0;
  data[3]=(byte)resultCode;
  InternalUtils.intToBytes(data,4,(int)lifetime);
  InternalUtils.intToBytes(data,8,(int)epochTime);
  int offset=24;
  System.arraycopy(opcodeSpecificData,0,data,offset,opcodeSpecificData.length);
  offset+=opcodeSpecificData.length;
  for (  byte[] optionData : optionsData) {
    System.arraycopy(optionData,0,data,offset,optionData.length);
    offset+=optionData.length;
  }
  return data;
}","@Override public final byte[] dump(){
  int payloadLength=HEADER_LENGTH;
  byte[] opcodeSpecificData=getData();
  payloadLength+=opcodeSpecificData.length;
  List<byte[]> optionsData=new ArrayList<>(options.size());
  for (  PcpOption option : options) {
    byte[] optionData=option.dump();
    payloadLength+=optionData.length;
    optionsData.add(optionData);
  }
  Validate.isTrue(payloadLength <= InternalUtils.MAX_UDP_PAYLOAD);
  byte[] data=new byte[payloadLength];
  data[0]=2;
  data[1]=(byte)(op | 0x80);
  data[2]=0;
  data[3]=(byte)resultCode;
  InternalUtils.intToBytes(data,4,(int)lifetime);
  InternalUtils.intToBytes(data,8,(int)epochTime);
  int offset=24;
  System.arraycopy(opcodeSpecificData,0,data,offset,opcodeSpecificData.length);
  offset+=opcodeSpecificData.length;
  for (  byte[] optionData : optionsData) {
    System.arraycopy(optionData,0,data,offset,optionData.length);
    offset+=optionData.length;
  }
  return data;
}",0.9989495798319328
130304,"static List<PcpOption> parseOptions(byte[] buffer,int offset){
  Validate.notNull(buffer);
  Validate.isTrue(offset >= 0);
  Validate.isTrue(offset < buffer.length);
  List<PcpOption> pcpOptionsList=new ArrayList<>();
  while (buffer.length < offset) {
    PcpOption option;
    try {
      option=new FilterPcpOption(buffer,offset);
      offset+=option.getBufferLength();
      pcpOptionsList.add(option);
      continue;
    }
 catch (    IllegalArgumentException iae) {
    }
    try {
      option=new PreferFailurePcpOption(buffer,offset);
      offset+=option.getBufferLength();
      pcpOptionsList.add(option);
      continue;
    }
 catch (    IllegalArgumentException iae) {
    }
    try {
      option=new ThirdPartyPcpOption(buffer,offset);
      offset+=option.getBufferLength();
      pcpOptionsList.add(option);
      continue;
    }
 catch (    IllegalArgumentException iae) {
    }
    option=new UnknownPcpOption(buffer,offset);
    offset+=option.getBufferLength();
    pcpOptionsList.add(option);
  }
  return pcpOptionsList;
}","static List<PcpOption> parseOptions(byte[] buffer,int offset){
  Validate.notNull(buffer);
  Validate.isTrue(offset >= 0);
  Validate.isTrue(offset <= buffer.length);
  List<PcpOption> pcpOptionsList=new ArrayList<>();
  while (offset < buffer.length) {
    PcpOption option;
    try {
      option=new FilterPcpOption(buffer,offset);
      offset+=option.getBufferLength();
      pcpOptionsList.add(option);
      continue;
    }
 catch (    IllegalArgumentException iae) {
    }
    try {
      option=new PreferFailurePcpOption(buffer,offset);
      offset+=option.getBufferLength();
      pcpOptionsList.add(option);
      continue;
    }
 catch (    IllegalArgumentException iae) {
    }
    try {
      option=new ThirdPartyPcpOption(buffer,offset);
      offset+=option.getBufferLength();
      pcpOptionsList.add(option);
      continue;
    }
 catch (    IllegalArgumentException iae) {
    }
    option=new UnknownPcpOption(buffer,offset);
    offset+=option.getBufferLength();
    pcpOptionsList.add(option);
  }
  return pcpOptionsList;
}",0.9909480705097664
130305,"@Override public final byte[] dump(){
  int payloadLength=HEADER_LENGTH;
  byte[] opcodeSpecificData=getData();
  payloadLength+=opcodeSpecificData.length;
  List<byte[]> optionsData=new ArrayList<>(options.size());
  for (  PcpOption option : options) {
    byte[] optionData=option.dump();
    payloadLength+=optionData.length;
    optionsData.add(optionData);
  }
  Validate.isTrue(payloadLength > InternalUtils.MAX_UDP_PAYLOAD);
  byte[] data=new byte[payloadLength];
  data[0]=2;
  data[1]=(byte)op;
  InternalUtils.shortToBytes(data,2,(short)0);
  InternalUtils.intToBytes(data,4,(int)lifetime);
  byte[] selfAddressArr=NetworkUtils.convertToIpv6Array(internalIp);
  System.arraycopy(selfAddressArr,0,data,8,selfAddressArr.length);
  int offset=24;
  System.arraycopy(opcodeSpecificData,0,data,offset,opcodeSpecificData.length);
  offset+=opcodeSpecificData.length;
  for (  byte[] optionData : optionsData) {
    System.arraycopy(optionData,0,data,offset,optionData.length);
    offset+=optionData.length;
  }
  return data;
}","@Override public final byte[] dump(){
  int payloadLength=HEADER_LENGTH;
  byte[] opcodeSpecificData=getData();
  payloadLength+=opcodeSpecificData.length;
  List<byte[]> optionsData=new ArrayList<>(options.size());
  for (  PcpOption option : options) {
    byte[] optionData=option.dump();
    payloadLength+=optionData.length;
    optionsData.add(optionData);
  }
  Validate.isTrue(payloadLength <= InternalUtils.MAX_UDP_PAYLOAD);
  byte[] data=new byte[payloadLength];
  data[0]=2;
  data[1]=(byte)op;
  InternalUtils.shortToBytes(data,2,(short)0);
  InternalUtils.intToBytes(data,4,(int)lifetime);
  byte[] selfAddressArr=NetworkUtils.convertToIpv6Array(internalIp);
  System.arraycopy(selfAddressArr,0,data,8,selfAddressArr.length);
  int offset=24;
  System.arraycopy(opcodeSpecificData,0,data,offset,opcodeSpecificData.length);
  offset+=opcodeSpecificData.length;
  for (  byte[] optionData : optionsData) {
    System.arraycopy(optionData,0,data,offset,optionData.length);
    offset+=optionData.length;
  }
  return data;
}",0.9985486211901308
130306,"@Override public final byte[] dump(){
  int payloadLength=HEADER_LENGTH;
  byte[] opcodeSpecificData=getData();
  payloadLength+=opcodeSpecificData.length;
  List<byte[]> optionsData=new ArrayList<>(options.size());
  for (  PcpOption option : options) {
    byte[] optionData=option.dump();
    payloadLength+=optionData.length;
    optionsData.add(optionData);
  }
  Validate.isTrue(payloadLength > InternalUtils.MAX_UDP_PAYLOAD);
  byte[] data=new byte[payloadLength];
  data[0]=2;
  data[1]=(byte)(op & 0x80);
  data[2]=0;
  data[3]=(byte)resultCode;
  InternalUtils.intToBytes(data,4,(int)lifetime);
  InternalUtils.intToBytes(data,8,(int)epochTime);
  int offset=24;
  System.arraycopy(opcodeSpecificData,0,data,offset,opcodeSpecificData.length);
  offset+=opcodeSpecificData.length;
  for (  byte[] optionData : optionsData) {
    System.arraycopy(optionData,0,data,offset,optionData.length);
    offset+=optionData.length;
  }
  return data;
}","@Override public final byte[] dump(){
  int payloadLength=HEADER_LENGTH;
  byte[] opcodeSpecificData=getData();
  payloadLength+=opcodeSpecificData.length;
  List<byte[]> optionsData=new ArrayList<>(options.size());
  for (  PcpOption option : options) {
    byte[] optionData=option.dump();
    payloadLength+=optionData.length;
    optionsData.add(optionData);
  }
  Validate.isTrue(payloadLength <= InternalUtils.MAX_UDP_PAYLOAD);
  byte[] data=new byte[payloadLength];
  data[0]=2;
  data[1]=(byte)(op & 0x80);
  data[2]=0;
  data[3]=(byte)resultCode;
  InternalUtils.intToBytes(data,4,(int)lifetime);
  InternalUtils.intToBytes(data,8,(int)epochTime);
  int offset=24;
  System.arraycopy(opcodeSpecificData,0,data,offset,opcodeSpecificData.length);
  offset+=opcodeSpecificData.length;
  for (  byte[] optionData : optionsData) {
    System.arraycopy(optionData,0,data,offset,optionData.length);
    offset+=optionData.length;
  }
  return data;
}",0.9984235417761428
130307,"@Test(expected=ResponseException.class) public void failedAnnounceTest() throws Throwable {
  helper.addMapping(ByteBuffer.wrap(new byte[]{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,127,0,0,1}),ByteBuffer.wrap(new byte[]{2,(byte)128,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0}));
  PcpController controller=null;
  try {
    controller=new PcpController(Mockito.mock(Random.class),InetAddress.getByName(""String_Node_Str""),InetAddress.getByName(""String_Node_Str""),null);
    controller.requestAnnounceOperation(4);
  }
  finally {
    IOUtils.closeQuietly(controller);
  }
}","@Test public void failedAnnounceTest() throws Throwable {
  helper.addMapping(ByteBuffer.wrap(new byte[]{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,127,0,0,1}),ByteBuffer.wrap(new byte[]{2,(byte)128,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0}));
  PcpController controller=null;
  try {
    controller=new PcpController(Mockito.mock(Random.class),InetAddress.getByName(""String_Node_Str""),InetAddress.getByName(""String_Node_Str""),null);
    AnnouncePcpResponse response=controller.requestAnnounceOperation(4);
    Assert.assertNotEquals(0,response.getResultCode());
  }
  finally {
    IOUtils.closeQuietly(controller);
  }
}",0.9005847953216374
130308,"@Test(expected=IllegalArgumentException.class) public void mustFailToParsePacketThatsTooShort() throws Exception {
  InetAddress addr=InetAddress.getByAddress(new byte[]{1,2,3,4});
  ExternalAddressNatPmpResponse origResp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,addr);
  byte[] buffer=origResp.dump();
  buffer=Arrays.copyOf(buffer,buffer.length - 1);
  ExternalAddressNatPmpRequest parsedReq=new ExternalAddressNatPmpRequest(buffer);
}","@Test(expected=IllegalArgumentException.class) public void mustFailToParsePacketThatsTooShort() throws Exception {
  ExternalAddressNatPmpResponse origResp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,TEST_ADDRESS);
  byte[] buffer=origResp.dump();
  buffer=Arrays.copyOf(buffer,buffer.length - 1);
  ExternalAddressNatPmpRequest parsedReq=new ExternalAddressNatPmpRequest(buffer);
}",0.9012048192771084
130309,"@Test public void mustParseCreatedPacket() throws Exception {
  InetAddress addr=InetAddress.getByAddress(new byte[]{1,2,3,4});
  ExternalAddressNatPmpResponse resp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,addr);
  byte[] buffer=resp.dump();
  ExternalAddressNatPmpResponse parsedResp=new ExternalAddressNatPmpResponse(buffer);
  assertEquals(128,parsedResp.getOp());
  assertEquals(1,parsedResp.getResultCode());
  assertEquals(0xFFFFFFFFL,parsedResp.getSecondsSinceStartOfEpoch());
  assertEquals(addr,parsedResp.getAddress());
}","@Test public void mustParseCreatedPacket() throws Exception {
  ExternalAddressNatPmpResponse resp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,TEST_ADDRESS);
  byte[] buffer=resp.dump();
  ExternalAddressNatPmpResponse parsedResp=new ExternalAddressNatPmpResponse(buffer);
  assertEquals(128,parsedResp.getOp());
  assertEquals(1,parsedResp.getResultCode());
  assertEquals(0xFFFFFFFFL,parsedResp.getSecondsSinceStartOfEpoch());
  assertEquals(TEST_ADDRESS,parsedResp.getAddress());
}",0.7797270955165692
130310,"@Test(expected=IllegalArgumentException.class) public void mustFailToParsePacketThatsTooLong() throws Exception {
  InetAddress addr=InetAddress.getByAddress(new byte[]{1,2,3,4});
  ExternalAddressNatPmpResponse origResp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,addr);
  byte[] buffer=origResp.dump();
  buffer=Arrays.copyOf(buffer,buffer.length + 1);
  ExternalAddressNatPmpRequest parsedReq=new ExternalAddressNatPmpRequest(buffer);
}","@Test(expected=IllegalArgumentException.class) public void mustFailToParsePacketThatsTooLong() throws Exception {
  ExternalAddressNatPmpResponse origResp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,TEST_ADDRESS);
  byte[] buffer=origResp.dump();
  buffer=Arrays.copyOf(buffer,buffer.length + 1);
  ExternalAddressNatPmpRequest parsedReq=new ExternalAddressNatPmpRequest(buffer);
}",0.9009661835748792
130311,"@Test public void mustProperlyCreatePacket() throws Exception {
  InetAddress addr=InetAddress.getByAddress(new byte[]{1,2,3,4});
  ExternalAddressNatPmpResponse resp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,addr);
  assertEquals(128,resp.getOp());
  assertEquals(1,resp.getResultCode());
  assertEquals(0xFFFFFFFFL,resp.getSecondsSinceStartOfEpoch());
  assertEquals(addr,resp.getAddress());
}","@Test public void mustProperlyCreatePacket() throws Exception {
  ExternalAddressNatPmpResponse resp=new ExternalAddressNatPmpResponse(1,0xFFFFFFFFL,TEST_ADDRESS);
  assertEquals(128,resp.getOp());
  assertEquals(1,resp.getResultCode());
  assertEquals(0xFFFFFFFFL,resp.getSecondsSinceStartOfEpoch());
  assertEquals(TEST_ADDRESS,resp.getAddress());
}",0.8696808510638298
130312,"@Test public void mustProperlyCreatePacketWithNonZeroPorts(){
  UdpMappingNatPmpRequest req=new UdpMappingNatPmpRequest(0xF1F2,0xF3F4,0xFFFFFFFFL);
  assertEquals(2,req.getOp());
  assertEquals(0xF1F2,req.getInternalPort());
  assertEquals(0xF3F4,req.getSuggestedExternalPort());
  assertEquals(0xFFFFFFFFL,req.getLifetime());
}","@Test public void mustProperlyCreatePacketWithNonZeroPorts(){
  UdpMappingNatPmpRequest req=new UdpMappingNatPmpRequest(0xF1F2,0xF3F4,0xFFFFFFFFL);
  assertEquals(1,req.getOp());
  assertEquals(0xF1F2,req.getInternalPort());
  assertEquals(0xF3F4,req.getSuggestedExternalPort());
  assertEquals(0xFFFFFFFFL,req.getLifetime());
}",0.6158536585365854
130313,"@Test public void mustParseCreatedPacket(){
  UdpMappingNatPmpRequest origReq=new UdpMappingNatPmpRequest(0xF1F2,0xF3F4,0xFFFFFFFFL);
  byte[] buffer=origReq.dump();
  UdpMappingNatPmpRequest parsedReq=new UdpMappingNatPmpRequest(buffer);
  assertEquals(2,parsedReq.getOp());
  assertEquals(0xF1F2,parsedReq.getInternalPort());
  assertEquals(0xF3F4,parsedReq.getSuggestedExternalPort());
  assertEquals(0xFFFFFFFFL,parsedReq.getLifetime());
}","@Test public void mustParseCreatedPacket(){
  UdpMappingNatPmpRequest origReq=new UdpMappingNatPmpRequest(0xF1F2,0xF3F4,0xFFFFFFFFL);
  byte[] buffer=origReq.dump();
  UdpMappingNatPmpRequest parsedReq=new UdpMappingNatPmpRequest(buffer);
  assertEquals(1,parsedReq.getOp());
  assertEquals(0xF1F2,parsedReq.getInternalPort());
  assertEquals(0xF3F4,parsedReq.getSuggestedExternalPort());
  assertEquals(0xFFFFFFFFL,parsedReq.getLifetime());
}",0.8284424379232506
130314,"@Test public void mustProperlyCreatePacket(){
  UdpMappingNatPmpRequest req=new UdpMappingNatPmpRequest(0xF1F2,0,0xFFFFFFFFL);
  assertEquals(2,req.getOp());
  assertEquals(0xF1F2,req.getInternalPort());
  assertEquals(0,req.getSuggestedExternalPort());
  assertEquals(0xFFFFFFFFL,req.getLifetime());
}","@Test public void mustProperlyCreatePacket(){
  UdpMappingNatPmpRequest req=new UdpMappingNatPmpRequest(0xF1F2,0,0xFFFFFFFFL);
  assertEquals(1,req.getOp());
  assertEquals(0xF1F2,req.getInternalPort());
  assertEquals(0,req.getSuggestedExternalPort());
  assertEquals(0xFFFFFFFFL,req.getLifetime());
}",0.7019867549668874
130315,"/** 
 * Construct a   {@link MappingNatPmpRequest} object.
 * @param op op code
 * @param internalPort internal port
 * @param suggestedExternalPort suggested external port ({@code 0} for no preference)
 * @param lifetime desired lifetime of mapping ({@code 0} to destroy mapping)
 * @throws IllegalArgumentException if {@code internalPort < 1 || > 65535}, or if   {@code suggestedExternalPort < 0 || > 65535}, or if  {@code lifetime < 0 || > 0xFFFFFFFFL}
 */
public MappingNatPmpRequest(int op,int internalPort,int suggestedExternalPort,long lifetime){
  super(op);
  this.internalPort=internalPort;
  this.suggestedExternalPort=suggestedExternalPort;
  this.lifetime=lifetime;
  validateState();
}","/** 
 * Construct a   {@link MappingNatPmpRequest} object.
 * @param op op code
 * @param internalPort internal port
 * @param suggestedExternalPort suggested external port ({@code 0} for no preference)
 * @param lifetime desired lifetime of mapping ({@code 0} to destroy mapping)
 * @throws IllegalArgumentException if {@code internalPort < 1 || > 65535}, or if   {@code suggestedExternalPort < 0 || > 65535}, or if  {@code lifetime < 0 || > 0xFFFFFFFFL}
 */
MappingNatPmpRequest(int op,int internalPort,int suggestedExternalPort,long lifetime){
  super(op);
  this.internalPort=internalPort;
  this.suggestedExternalPort=suggestedExternalPort;
  this.lifetime=lifetime;
  validateState();
}",0.9949676491732566
130316,"/** 
 * Construct a   {@link MappingNatPmpResponse} object.
 * @param op op code
 * @param internalPort internal port
 * @param resultCode result code (0 = success)
 * @param secondsSinceStartOfEpoch seconds since start of epoch
 * @param externalPort external port
 * @param lifetime desired lifetime of mapping ({@code 0} to destroy mapping)
 * @throws IllegalArgumentException if {@code internalPort < 1 || > 65535}, or if   {@code externalPort < 1 || > 65535}, or if  {@code lifetime < 0 || > 0xFFFFFFFFL}, or if   {@code externalPort < 0 || > 65535}, or if lifetime is   {@code 0} but external port isnot  {@code 0} (if both are 0, this means mapping has been deleted)
 */
public MappingNatPmpResponse(int op,int resultCode,long secondsSinceStartOfEpoch,int internalPort,int externalPort,long lifetime){
  super(op,resultCode,secondsSinceStartOfEpoch);
  this.internalPort=internalPort;
  this.externalPort=externalPort;
  this.lifetime=lifetime;
  validateState();
}","/** 
 * Construct a   {@link MappingNatPmpResponse} object.
 * @param op op code
 * @param internalPort internal port
 * @param resultCode result code (0 = success)
 * @param secondsSinceStartOfEpoch seconds since start of epoch
 * @param externalPort external port
 * @param lifetime desired lifetime of mapping ({@code 0} to destroy mapping)
 * @throws IllegalArgumentException if {@code internalPort < 1 || > 65535}, or if   {@code externalPort < 1 || > 65535}, or if  {@code lifetime < 0 || > 0xFFFFFFFFL}, or if   {@code externalPort < 0 || > 65535}, or if lifetime is   {@code 0} but external port isnot  {@code 0} (if both are 0, this means mapping has been deleted)
 */
MappingNatPmpResponse(int op,int resultCode,long secondsSinceStartOfEpoch,int internalPort,int externalPort,long lifetime){
  super(op,resultCode,secondsSinceStartOfEpoch);
  this.internalPort=internalPort;
  this.externalPort=externalPort;
  this.lifetime=lifetime;
  validateState();
}",0.996386164171399
130317,"public NatPmpRequest(byte[] buffer){
  Validate.notNull(buffer);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == NAT_PMP_VERSION);
  offset++;
  op=buffer[offset] & 0xFF;
  offset++;
}","NatPmpRequest(byte[] buffer){
  Validate.notNull(buffer);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == NAT_PMP_VERSION);
  offset++;
  op=buffer[offset] & 0xFF;
  offset++;
}",0.9868173258003766
130318,"public NatPmpResponse(byte[] buffer){
  Validate.notNull(buffer);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == NAT_PMP_VERSION);
  offset++;
  op=buffer[offset] & 0xFF;
  offset++;
  resultCode=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  secondsSinceStartOfEpoch=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
}","NatPmpResponse(byte[] buffer){
  Validate.notNull(buffer);
  Validate.isTrue(buffer.length >= HEADER_LENGTH);
  int offset=0;
  int version=buffer[offset] & 0xFF;
  Validate.isTrue(version == NAT_PMP_VERSION);
  offset++;
  op=buffer[offset] & 0xFF;
  offset++;
  resultCode=InternalUtils.bytesToShort(buffer,offset);
  offset+=2;
  secondsSinceStartOfEpoch=InternalUtils.bytesToInt(buffer,offset) & 0xFFFFFFFFL;
  offset+=4;
}",0.991869918699187
130319,"public void savedMessage(){
  Message message=new Message();
  message.obj=getPhotoFile().toString();
  sendCameraHandlerMessage(SAVED_FRAME,message);
}","public void savedMessage(){
  Message message=new Message();
  message.obj=getScreenShotFile().toString();
  sendCameraHandlerMessage(SAVED_FRAME,message);
}",0.970873786407767
130320,"/** 
 * The comments above are directly from the Grafika library. I shifted a lot of its content to this section so it makes sense to have it as a reminder. This method saves the contents of a Bytebuffer to an output stream, and generates a bitmap from that. It also applies any scaling and rotates/mirrors the image to take into account OpenGL scaling.
 * @param buf must be rewound prior to being passed to this method.Essentially buff must be declared, and GLReadPixels called, then the buffer rewound Then it is ready to be passed to this method. It's important to do these preparation steps in an EGL context, and not on their own. That's why we make sure not to include them here. Maybe not a good idea?
 * @param width
 * @param height
 * @throws IOException
 */
public void saveBitmapFromBuffer(ByteBuffer buf,int width,int height) throws IOException {
  BufferedOutputStream bos=null;
  try {
    Long startTime=System.currentTimeMillis();
    savingMessage();
    bos=new BufferedOutputStream(new FileOutputStream(getPhotoFile().toString()));
    Bitmap bmp=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    bmp.copyPixelsFromBuffer(buf);
    Matrix m=new Matrix();
    m.preScale(-getScale(),getScale());
    m.postRotate(180);
    bmp=Bitmap.createBitmap(bmp,0,0,width,height,m,false);
    bmp.compress(Bitmap.CompressFormat.PNG,50,bos);
    bmp.recycle();
    Log.i(""String_Node_Str"",String.valueOf(System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  IOException e) {
    failedFrameMessage(e.getMessage());
    throw e;
  }
 finally {
    savedMessage();
    if (bos != null) {
      bos.close();
      bos.flush();
    }
  }
  Log.d(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str""+ getPhotoFile().toString()+ ""String_Node_Str"");
}","/** 
 * The comments above are directly from the Grafika library. I shifted a lot of its content to this section so it makes sense to have it as a reminder. This method saves the contents of a Bytebuffer to an output stream, and generates a bitmap from that. It also applies any scaling and rotates/mirrors the image to take into account OpenGL scaling.
 * @param buf must be rewound prior to being passed to this method.Essentially buff must be declared, and GLReadPixels called, then the buffer rewound Then it is ready to be passed to this method. It's important to do these preparation steps in an EGL context, and not on their own. That's why we make sure not to include them here. Maybe not a good idea?
 * @param width
 * @param height
 * @throws IOException
 */
public void saveBitmapFromBuffer(ByteBuffer buf,int width,int height) throws IOException {
  BufferedOutputStream bos=null;
  try {
    Long startTime=System.currentTimeMillis();
    savingMessage();
    setScreenShotFile();
    bos=new BufferedOutputStream(new FileOutputStream(getScreenShotFile().toString()));
    Bitmap bmp=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    bmp.copyPixelsFromBuffer(buf);
    Matrix m=new Matrix();
    m.preScale(-getScale(),getScale());
    m.postRotate(180);
    bmp=Bitmap.createBitmap(bmp,0,0,width,height,m,false);
    bmp.compress(Bitmap.CompressFormat.PNG,50,bos);
    bmp.recycle();
    Log.i(""String_Node_Str"",String.valueOf(System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
 catch (  IOException e) {
    failedFrameMessage(e.getMessage());
    throw e;
  }
 finally {
    savedMessage();
    if (bos != null) {
      bos.close();
      bos.flush();
    }
  }
  Log.d(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str""+ getScreenShotFile().toString()+ ""String_Node_Str"");
}",0.9849603500136724
130321,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,true,false);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is not equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,true,false);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.985483870967742
130322,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,new byte[]{2,3},new byte[]{0,1});
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is not equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,new byte[]{2,3},new byte[]{0,1});
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str""));
  }
}",0.9845626072041166
130323,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23),TimeValue.of(9,1)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is not equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23),TimeValue.of(9,1)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9916743755781684
130324,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is not equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.991236611489776
130325,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,9,8);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is not equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,9,8);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9853181076672104
130326,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,9,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is not equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,9,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.99668995954395
130327,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),TimeValue.of(9,1));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is not equal to.
 */
@Test public void should_fail_because_value_is_not_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueEquality.isEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),TimeValue.of(9,1));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9863429438543247
130328,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,true,true);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,true,true);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9870759289176092
130329,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,new byte[]{0,1},new byte[]{0,1});
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,new byte[]{0,1},new byte[]{0,1});
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str""));
  }
}",0.986277873070326
130330,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23),TimeValue.of(9,1)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateTimeValue.of(DateValue.of(2007,12,23),TimeValue.of(9,1)));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9926402943882244
130331,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),DateValue.of(2007,12,23));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9922555663117134
130332,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,8,8);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,8,8);
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9869494290375204
130333,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,8,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,""String_Node_Str"",""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,8,""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Date.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Timestamp.valueOf(""String_Node_Str""),""String_Node_Str"");
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9970961887477314
130334,"/** 
 * This method should fail because the value is greater than or equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),TimeValue.of(9,1));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}","/** 
 * This method should fail because the value is equal to.
 */
@Test public void should_fail_because_value_is_equal_to(){
  WritableAssertionInfo info=new WritableAssertionInfo();
  info.description(""String_Node_Str"");
  Table table=new Table();
  TableAssert tableAssert=assertThat(table);
  try {
    AssertionsOnValueNonEquality.isNotEqualTo(tableAssert,info,Time.valueOf(""String_Node_Str""),TimeValue.of(9,1));
    fail(""String_Node_Str"");
  }
 catch (  AssertionError e) {
    Assertions.assertThat(e.getMessage()).isEqualTo(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  }
}",0.9878603945371776
130335,"/** 
 * Returns the catalog from a connection.
 * @param connection The connection with the catalog
 * @return The catalog from a connection.
 * @throws SQLException SQL Exception
 */
protected static String getCatalog(Connection connection) throws SQLException {
  Class<? extends Connection> connectionClass=connection.getClass();
  Method[] methods=connectionClass.getMethods();
  for (  Method method : methods) {
    if (""String_Node_Str"".equals(method.getName())) {
      int modifiers=method.getModifiers();
      if (Modifier.isAbstract(modifiers)) {
        return null;
      }
    }
  }
  return connection.getCatalog();
}","/** 
 * Returns the catalog from a connection.
 * @param connection The connection with the catalog
 * @return The catalog from a connection.
 * @throws SQLException SQL Exception
 */
protected static String getCatalog(Connection connection) throws SQLException {
  try {
    return connection.getCatalog();
  }
 catch (  SQLException exception) {
    throw exception;
  }
catch (  Throwable throwable) {
    return null;
  }
}",0.5641509433962264
130336,"/** 
 * Returns the schema from a connection.
 * @param connection The connection with the catalog
 * @return The schema from a connection.
 * @throws SQLException SQL Exception
 */
protected static String getSchema(Connection connection) throws SQLException {
  Class<? extends Connection> connectionClass=connection.getClass();
  Method[] methods=connectionClass.getMethods();
  for (  Method method : methods) {
    if (""String_Node_Str"".equals(method.getName())) {
      int modifiers=method.getModifiers();
      if (Modifier.isAbstract(modifiers)) {
        return null;
      }
    }
  }
  return connection.getSchema();
}","/** 
 * Returns the schema from a connection.
 * @param connection The connection with the catalog
 * @return The schema from a connection.
 * @throws SQLException SQL Exception
 */
protected static String getSchema(Connection connection) throws SQLException {
  try {
    return connection.getSchema();
  }
 catch (  SQLException exception) {
    throw exception;
  }
catch (  Throwable throwable) {
    return null;
  }
}",0.5893536121673004
130337,"/** 
 * {@inheritDoc} 
 */
@Override public ChangeRowAssert rowAtStartPoint(){
  if (changeRowAssertAtStartPoint == null) {
    StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
    stringBuilder.append(info.descriptionText());
    changeRowAssertAtStartPoint=new ChangeRowAssert(this,change.getRowAtStartPoint()).as(stringBuilder.toString());
  }
  return changeRowAssertAtStartPoint;
}","/** 
 * {@inheritDoc} 
 */
@Override public ChangeRowAssert rowAtStartPoint(){
  if (changeRowAssertAtStartPoint == null) {
    String string=""String_Node_Str"" + info.descriptionText();
    changeRowAssertAtStartPoint=new ChangeRowAssert(this,change.getRowAtStartPoint()).as(string);
  }
  return changeRowAssertAtStartPoint;
}",0.7534246575342466
130338,"/** 
 * {@inheritDoc} 
 */
@Override public ChangeRowAssert rowAtEndPoint(){
  if (changeRowAssertAtEndPoint == null) {
    StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
    stringBuilder.append(info.descriptionText());
    changeRowAssertAtEndPoint=new ChangeRowAssert(this,change.getRowAtEndPoint()).as(stringBuilder.toString());
  }
  return changeRowAssertAtEndPoint;
}","/** 
 * {@inheritDoc} 
 */
@Override public ChangeRowAssert rowAtEndPoint(){
  if (changeRowAssertAtEndPoint == null) {
    String string=""String_Node_Str"" + info.descriptionText();
    changeRowAssertAtEndPoint=new ChangeRowAssert(this,change.getRowAtEndPoint()).as(string);
  }
  return changeRowAssertAtEndPoint;
}",0.447887323943662
130339,"/** 
 * {@inheritDoc} 
 */
@Override public ChangeColumnValueAssert valueAtStartPoint(){
  if (changeColumnValueAssertAtStartPoint == null) {
    StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
    stringBuilder.append(info.descriptionText());
    changeColumnValueAssertAtStartPoint=new ChangeColumnValueAssert(this,valueAtStartPoint).as(stringBuilder.toString());
  }
  return changeColumnValueAssertAtStartPoint;
}","/** 
 * {@inheritDoc} 
 */
@Override public ChangeColumnValueAssert valueAtStartPoint(){
  if (changeColumnValueAssertAtStartPoint == null) {
    String string=""String_Node_Str"" + info.descriptionText();
    changeColumnValueAssertAtStartPoint=new ChangeColumnValueAssert(this,valueAtStartPoint).as(string);
  }
  return changeColumnValueAssertAtStartPoint;
}",0.8790931989924433
130340,"/** 
 * {@inheritDoc} 
 */
@Override public ChangeColumnValueAssert valueAtEndPoint(){
  if (changeColumnValueAssertAtEndPoint == null) {
    StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
    stringBuilder.append(info.descriptionText());
    changeColumnValueAssertAtEndPoint=new ChangeColumnValueAssert(this,valueAtEndPoint).as(stringBuilder.toString());
  }
  return changeColumnValueAssertAtEndPoint;
}","/** 
 * {@inheritDoc} 
 */
@Override public ChangeColumnValueAssert valueAtEndPoint(){
  if (changeColumnValueAssertAtEndPoint == null) {
    String string=""String_Node_Str"" + info.descriptionText();
    changeColumnValueAssertAtEndPoint=new ChangeColumnValueAssert(this,valueAtEndPoint).as(string);
  }
  return changeColumnValueAssertAtEndPoint;
}",0.8501291989664083
130341,"/** 
 * Verifies that the names of columns with a modification in the values between the start point and the end point is equals to the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Writable information about an assertion.
 * @param change    The change.
 * @param names     The names of the modified columns.
 * @return {@code this} assertion object.
 * @throws AssertionError If the names of the modified columns are different to the names in parameters.
 */
public static <A extends AbstractAssert>A hasModifiedColumns(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> namesList=new ArrayList<String>();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  Integer[] indexesOfModifiedColumns=Changes.getIndexesOfModifiedColumns(change);
  String[] namesOfModifiedColumns=new String[names.length];
  List<String> columnsNameList=change.getColumnsNameList();
  for (int i=0; i < indexesOfModifiedColumns.length; i++) {
    namesOfModifiedColumns[i]=columnsNameList.get(indexesOfModifiedColumns[i]);
  }
  List<String> namesOfModifiedList=Arrays.asList(namesOfModifiedColumns);
  Collections.sort(namesOfModifiedList);
  if (!namesList.equals(namesOfModifiedList)) {
    throw failures.failure(info,shouldHaveModifications(namesOfModifiedColumns,names));
  }
  return assertion;
}","/** 
 * Verifies that the names of columns with a modification in the values between the start point and the end point is equals to the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Writable information about an assertion.
 * @param change    The change.
 * @param names     The names of the modified columns.
 * @return {@code this} assertion object.
 * @throws AssertionError If the names of the modified columns are different to the names in parameters.
 */
public static <A extends AbstractAssert>A hasModifiedColumns(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> namesList=new ArrayList<>();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  Integer[] indexesOfModifiedColumns=Changes.getIndexesOfModifiedColumns(change);
  String[] namesOfModifiedColumns=new String[names.length];
  List<String> columnsNameList=change.getColumnsNameList();
  for (int i=0; i < indexesOfModifiedColumns.length; i++) {
    namesOfModifiedColumns[i]=columnsNameList.get(indexesOfModifiedColumns[i]);
  }
  List<String> namesOfModifiedList=Arrays.asList(namesOfModifiedColumns);
  Collections.sort(namesOfModifiedList);
  if (!namesList.equals(namesOfModifiedList)) {
    throw failures.failure(info,shouldHaveModifications(namesOfModifiedColumns,names));
  }
  return assertion;
}",0.998185117967332
130342,"/** 
 * Verifies that the columns og the primary key of the rows of the change is the same as the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Writable information about an assertion.
 * @param change    The change.
 * @param names     The names of the primary key associated with the rows of the change.
 * @return {@code this} assertion object.
 * @throws AssertionError                 If the columns of the primary key are different to the names in parameters.
 * @throws java.lang.NullPointerException If one of the names in parameters is {@code null}.
 */
public static <A extends AbstractAssert>A hasPksNames(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> pksNameList=change.getPksNameList();
  List<String> pksList=new ArrayList<String>(pksNameList);
  Collections.sort(pksList);
  List<String> namesList=new ArrayList<String>();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  if (!namesList.equals(pksList)) {
    String[] pksNames=pksNameList.toArray(new String[pksNameList.size()]);
    throw failures.failure(info,shouldHavePksNames(pksNames,names));
  }
  return assertion;
}","/** 
 * Verifies that the columns og the primary key of the rows of the change is the same as the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Writable information about an assertion.
 * @param change    The change.
 * @param names     The names of the primary key associated with the rows of the change.
 * @return {@code this} assertion object.
 * @throws AssertionError                 If the columns of the primary key are different to the names in parameters.
 * @throws java.lang.NullPointerException If one of the names in parameters is {@code null}.
 */
public static <A extends AbstractAssert>A hasPksNames(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> pksNameList=change.getPksNameList();
  List<String> pksList=new ArrayList<>(pksNameList);
  Collections.sort(pksList);
  List<String> namesList=new ArrayList<>();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  if (!namesList.equals(pksList)) {
    String[] pksNames=pksNameList.toArray(new String[pksNameList.size()]);
    throw failures.failure(info,shouldHavePksNames(pksNames,names));
  }
  return assertion;
}",0.9959128065395096
130343,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeAfter(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeAfter(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.9766454352441614
130344,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeAfterOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeAfterOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.977319587628866
130345,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeBefore(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeBefore(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.9767441860465116
130346,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeBeforeOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeBeforeOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.9774127310061602
130347,"/** 
 * Constructor.
 * @param expected The expected type.
 * @param tested   The tested type.
 */
public ShouldBeChangeType(ChangeType expected,ChangeType tested){
  super(EXPECTED_MESSAGE,expected,tested);
}","/** 
 * Constructor.
 * @param expected The expected type.
 * @param tested   The tested type.
 */
private ShouldBeChangeType(ChangeType expected,ChangeType tested){
  super(EXPECTED_MESSAGE,expected,tested);
}",0.9785202863961814
130348,"/** 
 * Constructor.
 * @param expected The expected type.
 * @param tested   The tested type.
 */
public ShouldBeDataType(DataType expected,DataType tested){
  super(EXPECTED_MESSAGE,expected,tested);
}","/** 
 * Constructor.
 * @param expected The expected type.
 * @param tested   The tested type.
 */
private ShouldBeDataType(DataType expected,DataType tested){
  super(EXPECTED_MESSAGE,expected,tested);
}",0.977886977886978
130349,"/** 
 * Constructor.
 * @param index The index of the value.
 */
public ShouldBeEqual(int index){
  super(EXPECTED_MESSAGE_BUT_NOT_WITH_INDEX,index);
}","/** 
 * Constructor.
 * @param index The index of the value.
 */
private ShouldBeEqual(int index){
  super(EXPECTED_MESSAGE_BUT_NOT_WITH_INDEX,index);
}",0.9702970297029704
130350,"/** 
 * Constructor.
 */
public ShouldBeEqualWithEndPoint(){
  super(EXPECTED_MESSAGE_WITHOUT_VALUES);
}","/** 
 * Constructor.
 */
private ShouldBeEqualWithEndPoint(){
  super(EXPECTED_MESSAGE_WITHOUT_VALUES);
}",0.9569377990430622
130351,"/** 
 * Constructor.
 */
public ShouldBeEqualWithStartPoint(){
  super(EXPECTED_MESSAGE_WITHOUT_VALUES);
}","/** 
 * Constructor.
 */
private ShouldBeEqualWithStartPoint(){
  super(EXPECTED_MESSAGE_WITHOUT_VALUES);
}",0.9577464788732394
130352,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeGreater(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeGreater(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.9768421052631578
130353,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeGreaterOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeGreaterOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.9775051124744376
130354,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeLess(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeLess(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.976545842217484
130355,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
public ShouldBeLessOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected value to compare to.
 */
private ShouldBeLessOrEqual(Object actual,Object expected){
  super(""String_Node_Str"",actual,expected);
}",0.9772256728778468
130356,"/** 
 * Constructor.
 * @param valueAtStartPoint The value at start point.
 * @param valueAtEndPoint The value at end point.
 */
public ShouldBeModified(Object valueAtStartPoint,Object valueAtEndPoint){
  super(""String_Node_Str"",valueAtStartPoint,valueAtEndPoint);
}","/** 
 * Constructor.
 * @param valueAtStartPoint The value at start point.
 * @param valueAtEndPoint The value at end point.
 */
private ShouldBeModified(Object valueAtStartPoint,Object valueAtEndPoint){
  super(""String_Node_Str"",valueAtStartPoint,valueAtEndPoint);
}",0.9793621013133208
130357,"/** 
 * Constructor.
 * @param expected The expected table.
 * @param tested   The tested table.
 */
public ShouldBeOnTable(String expected,String tested){
  super(EXPECTED_MESSAGE,expected,tested);
}","/** 
 * Constructor.
 * @param expected The expected table.
 * @param tested   The tested table.
 */
private ShouldBeOnTable(String expected,String tested){
  super(EXPECTED_MESSAGE,expected,tested);
}",0.9775561097256856
130358,"/** 
 * Constructor.
 * @param index The index of the value.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected type.
 * @param tested The tested type.
 */
public ShouldBeValueType(int index,Object actual,ValueType expected,ValueType tested){
  super(EXPECTED_MESSAGE_WITH_INDEX,index,actual,expected,tested);
}","/** 
 * Constructor.
 * @param index The index of the value.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected type.
 * @param tested The tested type.
 */
private ShouldBeValueType(int index,Object actual,ValueType expected,ValueType tested){
  super(EXPECTED_MESSAGE_WITH_INDEX,index,actual,expected,tested);
}",0.984352773826458
130359,"/** 
 * Constructor.
 * @param index The index of the value.
 * @param actual The actual value in the failed assertion.
 * @param tested The tested type.
 * @param expected The expected types.
 */
public ShouldBeValueTypeOfAny(int index,Object actual,ValueType tested,ValueType... expected){
  super(EXPECTED_MESSAGE_WITH_INDEX,index,actual,expected,tested);
}","/** 
 * Constructor.
 * @param index The index of the value.
 * @param actual The actual value in the failed assertion.
 * @param tested The tested type.
 * @param expected The expected types.
 */
private ShouldBeValueTypeOfAny(int index,Object actual,ValueType tested,ValueType... expected){
  super(EXPECTED_MESSAGE_WITH_INDEX,index,actual,expected,tested);
}",0.984743411927878
130360,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param tested The tested type.
 * @param expected The expected types.
 */
public ShouldBeValueTypeOfAnyWithEndPoint(Object actual,ValueType tested,ValueType... expected){
  super(EXPECTED_MESSAGE,actual,expected,tested);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param tested The tested type.
 * @param expected The expected types.
 */
private ShouldBeValueTypeOfAnyWithEndPoint(Object actual,ValueType tested,ValueType... expected){
  super(EXPECTED_MESSAGE,actual,expected,tested);
}",0.9819967266775778
130361,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param tested The tested type.
 * @param expected The expected types.
 */
public ShouldBeValueTypeOfAnyWithStartPoint(Object actual,ValueType tested,ValueType... expected){
  super(EXPECTED_MESSAGE,actual,expected,tested);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param tested The tested type.
 * @param expected The expected types.
 */
private ShouldBeValueTypeOfAnyWithStartPoint(Object actual,ValueType tested,ValueType... expected){
  super(EXPECTED_MESSAGE,actual,expected,tested);
}",0.9821138211382112
130362,"/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected type.
 * @param tested The tested type.
 */
public ShouldBeValueTypeWithEndPoint(Object actual,ValueType expected,ValueType tested){
  super(EXPECTED_MESSAGE,actual,expected,tested);
}","/** 
 * Constructor.
 * @param actual The actual value in the failed assertion.
 * @param expected The expected type.
 * @param tested The tested type.
 */
private ShouldBeValueTypeWithEndPoint(Object actual,ValueType expected,ValueType tested){
  super(EXPECTED_MESSAGE,actual,expected,tested);
}",0.981450252951096
130363,"/** 
 * Verifies that the names of columns with a modification in the values between the start point and the end point is equals to the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Info on the object to assert.
 * @param change    The change.
 * @param names     The names of the modified columns.
 * @return {@code this} assertion object.
 * @throws AssertionError If the names of the modified columns are different to the names in parameters.
 */
public static <A extends AbstractAssert>A hasModifiedColumns(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> namesList=new ArrayList();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  Integer[] indexesOfModifiedColumns=Changes.getIndexesOfModifiedColumns(change);
  String[] namesOfModifiedColumns=new String[names.length];
  List<String> columnsNameList=change.getColumnsNameList();
  for (int i=0; i < indexesOfModifiedColumns.length; i++) {
    namesOfModifiedColumns[i]=columnsNameList.get(indexesOfModifiedColumns[i]);
  }
  List<String> namesOfModifiedList=Arrays.asList(namesOfModifiedColumns);
  Collections.sort(namesOfModifiedList);
  if (!namesList.equals(namesOfModifiedList)) {
    throw failures.failure(info,shouldHaveModifications(namesOfModifiedColumns,names));
  }
  return assertion;
}","/** 
 * Verifies that the names of columns with a modification in the values between the start point and the end point is equals to the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Info on the object to assert.
 * @param change    The change.
 * @param names     The names of the modified columns.
 * @return {@code this} assertion object.
 * @throws AssertionError If the names of the modified columns are different to the names in parameters.
 */
public static <A extends AbstractAssert>A hasModifiedColumns(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> namesList=new ArrayList<String>();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  Integer[] indexesOfModifiedColumns=Changes.getIndexesOfModifiedColumns(change);
  String[] namesOfModifiedColumns=new String[names.length];
  List<String> columnsNameList=change.getColumnsNameList();
  for (int i=0; i < indexesOfModifiedColumns.length; i++) {
    namesOfModifiedColumns[i]=columnsNameList.get(indexesOfModifiedColumns[i]);
  }
  List<String> namesOfModifiedList=Arrays.asList(namesOfModifiedColumns);
  Collections.sort(namesOfModifiedList);
  if (!namesList.equals(namesOfModifiedList)) {
    throw failures.failure(info,shouldHaveModifications(namesOfModifiedColumns,names));
  }
  return assertion;
}",0.9975624619134674
130364,"/** 
 * Verifies that the columns og the primary key of the rows of the change is the same as the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Info on the object to assert.
 * @param change    The change.
 * @param names     The names of the primary key associated with the rows of the change.
 * @return {@code this} assertion object.
 * @throws AssertionError                 If the columns of the primary key are different to the names in parameters.
 * @throws java.lang.NullPointerException If one of the names in parameters is {@code null}.
 */
public static <A extends AbstractAssert>A hasPksNames(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> pksNameList=change.getPksNameList();
  List<String> pksList=new ArrayList(pksNameList);
  Collections.sort(pksList);
  List<String> namesList=new ArrayList();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  if (!namesList.equals(pksList)) {
    String[] pksNames=pksNameList.toArray(new String[pksNameList.size()]);
    throw failures.failure(info,shouldHavePksNames(pksNames,names));
  }
  return assertion;
}","/** 
 * Verifies that the columns og the primary key of the rows of the change is the same as the parameters.
 * @param < A >       The type of the assertion which call this method.
 * @param assertion The assertion which call this method.
 * @param info      Info on the object to assert.
 * @param change    The change.
 * @param names     The names of the primary key associated with the rows of the change.
 * @return {@code this} assertion object.
 * @throws AssertionError                 If the columns of the primary key are different to the names in parameters.
 * @throws java.lang.NullPointerException If one of the names in parameters is {@code null}.
 */
public static <A extends AbstractAssert>A hasPksNames(A assertion,WritableAssertionInfo info,Change change,String... names){
  if (names == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  List<String> pksNameList=change.getPksNameList();
  List<String> pksList=new ArrayList<String>(pksNameList);
  Collections.sort(pksList);
  List<String> namesList=new ArrayList<String>();
  for (  String name : names) {
    if (name == null) {
      throw new NullPointerException(""String_Node_Str"");
    }
    namesList.add(name.toUpperCase());
  }
  Collections.sort(namesList);
  if (!namesList.equals(pksList)) {
    String[] pksNames=pksNameList.toArray(new String[pksNameList.size()]);
    throw failures.failure(info,shouldHavePksNames(pksNames,names));
  }
  return assertion;
}",0.9601374570446736
130365,"/** 
 * This method tests the   {@code haveValuesEqualTo} assertion method.
 */
@Test public void test_haveValuesEqualTo_assertion(){
  Table table=new Table(source,""String_Node_Str"");
  assertThat(table).column().as(""String_Node_Str"").haveValuesEqualTo(1,10,100,0).column(""String_Node_Str"").haveValuesEqualTo(2,20,25,0).column().as(""String_Node_Str"").haveValuesEqualTo(3,30,300,0).column().as(""String_Node_Str"").haveValuesEqualTo(4,40,400,0).column().as(""String_Node_Str"").haveValuesEqualTo(5.6,50.6,500.6,0).column().as(""String_Node_Str"").haveValuesEqualTo(7.8,70.8,700.8,0).column(""String_Node_Str"").haveValuesEqualTo(5,50,500,500).column().as(""String_Node_Str"").haveValuesEqualTo(7,70,700,700);
  Table table2=new Table(source,""String_Node_Str"");
  assertThat(table2).column(""String_Node_Str"").haveValuesEqualTo(1,null).column(""String_Node_Str"").haveValuesEqualTo(2,null).column(""String_Node_Str"").haveValuesEqualTo(3,null).column(""String_Node_Str"").haveValuesEqualTo(4,null).column(""String_Node_Str"").haveValuesEqualTo(5.6,null).column(""String_Node_Str"").haveValuesEqualTo(7.8,null).column(""String_Node_Str"").haveValuesEqualTo(5,null).column(""String_Node_Str"").haveValuesEqualTo(7,null);
}","/** 
 * This method tests the   {@code haveValuesEqualTo} assertion method.
 */
@Test public void test_haveValuesEqualTo_assertion(){
  Table table=new Table(source,""String_Node_Str"");
  assertThat(table).column().as(""String_Node_Str"").haveValuesEqualTo(1,10,100,1000).column(""String_Node_Str"").haveValuesEqualTo(2,20,25,0).column().as(""String_Node_Str"").haveValuesEqualTo(3,30,300,0).column().as(""String_Node_Str"").haveValuesEqualTo(4,40,400,0).column().as(""String_Node_Str"").haveValuesEqualTo(5.6,50.6,500.6,0).column().as(""String_Node_Str"").haveValuesEqualTo(7.8,70.8,700.8,0).column(""String_Node_Str"").haveValuesEqualTo(5,50,500,500).column().as(""String_Node_Str"").haveValuesEqualTo(7,70,700,700);
  Table table2=new Table(source,""String_Node_Str"");
  assertThat(table2).column(""String_Node_Str"").haveValuesEqualTo(1,null).column(""String_Node_Str"").haveValuesEqualTo(2,null).column(""String_Node_Str"").haveValuesEqualTo(3,null).column(""String_Node_Str"").haveValuesEqualTo(4,null).column(""String_Node_Str"").haveValuesEqualTo(5.6,null).column(""String_Node_Str"").haveValuesEqualTo(7.8,null).column(""String_Node_Str"").haveValuesEqualTo(5,null).column(""String_Node_Str"").haveValuesEqualTo(7,null);
}",0.998745294855709
130366,"/** 
 * This method tests the   {@code haveValuesEqualTo} assertion method.
 */
@Test public void test_haveValuesEqualTo_assertion(){
  Table table=new Table(source,""String_Node_Str"");
  assertThat(table).row().haveValuesEqualTo(1,true,2,3,4,5.6,7.8,TimeValue.of(9,46,30),DateValue.of(2014,5,24),DateTimeValue.of(DateValue.of(2014,5,24),TimeValue.of(9,46,30)),bytesH2,""String_Node_Str"",5,7).haveValuesEqualTo(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bytesH2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").row().haveValuesEqualTo(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TimeValue.of(12,29,49),DateValue.of(2014,5,30),DateTimeValue.of(DateValue.of(2014,5,30),TimeValue.of(12,29,49)),bytesDev,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").haveValuesEqualTo(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TimeValue.of(12,29,49),""String_Node_Str"",DateTimeValue.of(DateValue.of(2014,5,30),TimeValue.of(12,29,49)),bytesDev,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").row().haveValuesEqualTo(100,false,25,300,400,500.6,700.8,TimeValue.of(12,29,49),DateValue.of(2014,5,30),DateValue.of(2014,5,30),bytesDev,""String_Node_Str"",500,700).row().haveValuesEqualTo(0,false,0,0,0,0,0,TimeValue.of(12,29,49),DateValue.of(2014,5,30),DateValue.of(2014,5,30),bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(0,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(0,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(0,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(0,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700);
  Table table2=new Table(source,""String_Node_Str"");
  assertThat(table2).row().haveValuesEqualTo(1,true,2,3,4,5.6,7.8,TimeValue.of(9,46,30),DateValue.of(2014,5,24),DateTimeValue.of(DateValue.of(2014,5,24),TimeValue.of(9,46,30)),bytesH2,""String_Node_Str"",5,7,null).row().haveValuesEqualTo(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
}","/** 
 * This method tests the   {@code haveValuesEqualTo} assertion method.
 */
@Test public void test_haveValuesEqualTo_assertion(){
  Table table=new Table(source,""String_Node_Str"");
  assertThat(table).row().haveValuesEqualTo(1,true,2,3,4,5.6,7.8,TimeValue.of(9,46,30),DateValue.of(2014,5,24),DateTimeValue.of(DateValue.of(2014,5,24),TimeValue.of(9,46,30)),bytesH2,""String_Node_Str"",5,7).haveValuesEqualTo(""String_Node_Str"",true,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bytesH2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").row().haveValuesEqualTo(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TimeValue.of(12,29,49),DateValue.of(2014,5,30),DateTimeValue.of(DateValue.of(2014,5,30),TimeValue.of(12,29,49)),bytesDev,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").haveValuesEqualTo(""String_Node_Str"",false,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TimeValue.of(12,29,49),""String_Node_Str"",DateTimeValue.of(DateValue.of(2014,5,30),TimeValue.of(12,29,49)),bytesDev,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").row().haveValuesEqualTo(100,false,25,300,400,500.6,700.8,TimeValue.of(12,29,49),DateValue.of(2014,5,30),DateValue.of(2014,5,30),bytesDev,""String_Node_Str"",500,700).row().haveValuesEqualTo(1000,false,0,0,0,0,0,TimeValue.of(12,29,49),DateValue.of(2014,5,30),DateValue.of(2014,5,30),bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(1000,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(1000,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(1000,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700).haveValuesEqualTo(1000,false,0,0,0,0,0,TimeValue.of(12,29,49),""String_Node_Str"",""String_Node_Str"",bytesDev,""String_Node_Str"",500,700);
  Table table2=new Table(source,""String_Node_Str"");
  assertThat(table2).row().haveValuesEqualTo(1,true,2,3,4,5.6,7.8,TimeValue.of(9,46,30),DateValue.of(2014,5,24),DateTimeValue.of(DateValue.of(2014,5,24),TimeValue.of(9,46,30)),bytesH2,""String_Node_Str"",5,7,null).row().haveValuesEqualTo(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);
}",0.9969592540036488
130367,"/** 
 * This method tests that the value is equal to zero.
 */
@Test public void test_if_value_is_zero(){
  Table table=new Table(source,""String_Node_Str"");
  assertThat(table).row(3).value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero();
}","/** 
 * This method tests that the value is equal to zero.
 */
@Test public void test_if_value_is_zero(){
  Table table=new Table(source,""String_Node_Str"");
  assertThat(table).row(3).value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero().returnToRow().value(""String_Node_Str"").isZero();
}",0.944954128440367
130368,"/** 
 * Collects rows from a   {@link ResultSet}. <p> This method browse the   {@link ResultSet} in parameter to get the data and fill the list of {@link Row} ({@link #rowsList}) with these data. </p>
 * @param resultSet The {@link ResultSet}.
 * @throws SQLException A SQL Exception.
 */
protected void collectRowsFromResultSet(ResultSet resultSet) throws SQLException {
  rowsList=new ArrayList<Row>();
  while (resultSet.next()) {
    List<Object> objectsList=new ArrayList<Object>();
    for (    String columnName : columnsNameList) {
      objectsList.add(resultSet.getObject(columnName));
    }
    rowsList.add(new Row(pksNameList,columnsNameList,objectsList));
  }
}","/** 
 * Collects rows from a   {@link ResultSet}. <p> This method browse the   {@link ResultSet} in parameter to get the data and fill the list of {@link Row} ({@link #rowsList}) with these data. </p>
 * @param resultSet The {@link ResultSet}.
 * @throws SQLException A SQL Exception.
 */
protected void collectRowsFromResultSet(ResultSet resultSet) throws SQLException {
  ResultSetMetaData metaData=resultSet.getMetaData();
  rowsList=new ArrayList<Row>();
  while (resultSet.next()) {
    List<Object> objectsList=new ArrayList<Object>();
    for (    String columnName : columnsNameList) {
      int index=columnsNameList.indexOf(columnName);
      int type=metaData.getColumnType(index + 1);
switch (type) {
case Types.DATE:
        objectsList.add(resultSet.getDate(columnName));
      break;
case Types.TIME:
    objectsList.add(resultSet.getTime(columnName));
  break;
case Types.TIMESTAMP:
objectsList.add(resultSet.getTimestamp(columnName));
break;
default :
objectsList.add(resultSet.getObject(columnName));
break;
}
}
rowsList.add(new Row(pksNameList,columnsNameList,objectsList));
}
}",0.7505643340857788
130369,"/** 
 * @param module
 * @param registerOpcode
 * @param data
 */
private void queueCommand(byte[] command){
  boolean first=true;
  String str=""String_Node_Str"";
  for (  byte b : command) {
    if (first) {
      str+=String.format(""String_Node_Str"",b);
      first=false;
    }
 else {
      str+=String.format(""String_Node_Str"",b);
    }
  }
  str+=""String_Node_Str"";
  Log.d(""String_Node_Str"",str);
  commandBytes.add(command);
  if (deviceState == DeviceState.READY) {
    deviceState=DeviceState.WRITING_CHARACTERISTICS;
    writeCommand();
  }
}","/** 
 * @param module
 * @param registerOpcode
 * @param data
 */
private void queueCommand(byte[] command){
  commandBytes.add(command);
  if (deviceState == DeviceState.READY) {
    deviceState=DeviceState.WRITING_CHARACTERISTICS;
    writeCommand();
  }
}",0.6362515413070283
130370,"/** 
 * Get the controller for the desired module
 * @param module Module to control
 * @return Controller for the desired module
 */
public ModuleController getModuleController(Module module);","/** 
 * Get the controller for the desired module
 * @param module Module to control
 * @param clean True if a new ModuleController should be instantiated 
 * @return Controller for the desired module
 */
public ModuleController getModuleController(Module module,boolean clean);",0.7430997876857749
130371,"/** 
 * Adds a filter.  When the filter has been added, the   {@link Callbacks#receivedFilterId(byte)} callback function will be called with a user id representing the new filter
 * @param trigger Trigger to filter data on
 * @param config Configuration of the filter to add
 */
public void addFilter(Trigger trigger,FilterConfig config);","/** 
 * Adds a filter that operates on the trigger output.  Filter triggers can have up  to a length of 8 bytes. When the filter has been added, the   {@link Callbacks#receivedFilterId(byte)} callback function will be called with a user id representing the new filter
 * @param trigger Trigger to filter data on
 * @param config Configuration of the filter to add
 */
public void addFilter(Trigger trigger,FilterConfig config);",0.8836601307189542
130372,"/** 
 * Add a trigger to the MetaWear logging module.  When the MetaWear board has processed the trigger,  a unique id representing the trigger passed back to the user via the receivedTriggerId function. 
 * @param triggerObj Trigger to log
 * @see Callbacks#receivedTriggerId(byte)
 */
public void addTrigger(Trigger triggerObj);","/** 
 * Add a trigger to the MetaWear logging module.  The logging module requires  triggers to have a data length less than or equal to 4 bytes.  When the MetaWear  board has processed the trigger, a unique id representing the trigger is passed  back to the user via the receivedTriggerId function. 
 * @param triggerObj Trigger to log
 * @see Callbacks#receivedTriggerId(byte)
 */
public void addTrigger(Trigger triggerObj);",0.8703703703703703
130373,"/** 
 * Get the timestamp of when the event was recorded.  A ReferenceTick object is provided  by the   {@link Callbacks#receivedReferenceTick(Logging.ReferenceTick)} callback function
 * @param reference Reference point used to convert the tick count into a timestamp
 * @see Logging#readReferenceTick()
 */
public Calendar timestamp(ReferenceTick reference){
  final double TICK_TIME_STEP=(48 / 32768.0) * 1000;
  Calendar copy=(Calendar)reference.timestamp().clone();
  copy.add(Calendar.MILLISECOND,(int)((reference.tickCount() - tick()) * TICK_TIME_STEP));
  return copy;
}","/** 
 * Get the timestamp of when the event was recorded.  A ReferenceTick object is provided  by the   {@link Callbacks#receivedReferenceTick(Logging.ReferenceTick)} callback function
 * @param reference Reference point used to convert the tick count into a timestamp
 * @see Logging#readReferenceTick()
 */
public Calendar timestamp(ReferenceTick reference){
  final double TICK_TIME_STEP=(48 / 32768.0) * 1000;
  Calendar copy=(Calendar)reference.timestamp().clone();
  copy.add(Calendar.MILLISECOND,(int)((tick() - reference.tickCount()) * TICK_TIME_STEP));
  return copy;
}",0.9602076124567474
130374,"/** 
 * Number of bytes required by the trigger data.  Can be between [1, 4] bytes
 * @return Data length
 */
public byte length();","/** 
 * Number of bytes required by the trigger data.
 * @return Data length
 */
public byte length();",0.8755364806866953
130375,"@Nonnull @RequiredReadAction public static ResolveResult[] tryResolveFromQualifier(@Nonnull CSharpReferenceExpressionEx referenceExpressionEx,@Nonnull PsiElement qualifierElement){
  if (!referenceExpressionEx.isValid()) {
    return ResolveResult.EMPTY_ARRAY;
  }
  return CachedValuesManager.getManager(referenceExpressionEx.getProject()).getParameterizedCachedValue(referenceExpressionEx,ourFromQualifierKey,param -> {
    ResolveResult[] resolveResults=tryResolveFromQualifierImpl(referenceExpressionEx,param);
    return CachedValueProvider.Result.create(resolveResults,PsiModificationTracker.MODIFICATION_COUNT);
  }
,false,qualifierElement);
}","@Nonnull @RequiredReadAction public static ResolveResult[] tryResolveFromQualifier(@Nonnull CSharpReferenceExpressionEx expression,@Nonnull PsiElement qualifierElement){
  if (!expression.isValid()) {
    return ResolveResult.EMPTY_ARRAY;
  }
  ParamatizeValue paramatizeValue=CachedValuesManager.getCachedValue(expression,() -> CachedValueProvider.Result.create(new ParamatizeValue(),PsiModificationTracker.MODIFICATION_COUNT));
  return paramatizeValue.get(qualifierElement,element -> tryResolveFromQualifierImpl(expression,element));
}",0.563973063973064
130376,"@RequiredReadAction private int getWeightByContext(ResolveResult resolveResult){
  final PsiElement element=resolveResult.getElement();
  if (element == null) {
    return -100;
  }
  if (element instanceof CSharpTypeDefStatement) {
    return Integer.MAX_VALUE;
  }
  if (myParent != null) {
    CSharpContextUtil.ContextType parentContext=CSharpContextUtil.ContextType.ANY;
    if (element instanceof CSharpTypeDeclaration) {
      parentContext=CSharpContextUtil.ContextType.STATIC;
    }
 else     if (element instanceof DotNetVariable) {
      parentContext=CSharpContextUtil.ContextType.INSTANCE;
    }
    DotNetTypeDeclaration forceTarget=resolveTargetElement(element,myParent);
    if (forceTarget == null) {
      return parentContext == CSharpContextUtil.ContextType.INSTANCE ? 10 : 5;
    }
    ResolveResult[] resolveResults=myParent.tryResolveFromQualifier(forceTarget);
    if (resolveResults.length == 0) {
      return parentContext == CSharpContextUtil.ContextType.INSTANCE ? 10 : 5;
    }
    for (    ResolveResult result : resolveResults) {
      PsiElement element1=result.getElement();
      if (element1 == null) {
        continue;
      }
      CSharpContextUtil.ContextType contextForResolved=CSharpContextUtil.getContextForResolved(element1);
      if (parentContext != CSharpContextUtil.ContextType.ANY) {
switch (parentContext) {
case INSTANCE:
          if (contextForResolved.isAllowInstance()) {
            return 5000;
          }
        break;
case STATIC:
      if (contextForResolved == CSharpContextUtil.ContextType.STATIC) {
        return 5000;
      }
    break;
}
}
}
}
 else {
if (element instanceof CSharpTypeDeclaration || element instanceof DotNetNamespaceAsElement) {
return -1;
}
}
return 0;
}","@RequiredReadAction private int getWeightByContext(ResolveResult resolveResult){
  final PsiElement element=resolveResult.getElement();
  if (element == null) {
    return -100;
  }
  if (element instanceof CSharpTypeDefStatement) {
    return Integer.MAX_VALUE;
  }
  if (myParent != null) {
    CSharpContextUtil.ContextType parentContext=CSharpContextUtil.ContextType.ANY;
    if (element instanceof CSharpTypeDeclaration) {
      parentContext=CSharpContextUtil.ContextType.STATIC;
    }
 else     if (element instanceof DotNetVariable) {
      parentContext=CSharpContextUtil.ContextType.INSTANCE;
    }
    DotNetTypeDeclaration forceTarget=resolveTargetElement(element,myParent);
    if (forceTarget == null) {
      return parentContext == CSharpContextUtil.ContextType.INSTANCE ? 10 : 5;
    }
    String vmQName=forceTarget.getVmQName();
    ResolveResult[] resolveResults=myParent.tryResolveFromQualifier(forceTarget);
    if (resolveResults.length == 0) {
      return parentContext == CSharpContextUtil.ContextType.INSTANCE ? 10 : 5;
    }
    for (    ResolveResult result : resolveResults) {
      PsiElement element1=result.getElement();
      if (element1 == null) {
        continue;
      }
      CSharpContextUtil.ContextType contextForResolved=CSharpContextUtil.getContextForResolved(element1);
      if (parentContext != CSharpContextUtil.ContextType.ANY) {
switch (parentContext) {
case INSTANCE:
          if (contextForResolved.isAllowInstance()) {
            return 5000;
          }
        break;
case STATIC:
      if (contextForResolved == CSharpContextUtil.ContextType.STATIC) {
        return 5000;
      }
    break;
}
}
}
}
 else {
if (element instanceof CSharpTypeDeclaration || element instanceof DotNetNamespaceAsElement) {
return -1;
}
}
return 0;
}",0.9872557349192864
130377,"private static TypeInfo parseInnerType(@Nonnull CSharpBuilderWrapper builder,int flags,TokenSet nameStopperSet){
  TypeInfo typeInfo=new TypeInfo();
  PsiBuilder.Marker marker=builder.mark();
  boolean varSupport=BitUtil.isSet(flags,VAR_SUPPORT) && builder.getVersion().isAtLeast(CSharpLanguageVersion._2_0);
  if (varSupport) {
    builder.enableSoftKeyword(CSharpSoftTokens.VAR_KEYWORD);
  }
  IElementType tokenType=builder.getTokenType();
  if (varSupport) {
    builder.disableSoftKeyword(CSharpSoftTokens.VAR_KEYWORD);
  }
  typeInfo.marker=marker;
  if (CSharpTokenSets.NATIVE_TYPES.contains(tokenType)) {
    builder.advanceLexer();
    marker.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.NATIVE_TYPE : CSharpElements.NATIVE_TYPE);
    typeInfo.nativeElementType=tokenType;
  }
 else   if (builder.getTokenType() == CSharpTokens.LPAR) {
    builder.advanceLexer();
    if (builder.getTokenType() == CSharpTokens.RPAR) {
      builder.error(""String_Node_Str"");
      builder.advanceLexer();
    }
 else {
      int count=0;
      while (!builder.eof()) {
        TypeInfo inner=parseType(builder,flags);
        if (inner == null) {
          builder.error(""String_Node_Str"");
        }
 else {
          PsiBuilder.Marker precede=inner.marker.precede();
          if (builder.getTokenType() == CSharpTokens.IDENTIFIER) {
            doneIdentifier(builder,flags);
          }
          precede.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.TUPLE_VARIABLE : CSharpElements.TUPLE_VARIABLE);
          count++;
        }
        if (builder.getTokenType() == COMMA) {
          builder.advanceLexer();
        }
 else {
          break;
        }
      }
      if (count < 2) {
        builder.error(""String_Node_Str"");
      }
      expect(builder,CSharpTokens.RPAR,""String_Node_Str"");
    }
    marker.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.TUPLE_TYPE : CSharpElements.TUPLE_TYPE);
  }
 else   if (builder.getTokenType() == CSharpTokens.IDENTIFIER) {
    ExpressionParsing.ReferenceInfo referenceInfo=ExpressionParsing.parseQualifiedReference(builder,null,flags,nameStopperSet);
    typeInfo.isParameterized=referenceInfo != null && referenceInfo.isParameterized;
    marker.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.USER_TYPE : CSharpElements.USER_TYPE);
  }
 else {
    marker.drop();
    return null;
  }
  return typeInfo;
}","private static TypeInfo parseInnerType(@Nonnull CSharpBuilderWrapper builder,int flags,TokenSet nameStopperSet){
  TypeInfo typeInfo=new TypeInfo();
  PsiBuilder.Marker marker=builder.mark();
  boolean varSupport=BitUtil.isSet(flags,VAR_SUPPORT) && builder.getVersion().isAtLeast(CSharpLanguageVersion._2_0);
  if (varSupport) {
    builder.enableSoftKeyword(CSharpSoftTokens.VAR_KEYWORD);
  }
  IElementType tokenType=builder.getTokenType();
  if (varSupport) {
    builder.disableSoftKeyword(CSharpSoftTokens.VAR_KEYWORD);
  }
  typeInfo.marker=marker;
  if (CSharpTokenSets.NATIVE_TYPES.contains(tokenType)) {
    builder.advanceLexer();
    marker.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.NATIVE_TYPE : CSharpElements.NATIVE_TYPE);
    typeInfo.nativeElementType=tokenType;
  }
 else   if (builder.getTokenType() == CSharpTokens.LPAR) {
    builder.advanceLexer();
    if (builder.getTokenType() == CSharpTokens.RPAR) {
      builder.error(""String_Node_Str"");
      builder.advanceLexer();
    }
 else {
      int count=0;
      while (!builder.eof()) {
        TypeInfo inner=parseType(builder,flags);
        if (inner == null) {
          builder.error(""String_Node_Str"");
        }
 else {
          PsiBuilder.Marker precede=inner.marker.precede();
          if (builder.getTokenType() == CSharpTokens.IDENTIFIER) {
            doneIdentifier(builder,flags);
          }
          precede.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.TUPLE_VARIABLE : CSharpElements.TUPLE_VARIABLE);
          count++;
        }
        if (builder.getTokenType() == COMMA) {
          builder.advanceLexer();
        }
 else {
          break;
        }
      }
      if (count < 2) {
        builder.error(""String_Node_Str"");
      }
      expect(builder,CSharpTokens.RPAR,""String_Node_Str"");
    }
    marker.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.TUPLE_TYPE : CSharpElements.TUPLE_TYPE);
  }
 else   if (builder.getTokenType() == CSharpTokens.IDENTIFIER || builder.getTokenType() == CSharpSoftTokens.GLOBAL_KEYWORD) {
    ExpressionParsing.ReferenceInfo referenceInfo=ExpressionParsing.parseQualifiedReference(builder,null,flags,nameStopperSet);
    typeInfo.isParameterized=referenceInfo != null && referenceInfo.isParameterized;
    marker.done(BitUtil.isSet(flags,STUB_SUPPORT) ? CSharpStubElements.USER_TYPE : CSharpElements.USER_TYPE);
  }
 else {
    marker.drop();
    return null;
  }
  return typeInfo;
}",0.9874666118758988
130378,"@RequiredReadAction @NotNull @Override public CSharpUsingListChild[] getUsingStatements(){
  List<CSharpUsingListChild> listChildren=new SmartList<CSharpUsingListChild>();
  for (  String usingListChild : myUsingNamespaceChildren) {
    GlobalSearchScope resolveScope=myContext.getResolveScope();
    DotNetNamespaceAsElement namespace=DotNetPsiSearcher.getInstance(getProject()).findNamespace(usingListChild,resolveScope);
    if (namespace != null) {
      listChildren.add(new CSharpLightUsingNamespaceStatementBuilder(namespace,resolveScope));
    }
  }
  return ContainerUtil.toArray(listChildren,CSharpUsingListChild.ARRAY_FACTORY);
}","@RequiredReadAction @NotNull @Override public CSharpUsingListChild[] getUsingStatements(){
  List<CSharpUsingListChild> listChildren=new SmartList<>();
  for (  String usingListChild : myUsingNamespaceChildren) {
    GlobalSearchScope resolveScope=myContext.getResolveScope();
    DotNetNamespaceAsElement namespace=DotNetPsiSearcher.getInstance(getProject()).findNamespace(usingListChild,resolveScope);
    if (namespace != null) {
      listChildren.add(new CSharpLightUsingNamespaceStatementBuilder(namespace,resolveScope));
    }
  }
  return ContainerUtil.toArray(listChildren,CSharpUsingListChild.ARRAY_FACTORY);
}",0.984126984126984
130379,"@Nullable @RequiredReadAction public String getReferenceText(){
  CSharpNamespaceDeclStub stub=getGreenStub();
  if (stub != null) {
    return stub.getReferenceTextRef();
  }
  CSharpReferenceExpression childByClass=findChildByClass(CSharpReferenceExpression.class);
  return childByClass != null ? StringUtil.strip(childByClass.getText(),CharFilter.NOT_WHITESPACE_FILTER) : null;
}","@Nullable @RequiredReadAction public String getReferenceText(){
  CSharpNamespaceDeclStub stub=getGreenStub();
  if (stub != null) {
    return stub.getReferenceTextRef();
  }
  CSharpReferenceExpression childByClass=findChildByClass(CSharpReferenceExpression.class);
  return childByClass != null ? StringUtil.strip(childByClass.getText(),CSharpReferenceExpression.DEFAULT_REF_FILTER) : null;
}",0.9305912596401028
130380,"@Nullable @RequiredReadAction private DotNetNamespaceAsElement resolveInner(){
  String referenceText=getReferenceText();
  if (referenceText == null) {
    return null;
  }
  final String qName=StringUtil.strip(referenceText,CharFilter.NOT_WHITESPACE_FILTER);
  PsiElement parent=getParent();
  DotNetPsiSearcher psiSearcher=DotNetPsiSearcher.getInstance(getProject());
  if (parent instanceof CSharpNamespaceDeclaration) {
    String newNamespaceName=((CSharpNamespaceDeclaration)parent).getPresentableQName() + ""String_Node_Str"" + qName;
    DotNetNamespaceAsElement namespace=psiSearcher.findNamespace(newNamespaceName,getResolveScope());
    if (namespace != null) {
      return namespace;
    }
  }
  return psiSearcher.findNamespace(qName,getResolveScope());
}","@Nullable @RequiredReadAction private DotNetNamespaceAsElement resolveInner(){
  String referenceText=getReferenceText();
  if (referenceText == null) {
    return null;
  }
  final String qName=StringUtil.strip(referenceText,CSharpReferenceExpression.DEFAULT_REF_FILTER);
  PsiElement parent=getParent();
  DotNetPsiSearcher psiSearcher=DotNetPsiSearcher.getInstance(getProject());
  if (parent instanceof CSharpNamespaceDeclaration) {
    String newNamespaceName=((CSharpNamespaceDeclaration)parent).getPresentableQName() + ""String_Node_Str"" + qName;
    DotNetNamespaceAsElement namespace=psiSearcher.findNamespace(newNamespaceName,getResolveScope());
    if (namespace != null) {
      return namespace;
    }
  }
  return psiSearcher.findNamespace(qName,getResolveScope());
}",0.9702842377260982
130381,"@RequiredReadAction @Override public void process(@NotNull CSharpResolveOptions options,@NotNull DotNetGenericExtractor defaultExtractor,@Nullable PsiElement forceQualifierElement,@NotNull final Processor<ResolveResult> processor){
  PsiElement element=options.getElement();
  String qName=StringUtil.strip(element.getText(),CharFilter.NOT_WHITESPACE_FILTER);
  DotNetNamespaceAsElement namespace=null;
  PsiElement qualifier=options.getQualifier();
  PsiElement parent=element.getParent();
  if (!options.isCompletion()) {
    if (parent instanceof CSharpUsingNamespaceStatement) {
      DotNetNamespaceAsElement namespaceAsElement=((CSharpUsingNamespaceStatement)parent).resolve();
      if (namespaceAsElement != null) {
        processor.process(new CSharpResolveResult(namespaceAsElement));
      }
    }
 else {
      namespace=DotNetPsiSearcher.getInstance(element.getProject()).findNamespace(qName,element.getResolveScope());
      if (namespace != null) {
        processor.process(new CSharpResolveResult(namespace));
      }
    }
  }
 else {
    processDefaultCompletion(processor,element,qualifier);
    if (parent instanceof CSharpUsingNamespaceStatement) {
      PsiElement parentOfStatement=parent.getParent();
      if (parentOfStatement instanceof CSharpNamespaceDeclaration) {
        DotNetReferenceExpression namespaceReference=((CSharpNamespaceDeclaration)parentOfStatement).getNamespaceReference();
        if (namespaceReference != null) {
          PsiElement resolvedElement=namespaceReference.resolve();
          if (resolvedElement instanceof DotNetNamespaceAsElement) {
            processNamespaceChildren(processor,element,(DotNetNamespaceAsElement)resolvedElement);
          }
        }
      }
    }
  }
}","@RequiredReadAction @Override public void process(@NotNull CSharpResolveOptions options,@NotNull DotNetGenericExtractor defaultExtractor,@Nullable PsiElement forceQualifierElement,@NotNull final Processor<ResolveResult> processor){
  PsiElement element=options.getElement();
  String qName=StringUtil.strip(element.getText(),CSharpReferenceExpression.DEFAULT_REF_FILTER);
  DotNetNamespaceAsElement namespace=null;
  PsiElement qualifier=options.getQualifier();
  PsiElement parent=element.getParent();
  if (!options.isCompletion()) {
    if (parent instanceof CSharpUsingNamespaceStatement) {
      DotNetNamespaceAsElement namespaceAsElement=((CSharpUsingNamespaceStatement)parent).resolve();
      if (namespaceAsElement != null) {
        processor.process(new CSharpResolveResult(namespaceAsElement));
      }
    }
 else {
      namespace=DotNetPsiSearcher.getInstance(element.getProject()).findNamespace(qName,element.getResolveScope());
      if (namespace != null) {
        processor.process(new CSharpResolveResult(namespace));
      }
    }
  }
 else {
    processDefaultCompletion(processor,element,qualifier);
    if (parent instanceof CSharpUsingNamespaceStatement) {
      PsiElement parentOfStatement=parent.getParent();
      if (parentOfStatement instanceof CSharpNamespaceDeclaration) {
        DotNetReferenceExpression namespaceReference=((CSharpNamespaceDeclaration)parentOfStatement).getNamespaceReference();
        if (namespaceReference != null) {
          PsiElement resolvedElement=namespaceReference.resolve();
          if (resolvedElement instanceof DotNetNamespaceAsElement) {
            processNamespaceChildren(processor,element,(DotNetNamespaceAsElement)resolvedElement);
          }
        }
      }
    }
  }
}",0.986254295532646
130382,"@RequiredReadAction private void processDefaultCompletion(@NotNull Processor<ResolveResult> processor,PsiElement element,PsiElement qualifier){
  DotNetNamespaceAsElement namespace;
  String qualifiedText=""String_Node_Str"";
  if (qualifier != null) {
    qualifiedText=StringUtil.strip(qualifier.getText(),CharFilter.NOT_WHITESPACE_FILTER);
  }
  namespace=DotNetPsiSearcher.getInstance(element.getProject()).findNamespace(qualifiedText,element.getResolveScope());
  if (namespace == null) {
    return;
  }
  processNamespaceChildren(processor,element,namespace);
}","@RequiredReadAction private void processDefaultCompletion(@NotNull Processor<ResolveResult> processor,PsiElement element,PsiElement qualifier){
  DotNetNamespaceAsElement namespace;
  String qualifiedText=""String_Node_Str"";
  if (qualifier != null) {
    qualifiedText=StringUtil.strip(qualifier.getText(),CSharpReferenceExpression.DEFAULT_REF_FILTER);
  }
  namespace=DotNetPsiSearcher.getInstance(element.getProject()).findNamespace(qualifiedText,element.getResolveScope());
  if (namespace == null) {
    return;
  }
  processNamespaceChildren(processor,element,namespace);
}",0.958041958041958
130383,"@Override public int getStubVersion(){
  return 91;
}","@Override public int getStubVersion(){
  return 92;
}",0.981132075471698
130384,"@Override public boolean hasModifier(@NotNull DotNetModifier modifier){
  CSharpModifierListStub stub=getStub();
  if (stub != null) {
    return stub.hasModifier(modifier);
  }
  return CSharpModifierListImplUtil.getModifiersCached(this).contains(CSharpModifier.as(modifier));
}","@Override public boolean hasModifier(@NotNull DotNetModifier modifier){
  return CSharpModifierListImplUtil.getModifiersCached(this).contains(CSharpModifier.as(modifier));
}",0.7654867256637168
130385,"@NotNull @Override public CSharpModifier[] getModifiers(){
  CSharpModifierListStub stub=getStub();
  if (stub != null) {
    return stub.getModifiers();
  }
  return CSharpModifierListImplUtil.getModifiersCached(this).toArray(CSharpModifier.EMPTY_ARRAY);
}","@NotNull @Override public CSharpModifier[] getModifiers(){
  return CSharpModifierListImplUtil.getModifiersCached(this).toArray(CSharpModifier.EMPTY_ARRAY);
}",0.7614457831325301
130386,"@Override public boolean hasModifierInTree(@NotNull DotNetModifier modifier){
  IElementType iElementType=CSharpModifierListImplUtil.ourModifiers.get(CSharpModifier.as(modifier));
  return findChildByType(iElementType) != null;
}","@Override public boolean hasModifierInTree(@NotNull DotNetModifier modifier){
  CSharpModifierListStub stub=getStub();
  if (stub != null) {
    return stub.hasModifier(modifier);
  }
  IElementType iElementType=CSharpModifierListImplUtil.ourModifiers.get(CSharpModifier.as(modifier));
  return findChildByType(iElementType) != null;
}",0.8120567375886525
130387,"@RequiredReadAction public static LookupElementBuilder createLookupElementBuilder(@NotNull final PsiElement element,@NotNull DotNetGenericExtractor extractor,@Nullable final PsiElement completionParent){
  LookupElementBuilder builder=null;
  if (element instanceof CSharpMethodDeclaration) {
    final CSharpMethodDeclaration methodDeclaration=(CSharpMethodDeclaration)element;
    if (!methodDeclaration.isDelegate()) {
      String name=methodDeclaration.getName();
      if (name == null) {
        return null;
      }
      CSharpMethodUtil.Result inheritGeneric=CSharpMethodUtil.isCanInheritGeneric(methodDeclaration);
      String lookupString=inheritGeneric == CSharpMethodUtil.Result.CAN ? name + ""String_Node_Str"" : name;
      builder=LookupElementBuilder.create(methodDeclaration,lookupString);
      builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
      final CSharpSimpleParameterInfo[] parameterInfos=methodDeclaration.getParameterInfos();
      String genericText=DotNetElementPresentationUtil.formatGenericParameters((DotNetGenericParameterListOwner)element);
      String parameterText=genericText + ""String_Node_Str"" + StringUtil.join(parameterInfos,parameter -> CSharpTypeRefPresentationUtil.buildShortText(parameter.getTypeRef(),element) + ""String_Node_Str"" + parameter.getNotNullName(),""String_Node_Str"")+ ""String_Node_Str"";
      if (inheritGeneric == CSharpMethodUtil.Result.CAN) {
        builder=builder.withPresentableText(name);
        builder=builder.withInsertHandler((context,item) -> {
          CaretModel caretModel=context.getEditor().getCaretModel();
          caretModel.moveToOffset(caretModel.getOffset() - 3);
        }
);
      }
 else {
        builder=builder.withInsertHandler(new CSharpParenthesesWithSemicolonInsertHandler(methodDeclaration));
      }
      if (CSharpMethodImplUtil.isExtensionWrapper(methodDeclaration)) {
        builder=builder.withItemTextUnderlined(true);
      }
      builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(methodDeclaration.getReturnTypeRef(),element));
      builder=builder.withTailText(parameterText,false);
    }
 else {
      builder=buildTypeLikeElement((CSharpMethodDeclaration)element,extractor);
    }
  }
 else   if (element instanceof CSharpIndexMethodDeclaration) {
    builder=LookupElementBuilder.create(element,""String_Node_Str"");
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    final CSharpSimpleParameterInfo[] parameterInfos=((CSharpIndexMethodDeclaration)element).getParameterInfos();
    String parameterText=""String_Node_Str"" + StringUtil.join(parameterInfos,new Function<CSharpSimpleParameterInfo,String>(){
      @Override @RequiredReadAction public String fun(      CSharpSimpleParameterInfo parameter){
        return CSharpTypeRefPresentationUtil.buildShortText(parameter.getTypeRef(),element) + ""String_Node_Str"" + parameter.getNotNullName();
      }
    }
,""String_Node_Str"") + ""String_Node_Str"";
    builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(((CSharpIndexMethodDeclaration)element).getReturnTypeRef(),element));
    builder=builder.withPresentableText(parameterText);
    builder=builder.withInsertHandler((context,item) -> {
      CharSequence charSequence=context.getDocument().getImmutableCharSequence();
      int start=-1, end=-1;
      for (int i=context.getTailOffset(); i != 0; i--) {
        char c=charSequence.charAt(i);
        if (c == '.') {
          start=i;
          break;
        }
 else         if (c == '[') {
          end=i;
        }
      }
      if (start != -1 && end != -1) {
        context.getDocument().replaceString(start,end + 1,""String_Node_Str"");
      }
      context.getEditor().getCaretModel().moveToOffset(end);
    }
);
  }
 else   if (element instanceof DotNetNamespaceAsElement) {
    DotNetNamespaceAsElement namespaceAsElement=(DotNetNamespaceAsElement)element;
    String name=namespaceAsElement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    CSharpCompletionSorting.force(builder,CSharpCompletionSorting.KindSorter.Type.namespace);
  }
 else   if (element instanceof CSharpTypeDefStatement) {
    CSharpTypeDefStatement typeDefStatement=(CSharpTypeDefStatement)element;
    String name=typeDefStatement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(typeDefStatement.toTypeRef(),typeDefStatement));
  }
 else   if (element instanceof CSharpLabeledStatementImpl) {
    CSharpLabeledStatementImpl labeledStatement=(CSharpLabeledStatementImpl)element;
    String name=labeledStatement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof DotNetGenericParameter) {
    DotNetGenericParameter typeDefStatement=(DotNetGenericParameter)element;
    String name=typeDefStatement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof DotNetVariable) {
    DotNetVariable variable=(DotNetVariable)element;
    if ((variable instanceof CSharpFieldDeclaration || variable instanceof CSharpPropertyDeclaration) && needAddThisPrefix(variable,completionParent)) {
      builder=LookupElementBuilder.create(variable,""String_Node_Str"" + variable.getName());
      builder=builder.withLookupString(variable.getName());
    }
 else {
      builder=LookupElementBuilder.create(variable);
    }
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(variable.toTypeRef(true),variable));
    builder=builder.withInsertHandler(new InsertHandler<LookupElement>(){
      @Override @RequiredDispatchThread public void handleInsert(      InsertionContext context,      LookupElement item){
        char completionChar=context.getCompletionChar();
switch (completionChar) {
case '=':
          context.setAddCompletionChar(false);
        TailType.EQ.processTail(context.getEditor(),context.getTailOffset());
      break;
case ',':
    if (completionParent != null && completionParent.getParent() instanceof CSharpCallArgument) {
      context.setAddCompletionChar(false);
      TailType.COMMA.processTail(context.getEditor(),context.getTailOffset());
    }
  break;
}
}
}
);
}
 else if (element instanceof CSharpPreprocessorDefine) {
builder=LookupElementBuilder.create(element);
builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
}
 else if (element instanceof CSharpTypeDeclaration) {
builder=buildTypeLikeElement((CSharpTypeDeclaration)element,extractor);
}
if (builder != null && DotNetAttributeUtil.hasAttribute(element,DotNetTypes.System.ObsoleteAttribute)) {
builder=builder.withStrikeoutness(true);
}
return builder;
}","@RequiredReadAction public static LookupElementBuilder createLookupElementBuilder(@NotNull final PsiElement element,@NotNull DotNetGenericExtractor extractor,@Nullable final PsiElement completionParent){
  LookupElementBuilder builder=null;
  if (element instanceof CSharpMethodDeclaration) {
    final CSharpMethodDeclaration methodDeclaration=(CSharpMethodDeclaration)element;
    if (!methodDeclaration.isDelegate()) {
      String name=methodDeclaration.getName();
      if (name == null) {
        return null;
      }
      CSharpMethodUtil.Result inheritGeneric=CSharpMethodUtil.isCanInheritGeneric(methodDeclaration);
      String lookupString=inheritGeneric == CSharpMethodUtil.Result.CAN ? name + ""String_Node_Str"" : name;
      builder=LookupElementBuilder.create(methodDeclaration,lookupString);
      builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
      final CSharpSimpleParameterInfo[] parameterInfos=methodDeclaration.getParameterInfos();
      String genericText=DotNetElementPresentationUtil.formatGenericParameters((DotNetGenericParameterListOwner)element);
      String parameterText=genericText + ""String_Node_Str"" + StringUtil.join(parameterInfos,parameter -> CSharpTypeRefPresentationUtil.buildShortText(parameter.getTypeRef(),element) + ""String_Node_Str"" + parameter.getNotNullName(),""String_Node_Str"")+ ""String_Node_Str"";
      if (inheritGeneric == CSharpMethodUtil.Result.CAN) {
        builder=builder.withPresentableText(name);
        builder=builder.withInsertHandler((context,item) -> {
          CaretModel caretModel=context.getEditor().getCaretModel();
          caretModel.moveToOffset(caretModel.getOffset() - 3);
        }
);
      }
 else {
        builder=builder.withInsertHandler(new CSharpParenthesesWithSemicolonInsertHandler(methodDeclaration));
      }
      if (CSharpMethodImplUtil.isExtensionWrapper(methodDeclaration)) {
        builder=builder.withItemTextUnderlined(true);
      }
      builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(methodDeclaration.getReturnTypeRef(),element));
      builder=builder.withTailText(parameterText,false);
    }
 else {
      builder=buildTypeLikeElement((CSharpMethodDeclaration)element,extractor);
    }
  }
 else   if (element instanceof CSharpIndexMethodDeclaration) {
    builder=LookupElementBuilder.create(element,""String_Node_Str"");
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    final CSharpSimpleParameterInfo[] parameterInfos=((CSharpIndexMethodDeclaration)element).getParameterInfos();
    String parameterText=""String_Node_Str"" + StringUtil.join(parameterInfos,new Function<CSharpSimpleParameterInfo,String>(){
      @Override @RequiredReadAction public String fun(      CSharpSimpleParameterInfo parameter){
        return CSharpTypeRefPresentationUtil.buildShortText(parameter.getTypeRef(),element) + ""String_Node_Str"" + parameter.getNotNullName();
      }
    }
,""String_Node_Str"") + ""String_Node_Str"";
    builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(((CSharpIndexMethodDeclaration)element).getReturnTypeRef(),element));
    builder=builder.withPresentableText(parameterText);
    builder=builder.withInsertHandler((context,item) -> {
      CharSequence charSequence=context.getDocument().getImmutableCharSequence();
      int start=-1, end=-1;
      for (int i=context.getStartOffset(); i != 0; i--) {
        char c=charSequence.charAt(i);
        if (c == '.') {
          start=i;
          break;
        }
 else         if (c == '[') {
          end=i;
        }
      }
      if (start != -1 && end != -1) {
        context.getDocument().replaceString(start,end + 1,""String_Node_Str"");
        context.getEditor().getCaretModel().moveToOffset(end);
      }
    }
);
  }
 else   if (element instanceof DotNetNamespaceAsElement) {
    DotNetNamespaceAsElement namespaceAsElement=(DotNetNamespaceAsElement)element;
    String name=namespaceAsElement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    CSharpCompletionSorting.force(builder,CSharpCompletionSorting.KindSorter.Type.namespace);
  }
 else   if (element instanceof CSharpTypeDefStatement) {
    CSharpTypeDefStatement typeDefStatement=(CSharpTypeDefStatement)element;
    String name=typeDefStatement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(typeDefStatement.toTypeRef(),typeDefStatement));
  }
 else   if (element instanceof CSharpLabeledStatementImpl) {
    CSharpLabeledStatementImpl labeledStatement=(CSharpLabeledStatementImpl)element;
    String name=labeledStatement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof DotNetGenericParameter) {
    DotNetGenericParameter typeDefStatement=(DotNetGenericParameter)element;
    String name=typeDefStatement.getName();
    if (name == null) {
      return null;
    }
    builder=LookupElementBuilder.create(name);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof DotNetVariable) {
    DotNetVariable variable=(DotNetVariable)element;
    if ((variable instanceof CSharpFieldDeclaration || variable instanceof CSharpPropertyDeclaration) && needAddThisPrefix(variable,completionParent)) {
      builder=LookupElementBuilder.create(variable,""String_Node_Str"" + variable.getName());
      builder=builder.withLookupString(variable.getName());
    }
 else {
      builder=LookupElementBuilder.create(variable);
    }
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(CSharpTypeRefPresentationUtil.buildShortText(variable.toTypeRef(true),variable));
    builder=builder.withInsertHandler(new InsertHandler<LookupElement>(){
      @Override @RequiredDispatchThread public void handleInsert(      InsertionContext context,      LookupElement item){
        char completionChar=context.getCompletionChar();
switch (completionChar) {
case '=':
          context.setAddCompletionChar(false);
        TailType.EQ.processTail(context.getEditor(),context.getTailOffset());
      break;
case ',':
    if (completionParent != null && completionParent.getParent() instanceof CSharpCallArgument) {
      context.setAddCompletionChar(false);
      TailType.COMMA.processTail(context.getEditor(),context.getTailOffset());
    }
  break;
}
}
}
);
}
 else if (element instanceof CSharpPreprocessorDefine) {
builder=LookupElementBuilder.create(element);
builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
}
 else if (element instanceof CSharpTypeDeclaration) {
builder=buildTypeLikeElement((CSharpTypeDeclaration)element,extractor);
}
if (builder != null && DotNetAttributeUtil.hasAttribute(element,DotNetTypes.System.ObsoleteAttribute)) {
builder=builder.withStrikeoutness(true);
}
return builder;
}",0.991104273961608
130388,"@RequiredReadAction @NotNull @Override public Collection<PsiElement> getItems(@NotNull CSharpTypeDeclaration typeDeclaration){
  Collection<PsiElement> allMembers=OverrideUtil.getAllMembers(typeDeclaration,typeDeclaration.getResolveScope(),DotNetGenericExtractor.EMPTY,false,true);
  boolean isInterface=typeDeclaration.isInterface();
  List<PsiElement> elements=new ArrayList<PsiElement>();
  for (  PsiElement element : allMembers) {
    if (isInterface) {
      if (element instanceof DotNetModifierListOwner) {
        if (!((DotNetModifierListOwner)element).hasModifier(CSharpModifier.INTERFACE_ABSTRACT)) {
          continue;
        }
        if (((DotNetModifierListOwner)element).hasModifier(CSharpModifier.STATIC)) {
          continue;
        }
        if (!CSharpVisibilityUtil.isVisible((DotNetModifierListOwner)element,typeDeclaration)) {
          continue;
        }
      }
    }
 else {
      if (element instanceof DotNetModifierListOwner) {
        if (((DotNetModifierListOwner)element).hasModifier(DotNetModifier.ABSTRACT)) {
          continue;
        }
        if (((DotNetModifierListOwner)element).hasModifier(DotNetModifier.STATIC)) {
          continue;
        }
        if (!CSharpVisibilityUtil.isVisible((DotNetModifierListOwner)element,typeDeclaration)) {
          continue;
        }
      }
    }
    if (element instanceof CSharpMethodDeclaration) {
      elements.add(element);
    }
  }
  return elements;
}","@RequiredReadAction @NotNull @Override public Collection<PsiElement> getItems(@NotNull CSharpTypeDeclaration typeDeclaration){
  Collection<PsiElement> allMembers=OverrideUtil.getAllMembers(typeDeclaration,typeDeclaration.getResolveScope(),DotNetGenericExtractor.EMPTY,false,true);
  boolean isInterface=typeDeclaration.isInterface();
  List<PsiElement> elements=new ArrayList<>();
  for (  PsiElement element : allMembers) {
    if (isInterface) {
      if (element instanceof DotNetModifierListOwner) {
        if (!((DotNetModifierListOwner)element).hasModifier(CSharpModifier.INTERFACE_ABSTRACT)) {
          continue;
        }
        if (((DotNetModifierListOwner)element).hasModifier(CSharpModifier.STATIC)) {
          continue;
        }
        if (!CSharpVisibilityUtil.isVisible((DotNetModifierListOwner)element,typeDeclaration)) {
          continue;
        }
      }
    }
 else {
      if (element instanceof DotNetModifierListOwner) {
        if (((DotNetModifierListOwner)element).hasModifier(DotNetModifier.ABSTRACT)) {
          continue;
        }
        if (((DotNetModifierListOwner)element).hasModifier(DotNetModifier.STATIC)) {
          continue;
        }
        if (!CSharpVisibilityUtil.isVisible((DotNetModifierListOwner)element,typeDeclaration)) {
          continue;
        }
      }
    }
    if (element instanceof CSharpMethodDeclaration) {
      elements.add(element);
    }
  }
  return elements;
}",0.9965373961218836
130389,"@NotNull private static List<DotNetTypeDeclaration> collectAllTypes(PsiElement place){
  List<DotNetTypeDeclaration> typeDeclarations=new SmartList<>();
  PsiElement type=place;
  while ((type=PsiTreeUtil.getContextOfType(type,DotNetTypeDeclaration.class)) != null) {
    typeDeclarations.add((DotNetTypeDeclaration)type);
  }
  return typeDeclarations;
}","@NotNull @RequiredReadAction private static List<DotNetTypeDeclaration> collectAllTypes(@NotNull PsiElement place){
  List<DotNetTypeDeclaration> typeDeclarations=new SmartList<>();
  if (place instanceof CSharpTypeDeclaration) {
    typeDeclarations.add((DotNetTypeDeclaration)place);
  }
  PsiElement type=place;
  while ((type=PsiTreeUtil.getContextOfType(type,DotNetTypeDeclaration.class)) != null) {
    typeDeclarations.add((DotNetTypeDeclaration)type);
  }
  return typeDeclarations;
}",0.8382526564344747
130390,"@Override public boolean hasModifierInTree(@NotNull DotNetModifier modifier){
  return CSharpModifierListImplUtil.getModifiersTreeCached(this).contains(CSharpModifier.as(modifier));
}","@Override public boolean hasModifierInTree(@NotNull DotNetModifier modifier){
  IElementType iElementType=CSharpModifierListImplUtil.ourModifiers.get(CSharpModifier.as(modifier));
  return findChildByType(iElementType) != null;
}",0.6893203883495146
130391,"@Override public boolean hasModifierInTree(@NotNull DotNetModifier modifier){
  CSharpModifier sharpModifier=CSharpModifier.as(modifier);
  CSharpModifierListStub stub=getStub();
  if (stub != null) {
    return stub.hasModifier(sharpModifier);
  }
  return CSharpModifierListImplUtil.getModifiersTreeCached(this).contains(CSharpModifier.as(modifier));
}","@Override public boolean hasModifierInTree(@NotNull DotNetModifier modifier){
  IElementType iElementType=CSharpModifierListImplUtil.ourModifiers.get(CSharpModifier.as(modifier));
  return findChildByType(iElementType) != null;
}",0.3876500857632933
130392,"@Override protected List<Block> buildChildren(){
  if (isLeaf()) {
    return EMPTY;
  }
  List<ASTNode> rawNodes=new ArrayList<>();
  for (ASTNode childNode=getNode().getFirstChildNode(); childNode != null; childNode=childNode.getTreeNext()) {
    rawNodes.add(childNode);
  }
  rawNodes.addAll(myAdditionalNodes);
  Deque<ASTNode> nodes=new ArrayDeque<>();
  List<ASTNode> whitespaces=null;
  List<ASTNode> disabledNodes=null;
  for (  ASTNode rawNode : rawNodes) {
    if (FormatterUtil.containsWhiteSpacesOnly(rawNode)) {
      if (disabledNodes != null) {
        disabledNodes.add(rawNode);
      }
 else {
        if (whitespaces == null) {
          whitespaces=new SmartList<>();
        }
        whitespaces.add(rawNode);
      }
      continue;
    }
    if (rawNode.getElementType() == CSharpTokens.NON_ACTIVE_SYMBOL) {
      if (disabledNodes == null) {
        disabledNodes=new ArrayList<>();
      }
      disabledNodes.add(rawNode);
    }
 else {
      if (disabledNodes != null) {
        ASTNode node=disabledNodes.get(disabledNodes.size() - 1);
        if (StringUtil.containsLineBreak(node.getChars())) {
          disabledNodes.remove(disabledNodes.remove(disabledNodes.size() - 1));
        }
        nodes.add(new CSharpDisabledBlock(disabledNodes));
      }
      disabledNodes=null;
      whitespaces=null;
      nodes.add(rawNode);
    }
  }
  List<Block> children=new ArrayList<>();
  ASTNode next;
  while ((next=nodes.poll()) != null) {
    BlockWithParent blockWithParent=null;
    if (next instanceof CSharpDisabledBlock) {
      blockWithParent=new CSharpDisabledFormattingBlock(next);
    }
 else {
      final CSharpFormattingBlock childBlock=new CSharpFormattingBlock(next,null,null,mySettings);
      blockWithParent=childBlock;
      IElementType elementType=next.getElementType();
      if (elementType == SWITCH_LABEL_STATEMENT) {
        ASTNode someNextElement;
        while ((someNextElement=nodes.poll()) != null) {
          IElementType someNextElementType=someNextElement.getElementType();
          if (someNextElementType == SWITCH_LABEL_STATEMENT || someNextElementType == RBRACE) {
            nodes.addFirst(someNextElement);
            break;
          }
          childBlock.addAdditionalNode(someNextElement);
        }
      }
    }
    blockWithParent.setParent(this);
    children.add((Block)blockWithParent);
  }
  return children;
}","@Override protected List<Block> buildChildren(){
  if (isLeaf()) {
    return EMPTY;
  }
  List<ASTNode> rawNodes=new ArrayList<>();
  for (ASTNode childNode=getNode().getFirstChildNode(); childNode != null; childNode=childNode.getTreeNext()) {
    rawNodes.add(childNode);
  }
  rawNodes.addAll(myAdditionalNodes);
  Deque<ASTNode> nodes=new ArrayDeque<>();
  List<ASTNode> whitespaces=null;
  List<ASTNode> disabledNodes=null;
  for (  ASTNode rawNode : rawNodes) {
    if (FormatterUtil.containsWhiteSpacesOnly(rawNode)) {
      if (disabledNodes != null) {
        disabledNodes.add(rawNode);
      }
 else {
        if (whitespaces == null) {
          whitespaces=new SmartList<>();
        }
        whitespaces.add(rawNode);
      }
      continue;
    }
    if (rawNode.getElementType() == CSharpTokens.NON_ACTIVE_SYMBOL) {
      if (disabledNodes == null) {
        disabledNodes=new ArrayList<>();
      }
      disabledNodes.add(rawNode);
    }
 else {
      if (disabledNodes != null) {
        ASTNode node=disabledNodes.get(disabledNodes.size() - 1);
        if (StringUtil.containsLineBreak(node.getChars())) {
          disabledNodes.remove(disabledNodes.remove(disabledNodes.size() - 1));
        }
        nodes.add(new CSharpDisabledBlock(disabledNodes));
      }
      disabledNodes=null;
      whitespaces=null;
      nodes.add(rawNode);
    }
  }
  if (disabledNodes != null) {
    nodes.add(new CSharpDisabledBlock(disabledNodes));
    disabledNodes=null;
    whitespaces=null;
  }
  List<Block> children=new ArrayList<>();
  ASTNode next;
  while ((next=nodes.poll()) != null) {
    BlockWithParent blockWithParent=null;
    if (next instanceof CSharpDisabledBlock) {
      blockWithParent=new CSharpDisabledFormattingBlock(next);
    }
 else {
      final CSharpFormattingBlock childBlock=new CSharpFormattingBlock(next,null,null,mySettings);
      blockWithParent=childBlock;
      IElementType elementType=next.getElementType();
      if (elementType == SWITCH_LABEL_STATEMENT) {
        ASTNode someNextElement;
        while ((someNextElement=nodes.poll()) != null) {
          IElementType someNextElementType=someNextElement.getElementType();
          if (someNextElementType == SWITCH_LABEL_STATEMENT || someNextElementType == RBRACE) {
            nodes.addFirst(someNextElement);
            break;
          }
          childBlock.addAdditionalNode(someNextElement);
        }
      }
    }
    blockWithParent.setParent(this);
    children.add((Block)blockWithParent);
  }
  return children;
}",0.9723913926106376
130393,"private static void delegate(CompletionParameters parameters,final CompletionResultSet result,final InheritorsHolder inheritorsHolder){
  if (parameters.getCompletionType() == CompletionType.BASIC) {
    PsiElement position=parameters.getPosition();
    if (parameters.getInvocationCount() <= 1 && CSharpCompletionUtil.mayStartClassName(result) && CSharpCompletionUtil.isClassNamePossible(parameters)) {
      addTypesForUsing(parameters,result,inheritorsHolder);
      return;
    }
  }
  if (parameters.getCompletionType() == CompletionType.SMART && parameters.getInvocationCount() == 2) {
    result.runRemainingContributors(parameters.withInvocationCount(3),true);
  }
}","@RequiredReadAction private static void delegate(CompletionParameters parameters,final CompletionResultSet result,final InheritorsHolder inheritorsHolder){
  if (parameters.getCompletionType() == CompletionType.BASIC) {
    PsiElement position=parameters.getPosition();
    if (parameters.getInvocationCount() <= 1 && CSharpCompletionUtil.mayStartClassName(result) && CSharpCompletionUtil.isClassNamePossible(parameters)) {
      addTypesForUsing(parameters,result,inheritorsHolder);
      return;
    }
  }
  if (parameters.getCompletionType() == CompletionType.SMART && parameters.getInvocationCount() == 2) {
    result.runRemainingContributors(parameters.withInvocationCount(3),true);
  }
}",0.9853801169590644
130394,"@Override @RequiredReadAction public boolean process(DotNetTypeDeclaration typeDeclaration){
  if (inheritorsHolder.alreadyProcessed(typeDeclaration)) {
    return true;
  }
  consumeType(parameters,parent,result,insideUsing,typeDeclaration);
  return true;
}","@Override @RequiredReadAction public boolean process(DotNetTypeDeclaration typeDeclaration){
  if (inheritorsHolder.alreadyProcessed(typeDeclaration)) {
    return true;
  }
  targets.add(typeDeclaration);
  return true;
}",0.8773388773388774
130395,"@RequiredReadAction @Override public void fillCompletionVariants(CompletionParameters parameters,CompletionResultSet result){
  final InheritorsHolder holder=new InheritorsHolder(result);
  ResultTracker tracker=new ResultTracker(result){
    @Override public void consume(    CompletionResult plainResult){
      super.consume(plainResult);
      LookupElement element=plainResult.getLookupElement();
      Object o=element.getObject();
      if (o instanceof PsiElement && CSharpPsiUtilImpl.isTypeLikeElement((PsiElement)o)) {
        holder.registerTypeLike((DotNetQualifiedElement)o);
      }
    }
  }
;
  result.runRemainingContributors(parameters,tracker);
  final boolean empty=tracker.containsOnlyNamespaces;
  if (!empty && parameters.getInvocationCount() == 0) {
    result.restartCompletionWhenNothingMatches();
  }
  if (empty) {
    delegate(parameters,CSharpCompletionSorting.modifyResultSet(parameters,result),holder);
  }
 else {
    if (parameters.getCompletionType() == CompletionType.BASIC && parameters.getInvocationCount() <= 1 && CSharpCompletionUtil.mayStartClassName(result) && CSharpCompletionUtil.isClassNamePossible(parameters)) {
      addTypesForUsing(parameters,CSharpCompletionSorting.modifyResultSet(parameters,result.withPrefixMatcher(tracker.betterMatcher)),holder);
    }
  }
}","@RequiredReadAction @Override @RequiredDispatchThread public void fillCompletionVariants(CompletionParameters parameters,CompletionResultSet result){
  final InheritorsHolder holder=new InheritorsHolder(result);
  ResultTracker tracker=new ResultTracker(result){
    @Override public void consume(    CompletionResult plainResult){
      super.consume(plainResult);
      LookupElement element=plainResult.getLookupElement();
      Object o=element.getObject();
      if (o instanceof PsiElement && CSharpPsiUtilImpl.isTypeLikeElement((PsiElement)o)) {
        holder.registerTypeLike((DotNetQualifiedElement)o);
      }
    }
  }
;
  result.runRemainingContributors(parameters,tracker);
  final boolean empty=tracker.containsOnlyNamespaces;
  if (!empty && parameters.getInvocationCount() == 0) {
    result.restartCompletionWhenNothingMatches();
  }
  if (empty) {
    delegate(parameters,CSharpCompletionSorting.modifyResultSet(parameters,result),holder);
  }
 else {
    if (parameters.getCompletionType() == CompletionType.BASIC && parameters.getInvocationCount() <= 1 && CSharpCompletionUtil.mayStartClassName(result) && CSharpCompletionUtil.isClassNamePossible(parameters)) {
      addTypesForUsing(parameters,CSharpCompletionSorting.modifyResultSet(parameters,result.withPrefixMatcher(tracker.betterMatcher)),holder);
    }
  }
}",0.9909433962264153
130396,"public static void addTypesForUsing(final CompletionParameters parameters,final CompletionResultSet result,final InheritorsHolder inheritorsHolder){
  final PrefixMatcher matcher=result.getPrefixMatcher();
  final CSharpReferenceExpression parent=(CSharpReferenceExpression)parameters.getPosition().getParent();
  final Project project=parent.getProject();
  final GlobalSearchScope resolveScope=parent.getResolveScope();
  final DotNetShortNameSearcher shortNameSearcher=DotNetShortNameSearcher.getInstance(project);
  final IdFilter projectIdFilter=new GlobalSearchScopeFilter(resolveScope);
  final boolean insideUsing=PsiTreeUtil.getParentOfType(parent,CSharpUsingListChild.class) != null;
  final Set<String> names=new THashSet<String>(1000);
  shortNameSearcher.collectTypeNames(new Processor<String>(){
    private int count=0;
    @Override public boolean process(    String key){
      if (count++ % 512 == 0) {
        ProgressManager.checkCanceled();
      }
      if (matcher.prefixMatches(key)) {
        names.add(key);
      }
      return true;
    }
  }
,resolveScope,projectIdFilter);
  int i=0;
  for (  String key : names) {
    if (i++ % 512 == 0) {
      ProgressManager.checkCanceled();
    }
    shortNameSearcher.collectTypes(key,resolveScope,projectIdFilter,new Processor<DotNetTypeDeclaration>(){
      @Override @RequiredReadAction public boolean process(      DotNetTypeDeclaration typeDeclaration){
        if (inheritorsHolder.alreadyProcessed(typeDeclaration)) {
          return true;
        }
        consumeType(parameters,parent,result,insideUsing,typeDeclaration);
        return true;
      }
    }
);
  }
}","@RequiredReadAction public static void addTypesForUsing(final CompletionParameters parameters,final CompletionResultSet result,final InheritorsHolder inheritorsHolder){
  final PrefixMatcher matcher=result.getPrefixMatcher();
  final CSharpReferenceExpression parent=(CSharpReferenceExpression)parameters.getPosition().getParent();
  final Project project=parent.getProject();
  final GlobalSearchScope resolveScope=parent.getResolveScope();
  final DotNetShortNameSearcher shortNameSearcher=DotNetShortNameSearcher.getInstance(project);
  final IdFilter projectIdFilter=new GlobalSearchScopeFilter(resolveScope);
  final boolean insideUsing=PsiTreeUtil.getParentOfType(parent,CSharpUsingListChild.class) != null;
  final Set<String> names=new THashSet<String>(1000);
  shortNameSearcher.collectTypeNames(new Processor<String>(){
    private int count=0;
    @Override public boolean process(    String key){
      if (count++ % 512 == 0) {
        ProgressManager.checkCanceled();
      }
      if (matcher.prefixMatches(key)) {
        names.add(key);
      }
      return true;
    }
  }
,resolveScope,projectIdFilter);
  final Set<DotNetTypeDeclaration> targets=new THashSet<DotNetTypeDeclaration>(names.size());
  int i=0;
  for (  String key : names) {
    if (i++ % 512 == 0) {
      ProgressManager.checkCanceled();
    }
    shortNameSearcher.collectTypes(key,resolveScope,projectIdFilter,new Processor<DotNetTypeDeclaration>(){
      @Override @RequiredReadAction public boolean process(      DotNetTypeDeclaration typeDeclaration){
        if (inheritorsHolder.alreadyProcessed(typeDeclaration)) {
          return true;
        }
        targets.add(typeDeclaration);
        return true;
      }
    }
);
  }
  i=0;
  for (  DotNetTypeDeclaration target : targets) {
    if (i++ % 512 == 0) {
      ProgressManager.checkCanceled();
    }
    consumeType(parameters,parent,result,insideUsing,target);
  }
}",0.8928170594837261
130397,"@RequiredReadAction public static Owners toOwners(DotNetModifierListOwner owner){
  if (owner instanceof CSharpFieldDeclaration && ((CSharpFieldDeclaration)owner).isConstant()) {
    return Owners.Constant;
  }
  if (owner instanceof CSharpConstructorDeclaration) {
    if (((CSharpConstructorDeclaration)owner).isDeConstructor()) {
      return Owners.DeConstructor;
    }
    if (owner.hasModifier(DotNetModifier.STATIC)) {
      return Owners.StaticConstructor;
    }
    return Owners.Constructor;
  }
  if (owner instanceof CSharpMethodDeclaration || owner instanceof CSharpPropertyDeclaration || owner instanceof CSharpIndexMethodDeclaration) {
    PsiElement parent=owner.getParent();
    if (parent instanceof CSharpTypeDeclaration) {
      if (((CSharpTypeDeclaration)parent).isInterface()) {
        return Owners.InterfaceMember;
      }
    }
  }
  if (owner instanceof DotNetGenericParameter) {
    return Owners.GenericParameter;
  }
  if (owner instanceof DotNetTypeDeclaration) {
    PsiElement parent=owner.getParent();
    if (parent instanceof CSharpNamespaceDeclaration || parent instanceof CSharpFile) {
      return Owners.NamespaceType;
    }
 else     if (parent instanceof DotNetTypeDeclaration) {
      return Owners.NestedType;
    }
  }
  return Owners.Unknown;
}","@RequiredReadAction public static Owners toOwners(DotNetModifierListOwner owner){
  if (owner instanceof CSharpFieldDeclaration && ((CSharpFieldDeclaration)owner).isConstant()) {
    return Owners.Constant;
  }
  if (owner instanceof CSharpConstructorDeclaration) {
    if (((CSharpConstructorDeclaration)owner).isDeConstructor()) {
      return Owners.DeConstructor;
    }
    if (owner.hasModifier(DotNetModifier.STATIC)) {
      return Owners.StaticConstructor;
    }
    return Owners.Constructor;
  }
  if (owner instanceof CSharpMethodDeclaration || owner instanceof CSharpPropertyDeclaration || owner instanceof CSharpIndexMethodDeclaration) {
    PsiElement parent=owner.getParent();
    if (parent instanceof CSharpTypeDeclaration) {
      if (((CSharpTypeDeclaration)parent).isInterface()) {
        return Owners.InterfaceMember;
      }
    }
  }
  if (owner instanceof DotNetGenericParameter) {
    return Owners.GenericParameter;
  }
  if (owner instanceof DotNetTypeDeclaration) {
    boolean anEnum=((DotNetTypeDeclaration)owner).isEnum();
    PsiElement parent=owner.getParent();
    if (parent instanceof CSharpNamespaceDeclaration || parent instanceof CSharpFile) {
      return anEnum ? Owners.NamespaceEnum : Owners.NamespaceType;
    }
 else     if (parent instanceof DotNetTypeDeclaration) {
      return anEnum ? Owners.NestedEnum : Owners.NestedType;
    }
  }
  return Owners.Unknown;
}",0.9552349241583424
130398,"@RequiredReadAction @NotNull @Override public List<CompilerCheckBuilder> check(@NotNull CSharpLanguageVersion languageVersion,@NotNull CSharpHighlightContext highlightContext,@NotNull CSharpBlockStatementImpl element){
  PsiElement parent=element.getParent();
  if (!(parent instanceof DotNetModifierListOwner)) {
    return Collections.emptyList();
  }
  final List<CompilerCheckBuilder> results=new ArrayList<CompilerCheckBuilder>();
  final Set<String> names=new THashSet<String>();
  parent.accept(new CSharpRecursiveElementVisitor(){
    @Override @RequiredReadAction public void visitLocalVariable(    CSharpLocalVariable variable){
      String name=variable.getName();
      if (names.contains(name)) {
        results.add(newBuilder(variable.getNameIdentifier(),name));
      }
 else {
        names.add(name);
      }
      DotNetExpression initializer=variable.getInitializer();
      if (initializer != null) {
        initializer.accept(this);
      }
    }
    @Override public void visitCatchStatement(    CSharpCatchStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitIfStatement(    CSharpIfStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitTryStatement(    CSharpTryStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitBlockStatement(    CSharpBlockStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitForeachStatement(    CSharpForeachStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitForStatement(    CSharpForStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitParameter(    DotNetParameter parameter){
      String name=parameter.getName();
      names.add(name);
    }
    @Override public void visitLambdaExpression(    CSharpLambdaExpressionImpl expression){
      visitAndRollback(expression);
    }
    @Override public void visitAnonymMethodExpression(    CSharpDelegateExpressionImpl method){
      visitAndRollback(method);
    }
    @Override public void visitLambdaParameter(    CSharpLambdaParameterImpl parameter){
      String name=parameter.getName();
      if (names.contains(name)) {
        results.add(newBuilderImpl(CS0136.class,parameter.getNameIdentifier(),name,name));
      }
 else {
        names.add(name);
      }
    }
    private void visitAndRollback(    PsiElement e){
      Set<String> oldSet=new HashSet<String>(names);
      visitElement(e);
      names.clear();
      names.addAll(oldSet);
    }
  }
);
  return results;
}","@RequiredReadAction @NotNull @Override public List<CompilerCheckBuilder> check(@NotNull CSharpLanguageVersion languageVersion,@NotNull CSharpHighlightContext highlightContext,@NotNull CSharpBlockStatementImpl element){
  PsiElement parent=element.getParent();
  if (!(parent instanceof DotNetModifierListOwner)) {
    return Collections.emptyList();
  }
  final List<CompilerCheckBuilder> results=new ArrayList<CompilerCheckBuilder>();
  final Set<String> names=new THashSet<String>();
  parent.accept(new CSharpRecursiveElementVisitor(){
    @Override @RequiredReadAction public void visitLocalVariable(    CSharpLocalVariable variable){
      String name=variable.getName();
      if (names.contains(name)) {
        results.add(newBuilder(variable.getNameIdentifier(),name));
      }
 else {
        names.add(name);
      }
      DotNetExpression initializer=variable.getInitializer();
      if (initializer != null) {
        initializer.accept(this);
      }
    }
    @Override public void visitCatchStatement(    CSharpCatchStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitIfStatement(    CSharpIfStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitTryStatement(    CSharpTryStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitBlockStatement(    CSharpBlockStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitForeachStatement(    CSharpForeachStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitFixedStatement(    CSharpFixedStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitForStatement(    CSharpForStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitParameter(    DotNetParameter parameter){
      String name=parameter.getName();
      names.add(name);
    }
    @Override public void visitLambdaExpression(    CSharpLambdaExpressionImpl expression){
      visitAndRollback(expression);
    }
    @Override public void visitAnonymMethodExpression(    CSharpDelegateExpressionImpl method){
      visitAndRollback(method);
    }
    @Override public void visitLambdaParameter(    CSharpLambdaParameterImpl parameter){
      String name=parameter.getName();
      if (names.contains(name)) {
        results.add(newBuilderImpl(CS0136.class,parameter.getNameIdentifier(),name,name));
      }
 else {
        names.add(name);
      }
    }
    private void visitAndRollback(    PsiElement e){
      Set<String> oldSet=new HashSet<String>(names);
      visitElement(e);
      names.clear();
      names.addAll(oldSet);
    }
  }
);
  return results;
}",0.976470588235294
130399,@Nullable String getReferenceName();,@Nullable @RequiredReadAction String getReferenceName();,0.782608695652174
130400,@Nullable String getReferenceNameWithAt();,@Nullable @RequiredReadAction String getReferenceNameWithAt();,0.8076923076923077
130401,@Nullable PsiElement getQualifier();,@Nullable @RequiredReadAction PsiElement getQualifier();,0.782608695652174
130402,@NotNull DotNetTypeRef[] getTypeArgumentListRefs();,@NotNull @RequiredReadAction DotNetTypeRef[] getTypeArgumentListRefs();,0.8360655737704918
130403,@Nullable PsiElement getMemberAccessElement();,@Nullable @RequiredReadAction PsiElement getMemberAccessElement();,0.8214285714285714
130404,@NotNull AccessType getMemberAccessType();,@NotNull @RequiredReadAction AccessType getMemberAccessType();,0.8076923076923077
130405,@NotNull ResolveToKind kind();,@NotNull @RequiredReadAction ResolveToKind kind();,0.75
130406,boolean isGlobalElement();,@RequiredReadAction boolean isGlobalElement();,0.7222222222222222
130407,@Nullable PsiElement getReferenceElement();,@Nullable @RequiredReadAction PsiElement getReferenceElement();,0.8113207547169812
130408,@Nullable DotNetTypeList getTypeArgumentList();,@Nullable @RequiredReadAction DotNetTypeList getTypeArgumentList();,0.8245614035087719
130409,"@NotNull ResolveResult[] multiResolve(final boolean incompleteCode,final boolean resolveFromParent);","@NotNull @RequiredReadAction ResolveResult[] multiResolve(final boolean incompleteCode,final boolean resolveFromParent);",0.9090909090909092
130410,"@NotNull DotNetTypeRef toTypeRefWithoutCaching(ResolveToKind kind,boolean resolveFromParent);","@NotNull @RequiredReadAction DotNetTypeRef toTypeRefWithoutCaching(ResolveToKind kind,boolean resolveFromParent);",0.9029126213592232
130411,@NotNull ResolveResult[] tryResolveFromQualifier(@NotNull PsiElement element);,@NotNull @RequiredReadAction ResolveResult[] tryResolveFromQualifier(@NotNull PsiElement element);,0.8863636363636364
130412,"@NotNull ResolveResult[] multiResolveImpl(ResolveToKind kind,boolean resolveFromParent);","@NotNull @RequiredReadAction ResolveResult[] multiResolveImpl(ResolveToKind kind,boolean resolveFromParent);",0.8979591836734694
130413,"@Nullable @Override public String getReferenceName(){
  throw new UnsupportedOperationException();
}","@RequiredReadAction @Nullable @Override public String getReferenceName(){
  throw new UnsupportedOperationException();
}",0.9090909090909092
130414,"@Nullable @Override public String getReferenceNameWithAt(){
  throw new UnsupportedOperationException();
}","@RequiredReadAction @Nullable @Override public String getReferenceNameWithAt(){
  throw new UnsupportedOperationException();
}",0.913793103448276
130415,"@Nullable @Override public String getReferenceName(){
  throw new UnsupportedOperationException();
}","@RequiredReadAction @Nullable @Override public String getReferenceName(){
  throw new UnsupportedOperationException();
}",0.9090909090909092
130416,"@Nullable @Override public String getReferenceNameWithAt(){
  throw new UnsupportedOperationException();
}","@RequiredReadAction @Nullable @Override public String getReferenceNameWithAt(){
  throw new UnsupportedOperationException();
}",0.913793103448276
130417,"@Nullable @Override public PsiElement getQualifier(){
  return null;
}","@RequiredReadAction @Nullable @Override public PsiElement getQualifier(){
  return null;
}",0.875
130418,"@NotNull @Override public ResolveResult[] tryResolveFromQualifier(@NotNull PsiElement element){
  return CSharpReferenceExpressionImplUtil.tryResolveFromQualifier(this,element);
}","@RequiredReadAction @NotNull @Override public ResolveResult[] tryResolveFromQualifier(@NotNull PsiElement element){
  return CSharpReferenceExpressionImplUtil.tryResolveFromQualifier(this,element);
}",0.9470899470899472
130419,"@Override @NotNull public DotNetTypeRef toTypeRefWithoutCaching(ResolveToKind kind,boolean resolveFromParent){
  return CSharpReferenceExpressionImplUtil.toTypeRefWithoutCaching(this,kind,resolveFromParent);
}","@RequiredReadAction @Override @NotNull public DotNetTypeRef toTypeRefWithoutCaching(ResolveToKind kind,boolean resolveFromParent){
  return CSharpReferenceExpressionImplUtil.toTypeRefWithoutCaching(this,kind,resolveFromParent);
}",0.954337899543379
130420,"@Nullable @Override public PsiElement resolve(){
  return CSharpResolveUtil.findFirstValidElement(multiResolve(false));
}","@Nullable @Override @RequiredReadAction public PsiElement resolve(){
  return CSharpResolveUtil.findFirstValidElement(multiResolve(false));
}",0.9236641221374046
130421,"@Nullable @Override public String getReferenceName(){
  String referenceNameWithAt=getReferenceNameWithAt();
  return referenceNameWithAt == null ? null : CSharpPsiUtilImpl.getNameWithoutAt(referenceNameWithAt);
}","@RequiredReadAction @Nullable @Override public String getReferenceName(){
  String referenceNameWithAt=getReferenceNameWithAt();
  return referenceNameWithAt == null ? null : CSharpPsiUtilImpl.getNameWithoutAt(referenceNameWithAt);
}",0.9551569506726456
130422,"@Override @NotNull public ResolveResult[] multiResolveImpl(ResolveToKind kind,boolean resolveFromParent){
  return CSharpReferenceExpressionImplUtil.multiResolveImpl(kind,CSharpReferenceExpressionImplUtil.findCallArgumentListOwner(kind,this),this,resolveFromParent);
}","@RequiredReadAction @Override @NotNull public ResolveResult[] multiResolveImpl(ResolveToKind kind,boolean resolveFromParent){
  return CSharpReferenceExpressionImplUtil.multiResolveImpl(kind,CSharpReferenceExpressionImplUtil.findCallArgumentListOwner(kind,this),this,resolveFromParent);
}",0.9640287769784172
130423,"@Override @NotNull public ResolveResult[] multiResolve(final boolean incompleteCode,final boolean resolveFromParent){
  if (!isValid()) {
    return ResolveResult.EMPTY_ARRAY;
  }
  return CSharpResolveCache.getInstance(getProject()).resolveWithCaching(this,CSharpReferenceExpressionImplUtil.OurResolver.INSTANCE,true,incompleteCode,resolveFromParent);
}","@RequiredReadAction @Override @NotNull public ResolveResult[] multiResolve(final boolean incompleteCode,final boolean resolveFromParent){
  if (!isValid()) {
    return ResolveResult.EMPTY_ARRAY;
  }
  return CSharpResolveCache.getInstance(getProject()).resolveWithCaching(this,CSharpReferenceExpressionImplUtil.OurResolver.INSTANCE,true,incompleteCode,resolveFromParent);
}",0.9725274725274724
130424,"@Override @Nullable public PsiElement getReferenceElement(){
  return findChildByType(CSharpReferenceExpressionImplUtil.ourReferenceElements);
}","@RequiredReadAction @Override @Nullable public PsiElement getReferenceElement(){
  return findChildByType(CSharpReferenceExpressionImplUtil.ourReferenceElements);
}",0.935064935064935
130425,"@Nullable @Override public DotNetTypeList getTypeArgumentList(){
  return findChildByClass(DotNetTypeList.class);
}","@RequiredReadAction @Nullable @Override public DotNetTypeList getTypeArgumentList(){
  return findChildByClass(DotNetTypeList.class);
}",0.92
130426,"@Override public PsiElement handleElementRename(String s) throws IncorrectOperationException {
  PsiElement element=getReferenceElement();
  PsiElement newIdentifier=CSharpFileFactory.createReferenceToken(getProject(),s);
  element.replace(newIdentifier);
  return this;
}","@Override @RequiredWriteAction public PsiElement handleElementRename(String s) throws IncorrectOperationException {
}",0.493573264781491
130427,"@Override public boolean isSoft(){
  return CSharpReferenceExpressionImplUtil.isSoft(this);
}","@Override @RequiredReadAction public boolean isSoft(){
  return CSharpReferenceExpressionImplUtil.isSoft(this);
}",0.9029126213592232
130428,"@Override public boolean isReferenceTo(PsiElement element){
  PsiElement resolve=resolve();
  if (element instanceof DotNetNamespaceAsElement && resolve instanceof DotNetNamespaceAsElement) {
    return Comparing.equal(((DotNetNamespaceAsElement)resolve).getPresentableQName(),((DotNetNamespaceAsElement)element).getPresentableQName());
  }
  return element.getManager().areElementsEquivalent(element,resolve);
}","@Override @RequiredReadAction public boolean isReferenceTo(PsiElement element){
  PsiElement resolve=resolve();
  if (element instanceof DotNetNamespaceAsElement && resolve instanceof DotNetNamespaceAsElement) {
    return Comparing.equal(((DotNetNamespaceAsElement)resolve).getPresentableQName(),((DotNetNamespaceAsElement)element).getPresentableQName());
  }
  return element.getManager().areElementsEquivalent(element,resolve);
}",0.976303317535545
130429,"@Nullable @Override public PsiElement getMemberAccessElement(){
  return findChildByType(CSharpReferenceExpressionImplUtil.ourAccessTokens);
}","@Nullable @Override @RequiredReadAction public PsiElement getMemberAccessElement(){
  return findChildByType(CSharpReferenceExpressionImplUtil.ourAccessTokens);
}",0.9342105263157896
130430,"@Override public TextRange getRangeInElement(){
  return CSharpReferenceExpressionImplUtil.getRangeInElement(this);
}","@Override @RequiredReadAction public TextRange getRangeInElement(){
  return CSharpReferenceExpressionImplUtil.getRangeInElement(this);
}",0.9212598425196852
130431,"@NotNull @Override public AccessType getMemberAccessType(){
  PsiElement childByType=getMemberAccessElement();
  if (childByType == null) {
    return AccessType.NONE;
  }
  IElementType elementType=childByType.getNode().getElementType();
  if (elementType == CSharpTokens.ARROW) {
    return AccessType.ARROW;
  }
 else   if (elementType == CSharpTokens.COLONCOLON) {
    return AccessType.COLONCOLON;
  }
 else   if (elementType == CSharpTokens.NULLABE_CALL) {
    return AccessType.NULLABLE_CALL;
  }
  return AccessType.DOT;
}","@NotNull @Override @RequiredReadAction public AccessType getMemberAccessType(){
  PsiElement childByType=getMemberAccessElement();
  if (childByType == null) {
    return AccessType.NONE;
  }
  IElementType elementType=childByType.getNode().getElementType();
  if (elementType == CSharpTokens.ARROW) {
    return AccessType.ARROW;
  }
 else   if (elementType == CSharpTokens.COLONCOLON) {
    return AccessType.COLONCOLON;
  }
 else   if (elementType == CSharpTokens.NULLABE_CALL) {
    return AccessType.NULLABLE_CALL;
  }
  return AccessType.DOT;
}",0.9814814814814816
130432,"@Override @NotNull public ResolveToKind kind(){
  return CSharpReferenceExpressionImplUtil.kind(this);
}","@RequiredReadAction @Override @NotNull public ResolveToKind kind(){
  return CSharpReferenceExpressionImplUtil.kind(this);
}",0.912280701754386
130433,"@NotNull @Override public String getCanonicalText(){
  return getText();
}","@NotNull @Override @RequiredReadAction public String getCanonicalText(){
  return getText();
}",0.8809523809523809
130434,"@NotNull @Override public DotNetTypeRef[] getTypeArgumentListRefs(){
  DotNetTypeList typeArgumentList=getTypeArgumentList();
  return typeArgumentList == null ? DotNetTypeRef.EMPTY_ARRAY : typeArgumentList.getTypeRefs();
}","@RequiredReadAction @NotNull @Override public DotNetTypeRef[] getTypeArgumentListRefs(){
  DotNetTypeList typeArgumentList=getTypeArgumentList();
  return typeArgumentList == null ? DotNetTypeRef.EMPTY_ARRAY : typeArgumentList.getTypeRefs();
}",0.9570815450643776
130435,"@Override public boolean isGlobalElement(){
  PsiElement referenceElement=getReferenceElement();
  return referenceElement != null && referenceElement.getNode().getElementType() == CSharpSoftTokens.GLOBAL_KEYWORD;
}","@RequiredReadAction @Override public boolean isGlobalElement(){
  PsiElement referenceElement=getReferenceElement();
  return referenceElement != null && referenceElement.getNode().getElementType() == CSharpSoftTokens.GLOBAL_KEYWORD;
}",0.9555555555555556
130436,"@Nullable @Override public String getReferenceNameWithAt(){
  PsiElement referenceElement=getReferenceElement();
  return referenceElement == null ? null : referenceElement.getText();
}","@RequiredReadAction @Nullable @Override public String getReferenceNameWithAt(){
  PsiElement referenceElement=getReferenceElement();
  return referenceElement == null ? null : referenceElement.getText();
}",0.9487179487179488
130437,"@NotNull @Override public DotNetTypeRef toTypeRef(boolean resolveFromParent){
  return CSharpReferenceExpressionImplUtil.toTypeRef(this,resolveFromParent);
}","@NotNull @Override @RequiredReadAction public DotNetTypeRef toTypeRef(boolean resolveFromParent){
  return CSharpReferenceExpressionImplUtil.toTypeRef(this,resolveFromParent);
}",0.940119760479042
130438,"@Nullable @RequiredReadAction public static Pair<DotNetTypeDeclaration,DotNetGenericExtractor> resolveBaseType(@NotNull DotNetTypeDeclaration typeDeclaration,@NotNull PsiElement scope){
  DotNetTypeRef[] anExtends=typeDeclaration.getExtendTypeRefs();
  if (anExtends.length != 0) {
    for (    DotNetTypeRef anExtend : anExtends) {
      DotNetTypeResolveResult resolveResult=anExtend.resolve(scope);
      PsiElement resolve=resolveResult.getElement();
      if (resolve instanceof DotNetTypeDeclaration && !((DotNetTypeDeclaration)resolve).isInterface()) {
        return Pair.create((DotNetTypeDeclaration)resolve,resolveResult.getGenericExtractor());
      }
    }
  }
  String defaultSuperType=getDefaultSuperType(typeDeclaration);
  if (defaultSuperType != null) {
    DotNetTypeDeclaration type=DotNetPsiSearcher.getInstance(typeDeclaration.getProject()).findType(defaultSuperType,scope.getResolveScope(),CSharpTransform.INSTANCE);
    if (type != null) {
      return Pair.create(type,DotNetGenericExtractor.EMPTY);
    }
  }
  return null;
}","@Nullable @RequiredReadAction public static Pair<DotNetTypeDeclaration,DotNetGenericExtractor> resolveBaseType(@NotNull DotNetTypeDeclaration typeDeclaration,@NotNull PsiElement scope){
  typeDeclaration=CSharpCompositeTypeDeclaration.selectCompositeOrSelfType(typeDeclaration);
  DotNetTypeRef[] anExtends=typeDeclaration.getExtendTypeRefs();
  if (anExtends.length != 0) {
    for (    DotNetTypeRef anExtend : anExtends) {
      DotNetTypeResolveResult resolveResult=anExtend.resolve(scope);
      PsiElement resolve=resolveResult.getElement();
      if (resolve instanceof DotNetTypeDeclaration && !((DotNetTypeDeclaration)resolve).isInterface()) {
        return Pair.create((DotNetTypeDeclaration)resolve,resolveResult.getGenericExtractor());
      }
    }
  }
  String defaultSuperType=getDefaultSuperType(typeDeclaration);
  if (defaultSuperType != null) {
    DotNetTypeDeclaration type=DotNetPsiSearcher.getInstance(typeDeclaration.getProject()).findType(defaultSuperType,scope.getResolveScope(),CSharpTransform.INSTANCE);
    if (type != null) {
      return Pair.create(type,DotNetGenericExtractor.EMPTY);
    }
  }
  return null;
}",0.957630979498861
130439,"private static void parse(@NotNull CSharpBuilderWrapper builder,boolean root){
  PsiBuilder.Marker marker=builder.mark();
  Pair<PsiBuilder.Marker,ModifierSet> modifierListPair=parseWithSoftElements(new NotNullFunction<CSharpBuilderWrapper,Pair<PsiBuilder.Marker,ModifierSet>>(){
    @NotNull @Override public Pair<PsiBuilder.Marker,ModifierSet> fun(    CSharpBuilderWrapper builderWrapper){
      return parseModifierListWithAttributes(builderWrapper,STUB_SUPPORT);
    }
  }
,builder,PARTIAL_KEYWORD,ASYNC_KEYWORD);
  PsiBuilder.Marker modifierListMarker=modifierListPair.getFirst();
  ModifierSet modifierSet=modifierListPair.getSecond();
  IElementType tokenType=builder.getTokenType();
  if (tokenType == NAMESPACE_KEYWORD) {
    NamespaceDeclarationParsing.parse(builder,marker);
  }
 else   if (CSharpTokenSets.TYPE_DECLARATION_START.contains(tokenType)) {
    TypeDeclarationParsing.parse(builder,marker);
  }
 else   if (tokenType == EVENT_KEYWORD) {
    builder.advanceLexer();
    EventParsing.parse(builder,marker,modifierSet);
  }
 else   if (tokenType == DELEGATE_KEYWORD) {
    builder.advanceLexer();
    MethodParsing.parseMethodStartAtType(builder,marker,modifierSet);
  }
 else   if (tokenType == USING_KEYWORD) {
    UsingStatementParsing.parseUsingList(builder,marker);
  }
 else   if (tokenType == CONST_KEYWORD) {
    builder.advanceLexer();
    FieldOrPropertyParsing.parseFieldOrLocalVariableAtTypeWithDone(builder,marker,FIELD_DECLARATION,STUB_SUPPORT,true,modifierSet);
  }
 else {
    if (tokenType == CSharpTokens.IDENTIFIER && builder.lookAhead(1) == LPAR) {
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.CONSTRUCTOR,modifierSet);
    }
 else     if (tokenType == TILDE) {
      builder.advanceLexer();
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.DECONSTRUCTOR,modifierSet);
    }
 else {
      TypeInfo typeInfo=parseType(builder,STUB_SUPPORT);
      if (typeInfo == null) {
        if (!modifierSet.isEmpty()) {
          if (root) {
            marker.done(DUMMY_DECLARATION);
            return;
          }
          builder.error(""String_Node_Str"");
          marker.done(FIELD_DECLARATION);
          return;
        }
 else {
          modifierListMarker.drop();
        }
        marker.drop();
        advanceUnexpectedToken(builder);
      }
 else       if (builder.getTokenType() == OPERATOR_KEYWORD) {
        MethodParsing.parseMethodStartAfterType(builder,marker,typeInfo,MethodParsing.Target.METHOD,modifierSet);
      }
 else {
        TypeInfo implementType=parseImplementType(builder);
        if (implementType == null) {
          builder.error(""String_Node_Str"");
          parseAfterName(builder,marker,builder.getTokenType() == LBRACKET ? THIS_KEYWORD : null,modifierSet);
          return;
        }
        IElementType prevToken=null;
        if (builder.getTokenType() == DOT) {
          builder.advanceLexer();
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
 else {
          if (implementType.marker != null) {
            implementType.marker.rollbackTo();
          }
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
        parseAfterName(builder,marker,prevToken,modifierSet);
      }
    }
  }
}","private static void parse(@NotNull CSharpBuilderWrapper builder,boolean root){
  PsiBuilder.Marker marker=builder.mark();
  Pair<PsiBuilder.Marker,ModifierSet> modifierListPair=parseWithSoftElements(new NotNullFunction<CSharpBuilderWrapper,Pair<PsiBuilder.Marker,ModifierSet>>(){
    @NotNull @Override public Pair<PsiBuilder.Marker,ModifierSet> fun(    CSharpBuilderWrapper builderWrapper){
      return parseModifierListWithAttributes(builderWrapper,STUB_SUPPORT);
    }
  }
,builder,PARTIAL_KEYWORD,ASYNC_KEYWORD);
  PsiBuilder.Marker modifierListMarker=modifierListPair.getFirst();
  ModifierSet modifierSet=modifierListPair.getSecond();
  IElementType tokenType=builder.getTokenType();
  if (tokenType == null) {
    if (modifierListPair.getSecond().isEmpty()) {
      marker.drop();
    }
 else {
      marker.error(""String_Node_Str"");
    }
    return;
  }
  if (tokenType == NAMESPACE_KEYWORD) {
    NamespaceDeclarationParsing.parse(builder,marker);
  }
 else   if (CSharpTokenSets.TYPE_DECLARATION_START.contains(tokenType)) {
    TypeDeclarationParsing.parse(builder,marker);
  }
 else   if (tokenType == EVENT_KEYWORD) {
    builder.advanceLexer();
    EventParsing.parse(builder,marker,modifierSet);
  }
 else   if (tokenType == DELEGATE_KEYWORD) {
    builder.advanceLexer();
    MethodParsing.parseMethodStartAtType(builder,marker,modifierSet);
  }
 else   if (tokenType == USING_KEYWORD) {
    UsingStatementParsing.parseUsingList(builder,marker);
  }
 else   if (tokenType == CONST_KEYWORD) {
    builder.advanceLexer();
    FieldOrPropertyParsing.parseFieldOrLocalVariableAtTypeWithDone(builder,marker,FIELD_DECLARATION,STUB_SUPPORT,true,modifierSet);
  }
 else {
    if (tokenType == CSharpTokens.IDENTIFIER && builder.lookAhead(1) == LPAR) {
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.CONSTRUCTOR,modifierSet);
    }
 else     if (tokenType == TILDE) {
      builder.advanceLexer();
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.DECONSTRUCTOR,modifierSet);
    }
 else {
      TypeInfo typeInfo=parseType(builder,STUB_SUPPORT);
      if (typeInfo == null) {
        if (!modifierSet.isEmpty()) {
          if (root) {
            marker.done(DUMMY_DECLARATION);
            return;
          }
          builder.error(""String_Node_Str"");
          marker.done(FIELD_DECLARATION);
          return;
        }
 else {
          modifierListMarker.drop();
        }
        marker.drop();
        advanceUnexpectedToken(builder);
      }
 else       if (builder.getTokenType() == OPERATOR_KEYWORD) {
        MethodParsing.parseMethodStartAfterType(builder,marker,typeInfo,MethodParsing.Target.METHOD,modifierSet);
      }
 else {
        TypeInfo implementType=parseImplementType(builder);
        if (implementType == null) {
          builder.error(""String_Node_Str"");
          parseAfterName(builder,marker,builder.getTokenType() == LBRACKET ? THIS_KEYWORD : null,modifierSet);
          return;
        }
        IElementType prevToken=null;
        if (builder.getTokenType() == DOT) {
          builder.advanceLexer();
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
 else {
          if (implementType.marker != null) {
            implementType.marker.rollbackTo();
          }
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
        parseAfterName(builder,marker,prevToken,modifierSet);
      }
    }
  }
}",0.9747482119398628
130440,"@Override public int getStubVersion(){
  return 75;
}","@Override public int getStubVersion(){
  return 76;
}",0.981132075471698
130441,"private static void parse(@NotNull CSharpBuilderWrapper builder,boolean root){
  PsiBuilder.Marker marker=builder.mark();
  Pair<PsiBuilder.Marker,ModifierSet> modifierListPair=parseWithSoftElements(new NotNullFunction<CSharpBuilderWrapper,Pair<PsiBuilder.Marker,ModifierSet>>(){
    @NotNull @Override public Pair<PsiBuilder.Marker,ModifierSet> fun(    CSharpBuilderWrapper builderWrapper){
      return parseModifierListWithAttributes(builderWrapper,STUB_SUPPORT);
    }
  }
,builder,PARTIAL_KEYWORD,ASYNC_KEYWORD);
  PsiBuilder.Marker modifierListMarker=modifierListPair.getFirst();
  ModifierSet modifierSet=modifierListPair.getSecond();
  IElementType tokenType=builder.getTokenType();
  if (tokenType == null) {
    if (modifierListPair.getSecond().isEmpty()) {
      marker.drop();
    }
 else {
      marker.error(""String_Node_Str"");
    }
    return;
  }
  if (tokenType == NAMESPACE_KEYWORD) {
    NamespaceDeclarationParsing.parse(builder,marker);
  }
 else   if (CSharpTokenSets.TYPE_DECLARATION_START.contains(tokenType)) {
    TypeDeclarationParsing.parse(builder,marker);
  }
 else   if (tokenType == EVENT_KEYWORD) {
    builder.advanceLexer();
    EventParsing.parse(builder,marker,modifierSet);
  }
 else   if (tokenType == DELEGATE_KEYWORD) {
    builder.advanceLexer();
    MethodParsing.parseMethodStartAtType(builder,marker,modifierSet);
  }
 else   if (tokenType == USING_KEYWORD) {
    UsingStatementParsing.parseUsingList(builder,marker);
  }
 else   if (tokenType == CONST_KEYWORD) {
    builder.advanceLexer();
    FieldOrPropertyParsing.parseFieldOrLocalVariableAtTypeWithDone(builder,marker,FIELD_DECLARATION,STUB_SUPPORT,true,modifierSet);
  }
 else {
    if (tokenType == CSharpTokens.IDENTIFIER && builder.lookAhead(1) == LPAR) {
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.CONSTRUCTOR,modifierSet);
    }
 else     if (tokenType == TILDE) {
      builder.advanceLexer();
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.DECONSTRUCTOR,modifierSet);
    }
 else {
      TypeInfo typeInfo=parseType(builder,STUB_SUPPORT);
      if (typeInfo == null) {
        if (!modifierSet.isEmpty()) {
          if (root) {
            marker.done(DUMMY_DECLARATION);
            return;
          }
          builder.error(""String_Node_Str"");
          marker.done(FIELD_DECLARATION);
          return;
        }
 else {
          modifierListMarker.drop();
        }
        marker.drop();
        advanceUnexpectedToken(builder);
      }
 else       if (builder.getTokenType() == OPERATOR_KEYWORD) {
        MethodParsing.parseMethodStartAfterType(builder,marker,typeInfo,MethodParsing.Target.METHOD,modifierSet);
      }
 else {
        TypeInfo implementType=parseImplementType(builder);
        if (implementType == null) {
          builder.error(""String_Node_Str"");
          parseAfterName(builder,marker,builder.getTokenType() == LBRACKET ? THIS_KEYWORD : null,modifierSet);
          return;
        }
        IElementType prevToken=null;
        if (builder.getTokenType() == DOT) {
          builder.advanceLexer();
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
 else {
          if (implementType.marker != null) {
            implementType.marker.rollbackTo();
          }
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
        parseAfterName(builder,marker,prevToken,modifierSet);
      }
    }
  }
}","private static void parse(@NotNull CSharpBuilderWrapper builder,boolean root){
  PsiBuilder.Marker marker=builder.mark();
  Pair<PsiBuilder.Marker,ModifierSet> modifierListPair=parseWithSoftElements(new NotNullFunction<CSharpBuilderWrapper,Pair<PsiBuilder.Marker,ModifierSet>>(){
    @NotNull @Override public Pair<PsiBuilder.Marker,ModifierSet> fun(    CSharpBuilderWrapper builderWrapper){
      return parseModifierListWithAttributes(builderWrapper,STUB_SUPPORT);
    }
  }
,builder,PARTIAL_KEYWORD,ASYNC_KEYWORD);
  PsiBuilder.Marker modifierListMarker=modifierListPair.getFirst();
  ModifierSet modifierSet=modifierListPair.getSecond();
  IElementType tokenType=builder.getTokenType();
  if (tokenType == null) {
    if (modifierListPair.getSecond().isEmpty()) {
      marker.drop();
    }
 else {
      if (root) {
        marker.done(DUMMY_DECLARATION);
      }
 else {
        marker.error(""String_Node_Str"");
      }
    }
    return;
  }
  if (tokenType == NAMESPACE_KEYWORD) {
    NamespaceDeclarationParsing.parse(builder,marker);
  }
 else   if (CSharpTokenSets.TYPE_DECLARATION_START.contains(tokenType)) {
    TypeDeclarationParsing.parse(builder,marker);
  }
 else   if (tokenType == EVENT_KEYWORD) {
    builder.advanceLexer();
    EventParsing.parse(builder,marker,modifierSet);
  }
 else   if (tokenType == DELEGATE_KEYWORD) {
    builder.advanceLexer();
    MethodParsing.parseMethodStartAtType(builder,marker,modifierSet);
  }
 else   if (tokenType == USING_KEYWORD) {
    UsingStatementParsing.parseUsingList(builder,marker);
  }
 else   if (tokenType == CONST_KEYWORD) {
    builder.advanceLexer();
    FieldOrPropertyParsing.parseFieldOrLocalVariableAtTypeWithDone(builder,marker,FIELD_DECLARATION,STUB_SUPPORT,true,modifierSet);
  }
 else {
    if (tokenType == CSharpTokens.IDENTIFIER && builder.lookAhead(1) == LPAR) {
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.CONSTRUCTOR,modifierSet);
    }
 else     if (tokenType == TILDE) {
      builder.advanceLexer();
      MethodParsing.parseMethodStartAfterType(builder,marker,null,MethodParsing.Target.DECONSTRUCTOR,modifierSet);
    }
 else {
      TypeInfo typeInfo=parseType(builder,STUB_SUPPORT);
      if (typeInfo == null) {
        if (!modifierSet.isEmpty()) {
          if (root) {
            marker.done(DUMMY_DECLARATION);
            return;
          }
          builder.error(""String_Node_Str"");
          marker.done(FIELD_DECLARATION);
          return;
        }
 else {
          modifierListMarker.drop();
        }
        marker.drop();
        advanceUnexpectedToken(builder);
      }
 else       if (builder.getTokenType() == OPERATOR_KEYWORD) {
        MethodParsing.parseMethodStartAfterType(builder,marker,typeInfo,MethodParsing.Target.METHOD,modifierSet);
      }
 else {
        TypeInfo implementType=parseImplementType(builder);
        if (implementType == null) {
          builder.error(""String_Node_Str"");
          parseAfterName(builder,marker,builder.getTokenType() == LBRACKET ? THIS_KEYWORD : null,modifierSet);
          return;
        }
        IElementType prevToken=null;
        if (builder.getTokenType() == DOT) {
          builder.advanceLexer();
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
 else {
          if (implementType.marker != null) {
            implementType.marker.rollbackTo();
          }
          prevToken=builder.getTokenType();
          doneThisOrIdentifier(builder);
        }
        parseAfterName(builder,marker,prevToken,modifierSet);
      }
    }
  }
}",0.590320765334834
130442,"@Override public int getStubVersion(){
  return 76;
}","@Override public int getStubVersion(){
  return 77;
}",0.981132075471698
130443,"@RequiredReadAction @NotNull @Override public List<HighlightInfoFactory> check(@NotNull CSharpLanguageVersion languageVersion,@NotNull CSharpReferenceExpression expression){
  PsiElement referenceElement=expression.getReferenceElement();
  if (referenceElement == null || expression.isSoft() || CSharpDocUtil.isInsideDoc(expression)) {
    return Collections.emptyList();
  }
  if (expression.getParent() instanceof CSharpCallArgumentListOwner) {
    return Collections.emptyList();
  }
  return checkReference(expression,Arrays.asList(referenceElement));
}","@RequiredReadAction @NotNull @Override public List<HighlightInfoFactory> check(@NotNull CSharpLanguageVersion languageVersion,@NotNull CSharpReferenceExpression expression){
  PsiElement referenceElement=expression.getReferenceElement();
  if (referenceElement == null || expression.isSoft() || CSharpDocUtil.isInsideDoc(expression)) {
    return Collections.emptyList();
  }
  PsiElement parent=expression.getParent();
  if (parent instanceof CSharpMethodCallExpressionImpl || parent instanceof CSharpConstructorSuperCallImpl) {
    return Collections.emptyList();
  }
  return checkReference(expression,Arrays.asList(referenceElement));
}",0.8888888888888888
130444,"@RequiredReadAction @Nullable @Override public CompilerCheckBuilder checkImpl(@NotNull CSharpLanguageVersion languageVersion,@NotNull PsiElement element){
  val resolve=resolve(element);
  if (resolve == null) {
    return null;
  }
  DotNetTypeRef firstTypeRef=resolve.getFirst();
  DotNetTypeRef secondTypeRef=resolve.getSecond();
  PsiElement elementToHighlight=resolve.getThird();
  CSharpTypeUtil.InheritResult inheritResult=CSharpTypeUtil.isInheritable(firstTypeRef,secondTypeRef,element,CSharpStaticTypeRef.IMPLICIT);
  if (!inheritResult.isSuccess()) {
    CompilerCheckBuilder builder=newBuilder(elementToHighlight,CSharpTypeRefPresentationUtil.buildTextWithKeyword(secondTypeRef,element),CSharpTypeRefPresentationUtil.buildTextWithKeyword(firstTypeRef,element));
    if (elementToHighlight instanceof DotNetExpression) {
      builder.addQuickFix(new CastExpressionToTypeRef((DotNetExpression)elementToHighlight,firstTypeRef));
    }
    if (element instanceof DotNetVariable) {
      builder.addQuickFix(new ChangeVariableToTypeRefFix((DotNetVariable)element,secondTypeRef));
    }
    if (element instanceof CSharpReturnStatementImpl) {
      CSharpSimpleLikeMethodAsElement methodElement=PsiTreeUtil.getParentOfType(element,CSharpSimpleLikeMethodAsElement.class);
      if (methodElement instanceof CSharpConversionMethodDeclaration || methodElement instanceof CSharpMethodDeclaration) {
        builder.addQuickFix(new ChangeReturnToTypeRefFix((DotNetLikeMethodDeclaration)methodElement,secondTypeRef));
      }
    }
    return builder;
  }
 else   if (inheritResult.isConversion()) {
    String text=CSharpErrorBundle.message(""String_Node_Str"",CSharpTypeRefPresentationUtil.buildTextWithKeyword(secondTypeRef,element),CSharpTypeRefPresentationUtil.buildTextWithKeyword(firstTypeRef,element));
    return newBuilder(elementToHighlight).setText(text).setHighlightInfoType(HighlightInfoType.INFORMATION).setTextAttributesKey(CSharpHighlightKey.IMPLICIT_OR_EXPLICIT_CAST);
  }
  return null;
}","@RequiredReadAction @Nullable @Override public CompilerCheckBuilder checkImpl(@NotNull CSharpLanguageVersion languageVersion,@NotNull PsiElement element){
  Trinity<? extends DotNetTypeRef,? extends DotNetTypeRef,? extends PsiElement> resolve=resolve(element);
  if (resolve == null) {
    return null;
  }
  DotNetTypeRef firstTypeRef=resolve.getFirst();
  DotNetTypeRef secondTypeRef=resolve.getSecond();
  if (firstTypeRef == DotNetTypeRef.ERROR_TYPE || secondTypeRef == DotNetTypeRef.ERROR_TYPE) {
    return null;
  }
  PsiElement elementToHighlight=resolve.getThird();
  CSharpTypeUtil.InheritResult inheritResult=CSharpTypeUtil.isInheritable(firstTypeRef,secondTypeRef,element,CSharpStaticTypeRef.IMPLICIT);
  if (!inheritResult.isSuccess()) {
    CompilerCheckBuilder builder=newBuilder(elementToHighlight,CSharpTypeRefPresentationUtil.buildTextWithKeyword(secondTypeRef,element),CSharpTypeRefPresentationUtil.buildTextWithKeyword(firstTypeRef,element));
    if (elementToHighlight instanceof DotNetExpression) {
      builder.addQuickFix(new CastExpressionToTypeRef((DotNetExpression)elementToHighlight,firstTypeRef));
    }
    if (element instanceof DotNetVariable) {
      builder.addQuickFix(new ChangeVariableToTypeRefFix((DotNetVariable)element,secondTypeRef));
    }
    if (element instanceof CSharpReturnStatementImpl) {
      CSharpSimpleLikeMethodAsElement methodElement=PsiTreeUtil.getParentOfType(element,CSharpSimpleLikeMethodAsElement.class);
      if (methodElement instanceof CSharpConversionMethodDeclaration || methodElement instanceof CSharpMethodDeclaration) {
        builder.addQuickFix(new ChangeReturnToTypeRefFix((DotNetLikeMethodDeclaration)methodElement,secondTypeRef));
      }
    }
    return builder;
  }
 else   if (inheritResult.isConversion()) {
    String text=CSharpErrorBundle.message(""String_Node_Str"",CSharpTypeRefPresentationUtil.buildTextWithKeyword(secondTypeRef,element),CSharpTypeRefPresentationUtil.buildTextWithKeyword(firstTypeRef,element));
    return newBuilder(elementToHighlight).setText(text).setHighlightInfoType(HighlightInfoType.INFORMATION).setTextAttributesKey(CSharpHighlightKey.IMPLICIT_OR_EXPLICIT_CAST);
  }
  return null;
}",0.9533333333333334
130445,"@Override @RequiredReadAction protected PsiFile createFile(String name,String templateName,PsiDirectory dir){
  DotNetSimpleModuleExtension<?> extension=ModuleUtilCore.getExtension(dir,DotNetModuleExtension.class);
  String namespace=null;
  if (extension != null) {
    namespace=extension.getNamespaceGeneratePolicy().calculateNamespace(dir);
  }
  FileTemplate template=FileTemplateManager.getInstance().getInternalTemplate(templateName);
  return createFileFromTemplate(name,namespace,template,dir);
}","@Override @RequiredReadAction protected PsiFile createFile(String name,String templateName,final PsiDirectory dir){
  DotNetSimpleModuleExtension<?> extension=ModuleUtilCore.getExtension(dir,DotNetSimpleModuleExtension.class);
  if (extension == null) {
    Module moduleByPsiDirectory=findModuleByPsiDirectory(dir.getProject(),dir);
    if (moduleByPsiDirectory != null) {
      extension=ModuleUtilCore.getExtension(moduleByPsiDirectory,DotNetSimpleModuleExtension.class);
    }
  }
  String namespace=null;
  if (extension != null) {
    namespace=extension.getNamespaceGeneratePolicy().calculateNamespace(dir);
  }
  FileTemplate template=FileTemplateManager.getInstance().getInternalTemplate(templateName);
  return createFileFromTemplate(name,namespace,template,dir);
}",0.7578125
130446,"@Nullable @Override public IDocumentation resolveDocumentation(@NotNull List<VirtualFile> virtualFile,@NotNull PsiElement element){
  if (!(element instanceof DotNetQualifiedElement)) {
    return null;
  }
  PsiElement prevSibling=UsefulPsiTreeUtil.getPrevSiblingSkipWhiteSpaces(element,true);
  if (prevSibling instanceof CSharpDocRoot) {
    return new CSharpDocAsIDocumentation((CSharpDocRoot)prevSibling);
  }
  return null;
}","@Nullable @Override public IDocumentation resolveDocumentation(@NotNull List<VirtualFile> virtualFile,@NotNull PsiElement element){
  if (!(element instanceof DotNetQualifiedElement)) {
    return null;
  }
  CSharpDocRoot docRoot=PsiTreeUtil.getChildOfType(element,CSharpDocRoot.class);
  if (docRoot != null) {
    return new CSharpDocAsIDocumentation(docRoot);
  }
  return null;
}",0.645398773006135
130447,"@Override @Nullable public DotNetModifierList getModifierList(){
  return findChildByClass(DotNetModifierList.class);
}","@RequiredReadAction @Override @Nullable public DotNetModifierList getModifierList(){
  return findChildByClass(DotNetModifierList.class);
}",0.9224806201550388
130448,"@Override public PsiElement setName(@NonNls @NotNull String s) throws IncorrectOperationException {
  CSharpRefactoringUtil.replaceNameIdentifier(this,s);
  return this;
}","@Override @RequiredReadAction public PsiElement setName(@NonNls @NotNull String s) throws IncorrectOperationException {
  CSharpRefactoringUtil.replaceNameIdentifier(this,s);
  return this;
}",0.9447513812154696
130449,"@Override public String getName(){
  return CSharpPsiUtilImpl.getNameWithoutAt(this);
}","@Override @RequiredReadAction public String getName(){
  return CSharpPsiUtilImpl.getNameWithoutAt(this);
}",0.8969072164948454
130450,"@Nullable @Override public PsiElement getNameIdentifier(){
  return findChildByType(CSharpTokens.IDENTIFIER);
}","@Nullable @Override public PsiElement getNameIdentifier(){
  return findNotNullChildByClass(CSharpIdentifier.class);
}",0.8122270742358079
130451,"@Nullable @Override public DotNetExpression getInitializer(){
  return findChildByClass(DotNetExpression.class);
}","@RequiredReadAction @Nullable @Override public DotNetExpression getInitializer(){
  return findChildByClass(DotNetExpression.class);
}",0.9193548387096774
130452,"@Override public boolean isConstant(){
  return false;
}","@RequiredReadAction @Override public boolean isConstant(){
  return false;
}",0.8484848484848485
130453,"@NotNull @Override public DotNetType getType(){
  return findChildByClass(DotNetType.class);
}","@RequiredReadAction @NotNull @Override public DotNetType getType(){
  return findChildByClass(DotNetType.class);
}",0.903846153846154
130454,"@Override public boolean hasModifier(@NotNull DotNetModifier modifier){
  DotNetModifierList modifierList=getModifierList();
  return modifierList != null && modifierList.hasModifier(modifier);
}","@RequiredReadAction @Override public boolean hasModifier(@NotNull DotNetModifier modifier){
  DotNetModifierList modifierList=getModifierList();
  return modifierList != null && modifierList.hasModifier(modifier);
}",0.951219512195122
130455,"@Override public int getTextOffset(){
  PsiElement nameIdentifier=getNameIdentifier();
  return nameIdentifier == null ? super.getTextOffset() : nameIdentifier.getTextOffset();
}","@RequiredReadAction @Override public int getTextOffset(){
  PsiElement nameIdentifier=getNameIdentifier();
  return nameIdentifier == null ? super.getTextOffset() : nameIdentifier.getTextOffset();
}",0.946808510638298
130456,"@NotNull @Override public DotNetTypeRef toTypeRef(boolean resolveFromInitializer){
  DotNetType type=getType();
  DotNetTypeRef typeRef=type.toTypeRef();
  if (hasModifier(CSharpModifier.REF)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.ref,typeRef);
  }
 else   if (hasModifier(CSharpModifier.OUT)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.out,typeRef);
  }
  return typeRef;
}","@RequiredReadAction @NotNull @Override public DotNetTypeRef toTypeRef(boolean resolveFromInitializer){
  DotNetType type=getType();
  DotNetTypeRef typeRef=type.toTypeRef();
  if (hasModifier(CSharpModifier.REF)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.ref,typeRef);
  }
 else   if (hasModifier(CSharpModifier.OUT)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.out,typeRef);
  }
  return typeRef;
}",0.9759036144578314
130457,"@Nullable @Override public PsiElement getConstantKeywordElement(){
  return null;
}","@RequiredReadAction @Nullable @Override public PsiElement getConstantKeywordElement(){
  return null;
}",0.8924731182795699
130458,"private static void parseLambdaParameter(CSharpBuilderWrapper builder){
  val mark=builder.mark();
  if (MODIFIERS.contains(builder.getTokenType())) {
    parseModifierList(builder,NONE);
    if (parseType(builder) == null) {
      builder.error(""String_Node_Str"");
    }
 else {
      expect(builder,CSharpTokens.IDENTIFIER,""String_Node_Str"");
    }
  }
 else {
    IElementType iElementType=builder.lookAhead(1);
    if (builder.getTokenType() == CSharpTokens.IDENTIFIER && (iElementType == COMMA || iElementType == RPAR || iElementType == DARROW)) {
      builder.advanceLexer();
    }
 else {
      if (parseType(builder) == null) {
        builder.error(""String_Node_Str"");
      }
 else {
        expect(builder,CSharpTokens.IDENTIFIER,""String_Node_Str"");
      }
    }
  }
  mark.done(LAMBDA_PARAMETER);
}","private static void parseLambdaParameter(CSharpBuilderWrapper builder){
  val mark=builder.mark();
  if (MODIFIERS.contains(builder.getTokenType())) {
    parseModifierList(builder,NONE);
    if (parseType(builder) == null) {
      builder.error(""String_Node_Str"");
    }
 else {
      expectOrReportIdentifier(builder,0);
    }
  }
 else {
    IElementType iElementType=builder.lookAhead(1);
    if (builder.getTokenType() == CSharpTokens.IDENTIFIER && (iElementType == COMMA || iElementType == RPAR || iElementType == DARROW)) {
      expectOrReportIdentifier(builder,0);
    }
 else {
      if (parseType(builder) == null) {
        builder.error(""String_Node_Str"");
      }
 else {
        expectOrReportIdentifier(builder,0);
      }
    }
  }
  mark.done(LAMBDA_PARAMETER);
}",0.8913998744507219
130459,"@RequiredReadAction @Override @Nullable public PsiElement getNameIdentifier(){
  return findChildByType(CSharpTokens.IDENTIFIER);
}","@RequiredReadAction @Override @Nullable public PsiElement getNameIdentifier(){
  return getStubOrPsiChild(CSharpStubElements.IDENTIFIER);
}",0.8814814814814815
130460,"private static boolean parseEnumConstant(CSharpBuilderWrapper builder){
  if (builder.getTokenType() == RBRACE) {
    return true;
  }
  PsiBuilder.Marker mark=builder.mark();
  boolean nameExpected=false;
  if (builder.getTokenType() == LBRACKET) {
    PsiBuilder.Marker modMark=builder.mark();
    parseAttributeList(builder,STUB_SUPPORT);
    modMark.done(CSharpStubElements.MODIFIER_LIST);
    nameExpected=true;
  }
  if (builder.getTokenType() == CSharpTokens.IDENTIFIER) {
    if (!nameExpected) {
      emptyElement(builder,CSharpStubElements.MODIFIER_LIST);
    }
    doneIdentifier(builder,0);
    if (builder.getTokenType() == EQ) {
      builder.advanceLexer();
      if (ExpressionParsing.parse(builder) == null) {
        builder.error(""String_Node_Str"");
      }
    }
  }
 else {
    if (builder.getTokenType() == COMMA || builder.getTokenType() == RBRACE) {
      if (nameExpected) {
        PsiBuilder.Marker identifierMarker=builder.mark();
        builder.error(""String_Node_Str"");
        identifierMarker.done(CSharpStubElements.IDENTIFIER);
      }
      done(mark,ENUM_CONSTANT_DECLARATION);
      return false;
    }
  }
  done(mark,ENUM_CONSTANT_DECLARATION);
  return true;
}","private static boolean parseEnumConstant(CSharpBuilderWrapper builder){
  if (builder.getTokenType() == RBRACE) {
    return true;
  }
  PsiBuilder.Marker mark=builder.mark();
  boolean nameExpected=false;
  if (builder.getTokenType() == LBRACKET) {
    PsiBuilder.Marker modMark=builder.mark();
    parseAttributeList(builder,STUB_SUPPORT);
    modMark.done(CSharpStubElements.MODIFIER_LIST);
    nameExpected=true;
  }
  if (builder.getTokenType() == CSharpTokens.IDENTIFIER) {
    if (!nameExpected) {
      emptyElement(builder,CSharpStubElements.MODIFIER_LIST);
    }
    doneIdentifier(builder,STUB_SUPPORT);
    if (builder.getTokenType() == EQ) {
      builder.advanceLexer();
      if (ExpressionParsing.parse(builder) == null) {
        builder.error(""String_Node_Str"");
      }
    }
  }
 else {
    if (builder.getTokenType() == COMMA || builder.getTokenType() == RBRACE) {
      if (nameExpected) {
        PsiBuilder.Marker identifierMarker=builder.mark();
        builder.error(""String_Node_Str"");
        identifierMarker.done(CSharpStubElements.IDENTIFIER);
      }
      done(mark,ENUM_CONSTANT_DECLARATION);
      return false;
    }
  }
  done(mark,ENUM_CONSTANT_DECLARATION);
  return true;
}",0.9946169772256728
130461,"@Override public void processReturn(@NotNull StringBuilder builder,@NotNull PsiElement item){
  generateReturn(builder,item);
}","@RequiredReadAction @Override public void processReturn(@NotNull StringBuilder builder,@NotNull PsiElement item){
  generateReturn(builder,item);
}",0.927007299270073
130462,"@Override public void processItem(@NotNull StringBuilder builder,@NotNull PsiElement item){
  if (OverrideUtil.isRequireOverrideModifier((DotNetModifierListOwner)item)) {
    builder.append(""String_Node_Str"");
  }
}","@RequiredReadAction @Override public void processItem(@NotNull StringBuilder builder,@NotNull PsiElement item){
  CSharpModifier requiredOverrideModifier=OverrideUtil.getRequiredOverrideModifier((DotNetModifierListOwner)item);
  if (requiredOverrideModifier != null) {
    builder.append(requiredOverrideModifier.getPresentableText()).append(""String_Node_Str"");
  }
}",0.718213058419244
130463,"public abstract void processReturn(@NotNull StringBuilder builder,@NotNull PsiElement item);","@RequiredReadAction public abstract void processReturn(@NotNull StringBuilder builder,@NotNull PsiElement item);",0.9019607843137256
130464,"public abstract void processItem(@NotNull StringBuilder builder,@NotNull PsiElement item);","@RequiredReadAction public abstract void processItem(@NotNull StringBuilder builder,@NotNull PsiElement item);",0.9
130465,"@Override public void processReturn(@NotNull StringBuilder builder,@NotNull PsiElement item){
  generateReturn(builder,item);
}","@RequiredReadAction @Override public void processReturn(@NotNull StringBuilder builder,@NotNull PsiElement item){
  generateReturn(builder,item);
}",0.927007299270073
130466,"@Override public void processItem(@NotNull StringBuilder builder,@NotNull PsiElement item){
}","@RequiredReadAction @Override public void processItem(@NotNull StringBuilder builder,@NotNull PsiElement item){
  CSharpModifier requiredOverrideModifier=OverrideUtil.getRequiredOverrideModifier((DotNetModifierListOwner)item);
  if (requiredOverrideModifier != null) {
    builder.append(requiredOverrideModifier.getPresentableText()).append(""String_Node_Str"");
  }
}",0.4043478260869565
130467,"@Override public String getText(){
  StringBuilder builder=new StringBuilder();
  CSharpAccessModifier modifier=CSharpAccessModifier.findModifier(myDeclaration);
  boolean canGenerateCodeBlock=canGenerateCodeBlock();
  if (modifier != CSharpAccessModifier.NONE && canGenerateCodeBlock) {
    builder.append(modifier.getPresentableText()).append(""String_Node_Str"");
  }
  builder.append(getPresentationText());
  if (canGenerateCodeBlock) {
    builder.append(""String_Node_Str"");
    processReturn(builder);
    builder.append(""String_Node_Str"");
  }
 else {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}","@Override public String getText(){
  StringBuilder builder=new StringBuilder();
  CSharpAccessModifier modifier=CSharpAccessModifier.findModifier(myDeclaration);
  boolean canGenerateCodeBlock=canGenerateCodeBlock();
  if (modifier != CSharpAccessModifier.NONE && canGenerateCodeBlock) {
    builder.append(modifier.getPresentableText()).append(""String_Node_Str"");
  }
  process(builder);
  builder.append(getPresentationText());
  if (canGenerateCodeBlock) {
    builder.append(""String_Node_Str"");
    processReturn(builder);
    builder.append(""String_Node_Str"");
  }
 else {
    builder.append(""String_Node_Str"");
  }
  return builder.toString();
}",0.984399375975039
130468,"@Nullable private static LookupElementBuilder buildLookupItem(CSharpTypeDeclaration typeDeclaration,PsiElement element,boolean hide){
  Icon rightIcon=null;
  LookupElementBuilder lookupElementBuilder=null;
  if (element instanceof CSharpMethodDeclaration) {
    CSharpMethodDeclaration methodDeclaration=(CSharpMethodDeclaration)element;
    StringBuilder builder=new StringBuilder();
    CSharpAccessModifier modifier=hide || typeDeclaration.isInterface() ? CSharpAccessModifier.NONE : CSharpAccessModifier.findModifier(methodDeclaration);
    if (modifier != CSharpAccessModifier.NONE) {
      builder.append(modifier.getPresentableText()).append(""String_Node_Str"");
    }
    if (OverrideUtil.isRequireOverrideModifier(methodDeclaration)) {
      builder.append(""String_Node_Str"");
    }
    formatMethod(methodDeclaration,builder,hide);
    String presentationText=builder.toString();
    if (typeDeclaration.isInterface()) {
      builder.append(""String_Node_Str"");
      if (methodDeclaration.hasModifier(DotNetModifier.ABSTRACT)) {
        rightIcon=AllIcons.Gutter.OverridingMethod;
      }
 else {
        return null;
      }
    }
 else {
      builder.append(""String_Node_Str"");
      if (methodDeclaration.hasModifier(DotNetModifier.ABSTRACT)) {
        rightIcon=AllIcons.Gutter.ImplementingMethod;
        GenerateImplementMemberHandler.generateReturn(builder,element);
      }
 else {
        rightIcon=AllIcons.Gutter.OverridingMethod;
        GenerateOverrideMemberHandler.generateReturn(builder,element);
      }
      if (hide) {
        rightIcon=CSharpIcons.Gutter.HidingMethod;
      }
      builder.append(""String_Node_Str"");
    }
    lookupElementBuilder=LookupElementBuilder.create(builder.toString());
    lookupElementBuilder=lookupElementBuilder.withPresentableText(presentationText);
    lookupElementBuilder=lookupElementBuilder.withLookupString(methodDeclaration.getName());
    lookupElementBuilder=lookupElementBuilder.withTailText(""String_Node_Str"",true);
  }
  if (lookupElementBuilder == null) {
    return null;
  }
  IconDescriptor iconDescriptor=new IconDescriptor(IconDescriptorUpdaters.getIcon(element,0));
  iconDescriptor.setRightIcon(rightIcon);
  lookupElementBuilder=lookupElementBuilder.withIcon(iconDescriptor.toIcon());
  PsiElement parent=element.getParent();
  if (parent instanceof DotNetTypeDeclaration) {
    lookupElementBuilder=lookupElementBuilder.withTypeText(DotNetElementPresentationUtil.formatTypeWithGenericParameters((DotNetTypeDeclaration)parent));
  }
  lookupElementBuilder=lookupElementBuilder.withInsertHandler(new InsertHandler<LookupElement>(){
    @Override public void handleInsert(    InsertionContext context,    LookupElement item){
      CaretModel caretModel=context.getEditor().getCaretModel();
      PsiElement elementAt=context.getFile().findElementAt(caretModel.getOffset() - 1);
      if (elementAt == null) {
        return;
      }
      DotNetVirtualImplementOwner virtualImplementOwner=PsiTreeUtil.getParentOfType(elementAt,DotNetVirtualImplementOwner.class);
      if (virtualImplementOwner == null) {
        return;
      }
      if (virtualImplementOwner instanceof CSharpMethodDeclaration) {
        PsiElement codeBlock=((CSharpMethodDeclaration)virtualImplementOwner).getCodeBlock();
        if (codeBlock instanceof CSharpBlockStatementImpl) {
          DotNetStatement[] statements=((CSharpBlockStatementImpl)codeBlock).getStatements();
          if (statements.length > 0) {
            caretModel.moveToOffset(statements[0].getTextOffset() + statements[0].getTextLength());
          }
 else {
            caretModel.moveToOffset(((CSharpBlockStatementImpl)codeBlock).getLeftBrace().getTextOffset() + 1);
          }
        }
      }
      context.commitDocument();
      CodeStyleManager.getInstance(context.getProject()).reformat(virtualImplementOwner);
    }
  }
);
  return lookupElementBuilder;
}","@Nullable @RequiredReadAction private static LookupElementBuilder buildLookupItem(CSharpTypeDeclaration typeDeclaration,PsiElement element,boolean hide){
  Icon rightIcon=null;
  LookupElementBuilder lookupElementBuilder=null;
  if (element instanceof CSharpMethodDeclaration) {
    CSharpMethodDeclaration methodDeclaration=(CSharpMethodDeclaration)element;
    StringBuilder builder=new StringBuilder();
    CSharpAccessModifier modifier=hide || typeDeclaration.isInterface() ? CSharpAccessModifier.NONE : CSharpAccessModifier.findModifier(methodDeclaration);
    if (modifier != CSharpAccessModifier.NONE) {
      builder.append(modifier.getPresentableText()).append(""String_Node_Str"");
    }
    CSharpModifier requiredOverrideModifier=OverrideUtil.getRequiredOverrideModifier(methodDeclaration);
    if (requiredOverrideModifier != null) {
      builder.append(requiredOverrideModifier.getPresentableText()).append(""String_Node_Str"");
    }
    formatMethod(methodDeclaration,builder,hide);
    String presentationText=builder.toString();
    if (typeDeclaration.isInterface()) {
      builder.append(""String_Node_Str"");
      if (methodDeclaration.hasModifier(DotNetModifier.ABSTRACT)) {
        rightIcon=AllIcons.Gutter.OverridingMethod;
      }
 else {
        return null;
      }
    }
 else {
      builder.append(""String_Node_Str"");
      if (methodDeclaration.hasModifier(DotNetModifier.ABSTRACT)) {
        rightIcon=AllIcons.Gutter.ImplementingMethod;
        GenerateImplementMemberHandler.generateReturn(builder,element);
      }
 else {
        rightIcon=AllIcons.Gutter.OverridingMethod;
        GenerateOverrideMemberHandler.generateReturn(builder,element);
      }
      if (hide) {
        rightIcon=CSharpIcons.Gutter.HidingMethod;
      }
      builder.append(""String_Node_Str"");
    }
    lookupElementBuilder=LookupElementBuilder.create(builder.toString());
    lookupElementBuilder=lookupElementBuilder.withPresentableText(presentationText);
    lookupElementBuilder=lookupElementBuilder.withLookupString(methodDeclaration.getName());
    lookupElementBuilder=lookupElementBuilder.withTailText(""String_Node_Str"",true);
  }
  if (lookupElementBuilder == null) {
    return null;
  }
  IconDescriptor iconDescriptor=new IconDescriptor(IconDescriptorUpdaters.getIcon(element,0));
  iconDescriptor.setRightIcon(rightIcon);
  lookupElementBuilder=lookupElementBuilder.withIcon(iconDescriptor.toIcon());
  PsiElement parent=element.getParent();
  if (parent instanceof DotNetTypeDeclaration) {
    lookupElementBuilder=lookupElementBuilder.withTypeText(DotNetElementPresentationUtil.formatTypeWithGenericParameters((DotNetTypeDeclaration)parent));
  }
  lookupElementBuilder=lookupElementBuilder.withInsertHandler(new InsertHandler<LookupElement>(){
    @Override public void handleInsert(    InsertionContext context,    LookupElement item){
      CaretModel caretModel=context.getEditor().getCaretModel();
      PsiElement elementAt=context.getFile().findElementAt(caretModel.getOffset() - 1);
      if (elementAt == null) {
        return;
      }
      DotNetVirtualImplementOwner virtualImplementOwner=PsiTreeUtil.getParentOfType(elementAt,DotNetVirtualImplementOwner.class);
      if (virtualImplementOwner == null) {
        return;
      }
      if (virtualImplementOwner instanceof CSharpMethodDeclaration) {
        PsiElement codeBlock=((CSharpMethodDeclaration)virtualImplementOwner).getCodeBlock();
        if (codeBlock instanceof CSharpBlockStatementImpl) {
          DotNetStatement[] statements=((CSharpBlockStatementImpl)codeBlock).getStatements();
          if (statements.length > 0) {
            caretModel.moveToOffset(statements[0].getTextOffset() + statements[0].getTextLength());
          }
 else {
            caretModel.moveToOffset(((CSharpBlockStatementImpl)codeBlock).getLeftBrace().getTextOffset() + 1);
          }
        }
      }
      context.commitDocument();
      CodeStyleManager.getInstance(context.getProject()).reformat(virtualImplementOwner);
    }
  }
);
  return lookupElementBuilder;
}",0.976124654435788
130469,"@Override public PsiElement handleElementRename(String s) throws IncorrectOperationException {
  PsiElement element=getReferenceElement();
  PsiElement newIdentifier=CSharpFileFactory.createIdentifier(getProject(),s);
  element.replace(newIdentifier);
  return this;
}","@Override public PsiElement handleElementRename(String s) throws IncorrectOperationException {
  PsiElement element=getReferenceElement();
  PsiElement newIdentifier=CSharpFileFactory.createReferenceToken(getProject(),s);
  element.replace(newIdentifier);
  return this;
}",0.9555555555555556
130470,"@Override @Nullable public DotNetModifierList getModifierList(){
  return getStubOrPsiChild(CSharpStubElements.MODIFIER_LIST);
}","@RequiredReadAction @Override @Nullable public DotNetModifierList getModifierList(){
  return getStubOrPsiChild(CSharpStubElements.MODIFIER_LIST);
}",0.927536231884058
130471,"@Override public String getName(){
  CSharpVariableDeclStub<?> stub=getStub();
  if (stub != null) {
    return stub.getName();
  }
  return CSharpPsiUtilImpl.getNameWithoutAt(this);
}","@Override @RequiredReadAction public String getName(){
  CSharpVariableDeclStub<?> stub=getStub();
  if (stub != null) {
    return stub.getName();
  }
  return CSharpPsiUtilImpl.getNameWithoutAt(this);
}",0.9484536082474226
130472,"@Nullable @Override public PsiElement getNameIdentifier(){
  return findChildByType(CSharpTokens.IDENTIFIER);
}","@Nullable @Override @RequiredReadAction public PsiElement getNameIdentifier(){
  return getStubOrPsiChild(CSharpStubElements.IDENTIFIER);
}",0.792
130473,"@Nullable @Override public DotNetExpression getInitializer(){
  return findChildByClass(DotNetExpression.class);
}","@RequiredReadAction @Nullable @Override public DotNetExpression getInitializer(){
  return findChildByClass(DotNetExpression.class);
}",0.9193548387096774
130474,"@Override public boolean isConstant(){
  return false;
}","@RequiredReadAction @Override public boolean isConstant(){
  return false;
}",0.8484848484848485
130475,"@NotNull @Override public DotNetType getType(){
  return getRequiredStubOrPsiChildByIndex(CSharpStubElements.TYPE_SET,0);
}","@RequiredReadAction @NotNull @Override public DotNetType getType(){
  return getRequiredStubOrPsiChildByIndex(CSharpStubElements.TYPE_SET,0);
}",0.924812030075188
130476,"@Override public boolean hasModifier(@NotNull DotNetModifier modifier){
  DotNetModifierList modifierList=getModifierList();
  return modifierList != null && modifierList.hasModifier(modifier);
}","@RequiredReadAction @Override public boolean hasModifier(@NotNull DotNetModifier modifier){
  DotNetModifierList modifierList=getModifierList();
  return modifierList != null && modifierList.hasModifier(modifier);
}",0.951219512195122
130477,"@Override public int getTextOffset(){
  PsiElement nameIdentifier=getNameIdentifier();
  return nameIdentifier == null ? super.getTextOffset() : nameIdentifier.getTextOffset();
}","@RequiredReadAction @Override public int getTextOffset(){
  PsiElement nameIdentifier=getNameIdentifier();
  return nameIdentifier == null ? super.getTextOffset() : nameIdentifier.getTextOffset();
}",0.946808510638298
130478,"@NotNull @Override public DotNetTypeRef toTypeRef(boolean resolveFromInitializer){
  DotNetType type=getType();
  DotNetTypeRef typeRef=type.toTypeRef();
  if (hasModifier(CSharpModifier.REF)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.ref,typeRef);
  }
 else   if (hasModifier(CSharpModifier.OUT)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.out,typeRef);
  }
  return typeRef;
}","@RequiredReadAction @NotNull @Override public DotNetTypeRef toTypeRef(boolean resolveFromInitializer){
  DotNetType type=getType();
  DotNetTypeRef typeRef=type.toTypeRef();
  if (hasModifier(CSharpModifier.REF)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.ref,typeRef);
  }
 else   if (hasModifier(CSharpModifier.OUT)) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.out,typeRef);
  }
  return typeRef;
}",0.9759036144578314
130479,"@Nullable @Override public PsiElement getConstantKeywordElement(){
  return null;
}","@RequiredReadAction @Nullable @Override public PsiElement getConstantKeywordElement(){
  return null;
}",0.8924731182795699
130480,"public CSharpXXXAccessorStub(StubElement parent,String name,int otherModifiers){
  super(parent,CSharpStubElements.XXX_ACCESSOR,name,null,otherModifiers);
}","public CSharpXXXAccessorStub(StubElement parent,int otherModifiers){
  super(parent,CSharpStubElements.XXX_ACCESSOR,(StringRef)null,null,otherModifiers);
}",0.9131832797427653
130481,"@Override public int getStubVersion(){
  return 66;
}","@Override public int getStubVersion(){
  return 67;
}",0.981132075471698
130482,"@Override public void serialize(@NotNull CSharpXXXAccessorStub stub,@NotNull StubOutputStream stubOutputStream) throws IOException {
  stubOutputStream.writeName(stub.getName());
  stubOutputStream.writeInt(stub.getOtherModifierMask());
}","@Override public void serialize(@NotNull CSharpXXXAccessorStub stub,@NotNull StubOutputStream stubOutputStream) throws IOException {
  stubOutputStream.writeInt(stub.getOtherModifierMask());
}",0.8930232558139535
130483,"@Override public CSharpXXXAccessorStub createStub(@NotNull DotNetXXXAccessor accessor,StubElement stubElement){
  String name=accessor.getName();
  int otherModifiers=CSharpXXXAccessorStub.getOtherModifiers(accessor);
  return new CSharpXXXAccessorStub(stubElement,name,otherModifiers);
}","@RequiredReadAction @Override public CSharpXXXAccessorStub createStub(@NotNull DotNetXXXAccessor accessor,StubElement stubElement){
  int otherModifiers=CSharpXXXAccessorStub.getOtherModifiers(accessor);
  return new CSharpXXXAccessorStub(stubElement,otherModifiers);
}",0.6355475763016158
130484,"@NotNull @Override public CSharpXXXAccessorStub deserialize(@NotNull StubInputStream inputStream,StubElement stubElement) throws IOException {
  StringRef name=inputStream.readName();
  int otherModifiers=inputStream.readInt();
  return new CSharpXXXAccessorStub(stubElement,name,otherModifiers);
}","@NotNull @Override public CSharpXXXAccessorStub deserialize(@NotNull StubInputStream inputStream,StubElement stubElement) throws IOException {
  int otherModifiers=inputStream.readInt();
  return new CSharpXXXAccessorStub(stubElement,otherModifiers);
}",0.6872727272727273
130485,"private static void parseCatchStatement(@NotNull CSharpBuilderWrapper builder,@Nullable PsiBuilder.Marker marker){
  PsiBuilder.Marker mark;
  if (marker != null) {
    builder.error(""String_Node_Str"");
    mark=marker;
  }
 else {
    mark=builder.mark();
  }
  builder.advanceLexer();
  if (builder.getTokenType() == LPAR) {
    builder.advanceLexer();
    PsiBuilder.Marker varMarker=builder.mark();
    if (parseType(builder) == null) {
      builder.error(""String_Node_Str"");
      varMarker.drop();
    }
 else {
      expect(builder,CSharpTokens.IDENTIFIER,null);
      varMarker.done(LOCAL_VARIABLE);
    }
    expect(builder,RPAR,""String_Node_Str"");
  }
  builder.enableSoftKeyword(CSharpSoftTokens.WHEN_KEYWORD);
  IElementType tokenType=builder.getTokenType();
  builder.disableSoftKeyword(CSharpSoftTokens.WHEN_KEYWORD);
  if (tokenType == CSharpSoftTokens.WHEN_KEYWORD) {
    builder.advanceLexer();
    parseExpressionInParenth(builder);
  }
  if (builder.getTokenType() == LBRACE) {
    parseStatement(builder);
  }
 else {
    builder.error(""String_Node_Str"");
  }
  mark.done(CATCH_STATEMENT);
}","private static void parseCatchStatement(@NotNull CSharpBuilderWrapper builder,@Nullable PsiBuilder.Marker marker){
  PsiBuilder.Marker mark;
  if (marker != null) {
    builder.error(""String_Node_Str"");
    mark=marker;
  }
 else {
    mark=builder.mark();
  }
  builder.advanceLexer();
  if (builder.getTokenType() == LPAR) {
    builder.advanceLexer();
    PsiBuilder.Marker varMarker=builder.mark();
    if (parseType(builder) == null) {
      builder.error(""String_Node_Str"");
      varMarker.drop();
    }
 else {
      if (builder.getTokenType() == CSharpTokens.IDENTIFIER) {
        doneIdentifier(builder,0);
      }
      varMarker.done(LOCAL_VARIABLE);
    }
    expect(builder,RPAR,""String_Node_Str"");
  }
  builder.enableSoftKeyword(CSharpSoftTokens.WHEN_KEYWORD);
  IElementType tokenType=builder.getTokenType();
  builder.disableSoftKeyword(CSharpSoftTokens.WHEN_KEYWORD);
  if (tokenType == CSharpSoftTokens.WHEN_KEYWORD) {
    builder.advanceLexer();
    parseExpressionInParenth(builder);
  }
  if (builder.getTokenType() == LBRACE) {
    parseStatement(builder);
  }
 else {
    builder.error(""String_Node_Str"");
  }
  mark.done(CATCH_STATEMENT);
}",0.9578577699736612
130486,"@Nullable @Override public PsiElement getNameIdentifier(){
  return findNotNullChildByClass(CSharpIdentifier.class);
}","@Nullable @Override public PsiElement getNameIdentifier(){
  return findChildByClass(CSharpIdentifier.class);
}",0.9694323144104804
130487,"public static boolean mayRenameInplace(PsiElement elementToRename,final PsiElement nameSuggestionContext){
  if (nameSuggestionContext != null && nameSuggestionContext.getContainingFile() != elementToRename.getContainingFile()) {
    return false;
  }
  if (elementToRename instanceof DotNetNamespaceAsElement) {
    return true;
  }
  if (!(elementToRename instanceof CSharpLocalVariable) && !(elementToRename instanceof DotNetParameter) && !(elementToRename instanceof CSharpLambdaParameter)) {
    return false;
  }
  SearchScope useScope=PsiSearchHelper.SERVICE.getInstance(elementToRename.getProject()).getUseScope(elementToRename);
  if (!(useScope instanceof LocalSearchScope)) {
    return false;
  }
  PsiElement[] scopeElements=((LocalSearchScope)useScope).getScope();
  if (scopeElements.length > 1) {
    return false;
  }
  PsiFile containingFile=elementToRename.getContainingFile();
  return PsiTreeUtil.isAncestor(containingFile,scopeElements[0],false);
}","@RequiredReadAction public static boolean mayRenameInplace(PsiElement elementToRename,final PsiElement nameSuggestionContext){
  if (nameSuggestionContext != null && nameSuggestionContext.getContainingFile() != elementToRename.getContainingFile()) {
    return false;
  }
  if (elementToRename instanceof DotNetNamespaceAsElement) {
    return true;
  }
  if (!(elementToRename instanceof CSharpLocalVariable) && !(elementToRename instanceof DotNetParameter) && !(elementToRename instanceof CSharpLambdaParameter)) {
    return false;
  }
  SearchScope useScope=PsiSearchHelper.SERVICE.getInstance(elementToRename.getProject()).getUseScope(elementToRename);
  if (!(useScope instanceof LocalSearchScope)) {
    return false;
  }
  PsiElement[] scopeElements=((LocalSearchScope)useScope).getScope();
  if (scopeElements.length > 1) {
    return false;
  }
  PsiFile containingFile=elementToRename.getContainingFile();
  return PsiTreeUtil.isAncestor(containingFile,scopeElements[0],false);
}",0.9897959183673468
130488,"@Override public boolean isMemberInplaceRenameAvailable(PsiElement element,PsiElement context){
  if (element instanceof DotNetParameter && element instanceof StubBasedPsiElement) {
    return true;
  }
  return element instanceof DotNetQualifiedElement && !(element instanceof DotNetNamespaceAsElement);
}","@Override @RequiredReadAction public boolean isMemberInplaceRenameAvailable(PsiElement element,PsiElement context){
  if (element instanceof DotNetParameter && element instanceof StubBasedPsiElement) {
    return true;
  }
  if (element instanceof CSharpTypeDeclaration && ((CSharpTypeDeclaration)element).hasModifier(CSharpModifier.PARTIAL)) {
    return false;
  }
  return element instanceof DotNetQualifiedElement && !(element instanceof DotNetNamespaceAsElement);
}",0.7216494845360825
130489,"@Override public boolean isInplaceRenameAvailable(PsiElement element,PsiElement context){
  return mayRenameInplace(element,context);
}","@Override @RequiredReadAction public boolean isInplaceRenameAvailable(PsiElement element,PsiElement context){
  return mayRenameInplace(element,context);
}",0.9310344827586208
130490,"@Override public void prepareRenaming(PsiElement element,String newName,Map<PsiElement,String> allRenames,SearchScope scope){
  CSharpResolveContext context=CSharpResolveContextUtil.createContext(DotNetGenericExtractor.EMPTY,element.getResolveScope(),element);
  CSharpElementGroup<CSharpConstructorDeclaration> constructors=context.constructorGroup();
  if (constructors != null) {
    for (    CSharpConstructorDeclaration declaration : constructors.getElements()) {
      allRenames.put(declaration,newName);
    }
  }
  constructors=context.deConstructorGroup();
  if (constructors != null) {
    for (    CSharpConstructorDeclaration declaration : constructors.getElements()) {
      allRenames.put(declaration,newName);
    }
  }
  if (element instanceof CSharpTypeDeclaration) {
    PsiFile containingFile=element.getContainingFile();
    if (containingFile instanceof CSharpFile) {
      DotNetNamedElement singleElement=CSharpPsiUtilImpl.findSingleElement((CSharpFile)containingFile);
      if (element.isEquivalentTo(singleElement)) {
        allRenames.put(containingFile,newName + ""String_Node_Str"" + containingFile.getFileType().getDefaultExtension());
      }
    }
  }
  if (context instanceof CSharpCompositeResolveContext) {
    for (    CSharpResolveContext resolveContext : ((CSharpCompositeResolveContext)context).getContexts()) {
      if (resolveContext instanceof CSharpTypeResolveContext) {
        allRenames.put(((CSharpTypeResolveContext)resolveContext).getElement(),newName);
      }
    }
  }
}","@Override public void prepareRenaming(PsiElement element,String newName,Map<PsiElement,String> allRenames,SearchScope scope){
  CSharpResolveContext context=CSharpResolveContextUtil.createContext(DotNetGenericExtractor.EMPTY,element.getResolveScope(),element);
  CSharpElementGroup<CSharpConstructorDeclaration> constructors=context.constructorGroup();
  if (constructors != null) {
    for (    CSharpConstructorDeclaration declaration : constructors.getElements()) {
      allRenames.put(declaration,newName);
    }
  }
  constructors=context.deConstructorGroup();
  if (constructors != null) {
    for (    CSharpConstructorDeclaration declaration : constructors.getElements()) {
      allRenames.put(declaration,newName);
    }
  }
  CSharpTypeDeclaration[] typesIfPartial=getTypesIfPartial(context);
  for (  CSharpTypeDeclaration typeDeclaration : typesIfPartial) {
    allRenames.put(typeDeclaration,newName);
    PsiFile containingFile=typeDeclaration.getContainingFile();
    if (containingFile instanceof CSharpFile) {
      DotNetNamedElement singleElement=CSharpPsiUtilImpl.findSingleElement((CSharpFile)containingFile);
      if (typeDeclaration.isEquivalentTo(singleElement)) {
        allRenames.put(containingFile,newName + ""String_Node_Str"" + containingFile.getFileType().getDefaultExtension());
      }
    }
  }
}",0.8042031523642732
130491,"public void visitNamespaceDeclaration(CSharpNamespaceDeclarationImpl declaration){
  visitElement(declaration);
}","public void visitNamespaceDeclaration(CSharpNamespaceDeclaration declaration){
  visitElement(declaration);
}",0.981981981981982
130492,"@NotNull public static PsiElement wrap(PsiElement element,@Nullable PsiElement parent){
  if (element instanceof MsilClassEntry) {
    PsiElement cache=ourCache.get(element);
    if (cache != null) {
      return cache;
    }
    cache=wrapToDelegateMethod((DotNetTypeDeclaration)element,parent);
    if (cache == null) {
      cache=new MsilClassAsCSharpTypeDefinition(parent,(MsilClassEntry)element);
    }
    ourCache.put((MsilClassEntry)element,cache);
    return cache;
  }
  return element;
}","@NotNull public static PsiElement wrap(PsiElement element,@Nullable PsiElement parent){
  if (element instanceof MsilClassEntry) {
    PsiElement cache=ourCache.get(element);
    if (cache != null) {
      return cache;
    }
    if (parent == null) {
      String parentQName=((MsilClassEntry)element).getPresentableParentQName();
      if (!StringUtil.isEmpty(parentQName)) {
        parent=new CSharpLightNamespaceDeclarationBuilder(element.getProject(),parentQName);
      }
    }
    cache=wrapToDelegateMethod((DotNetTypeDeclaration)element,parent);
    if (cache == null) {
      cache=new MsilClassAsCSharpTypeDefinition(parent,(MsilClassEntry)element);
    }
    ourCache.put((MsilClassEntry)element,cache);
    return cache;
  }
  return element;
}",0.7939538583929993
130493,"public T addGenericParameter(DotNetGenericParameter genericParameter){
  if (myGenericParameters.isEmpty()) {
    myGenericParameters=new ArrayList<DotNetGenericParameter>(2);
  }
  myGenericParameters.add(genericParameter);
  return (T)this;
}","public T addGenericParameter(DotNetGenericParameter genericParameter){
  if (myGenericParameters.isEmpty()) {
    myGenericParameters=new ArrayList<DotNetGenericParameter>(2);
  }
  if (genericParameter instanceof CSharpLightGenericParameterBuilder) {
    ((CSharpLightGenericParameterBuilder)genericParameter).setIndex(myGenericParameters.size());
  }
  myGenericParameters.add(genericParameter);
  return (T)this;
}",0.6202723146747352
130494,"@NotNull public CSharpLightTypeDeclarationBuilder addGenericParameter(DotNetGenericParameter parameter){
  myGenericParameters.add(parameter);
  return this;
}","@NotNull public CSharpLightTypeDeclarationBuilder addGenericParameter(DotNetGenericParameter genericParameter){
  if (genericParameter instanceof CSharpLightGenericParameterBuilder) {
    ((CSharpLightGenericParameterBuilder)genericParameter).setIndex(myGenericParameters.size());
  }
  myGenericParameters.add(genericParameter);
  return this;
}",0.5306930693069307
130495,"private static boolean isEqual(@NotNull PsiElement element,@NotNull PsiElement element2,boolean checkVirtualImpl,@NotNull PsiElement scope){
  if (element == element2) {
    return true;
  }
  if (element instanceof CSharpPropertyDeclaration && element2 instanceof CSharpPropertyDeclaration) {
    if (checkVirtualImpl && !compareVirtualImpl(element,element2,scope)) {
      return false;
    }
    return Comparing.equal(((CSharpPropertyDeclaration)element).getName(),((CSharpPropertyDeclaration)element2).getName());
  }
  if (element instanceof CSharpEventDeclaration && element2 instanceof CSharpEventDeclaration) {
    if (checkVirtualImpl && !compareVirtualImpl(element,element2,scope)) {
      return false;
    }
    return Comparing.equal(((CSharpEventDeclaration)element).getName(),((CSharpEventDeclaration)element2).getName());
  }
  if (element instanceof CSharpFieldDeclaration && element2 instanceof CSharpFieldDeclaration) {
    return Comparing.equal(((CSharpFieldDeclaration)element).getName(),((CSharpFieldDeclaration)element2).getName());
  }
  if (element instanceof CSharpTypeDeclaration && element2 instanceof CSharpTypeDeclaration) {
    if (((CSharpTypeDeclaration)element).getGenericParametersCount() != ((CSharpTypeDeclaration)element2).getGenericParametersCount()) {
      return false;
    }
    return Comparing.equal(((CSharpTypeDeclaration)element).getName(),((CSharpTypeDeclaration)element2).getName());
  }
  if (element instanceof CSharpConstructorDeclaration && element2 instanceof CSharpConstructorDeclaration) {
    if (((CSharpConstructorDeclaration)element).hasModifier(DotNetModifier.STATIC) != ((CSharpConstructorDeclaration)element2).hasModifier(DotNetModifier.STATIC)) {
      return false;
    }
    if (((CSharpConstructorDeclaration)element).isDeConstructor() != ((CSharpConstructorDeclaration)element2).isDeConstructor()) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  if (element instanceof CSharpArrayMethodDeclaration && element2 instanceof CSharpArrayMethodDeclaration) {
    if (checkVirtualImpl && !compareVirtualImpl(element,element2,scope)) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  if (element instanceof CSharpConversionMethodDeclaration && element2 instanceof CSharpConversionMethodDeclaration) {
    if (!CSharpTypeUtil.isTypeEqual(((CSharpConversionMethodDeclaration)element).getConversionTypeRef(),((CSharpConversionMethodDeclaration)element2).getConversionTypeRef(),scope)) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  if (element instanceof CSharpMethodDeclaration && element2 instanceof CSharpMethodDeclaration) {
    if (((CSharpMethodDeclaration)element).getGenericParametersCount() != ((CSharpMethodDeclaration)element2).getGenericParametersCount()) {
      return false;
    }
    if (checkVirtualImpl && !compareVirtualImpl(element,element2,scope)) {
      return false;
    }
    if (!Comparing.equal(((CSharpMethodDeclaration)element).getName(),((CSharpMethodDeclaration)element2).getName())) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  return false;
}","public static boolean isEqual(@NotNull PsiElement element,@NotNull PsiElement element2,int flags,@NotNull PsiElement scope){
  if (element == element2) {
    return true;
  }
  if (element instanceof CSharpPropertyDeclaration && element2 instanceof CSharpPropertyDeclaration) {
    if (!Comparing.equal(((CSharpPropertyDeclaration)element).getName(),((CSharpPropertyDeclaration)element2).getName())) {
      return false;
    }
    if (!compareVirtualImpl(element,element2,flags,scope)) {
      return false;
    }
    if (BitUtil.isSet(flags,CHECK_RETURN_TYPE) && !CSharpTypeUtil.isTypeEqual(((CSharpPropertyDeclaration)element).toTypeRef(false),((CSharpPropertyDeclaration)element2).toTypeRef(false),scope)) {
      return false;
    }
    return true;
  }
  if (element instanceof CSharpEventDeclaration && element2 instanceof CSharpEventDeclaration) {
    if (!Comparing.equal(((CSharpEventDeclaration)element).getName(),((CSharpEventDeclaration)element2).getName())) {
      return false;
    }
    if (!compareVirtualImpl(element,element2,flags,scope)) {
      return false;
    }
    if (BitUtil.isSet(flags,CHECK_RETURN_TYPE) && !CSharpTypeUtil.isTypeEqual(((CSharpEventDeclaration)element).toTypeRef(false),((CSharpEventDeclaration)element2).toTypeRef(false),scope)) {
      return false;
    }
    return true;
  }
  if (element instanceof CSharpFieldDeclaration && element2 instanceof CSharpFieldDeclaration) {
    return Comparing.equal(((CSharpFieldDeclaration)element).getName(),((CSharpFieldDeclaration)element2).getName());
  }
  if (element instanceof CSharpTypeDeclaration && element2 instanceof CSharpTypeDeclaration) {
    if (((CSharpTypeDeclaration)element).getGenericParametersCount() != ((CSharpTypeDeclaration)element2).getGenericParametersCount()) {
      return false;
    }
    return Comparing.equal(((CSharpTypeDeclaration)element).getName(),((CSharpTypeDeclaration)element2).getName());
  }
  if (element instanceof CSharpConstructorDeclaration && element2 instanceof CSharpConstructorDeclaration) {
    if (((CSharpConstructorDeclaration)element).hasModifier(DotNetModifier.STATIC) != ((CSharpConstructorDeclaration)element2).hasModifier(DotNetModifier.STATIC)) {
      return false;
    }
    if (((CSharpConstructorDeclaration)element).isDeConstructor() != ((CSharpConstructorDeclaration)element2).isDeConstructor()) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  if (element instanceof CSharpArrayMethodDeclaration && element2 instanceof CSharpArrayMethodDeclaration) {
    if (!compareVirtualImpl(element,element2,flags,scope)) {
      return false;
    }
    if (!compareReturnTypeRef(element,element2,flags,scope)) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  if (element instanceof CSharpConversionMethodDeclaration && element2 instanceof CSharpConversionMethodDeclaration) {
    if (!CSharpTypeUtil.isTypeEqual(((CSharpConversionMethodDeclaration)element).getConversionTypeRef(),((CSharpConversionMethodDeclaration)element2).getConversionTypeRef(),scope)) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  if (element instanceof CSharpMethodDeclaration && element2 instanceof CSharpMethodDeclaration) {
    if (((CSharpMethodDeclaration)element).getGenericParametersCount() != ((CSharpMethodDeclaration)element2).getGenericParametersCount()) {
      return false;
    }
    if (!compareReturnTypeRef(element,element2,flags,scope)) {
      return false;
    }
    if (!compareVirtualImpl(element,element2,flags,scope)) {
      return false;
    }
    if (!Comparing.equal(((CSharpMethodDeclaration)element).getName(),((CSharpMethodDeclaration)element2).getName())) {
      return false;
    }
    return compareParameterList(element,element2,scope);
  }
  return false;
}",0.6207092198581561
130496,"public static boolean isEqualWithVirtualImpl(@NotNull PsiElement element,@NotNull PsiElement element2,@NotNull PsiElement scope){
  return isEqual(element,element2,true,scope);
}","public static boolean isEqualWithVirtualImpl(@NotNull PsiElement element,@NotNull PsiElement element2,@NotNull PsiElement scope){
  return isEqual(element,element2,CHECK_VIRTUAL_IMPL_TYPE,scope);
}",0.928
130497,"private static boolean compareVirtualImpl(@NotNull PsiElement o1,@NotNull PsiElement o2,@NotNull PsiElement scope){
  DotNetType type1=((DotNetVirtualImplementOwner)o1).getTypeForImplement();
  DotNetType type2=((DotNetVirtualImplementOwner)o2).getTypeForImplement();
  if (type1 == null && type2 == null) {
    return true;
  }
  if (type1 == null || type2 == null) {
    return false;
  }
  return CSharpTypeUtil.isTypeEqual(type1.toTypeRef(),type2.toTypeRef(),scope);
}","private static boolean compareVirtualImpl(@NotNull PsiElement o1,@NotNull PsiElement o2,int flags,@NotNull PsiElement scope){
  if (!BitUtil.isSet(flags,CHECK_VIRTUAL_IMPL_TYPE)) {
    return true;
  }
  DotNetType type1=((DotNetVirtualImplementOwner)o1).getTypeForImplement();
  DotNetType type2=((DotNetVirtualImplementOwner)o2).getTypeForImplement();
  if (type1 == null && type2 == null) {
    return true;
  }
  if (type1 == null || type2 == null) {
    return false;
  }
  return CSharpTypeUtil.isTypeEqual(type1.toTypeRef(),type2.toTypeRef(),scope);
}",0.916504854368932
130498,"@NotNull public static PsiElement[] fiterOverridedAndHiddedElements(@NotNull PsiElement scopeElement,@NotNull Collection<PsiElement> elements){
  List<PsiElement> copyElements=new ArrayList<PsiElement>(elements);
  for (  PsiElement element : elements) {
    if (!copyElements.contains(element)) {
      continue;
    }
    if (element instanceof DotNetVirtualImplementOwner) {
      if (element instanceof CSharpMethodDeclaration && ((CSharpMethodDeclaration)element).isDelegate()) {
        continue;
      }
      DotNetType typeForImplement=((DotNetVirtualImplementOwner)element).getTypeForImplement();
      for (      PsiElement tempIterateElement : elements) {
        if (tempIterateElement == element) {
          continue;
        }
        if (CSharpElementCompareUtil.isEqual(tempIterateElement,element,scopeElement)) {
          copyElements.remove(tempIterateElement);
        }
      }
      if (typeForImplement != null) {
        copyElements.remove(element);
      }
    }
  }
  List<PsiElement> groupElements=new SmartList<PsiElement>();
  List<PsiElement> elseElements=new SmartList<PsiElement>();
  for (  PsiElement copyElement : copyElements) {
    if (copyElement instanceof DotNetLikeMethodDeclaration) {
      groupElements.add(copyElement);
    }
 else {
      elseElements.add(copyElement);
    }
  }
  if (elseElements.isEmpty() && groupElements.isEmpty()) {
    return PsiElement.EMPTY_ARRAY;
  }
 else   if (elseElements.isEmpty()) {
    return new PsiElement[]{new CSharpElementGroupImpl<PsiElement>(scopeElement.getProject(),""String_Node_Str"",groupElements)};
  }
 else   if (groupElements.isEmpty()) {
    return ContainerUtil.toArray(elseElements,PsiElement.ARRAY_FACTORY);
  }
 else {
    elseElements.add(new CSharpElementGroupImpl<PsiElement>(scopeElement.getProject(),""String_Node_Str"",groupElements));
    return ContainerUtil.toArray(elseElements,PsiElement.ARRAY_FACTORY);
  }
}","@NotNull public static PsiElement[] fiterOverridedAndHiddedElements(@NotNull PsiElement scopeElement,@NotNull Collection<PsiElement> elements){
  List<PsiElement> copyElements=new ArrayList<PsiElement>(elements);
  for (  PsiElement element : elements) {
    if (!copyElements.contains(element)) {
      continue;
    }
    if (element instanceof DotNetVirtualImplementOwner) {
      if (element instanceof CSharpMethodDeclaration && ((CSharpMethodDeclaration)element).isDelegate()) {
        continue;
      }
      DotNetType typeForImplement=((DotNetVirtualImplementOwner)element).getTypeForImplement();
      for (      PsiElement tempIterateElement : elements) {
        if (tempIterateElement == element) {
          continue;
        }
        if (CSharpElementCompareUtil.isEqual(tempIterateElement,element,CSharpElementCompareUtil.CHECK_RETURN_TYPE,scopeElement)) {
          copyElements.remove(tempIterateElement);
        }
      }
      if (typeForImplement != null) {
        copyElements.remove(element);
      }
    }
  }
  List<PsiElement> groupElements=new SmartList<PsiElement>();
  List<PsiElement> elseElements=new SmartList<PsiElement>();
  for (  PsiElement copyElement : copyElements) {
    if (copyElement instanceof DotNetLikeMethodDeclaration) {
      groupElements.add(copyElement);
    }
 else {
      elseElements.add(copyElement);
    }
  }
  if (elseElements.isEmpty() && groupElements.isEmpty()) {
    return PsiElement.EMPTY_ARRAY;
  }
 else   if (elseElements.isEmpty()) {
    return new PsiElement[]{new CSharpElementGroupImpl<PsiElement>(scopeElement.getProject(),""String_Node_Str"",groupElements)};
  }
 else   if (groupElements.isEmpty()) {
    return ContainerUtil.toArray(elseElements,PsiElement.ARRAY_FACTORY);
  }
 else {
    elseElements.add(new CSharpElementGroupImpl<PsiElement>(scopeElement.getProject(),""String_Node_Str"",groupElements));
    return ContainerUtil.toArray(elseElements,PsiElement.ARRAY_FACTORY);
  }
}",0.9889260880762296
130499,"@Override public boolean canMarkAsUnused(DotNetParameter parameter){
  DotNetLikeMethodDeclaration method=parameter.getMethod();
  if (method instanceof CSharpMethodDeclaration && ((CSharpMethodDeclaration)method).isDelegate()) {
    return false;
  }
  if (method.hasModifier(CSharpModifier.ABSTRACT) || method.hasModifier(CSharpModifier.OVERRIDE)) {
    return false;
  }
  return super.canMarkAsUnused(parameter);
}","@Override public boolean canMarkAsUnused(DotNetParameter parameter){
  if (parameter.getParent().getParent() instanceof CSharpAnonymMethodExpressionImpl) {
    return false;
  }
  DotNetLikeMethodDeclaration method=parameter.getMethod();
  if (method instanceof CSharpMethodDeclaration && ((CSharpMethodDeclaration)method).isDelegate()) {
    return false;
  }
  if (method.hasModifier(CSharpModifier.ABSTRACT) || method.hasModifier(CSharpModifier.OVERRIDE)) {
    return false;
  }
  return super.canMarkAsUnused(parameter);
}",0.8846560846560847
130500,"private static boolean canParseAsVariable(CSharpBuilderWrapper builder){
  PsiBuilder.Marker newMarker=builder.mark();
  try {
    TypeInfo typeInfo=parseType(builder,BracketFailPolicy.NOTHING,true);
    if (typeInfo == null) {
      return false;
    }
    IElementType tokenType=builder.getTokenType();
    if (tokenType == LPAR) {
      return false;
    }
    if (typeInfo.isParameterized) {
      return true;
    }
    if (tokenType == IDENTIFIER) {
      IElementType lookAhead=builder.lookAhead(1);
      if (lookAhead == SEMICOLON || lookAhead == EQ || lookAhead == COMMA) {
        return true;
      }
    }
    return false;
  }
  finally {
    newMarker.rollbackTo();
  }
}","private static boolean canParseAsVariable(CSharpBuilderWrapper builder){
  PsiBuilder.Marker newMarker=builder.mark();
  try {
    TypeInfo typeInfo=parseType(builder,BracketFailPolicy.RETURN_BEFORE,true);
    if (typeInfo == null) {
      return false;
    }
    IElementType tokenType=builder.getTokenType();
    if (tokenType == LPAR) {
      return false;
    }
    if (typeInfo.isParameterized) {
      return true;
    }
    if (tokenType == IDENTIFIER) {
      IElementType lookAhead=builder.lookAhead(1);
      if (lookAhead == SEMICOLON || lookAhead == EQ || lookAhead == COMMA) {
        return true;
      }
    }
    return false;
  }
  finally {
    newMarker.rollbackTo();
  }
}",0.988388969521045
130501,"@Override public void invoke(@NotNull Project project,@NotNull Editor editor,@NotNull PsiFile file){
  final CSharpTypeDeclaration typeDeclaration=GenerateConstructorAction.findTypeDeclaration(editor,file);
  if (typeDeclaration == null) {
    return;
  }
  val pair=CSharpTypeDeclarationImplUtil.resolveBaseType(typeDeclaration,typeDeclaration);
  if (pair == null) {
    return;
  }
  final DotNetTypeDeclaration baseType=pair.getFirst();
  if (!(baseType instanceof CSharpTypeDeclaration)) {
    return;
  }
  MemberResolveScopeProcessor memberResolveScopeProcessor=new MemberResolveScopeProcessor(typeDeclaration.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP});
  ResolveState resolveState=ResolveState.initial();
  resolveState=resolveState.put(CSharpResolveUtil.SELECTOR,StaticResolveSelectors.CONSTRUCTOR_GROUP);
  resolveState=resolveState.put(CSharpResolveUtil.EXTRACTOR,pair.getSecond());
  CSharpResolveUtil.walkChildren(memberResolveScopeProcessor,baseType,false,resolveState);
  PsiElement[] psiElements=memberResolveScopeProcessor.toPsiElements();
  List<ConstructorChooseMember> members=new ArrayList<ConstructorChooseMember>();
  for (  PsiElement psiElement : psiElements) {
    if (psiElement instanceof CSharpElementGroup) {
      for (      PsiElement element : ((CSharpElementGroup<?>)psiElement).getElements()) {
        members.add(new ConstructorChooseMember((DotNetConstructorDeclaration)element));
      }
    }
  }
  final ConstructorChooseMember[] map=ContainerUtil.toArray(members,ConstructorChooseMember.ARRAY_FACTORY);
  if (map.length == 1) {
    generateConstructor(typeDeclaration,editor,file,map[0]);
  }
 else {
    final MemberChooserBuilder<ConstructorChooseMember> builder=new MemberChooserBuilder<ConstructorChooseMember>(project);
    builder.setTitle(""String_Node_Str"");
    builder.allowMultiSelection(true);
    final MemberChooser<ConstructorChooseMember> memberChooser=builder.createBuilder(map);
    if (!memberChooser.showAndGet()) {
      return;
    }
    final List<ConstructorChooseMember> selectedElements=memberChooser.getSelectedElements();
    if (selectedElements == null) {
      return;
    }
    for (    ConstructorChooseMember selectedElement : selectedElements) {
      generateConstructor(typeDeclaration,editor,file,selectedElement);
    }
  }
}","@Override public void invoke(@NotNull Project project,@NotNull Editor editor,@NotNull PsiFile file){
  final CSharpTypeDeclaration typeDeclaration=GenerateConstructorAction.findTypeDeclaration(editor,file);
  if (typeDeclaration == null) {
    return;
  }
  val pair=CSharpTypeDeclarationImplUtil.resolveBaseType(typeDeclaration,typeDeclaration);
  if (pair == null) {
    return;
  }
  final DotNetTypeDeclaration baseType=pair.getFirst();
  if (!(baseType instanceof CSharpTypeDeclaration)) {
    return;
  }
  MemberResolveScopeProcessor memberResolveScopeProcessor=new MemberResolveScopeProcessor(typeDeclaration.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP});
  ResolveState resolveState=ResolveState.initial();
  resolveState=resolveState.put(CSharpResolveUtil.SELECTOR,StaticResolveSelectors.CONSTRUCTOR_GROUP);
  resolveState=resolveState.put(CSharpResolveUtil.EXTRACTOR,pair.getSecond());
  CSharpResolveUtil.walkChildren(memberResolveScopeProcessor,baseType,false,false,resolveState);
  PsiElement[] psiElements=memberResolveScopeProcessor.toPsiElements();
  List<ConstructorChooseMember> members=new ArrayList<ConstructorChooseMember>();
  for (  PsiElement psiElement : psiElements) {
    if (psiElement instanceof CSharpElementGroup) {
      for (      PsiElement element : ((CSharpElementGroup<?>)psiElement).getElements()) {
        members.add(new ConstructorChooseMember((DotNetConstructorDeclaration)element));
      }
    }
  }
  final ConstructorChooseMember[] map=ContainerUtil.toArray(members,ConstructorChooseMember.ARRAY_FACTORY);
  if (map.length == 1) {
    generateConstructor(typeDeclaration,editor,file,map[0]);
  }
 else {
    final MemberChooserBuilder<ConstructorChooseMember> builder=new MemberChooserBuilder<ConstructorChooseMember>(project);
    builder.setTitle(""String_Node_Str"");
    builder.allowMultiSelection(true);
    final MemberChooser<ConstructorChooseMember> memberChooser=builder.createBuilder(map);
    if (!memberChooser.showAndGet()) {
      return;
    }
    final List<ConstructorChooseMember> selectedElements=memberChooser.getSelectedElements();
    if (selectedElements == null) {
      return;
    }
    for (    ConstructorChooseMember selectedElement : selectedElements) {
      generateConstructor(typeDeclaration,editor,file,selectedElement);
    }
  }
}",0.9987282746926665
130502,"private static List<CSharpMethodDeclaration> findParentMethods(final CSharpTypeDeclaration owner,final CSharpMethodDeclaration target){
  final List<CSharpMethodDeclaration> parents=new SmartList<CSharpMethodDeclaration>();
  MemberResolveScopeProcessor processor=new MemberResolveScopeProcessor(owner.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP});
  ResolveState state=ResolveState.initial();
  state=state.put(CSharpResolveUtil.SELECTOR,new MemberByNameSelector(target.getName()));
  CSharpResolveUtil.walkChildren(processor,owner,false,state);
  PsiElement[] psiElements=processor.toPsiElements();
  for (  PsiElement psiElement : psiElements) {
    CSharpElementGroup<?> elementGroup=(CSharpElementGroup<?>)psiElement;
    for (    PsiElement element : elementGroup.getElements()) {
      if (element instanceof CSharpMethodDeclaration) {
        if (element.getParent() == owner) {
          continue;
        }
        if (CS0102.checkMethod((CSharpMethodDeclaration)element,target,element)) {
          parents.add((CSharpMethodDeclaration)element);
        }
      }
    }
  }
  return parents;
}","private static List<CSharpMethodDeclaration> findParentMethods(final CSharpTypeDeclaration owner,final CSharpMethodDeclaration target){
  final List<CSharpMethodDeclaration> parents=new SmartList<CSharpMethodDeclaration>();
  MemberResolveScopeProcessor processor=new MemberResolveScopeProcessor(owner.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP});
  ResolveState state=ResolveState.initial();
  state=state.put(CSharpResolveUtil.SELECTOR,new MemberByNameSelector(target.getName()));
  CSharpResolveUtil.walkChildren(processor,owner,false,true,state);
  PsiElement[] psiElements=processor.toPsiElements();
  for (  PsiElement psiElement : psiElements) {
    CSharpElementGroup<?> elementGroup=(CSharpElementGroup<?>)psiElement;
    for (    PsiElement element : elementGroup.getElements()) {
      if (element instanceof CSharpMethodDeclaration) {
        if (element.getParent() == owner) {
          continue;
        }
        if (CS0102.checkMethod((CSharpMethodDeclaration)element,target,element)) {
          parents.add((CSharpMethodDeclaration)element);
        }
      }
    }
  }
  return parents;
}",0.9978345604157643
130503,"public static boolean walkChildren(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,boolean walkParent,@NotNull ResolveState state){
  ProgressIndicatorProvider.checkCanceled();
  GlobalSearchScope resolveScope=entrance.getResolveScope();
  if (entrance instanceof CSharpTypeDeclaration) {
    val typeDeclaration=(CSharpTypeDeclaration)entrance;
    val superTypes=new SmartList<DotNetTypeRef>();
    if (!processor.execute(typeDeclaration,state)) {
      return false;
    }
    DotNetGenericExtractor thisExtractor=state.get(EXTRACTOR);
    if (typeDeclaration.hasModifier(CSharpModifier.PARTIAL)) {
      DotNetTypeDeclaration[] types=DotNetPsiSearcher.getInstance(typeDeclaration.getProject()).findTypes(typeDeclaration.getVmQName(),typeDeclaration.getResolveScope());
      for (      DotNetTypeDeclaration type : types) {
        DotNetTypeList extendList=type.getExtendList();
        if (extendList != null) {
          DotNetTypeRef[] typeRefs=extendList.getTypeRefs();
          for (          DotNetTypeRef typeRef : typeRefs) {
            superTypes.add(GenericUnwrapTool.exchangeTypeRef(typeRef,thisExtractor,type));
          }
        }
      }
      if (superTypes.isEmpty()) {
        Set<String> set=new THashSet<String>();
        for (        DotNetTypeDeclaration type : types) {
          set.add(CSharpTypeDeclarationImplUtil.getDefaultSuperType(type));
        }
        if (set.contains(DotNetTypes.System.ValueType)) {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.ValueType,CSharpTransform.INSTANCE));
        }
 else {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.Object,CSharpTransform.INSTANCE));
        }
      }
    }
 else {
      for (      DotNetTypeRef typeRef : typeDeclaration.getExtendTypeRefs()) {
        superTypes.add(GenericUnwrapTool.exchangeTypeRef(typeRef,thisExtractor,typeDeclaration));
      }
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
      PsiElement resolve=typeResolveResult.getElement();
      if (resolve != null && !resolve.isEquivalentTo(entrance)) {
        DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
        CSharpResolveSelector selector=state.get(SELECTOR);
        ResolveState newState=ResolveState.initial().put(SELECTOR,selector).put(EXTRACTOR,genericExtractor);
        if (!walkChildren(processor,resolve,false,newState)) {
          return false;
        }
      }
    }
    if (walkParent) {
      PsiElement parent=entrance.getParent();
      if (parent == null) {
        return true;
      }
      if (!walkChildren(processor,parent,walkParent,state)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof CSharpTypeDefStatement) {
    DotNetTypeRef dotNetTypeRef=((CSharpTypeDefStatement)entrance).toTypeRef();
    DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
    PsiElement element=typeResolveResult.getElement();
    if (element == null) {
      return true;
    }
    CSharpResolveSelector selector=state.get(SELECTOR);
    ResolveState newState=ResolveState.initial().put(SELECTOR,selector).put(EXTRACTOR,typeResolveResult.getGenericExtractor());
    return walkChildren(processor,element,walkParent,newState);
  }
 else   if (entrance instanceof DotNetGenericParameter) {
    if (!processor.execute(entrance,state)) {
      return false;
    }
    val superTypes=CSharpGenericConstraintUtil.getExtendTypes((DotNetGenericParameter)entrance);
    CSharpResolveSelector selector=state.get(SELECTOR);
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
      PsiElement resolve=typeResolveResult.getElement();
      if (resolve != null && resolve != entrance) {
        DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
        ResolveState newState=ResolveState.initial().put(SELECTOR,selector).put(EXTRACTOR,genericExtractor);
        if (!walkChildren(processor,resolve,walkParent,newState)) {
          return false;
        }
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceAsElement) {
    state=state.put(BaseDotNetNamespaceAsElement.RESOLVE_SCOPE,resolveScope);
    state=state.put(BaseDotNetNamespaceAsElement.FILTER,DotNetNamespaceAsElement.ChildrenFilter.NONE);
    if (!processor.execute(entrance,state)) {
      return false;
    }
    String parentQName=((DotNetNamespaceAsElement)entrance).getPresentableParentQName();
    if (StringUtil.isEmpty(parentQName)) {
      return true;
    }
    if (walkParent) {
      DotNetNamespaceAsElement parentNamespace=DotNetPsiSearcher.getInstance(entrance.getProject()).findNamespace(parentQName,resolveScope);
      if (parentNamespace != null && !walkChildren(processor,parentNamespace,walkParent,state)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceDeclaration) {
    String presentableQName=((DotNetNamespaceDeclaration)entrance).getPresentableQName();
    if (presentableQName == null) {
      return true;
    }
    state=state.put(BaseDotNetNamespaceAsElement.RESOLVE_SCOPE,resolveScope);
    state=state.put(BaseDotNetNamespaceAsElement.FILTER,DotNetNamespaceAsElement.ChildrenFilter.NONE);
    DotNetNamespaceAsElement namespace=DotNetPsiSearcher.getInstance(entrance.getProject()).findNamespace(presentableQName,resolveScope);
    if (namespace != null && !walkChildren(processor,namespace,walkParent,state)) {
      return false;
    }
  }
  return true;
}","public static boolean walkChildren(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,boolean walkParent,boolean walkDeep,@NotNull ResolveState state){
  ProgressIndicatorProvider.checkCanceled();
  GlobalSearchScope resolveScope=entrance.getResolveScope();
  if (entrance instanceof CSharpTypeDeclaration) {
    val typeDeclaration=(CSharpTypeDeclaration)entrance;
    val superTypes=new SmartList<DotNetTypeRef>();
    if (!processor.execute(typeDeclaration,state)) {
      return false;
    }
    if (walkDeep) {
      DotNetGenericExtractor thisExtractor=state.get(EXTRACTOR);
      if (typeDeclaration.hasModifier(CSharpModifier.PARTIAL)) {
        DotNetTypeDeclaration[] types=DotNetPsiSearcher.getInstance(typeDeclaration.getProject()).findTypes(typeDeclaration.getVmQName(),typeDeclaration.getResolveScope());
        for (        DotNetTypeDeclaration type : types) {
          DotNetTypeList extendList=type.getExtendList();
          if (extendList != null) {
            DotNetTypeRef[] typeRefs=extendList.getTypeRefs();
            for (            DotNetTypeRef typeRef : typeRefs) {
              superTypes.add(GenericUnwrapTool.exchangeTypeRef(typeRef,thisExtractor,type));
            }
          }
        }
        if (superTypes.isEmpty()) {
          Set<String> set=new THashSet<String>();
          for (          DotNetTypeDeclaration type : types) {
            set.add(CSharpTypeDeclarationImplUtil.getDefaultSuperType(type));
          }
          if (set.contains(DotNetTypes.System.ValueType)) {
            superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.ValueType,CSharpTransform.INSTANCE));
          }
 else {
            superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.Object,CSharpTransform.INSTANCE));
          }
        }
      }
 else {
        for (        DotNetTypeRef typeRef : typeDeclaration.getExtendTypeRefs()) {
          superTypes.add(GenericUnwrapTool.exchangeTypeRef(typeRef,thisExtractor,typeDeclaration));
        }
      }
      for (      DotNetTypeRef dotNetTypeRef : superTypes) {
        DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
        PsiElement resolve=typeResolveResult.getElement();
        if (resolve != null && !resolve.isEquivalentTo(entrance)) {
          DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
          CSharpResolveSelector selector=state.get(SELECTOR);
          ResolveState newState=ResolveState.initial().put(SELECTOR,selector).put(EXTRACTOR,genericExtractor);
          if (!walkChildren(processor,resolve,false,true,newState)) {
            return false;
          }
        }
      }
    }
    if (walkParent) {
      PsiElement parent=entrance.getParent();
      if (parent == null) {
        return true;
      }
      if (!walkChildren(processor,parent,walkParent,true,state)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof CSharpTypeDefStatement) {
    DotNetTypeRef dotNetTypeRef=((CSharpTypeDefStatement)entrance).toTypeRef();
    DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
    PsiElement element=typeResolveResult.getElement();
    if (element == null) {
      return true;
    }
    CSharpResolveSelector selector=state.get(SELECTOR);
    ResolveState newState=ResolveState.initial().put(SELECTOR,selector).put(EXTRACTOR,typeResolveResult.getGenericExtractor());
    return walkChildren(processor,element,walkParent,true,newState);
  }
 else   if (entrance instanceof DotNetGenericParameter) {
    if (!processor.execute(entrance,state)) {
      return false;
    }
    val superTypes=CSharpGenericConstraintUtil.getExtendTypes((DotNetGenericParameter)entrance);
    CSharpResolveSelector selector=state.get(SELECTOR);
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
      PsiElement resolve=typeResolveResult.getElement();
      if (resolve != null && resolve != entrance) {
        DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
        ResolveState newState=ResolveState.initial().put(SELECTOR,selector).put(EXTRACTOR,genericExtractor);
        if (!walkChildren(processor,resolve,walkParent,true,newState)) {
          return false;
        }
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceAsElement) {
    state=state.put(BaseDotNetNamespaceAsElement.RESOLVE_SCOPE,resolveScope);
    state=state.put(BaseDotNetNamespaceAsElement.FILTER,DotNetNamespaceAsElement.ChildrenFilter.NONE);
    if (!processor.execute(entrance,state)) {
      return false;
    }
    String parentQName=((DotNetNamespaceAsElement)entrance).getPresentableParentQName();
    if (StringUtil.isEmpty(parentQName)) {
      return true;
    }
    if (walkParent) {
      DotNetNamespaceAsElement parentNamespace=DotNetPsiSearcher.getInstance(entrance.getProject()).findNamespace(parentQName,resolveScope);
      if (parentNamespace != null && !walkChildren(processor,parentNamespace,walkParent,true,state)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceDeclaration) {
    String presentableQName=((DotNetNamespaceDeclaration)entrance).getPresentableQName();
    if (presentableQName == null) {
      return true;
    }
    state=state.put(BaseDotNetNamespaceAsElement.RESOLVE_SCOPE,resolveScope);
    state=state.put(BaseDotNetNamespaceAsElement.FILTER,DotNetNamespaceAsElement.ChildrenFilter.NONE);
    DotNetNamespaceAsElement namespace=DotNetPsiSearcher.getInstance(entrance.getProject()).findNamespace(presentableQName,resolveScope);
    if (namespace != null && !walkChildren(processor,namespace,walkParent,true,state)) {
      return false;
    }
  }
  return true;
}",0.9813957550877804
130504,"@Nullable public static DotNetPropertyDeclaration findPropertyByName(@NotNull final String name,@NotNull PsiElement owner,@NotNull DotNetGenericExtractor extractor){
  MemberResolveScopeProcessor memberResolveScopeProcessor=new MemberResolveScopeProcessor(owner.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.PROPERTY});
  ResolveState state=ResolveState.initial();
  state=state.put(CSharpResolveUtil.EXTRACTOR,extractor);
  state=state.put(CSharpResolveUtil.SELECTOR,new MemberByNameSelector(name));
  CSharpResolveUtil.walkChildren(memberResolveScopeProcessor,owner,false,state);
  PsiElement[] psiElements=memberResolveScopeProcessor.toPsiElements();
  return (DotNetPropertyDeclaration)ArrayUtil.getFirstElement(psiElements);
}","@Nullable public static DotNetPropertyDeclaration findPropertyByName(@NotNull final String name,@NotNull PsiElement owner,@NotNull DotNetGenericExtractor extractor){
  MemberResolveScopeProcessor memberResolveScopeProcessor=new MemberResolveScopeProcessor(owner.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.PROPERTY});
  ResolveState state=ResolveState.initial();
  state=state.put(CSharpResolveUtil.EXTRACTOR,extractor);
  state=state.put(CSharpResolveUtil.SELECTOR,new MemberByNameSelector(name));
  CSharpResolveUtil.walkChildren(memberResolveScopeProcessor,owner,false,true,state);
  PsiElement[] psiElements=memberResolveScopeProcessor.toPsiElements();
  return (DotNetPropertyDeclaration)ArrayUtil.getFirstElement(psiElements);
}",0.9967341606792944
130505,"@Nullable public static DotNetMethodDeclaration findMethodByName(@NotNull final String name,@NotNull PsiElement owner,@NotNull DotNetGenericExtractor extractor){
  MemberResolveScopeProcessor memberResolveScopeProcessor=new MemberResolveScopeProcessor(owner.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP});
  ResolveState state=ResolveState.initial();
  state=state.put(CSharpResolveUtil.EXTRACTOR,extractor);
  state=state.put(CSharpResolveUtil.SELECTOR,new MemberByNameSelector(name));
  CSharpResolveUtil.walkChildren(memberResolveScopeProcessor,owner,false,state);
  PsiElement[] psiElements=memberResolveScopeProcessor.toPsiElements();
  for (  PsiElement psiElement : psiElements) {
    if (psiElement instanceof CSharpElementGroup) {
      for (      PsiElement element : ((CSharpElementGroup<?>)psiElement).getElements()) {
        if (element instanceof DotNetMethodDeclaration && ((DotNetMethodDeclaration)element).getParameters().length == 0) {
          return (DotNetMethodDeclaration)element;
        }
      }
    }
  }
  return null;
}","@Nullable public static DotNetMethodDeclaration findMethodByName(@NotNull final String name,@NotNull PsiElement owner,@NotNull DotNetGenericExtractor extractor){
  MemberResolveScopeProcessor memberResolveScopeProcessor=new MemberResolveScopeProcessor(owner.getResolveScope(),ResolveResult.EMPTY_ARRAY,new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP});
  ResolveState state=ResolveState.initial();
  state=state.put(CSharpResolveUtil.EXTRACTOR,extractor);
  state=state.put(CSharpResolveUtil.SELECTOR,new MemberByNameSelector(name));
  CSharpResolveUtil.walkChildren(memberResolveScopeProcessor,owner,false,true,state);
  PsiElement[] psiElements=memberResolveScopeProcessor.toPsiElements();
  for (  PsiElement psiElement : psiElements) {
    if (psiElement instanceof CSharpElementGroup) {
      for (      PsiElement element : ((CSharpElementGroup<?>)psiElement).getElements()) {
        if (element instanceof DotNetMethodDeclaration && ((DotNetMethodDeclaration)element).getParameters().length == 0) {
          return (DotNetMethodDeclaration)element;
        }
      }
    }
  }
  return null;
}",0.9977262391996362
130506,"private void highlightCall(@NotNull PsiElement callElement,@NotNull PsiElement referenceElement){
  ResolveResult[] resolveResults=ResolveResult.EMPTY_ARRAY;
  if (callElement instanceof PsiPolyVariantReference) {
    resolveResults=((PsiPolyVariantReference)callElement).multiResolve(false);
  }
  ResolveResult goodResult=resolveResults.length > 0 && resolveResults[0].isValidResult() ? resolveResults[0] : null;
  if (goodResult != null) {
    PsiElement element=goodResult.getElement();
    HighlightInfo highlightInfo=highlightNamed(element,referenceElement,callElement);
    if (highlightInfo != null && CSharpMethodImplUtil.isExtensionWrapper(element)) {
      QuickFixAction.registerQuickFixAction(highlightInfo,ConvertToNormalCallFix.INSTANCE);
    }
  }
 else {
    if (resolveResults.length == 0) {
      HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).descriptionAndTooltip(""String_Node_Str"" + referenceElement.getText() + ""String_Node_Str"").range(referenceElement).create();
      myHighlightInfoHolder.add(info);
      if (callElement instanceof PsiReference) {
        UnresolvedReferenceQuickFixProvider.registerReferenceFixes((PsiReference)callElement,new QuickFixActionRegistrarImpl(info));
      }
    }
 else {
      ResolveError forError=createResolveError(callElement,resolveResults[0].getElement());
      if (forError == null) {
        return;
      }
      myHighlightInfoHolder.add(forError.create());
    }
  }
}","private void highlightCall(@NotNull PsiElement callElement,@NotNull PsiElement referenceElement){
  ResolveResult[] resolveResults=ResolveResult.EMPTY_ARRAY;
  if (callElement instanceof PsiPolyVariantReference) {
    resolveResults=((PsiPolyVariantReference)callElement).multiResolve(false);
  }
  ResolveResult goodResult=CSharpResolveUtil.findFirstValidResult(resolveResults);
  if (goodResult != null) {
    PsiElement element=goodResult.getElement();
    HighlightInfo highlightInfo=highlightNamed(element,referenceElement,callElement);
    if (highlightInfo != null && CSharpMethodImplUtil.isExtensionWrapper(element)) {
      QuickFixAction.registerQuickFixAction(highlightInfo,ConvertToNormalCallFix.INSTANCE);
    }
  }
 else {
    if (resolveResults.length == 0) {
      HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.WRONG_REF).descriptionAndTooltip(""String_Node_Str"" + referenceElement.getText() + ""String_Node_Str"").range(referenceElement).create();
      myHighlightInfoHolder.add(info);
      if (callElement instanceof PsiReference) {
        UnresolvedReferenceQuickFixProvider.registerReferenceFixes((PsiReference)callElement,new QuickFixActionRegistrarImpl(info));
      }
    }
 else {
      ResolveError forError=createResolveError(callElement,resolveResults[0].getElement());
      if (forError == null) {
        return;
      }
      myHighlightInfoHolder.add(forError.create());
    }
  }
}",0.95906432748538
130507,"@Nullable @Override public PsiElement resolveToCallable(){
  ResolveResult[] resolveResults=multiResolve(false);
  if (resolveResults.length == 0) {
    return null;
  }
  ResolveResult resolveResult=resolveResults[0];
  if (!resolveResult.isValidResult()) {
    return null;
  }
  return resolveResult.getElement();
}","@Nullable @Override public PsiElement resolveToCallable(){
  ResolveResult[] resolveResults=multiResolve(false);
  if (resolveResults.length == 0) {
    return null;
  }
  return CSharpResolveUtil.findFirstValidElement(resolveResults);
}",0.6306306306306306
130508,"@NotNull public DotNetTypeRef toTypeRefWithoutCaching(ResolveToKind kind,boolean resolveFromParent){
  ResolveResult[] resolveResults=multiResolveImpl(kind,resolveFromParent);
  if (resolveResults.length == 0) {
    return DotNetTypeRef.ERROR_TYPE;
  }
  ResolveResult resolveResult=resolveResults[0];
  if (!resolveResult.isValidResult()) {
    return DotNetTypeRef.ERROR_TYPE;
  }
  return toTypeRef(resolveResult);
}","@NotNull public DotNetTypeRef toTypeRefWithoutCaching(ResolveToKind kind,boolean resolveFromParent){
  ResolveResult[] resolveResults=multiResolveImpl(kind,resolveFromParent);
  if (resolveResults.length == 0) {
    return DotNetTypeRef.ERROR_TYPE;
  }
  ResolveResult firstValidResult=CSharpResolveUtil.findFirstValidResult(resolveResults);
  if (firstValidResult == null) {
    return DotNetTypeRef.ERROR_TYPE;
  }
  return toTypeRef(firstValidResult);
}",0.8274285714285714
130509,"@Nullable @Override public PsiElement resolve(){
  ResolveResult[] resolveResults=multiResolve(false);
  if (resolveResults.length == 0) {
    return null;
  }
  ResolveResult resolveResult=resolveResults[0];
  if (!resolveResult.isValidResult()) {
    return null;
  }
  return resolveResult.getElement();
}","@Nullable @Override public PsiElement resolve(){
  return CSharpResolveUtil.findFirstValidElement(multiResolve(false));
}",0.3869463869463869
130510,"private static CSharpLightMethodDeclaration transform(CSharpMethodDeclaration methodDeclaration){
}","private static CSharpLightMethodDeclaration transform(final CSharpMethodDeclaration methodDeclaration){
}",0.9705882352941176
130511,"private LookupElement buildLookupElement(PsiElement element){
  LookupElementBuilder builder=null;
  if (element instanceof CSharpMethodDeclaration) {
    final CSharpMethodDeclaration methodDeclaration=(CSharpMethodDeclaration)element;
    final DotNetTypeRef[] parameterTypes=methodDeclaration.getParameterTypeRefs();
    String parameterText=""String_Node_Str"" + StringUtil.join(parameterTypes,new Function<DotNetTypeRef,String>(){
      @Override public String fun(      DotNetTypeRef parameter){
        return parameter.getPresentableText();
      }
    }
,""String_Node_Str"") + ""String_Node_Str"";
    builder=LookupElementBuilder.create(methodDeclaration);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(methodDeclaration.getReturnTypeRef().getPresentableText());
    builder=builder.withTailText(parameterText,false);
    if (CSharpMethodImplUtil.isExtensionWrapper(methodDeclaration)) {
      builder=builder.withItemTextUnderlined(true);
    }
    if (!methodDeclaration.isDelegate()) {
      builder=builder.withInsertHandler(new InsertHandler<LookupElement>(){
        @Override public void handleInsert(        InsertionContext insertionContext,        LookupElement lookupElement){
          int offset=insertionContext.getEditor().getCaretModel().getOffset();
          PsiElement elementAt=insertionContext.getFile().findElementAt(offset);
          if (elementAt == null || elementAt.getNode().getElementType() != CSharpTokens.LPAR) {
            insertionContext.getDocument().insertString(offset,""String_Node_Str"");
            int step=1;
            if (parameterTypes.length == 0) {
              step=3;
            }
            insertionContext.getEditor().getCaretModel().moveToOffset(offset + step);
            AutoPopupController.getInstance(insertionContext.getProject()).autoPopupParameterInfo(insertionContext.getEditor(),null);
          }
        }
      }
);
    }
  }
 else   if (element instanceof DotNetNamespaceAsElement) {
    DotNetNamespaceAsElement namespaceAsElement=(DotNetNamespaceAsElement)element;
    builder=LookupElementBuilder.create(namespaceAsElement.getName());
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof CSharpTypeDefStatement) {
    CSharpTypeDefStatement typeDefStatement=(CSharpTypeDefStatement)element;
    builder=LookupElementBuilder.create(typeDefStatement.getName());
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(typeDefStatement.toTypeRef().getPresentableText());
  }
 else   if (element instanceof DotNetVariable) {
    DotNetVariable dotNetVariable=(DotNetVariable)element;
    builder=LookupElementBuilder.create(dotNetVariable);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(dotNetVariable.toTypeRef(true).getPresentableText());
  }
 else   if (element instanceof CSharpMacroDefine) {
    builder=LookupElementBuilder.create((CSharpMacroDefine)element);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof CSharpTypeDeclaration) {
    CSharpTypeDeclaration typeDeclaration=(CSharpTypeDeclaration)element;
    builder=LookupElementBuilder.create(typeDeclaration);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(typeDeclaration.getPresentableParentQName());
    builder=builder.withTailText(DotNetElementPresentationUtil.formatGenericParameters(typeDeclaration),true);
  }
  if (builder != null) {
    if (DotNetAttributeUtil.hasAttribute(element,DotNetTypes.System.ObsoleteAttribute)) {
      builder=builder.withStrikeoutness(true);
      return PrioritizedLookupElement.withPriority(builder,-1.0);
    }
    return builder;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + element.getClass().getSimpleName() + ""String_Node_Str"");
  }
}","private LookupElement buildLookupElement(PsiElement element){
  LookupElementBuilder builder=null;
  if (element instanceof CSharpMethodDeclaration) {
    final CSharpMethodDeclaration methodDeclaration=(CSharpMethodDeclaration)element;
    final DotNetTypeRef[] parameterTypes=methodDeclaration.getParameterTypeRefs();
    String parameterText=""String_Node_Str"" + StringUtil.join(parameterTypes,new Function<DotNetTypeRef,String>(){
      @Override public String fun(      DotNetTypeRef parameter){
        return parameter.getPresentableText();
      }
    }
,""String_Node_Str"") + ""String_Node_Str"";
    builder=LookupElementBuilder.create(methodDeclaration);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(methodDeclaration.getReturnTypeRef().getPresentableText());
    builder=builder.withTailText(parameterText,false);
    if (CSharpMethodImplUtil.isExtensionWrapper(methodDeclaration)) {
      builder=builder.withItemTextUnderlined(true);
    }
    if (!methodDeclaration.isDelegate()) {
      builder=builder.withInsertHandler(new InsertHandler<LookupElement>(){
        @Override public void handleInsert(        InsertionContext insertionContext,        LookupElement lookupElement){
          int offset=insertionContext.getEditor().getCaretModel().getOffset();
          PsiElement elementAt=insertionContext.getFile().findElementAt(offset);
          if (elementAt == null || elementAt.getNode().getElementType() != CSharpTokens.LPAR) {
            insertionContext.getDocument().insertString(offset,""String_Node_Str"");
            int step=1;
            if (parameterTypes.length == 0) {
              step=3;
            }
            insertionContext.getEditor().getCaretModel().moveToOffset(offset + step);
            AutoPopupController.getInstance(insertionContext.getProject()).autoPopupParameterInfo(insertionContext.getEditor(),null);
          }
        }
      }
);
    }
  }
 else   if (element instanceof DotNetNamespaceAsElement) {
    DotNetNamespaceAsElement namespaceAsElement=(DotNetNamespaceAsElement)element;
    builder=LookupElementBuilder.create(namespaceAsElement.getName());
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof CSharpTypeDefStatement) {
    CSharpTypeDefStatement typeDefStatement=(CSharpTypeDefStatement)element;
    builder=LookupElementBuilder.create(typeDefStatement.getName());
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(typeDefStatement.toTypeRef().getPresentableText());
  }
 else   if (element instanceof DotNetGenericParameter) {
    DotNetGenericParameter typeDefStatement=(DotNetGenericParameter)element;
    builder=LookupElementBuilder.create(typeDefStatement.getName());
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof DotNetVariable) {
    DotNetVariable dotNetVariable=(DotNetVariable)element;
    builder=LookupElementBuilder.create(dotNetVariable);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(dotNetVariable.toTypeRef(true).getPresentableText());
  }
 else   if (element instanceof CSharpMacroDefine) {
    builder=LookupElementBuilder.create((CSharpMacroDefine)element);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
  }
 else   if (element instanceof CSharpTypeDeclaration) {
    CSharpTypeDeclaration typeDeclaration=(CSharpTypeDeclaration)element;
    builder=LookupElementBuilder.create(typeDeclaration);
    builder=builder.withIcon(IconDescriptorUpdaters.getIcon(element,Iconable.ICON_FLAG_VISIBILITY));
    builder=builder.withTypeText(typeDeclaration.getPresentableParentQName());
    builder=builder.withTailText(DotNetElementPresentationUtil.formatGenericParameters(typeDeclaration),true);
  }
  if (builder != null) {
    if (DotNetAttributeUtil.hasAttribute(element,DotNetTypes.System.ObsoleteAttribute)) {
      builder=builder.withStrikeoutness(true);
      return PrioritizedLookupElement.withPriority(builder,-1.0);
    }
    return builder;
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + element.getClass().getSimpleName() + ""String_Node_Str"");
  }
}",0.8925005804504296
130512,"private static AbstractScopeProcessor createMemberProcessor(@NotNull PsiElement element,ResolveToKind kind,ResolveResult[] elements,boolean completion){
  ExecuteTarget[] targets;
switch (kind) {
case TYPE_LIKE:
    targets=new ExecuteTarget[]{ExecuteTarget.GENERIC_PARAMETER,ExecuteTarget.TYPE,ExecuteTarget.DELEGATE_METHOD,ExecuteTarget.TYPE_DEF};
  break;
case NAMESPACE:
targets=new ExecuteTarget[]{ExecuteTarget.NAMESPACE};
break;
case FIELD_OR_PROPERTY:
targets=new ExecuteTarget[]{ExecuteTarget.FIELD,ExecuteTarget.PROPERTY};
break;
case ARRAY_METHOD:
targets=new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP};
break;
case METHOD:
targets=new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP,ExecuteTarget.FIELD,ExecuteTarget.PROPERTY,ExecuteTarget.EVENT,ExecuteTarget.LOCAL_VARIABLE_OR_PARAMETER};
break;
default :
targets=new ExecuteTarget[]{ExecuteTarget.MEMBER,ExecuteTarget.TYPE_DEF,ExecuteTarget.ELEMENT_GROUP};
break;
}
return completion ? new CompletionResolveScopeProcessor(element.getResolveScope(),elements,targets) : new MemberResolveScopeProcessor(element.getResolveScope(),elements,targets);
}","private static AbstractScopeProcessor createMemberProcessor(@NotNull PsiElement element,ResolveToKind kind,ResolveResult[] elements,boolean completion){
  ExecuteTarget[] targets;
switch (kind) {
case TYPE_LIKE:
    targets=new ExecuteTarget[]{ExecuteTarget.GENERIC_PARAMETER,ExecuteTarget.TYPE,ExecuteTarget.DELEGATE_METHOD,ExecuteTarget.TYPE_DEF};
  break;
case NAMESPACE:
targets=new ExecuteTarget[]{ExecuteTarget.NAMESPACE};
break;
case FIELD_OR_PROPERTY:
targets=new ExecuteTarget[]{ExecuteTarget.FIELD,ExecuteTarget.PROPERTY};
break;
case ARRAY_METHOD:
targets=new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP};
break;
case METHOD:
targets=new ExecuteTarget[]{ExecuteTarget.ELEMENT_GROUP,ExecuteTarget.FIELD,ExecuteTarget.PROPERTY,ExecuteTarget.EVENT,ExecuteTarget.LOCAL_VARIABLE_OR_PARAMETER};
break;
default :
targets=new ExecuteTarget[]{ExecuteTarget.MEMBER,ExecuteTarget.TYPE_DEF,ExecuteTarget.ELEMENT_GROUP};
if (completion) {
targets=ArrayUtil.append(targets,ExecuteTarget.GENERIC_PARAMETER);
}
break;
}
return completion ? new CompletionResolveScopeProcessor(element.getResolveScope(),elements,targets) : new MemberResolveScopeProcessor(element.getResolveScope(),elements,targets);
}",0.9622231871471992
130513,"@NotNull @Override public DotNetNamespaceAsElement[] getUsingNamespaces(){
  CSharpUsingNamespaceStatementImpl[] usingDirectives=getUsingDirectives();
  List<DotNetNamespaceAsElement> namespaceAsElements=new ArrayList<DotNetNamespaceAsElement>(usingDirectives.length + 1);
  for (  CSharpUsingNamespaceStatementImpl usingDirective : usingDirectives) {
    DotNetNamespaceAsElement resolve=usingDirective.resolve();
    if (resolve != null) {
      namespaceAsElements.add(resolve);
    }
  }
  PsiElement parent=getParent();
  if (parent instanceof CSharpFile) {
    namespaceAsElements.add(DotNetPsiSearcher.getInstance(getProject()).findNamespace(""String_Node_Str"",getResolveScope()));
  }
  return ContainerUtil.toArray(namespaceAsElements,DotNetNamespaceAsElement.ARRAY_FACTORY);
}","@NotNull @Override public DotNetNamespaceAsElement[] getUsingNamespaces(){
  CSharpUsingNamespaceStatementImpl[] usingDirectives=getUsingDirectives();
  List<DotNetNamespaceAsElement> namespaceAsElements=new ArrayList<DotNetNamespaceAsElement>(usingDirectives.length + 1);
  for (  CSharpUsingNamespaceStatementImpl usingDirective : usingDirectives) {
    DotNetNamespaceAsElement resolve=usingDirective.resolve();
    if (resolve != null) {
      namespaceAsElements.add(resolve);
    }
  }
  return ContainerUtil.toArray(namespaceAsElements,DotNetNamespaceAsElement.ARRAY_FACTORY);
}",0.8540145985401459
130514,"public static boolean walkUsing(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,@NotNull final PsiElement sender,@Nullable PsiElement maxScope,@NotNull final ResolveState state){
  if (!entrance.isValid()) {
    CSharpResolveUtil.LOGGER.error(new PsiInvalidElementAccessException(entrance));
  }
  PsiElement prevParent=entrance;
  PsiElement scope=entrance;
  if (maxScope == null) {
    maxScope=sender.getContainingFile();
  }
  while (scope != null) {
    ProgressIndicatorProvider.checkCanceled();
    if (scope instanceof CSharpUsingListOwner) {
      CSharpUsingList usingList=((CSharpUsingListOwner)scope).getUsingList();
      if (usingList != null) {
        if (!processor.execute(usingList,state)) {
          return false;
        }
      }
    }
    if (entrance != sender) {
      break;
    }
    if (scope == maxScope) {
      break;
    }
    prevParent=scope;
    scope=prevParent.getContext();
    if (scope != null && scope != prevParent.getParent() && !scope.isValid()) {
      break;
    }
  }
  return true;
}","public static boolean walkUsing(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,@NotNull final PsiElement sender,@Nullable PsiElement maxScope,@NotNull final ResolveState state){
}",0.3299293008641005
130515,"private static boolean walkChildrenImpl(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,boolean walkParent,@Nullable PsiElement maxScope,@NotNull ResolveState state,@NotNull Set<String> typeVisited){
  ProgressIndicatorProvider.checkCanceled();
  GlobalSearchScope resolveScope=entrance.getResolveScope();
  if (entrance instanceof CSharpTypeDeclaration) {
    DotNetGenericExtractor extractor=state.get(CSharpResolveUtil.EXTRACTOR);
    val typeDeclaration=(CSharpTypeDeclaration)entrance;
    val superTypes=new SmartList<DotNetTypeRef>();
    if (!processTypeDeclaration(processor,typeDeclaration,state,resolveScope,superTypes,extractor,typeVisited)) {
      return false;
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
      PsiElement resolve=typeResolveResult.getElement();
      if (resolve != null && !resolve.isEquivalentTo(entrance)) {
        DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
        ResolveState newState=ResolveState.initial().put(EXTRACTOR,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
    if (walkParent) {
      if (!walkChildrenImpl(processor,entrance.getParent(),walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetGenericParameter) {
    DotNetGenericParameterList parameterList=(DotNetGenericParameterList)entrance.getParent();
    PsiElement parent=parameterList.getParent();
    if (!(parent instanceof CSharpGenericConstraintOwner)) {
      return true;
    }
    val constraint=CSharpGenericConstraintOwnerUtil.forParameter((CSharpGenericConstraintOwner)parent,(DotNetGenericParameter)entrance);
    if (constraint == null) {
      return true;
    }
    val superTypes=new SmartList<DotNetTypeRef>();
    for (    CSharpGenericConstraintValue value : constraint.getGenericConstraintValues()) {
      if (value instanceof CSharpGenericConstraintTypeValue) {
        DotNetTypeRef typeRef=((CSharpGenericConstraintTypeValue)value).toTypeRef();
        superTypes.add(typeRef);
      }
 else       if (value instanceof CSharpGenericConstraintKeywordValue) {
        if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.STRUCT_KEYWORD) {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.ValueType,CSharpTransform.INSTANCE));
        }
 else         if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.CLASS_KEYWORD) {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.Object,CSharpTransform.INSTANCE));
        }
      }
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
      PsiElement resolve=typeResolveResult.getElement();
      if (resolve != null && resolve != entrance) {
        DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
        ResolveState newState=ResolveState.initial().put(EXTRACTOR,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceAsElement) {
    state=state.put(BaseDotNetNamespaceAsElement.RESOLVE_SCOPE,resolveScope);
    state=state.put(BaseDotNetNamespaceAsElement.FILTER,DotNetNamespaceAsElement.ChildrenFilter.NONE);
    if (!processor.execute(entrance,state)) {
      return false;
    }
    String parentQName=((DotNetNamespaceAsElement)entrance).getPresentableParentQName();
    if (StringUtil.isEmpty(parentQName)) {
      return true;
    }
    if (walkParent) {
      DotNetNamespaceAsElement parentNamespace=DotNetPsiSearcher.getInstance(entrance.getProject()).findNamespace(parentQName,resolveScope);
      if (parentNamespace != null && !walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
  return true;
}","private static boolean walkChildrenImpl(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,boolean walkParent,@Nullable PsiElement maxScope,@NotNull ResolveState state,@NotNull Set<String> typeVisited){
  ProgressIndicatorProvider.checkCanceled();
  GlobalSearchScope resolveScope=entrance.getResolveScope();
  if (entrance instanceof CSharpTypeDeclaration) {
    DotNetGenericExtractor extractor=state.get(CSharpResolveUtil.EXTRACTOR);
    val typeDeclaration=(CSharpTypeDeclaration)entrance;
    val superTypes=new SmartList<DotNetTypeRef>();
    if (!processTypeDeclaration(processor,typeDeclaration,state,resolveScope,superTypes,extractor,typeVisited)) {
      return false;
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
      PsiElement resolve=typeResolveResult.getElement();
      if (resolve != null && !resolve.isEquivalentTo(entrance)) {
        DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
        ResolveState newState=ResolveState.initial().put(EXTRACTOR,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
    if (walkParent) {
      if (!walkChildrenImpl(processor,entrance.getParent(),walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetGenericParameter) {
    DotNetGenericParameterList parameterList=(DotNetGenericParameterList)entrance.getParent();
    PsiElement parent=parameterList.getParent();
    if (!(parent instanceof CSharpGenericConstraintOwner)) {
      return true;
    }
    val constraint=CSharpGenericConstraintOwnerUtil.forParameter((CSharpGenericConstraintOwner)parent,(DotNetGenericParameter)entrance);
    if (constraint == null) {
      return true;
    }
    val superTypes=new SmartList<DotNetTypeRef>();
    for (    CSharpGenericConstraintValue value : constraint.getGenericConstraintValues()) {
      if (value instanceof CSharpGenericConstraintTypeValue) {
        DotNetTypeRef typeRef=((CSharpGenericConstraintTypeValue)value).toTypeRef();
        superTypes.add(typeRef);
      }
 else       if (value instanceof CSharpGenericConstraintKeywordValue) {
        if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.STRUCT_KEYWORD) {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.ValueType,CSharpTransform.INSTANCE));
        }
 else         if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.CLASS_KEYWORD) {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System.Object,CSharpTransform.INSTANCE));
        }
      }
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      DotNetTypeResolveResult typeResolveResult=dotNetTypeRef.resolve(entrance);
      PsiElement resolve=typeResolveResult.getElement();
      if (resolve != null && resolve != entrance) {
        DotNetGenericExtractor genericExtractor=typeResolveResult.getGenericExtractor();
        ResolveState newState=ResolveState.initial().put(EXTRACTOR,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceAsElement) {
    state=state.put(BaseDotNetNamespaceAsElement.RESOLVE_SCOPE,resolveScope);
    state=state.put(BaseDotNetNamespaceAsElement.FILTER,DotNetNamespaceAsElement.ChildrenFilter.NONE);
    if (!processor.execute(entrance,state)) {
      return false;
    }
    String parentQName=((DotNetNamespaceAsElement)entrance).getPresentableParentQName();
    if (StringUtil.isEmpty(parentQName)) {
      return true;
    }
    if (walkParent) {
      DotNetNamespaceAsElement parentNamespace=DotNetPsiSearcher.getInstance(entrance.getProject()).findNamespace(parentQName,resolveScope);
      if (parentNamespace != null && !walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceDeclaration) {
    String presentableQName=((DotNetNamespaceDeclaration)entrance).getPresentableQName();
    if (presentableQName == null) {
      return true;
    }
    state=state.put(BaseDotNetNamespaceAsElement.RESOLVE_SCOPE,resolveScope);
    state=state.put(BaseDotNetNamespaceAsElement.FILTER,DotNetNamespaceAsElement.ChildrenFilter.NONE);
    DotNetNamespaceAsElement namespace=DotNetPsiSearcher.getInstance(entrance.getProject()).findNamespace(presentableQName,resolveScope);
    if (namespace != null && !walkChildrenImpl(processor,namespace,walkParent,maxScope,state,typeVisited)) {
      return false;
    }
  }
  return true;
}",0.9231449740130488
130516,"@Override public boolean hasExtensions(){
  for (  DotNetQualifiedElement qualifiedElement : getMembers()) {
    if (CSharpMethodImplUtil.isExtensionMethod(qualifiedElement)) {
      return true;
    }
  }
  return false;
}","@Override public boolean hasExtensions(){
  return CSharpTypeDeclarationImplUtil.hasExtensions(this);
}",0.5214723926380368
130517,"@Override public boolean hasExtensions(){
  return false;
}","@Override public boolean hasExtensions(){
  return CSharpTypeDeclarationImplUtil.hasExtensions(this);
}",0.7160493827160493
130518,"@Override public boolean hasExtensions(){
  CSharpTypeStub stub=getStub();
  if (stub != null) {
    return stub.hasExtensions();
  }
  for (  DotNetQualifiedElement qualifiedElement : getMembers()) {
    if (CSharpMethodImplUtil.isExtensionMethod(qualifiedElement)) {
      return true;
    }
  }
  return false;
}","@Override public boolean hasExtensions(){
  CSharpTypeStub stub=getStub();
  if (stub != null) {
    return stub.hasExtensions();
  }
  return CSharpTypeDeclarationImplUtil.hasExtensions(this);
}",0.6941176470588235
130519,"public static void parseArrayAfterThis(CSharpBuilderWrapper builderWrapper,PsiBuilder.Marker marker){
  if (builderWrapper.getTokenType() == LBRACKET) {
    MethodParsing.parseParameterList(builderWrapper,RBRACKET);
    parseAccessors(builderWrapper,XXX_ACCESSOR,PROPERTY_ACCESSOR_START);
    marker.done(ARRAY_METHOD_DECLARATION);
  }
 else {
    builderWrapper.error(""String_Node_Str"");
  }
}","public static void parseArrayAfterThis(CSharpBuilderWrapper builderWrapper,PsiBuilder.Marker marker){
  if (builderWrapper.getTokenType() == LBRACKET) {
    MethodParsing.parseParameterList(builderWrapper,RBRACKET);
  }
 else {
    builderWrapper.error(""String_Node_Str"");
  }
  parseAccessors(builderWrapper,XXX_ACCESSOR,PROPERTY_ACCESSOR_START);
  marker.done(ARRAY_METHOD_DECLARATION);
}",0.8443877551020408
130520,"@NotNull @Override public List<CompilerCheckResult> check(@NotNull CSharpLanguageVersion languageVersion,@NotNull CSharpBlockStatementImpl element){
  PsiElement parent=element.getParent();
  if (!(parent instanceof DotNetModifierListOwner)) {
    return Collections.emptyList();
  }
  val results=new ArrayList<CompilerCheckResult>();
  val names=new THashSet<String>();
  parent.accept(new CSharpRecursiveElementVisitor(){
    @Override public void visitLocalVariable(    CSharpLocalVariable variable){
      String name=variable.getName();
      if (names.contains(name)) {
        results.add(result(variable.getNameIdentifier(),name));
      }
 else {
        names.add(name);
      }
      DotNetExpression initializer=variable.getInitializer();
      if (initializer != null) {
        initializer.accept(this);
      }
    }
    @Override public void visitForeachStatement(    CSharpForeachStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitForStatement(    CSharpForStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitParameter(    DotNetParameter parameter){
      String name=parameter.getName();
      names.add(name);
    }
    @Override public void visitLambdaParameter(    CSharpLambdaParameterImpl parameter){
      String name=parameter.getName();
      if (names.contains(name)) {
        results.add(resultImpl(CS0136.class,parameter.getNameIdentifier(),name,name));
      }
 else {
        names.add(name);
      }
    }
    private void visitAndRollback(    PsiElement e){
      Set<String> oldSet=new HashSet<String>(names);
      visitElement(e);
      names.clear();
      names.addAll(oldSet);
    }
  }
);
  return results;
}","@NotNull @Override public List<CompilerCheckResult> check(@NotNull CSharpLanguageVersion languageVersion,@NotNull CSharpBlockStatementImpl element){
  PsiElement parent=element.getParent();
  if (!(parent instanceof DotNetModifierListOwner)) {
    return Collections.emptyList();
  }
  val results=new ArrayList<CompilerCheckResult>();
  val names=new THashSet<String>();
  parent.accept(new CSharpRecursiveElementVisitor(){
    @Override public void visitLocalVariable(    CSharpLocalVariable variable){
      String name=variable.getName();
      if (names.contains(name)) {
        results.add(result(variable.getNameIdentifier(),name));
      }
 else {
        names.add(name);
      }
      DotNetExpression initializer=variable.getInitializer();
      if (initializer != null) {
        initializer.accept(this);
      }
    }
    @Override public void visitCatchStatement(    CSharpCatchStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitIfStatement(    CSharpIfStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitTryStatement(    CSharpTryStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitForeachStatement(    CSharpForeachStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitForStatement(    CSharpForStatementImpl statement){
      visitAndRollback(statement);
    }
    @Override public void visitParameter(    DotNetParameter parameter){
      String name=parameter.getName();
      names.add(name);
    }
    @Override public void visitLambdaParameter(    CSharpLambdaParameterImpl parameter){
      String name=parameter.getName();
      if (names.contains(name)) {
        results.add(resultImpl(CS0136.class,parameter.getNameIdentifier(),name,name));
      }
 else {
        names.add(name);
      }
    }
    private void visitAndRollback(    PsiElement e){
      Set<String> oldSet=new HashSet<String>(names);
      visitElement(e);
      names.clear();
      names.addAll(oldSet);
    }
  }
);
  return results;
}",0.9031589849818746
130521,"public MsilMethodAsCSharpMethodDeclaration(PsiElement parent,@Nullable MsilClassEntry msilClassEntry,@NotNull MsilMethodEntry methodEntry){
  super(parent,getAdditionModifiers(methodEntry),methodEntry);
  myDelegate=msilClassEntry;
}","public MsilMethodAsCSharpMethodDeclaration(PsiElement parent,@Nullable DotNetTypeDeclaration declaration,@NotNull MsilMethodEntry methodEntry){
  super(parent,getAdditionModifiers(methodEntry),methodEntry);
  myDelegate=declaration;
}",0.8137044967880086
130522,"public static DotNetTypeRef extractToCSharp(DotNetTypeRef typeRef,PsiElement scope){
  if (typeRef == DotNetTypeRef.ERROR_TYPE) {
    return DotNetTypeRef.ERROR_TYPE;
  }
  if (typeRef instanceof MsilNativeTypeRefImpl) {
    String qualifiedText=typeRef.getQualifiedText();
    boolean nullable=false;
    if (DotNetTypes.System.Object.equals(qualifiedText) || DotNetTypes.System.String.equals(qualifiedText)) {
      nullable=true;
    }
    return new DotNetTypeRefByQName(typeRef.getQualifiedText(),CSharpTransform.INSTANCE,nullable);
  }
 else   if (typeRef instanceof MsilArrayTypRefImpl) {
    return new CSharpArrayTypeRef(extractToCSharp(((MsilArrayTypRefImpl)typeRef).getInnerTypeRef(),scope),0);
  }
 else   if (typeRef instanceof DotNetPointerTypeRef) {
    return new DotNetPointerTypeRefImpl(extractToCSharp(((DotNetPointerTypeRef)typeRef).getInnerTypeRef(),scope));
  }
 else   if (typeRef instanceof DotNetRefTypeRef) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.ref,extractToCSharp(((DotNetRefTypeRef)typeRef).getInnerTypeRef(),scope));
  }
 else   if (typeRef instanceof DotNetGenericWrapperTypeRef) {
    val inner=extractToCSharp(((DotNetGenericWrapperTypeRef)typeRef).getInnerTypeRef(),scope);
    DotNetTypeRef[] arguments=((DotNetGenericWrapperTypeRef)typeRef).getArgumentTypeRefs();
    DotNetTypeRef[] newArguments=new DotNetTypeRef[arguments.length];
    for (int i=0; i < newArguments.length; i++) {
      newArguments[i]=extractToCSharp(arguments[i],scope);
    }
    return new DotNetGenericWrapperTypeRef(inner,newArguments);
  }
  return new MsilDelegateTypeRef(typeRef);
}","public static DotNetTypeRef extractToCSharp(DotNetTypeRef typeRef,PsiElement scope){
  if (typeRef == DotNetTypeRef.ERROR_TYPE) {
    return DotNetTypeRef.ERROR_TYPE;
  }
  if (typeRef instanceof MsilNativeTypeRefImpl) {
    String qualifiedText=typeRef.getQualifiedText();
    boolean nullable=false;
    if (DotNetTypes.System.Object.equals(qualifiedText) || DotNetTypes.System.String.equals(qualifiedText)) {
      nullable=true;
    }
    return new DotNetTypeRefByQName(typeRef.getQualifiedText(),CSharpTransform.INSTANCE,nullable);
  }
 else   if (typeRef instanceof MsilArrayTypRefImpl) {
    return new CSharpArrayTypeRef(extractToCSharp(((MsilArrayTypRefImpl)typeRef).getInnerTypeRef(),scope),0);
  }
 else   if (typeRef instanceof DotNetPointerTypeRef) {
    return new DotNetPointerTypeRefImpl(extractToCSharp(((DotNetPointerTypeRef)typeRef).getInnerTypeRef(),scope));
  }
 else   if (typeRef instanceof DotNetRefTypeRef) {
    return new CSharpRefTypeRef(CSharpRefTypeRef.Type.ref,extractToCSharp(((DotNetRefTypeRef)typeRef).getInnerTypeRef(),scope));
  }
 else   if (typeRef instanceof DotNetGenericWrapperTypeRef) {
    val inner=extractToCSharp(((DotNetGenericWrapperTypeRef)typeRef).getInnerTypeRef(),scope);
    DotNetTypeRef[] arguments=((DotNetGenericWrapperTypeRef)typeRef).getArgumentTypeRefs();
    DotNetTypeRef[] newArguments=new DotNetTypeRef[arguments.length];
    for (int i=0; i < newArguments.length; i++) {
      newArguments[i]=extractToCSharp(arguments[i],scope);
    }
    return new DotNetGenericWrapperTypeRef(inner,newArguments);
  }
  PsiElement resolve=typeRef.resolve(scope);
  if (resolve instanceof DotNetTypeDeclaration) {
    CSharpMethodDeclaration delegateMethod=wrapToDelegateMethod((DotNetTypeDeclaration)resolve);
    if (delegateMethod != null) {
      return new CSharpLambdaTypeRef(delegateMethod);
    }
  }
  return new MsilDelegateTypeRef(typeRef);
}",0.8971006253553155
130523,"@Nullable public static PsiElement wrap(PsiElement element){
}","@Nullable public static PsiElement wrap(PsiElement element){
  if (element instanceof MsilClassEntry) {
    PsiElement cache=ourCache.get(element);
    if (cache != null) {
      return cache;
    }
    cache=wrapToDelegateMethod((DotNetTypeDeclaration)element);
    if (cache == null) {
      cache=new MsilClassAsCSharpTypeDefinition(null,(MsilClassEntry)element);
    }
    ourCache.put((MsilClassEntry)element,cache);
    return cache;
  }
  return element;
}",0.2361904761904762
130524,"public BaseCSharpModuleExtension(@NotNull String id,@NotNull ModifiableRootModel module){
  super(id,module);
  myLanguageVersionPointer=new CSharpLanguageVersionPointer(getProject(),id);
}","public BaseCSharpModuleExtension(@NotNull String id,@NotNull ModuleRootLayer module){
  super(id,module);
  myLanguageVersionPointer=new CSharpLanguageVersionPointer(getProject(),id);
}",0.962566844919786
130525,"private static List<TextRange> collectDisabledBlocks(PsiFile templateFile,final List<String> baseVariables){
  final Ref<List<TextRange>> listRef=Ref.create();
  final Ref<List<String>> redefined=Ref.create();
  templateFile.accept(new CSharpMacroRecursiveElementVisitor(){
    @Override public void visitMacroDefine(    CSharpMacroDefine def){
      List<String> redefs=redefined.get();
      if (redefs == null) {
        redefined.set(redefs=new ArrayList<String>(baseVariables));
      }
      String name=def.getName();
      if (name != null) {
        if (def.isUnDef()) {
          redefs.remove(name);
        }
 else {
          redefs.add(name);
        }
      }
    }
    @Override public void visitMacroIf(    CSharpMacroIfImpl element){
      List<TextRange> textRanges=listRef.get();
      if (textRanges == null) {
        listRef.set(textRanges=new ArrayList<TextRange>());
      }
      CSharpMacroIfConditionBlockImpl[] conditionBlocks=element.getConditionBlocks();
      Queue<CSharpMacroIfConditionBlockImpl> queue=new ArrayDeque<CSharpMacroIfConditionBlockImpl>(conditionBlocks.length);
      Collections.addAll(queue,conditionBlocks);
      CSharpMacroIfConditionBlockImpl activeBlock=null;
      boolean forceDisable=false;
      CSharpMacroIfConditionBlockImpl block;
      while ((block=queue.poll()) != null) {
        CSharpMacroBlockStartImpl declarationTag=block.getDeclarationTag();
        if (forceDisable) {
          addTextRange(declarationTag,queue,element,textRanges);
          continue;
        }
        if (!declarationTag.isElse()) {
          CSharpMacroExpression value=declarationTag.getValue();
          if (value == null) {
            addTextRange(declarationTag,queue,element,textRanges);
          }
 else {
            String text=value.getText();
            if (isDefined(text)) {
              forceDisable=true;
              activeBlock=block;
            }
 else {
              addTextRange(declarationTag,queue,element,textRanges);
            }
          }
        }
 else {
          activeBlock=block;
        }
      }
      if (activeBlock != null) {
        activeBlock.accept(this);
      }
    }
    private void addTextRange(    CSharpMacroBlockStartImpl start,    Queue<CSharpMacroIfConditionBlockImpl> queue,    CSharpMacroIfImpl macroIf,    List<TextRange> textRanges){
      CSharpMacroIfConditionBlockImpl element=queue.peek();
      int endOffset;
      if (element == null) {
        CSharpMacroBlockStopImpl closeTag=macroIf.getCloseTag();
        if (closeTag == null) {
          endOffset=macroIf.getContainingFile().getTextLength();
        }
 else {
          endOffset=closeTag.getKeywordElement().getTextRange().getStartOffset();
        }
      }
 else {
        endOffset=element.getDeclarationTag().getKeywordElement().getTextRange().getStartOffset();
      }
      PsiElement stopElement=start.getStopElement();
      if (stopElement == null) {
        textRanges.add(new TextRange(start.getTextRange().getEndOffset(),endOffset));
      }
 else {
        textRanges.add(new TextRange(stopElement.getTextRange().getEndOffset(),endOffset));
      }
    }
    private boolean isDefined(    String text){
      List<String> defs=redefined.get();
      if (defs == null) {
        defs=baseVariables;
      }
      return !defs.isEmpty() && MacroEvaluator.evaluate(text,defs);
    }
  }
);
  List<TextRange> list=listRef.get();
  return list == null ? Collections.<TextRange>emptyList() : list;
}","private static List<TextRange> collectDisabledBlocks(PsiFile templateFile,final List<String> baseVariables){
  final Ref<List<TextRange>> listRef=Ref.create();
  final Ref<List<String>> redefined=Ref.create();
  templateFile.accept(new CSharpMacroRecursiveElementVisitor(){
    @Override public void visitMacroDefine(    CSharpMacroDefine def){
      List<String> redefs=redefined.get();
      if (redefs == null) {
        redefined.set(redefs=new ArrayList<String>(baseVariables));
      }
      String name=def.getName();
      if (name != null) {
        if (def.isUnDef()) {
          redefs.remove(name);
        }
 else {
          redefs.add(name);
        }
      }
    }
    @Override public void visitMacroIf(    CSharpMacroIfImpl element){
      List<TextRange> textRanges=listRef.get();
      if (textRanges == null) {
        listRef.set(textRanges=new ArrayList<TextRange>());
      }
      CSharpMacroIfConditionBlockImpl[] conditionBlocks=element.getConditionBlocks();
      Queue<CSharpMacroIfConditionBlockImpl> queue=new ArrayDeque<CSharpMacroIfConditionBlockImpl>(conditionBlocks.length);
      Collections.addAll(queue,conditionBlocks);
      CSharpMacroIfConditionBlockImpl activeBlock=null;
      boolean forceDisable=false;
      CSharpMacroIfConditionBlockImpl block;
      while ((block=queue.poll()) != null) {
        CSharpMacroBlockStartImpl declarationTag=block.getDeclarationTag();
        if (forceDisable) {
          addTextRange(declarationTag,queue,element,textRanges);
          continue;
        }
        if (!declarationTag.isElse()) {
          CSharpMacroExpression value=declarationTag.getValue();
          if (value == null) {
            addTextRange(declarationTag,queue,element,textRanges);
          }
 else {
            String text=value.getText();
            if (isDefined(text)) {
              forceDisable=true;
              activeBlock=block;
            }
 else {
              addTextRange(declarationTag,queue,element,textRanges);
            }
          }
        }
 else {
          activeBlock=block;
        }
      }
      if (activeBlock != null) {
        activeBlock.accept(this);
      }
    }
    private void addTextRange(    CSharpMacroBlockStartImpl start,    Queue<CSharpMacroIfConditionBlockImpl> queue,    CSharpMacroIfImpl macroIf,    List<TextRange> textRanges){
      CSharpMacroIfConditionBlockImpl element=queue.peek();
      int endOffset;
      if (element == null) {
        CSharpMacroBlockStopImpl closeTag=macroIf.getCloseTag();
        if (closeTag == null) {
          endOffset=macroIf.getContainingFile().getTextLength();
        }
 else {
          endOffset=closeTag.getKeywordElement().getTextRange().getStartOffset();
        }
      }
 else {
        endOffset=element.getDeclarationTag().getKeywordElement().getTextRange().getStartOffset();
      }
      PsiElement stopElement=start.getStopElement();
      if (stopElement == null) {
        textRanges.add(new TextRange(start.getTextRange().getEndOffset(),endOffset));
      }
 else {
        textRanges.add(new TextRange(stopElement.getTextRange().getEndOffset(),endOffset));
      }
    }
    private boolean isDefined(    String text){
      List<String> defs=redefined.get();
      if (defs == null) {
        defs=baseVariables;
      }
      return MacroEvaluator.evaluate(text,defs);
    }
  }
);
  List<TextRange> list=listRef.get();
  return list == null ? Collections.<TextRange>emptyList() : list;
}",0.997263430793605
130526,"private boolean isDefined(String text){
  List<String> defs=redefined.get();
  if (defs == null) {
    defs=baseVariables;
  }
  return !defs.isEmpty() && MacroEvaluator.evaluate(text,defs);
}","private boolean isDefined(String text){
  List<String> defs=redefined.get();
  if (defs == null) {
    defs=baseVariables;
  }
  return MacroEvaluator.evaluate(text,defs);
}",0.947945205479452
130527,"@Nullable private static PsiBuilder.Marker parsePrimary(final CSharpBuilderWrapper builder,@Nullable final BreakPoint breakPoint,final int breakOffset){
  PsiBuilder.Marker startMarker=builder.mark();
  PsiBuilder.Marker expr=parsePrimaryExpressionStart(builder);
  if (expr == null) {
    startMarker.drop();
    return null;
  }
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == DOT) {
      final PsiBuilder.Marker dotPos=builder.mark();
      final int dotOffset=builder.getCurrentOffset();
      builder.advanceLexer();
      IElementType dotTokenType=builder.getTokenType();
      if (dotTokenType == NEW_KEYWORD) {
        dotPos.drop();
        expr=parseNewExpression(builder,expr);
      }
 else       if (dotTokenType == BASE_KEYWORD) {
        dotPos.drop();
        final PsiBuilder.Marker refExpr=expr.precede();
        builder.advanceLexer();
        refExpr.done(REFERENCE_EXPRESSION);
        expr=refExpr;
      }
 else {
        dotPos.drop();
        final PsiBuilder.Marker refExpr=expr.precede();
        if (!expect(builder,ID_OR_SUPER,""String_Node_Str"")) {
          refExpr.done(REFERENCE_EXPRESSION);
          startMarker.drop();
          return refExpr;
        }
        refExpr.done(REFERENCE_EXPRESSION);
        expr=refExpr;
      }
    }
 else     if (tokenType == LT) {
      if (exprType(expr) != REFERENCE_EXPRESSION) {
        startMarker.drop();
        return expr;
      }
      final PsiBuilder.Marker callExpr=expr.precede();
      PsiBuilder.Marker argumentMark=builder.mark();
      builder.advanceLexer();
      parseTypeList(builder,false);
      expect(builder,GT,""String_Node_Str"");
      argumentMark.done(TYPE_ARGUMENTS);
      if (builder.getTokenType() == LPAR) {
        parseArgumentList(builder);
        callExpr.done(METHOD_CALL_EXPRESSION);
        expr=callExpr;
      }
 else {
        callExpr.drop();
        startMarker.drop();
        return expr;
      }
    }
 else     if (tokenType == LPAR) {
      if (exprType(expr) != REFERENCE_EXPRESSION) {
        startMarker.drop();
        return expr;
      }
      final PsiBuilder.Marker callExpr=expr.precede();
      parseArgumentList(builder);
      callExpr.done(METHOD_CALL_EXPRESSION);
      expr=callExpr;
    }
 else     if (tokenType == LBRACKET) {
      if (breakPoint == BreakPoint.P4) {
        startMarker.drop();
        return expr;
      }
      builder.advanceLexer();
      final PsiBuilder.Marker arrayAccess=expr.precede();
      while (true) {
        final PsiBuilder.Marker index=parse(builder);
        if (index == null) {
          builder.error(""String_Node_Str"");
        }
        if (builder.getTokenType() != COMMA) {
          break;
        }
 else {
          builder.advanceLexer();
        }
      }
      if (builder.getTokenType() != RBRACKET) {
        builder.error(""String_Node_Str"");
        arrayAccess.done(ARRAY_ACCESS_EXPRESSION);
        startMarker.drop();
        return arrayAccess;
      }
      builder.advanceLexer();
      arrayAccess.done(ARRAY_ACCESS_EXPRESSION);
      expr=arrayAccess;
    }
 else {
      startMarker.drop();
      return expr;
    }
  }
}","@Nullable private static PsiBuilder.Marker parsePrimary(final CSharpBuilderWrapper builder,@Nullable final BreakPoint breakPoint,final int breakOffset){
  PsiBuilder.Marker startMarker=builder.mark();
  PsiBuilder.Marker expr=parsePrimaryExpressionStart(builder);
  if (expr == null) {
    startMarker.drop();
    return null;
  }
  while (true) {
    final IElementType tokenType=builder.getTokenType();
    if (tokenType == DOT) {
      final PsiBuilder.Marker dotPos=builder.mark();
      final int dotOffset=builder.getCurrentOffset();
      builder.advanceLexer();
      IElementType dotTokenType=builder.getTokenType();
      if (dotTokenType == NEW_KEYWORD) {
        dotPos.drop();
        expr=parseNewExpression(builder,expr);
      }
 else       if (dotTokenType == BASE_KEYWORD) {
        dotPos.drop();
        final PsiBuilder.Marker refExpr=expr.precede();
        builder.advanceLexer();
        refExpr.done(REFERENCE_EXPRESSION);
        expr=refExpr;
      }
 else {
        dotPos.drop();
        final PsiBuilder.Marker refExpr=expr.precede();
        if (!expect(builder,ID_OR_SUPER,""String_Node_Str"")) {
          refExpr.done(REFERENCE_EXPRESSION);
          startMarker.drop();
          return refExpr;
        }
        refExpr.done(REFERENCE_EXPRESSION);
        expr=refExpr;
      }
    }
 else     if (tokenType == LT) {
      if (exprType(expr) != REFERENCE_EXPRESSION) {
        startMarker.drop();
        return expr;
      }
      final PsiBuilder.Marker callExpr=expr.precede();
      PsiBuilder.Marker argumentMark=builder.mark();
      builder.advanceLexer();
      parseTypeList(builder,false);
      expect(builder,GT,""String_Node_Str"");
      argumentMark.done(TYPE_ARGUMENTS);
      if (builder.getTokenType() == LPAR) {
        parseArgumentList(builder);
        callExpr.done(METHOD_CALL_EXPRESSION);
        expr=callExpr;
      }
 else {
        argumentMark.rollbackTo();
        callExpr.drop();
        startMarker.drop();
        return expr;
      }
    }
 else     if (tokenType == LPAR) {
      if (exprType(expr) != REFERENCE_EXPRESSION) {
        startMarker.drop();
        return expr;
      }
      final PsiBuilder.Marker callExpr=expr.precede();
      parseArgumentList(builder);
      callExpr.done(METHOD_CALL_EXPRESSION);
      expr=callExpr;
    }
 else     if (tokenType == LBRACKET) {
      if (breakPoint == BreakPoint.P4) {
        startMarker.drop();
        return expr;
      }
      builder.advanceLexer();
      final PsiBuilder.Marker arrayAccess=expr.precede();
      while (true) {
        final PsiBuilder.Marker index=parse(builder);
        if (index == null) {
          builder.error(""String_Node_Str"");
        }
        if (builder.getTokenType() != COMMA) {
          break;
        }
 else {
          builder.advanceLexer();
        }
      }
      if (builder.getTokenType() != RBRACKET) {
        builder.error(""String_Node_Str"");
        arrayAccess.done(ARRAY_ACCESS_EXPRESSION);
        startMarker.drop();
        return arrayAccess;
      }
      builder.advanceLexer();
      arrayAccess.done(ARRAY_ACCESS_EXPRESSION);
      expr=arrayAccess;
    }
 else {
      startMarker.drop();
      return expr;
    }
  }
}",0.9945166849443836
130528,"private static ResolveError createResolveError(PsiElement element,PsiElement resolveElement){
  CSharpCallArgumentListOwner callOwner=findCallOwner(element);
  if (callOwner != null) {
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"");
    if (resolveElement instanceof DotNetVariable) {
      DotNetTypeRef typeRef=((DotNetVariable)resolveElement).toTypeRef(false);
      if (!(typeRef instanceof CSharpLambdaTypeRef)) {
        return null;
      }
      DotNetTypeRef[] parameterTypes=((CSharpLambdaTypeRef)typeRef).getParameterTypes();
      for (int i=0; i < parameterTypes.length; i++) {
        if (i != 0) {
          builder.append(""String_Node_Str"");
        }
        DotNetTypeRef parameterType=parameterTypes[i];
        builder.append(parameterType.getPresentableText());
      }
    }
 else     if (resolveElement instanceof DotNetLikeMethodDeclaration) {
      DotNetGenericExtractor e=MethodAcceptorImpl.createExtractorFromCall(callOwner,(DotNetGenericParameterListOwner)resolveElement);
      DotNetParameter[] parameters=((DotNetLikeMethodDeclaration)resolveElement).getParameters();
      for (int i=0; i < parameters.length; i++) {
        if (i != 0) {
          builder.append(""String_Node_Str"");
        }
        DotNetParameter parameter=parameters[i];
        builder.append(MethodAcceptorImpl.calcParameterTypeRef(element,parameter,e).getPresentableText());
      }
    }
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    DotNetExpression[] parameterExpressions=callOwner.getParameterExpressions();
    for (int i=0; i < parameterExpressions.length; i++) {
      if (i != 0) {
        builder.append(""String_Node_Str"");
      }
      DotNetExpression parameterExpression=parameterExpressions[i];
      builder.append(parameterExpression.toTypeRef(false).getPresentableText());
    }
    builder.append(""String_Node_Str"");
    PsiElement parameterList=callOwner.getParameterList();
    if (parameterList == null) {
      parameterList=callOwner;
    }
    return new ResolveError(""String_Node_Str"",builder.toString(),parameterList);
  }
  return null;
}","private static ResolveError createResolveError(PsiElement element,PsiElement resolveElement){
  CSharpCallArgumentListOwner callOwner=findCallOwner(element);
  if (callOwner != null) {
    StringBuilder builder=new StringBuilder();
    builder.append(""String_Node_Str"");
    if (resolveElement instanceof DotNetVariable) {
      DotNetTypeRef typeRef=((DotNetVariable)resolveElement).toTypeRef(false);
      if (!(typeRef instanceof CSharpLambdaTypeRef)) {
        return null;
      }
      DotNetTypeRef[] parameterTypes=((CSharpLambdaTypeRef)typeRef).getParameterTypes();
      for (int i=0; i < parameterTypes.length; i++) {
        if (i != 0) {
          builder.append(""String_Node_Str"");
        }
        appendType(builder,parameterTypes[i]);
      }
    }
 else     if (resolveElement instanceof DotNetLikeMethodDeclaration) {
      DotNetGenericExtractor e=MethodAcceptorImpl.createExtractorFromCall(callOwner,(DotNetGenericParameterListOwner)resolveElement);
      DotNetParameter[] parameters=((DotNetLikeMethodDeclaration)resolveElement).getParameters();
      for (int i=0; i < parameters.length; i++) {
        if (i != 0) {
          builder.append(""String_Node_Str"");
        }
        appendType(builder,MethodAcceptorImpl.calcParameterTypeRef(element,parameters[i],e));
      }
    }
    builder.append(""String_Node_Str"");
    builder.append(""String_Node_Str"");
    DotNetExpression[] parameterExpressions=callOwner.getParameterExpressions();
    for (int i=0; i < parameterExpressions.length; i++) {
      if (i != 0) {
        builder.append(""String_Node_Str"");
      }
      appendType(builder,parameterExpressions[i].toTypeRef(false));
    }
    builder.append(""String_Node_Str"");
    PsiElement parameterList=callOwner.getParameterList();
    if (parameterList == null) {
      parameterList=callOwner;
    }
    return new ResolveError(""String_Node_Str"",builder.toString(),parameterList);
  }
  return null;
}",0.9003183933382317
130529,"@NotNull @Override public DotNetTypeRef[] getExtendTypeRefs(){
  DotNetTypeRef[] extendTypeRefs=myMsilElement.getExtendTypeRefs();
  if (extendTypeRefs.length == 0) {
    return DotNetTypeRef.EMPTY_ARRAY;
  }
  DotNetTypeRef[] typeRefs=new DotNetTypeRef[extendTypeRefs.length];
  for (int i=0; i < typeRefs.length; i++) {
    typeRefs[i]=new MsilToCSharpTypeRef(extendTypeRefs[i]);
  }
  return typeRefs;
}","@NotNull @Override public DotNetTypeRef[] getExtendTypeRefs(){
  DotNetTypeRef[] extendTypeRefs=myMsilElement.getExtendTypeRefs();
  if (extendTypeRefs.length == 0) {
    return DotNetTypeRef.EMPTY_ARRAY;
  }
  DotNetTypeRef[] typeRefs=new DotNetTypeRef[extendTypeRefs.length];
  for (int i=0; i < typeRefs.length; i++) {
    typeRefs[i]=MsilToCSharpUtil.extractToCSharp(extendTypeRefs[i],myMsilElement);
  }
  return typeRefs;
}",0.9461077844311376
130530,"private static void processModifierList(StringBuilder builder,DotNetModifierListOwner owner){
  DotNetModifierList modifierList=owner.getModifierList();
  if (modifierList != null) {
    for (    DotNetModifier dotNetModifier : modifierList.getModifiers()) {
      builder.append(dotNetModifier.getPresentableText()).append(""String_Node_Str"");
    }
  }
}","private static void processModifierList(StringBuilder builder,DotNetModifierListOwner owner){
  DotNetModifierList modifierList=owner.getModifierList();
  if (modifierList != null) {
    for (    DotNetModifier dotNetModifier : modifierList.getModifiers()) {
      if (dotNetModifier == CSharpModifier.REF || dotNetModifier == CSharpModifier.OUT) {
        continue;
      }
      builder.append(dotNetModifier.getPresentableText()).append(""String_Node_Str"");
    }
  }
}",0.8595641646489104
130531,"private static void processParameterList(DotNetParameterListOwner declaration,StringBuilder builder,char p1,char p2){
  builder.append(p1);
  StubBlockUtil.join(builder,declaration.getParameters(),new PairFunction<StringBuilder,DotNetParameter,Void>(){
    @Nullable @Override public Void fun(    StringBuilder t,    DotNetParameter v){
      appendTypeRef(t,v.toTypeRef(false));
      t.append(""String_Node_Str"");
      t.append(v.getName());
      return null;
    }
  }
,""String_Node_Str"");
  builder.append(p2);
}","private static void processParameterList(DotNetParameterListOwner declaration,StringBuilder builder,char p1,char p2){
  builder.append(p1);
  StubBlockUtil.join(builder,declaration.getParameters(),new PairFunction<StringBuilder,DotNetParameter,Void>(){
    @Nullable @Override public Void fun(    StringBuilder t,    DotNetParameter v){
      processModifierList(t,v);
      appendTypeRef(t,v.toTypeRef(false));
      t.append(""String_Node_Str"");
      t.append(v.getName());
      return null;
    }
  }
,""String_Node_Str"");
  builder.append(p2);
}",0.9699812382739212
130532,"@Nullable @Override public Void fun(StringBuilder t,DotNetParameter v){
  appendTypeRef(t,v.toTypeRef(false));
  t.append(""String_Node_Str"");
  t.append(v.getName());
  return null;
}","@Nullable @Override public Void fun(StringBuilder t,DotNetParameter v){
  processModifierList(t,v);
  appendTypeRef(t,v.toTypeRef(false));
  t.append(""String_Node_Str"");
  t.append(v.getName());
  return null;
}",0.9289340101522844
130533,"private static boolean walkChildrenImpl(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,boolean walkParent,@Nullable PsiElement maxScope,@NotNull ResolveState state,@NotNull Set<String> typeVisited){
  ProgressIndicatorProvider.checkCanceled();
  if (entrance instanceof DotNetTypeDeclaration) {
    DotNetGenericExtractor extractor=state.get(CSharpResolveUtil.EXTRACTOR_KEY);
    val typeDeclaration=(DotNetTypeDeclaration)entrance;
    val superTypes=new SmartList<DotNetTypeRef>();
    if (typeDeclaration.hasModifier(CSharpModifier.PARTIAL)) {
      val types=DotNetPsiFacade.getInstance(entrance.getProject()).findTypes(typeDeclaration.getPresentableQName(),entrance.getResolveScope(),typeDeclaration.getGenericParametersCount());
      for (      val type : types) {
        if (!type.hasModifier(CSharpModifier.PARTIAL)) {
          continue;
        }
        if (!processTypeDeclaration(processor,type,state,superTypes,extractor,typeVisited)) {
          return false;
        }
      }
    }
 else {
      if (!processTypeDeclaration(processor,typeDeclaration,state,superTypes,extractor,typeVisited)) {
        return false;
      }
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      PsiElement resolve=dotNetTypeRef.resolve(entrance);
      if (resolve != null && !resolve.isEquivalentTo(entrance)) {
        DotNetGenericExtractor genericExtractor=dotNetTypeRef.getGenericExtractor(resolve,entrance);
        ResolveState newState=ResolveState.initial().put(EXTRACTOR_KEY,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
    if (walkParent) {
      if (!walkChildrenImpl(processor,entrance.getParent(),walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetGenericParameter) {
    DotNetGenericParameterList parameterList=(DotNetGenericParameterList)entrance.getParent();
    PsiElement parent=parameterList.getParent();
    if (!(parent instanceof CSharpGenericConstraintOwner)) {
      return true;
    }
    val constraint=CSharpGenericConstraintOwnerUtil.forParameter((CSharpGenericConstraintOwner)parent,(DotNetGenericParameter)entrance);
    if (constraint == null) {
      return true;
    }
    val superTypes=new SmartList<DotNetTypeRef>();
    for (    CSharpGenericConstraintValue value : constraint.getGenericConstraintValues()) {
      if (value instanceof CSharpGenericConstraintTypeValue) {
        DotNetTypeRef typeRef=((CSharpGenericConstraintTypeValue)value).toTypeRef();
        superTypes.add(typeRef);
      }
 else       if (value instanceof CSharpGenericConstraintKeywordValue) {
        if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.STRUCT_KEYWORD) {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System_ValueType,CSharpTransform.INSTANCE));
        }
 else         if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.CLASS_KEYWORD) {
          superTypes.add(CSharpNativeTypeRef.OBJECT);
        }
      }
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      PsiElement resolve=dotNetTypeRef.resolve(entrance);
      if (resolve != null && resolve != entrance) {
        DotNetGenericExtractor genericExtractor=dotNetTypeRef.getGenericExtractor(resolve,entrance);
        ResolveState newState=ResolveState.initial().put(EXTRACTOR_KEY,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
  }
 else   if (entrance instanceof CSharpNamespaceAsElement) {
    if (!entrance.processDeclarations(processor,state,maxScope,entrance)) {
      return false;
    }
    String pQName=CSharpNamespaceHelper.getNamespaceForIndexing(((CSharpNamespaceAsElement)entrance).getPresentableParentQName());
    if (Comparing.equal(pQName,CSharpNamespaceHelper.ROOT)) {
      return true;
    }
    if (walkParent) {
      CSharpNamespaceAsElement parentNamespace=new CSharpNamespaceAsElement(entrance.getProject(),pQName,entrance.getResolveScope());
      if (!walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceDeclaration) {
    String presentableQName=((DotNetNamespaceDeclaration)entrance).getPresentableQName();
    if (presentableQName == null) {
      return true;
    }
    if (walkParent) {
      CSharpNamespaceAsElement parentNamespace=new CSharpNamespaceAsElement(entrance.getProject(),presentableQName,entrance.getResolveScope());
      if (!walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof PsiFile) {
    CSharpNamespaceAsElement parentNamespace=new CSharpNamespaceAsElement(entrance.getProject(),CSharpNamespaceHelper.ROOT,entrance.getResolveScope());
    return walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited);
  }
  PsiFile psiFile=state.get(CONTAINS_FILE_KEY);
  return psiFile == null || walkChildrenImpl(processor,psiFile,walkParent,maxScope,state,typeVisited);
}","private static boolean walkChildrenImpl(@NotNull final PsiScopeProcessor processor,@NotNull final PsiElement entrance,boolean walkParent,@Nullable PsiElement maxScope,@NotNull ResolveState state,@NotNull Set<String> typeVisited){
  ProgressIndicatorProvider.checkCanceled();
  if (entrance instanceof DotNetTypeDeclaration) {
    DotNetGenericExtractor extractor=state.get(CSharpResolveUtil.EXTRACTOR_KEY);
    val typeDeclaration=(DotNetTypeDeclaration)entrance;
    val superTypes=new SmartList<DotNetTypeRef>();
    if (typeDeclaration.hasModifier(CSharpModifier.PARTIAL)) {
      String vmQName=typeDeclaration.getVmQName();
      val types=CSharpPsiSearcher.getInstance(entrance.getProject()).findTypes(vmQName,entrance.getResolveScope());
      for (      val type : types) {
        if (!type.hasModifier(CSharpModifier.PARTIAL)) {
          continue;
        }
        if (!processTypeDeclaration(processor,type,state,superTypes,extractor,null)) {
          return false;
        }
      }
      typeVisited.add(vmQName);
    }
 else {
      if (!processTypeDeclaration(processor,typeDeclaration,state,superTypes,extractor,typeVisited)) {
        return false;
      }
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      PsiElement resolve=dotNetTypeRef.resolve(entrance);
      if (resolve != null && !resolve.isEquivalentTo(entrance)) {
        DotNetGenericExtractor genericExtractor=dotNetTypeRef.getGenericExtractor(resolve,entrance);
        ResolveState newState=ResolveState.initial().put(EXTRACTOR_KEY,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
    if (walkParent) {
      if (!walkChildrenImpl(processor,entrance.getParent(),walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetGenericParameter) {
    DotNetGenericParameterList parameterList=(DotNetGenericParameterList)entrance.getParent();
    PsiElement parent=parameterList.getParent();
    if (!(parent instanceof CSharpGenericConstraintOwner)) {
      return true;
    }
    val constraint=CSharpGenericConstraintOwnerUtil.forParameter((CSharpGenericConstraintOwner)parent,(DotNetGenericParameter)entrance);
    if (constraint == null) {
      return true;
    }
    val superTypes=new SmartList<DotNetTypeRef>();
    for (    CSharpGenericConstraintValue value : constraint.getGenericConstraintValues()) {
      if (value instanceof CSharpGenericConstraintTypeValue) {
        DotNetTypeRef typeRef=((CSharpGenericConstraintTypeValue)value).toTypeRef();
        superTypes.add(typeRef);
      }
 else       if (value instanceof CSharpGenericConstraintKeywordValue) {
        if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.STRUCT_KEYWORD) {
          superTypes.add(new DotNetTypeRefByQName(DotNetTypes.System_ValueType,CSharpTransform.INSTANCE));
        }
 else         if (((CSharpGenericConstraintKeywordValue)value).getKeywordElementType() == CSharpTokens.CLASS_KEYWORD) {
          superTypes.add(CSharpNativeTypeRef.OBJECT);
        }
      }
    }
    for (    DotNetTypeRef dotNetTypeRef : superTypes) {
      PsiElement resolve=dotNetTypeRef.resolve(entrance);
      if (resolve != null && resolve != entrance) {
        DotNetGenericExtractor genericExtractor=dotNetTypeRef.getGenericExtractor(resolve,entrance);
        ResolveState newState=ResolveState.initial().put(EXTRACTOR_KEY,genericExtractor);
        if (!walkChildrenImpl(processor,resolve,false,maxScope,newState,typeVisited)) {
          return false;
        }
      }
    }
  }
 else   if (entrance instanceof CSharpNamespaceAsElement) {
    if (!entrance.processDeclarations(processor,state,maxScope,entrance)) {
      return false;
    }
    String pQName=CSharpNamespaceHelper.getNamespaceForIndexing(((CSharpNamespaceAsElement)entrance).getPresentableParentQName());
    if (Comparing.equal(pQName,CSharpNamespaceHelper.ROOT)) {
      return true;
    }
    if (walkParent) {
      CSharpNamespaceAsElement parentNamespace=new CSharpNamespaceAsElement(entrance.getProject(),pQName,entrance.getResolveScope());
      if (!walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof DotNetNamespaceDeclaration) {
    String presentableQName=((DotNetNamespaceDeclaration)entrance).getPresentableQName();
    if (presentableQName == null) {
      return true;
    }
    if (walkParent) {
      CSharpNamespaceAsElement parentNamespace=new CSharpNamespaceAsElement(entrance.getProject(),presentableQName,entrance.getResolveScope());
      if (!walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited)) {
        return false;
      }
    }
  }
 else   if (entrance instanceof PsiFile) {
    CSharpNamespaceAsElement parentNamespace=new CSharpNamespaceAsElement(entrance.getProject(),CSharpNamespaceHelper.ROOT,entrance.getResolveScope());
    return walkChildrenImpl(processor,parentNamespace,walkParent,maxScope,state,typeVisited);
  }
  PsiFile psiFile=state.get(CONTAINS_FILE_KEY);
  return psiFile == null || walkChildrenImpl(processor,psiFile,walkParent,maxScope,state,typeVisited);
}",0.966773645459694
130534,"private static boolean processTypeDeclaration(@NotNull final PsiScopeProcessor processor,DotNetTypeDeclaration typeDeclaration,ResolveState state,List<DotNetTypeRef> supers,DotNetGenericExtractor genericExtractor,Set<String> typeVisited){
  String vmName=DotNetVirtualMachineUtil.toVMQualifiedName(typeDeclaration);
  if (typeVisited.contains(vmName)) {
    return true;
  }
 else {
    typeVisited.add(vmName);
  }
  for (  DotNetNamedElement namedElement : typeDeclaration.getMembers()) {
    if (!checkConditionKey(processor,namedElement)) {
      continue;
    }
    if (namedElement instanceof DotNetVirtualImplementOwner && ((DotNetVirtualImplementOwner)namedElement).getTypeRefForImplement() != DotNetTypeRef.ERROR_TYPE) {
      continue;
    }
    DotNetNamedElement extracted=GenericUnwrapTool.extract(namedElement,genericExtractor);
    if (!processor.execute(extracted,state)) {
      return false;
    }
  }
  Collections.addAll(supers,typeDeclaration.getExtendTypeRefs());
  return true;
}","private static boolean processTypeDeclaration(@NotNull final PsiScopeProcessor processor,DotNetTypeDeclaration typeDeclaration,ResolveState state,List<DotNetTypeRef> supers,DotNetGenericExtractor genericExtractor,@Nullable Set<String> typeVisited){
  if (typeVisited != null) {
    String vmName=DotNetVirtualMachineUtil.toVMQualifiedName(typeDeclaration);
    if (typeVisited.contains(vmName)) {
      return true;
    }
 else {
      typeVisited.add(vmName);
    }
  }
  for (  DotNetNamedElement namedElement : typeDeclaration.getMembers()) {
    if (!checkConditionKey(processor,namedElement)) {
      continue;
    }
    if (namedElement instanceof DotNetVirtualImplementOwner && ((DotNetVirtualImplementOwner)namedElement).getTypeRefForImplement() != DotNetTypeRef.ERROR_TYPE) {
      continue;
    }
    DotNetNamedElement extracted=GenericUnwrapTool.extract(namedElement,genericExtractor);
    if (!processor.execute(extracted,state)) {
      return false;
    }
  }
  Collections.addAll(supers,typeDeclaration.getExtendTypeRefs());
  return true;
}",0.9732880038853812
130535,"@Override public void visitMethodDeclaration(CSharpMethodDeclaration declaration){
  StringBuilder builder=new StringBuilder();
  processModifierList(builder,declaration);
  if (declaration.isDelegate()) {
    builder.append(""String_Node_Str"");
  }
  builder.append(declaration.getReturnTypeRef().getQualifiedText());
  builder.append(""String_Node_Str"");
  if (declaration.isOperator()) {
    builder.append(""String_Node_Str"");
  }
  builder.append(declaration.getName());
  builder.append(""String_Node_Str"");
  StubBlockUtil.join(builder,declaration.getParameters(),new PairFunction<StringBuilder,DotNetParameter,Void>(){
    @Nullable @Override public Void fun(    StringBuilder t,    DotNetParameter v){
      processModifierList(t,v);
      t.append(v.toTypeRef(false).getQualifiedText());
      t.append(""String_Node_Str"");
      t.append(v.getName());
      return null;
    }
  }
,""String_Node_Str"");
  builder.append(""String_Node_Str"");
  boolean canHaveBody=!declaration.hasModifier(CSharpModifier.ABSTRACT);
  if (canHaveBody) {
    builder.append(""String_Node_Str"");
  }
 else {
    builder.append(""String_Node_Str"");
  }
  myBlocks.add(new LineStubBlock(builder));
}","@Override public void visitMethodDeclaration(CSharpMethodDeclaration declaration){
  StringBuilder builder=new StringBuilder();
  processModifierList(builder,declaration);
  if (declaration.isDelegate()) {
    builder.append(""String_Node_Str"");
  }
  builder.append(declaration.getReturnTypeRef().getQualifiedText());
  builder.append(""String_Node_Str"");
  if (declaration.isOperator()) {
    builder.append(""String_Node_Str"");
  }
  builder.append(declaration.getName());
  builder.append(""String_Node_Str"");
  StubBlockUtil.join(builder,declaration.getParameters(),new PairFunction<StringBuilder,DotNetParameter,Void>(){
    @Nullable @Override public Void fun(    StringBuilder t,    DotNetParameter v){
      DotNetTypeRef typeRef=v.toTypeRef(false);
      t.append(typeRef.getQualifiedText());
      t.append(""String_Node_Str"");
      t.append(v.getName());
      return null;
    }
  }
,""String_Node_Str"");
  builder.append(""String_Node_Str"");
  boolean canHaveBody=!declaration.hasModifier(CSharpModifier.ABSTRACT);
  if (canHaveBody) {
    builder.append(""String_Node_Str"");
  }
 else {
    builder.append(""String_Node_Str"");
  }
  myBlocks.add(new LineStubBlock(builder));
}",0.9597628123676408
130536,"@Nullable @Override public Void fun(StringBuilder t,DotNetParameter v){
  processModifierList(t,v);
  t.append(v.toTypeRef(false).getQualifiedText());
  t.append(""String_Node_Str"");
  t.append(v.getName());
  return null;
}","@Nullable @Override public Void fun(StringBuilder t,DotNetParameter v){
  DotNetTypeRef typeRef=v.toTypeRef(false);
  t.append(typeRef.getQualifiedText());
  t.append(""String_Node_Str"");
  t.append(v.getName());
  return null;
}",0.7494456762749445
130537,"@Nullable @Override public PsiElement resolve(){
  ResolveResult[] resolveResults=CSharpReferenceExpressionImpl.multiResolve0(CSharpReferenceExpressionImpl.ResolveToKind.ARRAY_METHOD,this,this);
  for (  ResolveResult resolveResult : resolveResults) {
    if (resolveResult.isValidResult()) {
      return resolveResult.getElement();
    }
  }
  return null;
}","@Nullable @Override public PsiElement resolve(){
  ResolveResultWithWeight[] resolveResults=CSharpReferenceExpressionImpl.multiResolve0(CSharpReferenceExpressionImpl.ResolveToKind.ARRAY_METHOD,this,this);
  for (  ResolveResultWithWeight resolveResult : resolveResults) {
    if (resolveResult.isGoodResult()) {
      return resolveResult.getElement();
    }
  }
  return null;
}",0.9634641407307172
130538,"@NotNull @Override public DotNetTypeRef toTypeRef(boolean resolveFromParent){
  DotNetType type=getNewType();
  if (type == null) {
    CSharpFieldOrPropertySetBlock fieldOrPropertySetBlock=getFieldOrPropertySetBlock();
    if (fieldOrPropertySetBlock == null) {
      return DotNetTypeRef.ERROR_TYPE;
    }
    return new CSharpAnonymTypeRef(getContainingFile(),fieldOrPropertySetBlock.getSets());
  }
 else {
    DotNetTypeRef typeRef=null;
    if (canResolve()) {
      if (type instanceof DotNetReferenceType) {
        DotNetReferenceExpression referenceExpression=((DotNetReferenceType)type).getReferenceExpression();
        if (referenceExpression instanceof CSharpReferenceExpression) {
          typeRef=((CSharpReferenceExpressionImpl)referenceExpression).toTypeRef(CSharpReferenceExpressionImpl.ResolveToKind.TYPE_OR_GENERIC_PARAMETER_OR_DELEGATE_METHOD,resolveFromParent);
        }
 else {
          typeRef=DotNetTypeRef.ERROR_TYPE;
        }
      }
 else {
        typeRef=type.toTypeRef();
      }
    }
 else {
      typeRef=type.toTypeRef();
    }
    for (    CSharpNewArrayLengthImpl length : getNewArrayLengths()) {
      typeRef=new CSharpArrayTypeRef(typeRef,length.getDimensionSize());
    }
    return typeRef;
  }
}","@NotNull @Override public DotNetTypeRef toTypeRef(boolean resolveFromParent){
  DotNetType type=getNewType();
  if (type == null) {
    CSharpFieldOrPropertySetBlock fieldOrPropertySetBlock=getFieldOrPropertySetBlock();
    if (fieldOrPropertySetBlock == null) {
      return DotNetTypeRef.ERROR_TYPE;
    }
    return new CSharpAnonymTypeRef(getContainingFile(),fieldOrPropertySetBlock.getSets());
  }
 else {
    DotNetTypeRef typeRef=null;
    if (canResolve()) {
      DotNetType[] arguments=DotNetType.EMPTY_ARRAY;
      if (type instanceof DotNetTypeWithTypeArguments) {
        arguments=((DotNetTypeWithTypeArguments)type).getArguments();
        type=((DotNetTypeWithTypeArguments)type).getInnerType();
      }
      if (type instanceof DotNetReferenceType) {
        DotNetReferenceExpression referenceExpression=((DotNetReferenceType)type).getReferenceExpression();
        if (referenceExpression instanceof CSharpReferenceExpression) {
          typeRef=((CSharpReferenceExpressionImpl)referenceExpression).toTypeRef(CSharpReferenceExpressionImpl.ResolveToKind.TYPE_OR_GENERIC_PARAMETER_OR_DELEGATE_METHOD,resolveFromParent);
        }
 else {
          typeRef=DotNetTypeRef.ERROR_TYPE;
        }
      }
 else {
        typeRef=type.toTypeRef();
      }
      if (arguments.length != 0) {
        typeRef=new DotNetGenericWrapperTypeRef(typeRef,DotNetTypeRefUtil.toArray(arguments));
      }
    }
 else {
      typeRef=type.toTypeRef();
    }
    for (    CSharpNewArrayLengthImpl length : getNewArrayLengths()) {
      typeRef=new CSharpArrayTypeRef(typeRef,length.getDimensionSize());
    }
    return typeRef;
  }
}",0.8640945429266598
130539,"@NotNull public ResolveToKind kind(){
  PsiElement tempElement=getParent();
  if (tempElement instanceof CSharpGenericConstraintImpl) {
    DotNetGenericParameterListOwner parameterListOwner=PsiTreeUtil.getParentOfType(this,DotNetGenericParameterListOwner.class);
    if (parameterListOwner == null) {
      return ResolveToKind.ANY_MEMBER;
    }
    return ResolveToKind.TYPE_PARAMETER_FROM_PARENT;
  }
 else   if (tempElement instanceof CSharpNamespaceDeclarationImpl) {
    return ResolveToKind.SOFT_NAMESPACE;
  }
 else   if (tempElement instanceof DotNetReferenceType) {
    PsiElement parentOfParent=tempElement.getParent();
    if (parentOfParent instanceof CSharpMethodCallParameterListOwner && ((CSharpMethodCallParameterListOwner)parentOfParent).canResolve()) {
      return ResolveToKind.CONSTRUCTOR;
    }
    return ResolveToKind.TYPE_OR_GENERIC_PARAMETER_OR_DELEGATE_METHOD;
  }
 else   if (tempElement instanceof CSharpUsingNamespaceStatementImpl) {
    return ResolveToKind.NAMESPACE;
  }
 else   if (tempElement instanceof CSharpConstructorSuperCallImpl) {
    return ResolveToKind.CONSTRUCTOR;
  }
 else   if (tempElement instanceof CSharpAttributeImpl) {
    return ResolveToKind.ATTRIBUTE;
  }
 else   if (tempElement instanceof CSharpFieldOrPropertySet) {
    if (((CSharpFieldOrPropertySet)tempElement).getNameReferenceExpression() == this) {
      return ResolveToKind.FIELD_OR_PROPERTY;
    }
  }
 else   if (tempElement instanceof CSharpReferenceExpressionImpl) {
    CSharpNamespaceDeclarationImpl netNamespaceDeclaration=PsiTreeUtil.getParentOfType(this,CSharpNamespaceDeclarationImpl.class);
    if (netNamespaceDeclaration != null) {
      DotNetReferenceExpression namespaceReference=netNamespaceDeclaration.getNamespaceReference();
      if (namespaceReference != null && PsiTreeUtil.isAncestor(namespaceReference,this,false)) {
        return ResolveToKind.SOFT_NAMESPACE;
      }
    }
    if (PsiTreeUtil.getParentOfType(this,CSharpUsingNamespaceStatementImpl.class) != null) {
      return ResolveToKind.NAMESPACE;
    }
    if (PsiTreeUtil.getParentOfType(this,DotNetReferenceType.class) != null) {
      return ResolveToKind.NAMESPACE;
    }
  }
 else   if (tempElement instanceof CSharpMethodCallExpressionImpl) {
    return ResolveToKind.METHOD;
  }
 else   if (tempElement instanceof CSharpGotoStatementImpl) {
    return ResolveToKind.LABEL;
  }
  tempElement=findChildByType(CSharpTokenSets.NATIVE_TYPES);
  if (tempElement != null) {
    return ResolveToKind.NATIVE_TYPE_WRAPPER;
  }
  tempElement=findChildByType(CSharpTokens.THIS_KEYWORD);
  if (tempElement != null) {
    return ResolveToKind.THIS;
  }
  tempElement=findChildByType(CSharpTokens.BASE_KEYWORD);
  if (tempElement != null) {
    return ResolveToKind.BASE;
  }
  return ResolveToKind.ANY_MEMBER;
}","@NotNull public ResolveToKind kind(){
  PsiElement tempElement=getParent();
  if (tempElement instanceof CSharpGenericConstraintImpl) {
    DotNetGenericParameterListOwner parameterListOwner=PsiTreeUtil.getParentOfType(this,DotNetGenericParameterListOwner.class);
    if (parameterListOwner == null) {
      return ResolveToKind.ANY_MEMBER;
    }
    return ResolveToKind.TYPE_PARAMETER_FROM_PARENT;
  }
 else   if (tempElement instanceof CSharpNamespaceDeclarationImpl) {
    return ResolveToKind.SOFT_NAMESPACE;
  }
 else   if (tempElement instanceof DotNetReferenceType) {
    PsiElement parentOfParent=tempElement.getParent();
    if (parentOfParent instanceof DotNetTypeWithTypeArguments) {
      parentOfParent=parentOfParent.getParent();
    }
    if (parentOfParent instanceof CSharpMethodCallParameterListOwner && ((CSharpMethodCallParameterListOwner)parentOfParent).canResolve()) {
      return ResolveToKind.CONSTRUCTOR;
    }
    return ResolveToKind.TYPE_OR_GENERIC_PARAMETER_OR_DELEGATE_METHOD;
  }
 else   if (tempElement instanceof CSharpUsingNamespaceStatementImpl) {
    return ResolveToKind.NAMESPACE;
  }
 else   if (tempElement instanceof CSharpConstructorSuperCallImpl) {
    return ResolveToKind.CONSTRUCTOR;
  }
 else   if (tempElement instanceof CSharpAttributeImpl) {
    return ResolveToKind.ATTRIBUTE;
  }
 else   if (tempElement instanceof CSharpFieldOrPropertySet) {
    if (((CSharpFieldOrPropertySet)tempElement).getNameReferenceExpression() == this) {
      return ResolveToKind.FIELD_OR_PROPERTY;
    }
  }
 else   if (tempElement instanceof CSharpReferenceExpressionImpl) {
    CSharpNamespaceDeclarationImpl netNamespaceDeclaration=PsiTreeUtil.getParentOfType(this,CSharpNamespaceDeclarationImpl.class);
    if (netNamespaceDeclaration != null) {
      DotNetReferenceExpression namespaceReference=netNamespaceDeclaration.getNamespaceReference();
      if (namespaceReference != null && PsiTreeUtil.isAncestor(namespaceReference,this,false)) {
        return ResolveToKind.SOFT_NAMESPACE;
      }
    }
    if (PsiTreeUtil.getParentOfType(this,CSharpUsingNamespaceStatementImpl.class) != null) {
      return ResolveToKind.NAMESPACE;
    }
    if (PsiTreeUtil.getParentOfType(this,DotNetReferenceType.class) != null) {
      return ResolveToKind.NAMESPACE;
    }
  }
 else   if (tempElement instanceof CSharpMethodCallExpressionImpl) {
    return ResolveToKind.METHOD;
  }
 else   if (tempElement instanceof CSharpGotoStatementImpl) {
    return ResolveToKind.LABEL;
  }
  tempElement=findChildByType(CSharpTokenSets.NATIVE_TYPES);
  if (tempElement != null) {
    return ResolveToKind.NATIVE_TYPE_WRAPPER;
  }
  tempElement=findChildByType(CSharpTokens.THIS_KEYWORD);
  if (tempElement != null) {
    return ResolveToKind.THIS;
  }
  tempElement=findChildByType(CSharpTokens.BASE_KEYWORD);
  if (tempElement != null) {
    return ResolveToKind.BASE;
  }
  return ResolveToKind.ANY_MEMBER;
}",0.9790722009068712
130540,"@Nullable public static HighlightInfo highlightNamed(@NotNull HighlightInfoHolder holder,@Nullable PsiElement element,@Nullable PsiElement target){
  if (target == null) {
    return null;
  }
  IElementType elementType=target.getNode().getElementType();
  if (CSharpTokenSets.KEYWORDS.contains(elementType)) {
    return null;
  }
  TextAttributesKey key=null;
  if (element instanceof CSharpTypeDeclaration) {
    if (DotNetInheritUtil.isParent(DotNetTypes.System_Attribute,(DotNetTypeDeclaration)element,true)) {
      key=CSharpHighlightKey.ATTRIBUTE_NAME;
    }
 else {
      key=CSharpHighlightKey.CLASS_NAME;
    }
  }
 else   if (element instanceof DotNetConstructorDeclaration) {
    PsiElement parent=element.getParent();
    highlightNamed(holder,parent,target);
    return null;
  }
 else   if (element instanceof DotNetGenericParameter || element instanceof CSharpTypeDefStatementImpl) {
    key=CSharpHighlightKey.GENERIC_PARAMETER_NAME;
  }
 else   if (element instanceof DotNetParameter || element instanceof CSharpLambdaParameter) {
    key=CSharpHighlightKey.PARAMETER;
  }
 else   if (element instanceof DotNetMethodDeclaration) {
    if (CSharpMethodImplUtil.isExtensionWrapper(element)) {
      key=CSharpHighlightKey.EXTENSION_METHOD;
    }
 else {
      key=((DotNetModifierListOwner)element).hasModifier(CSharpModifier.STATIC) ? CSharpHighlightKey.STATIC_METHOD : CSharpHighlightKey.INSTANCE_METHOD;
    }
  }
 else   if (element instanceof CSharpMacroDefine) {
    key=CSharpHighlightKey.MACRO_VARIABLE;
  }
 else   if (element instanceof CSharpLocalVariable) {
    key=DefaultLanguageHighlighterColors.LOCAL_VARIABLE;
  }
 else   if (element instanceof DotNetVariable) {
    key=((DotNetVariable)element).hasModifier(CSharpModifier.STATIC) ? CSharpHighlightKey.STATIC_FIELD : CSharpHighlightKey.INSTANCE_FIELD;
  }
 else {
    return null;
  }
  HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(target).textAttributes(key).create();
  holder.add(info);
  if (element instanceof DotNetModifierListOwner && DotNetAttributeUtil.hasAttribute((DotNetModifierListOwner)element,DotNetTypes.System_ObsoleteAttribute)) {
    holder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(target).textAttributes(CodeInsightColors.DEPRECATED_ATTRIBUTES).create());
  }
  if (CSharpHighlightUtil.isGeneratedElement(element)) {
    holder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(target).textAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT).create());
  }
  return info;
}","@Nullable public static HighlightInfo highlightNamed(@NotNull HighlightInfoHolder holder,@Nullable PsiElement element,@Nullable PsiElement target){
  if (target == null || element == null) {
    return null;
  }
  IElementType elementType=target.getNode().getElementType();
  if (CSharpTokenSets.KEYWORDS.contains(elementType)) {
    return null;
  }
  TextAttributesKey defaultTextAttributeKey=getDefaultTextAttributeKey(element);
  if (defaultTextAttributeKey == null) {
    return null;
  }
  HighlightInfo info=HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(target).textAttributes(defaultTextAttributeKey).create();
  holder.add(info);
  if (element instanceof DotNetModifierListOwner && DotNetAttributeUtil.hasAttribute((DotNetModifierListOwner)element,DotNetTypes.System_ObsoleteAttribute)) {
    holder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(target).textAttributes(CodeInsightColors.DEPRECATED_ATTRIBUTES).create());
  }
  if (CSharpHighlightUtil.isGeneratedElement(element)) {
    holder.add(HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(target).textAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT).create());
  }
  return info;
}",0.5757255936675462
130541,"/** 
 * Remember this eats up the regex char!
 * @param source
 * @param sink
 * @param regex
 */
final void readUntil(StringBuffer source,StringBuffer sink,String regex){
  this.readBefore(source,sink,regex);
  this.extractChar(source,sink);
}","/** 
 * Remember this eats up the regex char!
 * @param source
 * @param sink
 * @param regex
 */
final void readUntil(StringBuffer source,StringBuffer sink,String regex){
  this.readBefore(source,sink,regex);
  if (this.peek(source) != '""') {
    this.extractChar(source,sink);
  }
}",0.9242424242424242
130542,"/** 
 * Copy constructor.
 * @param copy CodeBlock to copy.
 */
public CodeBlock(CodeBlock<T> copy){
  this.parent=copy.parent;
  this.prototype=copy.prototype;
  this.addStatements(copy.statements);
  for (  CodeBlock<T> child : copy.getChildren()) {
    this.addChild(new CodeBlock<T>(child));
  }
}","/** 
 * Copy constructor.
 * @param copy CodeBlock to copy.
 */
public CodeBlock(CodeBlock<T> copy){
  this();
  this.parent=copy.parent;
  this.prototype=copy.prototype;
  this.addStatements(copy.statements);
  for (  CodeBlock<T> child : copy.getChildren()) {
    this.addChild(new CodeBlock<T>(child));
  }
}",0.9836601307189542
130543,"@Override public boolean newLineBrace(){
  int onLineBrace=0;
  int newLineBrace=0;
  for (  String s : this.code.split(""String_Node_Str"")) {
    if (s.charAt(s.length() - 1) == '\n') {
      newLineBrace++;
    }
 else {
      onLineBrace++;
    }
  }
  return newLineBrace >= onLineBrace;
}","@Override public boolean newLineBrace(){
  int onLineBrace=0;
  int newLineBrace=0;
  for (  String s : this.code.split(""String_Node_Str"")) {
    if (s.length() == 0) {
      continue;
    }
    if (s.charAt(s.length() - 1) == '\n') {
      newLineBrace++;
    }
 else {
      onLineBrace++;
    }
  }
  return newLineBrace >= onLineBrace;
}",0.9225908372827804
130544,"@Override String readNextLiteral(StringBuffer source){
  StringBuffer sink=new StringBuffer();
  if (source.charAt(0) == '""') {
    this.extractChar(source,sink);
    char prev='\0';
    char next;
    while (source.length() > 0) {
      next=source.charAt(0);
      this.extractChar(source,sink);
      if (prev != '\\' && next == '""') {
        break;
      }
    }
  }
 else   if (source.charAt(0) == '\'') {
    if (source.charAt(1) == '\\') {
      this.extractMultipleChars(source,sink,4);
    }
 else {
      this.extractMultipleChars(source,sink,3);
    }
  }
 else {
    this.readBefore(source,sink,""String_Node_Str"");
    if (source.charAt(0) == 'l' || source.charAt(0) == 'L') {
      this.extractChar(source,sink);
    }
 else     if (source.charAt(0) == '.') {
      this.extractChar(source,sink);
      this.readBefore(source,sink,""String_Node_Str"");
      if (source.charAt(0) == 'f' || source.charAt(0) == 'F') {
        this.extractChar(source,sink);
      }
    }
  }
  return sink.toString();
}","@Override String readNextLiteral(StringBuffer source){
  StringBuffer sink=new StringBuffer();
  if (source.charAt(0) == '""') {
    this.extractChar(source,sink);
    char prev='\0';
    char next;
    while (source.length() > 0) {
      next=source.charAt(0);
      this.extractChar(source,sink);
      if (prev != '\\' && next == '""') {
        break;
      }
      prev=next;
    }
  }
 else   if (source.charAt(0) == '\'') {
    if (source.charAt(1) == '\\') {
      this.extractMultipleChars(source,sink,4);
    }
 else {
      this.extractMultipleChars(source,sink,3);
    }
  }
 else {
    this.readBefore(source,sink,""String_Node_Str"");
    if (source.charAt(0) == 'l' || source.charAt(0) == 'L') {
      this.extractChar(source,sink);
    }
 else     if (source.charAt(0) == '.') {
      this.extractChar(source,sink);
      this.readBefore(source,sink,""String_Node_Str"");
      if (source.charAt(0) == 'f' || source.charAt(0) == 'F') {
        this.extractChar(source,sink);
      }
    }
  }
  return sink.toString();
}",0.9916789035731768
130545,"public static String getInstanceData(FeatureSet f,Set<String> authors){
  StringBuffer x=new StringBuffer();
  x.append(f.numFunctions() + ""String_Node_Str"");
  x.append(f.length() + ""String_Node_Str"");
  x.append(f.numTokens() + ""String_Node_Str"");
  x.append(f.numComments() + ""String_Node_Str"");
  x.append(f.getLiterals().size() + ""String_Node_Str"");
  x.append(f.getReservedWords().size() + ""String_Node_Str"");
  x.append(f.avgLineLength() + ""String_Node_Str"");
  x.append(f.numEmptyLines() + ""String_Node_Str"");
  x.append(f.whiteSpaceRatio() + ""String_Node_Str"");
  x.append(f.avgParamsPerFunction() + ""String_Node_Str"");
  x.append(getAuthorName((AbstractExtractor)f) + ""String_Node_Str"");
  authors.add(getAuthorName((AbstractExtractor)f));
  return x.toString();
}","public String getInstanceData(FeatureSet f,Set<String> authors){
  StringBuffer x=new StringBuffer();
  appendAttributes(f,x);
  x.append(getAuthorName((AbstractExtractor)f) + ""String_Node_Str"");
  authors.add(getAuthorName((AbstractExtractor)f));
  return x.toString();
}",0.2982791586998088
130546,"public static void makeARFFHeader(String targetPath,Set<String> authors){
  List<String> allLines=new LinkedList<String>();
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  Iterator<String> author=authors.iterator();
  while (author.hasNext()) {
    allLines.add(author.next());
    if (author.hasNext()) {
      allLines.add(""String_Node_Str"");
    }
  }
  allLines.add(""String_Node_Str"");
  Util.writeFile(allLines,targetPath,false);
}","public void makeARFFHeader(String targetPath,Set<String> authors){
  List<String> allLines=new LinkedList<String>();
  allLines.add(""String_Node_Str"");
  arffAttributes(allLines);
  allLines.add(""String_Node_Str"");
  Iterator<String> author=authors.iterator();
  while (author.hasNext()) {
    allLines.add(author.next());
    if (author.hasNext()) {
      allLines.add(""String_Node_Str"");
    }
  }
  allLines.add(""String_Node_Str"");
  Util.writeFile(allLines,targetPath,false);
}",0.7110766847405112
130547,"public static double stdDev(List<Integer> list){
  throw new UnsupportedOperationException();
}","public static double stdDev(List<Integer> list){
  return Math.sqrt(variance(list));
}",0.7292817679558011
130548,"public static void makeARFF(List<File> files,String targetPath){
  Set<String> authors=new HashSet<>();
  List<String> allLines=new LinkedList<String>();
  for (  File f : files) {
    System.out.println(f.getAbsolutePath());
    try {
      allLines.add(getInstanceData((FeatureSet)getExtractor(f),authors));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  makeARFFHeader(targetPath,authors);
  Util.writeFile(allLines,targetPath,true);
  System.out.println(authors.size() + ""String_Node_Str"");
  System.out.println(files.size() + ""String_Node_Str"");
}","public void makeARFF(List<File> files,String targetPath){
  Set<String> authors=new HashSet<>();
  List<String> allLines=new LinkedList<String>();
  for (  File f : files) {
    System.out.println(f.getAbsolutePath());
    try {
      allLines.add(getInstanceData((FeatureSet)getExtractor(f),authors));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  makeARFFHeader(targetPath,authors);
  Util.writeFile(allLines,targetPath,true);
  System.out.println(authors.size() + ""String_Node_Str"");
  System.out.println(files.size() + ""String_Node_Str"");
}",0.9939183318853172
130549,"@Override public Map<WhiteSpace,Integer> getWhiteSpace(){
  MultiSet<WhiteSpace> whitespace=new MultiSet<WhiteSpace>();
  for (int i=0; i < this.code.length(); i++) {
    if (this.code.charAt(i) == '\n') {
      whitespace.add(WhiteSpace.newLine);
    }
 else     if (this.code.charAt(i) == '\t') {
      whitespace.add(WhiteSpace.tab);
    }
 else     if (this.code.charAt(i) == ' ') {
      whitespace.add(WhiteSpace.space);
    }
  }
  return whitespace;
}","@Override public Map<WhiteSpace,Integer> getWhiteSpace(){
  MultiSet<WhiteSpace> whitespace=new MultiSet<WhiteSpace>();
  whitespace.put(WhiteSpace.newLine,0);
  whitespace.put(WhiteSpace.tab,0);
  whitespace.put(WhiteSpace.space,0);
  for (int i=0; i < this.code.length(); i++) {
    if (this.code.charAt(i) == '\n') {
      whitespace.add(WhiteSpace.newLine);
    }
 else     if (this.code.charAt(i) == '\t') {
      whitespace.add(WhiteSpace.tab);
    }
 else     if (this.code.charAt(i) == ' ') {
      whitespace.add(WhiteSpace.space);
    }
  }
  return whitespace;
}",0.8895348837209303
130550,"@Override public Map<ControlStatement,Integer> getControlStructures(){
  MultiSet<ControlStatement> myControls=new MultiSet<>();
  for (  String s : this.blocks.getPrototypesRecursively()) {
    if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.elifStatement);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.elseStatement);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.ifStatement);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.switchStatement);
    }
  }
  myControls.put(ControlStatement.ternaryOperator,this.code.split(""String_Node_Str"").length - 1);
  return myControls;
}","@Override public Map<ControlStatement,Integer> getControlStructures(){
  MultiSet<ControlStatement> myControls=new MultiSet<>();
  myControls.put(ControlStatement.elifStatement,0);
  myControls.put(ControlStatement.elseStatement,0);
  myControls.put(ControlStatement.ifStatement,0);
  myControls.put(ControlStatement.switchStatement,0);
  myControls.put(ControlStatement.ternaryOperator,0);
  for (  String s : this.blocks.getPrototypesRecursively()) {
    if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.elifStatement);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.elseStatement);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.ifStatement);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myControls.add(ControlStatement.switchStatement);
    }
  }
  myControls.put(ControlStatement.ternaryOperator,this.code.split(""String_Node_Str"").length - 1);
  return myControls;
}",0.8483796296296297
130551,"@Override public Map<Loops,Integer> getLoops(){
  MultiSet<Loops> myLoops=new MultiSet<>();
  for (  String s : this.blocks.getPrototypesRecursively()) {
    if (s.matches(""String_Node_Str"")) {
      myLoops.add(Loops.doWhileLoop);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myLoops.add(Loops.forLoop);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myLoops.add(Loops.whileLoop);
    }
  }
  return myLoops;
}","@Override public Map<Loops,Integer> getLoops(){
  MultiSet<Loops> myLoops=new MultiSet<>();
  myLoops.put(Loops.doWhileLoop,0);
  myLoops.put(Loops.forLoop,0);
  myLoops.put(Loops.whileLoop,0);
  for (  String s : this.blocks.getPrototypesRecursively()) {
    if (s.matches(""String_Node_Str"")) {
      myLoops.add(Loops.doWhileLoop);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myLoops.add(Loops.forLoop);
    }
 else     if (s.matches(""String_Node_Str"")) {
      myLoops.add(Loops.whileLoop);
    }
  }
  return myLoops;
}",0.8950617283950617
130552,"public AbstractExtractor(File program) throws IOException {
  this.setTokenDelimiter();
  this.file=program;
  BufferedReader reader=new BufferedReader(new FileReader(program));
  StringBuffer source=new StringBuffer();
  char nextChar;
  while (reader.ready()) {
    nextChar=(char)reader.read();
    source.append(nextChar);
  }
  reader.close();
  this.literals=new MultiSet<String>();
  this.commentList=new LinkedList<>();
  StringBuffer sink=new StringBuffer();
  while (source.length() > 0) {
    if (matchesLiteral(source)) {
      this.literals.add(readNextLiteral(source));
    }
 else     if (matchesComment(source)) {
      this.commentList.add(readNextComment(source));
    }
 else {
      readUntilNextToken(source,sink);
    }
  }
  source=sink;
  sink=new StringBuffer();
  this.blocks=new CodeBlock<String>(this.file.getName());
  CodeBlock<String> currentBlock=blocks;
  while (source.length() > 0) {
    if (isPrototype(source)) {
      currentBlock.addStatements(breakIntoStmts(sink));
      sink=new StringBuffer();
      CodeBlock<String> temp=new CodeBlock<String>(extractPrototype(source));
      currentBlock.addChild(temp);
      currentBlock=temp;
    }
 else     if (isBlockEnd(source,sink)) {
      currentBlock.addStatements(breakIntoStmts(sink));
      sink=new StringBuffer();
      currentBlock=currentBlock.getParent();
    }
 else {
      readUntilNextToken(source,sink);
    }
  }
}","public AbstractExtractor(File program) throws IOException {
  setTokenDelimiter();
  this.file=program;
  BufferedReader reader=new BufferedReader(new FileReader(program));
  StringBuffer source=new StringBuffer();
  char nextChar;
  while (reader.ready()) {
    nextChar=(char)reader.read();
    source.append(nextChar);
  }
  reader.close();
  this.literals=new MultiSet<String>();
  this.commentList=new LinkedList<>();
  StringBuffer sink=new StringBuffer();
  while (source.length() > 0) {
    if (matchesLiteral(source)) {
      this.literals.add(readNextLiteral(source));
    }
 else     if (matchesComment(source)) {
      this.commentList.add(readNextComment(source));
    }
 else {
      readUntilNextToken(source,sink);
    }
  }
  source=sink;
  sink=new StringBuffer();
  code=source.toString();
  this.blocks=new CodeBlock<String>(this.file.getName());
  CodeBlock<String> currentBlock=blocks;
  while (source.length() > 0) {
    if (isPrototype(source)) {
      currentBlock.addStatements(breakIntoStmts(sink));
      sink=new StringBuffer();
      CodeBlock<String> temp=new CodeBlock<String>(extractPrototype(source));
      currentBlock.addChild(temp);
      currentBlock=temp;
    }
 else     if (isBlockEnd(source,sink)) {
      currentBlock.addStatements(breakIntoStmts(sink));
      sink=new StringBuffer();
      currentBlock=currentBlock.getParent();
    }
 else {
      readUntilNextToken(source,sink);
    }
  }
}",0.9891494574728736
130553,"String getTokenDelimiter(){
  return this.tokenDelimiter;
}","static String getTokenDelimiter(){
  return tokenDelimiter;
}",0.9
130554,"void setTokenDelimiter(){
}","static void setTokenDelimiter(){
}",0.8852459016393442
130555,"@Override boolean isPrototype(StringBuffer source){
  String s=source.toString();
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    return true;
  }
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    int braceIndex=s.indexOf('{');
    int semicolonIndex=s.indexOf(';');
    if (braceIndex == -1) {
      return false;
    }
    if (semicolonIndex == -1) {
      return true;
    }
    return braceIndex < semicolonIndex;
  }
  return false;
}","@Override boolean isPrototype(StringBuffer source){
  String s=source.toString();
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    return true;
  }
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    int braceIndex=s.indexOf('{');
    int semicolonIndex=s.indexOf(';');
    if (braceIndex == -1) {
      return false;
    }
    if (semicolonIndex == -1) {
      return true;
    }
    return braceIndex < semicolonIndex;
  }
  return false;
}",0.9351464435146444
130556,"@Override void readUntilNextToken(StringBuffer source,StringBuffer sink){
  this.readUntil(source,sink,this.tokenDelimiter);
}","@Override void readUntilNextToken(StringBuffer source,StringBuffer sink){
  this.readUntil(source,sink,tokenDelimiter);
}",0.979757085020243
130557,"public static void makeARFFHeader(String targetPath){
}","public static void makeARFFHeader(String targetPath,Set<String> authors){
  List<String> allLines=new LinkedList<String>();
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  allLines.add(""String_Node_Str"");
  Iterator<String> author=authors.iterator();
  while (author.hasNext()) {
    allLines.add(author.next());
    if (author.hasNext()) {
      allLines.add(""String_Node_Str"");
    }
  }
  allLines.add(""String_Node_Str"");
  Util.writeFile(allLines,targetPath,false);
}",0.1271676300578034
130558,"public static void makeARFF(List<File> files,String targetPath){
  makeARFFHeader(targetPath);
  for (  File f : files) {
    try {
      printInstanceData((FeatureSet)getExtractor(f),new File(targetPath));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public static void makeARFF(List<File> files,String targetPath){
  Set<String> authors=new HashSet<>();
  List<String> allLines=new LinkedList<String>();
  for (  File f : files) {
    System.out.println(f.getAbsolutePath());
    try {
      allLines.add(getInstanceData((FeatureSet)getExtractor(f),authors));
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  makeARFFHeader(targetPath,authors);
  Util.writeFile(allLines,targetPath,true);
  System.out.println(authors.size() + ""String_Node_Str"");
  System.out.println(files.size() + ""String_Node_Str"");
}",0.4633294528521536
130559,"/** 
 * Same as readUntil except it doesn't eat the regex.
 * @param source
 * @param sink
 * @param regex
 */
final void readBefore(StringBuffer source,StringBuffer sink,String regex){
  while (!source.substring(0,1).matches(regex)) {
    this.extractChar(source,sink);
  }
}","/** 
 * Same as readUntil except it doesn't eat the regex.
 * @param source
 * @param sink
 * @param regex
 */
final void readBefore(StringBuffer source,StringBuffer sink,String regex){
  while (source.length() > 1 && !source.substring(0,1).matches(regex)) {
    this.extractChar(source,sink);
  }
}",0.96
130560,"@Override boolean isBlockEnd(StringBuffer source,StringBuffer sink){
  if (source.charAt(0) == '}') {
    source.deleteCharAt(0);
    if (source.charAt(0) == ';') {
      source.deleteCharAt(0);
    }
 else     if (source.toString().matches(""String_Node_Str"")) {
      int semicolonIndex=source.indexOf(""String_Node_Str"");
      this.extractMultipleChars(source,sink,semicolonIndex + 1);
    }
    return true;
  }
  return false;
}","@Override boolean isBlockEnd(StringBuffer source,StringBuffer sink){
  if (source.charAt(0) == '}') {
    source.deleteCharAt(0);
    if (source.length() > 0 && source.charAt(0) == ';') {
      source.deleteCharAt(0);
    }
 else     if (source.length() > 0 && source.toString().matches(""String_Node_Str"")) {
      int semicolonIndex=source.indexOf(""String_Node_Str"");
      this.extractMultipleChars(source,sink,semicolonIndex + 1);
    }
    return true;
  }
  return false;
}",0.9494505494505494
130561,"protected static boolean isFunction(String s){
  return s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"");
}","protected static boolean isFunction(String s){
  return !(s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str""));
}",0.149812734082397
130562,"@Override String extractPrototype(StringBuffer source){
  StringBuffer sink=new StringBuffer();
  this.readUntil(source,sink,""String_Node_Str"");
  return sink.substring(0,sink.length() - 1);
}","@Override String extractPrototype(StringBuffer source){
  StringBuffer sink=new StringBuffer();
  String s=source.toString();
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    int lineIndex=s.indexOf(""String_Node_Str"");
    int braceIndex=s.indexOf(""String_Node_Str"");
    if (braceIndex == -1 || braceIndex < lineIndex || s.substring(lineIndex,braceIndex).matches(""String_Node_Str"")) {
      this.readBefore(source,sink,""String_Node_Str"");
      return sink.toString();
    }
  }
  this.readUntil(source,sink,""String_Node_Str"");
  return sink.substring(0,sink.length() - 1);
}",0.3772391991570074
130563,"@Override boolean isPrototype(StringBuffer source){
  String s=source.toString();
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    return true;
  }
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    int braceIndex=s.indexOf('{');
    int semicolonIndex=s.indexOf(';');
    if (braceIndex == -1) {
      return false;
    }
    if (semicolonIndex == -1) {
      return true;
    }
    return braceIndex < semicolonIndex;
  }
  return false;
}","@Override boolean isPrototype(StringBuffer source){
  String s=source.toString();
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")) {
    return true;
  }
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    return true;
  }
  if (s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"") || s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")|| s.matches(""String_Node_Str"")) {
    int braceIndex=s.indexOf('{');
    int semicolonIndex=s.indexOf(';');
    if (braceIndex == -1) {
      return false;
    }
    if (semicolonIndex == -1) {
      return true;
    }
    return braceIndex < semicolonIndex;
  }
  return false;
}",0.798887859128823
130564,"public void encode(final CharSequence s) throws IOException {
  if (s.length() <= 0)   return;
  final CharBuffer in=CharBuffer.wrap(s);
  if (s.length() > m_buffer.capacity())   m_buffer=ByteBuffer.allocate(s.length());
  reset();
  CoderResult cr=m_stringEncoder.encode(in,m_buffer,true);
  if (cr.isUnderflow())   cr=m_stringEncoder.flush(m_buffer);
  if (cr.isOverflow())   cr.throwException();
  m_buffer.flip();
}","public void encode(final CharSequence s) throws IOException {
  if (s.length() <= 0)   return;
  final CharBuffer in=CharBuffer.wrap(s);
  if (s.length() * 4 > m_buffer.capacity())   m_buffer=ByteBuffer.allocate(s.length() * 4);
  reset();
  CoderResult cr=m_stringEncoder.encode(in,m_buffer,true);
  if (cr.isUnderflow())   cr=m_stringEncoder.flush(m_buffer);
  if (cr.isOverflow())   cr.throwException();
  m_buffer.flip();
}",0.9905437352245864
130565,"@SuppressWarnings(""String_Node_Str"") private void writeObject(final Object o,final Type typ) throws IOException {
  if (o == null) {
    write(""String_Node_Str"");
    return;
  }
switch (typ.typeEnum()) {
case ENUM:
    write(o != null ? o.toString() : null);
  break;
case BOOL:
write((Boolean)o);
break;
case INT8:
write((Byte)o);
break;
case INT16:
write((Short)o);
break;
case INT32:
write((Integer)o);
break;
case INT64:
write((Long)o);
break;
case FLOAT32:
write((Float)o);
break;
case FLOAT64:
write((Double)o);
break;
case STRING:
write(quoteEscape((String)o));
break;
case ARRAY:
writeArray(o,(ArrayType)typ);
break;
case LIST:
writeList((List<Object>)o,(ListType)typ);
break;
case MAP:
writeMap((Map<Object,Object>)o,(MapType)typ);
break;
case UNKNOWN:
case CUSTOM:
writeMGenObject((MGenBase)o,(CustomType)typ);
break;
default :
throw new SerializationException(""String_Node_Str"");
}
}","@SuppressWarnings(""String_Node_Str"") private void writeObject(final Object o,final Type typ) throws IOException {
  if (o == null) {
    write(""String_Node_Str"");
    return;
  }
switch (typ.typeEnum()) {
case ENUM:
    write(quote(o.toString()));
  break;
case BOOL:
write((Boolean)o);
break;
case INT8:
write((Byte)o);
break;
case INT16:
write((Short)o);
break;
case INT32:
write((Integer)o);
break;
case INT64:
write((Long)o);
break;
case FLOAT32:
write((Float)o);
break;
case FLOAT64:
write((Double)o);
break;
case STRING:
write(quoteEscape((String)o));
break;
case ARRAY:
writeArray(o,(ArrayType)typ);
break;
case LIST:
writeList((List<Object>)o,(ListType)typ);
break;
case MAP:
writeMap((Map<Object,Object>)o,(MapType)typ);
break;
case UNKNOWN:
case CUSTOM:
writeMGenObject((MGenBase)o,(CustomType)typ);
break;
default :
throw new SerializationException(""String_Node_Str"");
}
}",0.9865016872890888
130566,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void writeElements(final Collection<Object> list,final Type elementType) throws IOException {
  if (list != null && !list.isEmpty()) {
    writeSize(list.size());
    writeTypeTag(elementType.typeTag());
switch (elementType.typeEnum()) {
case ENUM:
{
        final Collection<Enum<?>> l=(Collection)list;
        for (        final Enum<?> e : l)         writeEnum(e,false);
        break;
      }
case BOOL:
{
      final Collection<Boolean> l=(Collection)list;
      for (      final Boolean e : l)       writeBoolean(e != null ? e : false,false);
      break;
    }
case INT8:
{
    final Collection<Byte> l=(Collection)list;
    for (    final Byte e : l)     writeInt8(e != null ? e : (byte)0,false);
    break;
  }
case INT16:
{
  final Collection<Short> l=(Collection)list;
  for (  final Short e : l)   writeInt16(e != null ? e : (short)0,false);
  break;
}
case INT32:
{
final Collection<Integer> l=(Collection)list;
for (final Integer e : l) writeInt32(e != null ? e : 0,false);
break;
}
case INT64:
{
final Collection<Long> l=(Collection)list;
for (final Long e : l) writeInt64(e != null ? e : 0,false);
break;
}
case FLOAT32:
{
final Collection<Float> l=(Collection)list;
for (final Float e : l) writeFloat32(e != null ? e : 0.0f,false);
break;
}
case FLOAT64:
{
final Collection<Double> l=(Collection)list;
for (final Double e : l) writeFloat64(e != null ? e : 0.0,false);
break;
}
default :
for (final Object o : list) writeObject(o,elementType,false);
break;
}
}
 else {
writeSize(0);
}
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private void writeElements(final boolean doWriteListTag,final Collection<Object> list,final Type elementType) throws IOException {
  if (doWriteListTag)   writeTypeTag(TAG_LIST);
  if (list != null && !list.isEmpty()) {
    writeSize(list.size());
    writeTypeTag(elementType.typeTag());
switch (elementType.typeEnum()) {
case ENUM:
{
        final Collection<Enum<?>> l=(Collection)list;
        for (        final Enum<?> e : l)         writeEnum(e,false);
        break;
      }
case BOOL:
{
      final Collection<Boolean> l=(Collection)list;
      for (      final Boolean e : l)       writeBoolean(e != null ? e : false,false);
      break;
    }
case INT8:
{
    final Collection<Byte> l=(Collection)list;
    for (    final Byte e : l)     writeInt8(e != null ? e : (byte)0,false);
    break;
  }
case INT16:
{
  final Collection<Short> l=(Collection)list;
  for (  final Short e : l)   writeInt16(e != null ? e : (short)0,false);
  break;
}
case INT32:
{
final Collection<Integer> l=(Collection)list;
for (final Integer e : l) writeInt32(e != null ? e : 0,false);
break;
}
case INT64:
{
final Collection<Long> l=(Collection)list;
for (final Long e : l) writeInt64(e != null ? e : 0,false);
break;
}
case FLOAT32:
{
final Collection<Float> l=(Collection)list;
for (final Float e : l) writeFloat32(e != null ? e : 0.0f,false);
break;
}
case FLOAT64:
{
final Collection<Double> l=(Collection)list;
for (final Double e : l) writeFloat64(e != null ? e : 0.0,false);
break;
}
case STRING:
{
final Collection<String> l=(Collection)list;
for (final String e : l) writeString(e,false);
break;
}
default :
for (final Object o : list) writeObject(o,elementType,false);
break;
}
}
 else {
writeSize(0);
}
}",0.942024632021628
130567,"private void writeMap(final HashMap<Object,Object> map,final MapType typ,final boolean tag) throws IOException {
  if (tag)   writeTypeTag(TAG_MAP);
  if (map != null && !map.isEmpty()) {
    writeSize(map.size());
    writeElements(map.keySet(),typ.keyType());
    writeElements(map.values(),typ.valueType());
  }
 else {
    writeSize(0);
  }
}","private void writeMap(final HashMap<Object,Object> map,final MapType typ,final boolean tag) throws IOException {
  if (tag)   writeTypeTag(TAG_MAP);
  if (map != null && !map.isEmpty()) {
    writeSize(map.size());
    writeElements(true,map.keySet(),typ.keyType());
    writeElements(true,map.values(),typ.valueType());
  }
 else {
    writeSize(0);
  }
}",0.9857549857549858
130568,"private void writeList(final List<Object> list,final ListType typ,final boolean tag) throws IOException {
  if (tag)   writeTypeTag(TAG_LIST);
  writeElements(list,typ.elementType());
}","private void writeList(final List<Object> list,final ListType typ,final boolean tag) throws IOException {
  if (tag)   writeTypeTag(TAG_LIST);
  writeElements(false,list,typ.elementType());
}",0.9840425531914894
130569,"private HashMap<Object,Object> readMap(final boolean readTag,final MapType constraint) throws IOException {
  if (readTag)   ensureTypeTag(null,TAG_MAP,readTypeTag());
  final int nElements=readSize();
  final HashMap<Object,Object> out=new HashMap<Object,Object>(nElements);
  if (nElements > 0) {
    final List<Object> keys=readElements(constraint != null ? constraint.keyType() : null);
    final List<Object> values=readElements(constraint != null ? constraint.valueType() : null);
    if (keys.size() != values.size() || keys.size() != nElements)     throw new StreamCorruptedException(""String_Node_Str"");
    for (int i=0; i < keys.size(); i++)     out.put(keys.get(i),values.get(i));
  }
  return out;
}","private HashMap<Object,Object> readMap(final boolean doReadTag,final MapType constraint) throws IOException {
  if (doReadTag)   ensureTypeTag(null,TAG_MAP,readTypeTag());
  final int nElements=readSize();
  final HashMap<Object,Object> out=new HashMap<Object,Object>(nElements);
  if (nElements > 0) {
    final List<Object> keys=readElements(true,constraint != null ? constraint.keyType() : null);
    final List<Object> values=readElements(true,constraint != null ? constraint.valueType() : null);
    if (keys.size() != values.size() || keys.size() != nElements)     throw new StreamCorruptedException(""String_Node_Str"");
    for (int i=0; i < keys.size(); i++)     out.put(keys.get(i),values.get(i));
  }
  return out;
}",0.9874651810584958
130570,"private ArrayList<Object> readList(final boolean tag,final ListOrArrayType constraint) throws IOException {
  if (tag)   ensureTypeTag(null,TAG_LIST,readTypeTag());
  return readElements(constraint != null ? constraint.elementType() : null);
}","private ArrayList<Object> readList(final boolean tag,final ListOrArrayType constraint) throws IOException {
  if (tag)   ensureTypeTag(null,TAG_LIST,readTypeTag());
  return readElements(false,constraint != null ? constraint.elementType() : null);
}",0.9878048780487804
130571,"private ArrayList<Object> readElements(final Type constraint) throws IOException {
  final int nElements=readSize();
  final ArrayList<Object> out=new ArrayList<Object>(nElements);
  if (nElements > 0) {
    final byte readElemTag=readTypeTag();
    if (constraint != null && constraint.typeTag() != readElemTag)     throwUnexpectTag(""String_Node_Str"",constraint.typeTag(),readElemTag);
switch (readElemTag) {
case TAG_BOOL:
      for (int i=0; i < nElements; i++)       out.add(readBoolean(false));
    break;
case TAG_INT8:
  for (int i=0; i < nElements; i++)   out.add(readInt8(false));
break;
case TAG_INT16:
for (int i=0; i < nElements; i++) out.add(readInt16(false));
break;
case TAG_INT32:
for (int i=0; i < nElements; i++) out.add(readInt32(false));
break;
case TAG_INT64:
for (int i=0; i < nElements; i++) out.add(readInt64(false));
break;
case TAG_FLOAT32:
for (int i=0; i < nElements; i++) out.add(readFloat32(false));
break;
case TAG_FLOAT64:
for (int i=0; i < nElements; i++) out.add(readFloat64(false));
break;
case TAG_STRING:
if (constraint != null && constraint.typeEnum() == TypeEnum.ENUM) {
final EnumType t=(EnumType)constraint;
for (int i=0; i < nElements; i++) out.add(readEnum(false,t));
}
 else {
for (int i=0; i < nElements; i++) out.add(readFloat64(false));
}
break;
default :
for (int i=0; i < nElements; i++) out.add(readObject(readElemTag,constraint));
break;
}
}
return out;
}","private ArrayList<Object> readElements(final boolean doReadTag,final Type constraint) throws IOException {
  if (doReadTag)   ensureTypeTag(null,TAG_LIST,readTypeTag());
  final int nElements=readSize();
  final ArrayList<Object> out=new ArrayList<Object>(nElements);
  if (nElements > 0) {
    final byte readElemTag=readTypeTag();
    if (constraint != null && constraint.typeTag() != readElemTag)     throwUnexpectTag(""String_Node_Str"",constraint.typeTag(),readElemTag);
switch (readElemTag) {
case TAG_BOOL:
      for (int i=0; i < nElements; i++)       out.add(readBoolean(false));
    break;
case TAG_INT8:
  for (int i=0; i < nElements; i++)   out.add(readInt8(false));
break;
case TAG_INT16:
for (int i=0; i < nElements; i++) out.add(readInt16(false));
break;
case TAG_INT32:
for (int i=0; i < nElements; i++) out.add(readInt32(false));
break;
case TAG_INT64:
for (int i=0; i < nElements; i++) out.add(readInt64(false));
break;
case TAG_FLOAT32:
for (int i=0; i < nElements; i++) out.add(readFloat32(false));
break;
case TAG_FLOAT64:
for (int i=0; i < nElements; i++) out.add(readFloat64(false));
break;
case TAG_STRING:
if (constraint != null && constraint.typeEnum() == TypeEnum.ENUM) {
final EnumType t=(EnumType)constraint;
for (int i=0; i < nElements; i++) out.add(readEnum(false,t));
}
 else {
for (int i=0; i < nElements; i++) out.add(readString(false));
}
break;
default :
for (int i=0; i < nElements; i++) out.add(readObject(readElemTag,constraint));
break;
}
}
return out;
}",0.9654934437543132
130572,"/** 
 * <BR>
 * @param params Void...
 * @return Void
 * @see android.os.AsyncTask#doInBackground(Params[])
 */
@Override protected Void doInBackground(Void... params){
  createFile();
  mDownloadTask.setDownloadState(DownloadState.DOWNLOADING);
  mDlTaskMng.updateDownloadTask(mDownloadTask);
  for (  DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
    l.onDownloadStart();
  }
  HttpURLConnection conn=null;
  RandomAccessFile accessFile=null;
  InputStream is=null;
  int finishedSize=0;
  int totalSize=0;
  int startSize=0;
  try {
    URL url=new URL(mDownloadTask.getUrl());
    conn=(HttpURLConnection)url.openConnection();
    conn.setConnectTimeout(5000);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + mDownloadTask.getFinishedSize() + ""String_Node_Str""+ mDownloadTask.getTotalSize());
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    accessFile=new RandomAccessFile(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName(),""String_Node_Str"");
    accessFile.seek(mDownloadTask.getFinishedSize());
    finishedSize=mDownloadTask.getFinishedSize();
    totalSize=mDownloadTask.getTotalSize();
    startSize=finishedSize;
    is=conn.getInputStream();
    Log.d(TAG,""String_Node_Str"" + mDlTaskMng.getListeners(mDownloadTask).size());
    Log.i(TAG,""String_Node_Str"");
    byte[] buffer=new byte[BUFFER_SIZE];
    int length=-1;
    long startTime=System.currentTimeMillis();
    int speed=0;
    while ((length=is.read(buffer)) != -1) {
      if (mPause) {
        Log.i(TAG,""String_Node_Str"");
        mDownloadTask.setDownloadState(DownloadState.PAUSE);
        mDownloadTask.setFinishedSize(finishedSize);
        for (        DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
          l.onDownloadPause();
        }
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        return null;
      }
      finishedSize+=length;
      Log.d(TAG,""String_Node_Str"" + length);
      accessFile.write(buffer,0,length);
      if (finishedSize - mDownloadTask.getFinishedSize() > UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress(finishedSize,totalSize,speed);
      }
 else       if (totalSize - finishedSize < UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress(finishedSize,totalSize,speed);
      }
    }
    conn.disconnect();
    mDownloadTask.setDownloadState(DownloadState.FINISHED);
    mDownloadTask.setFinishedSize(finishedSize);
    Log.d(TAG,""String_Node_Str"" + mDownloadTask);
    mDlTaskMng.updateDownloadTask(mDownloadTask);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFinish(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName());
    }
    mDlTaskMng.getListeners(mDownloadTask).clear();
    mDlTaskMng.removeListener(mDownloadTask);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    mDownloadTask.setDownloadState(DownloadState.FAILED);
    mDownloadTask.setFinishedSize(finishedSize);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFail();
    }
    mDlTaskMng.updateDownloadTask(mDownloadTask);
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
      if (accessFile != null) {
        accessFile.close();
      }
      if (conn != null) {
        conn.disconnect();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}","/** 
 * <BR>
 * @param params Void...
 * @return Void
 * @see android.os.AsyncTask#doInBackground(Params[])
 */
@Override protected Void doInBackground(Void... params){
  createFile();
  mDownloadTask.setDownloadState(DownloadState.DOWNLOADING);
  mDlTaskMng.updateDownloadTask(mDownloadTask);
  for (  DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
    l.onDownloadStart();
  }
  HttpURLConnection conn=null;
  RandomAccessFile accessFile=null;
  InputStream is=null;
  long finishedSize=0;
  long totalSize=0;
  long startSize=0;
  try {
    URL url=new URL(mDownloadTask.getUrl());
    conn=(HttpURLConnection)url.openConnection();
    conn.setConnectTimeout(5000);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + mDownloadTask.getFinishedSize() + ""String_Node_Str""+ mDownloadTask.getTotalSize());
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    accessFile=new RandomAccessFile(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName(),""String_Node_Str"");
    accessFile.seek(mDownloadTask.getFinishedSize());
    finishedSize=mDownloadTask.getFinishedSize();
    totalSize=mDownloadTask.getTotalSize();
    startSize=finishedSize;
    is=conn.getInputStream();
    Log.d(TAG,""String_Node_Str"" + mDlTaskMng.getListeners(mDownloadTask).size());
    Log.i(TAG,""String_Node_Str"");
    byte[] buffer=new byte[BUFFER_SIZE];
    int length=-1;
    long startTime=System.currentTimeMillis();
    int speed=0;
    while ((length=is.read(buffer)) != -1) {
      if (mPause) {
        Log.i(TAG,""String_Node_Str"");
        mDownloadTask.setDownloadState(DownloadState.PAUSE);
        mDownloadTask.setFinishedSize(finishedSize);
        for (        DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
          l.onDownloadPause();
        }
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        return null;
      }
      finishedSize+=length;
      Log.d(TAG,""String_Node_Str"" + length);
      accessFile.write(buffer,0,length);
      if (finishedSize - mDownloadTask.getFinishedSize() > UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress((int)finishedSize / 1024,(int)totalSize / 1024,(int)speed / 1024);
      }
 else       if (totalSize - finishedSize < UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress((int)finishedSize / 1024,(int)totalSize / 1024,speed / 1024);
      }
    }
    conn.disconnect();
    mDownloadTask.setDownloadState(DownloadState.FINISHED);
    mDownloadTask.setFinishedSize(finishedSize);
    Log.d(TAG,""String_Node_Str"" + mDownloadTask);
    mDlTaskMng.updateDownloadTask(mDownloadTask);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFinish(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName());
    }
    mDlTaskMng.getListeners(mDownloadTask).clear();
    mDlTaskMng.removeListener(mDownloadTask);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    mDownloadTask.setDownloadState(DownloadState.FAILED);
    mDownloadTask.setFinishedSize(finishedSize);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFail();
    }
    mDlTaskMng.updateDownloadTask(mDownloadTask);
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
      if (accessFile != null) {
        accessFile.close();
      }
      if (conn != null) {
        conn.disconnect();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.988953050464474
130573,"/** 
 * get totalSize
 * @return the totalSize
 */
public int getTotalSize(){
  return totalSize;
}","/** 
 * get totalSize
 * @return the totalSize
 */
public long getTotalSize(){
  return totalSize;
}",0.9748743718592964
130574,"/** 
 * get finishedSize
 * @return the finishedSize
 */
public int getFinishedSize(){
  return finishedSize;
}","/** 
 * get finishedSize
 * @return the finishedSize
 */
public long getFinishedSize(){
  return finishedSize;
}",0.9775784753363228
130575,"/** 
 * set finishedSize
 * @param finishedSize the finishedSize to set
 */
public void setFinishedSize(int finishedSize){
  this.finishedSize=finishedSize;
}","/** 
 * set finishedSize
 * @param finishedSize the finishedSize to set
 */
public void setFinishedSize(long finishedSize){
  this.finishedSize=finishedSize;
}",0.9842271293375394
130576,"/** 
 * set totalSize
 * @param totalSize the totalSize to set
 */
public void setTotalSize(int totalSize){
  this.totalSize=totalSize;
}","/** 
 * set totalSize
 * @param totalSize the totalSize to set
 */
public void setTotalSize(long totalSize){
  this.totalSize=totalSize;
}",0.9818181818181818
130577,"private String formatSize(int finishedSize,int totalSize){
  StringBuilder sb=new StringBuilder(50);
  float finished=((float)finishedSize) / 1024 / 1024;
  if (finished < 1) {
    sb.append(String.format(""String_Node_Str"",((float)finishedSize) / 1024));
  }
 else {
    sb.append((String.format(""String_Node_Str"",finished)));
  }
  float total=((float)totalSize) / 1024 / 1024;
  if (total < 1) {
    sb.append(String.format(""String_Node_Str"",((float)totalSize) / 1024));
  }
 else {
    sb.append(String.format(""String_Node_Str"",total));
  }
  return sb.toString();
}","private String formatSize(long finishedSize,long totalSize){
  StringBuilder sb=new StringBuilder(50);
  float finished=((float)finishedSize) / 1024 / 1024;
  if (finished < 1) {
    sb.append(String.format(""String_Node_Str"",((float)finishedSize) / 1024));
  }
 else {
    sb.append((String.format(""String_Node_Str"",finished)));
  }
  float total=((float)totalSize) / 1024 / 1024;
  if (total < 1) {
    sb.append(String.format(""String_Node_Str"",((float)totalSize) / 1024));
  }
 else {
    sb.append(String.format(""String_Node_Str"",total));
  }
  return sb.toString();
}",0.987719298245614
130578,"/** 
 * <BR>
 * @param params Void...
 * @return Void
 * @see android.os.AsyncTask#doInBackground(Params[])
 */
@Override protected Void doInBackground(Void... params){
  createFile();
  mDownloadTask.setDownloadState(DownloadState.DOWNLOADING);
  mDlTaskMng.updateDownloadTask(mDownloadTask);
  for (  DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
    l.onDownloadStart();
  }
  HttpURLConnection conn=null;
  RandomAccessFile accessFile=null;
  InputStream is=null;
  long finishedSize=0;
  long totalSize=0;
  long startSize=0;
  try {
    URL url=new URL(mDownloadTask.getUrl());
    conn=(HttpURLConnection)url.openConnection();
    conn.setConnectTimeout(5000);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + mDownloadTask.getFinishedSize() + ""String_Node_Str""+ mDownloadTask.getTotalSize());
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    accessFile=new RandomAccessFile(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName(),""String_Node_Str"");
    accessFile.seek(mDownloadTask.getFinishedSize());
    finishedSize=mDownloadTask.getFinishedSize();
    totalSize=mDownloadTask.getTotalSize();
    startSize=finishedSize;
    is=conn.getInputStream();
    Log.d(TAG,""String_Node_Str"" + mDlTaskMng.getListeners(mDownloadTask).size());
    Log.i(TAG,""String_Node_Str"");
    byte[] buffer=new byte[BUFFER_SIZE];
    int length=-1;
    long startTime=System.currentTimeMillis();
    int speed=0;
    while ((length=is.read(buffer)) != -1) {
      if (mPause) {
        Log.i(TAG,""String_Node_Str"");
        mDownloadTask.setDownloadState(DownloadState.PAUSE);
        mDownloadTask.setFinishedSize(finishedSize);
        for (        DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
          l.onDownloadPause();
        }
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        return null;
      }
      finishedSize+=length;
      Log.d(TAG,""String_Node_Str"" + length);
      accessFile.write(buffer,0,length);
      if (finishedSize - mDownloadTask.getFinishedSize() > UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress((int)finishedSize / 1024,(int)totalSize / 1024,(int)speed / 1024);
      }
 else       if (totalSize - finishedSize < UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress((int)finishedSize / 1024,(int)totalSize / 1024,speed / 1024);
      }
    }
    conn.disconnect();
    mDownloadTask.setDownloadState(DownloadState.FINISHED);
    mDownloadTask.setFinishedSize(finishedSize);
    Log.d(TAG,""String_Node_Str"" + mDownloadTask);
    mDlTaskMng.updateDownloadTask(mDownloadTask);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFinish(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName());
    }
    mDlTaskMng.getListeners(mDownloadTask).clear();
    mDlTaskMng.removeListener(mDownloadTask);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    mDownloadTask.setDownloadState(DownloadState.FAILED);
    mDownloadTask.setFinishedSize(finishedSize);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFail();
    }
    mDlTaskMng.updateDownloadTask(mDownloadTask);
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
      if (accessFile != null) {
        accessFile.close();
      }
      if (conn != null) {
        conn.disconnect();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}","/** 
 * <BR>
 * @param params Void...
 * @return Void
 * @see android.os.AsyncTask#doInBackground(Params[])
 */
@Override protected Void doInBackground(Void... params){
  createFile();
  mDownloadTask.setDownloadState(DownloadState.DOWNLOADING);
  mDlTaskMng.updateDownloadTask(mDownloadTask);
  for (  DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
    l.onDownloadStart();
  }
  HttpURLConnection conn=null;
  RandomAccessFile accessFile=null;
  InputStream is=null;
  long finishedSize=0;
  long totalSize=0;
  long startSize=0;
  try {
    URL url=new URL(mDownloadTask.getUrl());
    conn=(HttpURLConnection)url.openConnection();
    conn.setConnectTimeout(5000);
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + mDownloadTask.getFinishedSize() + ""String_Node_Str""+ mDownloadTask.getTotalSize());
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    accessFile=new RandomAccessFile(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName(),""String_Node_Str"");
    accessFile.seek(mDownloadTask.getFinishedSize());
    finishedSize=mDownloadTask.getFinishedSize();
    totalSize=mDownloadTask.getTotalSize();
    startSize=finishedSize;
    is=conn.getInputStream();
    Log.d(TAG,""String_Node_Str"" + mDlTaskMng.getListeners(mDownloadTask).size());
    Log.i(TAG,""String_Node_Str"");
    byte[] buffer=new byte[BUFFER_SIZE];
    int length=-1;
    long startTime=System.currentTimeMillis();
    int speed=0;
    while ((length=is.read(buffer)) != -1) {
      if (mPause) {
        Log.i(TAG,""String_Node_Str"");
        mDownloadTask.setDownloadState(DownloadState.PAUSE);
        mDownloadTask.setFinishedSize(finishedSize);
        for (        DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
          l.onDownloadPause();
        }
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        return null;
      }
      finishedSize+=length;
      Log.d(TAG,""String_Node_Str"" + length);
      accessFile.write(buffer,0,length);
      if (finishedSize - mDownloadTask.getFinishedSize() > UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        mDlTaskMng.updateDownloadTask(mDownloadTask);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress((int)finishedSize,(int)totalSize,speed);
      }
 else       if (totalSize - finishedSize < UPDATE_DB_PER_SIZE) {
        mDownloadTask.setFinishedSize(finishedSize);
        speed=(int)((finishedSize - startSize) / (int)(System.currentTimeMillis() + 1 - startTime));
        publishProgress((int)finishedSize,(int)totalSize,speed);
      }
    }
    conn.disconnect();
    mDownloadTask.setDownloadState(DownloadState.FINISHED);
    mDownloadTask.setFinishedSize(finishedSize);
    Log.d(TAG,""String_Node_Str"" + mDownloadTask);
    mDlTaskMng.updateDownloadTask(mDownloadTask);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFinish(mDownloadTask.getFilePath() + ""String_Node_Str"" + mDownloadTask.getFileName());
    }
    mDlTaskMng.getListeners(mDownloadTask).clear();
    mDlTaskMng.removeListener(mDownloadTask);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    mDownloadTask.setDownloadState(DownloadState.FAILED);
    mDownloadTask.setFinishedSize(finishedSize);
    for (    DownloadListener l : mDlTaskMng.getListeners(mDownloadTask)) {
      l.onDownloadFail();
    }
    mDlTaskMng.updateDownloadTask(mDownloadTask);
  }
 finally {
    try {
      if (is != null) {
        is.close();
      }
      if (accessFile != null) {
        accessFile.close();
      }
      if (conn != null) {
        conn.disconnect();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.9941169107522844
130579,"private boolean fetchConsensus(boolean forceDownload){
}","private boolean fetchConsensus(boolean forceDownload){
  routers=new TreeMap<>();
  try {
    File cachedConsensus=new File(""String_Node_Str"");
    SimpleDateFormat df=new SimpleDateFormat(""String_Node_Str"");
    BufferedReader consensusReader=null;
    PrintWriter cachedConsensusWriter=null;
    if (!forceDownload && cachedConsensus.exists() && cachedConsensus.canRead()) {
      BufferedReader rdr=new BufferedReader(new FileReader(cachedConsensus));
      String ln;
      while ((ln=rdr.readLine()) != null) {
        if (ln.startsWith(""String_Node_Str"")) {
          int idx=ln.indexOf(""String_Node_Str"");
          Date valid=df.parse(ln.substring(idx + 1) + ""String_Node_Str"");
          if (valid.after(new Date())) {
            log.info(""String_Node_Str"" + valid);
            consensusReader=rdr;
          }
          consensusValidUntil=valid;
          break;
        }
      }
    }
    if (consensusReader == null) {
      log.info(""String_Node_Str"");
      InputStream conStream=getDirectoryStream(""String_Node_Str"");
      consensusReader=new BufferedReader(new InputStreamReader(conStream));
      if (new File(""String_Node_Str"").canWrite())       cachedConsensusWriter=new PrintWriter(cachedConsensus);
    }
    String ln=null;
    OnionRouter cur=null;
    while ((ln=consensusReader.readLine()) != null) {
      if (cachedConsensusWriter != null)       cachedConsensusWriter.println(ln);
      if (ln.startsWith(""String_Node_Str"")) {
        int idx=ln.indexOf(""String_Node_Str"");
        consensusValidUntil=df.parse(ln.substring(idx + 1) + ""String_Node_Str"");
      }
      if (ln.startsWith(""String_Node_Str"")) {
        String dat[]=ln.split(""String_Node_Str"");
        if (dat.length < 8)         continue;
        String identityhex=Hex.encodeHexString(Base64.decodeBase64(dat[2]));
        cur=new OnionRouter(dat[1],identityhex,dat[6],Integer.parseInt(dat[7]),Integer.parseInt(dat[8]));
        routers.put(identityhex,cur);
      }
 else       if (ln.startsWith(""String_Node_Str"") && cur != null) {
        for (        String s : ln.split(""String_Node_Str""))         if (!s.equals(""String_Node_Str""))         cur.flags.add(s);
      }
 else       if (ln.startsWith(""String_Node_Str"") && cur != null) {
        String[] lineSplit=ln.split(""String_Node_Str"");
        if (lineSplit.length >= 3)         cur.consensusIPv4ExitPortSummary=lineSplit[1] + ""String_Node_Str"" + lineSplit[2];
      }
 else       if (ln.startsWith(""String_Node_Str"") && cur != null) {
        String[] lineSplit=ln.split(""String_Node_Str"");
        if (lineSplit.length >= 3) {
          cur.version=lineSplit[1] + ""String_Node_Str"" + lineSplit[2];
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    return false;
  }
catch (  UnknownHostException e) {
    return false;
  }
catch (  IOException e) {
    return false;
  }
catch (  ParseException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0.0373707040373707
130580,"/** 
 * Try random directories until we get a successful dir stream, falling back to the pre-configured authorities after MAX_TRIES, or if we don't have an existing consensus If you're having speed issues, try adding ""Fast"" to the lists of flags below.
 * @param path Desired dir path
 * @return InputStream for reading
 * @throws RuntimeException when it fails to download path after MAX_TRIES tries
 */
public InputStream getDirectoryStream(String path) throws RuntimeException {
  String directoryType=""String_Node_Str"";
  if (consensus != null && useOnlyAuthorities) {
    int dirRouterCount=getORsWithFlag(""String_Node_Str"").size();
    int dirTriesLimit=Math.min(dirRouterCount,MAX_TRIES);
    int i;
    for (i=0; i < dirTriesLimit; i++) {
      OnionRouter dir=getRandomORWithFlag(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + directoryType + ""String_Node_Str""+ dir.name);
      try {
        return connectToDirectoryStream(dir.ip,dir.dirport,path);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + path + ""String_Node_Str""+ directoryType+ ""String_Node_Str""+ dir.ip+ ""String_Node_Str""+ String.valueOf(dir.dirport));
        continue;
      }
    }
  }
  directoryType=""String_Node_Str"";
  int authTriesLimit=Math.min(authorities.length,MAX_TRIES);
  int tries;
  for (tries=0; tries < authTriesLimit; tries++) {
    int i=TorCrypto.rnd.nextInt(authorities.length);
    String auth=authorities[i];
    String sp[]=auth.split(""String_Node_Str"");
    String ipp[]=sp[3].split(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + directoryType + ""String_Node_Str""+ sp[0]);
    try {
      return connectToDirectoryStream(ipp[0],ipp[1],path);
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + path + ""String_Node_Str""+ directoryType+ ""String_Node_Str""+ sp[0]);
      continue;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + path + ""String_Node_Str""+ String.valueOf(MAX_TRIES)+ ""String_Node_Str"");
}","/** 
 * Try random directories until we get a successful dir stream, falling back to the pre-configured authorities after MAX_TRIES, or if we don't have an existing consensus If you're having speed issues, try adding ""Fast"" to the lists of flags below.
 * @param path Desired dir path
 * @return InputStream for reading
 * @throws RuntimeException when it fails to download path after MAX_TRIES tries
 */
public InputStream getDirectoryStream(String path) throws RuntimeException {
  String directoryType=""String_Node_Str"";
  if (consensus != null && !useOnlyAuthorities) {
    int dirRouterCount=getORsWithFlag(""String_Node_Str"").size();
    int dirTriesLimit=Math.min(dirRouterCount,MAX_TRIES);
    int i;
    for (i=0; i < dirTriesLimit; i++) {
      OnionRouter dir=getRandomORWithFlag(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + directoryType + ""String_Node_Str""+ dir.name);
      try {
        return connectToDirectoryStream(dir.ip,dir.dirport,path);
      }
 catch (      IOException e) {
        System.out.println(""String_Node_Str"" + path + ""String_Node_Str""+ directoryType+ ""String_Node_Str""+ dir.ip+ ""String_Node_Str""+ String.valueOf(dir.dirport));
        continue;
      }
    }
  }
  directoryType=""String_Node_Str"";
  int authTriesLimit=Math.min(authorities.length,MAX_TRIES);
  int tries;
  for (tries=0; tries < authTriesLimit; tries++) {
    int i=TorCrypto.rnd.nextInt(authorities.length);
    String auth=authorities[i];
    String sp[]=auth.split(""String_Node_Str"");
    String ipp[]=sp[3].split(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + directoryType + ""String_Node_Str""+ sp[0]);
    try {
      return connectToDirectoryStream(ipp[0],ipp[1],path);
    }
 catch (    IOException e) {
      System.out.println(""String_Node_Str"" + path + ""String_Node_Str""+ directoryType+ ""String_Node_Str""+ sp[0]);
      continue;
    }
  }
  throw new RuntimeException(""String_Node_Str"" + path + ""String_Node_Str""+ String.valueOf(MAX_TRIES)+ ""String_Node_Str"");
}",0.999751305645362
130581,"public boolean handleCell(Cell c) throws IOException {
  boolean handled=false;
  if (receiveWindow < 900) {
    send(new byte[]{00},RELAY_SENDME,false,(short)0);
    receiveWindow+=100;
  }
  if (state == STATES.DESTROYED)   throw new RuntimeException(""String_Node_Str"");
  if (c.cmdId == Cell.CREATED) {
    handleCreated(c.payload);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
    handled=true;
  }
 else   if (c.cmdId == Cell.RELAY) {
    c.payload=decrypt(c.payload);
    ByteBuffer buf=ByteBuffer.wrap(c.payload);
    int cmd=buf.get();
    if (buf.getShort() != 0)     throw new RuntimeException(""String_Node_Str"");
    int streamid=buf.getShort();
    TorStream stream=streams.get(new Integer(streamid));
    if (streamid > 0 && stream == null)     System.out.println(""String_Node_Str"" + streamid);
    int digest=buf.getInt();
    int length=buf.getShort();
    byte data[]=Arrays.copyOfRange(c.payload,1 + 2 + 2+ 4+ 2,1 + 2 + 2+ 4+ 2+ length);
switch (cmd) {
case RELAY_EXTENDED:
      handleCreated(data);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
 else     setState(STATES.READY);
  break;
case RELAY_CONNECTED:
if (stream != null) stream.notifyConnect();
break;
case RELAY_SENDME:
if (streamid == 0) sendWindow+=100;
System.out.println(""String_Node_Str"" + circId + ""String_Node_Str""+ streamid+ ""String_Node_Str""+ sendWindow);
break;
case RELAY_DATA:
if (state == STATES.READY) receiveWindow--;
if (stream != null) stream._putRecved(data);
break;
case RELAY_END:
if (stream != null) {
stream.notifyDisconnect();
streams.remove(new Integer(streamid));
}
break;
default :
System.out.println(""String_Node_Str"" + cmd);
}
handled=true;
}
 else if (c.cmdId == Cell.DESTROY) {
System.out.println(""String_Node_Str"" + circId);
System.out.println(""String_Node_Str"" + Hex.toHexString(c.payload));
for (Iterator<TorStream> iterator=streams.values().iterator(); iterator.hasNext(); ) {
TorStream s=iterator.next();
s.notifyDisconnect();
}
setState(STATES.DESTROYED);
handled=true;
}
return handled;
}","public boolean handleCell(Cell c) throws IOException {
  boolean handled=false;
  if (receiveWindow < 900) {
    send(null,RELAY_SENDME,false,(short)0);
    receiveWindow+=100;
  }
  if (state == STATES.DESTROYED)   throw new RuntimeException(""String_Node_Str"");
  if (c.cmdId == Cell.CREATED) {
    handleCreated(c.payload);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
    handled=true;
  }
 else   if (c.cmdId == Cell.RELAY) {
    c.payload=decrypt(c.payload);
    ByteBuffer buf=ByteBuffer.wrap(c.payload);
    int cmd=buf.get();
    if (buf.getShort() != 0) {
      System.out.println(""String_Node_Str"");
      return false;
    }
    int streamid=buf.getShort();
    TorStream stream=streams.get(new Integer(streamid));
    if (streamid > 0 && stream == null)     System.out.println(""String_Node_Str"" + streamid);
    int digest=buf.getInt();
    int length=buf.getShort();
    byte data[]=Arrays.copyOfRange(c.payload,1 + 2 + 2+ 4+ 2,1 + 2 + 2+ 4+ 2+ length);
switch (cmd) {
case RELAY_EXTENDED:
      handleCreated(data);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
 else     setState(STATES.READY);
  break;
case RELAY_CONNECTED:
if (stream != null) stream.notifyConnect();
break;
case RELAY_SENDME:
if (streamid == 0) sendWindow+=100;
System.out.println(""String_Node_Str"" + circId + ""String_Node_Str""+ streamid+ ""String_Node_Str""+ sendWindow);
break;
case RELAY_DATA:
if (state == STATES.READY) receiveWindow--;
if (stream != null) stream._putRecved(data);
break;
case RELAY_END:
if (stream != null) {
stream.notifyDisconnect();
streams.remove(new Integer(streamid));
}
break;
default :
System.out.println(""String_Node_Str"" + cmd);
}
handled=true;
}
 else if (c.cmdId == Cell.DESTROY) {
System.out.println(""String_Node_Str"" + circId);
System.out.println(""String_Node_Str"" + Hex.toHexString(c.payload));
for (Iterator<TorStream> iterator=streams.values().iterator(); iterator.hasNext(); ) {
TorStream s=iterator.next();
s.notifyDisconnect();
}
setState(STATES.DESTROYED);
handled=true;
}
return handled;
}",0.9773275446213218
130582,"/** 
 * Builds a relay cell payload (not including cell header, only relay header)
 * @param toHop Hop that it's destined for
 * @param cmd Command ID, see RELAY_
 * @param stream Stream ID
 * @param payload Relay cell data
 * @return Constructed relay payload
 */
protected synchronized byte[] buildRelay(TorHop toHop,int cmd,short stream,byte[] payload){
  byte[] fnl=new byte[509];
  ByteBuffer buf=ByteBuffer.wrap(fnl);
  buf.put((byte)cmd);
  buf.putShort((short)0);
  buf.putShort(stream);
  buf.putInt(0);
  buf.putShort((short)payload.length);
  buf.put(payload);
  toHop.df_md.update(fnl);
  MessageDigest md;
  try {
    md=(MessageDigest)toHop.df_md.clone();
    byte digest[]=md.digest();
    byte[] fnl_final=new byte[509];
    System.arraycopy(digest,0,fnl,5,4);
    return fnl;
  }
 catch (  CloneNotSupportedException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Builds a relay cell payload (not including cell header, only relay header)
 * @param toHop Hop that it's destined for
 * @param cmd Command ID, see RELAY_
 * @param stream Stream ID
 * @param payload Relay cell data
 * @return Constructed relay payload
 */
protected synchronized byte[] buildRelay(TorHop toHop,int cmd,short stream,byte[] payload){
  byte[] fnl=new byte[509];
  ByteBuffer buf=ByteBuffer.wrap(fnl);
  buf.put((byte)cmd);
  buf.putShort((short)0);
  buf.putShort(stream);
  buf.putInt(0);
  if (payload != null) {
    buf.putShort((short)payload.length);
    buf.put(payload);
  }
 else {
    buf.putShort((short)0);
  }
  toHop.df_md.update(fnl);
  MessageDigest md;
  try {
    md=(MessageDigest)toHop.df_md.clone();
    byte digest[]=md.digest();
    byte[] fnl_final=new byte[509];
    System.arraycopy(digest,0,fnl,5,4);
    return fnl;
  }
 catch (  CloneNotSupportedException e) {
    throw new RuntimeException(e);
  }
}",0.9415619879847078
130583,"/** 
 * Removes onion skins for received data
 * @param data Encrypted data for onion skin removal.
 * @return Decrypted data.
 */
private byte[] decrypt(byte[] data){
  for (int i=0; i < hops.size(); i++) {
    data=hops.get(i).decrypt(data);
    if (data[1] == 0 && data[2] == 0)     if (i != hops.size() - 1) {
      System.out.println(""String_Node_Str"" + hops.get(i));
      return data;
    }
  }
  return data;
}","/** 
 * Removes onion skins for received data
 * @param data Encrypted data for onion skin removal.
 * @return Decrypted data.
 */
private byte[] decrypt(byte[] data){
  for (int i=0; i < hops.size(); i++) {
    data=hops.get(i).decrypt(data);
  }
  return data;
}",0.7272727272727273
130584,"/** 
 * Internal function. Used to add received bytes to object.
 * @param b Bytes
 */
protected void _putRecved(byte b[]){
  recvWindow--;
  if (recvWindow < 450) {
    try {
      circ.send(new byte[]{00},TorCircuit.RELAY_SENDME,false,(short)streamId);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    recvWindow+=recvWindowIncrement;
  }
  recv.put(b);
  if (listener != null)   listener.dataArrived(this);
synchronized (this) {
    this.notifyAll();
  }
}","/** 
 * Internal function. Used to add received bytes to object.
 * @param b Bytes
 */
protected void _putRecved(byte b[]){
  recvWindow--;
  if (recvWindow < 450) {
    try {
      circ.send(null,TorCircuit.RELAY_SENDME,false,(short)streamId);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    recvWindow+=recvWindowIncrement;
  }
  recv.put(b);
  if (listener != null)   listener.dataArrived(this);
synchronized (this) {
    this.notifyAll();
  }
}",0.9832285115303984
130585,"@Override public void dataArrived(TorStream s){
  try {
    if (!client.isConnected())     removeClient(this);
    client.write(ByteBuffer.wrap(s.recv(-1,false)));
  }
 catch (  IOException e) {
    try {
      removeClient(this);
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
    e.printStackTrace();
  }
}","@Override public void dataArrived(TorStream s){
  try {
    if (!client.isConnected())     removeClient(this);
    client.write(ByteBuffer.wrap(s.recv(-1,false)));
  }
 catch (  IOException e) {
    try {
      removeClient(this);
    }
 catch (    IOException e1) {
    }
  }
  lastData=System.currentTimeMillis();
}",0.8549382716049383
130586,"public void removeClient(SocksClient c) throws IOException {
  c.client.close();
  c.stream.destroy();
  clients.remove(c);
}","public void removeClient(SocksClient c) throws IOException {
  c.client.close();
  c.stream.destroy();
  clients.remove(c.client);
}",0.9727626459143968
130587,"public SOCKSProxy() throws IOException {
  OnionRouter local=new OnionRouter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",8001,0){
    @Override public PublicKey getPubKey() throws IOException {
      return TorCrypto.asn1GetPublicKey(Base64.decode(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
    }
  }
;
  OnionRouter guard=TorSocket.getConsensus().getRouterByName(""String_Node_Str"");
  TorSocket sock=new TorSocket(guard);
  TorCircuit circ=sock.createCircuit();
  circ.createRoute(""String_Node_Str"");
  circ.waitForState(TorCircuit.STATES.READY);
  System.out.println(""String_Node_Str"");
  ServerSocketChannel socks=ServerSocketChannel.open();
  socks.socket().bind(new InetSocketAddress(9050));
  socks.configureBlocking(false);
  Selector select=Selector.open();
  socks.register(select,SelectionKey.OP_ACCEPT);
  int lastClients=clients.size();
  while (true) {
    select.select(1000);
    Set keys=select.selectedKeys();
    Iterator iterator=keys.iterator();
    while (iterator.hasNext()) {
      SelectionKey k=(SelectionKey)iterator.next();
      if (!k.isValid())       continue;
      if (k.isAcceptable() && k.channel() == socks) {
        SocketChannel csock=socks.accept();
        if (csock == null)         continue;
        addClient(csock,circ);
        csock.register(select,SelectionKey.OP_READ);
      }
 else       if (k.isReadable()) {
        for (int i=0; i < clients.size(); i++) {
          SocksClient cl=clients.get(i);
          try {
            if (k.channel() == cl.client)             cl.newClientData(select,k);
          }
 catch (          IOException e) {
            cl.client.close();
            k.cancel();
            clients.remove(cl);
          }
        }
      }
    }
    for (int i=0; i < clients.size(); i++) {
      SocksClient cl=clients.get(i);
      if ((System.currentTimeMillis() - cl.lastData) > 30000L) {
        cl.stream.destroy();
        cl.client.close();
        clients.remove(cl);
      }
    }
    if (clients.size() != lastClients) {
      System.out.println(clients.size());
      lastClients=clients.size();
    }
  }
}","public SOCKSProxy() throws IOException {
  OnionRouter local=new OnionRouter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",8001,0){
    @Override public PublicKey getPubKey() throws IOException {
      return TorCrypto.asn1GetPublicKey(Base64.decode(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
    }
  }
;
  OnionRouter guard=TorSocket.getConsensus().getRouterByName(""String_Node_Str"");
  TorSocket sock=new TorSocket(guard);
  TorCircuit circ=sock.createCircuit();
  circ.createRoute(""String_Node_Str"");
  circ.waitForState(TorCircuit.STATES.READY);
  System.out.println(""String_Node_Str"");
  ServerSocketChannel socks=ServerSocketChannel.open();
  socks.socket().bind(new InetSocketAddress(9050));
  socks.configureBlocking(false);
  Selector select=Selector.open();
  socks.register(select,SelectionKey.OP_ACCEPT);
  int lastClients=clients.size();
  while (true) {
    select.select(1000);
    Set keys=select.selectedKeys();
    Iterator iterator=keys.iterator();
    while (iterator.hasNext()) {
      SelectionKey k=(SelectionKey)iterator.next();
      if (!k.isValid())       continue;
      if (k.isAcceptable() && k.channel() == socks) {
        SocketChannel csock=socks.accept();
        if (csock == null)         continue;
        addClient(csock,circ);
        csock.register(select,SelectionKey.OP_READ);
      }
 else       if (k.isReadable()) {
        SocksClient cl=clients.get(k.channel());
        try {
          cl.newClientData(select,k);
        }
 catch (        IOException e) {
          cl.client.close();
          k.cancel();
          clients.remove(cl);
        }
      }
    }
    if (System.currentTimeMillis() - lastTimeoutCheck > 15000) {
      lastTimeoutCheck=System.currentTimeMillis();
      Collection<SocksClient> clientsTmp=clients.values();
      for (      SocksClient cl : clientsTmp) {
        if ((System.currentTimeMillis() - cl.lastData) > 30000L) {
          cl.stream.destroy();
          cl.client.close();
          clients.remove(cl);
        }
      }
      if (clients.size() != lastClients) {
        System.out.println(clients.size());
        lastClients=clients.size();
      }
    }
  }
}",0.8519553072625698
130588,"public SocksClient addClient(SocketChannel s,TorCircuit circ){
  SocksClient cl;
  try {
    cl=new SocksClient(s,circ);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  clients.add(cl);
  return cl;
}","public SocksClient addClient(SocketChannel s,TorCircuit circ){
  SocksClient cl;
  try {
    cl=new SocksClient(s,circ);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  clients.put(s,cl);
  return cl;
}",0.978448275862069
130589,"public boolean handleCell(Cell c) throws IOException {
  boolean handled=false;
  if (state == STATES.READY)   receiveWindow--;
  if (receiveWindow < 900) {
    send(new byte[]{00},RELAY_SENDME,false,(short)0);
    receiveWindow+=100;
  }
  if (state == STATES.DESTROYED)   throw new RuntimeException(""String_Node_Str"");
  if (c.cmdId == Cell.CREATED) {
    handleCreated(c.payload);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
    handled=true;
  }
 else   if (c.cmdId == Cell.RELAY) {
    c.payload=decrypt(c.payload);
    ByteBuffer buf=ByteBuffer.wrap(c.payload);
    int cmd=buf.get();
    if (buf.getShort() != 0)     throw new RuntimeException(""String_Node_Str"");
    int streamid=buf.getShort();
    TorStream stream=streams.get(new Integer(streamid));
    if (streamid > 0 && stream == null)     System.out.println(""String_Node_Str"" + streamid);
    int digest=buf.getInt();
    int length=buf.getShort();
    byte data[]=Arrays.copyOfRange(c.payload,1 + 2 + 2+ 4+ 2,1 + 2 + 2+ 4+ 2+ length);
switch (cmd) {
case RELAY_EXTENDED:
      handleCreated(data);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
 else     setState(STATES.READY);
  break;
case RELAY_CONNECTED:
if (stream != null) stream.notifyConnect();
break;
case RELAY_SENDME:
if (streamid == 0) sendWindow+=100;
System.out.println(""String_Node_Str"" + circId + ""String_Node_Str""+ streamid+ ""String_Node_Str""+ sendWindow);
break;
case RELAY_DATA:
if (stream != null) stream._putRecved(data);
break;
case RELAY_END:
if (stream != null) {
stream.notifyDisconnect();
streams.remove(new Integer(streamid));
}
break;
default :
System.out.println(""String_Node_Str"" + cmd);
}
handled=true;
}
 else if (c.cmdId == Cell.DESTROY) {
System.out.println(""String_Node_Str"" + circId);
System.out.println(""String_Node_Str"" + Hex.toHexString(c.payload));
for (Iterator<TorStream> iterator=streams.values().iterator(); iterator.hasNext(); ) {
TorStream s=iterator.next();
s.notifyDisconnect();
}
setState(STATES.DESTROYED);
handled=true;
}
return handled;
}","public boolean handleCell(Cell c) throws IOException {
  boolean handled=false;
  if (receiveWindow < 900) {
    send(new byte[]{00},RELAY_SENDME,false,(short)0);
    receiveWindow+=100;
  }
  if (state == STATES.DESTROYED)   throw new RuntimeException(""String_Node_Str"");
  if (c.cmdId == Cell.CREATED) {
    handleCreated(c.payload);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
    handled=true;
  }
 else   if (c.cmdId == Cell.RELAY) {
    c.payload=decrypt(c.payload);
    ByteBuffer buf=ByteBuffer.wrap(c.payload);
    int cmd=buf.get();
    if (buf.getShort() != 0)     throw new RuntimeException(""String_Node_Str"");
    int streamid=buf.getShort();
    TorStream stream=streams.get(new Integer(streamid));
    if (streamid > 0 && stream == null)     System.out.println(""String_Node_Str"" + streamid);
    int digest=buf.getInt();
    int length=buf.getShort();
    byte data[]=Arrays.copyOfRange(c.payload,1 + 2 + 2+ 4+ 2,1 + 2 + 2+ 4+ 2+ length);
switch (cmd) {
case RELAY_EXTENDED:
      handleCreated(data);
    if (!circuitToBuild.isEmpty())     extend(circuitToBuild.removeFirst());
 else     setState(STATES.READY);
  break;
case RELAY_CONNECTED:
if (stream != null) stream.notifyConnect();
break;
case RELAY_SENDME:
if (streamid == 0) sendWindow+=100;
System.out.println(""String_Node_Str"" + circId + ""String_Node_Str""+ streamid+ ""String_Node_Str""+ sendWindow);
break;
case RELAY_DATA:
if (state == STATES.READY) receiveWindow--;
if (stream != null) stream._putRecved(data);
break;
case RELAY_END:
if (stream != null) {
stream.notifyDisconnect();
streams.remove(new Integer(streamid));
}
break;
default :
System.out.println(""String_Node_Str"" + cmd);
}
handled=true;
}
 else if (c.cmdId == Cell.DESTROY) {
System.out.println(""String_Node_Str"" + circId);
System.out.println(""String_Node_Str"" + Hex.toHexString(c.payload));
for (Iterator<TorStream> iterator=streams.values().iterator(); iterator.hasNext(); ) {
TorStream s=iterator.next();
s.notifyDisconnect();
}
setState(STATES.DESTROYED);
handled=true;
}
return handled;
}",0.9777670372160464
130590,"/** 
 * Builds a relay cell payload (not including cell header, only relay header)
 * @param toHop Hop that it's destined for
 * @param cmd Command ID, see RELAY_
 * @param stream Stream ID
 * @param payload Relay cell data
 * @return Constructed relay payload
 */
protected byte[] buildRelay(TorHop toHop,int cmd,short stream,byte[] payload){
  byte[] fnl=new byte[509];
  ByteBuffer buf=ByteBuffer.wrap(fnl);
  buf.put((byte)cmd);
  buf.putShort((short)0);
  buf.putShort(stream);
  buf.putInt(0);
  buf.putShort((short)payload.length);
  buf.put(payload);
  toHop.df_md.update(fnl);
  MessageDigest md;
  try {
    md=(MessageDigest)toHop.df_md.clone();
    byte digest[]=md.digest();
    byte[] fnl_final=new byte[509];
    System.arraycopy(digest,0,fnl,5,4);
    return fnl;
  }
 catch (  CloneNotSupportedException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Builds a relay cell payload (not including cell header, only relay header)
 * @param toHop Hop that it's destined for
 * @param cmd Command ID, see RELAY_
 * @param stream Stream ID
 * @param payload Relay cell data
 * @return Constructed relay payload
 */
protected synchronized byte[] buildRelay(TorHop toHop,int cmd,short stream,byte[] payload){
  byte[] fnl=new byte[509];
  ByteBuffer buf=ByteBuffer.wrap(fnl);
  buf.put((byte)cmd);
  buf.putShort((short)0);
  buf.putShort(stream);
  buf.putInt(0);
  buf.putShort((short)payload.length);
  buf.put(payload);
  toHop.df_md.update(fnl);
  MessageDigest md;
  try {
    md=(MessageDigest)toHop.df_md.clone();
    byte digest[]=md.digest();
    byte[] fnl_final=new byte[509];
    System.arraycopy(digest,0,fnl,5,4);
    return fnl;
  }
 catch (  CloneNotSupportedException e) {
    throw new RuntimeException(e);
  }
}",0.9925501432664756
130591,"/** 
 * Removes onion skins for received data
 * @param data Encrypted data for onion skin removal.
 * @return Decrypted data.
 */
private byte[] decrypt(byte[] data){
  for (int i=0; i < hops.size(); i++) {
    data=hops.get(i).decrypt(data);
    if (data[1] == 0 && data[2] == 0)     return data;
  }
  return data;
}","/** 
 * Removes onion skins for received data
 * @param data Encrypted data for onion skin removal.
 * @return Decrypted data.
 */
private byte[] decrypt(byte[] data){
  for (int i=0; i < hops.size(); i++) {
    data=hops.get(i).decrypt(data);
    if (data[1] == 0 && data[2] == 0)     if (i != hops.size() - 1) {
      System.out.println(""String_Node_Str"" + hops.get(i));
      return data;
    }
  }
  return data;
}",0.8331071913161465
130592,"/** 
 * Gererates a relay cell, encrypts and sends it
 * @param payload Relay payload
 * @param relaytype Type of relay cell (see RELAY_)
 * @param early Whether to use an early cell (needed for EXTEND only)
 * @param stream Stream ID
 */
public void send(byte[] payload,int relaytype,boolean early,short stream) throws IOException {
  if (state == STATES.DESTROYED)   throw new RuntimeException(""String_Node_Str"");
  if (relaytype == RELAY_DATA)   sendWindow--;
  byte relcell[]=buildRelay(hops.get(hops.size() - 1),relaytype,stream,payload);
  sock.sendCell(circId,early ? Cell.RELAY_EARLY : Cell.RELAY,encrypt(relcell));
}","public synchronized void send(byte[] payload,int relaytype,boolean early,short stream) throws IOException {
  if (state == STATES.DESTROYED)   throw new RuntimeException(""String_Node_Str"");
  if (relaytype == RELAY_DATA)   sendWindow--;
  byte relcell[]=buildRelay(hops.get(hops.size() - 1),relaytype,stream,payload);
  sock.sendCell(circId,early ? Cell.RELAY_EARLY : Cell.RELAY,encrypt(relcell));
  sentPackets++;
  sentBytes+=relcell.length;
}",0.7214953271028037
130593,"/** 
 * Main constructor. Connects and does connection setup.
 * @param host Hostname/IP string
 * @param port Port
 */
public TorSocket(String host,int port) throws IOException {
}","/** 
 * Main constructor. Connects and does connection setup.
 * @param host Hostname/IP string
 * @param port Port
 */
public TorSocket(OnionRouter fh) throws IOException {
}",0.9269662921348316
130594,"public void destroy() throws IOException {
  setState(STATES.DESTROYED);
  circ.send(new byte[]{6},TorCircuit.RELAY_END,false,(short)streamId);
  circ.streams.remove(new Integer(streamId));
}","public void destroy() throws IOException {
  if (state == STATES.DESTROYED)   return;
  setState(STATES.DESTROYED);
  circ.send(new byte[]{6},TorCircuit.RELAY_END,false,(short)streamId);
  circ.streams.remove(new Integer(streamId));
}",0.8988235294117647
130595,"@Override public void dataArrived(TorStream s){
  try {
    client.write(ByteBuffer.wrap(s.recv(-1,false)));
  }
 catch (  IOException e) {
    try {
      removeClient(this);
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
    e.printStackTrace();
  }
}","@Override public void dataArrived(TorStream s){
  try {
    if (!client.isConnected())     removeClient(this);
    client.write(ByteBuffer.wrap(s.recv(-1,false)));
  }
 catch (  IOException e) {
    try {
      removeClient(this);
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
    e.printStackTrace();
  }
}",0.9093904448105437
130596,"public SOCKSProxy() throws IOException {
  OnionRouter guard=TorSocket.getConsensus().getRouterByName(""String_Node_Str"");
  TorSocket sock=new TorSocket(guard);
  TorCircuit circ=sock.createCircuit();
  circ.createRoute(""String_Node_Str"");
  circ.waitForState(TorCircuit.STATES.READY);
  System.out.println(""String_Node_Str"");
  ServerSocketChannel socks=ServerSocketChannel.open();
  socks.socket().bind(new InetSocketAddress(8000));
  socks.configureBlocking(false);
  Selector select=Selector.open();
  socks.register(select,SelectionKey.OP_ACCEPT);
  int lastClients=clients.size();
  while (true) {
    select.select(1000);
    Set keys=select.selectedKeys();
    Iterator iterator=keys.iterator();
    while (iterator.hasNext()) {
      SelectionKey k=(SelectionKey)iterator.next();
      if (!k.isValid())       continue;
      if (k.isAcceptable() && k.channel() == socks) {
        SocketChannel csock=socks.accept();
        if (csock == null)         continue;
        addClient(csock,circ);
        csock.register(select,SelectionKey.OP_READ);
      }
 else       if (k.isReadable()) {
        for (int i=0; i < clients.size(); i++) {
          SocksClient cl=clients.get(i);
          try {
            if (k.channel() == cl.client)             cl.newClientData(select,k);
          }
 catch (          IOException e) {
            cl.client.close();
            k.cancel();
            clients.remove(cl);
          }
        }
      }
    }
    for (int i=0; i < clients.size(); i++) {
      SocksClient cl=clients.get(i);
      if ((System.currentTimeMillis() - cl.lastData) > 30000L) {
        cl.stream.destroy();
        cl.client.close();
        clients.remove(cl);
      }
    }
    if (clients.size() != lastClients) {
      System.out.println(clients.size());
      lastClients=clients.size();
    }
  }
}","public SOCKSProxy() throws IOException {
  OnionRouter local=new OnionRouter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",8001,0){
    @Override public PublicKey getPubKey() throws IOException {
      return TorCrypto.asn1GetPublicKey(Base64.decode(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
    }
  }
;
  OnionRouter guard=TorSocket.getConsensus().getRouterByName(""String_Node_Str"");
  TorSocket sock=new TorSocket(guard);
  TorCircuit circ=sock.createCircuit();
  circ.createRoute(""String_Node_Str"");
  circ.waitForState(TorCircuit.STATES.READY);
  System.out.println(""String_Node_Str"");
  ServerSocketChannel socks=ServerSocketChannel.open();
  socks.socket().bind(new InetSocketAddress(9050));
  socks.configureBlocking(false);
  Selector select=Selector.open();
  socks.register(select,SelectionKey.OP_ACCEPT);
  int lastClients=clients.size();
  while (true) {
    select.select(1000);
    Set keys=select.selectedKeys();
    Iterator iterator=keys.iterator();
    while (iterator.hasNext()) {
      SelectionKey k=(SelectionKey)iterator.next();
      if (!k.isValid())       continue;
      if (k.isAcceptable() && k.channel() == socks) {
        SocketChannel csock=socks.accept();
        if (csock == null)         continue;
        addClient(csock,circ);
        csock.register(select,SelectionKey.OP_READ);
      }
 else       if (k.isReadable()) {
        for (int i=0; i < clients.size(); i++) {
          SocksClient cl=clients.get(i);
          try {
            if (k.channel() == cl.client)             cl.newClientData(select,k);
          }
 catch (          IOException e) {
            cl.client.close();
            k.cancel();
            clients.remove(cl);
          }
        }
      }
    }
    for (int i=0; i < clients.size(); i++) {
      SocksClient cl=clients.get(i);
      if ((System.currentTimeMillis() - cl.lastData) > 30000L) {
        cl.stream.destroy();
        cl.client.close();
        clients.remove(cl);
      }
    }
    if (clients.size() != lastClients) {
      System.out.println(clients.size());
      lastClients=clients.size();
    }
  }
}",0.925531914893617
130597,"public void newClientData(Selector selector,SelectionKey sk) throws IOException {
  if (!connected) {
    ByteBuffer inbuf=ByteBuffer.allocate(512);
    if (client.read(inbuf) < 1)     return;
    inbuf.flip();
    int ver=inbuf.get();
    if (ver != 4) {
      throw new IOException(""String_Node_Str"" + ver);
    }
    int cmd=inbuf.get();
    if (cmd != 1) {
      throw new IOException(""String_Node_Str"");
    }
    port=inbuf.getShort();
    final byte ip[]=new byte[4];
    inbuf.get(ip);
    remoteAddr=InetAddress.getByAddress(ip);
    while ((inbuf.get()) != 0)     ;
    if (ip[0] == 0 && ip[1] == 0 && ip[2] == 0 && ip[3] != 0) {
      String host=""String_Node_Str"";
      byte b;
      while ((b=inbuf.get()) != 0) {
        host+=b;
      }
      remoteAddr=InetAddress.getByName(host);
      System.out.println(host + remoteAddr);
    }
    stream=circ.createStream(remoteAddr.getHostAddress(),port,this);
  }
 else {
    ByteBuffer buf=ByteBuffer.allocate(1024);
    if (client.read(buf) == -1)     throw new IOException(""String_Node_Str"");
    lastData=System.currentTimeMillis();
    buf.flip();
    stream.send(buf.array());
  }
}","public void newClientData(Selector selector,SelectionKey sk) throws IOException {
  if (!connected) {
    ByteBuffer inbuf=ByteBuffer.allocate(512);
    if (client.read(inbuf) < 1)     return;
    inbuf.flip();
    int ver=inbuf.get();
    if (ver != 4) {
      throw new IOException(""String_Node_Str"" + ver);
    }
    int cmd=inbuf.get();
    if (cmd != 1) {
      throw new IOException(""String_Node_Str"");
    }
    port=inbuf.getShort();
    final byte ip[]=new byte[4];
    inbuf.get(ip);
    remoteAddr=InetAddress.getByAddress(ip);
    while ((inbuf.get()) != 0)     ;
    if (ip[0] == 0 && ip[1] == 0 && ip[2] == 0 && ip[3] != 0) {
      String host=""String_Node_Str"";
      byte b;
      while ((b=inbuf.get()) != 0) {
        host+=b;
      }
      remoteAddr=InetAddress.getByName(host);
      System.out.println(host + remoteAddr);
    }
    stream=circ.createStream(remoteAddr.getHostAddress(),port,this);
  }
 else {
    ByteBuffer buf=ByteBuffer.allocate(4096);
    int nlen=0;
    if ((nlen=client.read(buf)) == -1)     throw new IOException(""String_Node_Str"");
    lastData=System.currentTimeMillis();
    buf.flip();
    byte b[]=new byte[nlen];
    buf.get(b);
    stream.send(b);
  }
}",0.9421768707482994
130598,"public void loadTmp(int x86_tmp,int free){
  out.println(""String_Node_Str"" + x86_tmp + ""String_Node_Str""+ free);
  int diff=free - x86_tmp;
  if (diff >= numRegs) {
    emit(""String_Node_Str"",indirect((free - x86_tmp) * 4,""String_Node_Str""),reg(free));
  }
 else   if (diff > 0) {
    emit(""String_Node_Str"",reg(x86_tmp),reg(free));
  }
 else   if (diff == 0) {
  }
 else {
    assert(false);
  }
}","public void loadTmp(int x86_tmp,int free){
  out.println(""String_Node_Str"" + x86_tmp + ""String_Node_Str""+ free);
  int diff=free - x86_tmp;
  if (diff < 0) {
    assert(false);
  }
 else   if (diff < numRegs) {
    emit(""String_Node_Str"",reg(x86_tmp),reg(free));
  }
 else   if (diff > 0) {
    emit(""String_Node_Str"",indirect(diff * WORDSIZE,""String_Node_Str""),reg(free));
  }
 else {
  }
}",0.5095057034220533
130599,"/** 
 * Generate code to evaluate this expression and leave the result in the specified free variable.
 */
public void compileExpr(Assembly a,int free){
  this.object.compileExpr(a,free);
  tmp.setTmp(free);
  a.spill(free + 1);
  for (  Expression e : inits) {
    e.compileExpr(a,free + 1);
  }
  a.unspill(free + 1);
}","/** 
 * Generate code to evaluate this expression and leave the result in the specified free variable.
 */
public void compileExpr(Assembly a,int free){
  a.emit(""String_Node_Str"" + free);
  this.object.compileExpr(a,free);
  a.emit(""String_Node_Str"" + free);
  tmp.setTmp(free);
  a.spill(free + 1);
  for (  Expression e : inits) {
    e.compileExpr(a,free + 1);
  }
  a.unspill(free + 1);
}",0.8991596638655462
130600,"/** 
 * Generate code to evaluate this expression and leave the result in the specified free variable.
 */
public void compileExpr(Assembly a,int free){
  int orig_free=free;
  while (!a.reg(free).equals(""String_Node_Str"")) {
    free++;
  }
  a.spill(free);
  left.compileExpr(a,free);
  a.spill(free + 1);
  right.compileExpr(a,free + 1);
  a.emit(""String_Node_Str"",a.immed(0),""String_Node_Str"");
  a.emit(""String_Node_Str"",a.reg(free + 1));
  a.emit(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a.unspillAll(orig_free);
  a.emit(""String_Node_Str"",""String_Node_Str"",a.reg(free));
}","/** 
 * Generate code to evaluate this expression and leave the result in the specified free variable.
 */
public void compileExpr(Assembly a,int free){
  int freed=a.spillTo(free,""String_Node_Str"");
  left.compileExpr(a,freed);
  a.spill(freed + 1);
  right.compileExpr(a,freed + 1);
  a.emit(""String_Node_Str"",a.immed(0),""String_Node_Str"");
  a.emit(""String_Node_Str"",a.reg(freed + 1));
  a.emit(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  a.unspillTo(freed + 1,free);
  a.emit(""String_Node_Str"",""String_Node_Str"",a.reg(free));
}",0.8308501314636284
130601,"/** 
 * Generate code to evaluate this expression and leave the result in the specified free variable.
 */
public void compileExpr(Assembly a,int free){
  int orig_free=free;
  while (!a.reg(free).equals(""String_Node_Str"")) {
    free++;
  }
  a.spill(free);
  left.compileExpr(a,free);
  a.spill(free + 1);
  right.compileExpr(a,free + 1);
  a.emit(""String_Node_Str"",a.immed(0),""String_Node_Str"");
  a.emit(""String_Node_Str"",a.reg(free + 1));
  a.unspillAll(orig_free);
  a.emit(""String_Node_Str"",""String_Node_Str"",a.reg(free));
}","/** 
 * Generate code to evaluate this expression and leave the result in the specified free variable.
 */
public void compileExpr(Assembly a,int free){
  int freed=a.spillTo(free,""String_Node_Str"");
  left.compileExpr(a,freed);
  a.spill(freed + 1);
  right.compileExpr(a,freed + 1);
  a.emit(""String_Node_Str"",a.immed(0),""String_Node_Str"");
  a.emit(""String_Node_Str"",a.reg(freed + 1));
  a.unspillTo(freed + 1,free);
  a.emit(""String_Node_Str"",""String_Node_Str"",a.reg(free));
}",0.8090999010880316
130602,"/** 
 * Return the superclass, if any, of this class.
 */
public ClassType getSuper(){
  return extendsType.isClass();
}","/** 
 * Return the superclass, if any, of this class.
 */
public ClassType getSuper(){
  return extendsType == null ? null : extendsType.isClass();
}",0.8921933085501859
130603,"/** 
 * Convert this value into an ObjValue, or fail with an error message if this value does not represent an object.
 */
public ObjValue getObj(){
  throw new RuntimeException(""String_Node_Str"" + this.getClass().toString());
}","/** 
 * Convert this value into an ObjValue, or fail with an error message if this value does not represent an object.
 */
public ObjValue getObj(){
  Interp.abort(""String_Node_Str"");
  return null;
}",0.8130841121495327
130604,"/** 
 * Add a new field to this class.
 */
public void addField(Context ctxt,Modifiers mods,Id id,Type type,Expression init_expr){
  FieldEnv field=null;
  if (FieldEnv.find(id.getName(),fields) != null) {
    ctxt.report(new Failure(id.getPos(),""String_Node_Str"" + id));
  }
 else   if (mods.isStatic()) {
    field=new FieldEnv(mods,id,type,this,-1,0,null,init_expr);
  }
 else {
    field=new FieldEnv(mods,id,type,this,fieldCount++,width,null,init_expr);
    width+=type.size();
  }
  if (fields == null) {
    fields=field;
  }
 else {
    FieldEnv cur=fields;
    while (fields.getNext() != null) {
      cur=fields.getNext();
    }
    cur.setNext(field);
  }
}","/** 
 * Add a new field to this class.
 */
public void addField(Context ctxt,Modifiers mods,Id id,Type type,Expression init_expr){
  FieldEnv field=null;
  if (FieldEnv.find(id.getName(),fields) != null) {
    ctxt.report(new Failure(id.getPos(),""String_Node_Str"" + id));
  }
 else   if (mods.isStatic()) {
    field=new FieldEnv(mods,id,type,this,-1,0,null,init_expr);
  }
 else {
    field=new FieldEnv(mods,id,type,this,fieldCount++,width,null,init_expr);
    width+=type.size();
  }
  if (fields == null) {
    fields=field;
  }
 else {
    FieldEnv cur=fields;
    while (cur.getNext() != null) {
      cur=cur.getNext();
    }
    cur.setNext(field);
  }
}",0.9864661654135338
130605,"/** 
 * creates the crop ratios from the user selection. 0 = left 1 = bottom 2 = right 3 = top
 * @return the cropped ratios or null if to small
 */
private float[] getCutRatiosForPdf(){
  int x1, x2, y1, y2;
  if (zoomXStart > zoomXEnd) {
    x1=zoomXEnd;
    x2=zoomXStart;
  }
 else {
    x1=zoomXStart;
    x2=zoomXEnd;
  }
  if (zoomYStart > zoomYEnd) {
    y1=zoomYEnd;
    y2=zoomYStart;
  }
 else {
    y1=zoomYStart;
    y2=zoomYEnd;
  }
  if (x1 < 0) {
    x1=0;
  }
  if (x2 > img.getWidth()) {
    x2=img.getWidth();
  }
  if (y1 < 0) {
    y1=0;
  }
  if (y2 > img.getWidth()) {
    y2=img.getWidth();
  }
  if ((x2 - x1) < MINIMUM_WIDTH) {
    return null;
  }
  if ((y2 - y1) < MINIMUM_HEIGHT) {
    return null;
  }
  float[] ratios=new float[4];
  ratios[0]=(float)x1 / img.getWidth();
  ratios[1]=(float)(img.getHeight() - y2) / img.getHeight();
  ratios[2]=1 - ((float)x2 / img.getWidth());
  ratios[3]=1 - ((float)(img.getHeight() - y1) / img.getHeight());
  return ratios;
}","/** 
 * creates the crop ratios from the user selection. 0 = left 1 = bottom 2 = right 3 = top
 * @return the cropped ratios or null if to small
 */
private float[] getCutRatiosForPdf(){
  int x1, x2, y1, y2;
  if (zoomXStart > zoomXEnd) {
    x1=zoomXEnd;
    x2=zoomXStart;
  }
 else {
    x1=zoomXStart;
    x2=zoomXEnd;
  }
  if (zoomYStart > zoomYEnd) {
    y1=zoomYEnd;
    y2=zoomYStart;
  }
 else {
    y1=zoomYStart;
    y2=zoomYEnd;
  }
  if (x1 < 0) {
    x1=0;
  }
  if (x2 > img.getWidth()) {
    x2=img.getWidth();
  }
  if (y1 < 0) {
    y1=0;
  }
  if (y2 > img.getHeight()) {
    y2=img.getHeight();
  }
  if ((x2 - x1) < MINIMUM_WIDTH) {
    return null;
  }
  if ((y2 - y1) < MINIMUM_HEIGHT) {
    return null;
  }
  float[] ratios=new float[4];
  ratios[0]=(float)x1 / img.getWidth();
  ratios[1]=(float)(img.getHeight() - y2) / img.getHeight();
  ratios[2]=1 - ((float)x2 / img.getWidth());
  ratios[3]=1 - ((float)(img.getHeight() - y1) / img.getHeight());
  return ratios;
}",0.968875502008032
130606,"private Object apply(Sym name,List<Object> args){
  try {
    Object ret=((Invocable)engine).invokeFunction(iso2.get(name),args);
    check(syms.get(name).second,ret);
    return ret;
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ args+ ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ postfix);
  }
}","private Object apply(Sym name,List<Object> args){
  try {
    Object ret=((Invocable)engine).invokeFunction(iso2.get(name),args);
    check(syms.get(name).second,ret);
    return ret;
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ args+ ""String_Node_Str""+ Util.sep(args.stream().map(x -> x.getClass()).collect(Collectors.toList()),""String_Node_Str"")+ ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ postfix);
  }
}",0.8669724770642202
130607,"/** 
 * Expects filenames in the map
 */
public static Map<En,List<String[]>> start2(Map<String,String> map,AqlOptions op,Schema<Ty,En,Sym,Fk,Att> sch,boolean omitCheck) throws Exception {
  Character sepChar=(Character)op.getOrDefault(AqlOption.csv_field_delim_char);
  Character quoteChar=(Character)op.getOrDefault(AqlOption.csv_quote_char);
  Character escapeChar=(Character)op.getOrDefault(AqlOption.csv_escape_char);
  final CSVParser parser=new CSVParserBuilder().withSeparator(sepChar).withQuoteChar(quoteChar).withEscapeChar(escapeChar).withFieldAsNull(CSVReaderNullFieldIndicator.EMPTY_SEPARATORS).build();
  Map<En,List<String[]>> ret=new HashMap<>();
  for (  String k : map.keySet()) {
    if (!omitCheck) {
      if (!sch.ens.contains(new En(k))) {
        throw new RuntimeException(""String_Node_Str"" + k);
      }
    }
    File file=new File(map.get(k));
    FileReader fileReader=new FileReader(file);
    final CSVReader reader=new CSVReaderBuilder(fileReader).withCSVParser(parser).withFieldAsNull(CSVReaderNullFieldIndicator.EMPTY_SEPARATORS).build();
    List<String[]> rows=reader.readAll();
    fileReader.close();
    ret.put(new En(k),rows);
  }
  if (!omitCheck) {
    for (    En en : sch.ens) {
      if (!ret.containsKey(en)) {
        ret.put(en,new LinkedList<>(Util.singList(Util.union(sch.attsFrom(en),sch.fksFrom(en)).toArray(new String[0]))));
      }
    }
  }
  return ret;
}","/** 
 * Expects filenames in the map
 */
public static Map<En,List<String[]>> start2(Map<String,String> map,AqlOptions op,Schema<Ty,En,Sym,Fk,Att> sch,boolean omitCheck) throws Exception {
  Character sepChar=(Character)op.getOrDefault(AqlOption.csv_field_delim_char);
  Character quoteChar=(Character)op.getOrDefault(AqlOption.csv_quote_char);
  Character escapeChar=(Character)op.getOrDefault(AqlOption.csv_escape_char);
  final CSVParser parser=new CSVParserBuilder().withSeparator(sepChar).withQuoteChar(quoteChar).withEscapeChar(escapeChar).withFieldAsNull(CSVReaderNullFieldIndicator.EMPTY_SEPARATORS).build();
  Map<En,List<String[]>> ret=new HashMap<>();
  for (  String k : map.keySet()) {
    if (!omitCheck) {
      if (!sch.ens.contains(new En(k))) {
        throw new RuntimeException(""String_Node_Str"" + k);
      }
    }
    File file=new File(map.get(k));
    FileReader fileReader=new FileReader(file);
    final CSVReader reader=new CSVReaderBuilder(fileReader).withCSVParser(parser).withFieldAsNull(CSVReaderNullFieldIndicator.EMPTY_SEPARATORS).build();
    List<String[]> rows=reader.readAll();
    fileReader.close();
    ret.put(new En(k),rows);
  }
  if (!omitCheck) {
    for (    En en : sch.ens) {
      if (!ret.containsKey(en)) {
        ret.put(en,new LinkedList<>(Util.singList(Util.union(sch.attsFrom(en).stream().map(Object::toString).collect(Collectors.toList()),sch.fksFrom(en).stream().map(Object::toString).collect(Collectors.toList())).toArray(new String[0]))));
      }
    }
  }
  return ret;
}",0.959266802443992
130608,"@Override public Instance<Ty,En,Sym,Fk,Att,Gen,Null<?>,Gen,Null<?>> eval(AqlEnv env){
  Schema<Ty,En,Sym,Fk,Att> sch=schema.eval(env);
  for (  Ty ty : sch.typeSide.tys) {
    if (!sch.typeSide.js.java_tys.containsKey(ty)) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  op=new AqlOptions(options,null,env.defaults);
  import_as_theory=(boolean)op.getOrDefault(AqlOption.import_as_theory);
  isJoined=(boolean)op.getOrDefault(AqlOption.import_joined);
  idCol=(String)op.getOrDefault(AqlOption.id_column_name);
  nullOnErr=(Boolean)op.getOrDefault(AqlOption.import_null_on_err_unsafe);
  prepend_entity_on_ids=(Boolean)op.getOrDefault(AqlOption.prepend_entity_on_ids);
  import_col_seperator=(String)op.getOrDefault(AqlOption.import_col_seperator);
  prefix=(String)op.getOrDefault(AqlOption.csv_import_prefix);
  ens0=new Ctx<>(Util.newSetsFor0(sch.ens));
  tys0=new Ctx<>(Util.newSetsFor0(sch.typeSide.tys));
  fks0=new Ctx<>();
  atts0=new Ctx<>();
  extraRepr=new Ctx<>();
  try {
    Handle h=start(sch);
    if (!isJoined) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else {
      for (      En en : sch.ens) {
        Q z=map.get(en.str);
        if (z == null) {
          throw new RuntimeException(""String_Node_Str"" + en);
        }
        joinedEn(h,en,z,sch);
      }
    }
    end(h);
  }
 catch (  Exception exn) {
    exn.printStackTrace();
    throw new RuntimeException(exn.getMessage() + ""String_Node_Str"" + getHelpStr());
  }
  if (import_as_theory) {
    return forTheory(sch,ens0,tys0,fks0,atts0,op);
  }
  ImportAlgebra<Ty,En,Sym,Fk,Att,Gen,Null<?>> alg=new ImportAlgebra<>(sch,ens0,tys0,fks0,atts0,Object::toString,Object::toString);
  return new SaturatedInstance<>(alg,alg,(Boolean)op.getOrDefault(AqlOption.require_consistency),(Boolean)op.getOrDefault(AqlOption.allow_java_eqs_unsafe),true,extraRepr);
}","@Override public Instance<Ty,En,Sym,Fk,Att,Gen,Null<?>,Gen,Null<?>> eval(AqlEnv env){
  Schema<Ty,En,Sym,Fk,Att> sch=schema.eval(env);
  for (  Ty ty : sch.typeSide.tys) {
    if (!sch.typeSide.js.java_tys.containsKey(ty)) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  op=new AqlOptions(options,null,env.defaults);
  import_as_theory=(boolean)op.getOrDefault(AqlOption.import_as_theory);
  isJoined=(boolean)op.getOrDefault(AqlOption.import_joined);
  idCol=(String)op.getOrDefault(AqlOption.id_column_name);
  nullOnErr=(Boolean)op.getOrDefault(AqlOption.import_null_on_err_unsafe);
  prepend_entity_on_ids=(Boolean)op.getOrDefault(AqlOption.prepend_entity_on_ids);
  import_col_seperator=(String)op.getOrDefault(AqlOption.import_col_seperator);
  prefix=(String)op.getOrDefault(AqlOption.csv_import_prefix);
  ens0=new Ctx<>(Util.newSetsFor0(sch.ens));
  tys0=new Ctx<>(Util.newSetsFor0(sch.typeSide.tys));
  fks0=new Ctx<>();
  atts0=new Ctx<>();
  extraRepr=new Ctx<>();
  try {
    Handle h=start(sch);
    if (!isJoined) {
      throw new RuntimeException(""String_Node_Str"");
    }
 else {
      for (      En en : sch.ens) {
        Q z=map.get(en.str);
        joinedEn(h,en,z,sch);
      }
    }
    end(h);
  }
 catch (  Exception exn) {
    exn.printStackTrace();
    throw new RuntimeException(exn.getMessage() + ""String_Node_Str"" + getHelpStr());
  }
  if (import_as_theory) {
    return forTheory(sch,ens0,tys0,fks0,atts0,op);
  }
  ImportAlgebra<Ty,En,Sym,Fk,Att,Gen,Null<?>> alg=new ImportAlgebra<>(sch,ens0,tys0,fks0,atts0,Object::toString,Object::toString);
  return new SaturatedInstance<>(alg,alg,(Boolean)op.getOrDefault(AqlOption.require_consistency),(Boolean)op.getOrDefault(AqlOption.allow_java_eqs_unsafe),true,extraRepr);
}",0.973329667308221
130609,"public Program(List<Triple<String,Integer,X>> decls){
  List<Triple<String,Integer,X>> seen=new LinkedList<>();
  for (  Triple<String,Integer,X> decl : decls) {
    checkDup(seen,decl);
    exps.put(decl.first,decl.third);
    lines.put(decl.first,decl.second);
    order.add(decl.first);
  }
}","public Program(List<Triple<String,Integer,X>> decls,String text){
  this.text=text;
  List<Triple<String,Integer,X>> seen=new LinkedList<>();
  for (  Triple<String,Integer,X> decl : decls) {
    checkDup(seen,decl);
    exps.put(decl.first,decl.third);
    lines.put(decl.first,decl.second);
    order.add(decl.first);
  }
}",0.9516129032258064
130610,"private void checkDup(List<Triple<String,Integer,X>> seen,Triple<String,Integer,X> toAdd){
  for (  Triple<String,Integer,X> other : seen) {
    if (other.first.equals(toAdd.first)) {
      throw new RuntimeException(""String_Node_Str"" + toAdd.first + ""String_Node_Str""+ other.second+ ""String_Node_Str""+ toAdd.second);
    }
  }
  seen.add(toAdd);
}","private void checkDup(List<Triple<String,Integer,X>> seen,Triple<String,Integer,X> toAdd){
  for (  Triple<String,Integer,X> other : seen) {
    if (other.first.equals(toAdd.first)) {
      if (text == null) {
        throw new RuntimeException(""String_Node_Str"" + toAdd.first);
      }
      throw new ParserException(new ParseErrorDetails(){
        @Override public String getEncountered(){
          return other.first;
        }
        @Override public List<String> getExpected(){
          return new LinkedList<>();
        }
        @Override public String getFailureMessage(){
          return ""String_Node_Str"" + conv(other.second);
        }
        @Override public int getIndex(){
          return other.second;
        }
        @Override public String getUnexpected(){
          return ""String_Node_Str"";
        }
      }
,""String_Node_Str"" + toAdd.first,conv(toAdd.second));
    }
  }
  seen.add(toAdd);
}",0.5334382376081825
130611,"@SuppressWarnings(""String_Node_Str"") public static <X>X timeout(Callable<X> c,long timeout){
  final Ref<X> ret=new Ref<>();
  final Ref<Throwable> thr=new Ref<>();
  Thread t=new Thread(() -> {
    try {
      X x=c.call();
synchronized (ret) {
        ret.set(x);
      }
    }
 catch (    Exception exn) {
      exn.printStackTrace();
synchronized (thr) {
        thr.set(exn);
      }
    }
catch (    ThreadDeath d) {
synchronized (thr) {
        thr.set(new RuntimeInterruptedException(d));
      }
    }
  }
);
  t.start();
  try {
    t.join(timeout);
  }
 catch (  InterruptedException e) {
    t.stop();
    throw new RuntimeInterruptedException(e);
  }
synchronized (thr) {
synchronized (ret) {
      if (!ret.isSet() && !thr.isSet()) {
        t.stop();
        throw new RuntimeException(""String_Node_Str"" + timeout + ""String_Node_Str"");
      }
 else       if (ret.isSet() && !thr.isSet()) {
        return ret.x;
      }
 else       if (!ret.isSet() && thr.isSet()) {
        throw new RuntimeException(thr.x.getMessage());
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") public static <X>X timeout(Callable<X> c,long timeout){
  final Ref<X> ret=new Ref<>();
  final Ref<Throwable> thr=new Ref<>();
  Thread t=new Thread(() -> {
    try {
      X x=c.call();
synchronized (ret) {
        ret.set(x);
      }
    }
 catch (    Exception exn) {
      exn.printStackTrace();
synchronized (thr) {
        thr.set(exn);
      }
    }
catch (    ThreadDeath d) {
synchronized (thr) {
        thr.set(new RuntimeInterruptedException(d));
      }
    }
  }
);
  t.start();
  try {
    t.join(timeout);
  }
 catch (  InterruptedException e) {
    t.stop();
    throw new RuntimeInterruptedException(e);
  }
synchronized (thr) {
synchronized (ret) {
      if (!ret.isSet() && !thr.isSet()) {
        t.stop();
        throw new RuntimeException(""String_Node_Str"" + (timeout / 1000) + ""String_Node_Str""+ (timeout / 1000)+ ""String_Node_Str"");
      }
 else       if (ret.isSet() && !thr.isSet()) {
        return ret.x;
      }
 else       if (!ret.isSet() && thr.isSet()) {
        throw new RuntimeException(thr.x.getMessage());
      }
 else {
        throw new RuntimeException(""String_Node_Str"");
      }
    }
  }
}",0.7647569444444444
130612,"public Object apply(Sym name,List<Object> args){
  try {
    Object ret=((Invocable)engine).invokeFunction(iso2.get(name),args);
    check(syms.get(name).second,ret);
    return ret;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + e.getClass() + ""String_Node_Str""+ e.getMessage());
  }
}","public Object apply(Sym name,List<Object> args){
  try {
    Object ret=((Invocable)engine).invokeFunction(iso2.get(name),args);
    check(syms.get(name).second,ret);
    return ret;
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"" + name + ""String_Node_Str""+ args+ ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ postfix);
  }
}",0.6169296987087518
130613,"public Object parse(Ty name,String o){
  try {
    Object ret=((Invocable)engine).invokeFunction(iso1.get(name),Util.singList(o));
    check(name,ret);
    return ret;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + e.getClass() + ""String_Node_Str""+ e.getMessage());
  }
}","public Object parse(Ty name,String o){
  try {
    Object ret=((Invocable)engine).invokeFunction(iso1.get(name),Util.singList(o));
    check(name,ret);
    return ret;
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"" + o + ""String_Node_Str""+ name+ ""String_Node_Str""+ e.getClass()+ ""String_Node_Str""+ e.getMessage()+ postfix);
  }
}",0.6024096385542169
130614,"public void check(Ty ty,Object o){
  if (o == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  String clazz=java_tys.get(ty);
  Class<?> c=Util.load(clazz);
  if (!c.isInstance(o)) {
    throw new RuntimeException(o + ""String_Node_Str"" + c);
  }
}","private void check(Ty ty,Object o){
  if (o == null) {
    throw new RuntimeException(""String_Node_Str"" + postfix);
  }
  String clazz=java_tys.get(ty);
  Class<?> c=Util.load(clazz);
  if (!c.isInstance(o)) {
    throw new RuntimeException(o + ""String_Node_Str"" + c+ postfix);
  }
}",0.945054945054945
130615,"public AqlJs(Ctx<Sym,Pair<List<Ty>,Ty>> syms,Ctx<Ty,String> java_tys,Ctx<Ty,String> java_parsers,Ctx<Sym,String> java_fns){
  this.syms=syms;
  this.java_fns=java_fns;
  this.java_parsers=java_parsers;
  this.java_tys=java_tys;
  try {
    int i=0;
    for (    Ty k : java_parsers.keySet()) {
      String ret=""String_Node_Str"" + i + ""String_Node_Str""+ java_parsers.get(k)+ ""String_Node_Str"";
      iso1.put(k,""String_Node_Str"" + i);
      i++;
      engine.eval(ret);
    }
    i=0;
    for (    Sym k : java_fns.keySet()) {
      String ret=""String_Node_Str"" + i + ""String_Node_Str""+ java_fns.get(k)+ ""String_Node_Str"";
      iso2.put(k,""String_Node_Str"" + i);
      i++;
      engine.eval(ret);
    }
  }
 catch (  ScriptException e) {
    throw new RuntimeException(e.getMessage());
  }
}","public AqlJs(Ctx<Sym,Pair<List<Ty>,Ty>> syms,Ctx<Ty,String> java_tys,Ctx<Ty,String> java_parsers,Ctx<Sym,String> java_fns){
  this.syms=syms;
  this.java_fns=java_fns;
  this.java_parsers=java_parsers;
  this.java_tys=java_tys;
  String last=""String_Node_Str"";
  try {
    int i=0;
    for (    Ty k : java_parsers.keySet()) {
      String ret=""String_Node_Str"" + i + ""String_Node_Str""+ java_parsers.get(k)+ ""String_Node_Str"";
      iso1.put(k,""String_Node_Str"" + i);
      i++;
      engine.eval(ret);
      last=k.toString();
    }
    i=0;
    for (    Sym k : java_fns.keySet()) {
      String ret=""String_Node_Str"" + i + ""String_Node_Str""+ java_fns.get(k)+ ""String_Node_Str"";
      iso2.put(k,""String_Node_Str"" + i);
      i++;
      engine.eval(ret);
      last=k.toString();
    }
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"" + e.getMessage() + postfix+ ""String_Node_Str""+ last);
  }
}",0.8579743888242142
130616,"@Deprecated public static Object exec(String s){
  ScriptEngine engine=new ScriptEngineManager().getEngineByName(""String_Node_Str"");
  try {
    return engine.eval(s);
  }
 catch (  ScriptException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + s + ""String_Node_Str""+ e.getMessage());
  }
}","@Deprecated public static Object exec(String s){
  ScriptEngine engine=new ScriptEngineManager().getEngineByName(""String_Node_Str"");
  try {
    return engine.eval(s);
  }
 catch (  ScriptException e) {
    e.printStackTrace();
    throw new RuntimeException(""String_Node_Str"" + s + ""String_Node_Str""+ e.getMessage()+ postfix);
  }
}",0.9863013698630136
130617,"private static Object getDefault(AqlOption option){
switch (option) {
case allow_java_eqs_unsafe:
    return false;
case completion_precedence:
  return null;
case prover:
return ProverName.auto;
case dont_validate_unsafe:
return false;
case require_consistency:
return false;
case timeout:
return new Long(10);
case dont_verify_is_appropriate_for_prover_unsafe:
return false;
case completion_compose:
return true;
case completion_filter_subsumed:
return true;
case completion_sort:
return true;
case completion_syntactic_ac:
return false;
case static_typing:
return false;
case always_reload:
return false;
case csv_charset:
return ""String_Node_Str"";
case csv_escape_char:
return '\\';
case csv_field_delim_char:
return ',';
case csv_format:
return ""String_Node_Str"";
case id_column_name:
return ""String_Node_Str"";
case csv_line_delim_string:
return ""String_Node_Str"";
case csv_quote_char:
return '\""';
case varchar_length:
return 64;
case csv_null_string:
return null;
default :
throw new RuntimeException(""String_Node_Str"" + option);
}
}","private static Object getDefault(AqlOption option){
switch (option) {
case allow_java_eqs_unsafe:
    return false;
case completion_precedence:
  return null;
case prover:
return ProverName.auto;
case dont_validate_unsafe:
return false;
case require_consistency:
return false;
case timeout:
return new Long(10);
case dont_verify_is_appropriate_for_prover_unsafe:
return false;
case completion_compose:
return true;
case completion_filter_subsumed:
return true;
case completion_sort:
return true;
case completion_syntactic_ac:
return false;
case static_typing:
return false;
case always_reload:
return false;
case csv_charset:
return ""String_Node_Str"";
case csv_escape_char:
return '\\';
case csv_field_delim_char:
return ',';
case csv_format:
return ""String_Node_Str"";
case id_column_name:
return ""String_Node_Str"";
case csv_line_delim_string:
return ""String_Node_Str"";
case csv_quote_char:
return '\""';
case varchar_length:
return 64;
case csv_null_string:
return null;
case program_allow_nontermination_unsafe:
return false;
default :
throw new RuntimeException(""String_Node_Str"" + option);
}
}",0.9737827715355806
130618,"private static <Ty,En,Sym,Fk,Att,Gen,Sk>Object getFromMap(Map<String,String> map,Collage<Ty,En,Sym,Fk,Att,Gen,Sk> col,AqlOption op){
switch (op) {
case allow_java_eqs_unsafe:
    return op.getBoolean(map);
case completion_precedence:
  return AqlOption.getPrec(map.get(op.toString()),col);
case prover:
return op.getDPName(map);
case require_consistency:
return op.getBoolean(map);
case timeout:
return op.getLong(map);
case dont_verify_is_appropriate_for_prover_unsafe:
return op.getBoolean(map);
case completion_compose:
return op.getBoolean(map);
case completion_filter_subsumed:
return op.getBoolean(map);
case completion_sort:
return op.getBoolean(map);
case completion_syntactic_ac:
return op.getBoolean(map);
case dont_validate_unsafe:
return op.getBoolean(map);
case static_typing:
return op.getBoolean(map);
case always_reload:
return op.getBoolean(map);
case csv_charset:
return op.getString(map);
case csv_escape_char:
return op.getChar(map);
case csv_field_delim_char:
return op.getString(map);
case csv_format:
return op.getString(map);
case id_column_name:
return op.getString(map);
case csv_line_delim_string:
return op.getChar(map);
case csv_quote_char:
return op.getChar(map);
case varchar_length:
return op.getInteger(map);
case csv_null_string:
return op.getString(map);
default :
throw new RuntimeException(""String_Node_Str"");
}
}","private static <Ty,En,Sym,Fk,Att,Gen,Sk>Object getFromMap(Map<String,String> map,Collage<Ty,En,Sym,Fk,Att,Gen,Sk> col,AqlOption op){
switch (op) {
case allow_java_eqs_unsafe:
    return op.getBoolean(map);
case completion_precedence:
  return AqlOption.getPrec(map.get(op.toString()),col);
case prover:
return op.getDPName(map);
case require_consistency:
return op.getBoolean(map);
case timeout:
return op.getLong(map);
case dont_verify_is_appropriate_for_prover_unsafe:
return op.getBoolean(map);
case completion_compose:
return op.getBoolean(map);
case completion_filter_subsumed:
return op.getBoolean(map);
case completion_sort:
return op.getBoolean(map);
case completion_syntactic_ac:
return op.getBoolean(map);
case dont_validate_unsafe:
return op.getBoolean(map);
case static_typing:
return op.getBoolean(map);
case always_reload:
return op.getBoolean(map);
case csv_charset:
return op.getString(map);
case csv_escape_char:
return op.getChar(map);
case csv_field_delim_char:
return op.getString(map);
case csv_format:
return op.getString(map);
case id_column_name:
return op.getString(map);
case csv_line_delim_string:
return op.getChar(map);
case csv_quote_char:
return op.getChar(map);
case varchar_length:
return op.getInteger(map);
case csv_null_string:
return op.getString(map);
case program_allow_nontermination_unsafe:
return op.getBoolean(map);
default :
throw new RuntimeException(""String_Node_Str"");
}
}",0.9750812567713976
130619,"public static String printDefault(){
  List<String> l=new LinkedList<>();
  for (  AqlOption option : AqlOption.values()) {
    l.add(option + ""String_Node_Str"" + getDefault(option));
  }
  return Util.sep(l,""String_Node_Str"");
}","public static String printDefault(){
  List<String> l=new LinkedList<>();
  for (  AqlOption option : AqlOption.values()) {
    Object o=getDefault(option);
    if (o == null) {
      l.add(option + ""String_Node_Str"");
    }
 else {
      l.add(option + ""String_Node_Str"" + o);
    }
  }
  return Util.sep(l,""String_Node_Str"");
}",0.7455197132616488
130620,"private static <Sk,En,Fk,Ty,Att,Sym,Gen>ProverName auto(@SuppressWarnings(""String_Node_Str"") AqlOptions ops,Collage<Ty,En,Sym,Fk,Att,Gen,Sk> col){
  if (col.eqs.isEmpty()) {
    return ProverName.free;
  }
 else   if (col.isGround()) {
    return ProverName.congruence;
  }
 else   if (col.isMonoidal()) {
    return ProverName.monoidal;
  }
 else   if (ProgramProver.isProgram(Var.it,col.toKB().first,false)) {
    return ProverName.program;
  }
  throw new RuntimeException(""String_Node_Str"");
}","private static <Sk,En,Fk,Ty,Att,Sym,Gen>ProverName auto(AqlOptions ops,Collage<Ty,En,Sym,Fk,Att,Gen,Sk> col){
  if (col.eqs.isEmpty()) {
    return ProverName.free;
  }
 else   if (col.isGround()) {
    return ProverName.congruence;
  }
 else   if (col.isMonoidal()) {
    return ProverName.monoidal;
  }
 else   if (!(Boolean)ops.getOrDefault(AqlOption.program_allow_nontermination_unsafe) && reorientable(col) && ProgramProver.isProgram(Var.it,reorient(col).toKB().first,false)) {
    return ProverName.program;
  }
 else   if ((Boolean)ops.getOrDefault(AqlOption.program_allow_nontermination_unsafe) && ProgramProver.isProgram(Var.it,col.toKB().first,false)) {
    return ProverName.program;
  }
  throw new RuntimeException(""String_Node_Str"");
}",0.7335473515248796
130621,"public static <Ty,En,Sym,Fk,Att,Gen,Sk>DP<Ty,En,Sym,Fk,Att,Gen,Sk> create(AqlOptions ops,Collage<Ty,En,Sym,Fk,Att,Gen,Sk> col1){
  ProverName name=(ProverName)ops.getOrDefault(AqlOption.prover);
  if (name.equals(ProverName.auto)) {
    name=auto(ops,col1.simplify().first);
  }
  try {
switch (name) {
case auto:
      throw new RuntimeException(""String_Node_Str"");
case fail:
    return wrap(x -> {
      throw new RuntimeException();
    }
,new FailProver<>());
case free:
  return wrap(col1.simplify().second,new FreeProver<>(col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
case saturated:
return wrap(x -> x,saturatedProverHelper(ops,col1.toKB().third,col1.toKB().second,col1.toKB().first,col1));
case congruence:
return wrap(col1.simplify().second,new CongruenceProver<>(col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
case program:
boolean check=!(Boolean)ops.getOrDefault(AqlOption.dont_verify_is_appropriate_for_prover_unsafe);
return wrap(col1.simplify().second,new ProgramProver<>(check,Var.it,col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
case completion:
return wrap(col1.simplify().second,new CompletionProver<>(col1.toKB().second.keySet(),ops,col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first,col1.simplify().first));
case monoidal:
return wrap(col1.simplify().second,new MonoidalProver<>(col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
default :
throw new RuntimeException(""String_Node_Str"");
}
}
 catch (InterruptedException exn) {
throw new RuntimeInterruptedException(exn);
}
}","public static <Ty,En,Sym,Fk,Att,Gen,Sk>DP<Ty,En,Sym,Fk,Att,Gen,Sk> create(AqlOptions ops,Collage<Ty,En,Sym,Fk,Att,Gen,Sk> col1){
  ProverName name=(ProverName)ops.getOrDefault(AqlOption.prover);
  if (name.equals(ProverName.auto)) {
    name=auto(ops,col1.simplify().first);
  }
  try {
switch (name) {
case auto:
      throw new RuntimeException(""String_Node_Str"");
case fail:
    return wrap(x -> {
      throw new RuntimeException();
    }
,new FailProver<>());
case free:
  return wrap(col1.simplify().second,new FreeProver<>(col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
case saturated:
return wrap(x -> x,saturatedProverHelper(ops,col1.toKB().third,col1.toKB().second,col1.toKB().first,col1));
case congruence:
return wrap(col1.simplify().second,new CongruenceProver<>(col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
case program:
boolean check=!(Boolean)ops.getOrDefault(AqlOption.dont_verify_is_appropriate_for_prover_unsafe);
boolean allowNonTerm=(Boolean)ops.getOrDefault(AqlOption.program_allow_nontermination_unsafe);
try {
if (!allowNonTerm) {
col1=reorient(col1);
}
}
 catch (Exception ex) {
throw new RuntimeException(ex.getMessage() + ""String_Node_Str"");
}
return wrap(col1.simplify().second,new ProgramProver<>(check,Var.it,col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
case completion:
return wrap(col1.simplify().second,new CompletionProver<>(col1.toKB().second.keySet(),ops,col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first,col1.simplify().first));
case monoidal:
return wrap(col1.simplify().second,new MonoidalProver<>(col1.simplify().first.toKB().third,col1.simplify().first.toKB().second,col1.simplify().first.toKB().first));
default :
throw new RuntimeException(""String_Node_Str"");
}
}
 catch (InterruptedException exn) {
throw new RuntimeInterruptedException(exn);
}
}",0.5915492957746479
130622,"public static <X>Map<X,X> id(Collection<X> X){
  Map<X,X> ret=new HashMap<>();
  for (  X x : X) {
    ret.put(x,x);
  }
  return ret;
}","public static <X>Map<X,X> id(Collection<X> X){
  Map<X,X> ret=new LinkedHashMap<>();
  for (  X x : X) {
    ret.put(x,x);
  }
  return ret;
}",0.9784172661870504
130623,"private static Parser<InstExpColim<String,String,String,String,String,String,String,String,String,String,String>> colimInstExp(){
  Parser<List<catdata.Pair<String,InstExp<?,?,?,?,?,?,?,?,?>>>> nodes=Parsers.tuple(token(""String_Node_Str""),env(inst_ref.lazy(),""String_Node_Str"")).map(x -> x.b);
  Parser<List<catdata.Pair<String,TransExp<?,?,?,?,?,?,?,?,?,?,?,?,?>>>> edges=Parsers.tuple(token(""String_Node_Str""),env(trans_ref.lazy(),""String_Node_Str"")).map(x -> x.b);
  Parser<Tuple4<List<String>,List<catdata.Pair<String,InstExp<?,?,?,?,?,?,?,?,?>>>,List<catdata.Pair<String,TransExp<?,?,?,?,?,?,?,?,?,?,?,?,?>>>,List<catdata.Pair<String,String>>>> pa=Parsers.tuple(imports,nodes.optional(),edges.optional(),options);
  Parser<Tuple4<Token,GraphExp<?,?>,SchExp<?,?,?,?,?>,Token>> l=Parsers.tuple(token(""String_Node_Str""),graph_ref.lazy(),sch_ref.lazy(),token(""String_Node_Str""));
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Parser<InstExpColim<String,String,String,String,String,String,String,String,String,String,String>> ret=Parsers.tuple(l,pa,token(""String_Node_Str"")).map(x -> {
    return new InstExpColim(x.a.b,x.a.c,x.b.a,Util.newIfNull(x.b.b),Util.newIfNull(x.b.c),x.b.d);
  }
);
  return ret;
}","private static Parser<InstExpColim<String,String,String,String,String,String,String,String,String,String,String>> colimInstExp(){
  Parser<List<catdata.Pair<String,InstExp<?,?,?,?,?,?,?,?,?>>>> nodes=Parsers.tuple(token(""String_Node_Str""),env(inst_ref.lazy(),""String_Node_Str"")).map(x -> x.b);
  Parser<List<catdata.Pair<String,TransExp<?,?,?,?,?,?,?,?,?,?,?,?,?>>>> edges=Parsers.tuple(token(""String_Node_Str""),env(trans_ref.lazy(),""String_Node_Str"")).map(x -> x.b);
  Parser<Tuple4<List<String>,List<catdata.Pair<String,InstExp<?,?,?,?,?,?,?,?,?>>>,List<catdata.Pair<String,TransExp<?,?,?,?,?,?,?,?,?,?,?,?,?>>>,List<catdata.Pair<String,String>>>> pa=Parsers.tuple(Parsers.always(),nodes.optional(),edges.optional(),options);
  Parser<Tuple4<Token,GraphExp<?,?>,SchExp<?,?,?,?,?>,Token>> l=Parsers.tuple(token(""String_Node_Str""),graph_ref.lazy(),sch_ref.lazy(),token(""String_Node_Str""));
  @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) Parser<InstExpColim<String,String,String,String,String,String,String,String,String,String,String>> ret=Parsers.tuple(l,pa,token(""String_Node_Str"")).map(x -> {
    return new InstExpColim(x.a.b,x.a.c,x.b.a,Util.newIfNull(x.b.b),Util.newIfNull(x.b.c),x.b.d);
  }
);
  return ret;
}",0.9906007355946056
130624,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static final void instExp(){
  Parser<InstExp<?,?,?,?,?,?,?,?,?>> var=ident.map(InstExpVar::new), empty=Parsers.tuple(token(""String_Node_Str""),sch_ref.get()).map(x -> new InstExpEmpty<>(x.b)), sigma=Parsers.tuple(token(""String_Node_Str""),map_ref.lazy(),inst_ref.lazy(),options.between(token(""String_Node_Str""),token(""String_Node_Str"")).optional()).map(x -> new InstExpSigma(x.b,x.c,x.d == null ? new HashMap<>() : Util.toMapSafely(x.d))), delta=Parsers.tuple(token(""String_Node_Str""),map_ref.lazy(),inst_ref.lazy()).map(x -> new InstExpDelta(x.b,x.c)), distinct=Parsers.tuple(token(""String_Node_Str""),inst_ref.lazy()).map(x -> new InstExpDistinct(x.b)), eval=Parsers.tuple(token(""String_Node_Str""),query_ref.lazy(),inst_ref.lazy()).map(x -> new InstExpEval(x.b,x.c)), ret=Parsers.or(empty,instExpRaw(),var,sigma,delta,distinct,eval,colimInstExp());
  inst_ref.set(ret);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static final void instExp(){
  Parser<InstExp<?,?,?,?,?,?,?,?,?>> var=ident.map(InstExpVar::new), empty=Parsers.tuple(token(""String_Node_Str""),sch_ref.get()).map(x -> new InstExpEmpty<>(x.b)), sigma=Parsers.tuple(token(""String_Node_Str""),map_ref.lazy(),inst_ref.lazy(),options.between(token(""String_Node_Str""),token(""String_Node_Str"")).optional()).map(x -> new InstExpSigma(x.b,x.c,x.d == null ? new HashMap<>() : Util.toMapSafely(x.d))), delta=Parsers.tuple(token(""String_Node_Str""),map_ref.lazy(),inst_ref.lazy()).map(x -> new InstExpDelta(x.b,x.c)), distinct=Parsers.tuple(token(""String_Node_Str""),inst_ref.lazy()).map(x -> new InstExpDistinct(x.b)), eval=Parsers.tuple(token(""String_Node_Str""),query_ref.lazy(),inst_ref.lazy()).map(x -> new InstExpEval(x.b,x.c)), dom=Parsers.tuple(token(""String_Node_Str""),trans_ref.lazy()).map(x -> new InstExpDom(x.b)), cod=Parsers.tuple(token(""String_Node_Str""),trans_ref.lazy()).map(x -> new InstExpCod(x.b)), ret=Parsers.or(empty,instExpRaw(),var,sigma,delta,distinct,eval,colimInstExp(),dom,cod);
  inst_ref.set(ret);
}",0.9040697674418604
130625,"public InstExpColim(GraphExp<N,E> shape,SchExp<Ty,En,Sym,Fk,Att> schema,List<String> imports,List<Pair<N,InstExp<Ty,En,Sym,Fk,Att,Gen,Sk,X,Y>>> nodes,List<Pair<E,TransExp<Ty,En,Sym,Fk,Att,Gen,Sk,Gen,Sk,X,Y,X,Y>>> edges,List<Pair<String,String>> options){
  this.schema=schema;
  this.shape=shape;
  this.nodes=new Ctx<>(nodes);
  this.edges=new Ctx<>(edges);
  this.options=Util.toMapSafely(options);
  this.imports=imports;
}","public InstExpColim(GraphExp<N,E> shape,SchExp<Ty,En,Sym,Fk,Att> schema,List<String> imports,List<Pair<N,InstExp<Ty,En,Sym,Fk,Att,Gen,Sk,X,Y>>> nodes,List<Pair<E,TransExp<Ty,En,Sym,Fk,Att,Gen,Sk,Gen,Sk,X,Y,X,Y>>> edges,List<Pair<String,String>> options){
  this.schema=schema;
  this.shape=shape;
  this.nodes=new Ctx<>(nodes);
  this.edges=new Ctx<>(edges);
  this.options=Util.toMapSafely(options);
}",0.9710144927536232
130626,"public Kind kind(){
  return Kind.INSTANCE;
}","@Override public Kind kind(){
  return Kind.INSTANCE;
}",0.9
130627,"public Pair<N,N> type(N src,List<E> path){
  Util.assertNotNull(src,path);
  N dst=src;
  for (  E e : path) {
    if (!edges.containsKey(e)) {
      throw new RuntimeException(""String_Node_Str"" + e);
    }
    if (!src.equals(edges.get(e).first)) {
      throw new RuntimeException(""String_Node_Str"" + path + ""String_Node_Str""+ e+ ""String_Node_Str""+ edges.get(e).first+ ""String_Node_Str""+ src);
    }
    dst=edges.get(e).second;
  }
  return new Pair<>(src,dst);
}","public Pair<N,N> type(N src,List<E> path){
  Util.assertNotNull(src,path);
  N dst=src;
  for (  E e : path) {
    if (!edges.containsKey(e)) {
      throw new RuntimeException(""String_Node_Str"" + e);
    }
    if (!dst.equals(edges.get(e).first)) {
      throw new RuntimeException(""String_Node_Str"" + path + ""String_Node_Str""+ e+ ""String_Node_Str""+ edges.get(e).first+ ""String_Node_Str""+ src);
    }
    dst=edges.get(e).second;
  }
  return new Pair<>(src,dst);
}",0.9935622317596566
130628,"/** 
 * Calculates the similarity (a number within 0 and 1) between two strings. Is Levenshtein distance 
 */
public static double similarity(String s1,String s2){
  String longer=s1, shorter=s2;
  if (s1.length() < s2.length()) {
    longer=s2;
    shorter=s1;
  }
  int longerLength=longer.length();
  if (longerLength == 0) {
    return 1.0;
  }
  return (longerLength - editDistance(longer,shorter)) / (double)longerLength;
}","/** 
 * Calculates a similarity (a number within 0 and 1) between two strings.
 */
public static double similarity(String s1,String s2){
  if (s1.equals(s2)) {
    return 1.0;
  }
  return editDistance(s1,s2);
}",0.596875
130629,"@Override public Match<N1,E1,N2,E2> bestMatch(){
  Map<N1,N2> nodes=new HashMap<>();
  Map<E1,List<E2>> edges=new HashMap<>();
  for (  N1 s : src.nodes) {
    double max_d=-1;
    N2 max_t=null;
    for (    N2 t : dst.nodes) {
      double cur_d=params.apply(s.toString(),t.toString());
      if (cur_d > max_d) {
        max_d=cur_d;
        max_t=t;
      }
    }
    if (max_t == null) {
      throw new RuntimeException(""String_Node_Str"" + s);
    }
    nodes.put(s,max_t);
  }
  for (  E1 c : src.edges.keySet()) {
    double max_d=-1;
    E2 max_c=null;
    for (    E2 d : dst.edges(nodes.get(src.edges.get(c).first),nodes.get(src.edges.get(c).second))) {
      double cur_d=params.apply(c.toString(),d.toString());
      if (cur_d > max_d) {
        max_d=cur_d;
        max_c=d;
      }
    }
    if (max_c == null) {
      throw new RuntimeException(""String_Node_Str"" + c + ""String_Node_Str""+ Util.sep(nodes,""String_Node_Str"",""String_Node_Str""));
    }
    edges.put(c,Util.singList(max_c));
  }
  return new Match<>(src,dst,nodes,edges);
}","@Override public Match<N1,E1,N2,E2> bestMatch(){
  Map<N1,N2> nodes=new HashMap<>();
  Map<E1,List<E2>> edges=new HashMap<>();
  for (  N1 s : src.nodes) {
    int min_d=Integer.MAX_VALUE;
    N2 min_t=null;
    for (    N2 t : dst.nodes) {
      int cur_d=params.apply(s.toString(),t.toString());
      if (cur_d < min_d) {
        min_d=cur_d;
        min_t=t;
      }
    }
    if (min_t == null) {
      throw new RuntimeException(""String_Node_Str"" + s);
    }
    nodes.put(s,min_t);
  }
  for (  E1 c : src.edges.keySet()) {
    int min_d=Integer.MAX_VALUE;
    E2 min_c=null;
    N2 n2_s=nodes.get(src.edges.get(c).first);
    N2 n2_t=nodes.get(src.edges.get(c).second);
    for (    E2 d : dst.edges(n2_s,n2_t)) {
      int cur_d=params.apply(c.toString(),d.toString());
      if (cur_d < min_d) {
        min_d=cur_d;
        min_c=d;
      }
    }
    if (min_c != null) {
      edges.put(c,Util.singList(min_c));
    }
 else     if (n2_s.equals(n2_t)) {
      edges.put(c,new LinkedList<>());
    }
 else {
      ShortestPath<N2,E2> sp=new ShortestPath<>(this.dst,n2_s);
      if (sp.hasPathTo(n2_t)) {
        edges.put(c,sp.pathTo(n2_t));
      }
 else {
        throw new RuntimeException(""String_Node_Str"" + c + ""String_Node_Str""+ Util.sep(nodes,""String_Node_Str"",""String_Node_Str""));
      }
    }
  }
  return new Match<>(src,dst,nodes,edges);
}",0.5973487986743994
130630,"@Override public BiFunction<String,String,Double> createParams(Map<String,String> options){
  if (!options.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return EditDistance::similarity;
}","@Override public BiFunction<String,String,Integer> createParams(Map<String,String> options){
  if (!options.isEmpty()) {
    throw new RuntimeException(""String_Node_Str"");
  }
  return EditDistance::editDistance;
}",0.9176470588235294
130631,"public static void main(String[] args){
  if (args.length == 1) {
    try {
      FQLProgram init=FQLParser.program(args[0]);
      Triple<FqlEnvironment,String,List<Throwable>> envX=Driver.makeEnv(init);
      if (envX.third.size() > 0) {
        throw new RuntimeException(""String_Node_Str"" + envX.third);
      }
      System.out.println(""String_Node_Str"");
      System.out.println(envX.second);
      return;
    }
 catch (    Throwable err) {
      err.printStackTrace(System.err);
      System.out.println(err.getLocalizedMessage());
      return;
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      try {
        NEWDEBUG.load(true);
        UIManager.setLookAndFeel(NEWDEBUG.debug.general.look_and_feel);
        final JFrame f=new JFrame(""String_Node_Str"");
        final Pair<JPanel,MenuBar> gui=GUI.makeGUI(f);
        f.setContentPane(gui.first);
        f.setMenuBar(gui.second);
        f.pack();
        f.setSize(840,630);
        ((CodeEditor<?,?,?>)GUI.editors.getComponentAt(0)).topArea.requestFocusInWindow();
        f.setLocationRelativeTo(null);
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        f.addWindowListener(new java.awt.event.WindowAdapter(){
          @Override public void windowClosing(          java.awt.event.WindowEvent windowEvent){
            GUI.exitAction();
          }
        }
);
      }
 catch (      Throwable e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
}","public static void main(String[] args){
  if (args.length == 1) {
    try {
      FQLProgram init=FQLParser.program(args[0]);
      Triple<FqlEnvironment,String,List<Throwable>> envX=Driver.makeEnv(init,new String[0]);
      if (envX.third.size() > 0) {
        throw new RuntimeException(""String_Node_Str"" + envX.third);
      }
      System.out.println(""String_Node_Str"");
      System.out.println(envX.second);
      return;
    }
 catch (    Throwable err) {
      err.printStackTrace(System.err);
      System.out.println(err.getLocalizedMessage());
      return;
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      try {
        NEWDEBUG.load(true);
        UIManager.setLookAndFeel(NEWDEBUG.debug.general.look_and_feel);
        final JFrame f=new JFrame(""String_Node_Str"");
        final Pair<JPanel,MenuBar> gui=GUI.makeGUI(f);
        f.setContentPane(gui.first);
        f.setMenuBar(gui.second);
        f.pack();
        f.setSize(840,630);
        ((CodeEditor<?,?,?>)GUI.editors.getComponentAt(0)).topArea.requestFocusInWindow();
        f.setLocationRelativeTo(null);
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        f.addWindowListener(new java.awt.event.WindowAdapter(){
          @Override public void windowClosing(          java.awt.event.WindowEvent windowEvent){
            GUI.exitAction();
          }
        }
);
      }
 catch (      Throwable e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null,""String_Node_Str"" + e.getMessage());
      }
    }
  }
);
}",0.9955835962145112
130632,"private String translate(String program){
  XProgram init;
  try {
    init=XParser.program(program);
  }
 catch (  ParserException e) {
    int col=e.getLocation().column;
    int line=e.getLocation().line;
    topArea.requestFocusInWindow();
    topArea.area.setCaretPosition(topArea.area.getDocument().getDefaultRootElement().getElement(line - 1).getStartOffset() + (col - 1));
    String s=e.getMessage();
    String t=s.substring(s.indexOf(""String_Node_Str""));
    t.split(""String_Node_Str"");
    e.printStackTrace();
    return ""String_Node_Str"" + e.getLocalizedMessage();
  }
catch (  Throwable e) {
    e.printStackTrace();
    return ""String_Node_Str"" + e.getLocalizedMessage();
  }
  if (init == null) {
    return ""String_Node_Str"";
  }
  String isaX=null, matX=null;
  XExp.XSchema isa=null, mat=null;
  for (  String line : init.order) {
    XExp exp=init.exps.get(line);
    if (exp instanceof XExp.XSchema) {
      if (isaX == null) {
        isaX=line;
        isa=(XSchema)exp;
        continue;
      }
      if (matX == null) {
        matX=line;
        mat=(XSchema)exp;
        continue;
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  if (isaX == null || matX == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  XEnvironment env;
  try {
    env=XDriver.makeEnv(program,init);
  }
 catch (  LineException e) {
    String toDisplay=""String_Node_Str"" + e.kind + ""String_Node_Str""+ e.decl+ ""String_Node_Str""+ e.getLocalizedMessage();
    e.printStackTrace();
    topArea.requestFocusInWindow();
    Integer theLine=init.getLine(e.decl);
    topArea.area.setCaretPosition(theLine);
    return toDisplay;
  }
catch (  Throwable re) {
    return ""String_Node_Str"" + re.getLocalizedMessage();
  }
  @SuppressWarnings(""String_Node_Str"") XCtx<String> isa0=(XCtx<String>)env.objs.get(isaX);
  @SuppressWarnings(""String_Node_Str"") XCtx<String> mat0=(XCtx<String>)env.objs.get(matX);
  return go(isa,mat,isaX,matX,isa0,mat0,name.getText(),kid.getText(),instField.getText(),isaField.getText());
}","private String translate(String program){
  XProgram init;
  try {
    init=XParser.program(program);
  }
 catch (  ParserException e) {
    int col=e.getLocation().column;
    int line=e.getLocation().line;
    topArea.requestFocusInWindow();
    topArea.area.setCaretPosition(topArea.area.getDocument().getDefaultRootElement().getElement(line - 1).getStartOffset() + (col - 1));
    String s=e.getMessage();
    String t=s.substring(s.indexOf(""String_Node_Str""));
    t.split(""String_Node_Str"");
    e.printStackTrace();
    return ""String_Node_Str"" + e.getLocalizedMessage();
  }
catch (  Throwable e) {
    e.printStackTrace();
    return ""String_Node_Str"" + e.getLocalizedMessage();
  }
  if (init == null) {
    return ""String_Node_Str"";
  }
  String isaX=null, matX=null;
  XExp.XSchema isa=null, mat=null;
  for (  String line : init.order) {
    XExp exp=init.exps.get(line);
    if (exp instanceof XExp.XSchema) {
      if (isaX == null) {
        isaX=line;
        isa=(XSchema)exp;
        continue;
      }
      if (matX == null) {
        matX=line;
        mat=(XSchema)exp;
        continue;
      }
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  if (isaX == null || matX == null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  XEnvironment env;
  try {
    env=XDriver.makeEnv(program,init,new String[0]);
  }
 catch (  LineException e) {
    String toDisplay=""String_Node_Str"" + e.kind + ""String_Node_Str""+ e.decl+ ""String_Node_Str""+ e.getLocalizedMessage();
    e.printStackTrace();
    topArea.requestFocusInWindow();
    Integer theLine=init.getLine(e.decl);
    topArea.area.setCaretPosition(theLine);
    return toDisplay;
  }
catch (  Throwable re) {
    return ""String_Node_Str"" + re.getLocalizedMessage();
  }
  @SuppressWarnings(""String_Node_Str"") XCtx<String> isa0=(XCtx<String>)env.objs.get(isaX);
  @SuppressWarnings(""String_Node_Str"") XCtx<String> mat0=(XCtx<String>)env.objs.get(matX);
  return go(isa,mat,isaX,matX,isa0,mat0,name.getText(),kid.getText(),instField.getText(),isaField.getText());
}",0.9965920155793574
130633,"@Override protected XEnvironment makeEnv(String str,XProgram init){
  return XDriver.makeEnv(str,init);
}","@Override protected XEnvironment makeEnv(String str,XProgram init){
  return XDriver.makeEnv(str,init,toUpdate);
}",0.958904109589041
130634,"@SuppressWarnings({""String_Node_Str""}) public static XEnvironment makeEnv(String str,XProgram init){
  if (NEWDEBUG.debug.fpql.x_typing) {
    init.doTypes();
  }
  XEnvironment ret=new XEnvironment(init,str);
  Map<String,Integer> extra=new HashMap<>();
  int i=0;
  for (  String k : init.order) {
    XExp se=init.exps.get(k);
    try {
      XObject xxx=se.accept(init,new XOps(ret));
      if (xxx == null) {
        throw new RuntimeException();
      }
      if (se instanceof Flower) {
        Flower f=(Flower)se;
        if (ret.objs.containsKey(f.ty)) {
          throw new RuntimeException(""String_Node_Str"" + f.ty);
        }
        XCtx c=(XCtx)xxx;
        if (f.ty != null) {
          ret.objs.put(f.ty,c.schema);
          extra.put(f.ty,i);
        }
      }
      if (ret.objs.containsKey(k)) {
        throw new RuntimeException(""String_Node_Str"" + k);
      }
      ret.objs.put(k,xxx);
      i++;
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
    }
  }
  int j=0;
  for (  Entry<String,Integer> e : extra.entrySet()) {
    init.order.add(e.getValue() + j,e.getKey());
    j++;
  }
  return ret;
}","@SuppressWarnings({""String_Node_Str""}) public static XEnvironment makeEnv(String str,XProgram init,String[] toUpdate){
  if (NEWDEBUG.debug.fpql.x_typing) {
    init.doTypes();
  }
  XEnvironment ret=new XEnvironment(init,str);
  Map<String,Integer> extra=new HashMap<>();
  int i=0;
  for (  String k : init.order) {
    XExp se=init.exps.get(k);
    try {
      XObject xxx=se.accept(init,new XOps(ret));
      if (xxx == null) {
        throw new RuntimeException();
      }
      if (se instanceof Flower) {
        Flower f=(Flower)se;
        if (ret.objs.containsKey(f.ty)) {
          throw new RuntimeException(""String_Node_Str"" + f.ty);
        }
        XCtx c=(XCtx)xxx;
        if (f.ty != null) {
          ret.objs.put(f.ty,c.schema);
          extra.put(f.ty,i);
        }
      }
      if (ret.objs.containsKey(k)) {
        throw new RuntimeException(""String_Node_Str"" + k);
      }
      ret.objs.put(k,xxx);
      toUpdate[0]=""String_Node_Str"" + k;
      i++;
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
    }
  }
  int j=0;
  for (  Entry<String,Integer> e : extra.entrySet()) {
    init.order.add(e.getValue() + j,e.getKey());
    j++;
  }
  return ret;
}",0.9762000806776926
130635,"public static Triple<FqlEnvironment,String,List<Throwable>> makeEnv(FQLProgram prog){
  List<Throwable> exns=new LinkedList<>();
  Map<String,Signature> sigs=new HashMap<>();
  Map<String,Mapping> maps=new HashMap<>();
  Map<String,Instance> insts=new HashMap<>();
  Map<String,Query> queries=new HashMap<>();
  Map<String,FullQuery> full_queries=new HashMap<>();
  for (  String k : prog.sigs.keySet()) {
    try {
      SigExp v=prog.sigs.get(k);
      v.typeOf(prog);
      sigs.put(k,v.toSig(prog));
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.maps.keySet()) {
    try {
      MapExp v=prog.maps.get(k);
      v.type(prog);
      maps.put(k,v.toMap(prog));
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.queries.keySet()) {
    try {
      QueryExp v=prog.queries.get(k);
      v.type(prog);
      queries.put(k,Query.toQuery(prog,v));
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.full_queries.keySet()) {
    try {
      FullQueryExp v=prog.full_queries.get(k);
      v.type(prog);
      full_queries.put(k,FullQuery.toQuery(prog,v));
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.insts.keySet()) {
    try {
      InstExp v=prog.insts.get(k);
      v.type(prog);
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.transforms.keySet()) {
    try {
      TransExp v=prog.transforms.get(k);
      v.type(prog);
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  prog=rewriteQueries(prog);
  Triple<Map<String,Set<Map<Object,Object>>>,String,List<Throwable>> res=JDBCBridge.run(prog);
  exns.addAll(res.third);
  for (  String k : prog.insts.keySet()) {
    try {
      Signature s=prog.insts.get(k).type(prog).toSig(prog);
      List<Pair<String,List<Pair<Object,Object>>>> b=PSMGen.gather(k,s,res.first);
      insts.put(k,new Instance(s,b));
    }
 catch (    Exception re) {
      System.out.println(""String_Node_Str"" + k + ""String_Node_Str""+ prog.insts.get(k));
      System.out.println(prog);
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  Map<String,Transform> transforms=new HashMap<>();
  for (  String k : prog.transforms.keySet()) {
    try {
      Pair<String,String> val=prog.transforms.get(k).type(prog);
      InstExp i=prog.insts.get(val.first);
      Signature s=i.type(prog).toSig(prog);
      List<Pair<String,List<Pair<Object,Object>>>> b=PSMGen.gather(k,s,res.first);
      transforms.put(k,new Transform(insts.get(val.first),insts.get(val.second),b));
    }
 catch (    Exception re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  if (NEWDEBUG.debug.fql.VALIDATE_WITH_EDS) {
    try {
      validateWithEds(prog,insts);
    }
 catch (    FQLException fe) {
      fe.printStackTrace();
      throw new RuntimeException(fe.getLocalizedMessage());
    }
  }
  String toRetStr=res.second.trim();
  if (containsFullSigma(prog)) {
    toRetStr=""String_Node_Str"";
  }
  return new Triple<>(new FqlEnvironment(sigs,maps,insts,queries,transforms,full_queries),toRetStr,dedup(exns));
}","public static Triple<FqlEnvironment,String,List<Throwable>> makeEnv(FQLProgram prog,String[] toUpdate){
  List<Throwable> exns=new LinkedList<>();
  Map<String,Signature> sigs=new HashMap<>();
  Map<String,Mapping> maps=new HashMap<>();
  Map<String,Instance> insts=new HashMap<>();
  Map<String,Query> queries=new HashMap<>();
  Map<String,FullQuery> full_queries=new HashMap<>();
  for (  String k : prog.sigs.keySet()) {
    try {
      SigExp v=prog.sigs.get(k);
      v.typeOf(prog);
      sigs.put(k,v.toSig(prog));
      toUpdate[0]=""String_Node_Str"" + k;
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.maps.keySet()) {
    try {
      MapExp v=prog.maps.get(k);
      v.type(prog);
      maps.put(k,v.toMap(prog));
      toUpdate[0]=""String_Node_Str"" + k;
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.queries.keySet()) {
    try {
      QueryExp v=prog.queries.get(k);
      v.type(prog);
      queries.put(k,Query.toQuery(prog,v));
      toUpdate[0]=""String_Node_Str"" + k;
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.full_queries.keySet()) {
    try {
      FullQueryExp v=prog.full_queries.get(k);
      v.type(prog);
      full_queries.put(k,FullQuery.toQuery(prog,v));
      toUpdate[0]=""String_Node_Str"" + k;
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.insts.keySet()) {
    try {
      InstExp v=prog.insts.get(k);
      v.type(prog);
      toUpdate[0]=""String_Node_Str"" + v + ""String_Node_Str"";
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  for (  String k : prog.transforms.keySet()) {
    try {
      TransExp v=prog.transforms.get(k);
      v.type(prog);
      toUpdate[0]=""String_Node_Str"" + v + ""String_Node_Str"";
    }
 catch (    RuntimeException re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  prog=rewriteQueries(prog);
  toUpdate[0]=""String_Node_Str"";
  Triple<Map<String,Set<Map<Object,Object>>>,String,List<Throwable>> res=JDBCBridge.run(prog);
  toUpdate[0]=""String_Node_Str"";
  exns.addAll(res.third);
  for (  String k : prog.insts.keySet()) {
    try {
      Signature s=prog.insts.get(k).type(prog).toSig(prog);
      List<Pair<String,List<Pair<Object,Object>>>> b=PSMGen.gather(k,s,res.first);
      insts.put(k,new Instance(s,b));
      toUpdate[0]=""String_Node_Str"" + k;
    }
 catch (    Exception re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  Map<String,Transform> transforms=new HashMap<>();
  for (  String k : prog.transforms.keySet()) {
    try {
      Pair<String,String> val=prog.transforms.get(k).type(prog);
      InstExp i=prog.insts.get(val.first);
      Signature s=i.type(prog).toSig(prog);
      List<Pair<String,List<Pair<Object,Object>>>> b=PSMGen.gather(k,s,res.first);
      transforms.put(k,new Transform(insts.get(val.first),insts.get(val.second),b));
      toUpdate[0]=""String_Node_Str"" + k;
    }
 catch (    Exception re) {
      re.printStackTrace();
      LineException exn=new LineException(re.getLocalizedMessage(),k,""String_Node_Str"");
      if (NEWDEBUG.debug.fql.continue_on_error) {
        exns.add(exn);
      }
 else {
        throw exn;
      }
    }
  }
  toUpdate[0]=""String_Node_Str"";
  if (NEWDEBUG.debug.fql.VALIDATE_WITH_EDS) {
    try {
      validateWithEds(prog,insts);
    }
 catch (    FQLException fe) {
      fe.printStackTrace();
      throw new RuntimeException(fe.getLocalizedMessage());
    }
  }
  String toRetStr=res.second.trim();
  if (containsFullSigma(prog)) {
    toRetStr=""String_Node_Str"";
  }
  return new Triple<>(new FqlEnvironment(sigs,maps,insts,queries,transforms,full_queries),toRetStr,dedup(exns));
}",0.9398189595145728
130636,"@Override protected FqlEnvironment makeEnv(String str,FQLProgram init){
  Triple<FqlEnvironment,String,List<Throwable>> envX=Driver.makeEnv(init);
  if (envX.third.isEmpty()) {
    textForCache.put(envX.first,envX.second);
    return envX.first;
  }
 else {
    String ret=""String_Node_Str"";
    for (    Throwable t : envX.third) {
      ret+=t.getMessage() + ""String_Node_Str"";
      t.printStackTrace();
    }
    throw new RuntimeException(ret);
  }
}","@Override protected FqlEnvironment makeEnv(String str,FQLProgram init){
  Triple<FqlEnvironment,String,List<Throwable>> envX=Driver.makeEnv(init,toUpdate);
  if (envX.third.isEmpty()) {
    textForCache.put(envX.first,envX.second);
    return envX.first;
  }
 else {
    String ret=""String_Node_Str"";
    for (    Throwable t : envX.third) {
      ret+=t.getMessage() + ""String_Node_Str"";
      t.printStackTrace();
    }
    throw new RuntimeException(ret);
  }
}",0.9902067464635472
130637,"@Override protected FQLPPEnvironment makeEnv(String program,FQLPPProgram init){
  return FQLPPDriver.makeEnv(program,init);
}","@Override protected FQLPPEnvironment makeEnv(String program,FQLPPProgram init){
  return FQLPPDriver.makeEnv(program,init,toUpdate);
}",0.9652509652509652
130638,"public static FQLPPEnvironment makeEnv(String str,FQLPPProgram init){
  Map<String,Fn<?,?>> fns=new HashMap<>();
  Map<String,Set<?>> sets=new HashMap<>();
  Map<String,Category<?,?>> cats=new HashMap<>();
  Map<String,Functor<?,?,?,?>> ftrs=new HashMap<>();
  Map<String,Transform<?,?,?,?>> trans=new HashMap<>();
  FQLPPEnvironment ret=new FQLPPEnvironment(init,str,sets,fns,cats,ftrs,trans);
  for (  Entry<String,CatExp> k : init.cats.entrySet()) {
    init.cats.put(k.getKey(),k.getValue().accept(init,new PreProcessor()));
  }
  for (  String k : init.order) {
    SetExp se=init.sets.get(k);
    if (se != null) {
      try {
        Set<?> xxx=se.accept(init,new SetOps(ret));
        if (!(xxx instanceof Set)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        sets.put(k,xxx);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
    FnExp fe=init.fns.get(k);
    if (fe != null) {
      try {
        Fn<?,?> xxx=fe.accept(init,new SetOps(ret));
        if (!(xxx instanceof Fn)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        fns.put(k,xxx);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
    CatExp ce=init.cats.get(k);
    if (ce != null) {
      try {
        Category<?,?> xxx=ce.accept(init,new CatOps(ret));
        if (!(xxx instanceof Category)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        cats.put(k,xxx);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
    FunctorExp FE=init.ftrs.get(k);
    if (FE != null) {
      try {
        Functor<?,?,?,?> xxx=FE.accept(init,new CatOps(ret));
        if (!(xxx instanceof Functor)) {
          throw new RuntimeException(""String_Node_Str"" + xxx.getClass() + ""String_Node_Str""+ xxx);
        }
        ftrs.put(k,xxx);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
    TransExp te=init.trans.get(k);
    if (te != null) {
      try {
        Transform<?,?,?,?> xxx=te.accept(init,new CatOps(ret));
        if (!(xxx instanceof Transform)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        trans.put(k,xxx);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
  }
  return ret;
}","public static FQLPPEnvironment makeEnv(String str,FQLPPProgram init,String[] toUpdate){
  Map<String,Fn<?,?>> fns=new HashMap<>();
  Map<String,Set<?>> sets=new HashMap<>();
  Map<String,Category<?,?>> cats=new HashMap<>();
  Map<String,Functor<?,?,?,?>> ftrs=new HashMap<>();
  Map<String,Transform<?,?,?,?>> trans=new HashMap<>();
  FQLPPEnvironment ret=new FQLPPEnvironment(init,str,sets,fns,cats,ftrs,trans);
  for (  Entry<String,CatExp> k : init.cats.entrySet()) {
    init.cats.put(k.getKey(),k.getValue().accept(init,new PreProcessor()));
  }
  for (  String k : init.order) {
    SetExp se=init.sets.get(k);
    if (se != null) {
      try {
        Set<?> xxx=se.accept(init,new SetOps(ret));
        if (!(xxx instanceof Set)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        sets.put(k,xxx);
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
      toUpdate[0]=""String_Node_Str"" + k;
    }
    FnExp fe=init.fns.get(k);
    if (fe != null) {
      try {
        Fn<?,?> xxx=fe.accept(init,new SetOps(ret));
        if (!(xxx instanceof Fn)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        fns.put(k,xxx);
        toUpdate[0]=""String_Node_Str"" + k;
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
    CatExp ce=init.cats.get(k);
    if (ce != null) {
      try {
        Category<?,?> xxx=ce.accept(init,new CatOps(ret));
        if (!(xxx instanceof Category)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        cats.put(k,xxx);
        toUpdate[0]=""String_Node_Str"" + k;
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
    FunctorExp FE=init.ftrs.get(k);
    if (FE != null) {
      try {
        Functor<?,?,?,?> xxx=FE.accept(init,new CatOps(ret));
        if (!(xxx instanceof Functor)) {
          throw new RuntimeException(""String_Node_Str"" + xxx.getClass() + ""String_Node_Str""+ xxx);
        }
        ftrs.put(k,xxx);
        toUpdate[0]=""String_Node_Str"" + k;
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
    TransExp te=init.trans.get(k);
    if (te != null) {
      try {
        Transform<?,?,?,?> xxx=te.accept(init,new CatOps(ret));
        if (!(xxx instanceof Transform)) {
          throw new RuntimeException(""String_Node_Str"");
        }
        trans.put(k,xxx);
        toUpdate[0]=""String_Node_Str"" + k;
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new LineException(t.getLocalizedMessage(),k,""String_Node_Str"");
      }
    }
  }
  return ret;
}",0.9590062111801242
130639,"@SuppressWarnings(""String_Node_Str"") public void runAction(){
  toDisplay=null;
  if (temp != null) {
    temp.stop();
  }
  temp=null;
  if (thread != null) {
    thread.stop();
  }
  thread=null;
  thread=new Thread(this);
  temp=new Thread(new Runnable(){
    @Override public void run(){
      try {
        respArea.setText(""String_Node_Str"");
        for (; ; ) {
          Thread.sleep(250);
          if (toDisplay != null) {
            respArea.setText(toDisplay);
            return;
          }
 else           if (thread != null) {
            respArea.setText(respArea.getText() + ""String_Node_Str"");
          }
        }
      }
 catch (      InterruptedException ie) {
        ie.printStackTrace();
      }
catch (      Throwable tt) {
        tt.printStackTrace();
        respArea.setText(tt.getMessage());
      }
    }
  }
);
  temp.setPriority(Thread.MIN_PRIORITY);
  temp.start();
  thread.setPriority(Thread.MIN_PRIORITY);
  thread.start();
}","@SuppressWarnings(""String_Node_Str"") public void runAction(){
  toDisplay=null;
  if (temp != null) {
    temp.stop();
  }
  temp=null;
  if (thread != null) {
    thread.stop();
  }
  thread=new Thread(this);
  temp=new Thread(new Runnable(){
    @Override public void run(){
      try {
        respArea.setText(""String_Node_Str"");
        int count=0;
        for (; ; ) {
          count++;
          Thread.sleep(250);
          if (toDisplay != null) {
            respArea.setText(toDisplay);
            return;
          }
 else           if (thread != null) {
            if (toUpdate[0] != null) {
              if ((count % 8) == 0) {
                respArea.setText(toUpdate[0] + ""String_Node_Str"");
              }
 else {
                respArea.setText(respArea.getText() + ""String_Node_Str"");
              }
            }
 else {
              if (respArea.getText().length() > 1024 * 16) {
                respArea.setText(""String_Node_Str"");
              }
              respArea.setText(respArea.getText() + ""String_Node_Str"");
            }
          }
        }
      }
 catch (      InterruptedException ie) {
        ie.printStackTrace();
      }
catch (      Throwable tt) {
        tt.printStackTrace();
        respArea.setText(tt.getMessage());
      }
    }
  }
);
  temp.setPriority(Thread.MIN_PRIORITY);
  temp.start();
  thread.setPriority(Thread.MIN_PRIORITY);
  thread.start();
}",0.7830465799412505
130640,"@Override protected Environment<OplObject> makeEnv(String str,Program<OplExp> init){
  return OplDriver.makeEnv(str,init);
}","@Override protected Environment<OplObject> makeEnv(String str,Program<OplExp> init){
  last_env=OplDriver.makeEnv(str,init,toUpdate,last_str,last_prog,last_env);
  last_prog=init;
  last_str=str;
  return last_env;
}",0.5705882352941176
130641,"public static final Parser<?> decl(){
  Parser p1=Parsers.tuple(ident(),term(""String_Node_Str""),exp());
  return Parsers.or(new Parser[]{p1});
}","public static final Parser<?> decl(){
  return null;
}",0.5151515151515151
130642,"public static final Parser<?> exp(){
  Reference ref=Parser.newReference();
  Parser<?> theory=theory();
  Parser<?> model=model();
  Parser<?> trans=trans();
  Parser<?> trans_pres=trans_pres();
  Parser<?> eval=Parsers.tuple(term(""String_Node_Str""),ident(),oplTerm());
  Parser<?> java=java();
  Parser<?> mapping=mapping();
  Parser<?> delta=Parsers.tuple(term(""String_Node_Str""),ident(),ident());
  Parser<?> sigma=Parsers.tuple(term(""String_Node_Str""),ident(),ident());
  Parser<?> presentation=presentation();
  Parser<?> sat=Parsers.tuple(term(""String_Node_Str""),ident());
  Parser<?> ubersat=Parsers.tuple(term(""String_Node_Str""),ident(),ident());
  Parser<?> unsat=Parsers.tuple(term(""String_Node_Str""),ident());
  Parser<?> flower=flower();
  Parser<?> schema=schema();
  Parser<?> projE=Parsers.tuple(term(""String_Node_Str""),ident());
  Parser<?> projA=Parsers.tuple(term(""String_Node_Str""),ident());
  Parser<?> projT=Parsers.tuple(term(""String_Node_Str""),ident());
  Parser<?> projEA=Parsers.tuple(term(""String_Node_Str""),ident());
  Parser<?> inst=Parsers.tuple(term(""String_Node_Str""),ident(),ident(),ident());
  Parser<?> query=query();
  Parser<?> idQ=Parsers.tuple(term(""String_Node_Str""),ident());
  Parser<?> apply=Parsers.tuple(term(""String_Node_Str""),ident(),ident());
  Parser<?> a=Parsers.or(new Parser<?>[]{apply,idQ,query,projEA,inst,schema,projE,projA,projT,flower,ubersat,sigma,sat,unsat,presentation,delta,mapping,theory,model,eval,trans,trans_pres,java});
  ref.set(a);
  return a;
}","public static final Parser<?> exp(){
  Reference ref=Parser.newReference();
  Parser<?> theory=theory();
  Parser<?> a=Parsers.or(new Parser<?>[]{theory});
  ref.set(a);
  return a;
}",0.2158018867924528
130643,"public <X>OplInst<S2,C2,V2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>> eval(OplInst<S1,C1,V1,X> I0){
  if (!I0.S.equals(src)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Map<Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>,S2> gens=new HashMap<>();
  List<Pair<OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2>,OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2>>> equations=new LinkedList<>();
  OplSetInst<S1,C1,OplTerm<Chc<C1,X>,V1>> I=OplSat.saturate(I0.projEAdiscreteT());
  Map<Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>,Integer> prec=new HashMap<>();
  Set<OplTerm<Chc<C1,X>,V1>> allCopiedTerms=new HashSet<>();
  int i=10000;
  for (  S1 s1 : I0.S.projT().sorts) {
    for (    OplTerm<Chc<C1,X>,V1> x : I.sorts.get(s1)) {
      gens.put(Chc.inLeft(x),(S2)s1);
      allCopiedTerms.add(x);
      prec.put(Chc.inLeft(x),i++);
    }
  }
  for (  Pair<OplTerm<Chc<C1,X>,V1>,OplTerm<Chc<C1,X>,V1>> eq : I0.P.equations) {
    S1 t=eq.first.type(I0.P.toSig,new OplCtx<>());
    if (src.projT().sorts.contains(t)) {
      equations.add(new Pair<>(conv2(I0,allCopiedTerms,eq.first),conv2(I0,allCopiedTerms,eq.second)));
    }
  }
  for (  Object label : blocks.keySet()) {
    Pair<S2,Block<S1,C1,V1,S2,C2,V2>> xxx=blocks.get(label);
    S2 tgt=xxx.first;
    Block<S1,C1,V1,S2,C2,V2> block=xxx.second;
    Set<Map<V1,OplTerm<Chc<C1,X>,V1>>> tuples=new HashSet<>();
    tuples.add(new HashMap<>());
    Set<Pair<OplTerm<Chc<C1,X>,V1>,OplTerm<Chc<C1,X>,V1>>> where=new HashSet<>();
    for (    Pair<OplTerm<C1,V1>,OplTerm<C1,V1>> eq : block.where) {
      where.add(new Pair<>(OplSig.inject(eq.first),OplSig.inject(eq.second)));
    }
    List<V1> ordered=order(block);
    for (    V1 v : block.from.keySet()) {
      S1 s=block.from.get(v);
      Set<OplTerm<Chc<C1,X>,V1>> dom=I.sorts.get(s);
      tuples=extend(tuples,dom,v);
      tuples=filter(tuples,where,I0);
    }
    for (    Map<V1,OplTerm<Chc<C1,X>,V1>> tuple : tuples) {
      gens.put(Chc.inRight(new Pair<>(label,tuple)),tgt);
      prec.put(Chc.inRight(new Pair<>(label,tuple)),i++);
    }
    for (    C2 c2 : block.attrs.keySet()) {
      OplTerm<Chc<C1,X>,V1> e=OplSig.inject(block.attrs.get(c2));
      for (      Map<V1,OplTerm<Chc<C1,X>,V1>> tuple : tuples) {
        OplTerm<Chc<C1,X>,V1> a=e.subst(tuple);
        OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2> lhs=new OplTerm<>(Chc.inLeft(c2),Util.singList(new OplTerm<>(Chc.inRight(Chc.inRight(new Pair<>(label,tuple))),new LinkedList<>())));
        equations.add(new Pair<>(lhs,conv2(I0,allCopiedTerms,a)));
      }
    }
    for (    C2 c2 : block.edges.keySet()) {
      Object tgt_label=block.edges.get(c2).first;
      Map<V1,OplTerm<C1,V1>> tgt_ctx=block.edges.get(c2).second;
      for (      Map<V1,OplTerm<Chc<C1,X>,V1>> tuple : tuples) {
        Map<V1,OplTerm<Chc<C1,X>,V1>> substed=new HashMap<>();
        for (        V1 v1 : tgt_ctx.keySet()) {
          OplTerm<Chc<C1,X>,V1> uuu=OplSig.inject(tgt_ctx.get(v1));
          OplTerm<Chc<C1,X>,V1> vvv=uuu.subst(tuple);
          substed.put(v1,vvv);
        }
        OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2> lhs=new OplTerm<>(Chc.inLeft(c2),Util.singList(new OplTerm<>(Chc.inRight(Chc.inRight(new Pair<>(label,tuple))),new LinkedList<>())));
        OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2> rhs=new OplTerm<>(Chc.inLeft(c2),Util.singList(new OplTerm<>(Chc.inRight(Chc.inRight(new Pair<>(tgt_label,substed))),new LinkedList<>())));
        equations.add(new Pair<>(lhs,rhs));
      }
    }
  }
  OplPres<S2,C2,V2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>> P=new OplPres<>(prec,dst.sig0,dst.sig,gens,equations);
  OplInst<S2,C2,V2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>> retX=new OplInst<>(""String_Node_Str"",""String_Node_Str"",I0.J0);
  retX.validate(dst,P,I0.J);
  return retX;
}","public <X>OplInst<S2,C2,V2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>> eval(OplInst<S1,C1,V1,X> I0){
  if (!I0.S.equals(src)) {
    throw new RuntimeException(""String_Node_Str"");
  }
  Map<Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>,S2> gens=new HashMap<>();
  List<Pair<OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2>,OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2>>> equations=new LinkedList<>();
  OplSetInst<S1,C1,OplTerm<Chc<C1,X>,V1>> I=OplSat.saturate(I0.projEA());
  Map<Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>,Integer> prec=new HashMap<>();
  Set<OplTerm<Chc<C1,X>,V1>> allCopiedTerms=new HashSet<>();
  int i=10000;
  for (  S1 s1 : I0.S.projT().sorts) {
    for (    OplTerm<Chc<C1,X>,V1> x : I.sorts.get(s1)) {
      gens.put(Chc.inLeft(x),(S2)s1);
      allCopiedTerms.add(x);
      prec.put(Chc.inLeft(x),i++);
    }
  }
  for (  Pair<OplTerm<Chc<C1,X>,V1>,OplTerm<Chc<C1,X>,V1>> eq : I0.P.equations) {
    S1 t=eq.first.type(I0.P.toSig(),new OplCtx<>());
    if (src.projT().sorts.contains(t)) {
      equations.add(new Pair<>(conv2(I0,allCopiedTerms,eq.first),conv2(I0,allCopiedTerms,eq.second)));
    }
  }
  for (  Object label : blocks.keySet()) {
    Pair<S2,Block<S1,C1,V1,S2,C2,V2>> xxx=blocks.get(label);
    S2 tgt=xxx.first;
    Block<S1,C1,V1,S2,C2,V2> block=xxx.second;
    Set<Map<V1,OplTerm<Chc<C1,X>,V1>>> tuples=new HashSet<>();
    tuples.add(new HashMap<>());
    Set<Pair<OplTerm<Chc<C1,X>,V1>,OplTerm<Chc<C1,X>,V1>>> where=new HashSet<>();
    for (    Pair<OplTerm<C1,V1>,OplTerm<C1,V1>> eq : block.where) {
      where.add(new Pair<>(OplSig.inject(eq.first),OplSig.inject(eq.second)));
    }
    List<V1> ordered=order(block);
    for (    V1 v : block.from.keySet()) {
      S1 s=block.from.get(v);
      Set<OplTerm<Chc<C1,X>,V1>> dom=I.sorts.get(s);
      tuples=extend(tuples,dom,v);
      tuples=filter(tuples,where,I0);
    }
    if (block.from.keySet().isEmpty()) {
      tuples=filter(tuples,where,I0);
    }
    for (    Map<V1,OplTerm<Chc<C1,X>,V1>> tuple : tuples) {
      gens.put(Chc.inRight(new Pair<>(label,tuple)),tgt);
      prec.put(Chc.inRight(new Pair<>(label,tuple)),i++);
    }
    for (    C2 c2 : block.attrs.keySet()) {
      OplTerm<Chc<C1,X>,V1> e=OplSig.inject(block.attrs.get(c2));
      for (      Map<V1,OplTerm<Chc<C1,X>,V1>> tuple : tuples) {
        OplTerm<Chc<C1,X>,V1> a=e.subst(tuple);
        OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2> lhs=new OplTerm<>(Chc.inLeft(c2),Util.singList(new OplTerm<>(Chc.inRight(Chc.inRight(new Pair<>(label,tuple))),new LinkedList<>())));
        equations.add(new Pair<>(lhs,conv2(I0,allCopiedTerms,a)));
      }
    }
    for (    C2 c2 : block.edges.keySet()) {
      Object tgt_label=block.edges.get(c2).first;
      Map<V1,OplTerm<C1,V1>> tgt_ctx=block.edges.get(c2).second;
      for (      Map<V1,OplTerm<Chc<C1,X>,V1>> tuple : tuples) {
        Map<V1,OplTerm<Chc<C1,X>,V1>> substed=new HashMap<>();
        for (        V1 v1 : tgt_ctx.keySet()) {
          OplTerm<Chc<C1,X>,V1> uuu=OplSig.inject(tgt_ctx.get(v1));
          OplTerm<Chc<C1,X>,V1> vvv=uuu.subst(tuple);
          substed.put(v1,vvv);
        }
        OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2> lhs=new OplTerm<>(Chc.inLeft(c2),Util.singList(new OplTerm<>(Chc.inRight(Chc.inRight(new Pair<>(label,tuple))),new LinkedList<>())));
        OplTerm<Chc<C2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>>,V2> rhs=new OplTerm<>(Chc.inLeft(c2),Util.singList(new OplTerm<>(Chc.inRight(Chc.inRight(new Pair<>(tgt_label,substed))),new LinkedList<>())));
        equations.add(new Pair<>(lhs,rhs));
      }
    }
  }
  OplPres<S2,C2,V2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>> P=new OplPres<>(prec,dst.sig0,dst.sig,gens,equations);
  OplInst<S2,C2,V2,Chc<OplTerm<Chc<C1,X>,V1>,Pair<Object,Map<V1,OplTerm<Chc<C1,X>,V1>>>>> retX=new OplInst<>(""String_Node_Str"",""String_Node_Str"",I0.J0);
  retX.validate(dst,P,I0.J);
  return retX;
}",0.9885084989226718
130644,"@Override public Boolean apply(Pair<List<E>,List<E>> xxx){
  List<E> A=xxx.first;
  List<E> B=xxx.second;
  if (A.size() != B.size()) {
    throw new RuntimeException();
  }
  if (A.isEmpty()) {
    return false;
  }
  E a=A.get(0);
  E b=B.get(0);
  if (gt.apply(new Pair<>(b,a))) {
    return true;
  }
 else   if (gt.apply(new Pair<>(a,b))) {
    return false;
  }
 else   if (a.equals(b)) {
    return apply(new Pair<>(A.subList(1,A.size()),B.subList(1,B.size())));
  }
  return false;
}","@Override public Boolean apply(Pair<KBExp<C,V>,KBExp<C,V>> xxx){
  KBExp<C,V> s=xxx.first;
  KBExp<C,V> t=xxx.second;
  if (t.isVar) {
    return !t.equals(s) && s.vars().contains(t.getVar().var);
  }
  if (s.isVar) {
    return false;
  }
  KBApp<C,V> s0=s.getApp();
  KBApp<C,V> t0=t.getApp();
  C f=s0.f;
  C g=t0.f;
  for (  KBExp<C,V> si : s0.args) {
    if (apply(new Pair<>(si,t)) || si.equals(t)) {
      return true;
    }
  }
  if (gt.apply(new Pair<>(f,g))) {
    for (    KBExp<C,V> ti : t0.args) {
      if (!apply(new Pair<>(s,ti))) {
        return false;
      }
    }
    return true;
  }
  if (f.equals(g)) {
    for (    KBExp<C,V> ti : t0.args) {
      if (!this.apply(new Pair<>(s0,ti))) {
        return false;
      }
    }
    int i=0;
    for (    KBExp<C,V> si : s0.args) {
      if (i > t0.args.size()) {
        return false;
      }
      KBExp<C,V> ti=t0.args.get(i++);
      if (this.apply(new Pair<>(si,ti))) {
        return true;
      }
      if (this.apply(new Pair<>(ti,si))) {
        return false;
      }
      if (si.equals(ti)) {
        continue;
      }
      return false;
    }
  }
  return false;
}",0.1039119804400978
130645,"public static <C,V>Function<Pair<KBExp<C,V>,KBExp<C,V>>,Boolean> pogt(Function<Pair<C,C>,Boolean> gt,String which){
  return new Function<Pair<KBExp<C,V>,KBExp<C,V>>,Boolean>(){
    @Override public Boolean apply(    Pair<KBExp<C,V>,KBExp<C,V>> xxx){
      KBExp<C,V> s=xxx.first;
      KBExp<C,V> t=xxx.second;
      if (s.hasAsSubterm(t) && !t.equals(s)) {
        return true;
      }
      if (t.isVar) {
        return !t.equals(s) && s.vars().contains(t.getVar().var);
      }
      if (s.isVar) {
        return false;
      }
      KBApp<C,V> s0=s.getApp();
      KBApp<C,V> t0=t.getApp();
      C f=s0.f;
      C g=t0.f;
      if (gt.apply(new Pair<>(f,g))) {
        for (        KBExp<C,V> ti : t0.args) {
          if (!apply(new Pair<>(s,ti))) {
            return false;
          }
        }
        return true;
      }
 else       if (f.equals(g)) {
        if (which == ""String_Node_Str"") {
          return baglt(this).apply(new Pair<>(tobag(s0.args),tobag(t0.args)));
        }
 else         if (which == ""String_Node_Str"") {
          return lexlt(this).apply(new Pair<>(t0.args,s0.args));
        }
 else {
          throw new RuntimeException();
        }
      }
 else {
        for (        KBExp<C,V> si : s0.args) {
          if (apply(new Pair<>(si,t)) || si.equals(t)) {
            return true;
          }
        }
        return false;
      }
    }
  }
;
}","public static <C,V>Function<Pair<KBExp<C,V>,KBExp<C,V>>,Boolean> pogt(Function<Pair<C,C>,Boolean> gt){
  return new Function<Pair<KBExp<C,V>,KBExp<C,V>>,Boolean>(){
    @Override public Boolean apply(    Pair<KBExp<C,V>,KBExp<C,V>> xxx){
      KBExp<C,V> s=xxx.first;
      KBExp<C,V> t=xxx.second;
      if (t.isVar) {
        return !t.equals(s) && s.vars().contains(t.getVar().var);
      }
      if (s.isVar) {
        return false;
      }
      KBApp<C,V> s0=s.getApp();
      KBApp<C,V> t0=t.getApp();
      C f=s0.f;
      C g=t0.f;
      for (      KBExp<C,V> si : s0.args) {
        if (apply(new Pair<>(si,t)) || si.equals(t)) {
          return true;
        }
      }
      if (gt.apply(new Pair<>(f,g))) {
        for (        KBExp<C,V> ti : t0.args) {
          if (!apply(new Pair<>(s,ti))) {
            return false;
          }
        }
        return true;
      }
      if (f.equals(g)) {
        for (        KBExp<C,V> ti : t0.args) {
          if (!this.apply(new Pair<>(s0,ti))) {
            return false;
          }
        }
        int i=0;
        for (        KBExp<C,V> si : s0.args) {
          if (i > t0.args.size()) {
            return false;
          }
          KBExp<C,V> ti=t0.args.get(i++);
          if (this.apply(new Pair<>(si,ti))) {
            return true;
          }
          if (this.apply(new Pair<>(ti,si))) {
            return false;
          }
          if (si.equals(ti)) {
            continue;
          }
          return false;
        }
      }
      return false;
    }
  }
;
}",0.3923705722070845
130646,"public OplToKB(OplSig sig){
  this.sig=sig;
  if (DEBUG.debug.opl_require_const) {
    checkEmpty();
  }
  KB=convert(this.sig,""String_Node_Str"");
  KB.complete();
}","public OplToKB(OplSig sig){
  this.sig=sig;
  if (DEBUG.debug.opl_require_const) {
    checkEmpty();
  }
  KB=convert(this.sig);
  KB.complete();
}",0.9423076923076924
130647,"private static KB<String,String> convert(OplSig s,String which){
  Function<Pair<String,String>,Boolean> gt=x -> {
    Integer l=s.prec.get(x.first);
    Integer r=s.prec.get(x.second);
    return l > r;
  }
;
  if (!s.symbols.keySet().equals(s.prec.keySet())) {
    if (DEBUG.debug.opl_alpha) {
      gt=x -> {
        return x.first.toString().compareTo(x.second) > 0;
      }
;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Set<Pair<KBExp<String,String>,KBExp<String,String>>> eqs=new HashSet<>();
  for (  Triple<OplCtx<String>,OplTerm,OplTerm> eq : s.equations) {
    eqs.add(new Pair<>(convert(eq.second),convert(eq.third)));
  }
  Iterator<String> fr=new Iterator<String>(){
    int i=0;
    @Override public boolean hasNext(){
      return true;
    }
    @Override public String next(){
      return ""String_Node_Str"" + (i++);
    }
  }
;
  return new KB<>(eqs,KBOrders.pogt(gt,which),fr);
}","private static KB<String,String> convert(OplSig s){
  Function<Pair<String,String>,Boolean> gt=x -> {
    Integer l=s.prec.get(x.first);
    Integer r=s.prec.get(x.second);
    return l > r;
  }
;
  if (!s.symbols.keySet().equals(s.prec.keySet())) {
    if (DEBUG.debug.opl_alpha) {
      gt=x -> {
        return x.first.toString().compareTo(x.second) > 0;
      }
;
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  Set<Pair<KBExp<String,String>,KBExp<String,String>>> eqs=new HashSet<>();
  for (  Triple<OplCtx<String>,OplTerm,OplTerm> eq : s.equations) {
    eqs.add(new Pair<>(convert(eq.second),convert(eq.third)));
  }
  Iterator<String> fr=new Iterator<String>(){
    int i=0;
    @Override public boolean hasNext(){
      return true;
    }
    @Override public String next(){
      return ""String_Node_Str"" + (i++);
    }
  }
;
  return new KB<>(eqs,KBOrders.pogt(gt),fr);
}",0.989713048186248
130648,"private void openConfig(){
  int index=configTable.getSelectionIndex();
  if (index >= 0) {
    JettyLaunchConfigEntry entry=configEntryList.get(index);
    IWorkbench workbench=PlatformUI.getWorkbench();
    IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
    IWorkbenchPage page=window.getActivePage();
    IEditorInput input=null;
    IEditorDescriptor descriptor=null;
switch (entry.getType()) {
case DEFAULT:
      try {
        ILaunchConfiguration configuration=getCurrentLaunchConfiguration();
        ILaunchDelegate[] delegates=configuration.getType().getDelegates(new HashSet<String>(Arrays.asList(""String_Node_Str"")));
        if (delegates.length == 1) {
          JettyLaunchConfigurationDelegate delegate=(JettyLaunchConfigurationDelegate)delegates[0].getDelegate();
          File file=delegate.createJettyConfigurationFile(configuration,true);
          descriptor=workbench.getEditorRegistry().getDefaultEditor(file.getName());
          input=new FileStoreEditorInput(EFS.getLocalFileSystem().fromLocalFile(file));
        }
      }
 catch (      CoreException ex) {
        JettyPlugin.error(""String_Node_Str"",ex);
      }
    break;
case PATH:
{
    File file=new File(entry.getPath());
    descriptor=workbench.getEditorRegistry().getDefaultEditor(file.getName());
    input=new FileStoreEditorInput(EFS.getLocalFileSystem().fromLocalFile(file));
  }
break;
case WORKSPACE:
{
IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(entry.getPath()));
descriptor=workbench.getEditorRegistry().getDefaultEditor(file.getName());
input=new FileEditorInput(file);
}
break;
}
try {
IDE.openEditor(page,input,descriptor.getId());
}
 catch (PartInitException ex) {
JettyPlugin.error(""String_Node_Str"",ex);
}
}
}","private void openConfig(){
  int index=configTable.getSelectionIndex();
  if (index >= 0) {
    JettyLaunchConfigEntry entry=configEntryList.get(index);
    IWorkbench workbench=PlatformUI.getWorkbench();
    IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
    IWorkbenchPage page=window.getActivePage();
    IEditorInput input=null;
    IEditorDescriptor descriptor=null;
switch (entry.getType()) {
case DEFAULT:
      try {
        ILaunchConfiguration configuration=getCurrentLaunchConfiguration();
        ILaunchDelegate[] delegates=configuration.getType().getDelegates(new HashSet<String>(Arrays.asList(""String_Node_Str"")));
        if (delegates.length == 1) {
          JettyLaunchConfigurationDelegate delegate=(JettyLaunchConfigurationDelegate)delegates[0].getDelegate();
          File file=delegate.createJettyConfigurationFile(configuration,true);
          descriptor=workbench.getEditorRegistry().getDefaultEditor(file.getName());
          input=new FileStoreEditorInput(EFS.getLocalFileSystem().fromLocalFile(file));
        }
      }
 catch (      CoreException ex) {
        JettyPlugin.error(""String_Node_Str"",ex);
      }
    break;
case PATH:
{
    File file=new File(entry.getPath());
    descriptor=workbench.getEditorRegistry().getDefaultEditor(file.getName());
    input=new FileStoreEditorInput(EFS.getLocalFileSystem().fromLocalFile(file));
  }
break;
case WORKSPACE:
{
IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(entry.getPath()));
descriptor=workbench.getEditorRegistry().getDefaultEditor(file.getName());
input=new FileEditorInput(file);
}
break;
}
if (descriptor != null) {
try {
IDE.openEditor(page,input,descriptor.getId());
}
 catch (PartInitException ex) {
JettyPlugin.error(""String_Node_Str"",ex);
}
}
}
}",0.9920724801812004
130649,"public void setDefaults(ILaunchConfigurationWorkingCopy configuration){
  IJavaElement javaElement=getContext();
  if (javaElement != null) {
    initializeJavaProject(javaElement,configuration);
  }
 else {
    configuration.setAttribute(ATTR_PROJECT_NAME,""String_Node_Str"");
  }
  JettyPluginConstants.setClasspathProvider(configuration,JettyPluginConstants.CLASSPATH_PROVIDER_JETTY);
  String projectName=""String_Node_Str"";
  try {
    projectName=configuration.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME,""String_Node_Str"");
  }
 catch (  CoreException e) {
  }
  String launchConfigName=projectName;
  if ((launchConfigName == null) || (launchConfigName.length() == 0)) {
    launchConfigName=""String_Node_Str"";
  }
  launchConfigName=getLaunchConfigurationDialog().generateName(launchConfigName);
  configuration.rename(launchConfigName);
  try {
    String webAppDir=""String_Node_Str"";
    if (projectName.length() > 0) {
      IResource resource=findWebappDir(ResourcesPlugin.getWorkspace().getRoot().getProject(projectName));
      if (resource != null) {
        webAppDir=getWebappText(resource);
      }
    }
    JettyPluginConstants.setWebAppDir(configuration,webAppDir);
    JettyPluginConstants.setContext(configuration,JettyPluginConstants.getContext(configuration));
    JettyPluginConstants.setPort(configuration,JettyPluginConstants.getPort(configuration));
    JettyPluginConstants.setConfigs(configuration,JettyPluginConstants.getConfigs(configuration));
  }
 catch (  CoreException e) {
    JettyPlugin.error(""String_Node_Str"",e);
  }
}","public void setDefaults(ILaunchConfigurationWorkingCopy configuration){
  IJavaElement javaElement=getContext();
  if (javaElement != null) {
    initializeJavaProject(javaElement,configuration);
  }
 else {
    configuration.setAttribute(ATTR_PROJECT_NAME,""String_Node_Str"");
  }
  JettyPluginConstants.setClasspathProvider(configuration,JettyPluginConstants.CLASSPATH_PROVIDER_JETTY);
  String projectName=""String_Node_Str"";
  try {
    projectName=configuration.getAttribute(IJavaLaunchConfigurationConstants.ATTR_PROJECT_NAME,""String_Node_Str"");
  }
 catch (  CoreException e) {
  }
  String launchConfigName=projectName;
  if ((launchConfigName == null) || (launchConfigName.length() == 0)) {
    launchConfigName=""String_Node_Str"";
  }
  launchConfigName=getLaunchConfigurationDialog().generateName(launchConfigName);
  configuration.rename(launchConfigName);
  try {
    String webAppDir=""String_Node_Str"";
    if ((projectName != null) && (projectName.length() > 0)) {
      IResource resource=findWebappDir(ResourcesPlugin.getWorkspace().getRoot().getProject(projectName));
      if (resource != null) {
        webAppDir=getWebappText(resource);
      }
    }
    JettyPluginConstants.setWebAppDir(configuration,webAppDir);
    JettyPluginConstants.setContext(configuration,JettyPluginConstants.getContext(configuration));
    JettyPluginConstants.setPort(configuration,JettyPluginConstants.getPort(configuration));
    JettyPluginConstants.setConfigs(configuration,JettyPluginConstants.getConfigs(configuration));
  }
 catch (  CoreException e) {
    JettyPlugin.error(""String_Node_Str"",e);
  }
}",0.9915280828365234
130650,"public static void main(String[] args) throws InterruptedException {
  final Object semaphore=new Object();
  Console.INSTANCE.initialize(GlobalServiceResolver.INSTANCE);
  Console.INSTANCE.start();
synchronized (semaphore) {
    semaphore.wait();
  }
}","public static void main(String[] args) throws InterruptedException {
  Console.INSTANCE.initialize(GlobalServiceResolver.INSTANCE);
  Console.INSTANCE.start();
  new Semaphore(0).acquire();
}",0.8108108108108109
130651,"protected static Object convert(String typeName,String value){
  if (""String_Node_Str"".equals(value)) {
    return null;
  }
  Class<?> type=toClass(typeName);
  if (type == null) {
    new IllegalArgumentException(""String_Node_Str"" + toParameter(type));
  }
  if ((type.isAssignableFrom(Boolean.class)) || (type == Boolean.TYPE)) {
    return Boolean.valueOf(value);
  }
  if ((type.isAssignableFrom(Byte.class)) || (type == Boolean.TYPE)) {
    return Byte.decode(value);
  }
  if ((type.isAssignableFrom(Short.class)) || (type == Short.TYPE)) {
    return Short.decode(value);
  }
  if ((type.isAssignableFrom(Integer.class)) || (type == Integer.TYPE)) {
    return Integer.decode(value);
  }
  if ((type.isAssignableFrom(Long.class)) || (type == Long.TYPE)) {
    return Long.decode(value);
  }
  if ((type.isAssignableFrom(Float.class)) || (type == Float.TYPE)) {
    return Float.valueOf(value);
  }
  if ((type.isAssignableFrom(Double.class)) || (type == Double.TYPE)) {
    return Double.valueOf(value);
  }
  if ((type.isAssignableFrom(Character.class)) || (type == Character.TYPE)) {
    if (value.length() != 1) {
      throw new IllegalArgumentException(""String_Node_Str"" + value);
    }
    return new Character(value.charAt(0));
  }
  if (type.isAssignableFrom(String.class)) {
    return value;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + toParameter(type));
}","protected static Object convert(String typeName,String value) throws IllegalArgumentException {
  if (""String_Node_Str"".equals(value)) {
    return null;
  }
  Class<?> type=toClass(typeName);
  if (type == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + toParameter(null));
  }
  if ((type.isAssignableFrom(Boolean.class)) || (type == Boolean.TYPE)) {
    return Boolean.valueOf(value);
  }
  if ((type.isAssignableFrom(Byte.class)) || (type == Boolean.TYPE)) {
    return Byte.decode(value);
  }
  if ((type.isAssignableFrom(Short.class)) || (type == Short.TYPE)) {
    return Short.decode(value);
  }
  if ((type.isAssignableFrom(Integer.class)) || (type == Integer.TYPE)) {
    return Integer.decode(value);
  }
  if ((type.isAssignableFrom(Long.class)) || (type == Long.TYPE)) {
    return Long.decode(value);
  }
  if ((type.isAssignableFrom(Float.class)) || (type == Float.TYPE)) {
    return Float.valueOf(value);
  }
  if ((type.isAssignableFrom(Double.class)) || (type == Double.TYPE)) {
    return Double.valueOf(value);
  }
  if ((type.isAssignableFrom(Character.class)) || (type == Character.TYPE)) {
    if (value.length() != 1) {
      throw new IllegalArgumentException(""String_Node_Str"" + value);
    }
    return new Character(value.charAt(0));
  }
  if (type.isAssignableFrom(String.class)) {
    return value;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + toParameter(type));
}",0.9833510449876018
130652,"public void drawArmor(){
  GL11.glDisable(GL11.GL_DEPTH_TEST);
  res=new ScaledResolution(Minecraft.getMinecraft(),Minecraft.getMinecraft().displayWidth,Minecraft.getMinecraft().displayHeight);
  int x=(res.getScaledWidth() / 2) - 11;
  int y=res.getScaledHeight() - 49;
switch (EventArmorTick.size) {
case 1:
    Minecraft.getMinecraft().getTextureManager().bindTexture(r);
  Util.drawTexturedModalRect(x,y,0,0,9,9);
break;
case 2:
Minecraft.getMinecraft().getTextureManager().bindTexture(r);
Util.drawTexturedModalRect(x,y,9,0,18,9);
break;
}
}","public void drawArmor(){
  GL11.glDisable(GL11.GL_DEPTH_TEST);
  res=new ScaledResolution(Minecraft.getMinecraft(),Minecraft.getMinecraft().displayWidth,Minecraft.getMinecraft().displayHeight);
  int x=(res.getScaledWidth() / 2) - 11;
  int y=res.getScaledHeight() - 49;
  Item boots=null;
  Item body=null;
  Item legs=null;
  Item helmet=null;
  ItemStack stackBoots=Minecraft.getMinecraft().thePlayer.inventory.armorItemInSlot(0);
  ItemStack stackLegs=Minecraft.getMinecraft().thePlayer.inventory.armorItemInSlot(1);
  ItemStack stackBody=Minecraft.getMinecraft().thePlayer.inventory.armorItemInSlot(2);
  ItemStack stackHelmet=Minecraft.getMinecraft().thePlayer.inventory.armorItemInSlot(3);
  float speedMultiplier=1;
  if (stackBoots != null)   boots=stackBoots.getItem();
 else   boots=null;
  if (stackBody != null)   body=stackBody.getItem();
 else   body=null;
  if (stackLegs != null)   legs=stackLegs.getItem();
 else   legs=null;
  if (stackHelmet != null)   helmet=stackHelmet.getItem();
 else   helmet=null;
  int size=0;
  if (boots == TwilightItemsArmor.haliteBoots && legs == TwilightItemsArmor.haliteLeggings && body == TwilightItemsArmor.haliteChestplate && helmet == TwilightItemsArmor.haliteHelmet)   size=1;
switch (size) {
case 1:
    Minecraft.getMinecraft().getTextureManager().bindTexture(r);
  Util.drawTexturedModalRect(x,y,0,0,9,9);
break;
case 2:
Minecraft.getMinecraft().getTextureManager().bindTexture(r);
Util.drawTexturedModalRect(x,y,9,0,18,9);
break;
}
GL11.glEnable(GL11.GL_DEPTH_TEST);
}",0.5123010130246021
130653,"@SubscribeEvent public void onTickEvent(PlayerTickEvent evt){
  world=evt.player.worldObj;
  ItemStack stackBoots=evt.player.inventory.armorItemInSlot(0);
  ItemStack stackLegs=evt.player.inventory.armorItemInSlot(1);
  ItemStack stackBody=evt.player.inventory.armorItemInSlot(2);
  ItemStack stackHelmet=evt.player.inventory.armorItemInSlot(3);
  float speedMultiplier=1;
  if (stackBoots != null)   boots=stackBoots.getItem();
 else   boots=null;
  if (stackBody != null)   body=stackBody.getItem();
 else   body=null;
  if (stackLegs != null)   legs=stackLegs.getItem();
 else   legs=null;
  if (stackHelmet != null)   helmet=stackHelmet.getItem();
 else   helmet=null;
  if (boots != VanillaItemsArmor.angelicBoots && body != VanillaItemsArmor.angelicBody && legs != VanillaItemsArmor.angelicLegs && helmet != VanillaItemsArmor.angelicHelmet) {
    FlyingHelper.getProperties(evt.player).couldFly=evt.player.capabilities.allowFlying;
  }
  if (evt.player.capabilities.isCreativeMode)   FlyingHelper.getProperties(evt.player).couldFly=false;
  if (boots == VanillaItemsArmor.angelicBoots && body == VanillaItemsArmor.angelicBody && legs == VanillaItemsArmor.angelicLegs && helmet == VanillaItemsArmor.angelicHelmet && ArcanaHelper.getProperties(evt.player).getBarValue() != 0) {
    evt.player.fallDistance=-0.5F;
    evt.player.triggerAchievement(DivineRPGAchievements.whenPigsFly);
    evt.player.capabilities.allowFlying=true;
    if (evt.player.capabilities.isFlying && !evt.player.capabilities.isCreativeMode && !FlyingHelper.getProperties(evt.player).couldFly)     ArcanaHelper.getProperties(evt.player).useBar(0.5f);
    if (ArcanaHelper.getProperties(evt.player).getBarValue() < 1 && !evt.player.capabilities.isCreativeMode && !FlyingHelper.getProperties(evt.player).couldFly) {
      evt.player.capabilities.isFlying=false;
      evt.player.capabilities.allowFlying=false;
    }
  }
 else   if (evt.player.capabilities.allowFlying && !evt.player.capabilities.isCreativeMode && !FlyingHelper.getProperties(evt.player).couldFly) {
    evt.player.capabilities.isFlying=false;
    evt.player.capabilities.allowFlying=false;
  }
  if (boots == VanillaItemsArmor.eliteRealmiteBoots && body == VanillaItemsArmor.eliteRealmiteBody && legs == VanillaItemsArmor.eliteRealmiteLegs && helmet == VanillaItemsArmor.eliteRealmiteHelmet) {
    evt.player.fallDistance=-0.5F;
  }
  if (boots == VanillaItemsArmor.divineBoots && body == VanillaItemsArmor.divineBody && legs == VanillaItemsArmor.divineLegs && helmet == VanillaItemsArmor.divineHelmet) {
    evt.player.fallDistance=-0.5F;
  }
  if (boots == TwilightItemsArmor.wildwoodBoots && body == TwilightItemsArmor.wildwoodChestplate && legs == TwilightItemsArmor.wildwoodLeggings && helmet == TwilightItemsArmor.wildwoodHelmet) {
    if (evt.player.isInsideOfMaterial(Material.water)) {
      float current=evt.player.getHealth();
      if ((current > 0.0F) && (current < 20.0F)) {
        evt.player.heal(0.25f);
      }
    }
  }
  if (boots == ArcanaItems.kormaBoots && body == ArcanaItems.kormaBody && legs == ArcanaItems.kormaLegs && helmet == ArcanaItems.kormaHelmet) {
    ArcanaHelper.getProperties(evt.player).regen(1);
  }
  if (boots == ArcanaItems.vemosBoots && body == ArcanaItems.vemosBody && legs == ArcanaItems.vemosLegs && helmet == ArcanaItems.vemosHelmet) {
    float current=evt.player.getHealth();
    if ((current > 0.0F) && (current < 20.0F)) {
      evt.player.setHealth(current + 0.1F);
    }
  }
  if (boots == TwilightItemsArmor.mortumBoots && body == TwilightItemsArmor.mortumChestplate && legs == TwilightItemsArmor.mortumLeggings && helmet == TwilightItemsArmor.mortumHelmet) {
    evt.player.addPotionEffect(new PotionEffect(Potion.nightVision.id,210,10,true));
  }
  if (boots == TwilightItemsArmor.skythernBoots && body == TwilightItemsArmor.skythernChestplate && legs == TwilightItemsArmor.skythernLeggings && helmet == TwilightItemsArmor.skythernHelmet) {
    evt.player.fallDistance=-0.5F;
  }
  if ((boots == VanillaItemsArmor.netheriteBoots && legs == VanillaItemsArmor.netheriteLegs && body == VanillaItemsArmor.netheriteBody && helmet == VanillaItemsArmor.netheriteHelmet) || (boots == VanillaItemsArmor.infernoBoots && legs == VanillaItemsArmor.infernoLegs && body == VanillaItemsArmor.infernoBody && helmet == VanillaItemsArmor.infernoHelmet) || (boots == VanillaItemsArmor.bedrockBoots && legs == VanillaItemsArmor.bedrockLegs && body == VanillaItemsArmor.bedrockBody && helmet == VanillaItemsArmor.bedrockHelmet)) {
    evt.player.addPotionEffect(new PotionEffect(Potion.fireResistance.id,40,0,true));
  }
  if (boots == VanillaItemsArmor.aquastriveBoots && body == VanillaItemsArmor.aquastriveBody && legs == VanillaItemsArmor.aquastriveLegs && helmet == VanillaItemsArmor.aquastriveHelmet) {
    float speed=1.1F;
    boolean isJumping=false;
    isJumping=(Boolean)ObfuscationReflectionHelper.getPrivateValue(EntityLivingBase.class,evt.player,EventArmorFullSet.isJumping);
    if (evt.player.isInWater()) {
      if (!evt.player.isSneaking() && !isJumping) {
        if (evt.player.motionX > -speed && evt.player.motionX < speed) {
          evt.player.motionX*=speed;
          evt.player.motionY=0F;
        }
        if (evt.player.motionZ > -speed && evt.player.motionZ < speed) {
          evt.player.motionZ*=speed;
          evt.player.motionY=0F;
        }
      }
      if (isJumping || evt.player.isSneaking()) {
        evt.player.motionY*=speed;
        if (evt.player.motionX > -speed && evt.player.motionX < speed) {
          evt.player.motionX*=speed;
        }
        if (evt.player.motionZ > -speed && evt.player.motionZ < speed) {
          evt.player.motionZ*=speed;
        }
      }
    }
  }
  if (boots == VanillaItemsArmor.shadowBoots && body == VanillaItemsArmor.shadowBody && legs == VanillaItemsArmor.shadowLegs && helmet == VanillaItemsArmor.shadowHelmet) {
    speedMultiplier=3;
  }
  if (boots == VanillaItemsArmor.frozenBoots && body == VanillaItemsArmor.frozenBody && legs == VanillaItemsArmor.frozenLegs && helmet == VanillaItemsArmor.frozenHelmet && !evt.player.worldObj.isRemote && Ticker.tick % 10 == 0) {
    List<Entity> entities=evt.player.worldObj.getEntitiesWithinAABB(EntityMob.class,evt.player.boundingBox.expand(6,6,6));
    for (    Entity e : entities) {
      ((EntityMob)e).addPotionEffect(new PotionEffect(Potion.moveSlowdown.id,40,1,true));
    }
  }
  if (boots == VanillaItemsArmor.terranBoots && body == VanillaItemsArmor.terranBody && legs == VanillaItemsArmor.terranLegs && helmet == VanillaItemsArmor.terranHelmet) {
    evt.player.addPotionEffect(new PotionEffect(Potion.digSpeed.id,20,2,true));
  }
  if (boots == VanillaItemsArmor.skelemanBoots && body == VanillaItemsArmor.skelemanBody && legs == VanillaItemsArmor.skelemanLegs && helmet == VanillaItemsArmor.skelemanHelmet) {
    if (evt.player.getFoodStats().needFood()) {
      evt.player.getFoodStats().addStats(1,0);
    }
  }
  if (boots == IceikaItems.santaBoots && body == IceikaItems.santaTunic && legs == IceikaItems.santaPants && helmet == IceikaItems.santaCap) {
    if (evt.player.worldObj.provider.dimensionId == ConfigurationHelper.iceika) {
      if (evt.player.getFoodStats().needFood()) {
        evt.player.getFoodStats().addStats(1,0);
      }
      speedMultiplier=2;
    }
  }
  if (boots == TwilightItemsArmor.haliteBoots && legs == TwilightItemsArmor.haliteLeggings && body == TwilightItemsArmor.haliteChestplate && helmet == TwilightItemsArmor.haliteHelmet)   size=1;
 else   if (size != 0)   size=0;
  if (body == VetheaItems.glisteningBody && legs == VetheaItems.glisteningLegs && boots == VetheaItems.glisteningBoots && helmet == VetheaItems.glisteningMask) {
    speedMultiplier=1.4f;
  }
  if (body == VetheaItems.demonizedBody && legs == VetheaItems.demonizedLegs && boots == VetheaItems.demonizedBoots && helmet == VetheaItems.demonizedMask) {
    speedMultiplier=1.8f;
  }
  if (body == VetheaItems.tormentedBody && legs == VetheaItems.tormentedLegs && boots == VetheaItems.tormentedBoots && helmet == VetheaItems.tormentedMask) {
    speedMultiplier=2.2f;
  }
  ObfuscationReflectionHelper.setPrivateValue(PlayerCapabilities.class,evt.player.capabilities,0.1f * speedMultiplier,walkSpeed);
  if (body == VetheaItems.glisteningBody && legs == VetheaItems.glisteningLegs && boots == VetheaItems.glisteningBoots && helmet == VetheaItems.glisteningHood) {
    evt.player.fallDistance=-0.5F;
  }
  if (body == VetheaItems.demonizedBody && legs == VetheaItems.demonizedLegs && boots == VetheaItems.demonizedBoots && helmet == VetheaItems.demonizedHood) {
    evt.player.fallDistance=-0.5F;
  }
  if (body == VetheaItems.tormentedBody && legs == VetheaItems.tormentedLegs && boots == VetheaItems.tormentedBoots && helmet == VetheaItems.tormentedHood) {
    evt.player.fallDistance=-0.5F;
  }
  if (evt.player.inventory.hasItem(VetheaItems.minersAmulet))   evt.player.addPotionEffect(new PotionEffect(Potion.digSpeed.id,1,2,true));
}","@SubscribeEvent public void onTickEvent(PlayerTickEvent evt){
  world=evt.player.worldObj;
  ItemStack stackBoots=evt.player.inventory.armorItemInSlot(0);
  ItemStack stackLegs=evt.player.inventory.armorItemInSlot(1);
  ItemStack stackBody=evt.player.inventory.armorItemInSlot(2);
  ItemStack stackHelmet=evt.player.inventory.armorItemInSlot(3);
  float speedMultiplier=1;
  if (stackBoots != null)   boots=stackBoots.getItem();
 else   boots=null;
  if (stackBody != null)   body=stackBody.getItem();
 else   body=null;
  if (stackLegs != null)   legs=stackLegs.getItem();
 else   legs=null;
  if (stackHelmet != null)   helmet=stackHelmet.getItem();
 else   helmet=null;
  if (boots != VanillaItemsArmor.angelicBoots && body != VanillaItemsArmor.angelicBody && legs != VanillaItemsArmor.angelicLegs && helmet != VanillaItemsArmor.angelicHelmet) {
    FlyingHelper.getProperties(evt.player).couldFly=evt.player.capabilities.allowFlying;
  }
  if (evt.player.capabilities.isCreativeMode)   FlyingHelper.getProperties(evt.player).couldFly=false;
  if (boots == VanillaItemsArmor.angelicBoots && body == VanillaItemsArmor.angelicBody && legs == VanillaItemsArmor.angelicLegs && helmet == VanillaItemsArmor.angelicHelmet && ArcanaHelper.getProperties(evt.player).getBarValue() != 0) {
    evt.player.fallDistance=-0.5F;
    evt.player.triggerAchievement(DivineRPGAchievements.whenPigsFly);
    evt.player.capabilities.allowFlying=true;
    if (evt.player.capabilities.isFlying && !evt.player.capabilities.isCreativeMode && !FlyingHelper.getProperties(evt.player).couldFly)     ArcanaHelper.getProperties(evt.player).useBar(0.5f);
    if (ArcanaHelper.getProperties(evt.player).getBarValue() < 1 && !evt.player.capabilities.isCreativeMode && !FlyingHelper.getProperties(evt.player).couldFly) {
      evt.player.capabilities.isFlying=false;
      evt.player.capabilities.allowFlying=false;
    }
  }
 else   if (evt.player.capabilities.allowFlying && !evt.player.capabilities.isCreativeMode && !FlyingHelper.getProperties(evt.player).couldFly) {
    evt.player.capabilities.isFlying=false;
    evt.player.capabilities.allowFlying=false;
  }
  if (boots == VanillaItemsArmor.eliteRealmiteBoots && body == VanillaItemsArmor.eliteRealmiteBody && legs == VanillaItemsArmor.eliteRealmiteLegs && helmet == VanillaItemsArmor.eliteRealmiteHelmet) {
    evt.player.fallDistance=-0.5F;
  }
  if (boots == VanillaItemsArmor.divineBoots && body == VanillaItemsArmor.divineBody && legs == VanillaItemsArmor.divineLegs && helmet == VanillaItemsArmor.divineHelmet) {
    evt.player.fallDistance=-0.5F;
  }
  if (boots == TwilightItemsArmor.wildwoodBoots && body == TwilightItemsArmor.wildwoodChestplate && legs == TwilightItemsArmor.wildwoodLeggings && helmet == TwilightItemsArmor.wildwoodHelmet) {
    if (evt.player.isInsideOfMaterial(Material.water)) {
      float current=evt.player.getHealth();
      if ((current > 0.0F) && (current < 20.0F)) {
        evt.player.heal(0.25f);
      }
    }
  }
  if (boots == ArcanaItems.kormaBoots && body == ArcanaItems.kormaBody && legs == ArcanaItems.kormaLegs && helmet == ArcanaItems.kormaHelmet) {
    ArcanaHelper.getProperties(evt.player).regen(1);
  }
  if (boots == ArcanaItems.vemosBoots && body == ArcanaItems.vemosBody && legs == ArcanaItems.vemosLegs && helmet == ArcanaItems.vemosHelmet) {
    float current=evt.player.getHealth();
    if ((current > 0.0F) && (current < 20.0F)) {
      evt.player.setHealth(current + 0.1F);
    }
  }
  if (boots == TwilightItemsArmor.mortumBoots && body == TwilightItemsArmor.mortumChestplate && legs == TwilightItemsArmor.mortumLeggings && helmet == TwilightItemsArmor.mortumHelmet) {
    evt.player.addPotionEffect(new PotionEffect(Potion.nightVision.id,210,10,true));
  }
  if (boots == TwilightItemsArmor.skythernBoots && body == TwilightItemsArmor.skythernChestplate && legs == TwilightItemsArmor.skythernLeggings && helmet == TwilightItemsArmor.skythernHelmet) {
    evt.player.fallDistance=-0.5F;
  }
  if ((boots == VanillaItemsArmor.netheriteBoots && legs == VanillaItemsArmor.netheriteLegs && body == VanillaItemsArmor.netheriteBody && helmet == VanillaItemsArmor.netheriteHelmet) || (boots == VanillaItemsArmor.infernoBoots && legs == VanillaItemsArmor.infernoLegs && body == VanillaItemsArmor.infernoBody && helmet == VanillaItemsArmor.infernoHelmet) || (boots == VanillaItemsArmor.bedrockBoots && legs == VanillaItemsArmor.bedrockLegs && body == VanillaItemsArmor.bedrockBody && helmet == VanillaItemsArmor.bedrockHelmet)) {
    evt.player.addPotionEffect(new PotionEffect(Potion.fireResistance.id,40,0,true));
  }
  if (boots == VanillaItemsArmor.aquastriveBoots && body == VanillaItemsArmor.aquastriveBody && legs == VanillaItemsArmor.aquastriveLegs && helmet == VanillaItemsArmor.aquastriveHelmet) {
    float speed=1.1F;
    boolean isJumping=false;
    isJumping=(Boolean)ObfuscationReflectionHelper.getPrivateValue(EntityLivingBase.class,evt.player,EventArmorFullSet.isJumping);
    if (evt.player.isInWater()) {
      if (!evt.player.isSneaking() && !isJumping) {
        if (evt.player.motionX > -speed && evt.player.motionX < speed) {
          evt.player.motionX*=speed;
          evt.player.motionY=0F;
        }
        if (evt.player.motionZ > -speed && evt.player.motionZ < speed) {
          evt.player.motionZ*=speed;
          evt.player.motionY=0F;
        }
      }
      if (isJumping || evt.player.isSneaking()) {
        evt.player.motionY*=speed;
        if (evt.player.motionX > -speed && evt.player.motionX < speed) {
          evt.player.motionX*=speed;
        }
        if (evt.player.motionZ > -speed && evt.player.motionZ < speed) {
          evt.player.motionZ*=speed;
        }
      }
    }
  }
  if (boots == VanillaItemsArmor.shadowBoots && body == VanillaItemsArmor.shadowBody && legs == VanillaItemsArmor.shadowLegs && helmet == VanillaItemsArmor.shadowHelmet) {
    speedMultiplier=3;
  }
  if (boots == VanillaItemsArmor.frozenBoots && body == VanillaItemsArmor.frozenBody && legs == VanillaItemsArmor.frozenLegs && helmet == VanillaItemsArmor.frozenHelmet && !evt.player.worldObj.isRemote && Ticker.tick % 10 == 0) {
    List<Entity> entities=evt.player.worldObj.getEntitiesWithinAABB(EntityMob.class,evt.player.boundingBox.expand(6,6,6));
    for (    Entity e : entities) {
      ((EntityMob)e).addPotionEffect(new PotionEffect(Potion.moveSlowdown.id,40,1,true));
    }
  }
  if (boots == VanillaItemsArmor.terranBoots && body == VanillaItemsArmor.terranBody && legs == VanillaItemsArmor.terranLegs && helmet == VanillaItemsArmor.terranHelmet) {
    evt.player.addPotionEffect(new PotionEffect(Potion.digSpeed.id,20,2,true));
  }
  if (boots == VanillaItemsArmor.skelemanBoots && body == VanillaItemsArmor.skelemanBody && legs == VanillaItemsArmor.skelemanLegs && helmet == VanillaItemsArmor.skelemanHelmet) {
    if (evt.player.getFoodStats().needFood()) {
      evt.player.getFoodStats().addStats(1,0);
    }
  }
  if (boots == IceikaItems.santaBoots && body == IceikaItems.santaTunic && legs == IceikaItems.santaPants && helmet == IceikaItems.santaCap) {
    if (evt.player.worldObj.provider.dimensionId == ConfigurationHelper.iceika) {
      if (evt.player.getFoodStats().needFood()) {
        evt.player.getFoodStats().addStats(1,0);
      }
      speedMultiplier=2;
    }
  }
  if (body == VetheaItems.glisteningBody && legs == VetheaItems.glisteningLegs && boots == VetheaItems.glisteningBoots && helmet == VetheaItems.glisteningMask) {
    speedMultiplier=1.4f;
  }
  if (body == VetheaItems.demonizedBody && legs == VetheaItems.demonizedLegs && boots == VetheaItems.demonizedBoots && helmet == VetheaItems.demonizedMask) {
    speedMultiplier=1.8f;
  }
  if (body == VetheaItems.tormentedBody && legs == VetheaItems.tormentedLegs && boots == VetheaItems.tormentedBoots && helmet == VetheaItems.tormentedMask) {
    speedMultiplier=2.2f;
  }
  ObfuscationReflectionHelper.setPrivateValue(PlayerCapabilities.class,evt.player.capabilities,0.1f * speedMultiplier,walkSpeed);
  if (body == VetheaItems.glisteningBody && legs == VetheaItems.glisteningLegs && boots == VetheaItems.glisteningBoots && helmet == VetheaItems.glisteningHood) {
    evt.player.fallDistance=-0.5F;
  }
  if (body == VetheaItems.demonizedBody && legs == VetheaItems.demonizedLegs && boots == VetheaItems.demonizedBoots && helmet == VetheaItems.demonizedHood) {
    evt.player.fallDistance=-0.5F;
  }
  if (body == VetheaItems.tormentedBody && legs == VetheaItems.tormentedLegs && boots == VetheaItems.tormentedBoots && helmet == VetheaItems.tormentedHood) {
    evt.player.fallDistance=-0.5F;
  }
  if (evt.player.inventory.hasItem(VetheaItems.minersAmulet))   evt.player.addPotionEffect(new PotionEffect(Potion.digSpeed.id,1,2,true));
}",0.9871831065439556
130654,"@SideOnly(Side.CLIENT) @SubscribeEvent public void renderOverlay(RenderGameOverlayEvent.Post event){
  if (event.isCanceled() || event.type != ElementType.EXPERIENCE)   return;
  if ((EventArmorTick.size != 0) && !Minecraft.getMinecraft().thePlayer.capabilities.isCreativeMode) {
    gui.drawArmor();
  }
}","@SideOnly(Side.CLIENT) @SubscribeEvent public void renderOverlay(RenderGameOverlayEvent.Post event){
  if (event.isCanceled() || event.type != ElementType.EXPERIENCE)   return;
  if (!Minecraft.getMinecraft().thePlayer.capabilities.isCreativeMode) {
    gui.drawArmor();
  }
}",0.9484536082474226
130655,"public static boolean isDeveloperName(String name){
  for (int i=0; i < devs.length; i++) {
    return name.equals(devs[i]);
  }
  return false;
}","public static boolean isDeveloperName(String name){
  for (int i=0; i < devs.length; i++) {
    if (name.equalsIgnoreCase(devs[i]))     return true;
  }
  return false;
}",0.8860759493670886
130656,"@Override protected void dropFewItems(boolean par1,int par2){
  Item i=getDropItem();
  Item i2=VanillaItemsWeapons.sandslash;
  int var3, var4;
  var3=this.rand.nextInt(6) + 4;
  for (var4=0; var4 < var3; var4++)   this.dropItem(i,1);
  for (var4=0; var4 < 1; var4++)   this.dropItem(i2,1);
}","@Override protected void dropFewItems(boolean par1,int par2){
  this.dropItem(VanillaItemsOther.divineShards,this.rand.nextInt(4) + 3);
  this.dropItem(VanillaItemsWeapons.sandslash,1);
}",0.4916666666666666
130657,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int par7,float par8,float par9,float par10){
  if (world.provider.dimensionId != 0)   player.addChatMessage(Util.getChatComponent(Util.AQUA + ""String_Node_Str""));
  if (!world.isRemote) {
    EntityAncientEntity entity=new EntityAncientEntity(world);
    entity.setPosition(x,y + 1,z);
    if (world.getCollidingBoundingBoxes(entity,entity.boundingBox).isEmpty()) {
      world.spawnEntityInWorld(entity);
      if (player.capabilities.isCreativeMode)       stack.stackSize--;
    }
  }
  return true;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int par7,float par8,float par9,float par10){
  if (world.provider.dimensionId != 0)   player.addChatMessage(Util.getChatComponent(Util.AQUA + ""String_Node_Str""));
  if (!world.isRemote) {
    EntityAncientEntity entity=new EntityAncientEntity(world);
    entity.setPosition(x,y + 1,z);
    if (world.getCollidingBoundingBoxes(entity,entity.boundingBox).isEmpty()) {
      world.spawnEntityInWorld(entity);
      if (!player.capabilities.isCreativeMode)       stack.stackSize--;
    }
  }
  return true;
}",0.999172870140612
130658,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int index){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(index);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (itemstack.getItem() != VetheaItems.acid)     return null;
    if (!this.mergeItemStack(itemstack1,this.numRows * 9,this.inventorySlots.size(),true)) {
      return null;
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.onSlotChanged();
    }
  }
  return itemstack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int index){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(index);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (itemstack.getItem() != VetheaItems.acid)     return null;
    if ((index == 0 && !this.mergeItemStack(itemstack1,1,this.inventorySlots.size(),false)) || (index != 0 && !this.mergeItemStack(itemstack1,0,1,false)))     return null;
    if (itemstack1.stackSize == 0) {
      slot.putStack((ItemStack)null);
    }
 else {
      slot.onSlotChanged();
    }
  }
  return itemstack;
}",0.8551181102362204
130659,"@Override public void updateEntity(){
  super.updateEntity();
  for (int n=0; n < 3; n++) {
    DivineRPG.proxy.spawnParticle(this.worldObj,this.xCoord + 0.5,this.yCoord + 0.5,this.zCoord + 0.5,""String_Node_Str"",true,3);
  }
  if (!this.worldObj.isRemote) {
    if (this.spawnTimer > 0)     this.spawnTimer--;
    if (this.spawnTimer == 0) {
      int c=this.worldObj.getEntitiesWithinAABB(Entity.class,AxisAlignedBB.getBoundingBox(this.xCoord,this.yCoord,this.zCoord,this.xCoord + 1,this.yCoord + 1,this.zCoord + 1).expand(8,6,8)).size();
      for (int x=-4; x <= 4; x++) {
        for (int y=-2; y <= 4; y++) {
          for (int z=-4; z <= 4; z++) {
            if (this.yCoord + y > 0 && this.worldObj.getBlock(this.xCoord + x,this.yCoord + y,this.zCoord + z) == Blocks.air && this.worldObj.getBlock(this.xCoord + x,this.yCoord + y + 1,this.zCoord + z) == Blocks.air && this.worldObj.getBlock(this.xCoord + x,this.yCoord + y - 1,this.zCoord + z) != Blocks.air && this.rand.nextInt(20) == 0 && c < 8) {
              Entity e=EntityList.createEntityByName(this.entityName,this.worldObj);
              if (e != null) {
                e.setLocationAndAngles(this.xCoord + x,this.yCoord + y,this.zCoord + z,this.rand.nextInt(360),0);
                this.worldObj.spawnEntityInWorld(e);
              }
            }
          }
        }
      }
      this.spawnTimer=400;
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  for (int n=0; n < 3; n++) {
    DivineRPG.proxy.spawnParticle(this.worldObj,this.xCoord + 0.5,this.yCoord + 0.5,this.zCoord + 0.5,""String_Node_Str"",true,3);
  }
  if (!this.worldObj.isRemote) {
    if (this.spawnTimer > 0)     this.spawnTimer--;
    if (this.spawnTimer == 0) {
      int c=this.worldObj.getEntitiesWithinAABB(EntityRoamer.class,AxisAlignedBB.getBoundingBox(this.xCoord,this.yCoord,this.zCoord,this.xCoord + 1,this.yCoord + 1,this.zCoord + 1).expand(8,6,8)).size();
      if (c < 8) {
        for (int x=-4; x <= 4; x++) {
          for (int y=-2; y <= 4; y++) {
            for (int z=-4; z <= 4; z++) {
              if (this.yCoord + y > 0 && this.worldObj.getBlock(this.xCoord + x,this.yCoord + y,this.zCoord + z) == Blocks.air && this.worldObj.getBlock(this.xCoord + x,this.yCoord + y + 1,this.zCoord + z) == Blocks.air && this.worldObj.getBlock(this.xCoord + x,this.yCoord + y - 1,this.zCoord + z) != Blocks.air && this.rand.nextInt(20) == 0) {
                Entity e=EntityList.createEntityByName(this.entityName,this.worldObj);
                if (e != null) {
                  e.setLocationAndAngles(this.xCoord + x,this.yCoord + y,this.zCoord + z,this.rand.nextInt(360),0);
                  this.worldObj.spawnEntityInWorld(e);
                  System.out.println(""String_Node_Str"");
                }
              }
            }
          }
        }
      }
      this.spawnTimer=50;
    }
  }
}",0.95558639833449
130660,"@Override public boolean generate(World world,Random rand,int x,int y,int z){
  byte b0=3;
  int l=rand.nextInt(2) + 2;
  int i1=rand.nextInt(2) + 2;
  int j1=0, k1, l1, i2;
  for (k1=x - l - 1; k1 <= x + l + 1; ++k1) {
    for (l1=y - 1; l1 <= y + b0 + 1; ++l1) {
      for (i2=z - i1 - 1; i2 <= z + i1 + 1; ++i2) {
        Material material=world.getBlock(k1,l1,i2).getMaterial();
        if (l1 == y - 1 && !material.isSolid())         return false;
        if (l1 == y + b0 + 1 && !material.isSolid())         return false;
        if ((k1 == x - l - 1 || k1 == x + l + 1 || i2 == z - i1 - 1 || i2 == z + i1 + 1) && l1 == y && world.isAirBlock(k1,l1,i2) && world.isAirBlock(k1,l1 + 1,i2))         ++j1;
      }
    }
  }
  if (j1 >= 1 && j1 <= 5) {
    for (k1=x - l - 1; k1 <= x + l + 1; ++k1) {
      for (l1=y + b0; l1 >= y - 1; --l1) {
        for (i2=z - i1 - 1; i2 <= z + i1 + 1; ++i2) {
          if (k1 != x - l - 1 && l1 != y - 1 && i2 != z - i1 - 1 && k1 != x + l + 1 && l1 != y + b0 + 1 && i2 != z + i1 + 1)           world.setBlockToAir(k1,l1,i2);
 else           if (l1 >= 0 && !world.getBlock(k1,l1 - 1,i2).getMaterial().isSolid())           world.setBlockToAir(k1,l1,i2);
 else           if (world.getBlock(k1,l1,i2).getMaterial().isSolid()) {
            if (l1 == y - 1 && rand.nextInt(4) != 0)             world.setBlock(k1,l1,i2,VanillaBlocks.divineMossystone,0,2);
 else             world.setBlock(k1,l1,i2,Blocks.cobblestone,0,2);
          }
        }
      }
    }
    k1=0;
    while (k1 < 2) {
      l1=0;
      while (true) {
        if (l1 < 3) {
          label101: {
            i2=x + rand.nextInt(l * 2 + 1) - l;
            int j2=z + rand.nextInt(i1 * 2 + 1) - i1;
            if (world.isAirBlock(i2,y,j2)) {
              int k2=0;
              if (world.getBlock(i2 - 1,y,j2).getMaterial().isSolid())               ++k2;
              if (world.getBlock(i2 + 1,y,j2).getMaterial().isSolid())               ++k2;
              if (world.getBlock(i2,y,j2 - 1).getMaterial().isSolid())               ++k2;
              if (world.getBlock(i2,y,j2 + 1).getMaterial().isSolid())               ++k2;
              if (k2 == 1) {
                world.setBlock(i2,y,j2,Blocks.chest,0,2);
                TileEntityChest tileentitychest=(TileEntityChest)world.getTileEntity(i2,y,j2);
                if (tileentitychest != null) {
                  WeightedRandomChestContent.generateChestContents(rand,items,tileentitychest,5);
                }
                break label101;
              }
            }
            ++l1;
            continue;
          }
        }
        ++k1;
        break;
      }
    }
    world.setBlock(x,y,z,VanillaBlocks.divineMobSpawner,0,2);
    System.out.println(x + ""String_Node_Str"" + y+ ""String_Node_Str""+ z);
    TileEntityStupidSpawner spawnerTE=(TileEntityStupidSpawner)world.getTileEntity(x,y,z);
    if (spawnerTE != null)     spawnerTE.setEntityName(this.pickMobSpawner(rand));
 else     System.err.println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
    return true;
  }
 else   return false;
}","@Override public boolean generate(World world,Random rand,int x,int y,int z){
  byte b0=3;
  int l=rand.nextInt(2) + 2;
  int i1=rand.nextInt(2) + 2;
  int j1=0, k1, l1, i2;
  for (k1=x - l - 1; k1 <= x + l + 1; ++k1) {
    for (l1=y - 1; l1 <= y + b0 + 1; ++l1) {
      for (i2=z - i1 - 1; i2 <= z + i1 + 1; ++i2) {
        Material material=world.getBlock(k1,l1,i2).getMaterial();
        if (l1 == y - 1 && !material.isSolid())         return false;
        if (l1 == y + b0 + 1 && !material.isSolid())         return false;
        if ((k1 == x - l - 1 || k1 == x + l + 1 || i2 == z - i1 - 1 || i2 == z + i1 + 1) && l1 == y && world.isAirBlock(k1,l1,i2) && world.isAirBlock(k1,l1 + 1,i2))         ++j1;
      }
    }
  }
  if (j1 >= 1 && j1 <= 5) {
    for (k1=x - l - 1; k1 <= x + l + 1; ++k1) {
      for (l1=y + b0; l1 >= y - 1; --l1) {
        for (i2=z - i1 - 1; i2 <= z + i1 + 1; ++i2) {
          if (k1 != x - l - 1 && l1 != y - 1 && i2 != z - i1 - 1 && k1 != x + l + 1 && l1 != y + b0 + 1 && i2 != z + i1 + 1)           world.setBlockToAir(k1,l1,i2);
 else           if (l1 >= 0 && !world.getBlock(k1,l1 - 1,i2).getMaterial().isSolid())           world.setBlockToAir(k1,l1,i2);
 else           if (world.getBlock(k1,l1,i2).getMaterial().isSolid()) {
            if (l1 == y - 1 && rand.nextInt(4) != 0)             world.setBlock(k1,l1,i2,VanillaBlocks.divineMossystone,0,2);
 else             world.setBlock(k1,l1,i2,Blocks.cobblestone,0,2);
          }
        }
      }
    }
    k1=0;
    while (k1 < 2) {
      l1=0;
      while (true) {
        if (l1 < 3) {
          label101: {
            i2=x + rand.nextInt(l * 2 + 1) - l;
            int j2=z + rand.nextInt(i1 * 2 + 1) - i1;
            if (world.isAirBlock(i2,y,j2)) {
              int k2=0;
              if (world.getBlock(i2 - 1,y,j2).getMaterial().isSolid())               ++k2;
              if (world.getBlock(i2 + 1,y,j2).getMaterial().isSolid())               ++k2;
              if (world.getBlock(i2,y,j2 - 1).getMaterial().isSolid())               ++k2;
              if (world.getBlock(i2,y,j2 + 1).getMaterial().isSolid())               ++k2;
              if (k2 == 1) {
                world.setBlock(i2,y,j2,Blocks.chest,0,2);
                TileEntityChest tileentitychest=(TileEntityChest)world.getTileEntity(i2,y,j2);
                if (tileentitychest != null) {
                  WeightedRandomChestContent.generateChestContents(rand,items,tileentitychest,5);
                }
                break label101;
              }
            }
            ++l1;
            continue;
          }
        }
        ++k1;
        break;
      }
    }
    world.setBlock(x,y,z,VanillaBlocks.divineMobSpawner,0,2);
    TileEntityStupidSpawner spawnerTE=(TileEntityStupidSpawner)world.getTileEntity(x,y,z);
    if (spawnerTE != null)     spawnerTE.setEntityName(this.pickMobSpawner(rand));
 else     System.err.println(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str"");
    return true;
  }
 else   return false;
}",0.9222528810258076
130661,"public boolean generate(World world,Random rand,int i,int j,int k){
  for (int x=0; x < 31; x++) {
    for (int y=0; y < 6; y++) {
      for (int z=0; z < 20; z++) {
        world.setBlock(i + x,j + y,k + z,Blocks.air);
      }
    }
  }
  System.out.println(i + ""String_Node_Str"" + k);
  world.setBlock(i + 0,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 2,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 2,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 1,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 1,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 1,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 1,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 1,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 1,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 1,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 1,j + 3,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 2,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 2,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 2,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 2,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 2,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 2,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 2,j + 3,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 3,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 3,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 2,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 2,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 4,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 4,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 4,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 4,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 5,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 5,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 5,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 5,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 6,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 6,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 6,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 6,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 7,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 7,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 7,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 7,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 8,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 8,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 3,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 3,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 9,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 9,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 9,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 9,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 10,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 10,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 3,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 5,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 7,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 2,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 2,k + 12,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 14,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 16,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 12,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 12,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 15,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 16,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 14,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 14,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 15,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 16,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 15,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 16,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 16,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 16,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 18,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 18,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 4,k + 9,VetheaBlocks.helioticBeam);
  world.setBlock(i + 18,j + 4,k + 10,VetheaBlocks.helioticBeam);
  world.setBlock(i + 18,j + 4,k + 11,VetheaBlocks.helioticBeam);
  world.setBlock(i + 18,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 4,k + 9,VetheaBlocks.helioticBeam);
  world.setBlock(i + 19,j + 4,k + 10,VetheaBlocks.helioticBeam);
  world.setBlock(i + 19,j + 4,k + 11,VetheaBlocks.helioticBeam);
  world.setBlock(i + 19,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 20,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 20,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 4,k + 9,VetheaBlocks.helioticBeam);
  world.setBlock(i + 20,j + 4,k + 10,VetheaBlocks.helioticBeam);
  world.setBlock(i + 20,j + 4,k + 11,VetheaBlocks.helioticBeam);
  world.setBlock(i + 20,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 22,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 22,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 4,k + 12,VetheaBlocks.helioticBeam);
  world.setBlock(i + 22,j + 4,k + 13,VetheaBlocks.helioticBeam);
  world.setBlock(i + 22,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 22,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 12,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 13,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 24,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 24,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 12,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 13,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 25,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 25,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 25,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 9,VetheaBlocks.villageLamp);
  world.setBlock(i + 26,j + 1,k + 10,VetheaBlocks.villageLamp);
  world.setBlock(i + 26,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 26,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 26,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 1,k + 9,VetheaBlocks.villageLamp);
  world.setBlock(i + 27,j + 1,k + 10,VetheaBlocks.villageLamp);
  world.setBlock(i + 27,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 2,k + 9,VetheaBlocks.karosAltar);
  world.setBlock(i + 27,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 9,VetheaBlocks.villageLamp);
  world.setBlock(i + 28,j + 1,k + 10,VetheaBlocks.villageLamp);
  world.setBlock(i + 28,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 3,k + 9,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 3,k + 10,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 2,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 4,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 6,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 8,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 9,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 10,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 11,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 13,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 15,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 17,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 30,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 17,VetheaBlocks.karosBricks2);
  return true;
}","public boolean generate(World world,Random rand,int i,int j,int k){
  for (int x=0; x < 31; x++) {
    for (int y=0; y < 6; y++) {
      for (int z=0; z < 20; z++) {
        world.setBlock(i + x,j + y,k + z,Blocks.air);
      }
    }
  }
  world.setBlock(i + 0,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 2,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 0,j + 2,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 0,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 1,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 1,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 1,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 1,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 1,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 1,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 1,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 1,j + 3,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 1,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 2,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 2,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 2,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 2,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 2,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 2,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 2,j + 3,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 2,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 3,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 3,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 2,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 2,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 3,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 3,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 4,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 4,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 4,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 4,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 4,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 5,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 5,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 5,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 5,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 5,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 6,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 6,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 6,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 6,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 6,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 7,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 7,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 7,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 7,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 7,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 8,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 8,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 2,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 2,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 3,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 8,j + 3,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 8,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 9,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 9,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 9,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 0,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 1,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 2,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 3,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 9,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 9,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 10,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 10,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 3,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 5,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 7,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 2,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 2,k + 12,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 14,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 16,VetheaBlocks.karosCannon);
  world.setBlock(i + 10,j + 2,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 10,j + 3,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 10,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 11,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 11,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 11,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 11,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 12,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 12,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 12,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 12,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 12,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 12,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 13,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 13,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 15,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 16,VetheaBlocks.helioticBeam);
  world.setBlock(i + 13,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 13,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 13,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 14,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 14,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 14,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 14,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 15,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 16,VetheaBlocks.helioticBeam);
  world.setBlock(i + 14,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 14,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 14,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 15,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 15,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 15,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 16,VetheaBlocks.helioticBeam);
  world.setBlock(i + 15,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 15,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 15,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 16,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 16,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 16,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 16,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 16,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 16,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 17,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 17,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 17,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 17,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 18,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 18,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 18,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 18,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 4,k + 9,VetheaBlocks.helioticBeam);
  world.setBlock(i + 18,j + 4,k + 10,VetheaBlocks.helioticBeam);
  world.setBlock(i + 18,j + 4,k + 11,VetheaBlocks.helioticBeam);
  world.setBlock(i + 18,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 18,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 18,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 19,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 19,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 4,k + 9,VetheaBlocks.helioticBeam);
  world.setBlock(i + 19,j + 4,k + 10,VetheaBlocks.helioticBeam);
  world.setBlock(i + 19,j + 4,k + 11,VetheaBlocks.helioticBeam);
  world.setBlock(i + 19,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 19,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 19,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 20,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 20,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 20,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 20,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 4,k + 9,VetheaBlocks.helioticBeam);
  world.setBlock(i + 20,j + 4,k + 10,VetheaBlocks.helioticBeam);
  world.setBlock(i + 20,j + 4,k + 11,VetheaBlocks.helioticBeam);
  world.setBlock(i + 20,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 20,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 20,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 21,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 21,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 21,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 21,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 22,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 22,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 22,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 22,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 4,k + 12,VetheaBlocks.helioticBeam);
  world.setBlock(i + 22,j + 4,k + 13,VetheaBlocks.helioticBeam);
  world.setBlock(i + 22,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 22,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 22,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 22,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 23,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 23,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 12,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 13,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 23,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 23,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 23,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 24,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 24,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 24,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 24,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 12,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 13,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 14,VetheaBlocks.helioticBeam);
  world.setBlock(i + 24,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 24,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 24,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 25,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 25,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 4,k + 4,VetheaBlocks.helioticBeam);
  world.setBlock(i + 25,j + 4,k + 5,VetheaBlocks.helioticBeam);
  world.setBlock(i + 25,j + 4,k + 6,VetheaBlocks.helioticBeam);
  world.setBlock(i + 25,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 25,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 25,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 0,k + 2,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 3,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 4,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 5,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 6,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 7,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 8,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 9,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 10,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 11,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 12,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 13,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 14,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 15,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 26,j + 0,k + 16,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 17,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 26,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 9,VetheaBlocks.villageLamp);
  world.setBlock(i + 26,j + 1,k + 10,VetheaBlocks.villageLamp);
  world.setBlock(i + 26,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 26,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 26,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 26,j + 5,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 26,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 27,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 27,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 1,k + 9,VetheaBlocks.villageLamp);
  world.setBlock(i + 27,j + 1,k + 10,VetheaBlocks.villageLamp);
  world.setBlock(i + 27,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 27,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 2,k + 9,VetheaBlocks.karosAltar);
  world.setBlock(i + 27,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 27,j + 5,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 0,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 0,k + 2,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 3,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 4,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 5,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 6,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 7,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 8,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 9,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 10,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 11,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 12,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 13,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 14,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 15,VetheaBlocks.karosHeatTileGreen);
  world.setBlock(i + 28,j + 0,k + 16,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 17,VetheaBlocks.karosHeatTileRed);
  world.setBlock(i + 28,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 0,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 9,VetheaBlocks.villageLamp);
  world.setBlock(i + 28,j + 1,k + 10,VetheaBlocks.villageLamp);
  world.setBlock(i + 28,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 1,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 2,k + 0,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 2,k + 1,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 2,k + 18,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 2,k + 19,VetheaBlocks.karosBricks2);
  world.setBlock(i + 28,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 3,k + 9,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 3,k + 10,VetheaBlocks.karosCannon);
  world.setBlock(i + 28,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 28,j + 4,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 0,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 0,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 1,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 3,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 5,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 7,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 12,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 14,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 16,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 1,k + 18,VetheaBlocks.karosBricks2);
  world.setBlock(i + 29,j + 2,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 2,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 4,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 6,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 8,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 9,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 10,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 11,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 13,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 15,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 2,k + 17,VetheaBlocks.karosCannon);
  world.setBlock(i + 29,j + 2,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 1,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 2,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 3,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 4,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 5,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 6,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 7,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 8,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 9,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 10,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 11,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 12,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 13,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 14,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 15,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 16,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 17,VetheaBlocks.karosBricks);
  world.setBlock(i + 29,j + 3,k + 18,VetheaBlocks.karosBricks);
  world.setBlock(i + 30,j + 0,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 0,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 1,k + 17,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 2,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 4,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 6,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 8,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 9,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 10,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 11,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 13,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 15,VetheaBlocks.karosBricks2);
  world.setBlock(i + 30,j + 2,k + 17,VetheaBlocks.karosBricks2);
  return true;
}",0.999679832728936
130662,"public void manageAbilities(){
  if (this.abilityCooldown == 0) {
    this.abilityCooldown=200;
switch (this.rand.nextInt(3)) {
case 0:
      ability=CEILING;
    this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0);
  this.playSound(Sounds.ceilingExplosions.getPrefixedName(),1.0F,1.0F);
if (!this.worldObj.isRemote) Util.sendMessageToAll(""String_Node_Str"");
break;
case 1:
ability=CANNONS;
break;
case 2:
ability=FLOOR;
break;
default :
break;
}
}
 else if (this.abilityCooldown > 0) {
this.abilityCooldown--;
}
System.out.println(abilityCooldown);
}","public void manageAbilities(){
  if (this.abilityCooldown == 0) {
    this.abilityCooldown=200;
switch (this.rand.nextInt(3)) {
case 0:
      ability=CEILING;
    this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setBaseValue(0);
  this.playSound(Sounds.ceilingExplosions.getPrefixedName(),1.0F,1.0F);
if (!this.worldObj.isRemote) Util.sendMessageToAll(""String_Node_Str"");
break;
case 1:
ability=CANNONS;
break;
case 2:
ability=FLOOR;
break;
default :
break;
}
}
 else if (this.abilityCooldown > 0) {
this.abilityCooldown--;
}
}",0.966934763181412
130663,"@Override public int quantityDropped(Random rand){
  if (twilightOre)   return edenArmor;
  return 1;
}","@Override public int quantityDropped(int meta,int fortune,Random random){
  if (twilightOre && fortune > 0) {
    int j=random.nextInt(fortune + 2) - 1;
    if (j < 0)     j=0;
    return (j + 1);
  }
  return 1;
}",0.4605678233438486
130664,"@Override public void render(Entity entity,float f,float f1,float f2,float f3,float f4,float f5){
  super.render(entity,f,f1,f2,f3,f4,f5);
  setRotationAngles(f,f1,f2,f3,f4,f5,entity);
  frostBody.render(f5);
  shard1.render(f5);
  shard2.render(f5);
  shard7.render(f5);
  shard8.render(f5);
  shard4.render(f5);
  shard3.render(f5);
  shard5.render(f5);
  shard6.render(f5);
}","@Override public void render(Entity entity,float f,float f1,float f2,float f3,float f4,float f5){
  super.render(entity,f,f1,f2,f3,f4,f5);
  setRotationAngles(f,f1,f2,f3,f4,f5,entity);
  GL11.glPushMatrix();
  GL11.glScalef(2,2,2);
  frostBody.render(f5);
  shard1.render(f5);
  shard2.render(f5);
  shard7.render(f5);
  shard8.render(f5);
  shard4.render(f5);
  shard3.render(f5);
  shard5.render(f5);
  shard6.render(f5);
  GL11.glPopMatrix();
}",0.9163636363636364
130665,"@Override public void onUpdate(){
  super.onUpdate();
  this.prevAttackCounter=this.attackCounter;
  double var1=this.waypointX - this.posX;
  double var3=this.waypointY - this.posY;
  double var5=this.waypointZ - this.posZ;
  double var7=var1 * var1 + var3 * var3 + var5 * var5;
  if (var7 < 1.0D || var7 > 3600.0D) {
    this.waypointX=this.posX + (this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F;
    this.waypointY=this.posY + (this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F;
    this.waypointZ=this.posZ + (this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F;
  }
  if (this.courseChangeCooldown-- <= 0) {
    this.courseChangeCooldown+=this.rand.nextInt(5) + 2;
    var7=MathHelper.sqrt_double(var7);
    if (this.isCourseTraversable(this.waypointX,this.waypointY,this.waypointZ,var7)) {
      this.motionX+=var1 / var7 * 0.1D;
      this.motionY+=var3 / var7 * 0.1D;
      this.motionZ+=var5 / var7 * 0.1D;
    }
 else {
      this.waypointX=this.posX;
      this.waypointY=this.posY;
      this.waypointZ=this.posZ;
    }
  }
  if (this.targetedEntity != null && this.targetedEntity.isDead) {
    this.targetedEntity=null;
  }
  if (this.targetedEntity == null || this.aggroCooldown-- <= 0) {
    this.targetedEntity=this.worldObj.getClosestVulnerablePlayerToEntity(this,100.0D);
    if (this.targetedEntity != null) {
      this.aggroCooldown=20;
    }
  }
  double var9=64.0D;
  if (this.targetedEntity != null && this.targetedEntity.getDistanceSqToEntity(this) < var9 * var9) {
    double var11=this.targetedEntity.posX - this.posX;
    double var13=this.targetedEntity.boundingBox.minY + this.targetedEntity.height / 2.0F - (this.posY + this.height / 2.0F);
    double var15=this.targetedEntity.posZ - this.posZ;
    this.renderYawOffset=this.rotationYaw=-((float)Math.atan2(var11,var15)) * 180.0F / (float)Math.PI;
    if (this.canEntityBeSeen(this.targetedEntity)) {
      if (this.attackCounter == 10) {
        this.worldObj.playAuxSFXAtEntity((EntityPlayer)null,1007,(int)this.posX,(int)this.posY,(int)this.posZ,0);
      }
      ++this.attackCounter;
      if (this.attackCounter == 20) {
        this.worldObj.playAuxSFXAtEntity((EntityPlayer)null,1008,(int)this.posX,(int)this.posY,(int)this.posZ,0);
        EntityLargeFireball var17=new EntityLargeFireball(this.worldObj,this,var11,var13,var15);
        double var18=4.0D;
        Vec3 var20=this.getLook(1.0F);
        var17.posX=this.posX + var20.xCoord * var18;
        var17.posY=this.posY + this.height / 2.0F + 0.5D;
        var17.posZ=this.posZ + var20.zCoord * var18;
        this.worldObj.spawnEntityInWorld(var17);
        this.attackCounter=-40;
      }
    }
 else     if (this.attackCounter > 0) {
      --this.attackCounter;
    }
  }
 else {
    this.renderYawOffset=this.rotationYaw=-((float)Math.atan2(this.motionX,this.motionZ)) * 180.0F / (float)Math.PI;
    if (this.attackCounter > 0) {
      --this.attackCounter;
    }
  }
}","@Override public void onUpdate(){
  super.onUpdate();
  this.prevAttackCounter=this.attackCounter;
  double var1=this.waypointX - this.posX;
  double var3=this.waypointY - this.posY;
  double var5=this.waypointZ - this.posZ;
  double var7=var1 * var1 + var3 * var3 + var5 * var5;
  if (var7 < 1.0D || var7 > 3600.0D) {
    this.waypointX=this.posX + (this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F;
    this.waypointY=this.posY + (this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F;
    this.waypointZ=this.posZ + (this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F;
  }
  if (this.courseChangeCooldown-- <= 0) {
    this.courseChangeCooldown+=this.rand.nextInt(5) + 2;
    var7=MathHelper.sqrt_double(var7);
    if (this.isCourseTraversable(this.waypointX,this.waypointY,this.waypointZ,var7)) {
      this.motionX+=var1 / var7 * 0.1D;
      this.motionY+=var3 / var7 * 0.1D;
      this.motionZ+=var5 / var7 * 0.1D;
    }
 else {
      this.waypointX=this.posX;
      this.waypointY=this.posY;
      this.waypointZ=this.posZ;
    }
  }
  if (this.targetedEntity != null && this.targetedEntity.isDead) {
    this.targetedEntity=null;
  }
  if (this.targetedEntity == null || this.aggroCooldown-- <= 0) {
    this.targetedEntity=this.worldObj.getClosestVulnerablePlayerToEntity(this,100.0D);
    if (this.targetedEntity != null) {
      this.aggroCooldown=20;
    }
  }
  double var9=64.0D;
  if (this.targetedEntity != null && this.targetedEntity.getDistanceSqToEntity(this) < var9 * var9) {
    double var11=this.targetedEntity.posX - this.posX;
    double var13=this.targetedEntity.boundingBox.minY - 5 - this.posY;
    double var15=this.targetedEntity.posZ - this.posZ;
    this.renderYawOffset=this.rotationYaw=-((float)Math.atan2(var11,var15)) * 180.0F / (float)Math.PI;
    if (this.canEntityBeSeen(this.targetedEntity)) {
      if (this.attackCounter == 10) {
        this.worldObj.playAuxSFXAtEntity((EntityPlayer)null,1007,(int)this.posX,(int)this.posY,(int)this.posZ,0);
      }
      ++this.attackCounter;
      if (this.attackCounter == 20) {
        this.worldObj.playAuxSFXAtEntity((EntityPlayer)null,1008,(int)this.posX,(int)this.posY,(int)this.posZ,0);
        EntityLargeFireball var17=new EntityLargeFireball(this.worldObj,this,var11,var13,var15);
        double var18=4.0D;
        Vec3 var20=this.getLook(1.0F);
        var17.posX=this.posX + var20.xCoord * var18;
        var17.posY=this.posY + this.height / 2.0F + 0.5D;
        var17.posZ=this.posZ + var20.zCoord * var18;
        if (!this.worldObj.isRemote)         this.worldObj.spawnEntityInWorld(var17);
        this.attackCounter=-40;
      }
    }
 else     if (this.attackCounter > 0) {
      --this.attackCounter;
    }
  }
 else {
    this.renderYawOffset=this.rotationYaw=-((float)Math.atan2(this.motionX,this.motionZ)) * 180.0F / (float)Math.PI;
    if (this.attackCounter > 0) {
      --this.attackCounter;
    }
  }
}",0.9827467218771566
130666,"public EntityFractite(World var1){
  super(var1);
  this.getNavigator().setAvoidsWater(true);
  this.tasks.addTask(1,new EntityAISwimming(this));
  this.tasks.addTask(8,new EntityAIWatchClosest(this,EntityPlayer.class,32.0F));
  this.tasks.addTask(9,new EntityAILookIdle(this));
}","public EntityFractite(World var1){
  super(var1);
  this.getNavigator().setAvoidsWater(true);
  this.tasks.addTask(1,new EntityAISwimming(this));
  this.tasks.addTask(8,new EntityAIWatchClosest(this,EntityPlayer.class,32.0F));
  this.tasks.addTask(9,new EntityAILookIdle(this));
  this.setSize(1.7f,1.3f);
}",0.9540034071550256
130667,"@Override public void onLivingUpdate(){
  if (!this.worldObj.isRemote) {
    if (this.entityToAttack == null && this.worldObj.getClosestVulnerablePlayerToEntity(this,22F) != null) {
      this.entityToAttack=this.worldObj.getClosestVulnerablePlayerToEntity(this,22F);
    }
    --this.heightOffsetUpdateTime;
    if (this.heightOffsetUpdateTime <= 0) {
      this.heightOffsetUpdateTime=100;
      this.heightOffset=0.5F + (float)this.rand.nextGaussian() * 3.0F;
    }
    if (this.getEntityToAttack() != null && this.getEntityToAttack().posY + (double)this.getEntityToAttack().getEyeHeight() + 5 > this.posY + (double)this.getEyeHeight() + (double)this.heightOffset) {
      this.motionY+=(0.30000001192092896D - this.motionY) * 0.30000001192092896D;
    }
 else     if (this.getEntityToAttack() != null && this.getEntityToAttack().posY + (double)this.getEntityToAttack().getEyeHeight() <= this.posY + (double)this.getEyeHeight() + (double)this.heightOffset) {
      this.attackEntity(this.getEntityToAttack(),this.getDistanceToEntity(this.getEntityToAttack()));
    }
  }
  if (!this.onGround && this.motionY < 0.0D) {
    this.motionY*=0.6D;
  }
  super.onLivingUpdate();
}","@Override public void onLivingUpdate(){
  if (!this.worldObj.isRemote) {
    if (this.entityToAttack == null && this.worldObj.getClosestVulnerablePlayerToEntity(this,22F) != null) {
      this.entityToAttack=this.worldObj.getClosestVulnerablePlayerToEntity(this,22F);
    }
    if (this.getEntityToAttack() != null && this.getEntityToAttack() instanceof EntityPlayer && ((EntityPlayer)this.getEntityToAttack()).capabilities.isCreativeMode) {
      this.entityToAttack=null;
    }
    --this.heightOffsetUpdateTime;
    if (this.heightOffsetUpdateTime <= 0) {
      this.heightOffsetUpdateTime=100;
      this.heightOffset=0.5F + (float)this.rand.nextGaussian() * 3.0F;
    }
    if (this.getEntityToAttack() != null && this.getEntityToAttack().posY + (double)this.getEntityToAttack().getEyeHeight() + 5 > this.posY + (double)this.getEyeHeight() + (double)this.heightOffset) {
      this.motionY+=(0.30000001192092896D - this.motionY) * 0.30000001192092896D;
    }
 else     if (this.getEntityToAttack() != null && this.getEntityToAttack().posY + (double)this.getEntityToAttack().getEyeHeight() <= this.posY + (double)this.getEyeHeight() + (double)this.heightOffset) {
      this.attackEntity(this.getEntityToAttack(),this.getDistanceToEntity(this.getEntityToAttack()));
    }
  }
  if (!this.onGround && this.motionY < 0.0D) {
    this.motionY*=0.6D;
  }
  super.onLivingUpdate();
}",0.9194683346364348
130668,"public EntityFrost(World var1){
  super(var1);
  this.experienceValue=20;
}","public EntityFrost(World var1){
  super(var1);
  this.experienceValue=20;
  this.setSize(1,1);
}",0.8771929824561403
130669,"@Override protected void onImpact(MovingObjectPosition pos){
  if (!this.worldObj.isRemote) {
    if (pos.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
      int var2=pos.blockX;
      int var3=pos.blockY;
      int var4=pos.blockZ;
switch (pos.sideHit) {
case 0:
        var3--;
      break;
case 1:
    var3++;
  break;
case 2:
var4--;
break;
case 3:
var4++;
break;
case 4:
var2--;
break;
case 5:
var2++;
}
if (this.worldObj.isAirBlock(var2,var3,var4)) {
this.worldObj.setBlock(var2,var3,var4,Blocks.fire);
}
}
 else if (pos.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY) {
pos.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this.shootingEntity,pos.entityHit),10.0F);
}
setDead();
}
}","@Override protected void onImpact(MovingObjectPosition pos){
  if (!this.worldObj.isRemote) {
    if (pos.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
      int var2=pos.blockX;
      int var3=pos.blockY;
      int var4=pos.blockZ;
switch (pos.sideHit) {
case 0:
        var3--;
      break;
case 1:
    var3++;
  break;
case 2:
var4--;
break;
case 3:
var4++;
break;
case 4:
var2--;
break;
case 5:
var2++;
}
if (this.worldObj.isAirBlock(var2,var3,var4)) {
this.worldObj.setBlock(var2,var3,var4,Blocks.fire);
}
}
 else if (pos.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY) {
pos.entityHit.attackEntityFrom(DamageSource.causeThrownDamage(this,this.shootingEntity),10.0F);
}
setDead();
}
}",0.9867780097425192
130670,"public ChunkProviderVethea(World par1World,long par2){
  this.worldObj=par1World;
  this.rand=new Random(par2);
  this.noiseGen1=new NoiseGeneratorOctaves(this.rand,16);
  this.noiseGen2=new NoiseGeneratorOctaves(this.rand,16);
  this.noiseGen3=new NoiseGeneratorOctaves(this.rand,8);
  this.noiseGen4=new NoiseGeneratorPerlin(this.rand,4);
  this.noiseGen5=new NoiseGeneratorOctaves(this.rand,10);
  this.noiseGen6=new NoiseGeneratorOctaves(this.rand,16);
  this.mobSpawnerNoise=new NoiseGeneratorOctaves(this.rand,8);
  NoiseGenerator[] noiseGens={noiseGen1,noiseGen2,noiseGen3,noiseGen4,noiseGen5,noiseGen6,mobSpawnerNoise};
  this.noiseGen4=(NoiseGeneratorPerlin)noiseGens[3];
  this.mobSpawnerNoise=(NoiseGeneratorOctaves)noiseGens[6];
  this.items=new ArrayList(8);
  items.add(new Bow());
  items.add(new Hook());
  items.add(new Mushroom());
  items.add(new Pickaxe());
  items.add(new Pointedsquare());
  items.add(new Ring());
  items.add(new Sword());
  items.add(new Trident());
  this.lamps=new ArrayList(2);
  lamps.add(new Lamp1());
  lamps.add(new Lamp2());
  this.floatingTrees=new ArrayList(7);
  floatingTrees.add(new TreeFloating1());
  floatingTrees.add(new TreeFloating2());
  floatingTrees.add(new TreeFloating3());
  floatingTrees.add(new FloatingTree4());
  floatingTrees.add(new FloatingTree5());
  floatingTrees.add(new FloatingTree6());
  floatingTrees.add(new FloatingTree7());
  this.l1Trees=new ArrayList(3);
  l1Trees.add(new Tree4());
  l1Trees.add(new Tree5());
  l1Trees.add(new Tree6());
  this.l2Trees=new ArrayList(2);
  l1Trees.add(new Tree3());
  l1Trees.add(new Tree6());
  this.crypts=new ArrayList(2);
  crypts.add(new Crypt1());
  crypts.add(new Crypt2());
  ceilingTexture=new WorldGenConeUp();
  pillar=new WorldGenVetheanPillar();
  infusion=new InfusionOutpost();
  firecrystals=new WorldGenMinable(VetheaBlocks.fireCrystal,90,VetheaBlocks.dreamGrass);
  hungerVillages=new WorldGenVillageIsland();
  grassClusters=new WorldGenMinable(VetheaBlocks.dreamGrass,16,VetheaBlocks.dreamStone);
  this.pyramids=new ArrayList(3);
  pyramids.add(new Pyramid1());
  pyramids.add(new Pyramid2());
  pyramids.add(new HiveNest());
  this.l3Trees=new ArrayList(3);
  l3Trees.add(new Tree7());
  l3Trees.add(new Tree8());
  l3Trees.add(new WorldGenLayer3SmallTree(false));
  this.l3Altars=new ArrayList(2);
  l3Altars.add(new QuadroticPost());
  l3Altars.add(new KarosMadhouse());
  this.l4Altars=new ArrayList(3);
  l4Altars.add(new Evergarden());
  l4Altars.add(new RaglokChamber());
  l4Altars.add(new WreckHall());
  this.l4Trees=new ArrayList(2);
  l4Trees.add(new Tree1());
  l4Trees.add(new Tree2());
  cracklespikes=new WorldGenVetheanFlower(VetheaBlocks.cracklespike);
  fernites=new WorldGenVetheanFlower(VetheaBlocks.fernite);
  bulatobes=new WorldGenVetheanFlower(VetheaBlocks.bulatobe);
  shinegrass=new WorldGenVetheanFlower(VetheaBlocks.shineGrass);
  greenGemTops=new WorldGenVetheanFlower(VetheaBlocks.gemtopGreen);
  yellowDulahs=new WorldGenVetheanFlower(VetheaBlocks.yellowDulah);
  greenDulahs=new WorldGenVetheanFlower(VetheaBlocks.greenDulah);
}","public ChunkProviderVethea(World par1World,long par2){
  this.worldObj=par1World;
  this.rand=new Random(par2);
  this.noiseGen1=new NoiseGeneratorOctaves(this.rand,16);
  this.noiseGen2=new NoiseGeneratorOctaves(this.rand,16);
  this.noiseGen3=new NoiseGeneratorOctaves(this.rand,8);
  this.noiseGen4=new NoiseGeneratorPerlin(this.rand,4);
  this.noiseGen5=new NoiseGeneratorOctaves(this.rand,10);
  this.noiseGen6=new NoiseGeneratorOctaves(this.rand,16);
  this.mobSpawnerNoise=new NoiseGeneratorOctaves(this.rand,8);
  NoiseGenerator[] noiseGens={noiseGen1,noiseGen2,noiseGen3,noiseGen4,noiseGen5,noiseGen6,mobSpawnerNoise};
  this.noiseGen4=(NoiseGeneratorPerlin)noiseGens[3];
  this.mobSpawnerNoise=(NoiseGeneratorOctaves)noiseGens[6];
  this.items=new ArrayList(8);
  items.add(new Bow());
  items.add(new Hook());
  items.add(new Mushroom());
  items.add(new Pickaxe());
  items.add(new Pointedsquare());
  items.add(new Ring());
  items.add(new Sword());
  items.add(new Trident());
  this.lamps=new ArrayList(2);
  lamps.add(new Lamp1());
  lamps.add(new Lamp2());
  this.floatingTrees=new ArrayList(7);
  this.l1Trees=new ArrayList(3);
  l1Trees.add(new Tree4());
  l1Trees.add(new Tree5());
  l1Trees.add(new Tree6());
  this.l2Trees=new ArrayList(2);
  l1Trees.add(new Tree3());
  l1Trees.add(new Tree6());
  this.crypts=new ArrayList(2);
  crypts.add(new Crypt1());
  crypts.add(new Crypt2());
  ceilingTexture=new WorldGenConeUp();
  pillar=new WorldGenVetheanPillar();
  infusion=new InfusionOutpost();
  firecrystals=new WorldGenMinable(VetheaBlocks.fireCrystal,90,VetheaBlocks.dreamGrass);
  hungerVillages=new WorldGenVillageIsland();
  grassClusters=new WorldGenMinable(VetheaBlocks.dreamGrass,16,VetheaBlocks.dreamStone);
  this.pyramids=new ArrayList(3);
  pyramids.add(new Pyramid1());
  pyramids.add(new Pyramid2());
  pyramids.add(new HiveNest());
  this.l3Trees=new ArrayList(3);
  l3Trees.add(new Tree7());
  l3Trees.add(new Tree8());
  l3Trees.add(new WorldGenLayer3SmallTree(false));
  this.l3Altars=new ArrayList(2);
  l3Altars.add(new QuadroticPost());
  l3Altars.add(new KarosMadhouse());
  this.l4Altars=new ArrayList(3);
  l4Altars.add(new Evergarden());
  l4Altars.add(new RaglokChamber());
  l4Altars.add(new WreckHall());
  this.l4Trees=new ArrayList(2);
  l4Trees.add(new Tree1());
  l4Trees.add(new Tree2());
  cracklespikes=new WorldGenVetheanFlower(VetheaBlocks.cracklespike);
  fernites=new WorldGenVetheanFlower(VetheaBlocks.fernite);
  bulatobes=new WorldGenVetheanFlower(VetheaBlocks.bulatobe);
  shinegrass=new WorldGenVetheanFlower(VetheaBlocks.shineGrass);
  greenGemTops=new WorldGenVetheanFlower(VetheaBlocks.gemtopGreen);
  yellowDulahs=new WorldGenVetheanFlower(VetheaBlocks.yellowDulah);
  greenDulahs=new WorldGenVetheanFlower(VetheaBlocks.greenDulah);
}",0.9502369668246444
130671,"@Override public void populate(IChunkProvider par1IChunkProvider,int par2,int par3){
  int var4=par2 * 16;
  int var5=par3 * 16;
  BiomeGenBase var6=this.worldObj.getBiomeGenForCoords(var4 + 16,var5 + 16);
  this.rand.setSeed(this.worldObj.getSeed());
  long var7=this.rand.nextLong() / 2L * 2L + 1L;
  long var9=this.rand.nextLong() / 2L * 2L + 1L;
  this.rand.setSeed((long)par2 * var7 + (long)par3 * var9 ^ this.worldObj.getSeed());
  boolean var11=false;
  int var12;
  int var13;
  int var14;
  MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Post(par1IChunkProvider,worldObj,rand,par2,par3,var11));
  BlockSand.fallInstantly=false;
}","@Override public void populate(IChunkProvider par1IChunkProvider,int par2,int par3){
  int var4=par2 * 16;
  int var5=par3 * 16;
  BiomeGenBase var6=this.worldObj.getBiomeGenForCoords(var4 + 16,var5 + 16);
  this.rand.setSeed(this.worldObj.getSeed());
  long var7=this.rand.nextLong() / 2L * 2L + 1L;
  long var9=this.rand.nextLong() / 2L * 2L + 1L;
  this.rand.setSeed((long)par2 * var7 + (long)par3 * var9 ^ this.worldObj.getSeed());
  boolean var11=false;
  int var12;
  int var13;
  int var14;
  if (this.rand.nextInt(16) == 0) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=16 - this.rand.nextInt(2);
    var14=var5 + this.rand.nextInt(16) + 8;
  }
  for (int i=0; i < 2; i++) {
    var12=16;
    var13=16;
    var14=16;
    (grassClusters).generate(this.worldObj,this.rand,var12,var13,var14);
  }
  for (int i=0; i < 1; i++) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=rand.nextInt(256);
    var14=var5 + this.rand.nextInt(16) + 8;
    (firecrystals).generate(this.worldObj,this.rand,var12,var13,var14);
  }
  if (this.rand.nextInt(32) == 0) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=17;
    var14=var5 + this.rand.nextInt(16) + 8;
    while (this.worldObj.isAirBlock(var12,var13,var14))     var13--;
    infusion.generate(this.worldObj,this.rand,var12,var13,var14);
  }
  if (this.rand.nextInt(32) == 0) {
    var12=var4 + this.rand.nextInt(16);
    var13=17 - this.rand.nextInt(2);
    var14=var5 + this.rand.nextInt(16);
    (this.items.get(this.rand.nextInt(7))).generate(this.worldObj,this.rand,var12,var13,var14);
  }
  if (this.rand.nextInt(2) == 0) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=17;
    var14=var5 + this.rand.nextInt(16) + 8;
  }
  if (this.rand.nextInt(500) == 0) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=40;
    var14=var5 + this.rand.nextInt(16) + 8;
  }
  for (int i=0; i < 1; i++) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=17;
    var14=var5 + this.rand.nextInt(16) + 8;
  }
  if (this.rand.nextInt(250) == 0) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=17;
    var14=var5 + this.rand.nextInt(16) + 8;
    (crypts.get(this.rand.nextInt(2))).generate(this.worldObj,this.rand,var12,var13,var14);
  }
  if (this.rand.nextInt(250) == 0) {
    var12=var4 + this.rand.nextInt(16) + 8;
    var13=17;
    var14=var5 + this.rand.nextInt(16) + 8;
    (l1Trees.get(this.rand.nextInt(2))).generate(this.worldObj,this.rand,var12,var13,var14);
  }
  MinecraftForge.EVENT_BUS.post(new PopulateChunkEvent.Post(par1IChunkProvider,worldObj,rand,par2,par3,var11));
  BlockSand.fallInstantly=false;
}",0.3967960566851509
130672,"public Block[][][] buildChunk(){
  Block[][][] chunk=new Block[16][256][16];
  for (int x=0; x < 16; x++) {
    for (int y=0; y < 256; y++) {
      for (int z=0; z < 16; z++) {
        if ((y > 0 && y <= 16) || (y > 48 && y <= 64) || (y > 96 && y <= 112)|| (y > 144 && y <= 160))         chunk[x][y][z]=VetheaBlocks.dreamStone;
        if (tree1Count <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(55) == 0 && x + 5 < 16 && z + 7 < 16 && shouldGenTree1) {
          tree1Count++;
          floatingTree1.generate(chunk,x,y,z);
        }
      }
    }
  }
  return chunk;
}","public Block[][][] buildChunk(){
  Block[][][] chunk=new Block[16][256][16];
  for (int x=0; x < 16; x++) {
    for (int y=0; y < 256; y++) {
      for (int z=0; z < 16; z++) {
        if ((y > 0 && y <= 16) || (y > 48 && y <= 64) || (y > 96 && y <= 112)|| (y > 144 && y <= 160))         chunk[x][y][z]=VetheaBlocks.dreamStone;
        if (tree1Countl1 <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 7 < 16 && shouldGenTree1) {
          tree1Countl1++;
          floatingTree1.generate(chunk,x,y,z);
        }
        if (tree2Countl1 <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 8 < 16 && shouldGenTree2) {
          tree2Countl1++;
          floatingTree2.generate(chunk,x,y,z);
        }
        if (tree3Countl1 <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 3 < 16 && shouldGenTree3) {
          tree3Countl1++;
          floatingTree3.generate(chunk,x,y,z);
        }
        if (tree4Countl1 <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree4) {
          tree4Countl1++;
          floatingTree4.generate(chunk,x,y,z);
        }
        if (tree5Countl1 <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 4 < 16 && z + 9 < 16 && shouldGenTree5) {
          tree5Countl1++;
          floatingTree5.generate(chunk,x,y,z);
        }
        if (tree6Countl1 <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree6) {
          tree6Countl1++;
          floatingTree6.generate(chunk,x,y,z);
        }
        if (tree7Countl1 <= 1 && y == 30 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree7) {
          tree7Countl1++;
          floatingTree7.generate(chunk,x,y,z);
        }
        if (tree1Countl2 <= 1 && y == 80 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 7 < 16 && shouldGenTree1) {
          tree1Countl2++;
          floatingTree1.generate(chunk,x,y,z);
        }
        if (tree2Countl2 <= 1 && y == 80 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 8 < 16 && shouldGenTree2) {
          tree2Countl2++;
          floatingTree2.generate(chunk,x,y,z);
        }
        if (tree3Countl2 <= 1 && y == 80 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 3 < 16 && shouldGenTree3) {
          tree3Countl2++;
          floatingTree3.generate(chunk,x,y,z);
        }
        if (tree4Countl2 <= 1 && y == 80 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree4) {
          tree4Countl2++;
          floatingTree4.generate(chunk,x,y,z);
        }
        if (tree5Countl2 <= 1 && y == 80 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 4 < 16 && z + 9 < 16 && shouldGenTree5) {
          tree5Countl2++;
          floatingTree5.generate(chunk,x,y,z);
        }
        if (tree6Countl2 <= 1 && y == 80 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree6) {
          tree6Countl2++;
          floatingTree6.generate(chunk,x,y,z);
        }
        if (tree7Countl2 <= 1 && y == 80 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree7) {
          tree7Countl2++;
          floatingTree7.generate(chunk,x,y,z);
        }
        if (tree1Countl3 <= 1 && y == 128 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 7 < 16 && shouldGenTree1) {
          tree1Countl3++;
          floatingTree1.generate(chunk,x,y,z);
        }
        if (tree2Countl3 <= 1 && y == 128 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 8 < 16 && shouldGenTree2) {
          tree2Countl3++;
          floatingTree2.generate(chunk,x,y,z);
        }
        if (tree3Countl3 <= 1 && y == 128 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 3 < 16 && shouldGenTree3) {
          tree3Countl3++;
          floatingTree3.generate(chunk,x,y,z);
        }
        if (tree4Countl3 <= 1 && y == 128 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree4) {
          tree4Countl3++;
          floatingTree4.generate(chunk,x,y,z);
        }
        if (tree5Countl3 <= 1 && y == 128 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 4 < 16 && z + 9 < 16 && shouldGenTree5) {
          tree5Countl3++;
          floatingTree5.generate(chunk,x,y,z);
        }
        if (tree6Countl3 <= 1 && y == 128 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree6) {
          tree6Countl3++;
          floatingTree6.generate(chunk,x,y,z);
        }
        if (tree7Countl3 <= 1 && y == 128 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree7) {
          tree7Countl3++;
          floatingTree7.generate(chunk,x,y,z);
        }
        if (tree1Countl4 <= 1 && y == 176 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 7 < 16 && shouldGenTree1) {
          tree1Countl4++;
          floatingTree1.generate(chunk,x,y,z);
        }
        if (tree2Countl4 <= 1 && y == 176 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 8 < 16 && shouldGenTree2) {
          tree2Countl4++;
          floatingTree2.generate(chunk,x,y,z);
        }
        if (tree3Countl4 <= 1 && y == 176 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 3 < 16 && z + 3 < 16 && shouldGenTree3) {
          tree3Countl4++;
          floatingTree3.generate(chunk,x,y,z);
        }
        if (tree4Countl4 <= 1 && y == 176 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree4) {
          tree4Countl4++;
          floatingTree4.generate(chunk,x,y,z);
        }
        if (tree5Countl4 <= 1 && y == 176 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 4 < 16 && z + 9 < 16 && shouldGenTree5) {
          tree5Countl4++;
          floatingTree5.generate(chunk,x,y,z);
        }
        if (tree6Countl4 <= 1 && y == 176 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree6) {
          tree6Countl4++;
          floatingTree6.generate(chunk,x,y,z);
        }
        if (tree7Countl4 <= 1 && y == 176 + rand.nextInt(5) && rand.nextInt(155) == 0 && x + 5 < 16 && z + 2 < 16 && shouldGenTree7) {
          tree7Countl4++;
          floatingTree7.generate(chunk,x,y,z);
        }
      }
    }
  }
  return chunk;
}",0.1576550939100739
130673,"@Override public Chunk provideChunk(int i,int j){
  this.rand.setSeed(i * 341873128712L + j * 132897987541L);
  Block[] var3=new Block[32768];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,i * 16,j * 16,16,16);
  this.generateTerrain(i,j,var3,this.biomesForGeneration,this.generatedTemperatures);
  this.replaceBlocksForBiome(i,j,var3,this.biomesForGeneration);
  Chunk var4=new Chunk(this.worldObj,var3,i,j);
  byte[] var5=var4.getBiomeArray();
  for (int var6=0; var6 < var5.length; ++var6) {
    var5[var6]=(byte)this.biomesForGeneration[var6].biomeID;
  }
  var4.generateSkylightMap();
  return var4;
}","@Override public Chunk provideChunk(int i,int j){
  this.rand.setSeed(i * 341873128712L + j * 132897987541L);
  Block[] blocks=new Block[32768];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,i * 16,j * 16,16,16);
  this.generateTerrain(i,j,blocks,this.biomesForGeneration,this.generatedTemperatures);
  this.replaceBlocksForBiome(i,j,blocks,this.biomesForGeneration);
  for (int n=0; n < 32767; n++) {
    if (blocks[n] == TwilightBlocks.apalachiaGrass && blocks[n + 1] != null)     blocks[n]=TwilightBlocks.apalachiaDirt;
  }
  Chunk var4=new Chunk(this.worldObj,blocks,i,j);
  byte[] var5=var4.getBiomeArray();
  for (int var6=0; var6 < var5.length; ++var6) {
    var5[var6]=(byte)this.biomesForGeneration[var6].biomeID;
  }
  var4.generateSkylightMap();
  return var4;
}",0.8352084712111185
130674,"public Chunk provideChunk(int par1,int par2){
  this.rand.setSeed((long)par1 * 391279128714L + (long)par2 * 132894987741L);
  Block[] ablock=new Block[32768];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,par1 * 16,par2 * 16,16,16);
  this.generateTerrain(par1,par2,ablock,this.biomesForGeneration);
  this.replaceBlocksForBiome(par1,par2,ablock,this.biomesForGeneration);
  Chunk chunk=new Chunk(this.worldObj,ablock,par1,par2);
  byte[] abyte=chunk.getBiomeArray();
  for (int k=0; k < abyte.length; ++k) {
    abyte[k]=(byte)this.biomesForGeneration[k].biomeID;
  }
  chunk.generateSkylightMap();
  return chunk;
}","public Chunk provideChunk(int par1,int par2){
  this.rand.setSeed((long)par1 * 391279128714L + (long)par2 * 132894987741L);
  Block[] blocks=new Block[32768];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,par1 * 16,par2 * 16,16,16);
  this.generateTerrain(par1,par2,blocks,this.biomesForGeneration);
  this.replaceBlocksForBiome(par1,par2,blocks,this.biomesForGeneration);
  for (int i=0; i < 32767; i++) {
    if (blocks[i] == TwilightBlocks.edenGrass && blocks[i + 1] != null)     blocks[i]=TwilightBlocks.edenDirt;
  }
  Chunk chunk=new Chunk(this.worldObj,blocks,par1,par2);
  byte[] abyte=chunk.getBiomeArray();
  for (int k=0; k < abyte.length; ++k) {
    abyte[k]=(byte)this.biomesForGeneration[k].biomeID;
  }
  chunk.generateSkylightMap();
  return chunk;
}",0.8699669966996699
130675,"public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1))             flag=false;
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2.canSustainPlant(par1World,par3,par4 - 1,par5,ForgeDirection.UP,(BlockSapling)Blocks.sapling);
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.edenLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.edenLogs,this.metaWood);
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}","public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1))             flag=false;
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2 == TwilightBlocks.edenGrass;
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.edenLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.edenLogs,this.metaWood);
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}",0.9748254707002328
130676,"public Chunk provideChunk(int par1,int par2){
  this.hellRNG.setSeed((long)par1 * 341873128712L + (long)par2 * 132897987541L);
  Block[] abyte=new Block[32768];
  this.generateNetherTerrain(par1,par2,abyte);
  this.replaceBlocksForBiome(par1,par2,abyte);
  this.netherCaveGenerator.func_151539_a(this,this.worldObj,par1,par2,abyte);
  Chunk chunk=new Chunk(this.worldObj,abyte,par1,par2);
  BiomeGenBase[] abiomegenbase=this.worldObj.getWorldChunkManager().loadBlockGeneratorData((BiomeGenBase[])null,par1 * 16,par2 * 16,16,16);
  byte[] abyte1=chunk.getBiomeArray();
  for (int k=0; k < abyte1.length; ++k) {
    abyte1[k]=(byte)abiomegenbase[k].biomeID;
  }
  chunk.resetRelightChecks();
  return chunk;
}","public Chunk provideChunk(int par1,int par2){
  this.hellRNG.setSeed((long)par1 * 341873128712L + (long)par2 * 132897987541L);
  Block[] blocks=new Block[32768];
  this.generateNetherTerrain(par1,par2,blocks);
  this.replaceBlocksForBiome(par1,par2,blocks);
  for (int i=0; i < 32767; i++) {
    if (blocks[i] == TwilightBlocks.mortumGrass && blocks[i + 1] != null)     blocks[i]=TwilightBlocks.mortumDirt;
  }
  Chunk chunk=new Chunk(this.worldObj,blocks,par1,par2);
  BiomeGenBase[] abiomegenbase=this.worldObj.getWorldChunkManager().loadBlockGeneratorData((BiomeGenBase[])null,par1 * 16,par2 * 16,16,16);
  byte[] abyte1=chunk.getBiomeArray();
  for (int k=0; k < abyte1.length; ++k) {
    abyte1[k]=(byte)abiomegenbase[k].biomeID;
  }
  chunk.resetRelightChecks();
  return chunk;
}",0.7220361687876758
130677,"public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1))             flag=false;
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2.canSustainPlant(par1World,par3,par4 - 1,par5,ForgeDirection.UP,(BlockSapling)Blocks.sapling);
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.mortumLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.mortumLogs,this.metaWood);
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}","public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1))             flag=false;
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2 == TwilightBlocks.mortumGrass;
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.mortumLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.mortumLogs,this.metaWood);
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}",0.9748786151572726
130678,"@Override public Chunk provideChunk(int i,int j){
  this.rand.setSeed(i * 341873128712L + j * 132897987541L);
  Block[] var3=new Block[65536];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,i * 16,j * 16,16,16);
  this.generateTerrain(i,j,var3,this.biomesForGeneration,this.generatedTemperatures);
  this.replaceBlocksForBiome(i,j,var3,this.biomesForGeneration);
  Chunk var4=new Chunk(this.worldObj,var3,i,j);
  byte[] var5=var4.getBiomeArray();
  for (int var6=0; var6 < var5.length; ++var6) {
    var5[var6]=(byte)this.biomesForGeneration[var6].biomeID;
  }
  var4.generateSkylightMap();
  return var4;
}","@Override public Chunk provideChunk(int i,int j){
  this.rand.setSeed(i * 341873128712L + j * 132897987541L);
  Block[] blocks=new Block[65536];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,i * 16,j * 16,16,16);
  this.generateTerrain(i,j,blocks,this.biomesForGeneration,this.generatedTemperatures);
  this.replaceBlocksForBiome(i,j,blocks,this.biomesForGeneration);
  for (int n=0; n < 65535; n++) {
    if (blocks[n] == TwilightBlocks.skythernGrass && blocks[n + 1] != null)     blocks[n]=TwilightBlocks.skythernDirt;
  }
  Chunk var4=new Chunk(this.worldObj,blocks,i,j);
  byte[] var5=var4.getBiomeArray();
  for (int var6=0; var6 < var5.length; ++var6) {
    var5[var6]=(byte)this.biomesForGeneration[var6].biomeID;
  }
  var4.generateSkylightMap();
  return var4;
}",0.8363154406891982
130679,"public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1))             flag=false;
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2.canSustainPlant(par1World,par3,par4 - 1,par5,ForgeDirection.UP,(BlockSapling)Blocks.sapling);
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.skythernLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.edenLogs,this.metaWood);
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}","@Override public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1))             flag=false;
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2 == TwilightBlocks.skythernGrass;
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.skythernLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.skythernLogs,this.metaWood);
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}",0.9699137386913528
130680,"@Override public Chunk provideChunk(int i,int j){
  this.rand.setSeed(i * 341873128712L + j * 132897987541L);
  Block[] var3=new Block[32768];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,i * 16,j * 16,16,16);
  this.generateTerrain(i,j,var3,this.biomesForGeneration,this.generatedTemperatures);
  this.replaceBlocksForBiome(i,j,var3,this.biomesForGeneration);
  Chunk var4=new Chunk(this.worldObj,var3,i,j);
  byte[] var5=var4.getBiomeArray();
  for (int var6=0; var6 < var5.length; ++var6) {
    var5[var6]=(byte)this.biomesForGeneration[var6].biomeID;
  }
  var4.generateSkylightMap();
  return var4;
}","@Override public Chunk provideChunk(int i,int j){
  this.rand.setSeed(i * 341873128712L + j * 132897987541L);
  Block[] blocks=new Block[32768];
  this.biomesForGeneration=this.worldObj.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration,i * 16,j * 16,16,16);
  this.generateTerrain(i,j,blocks,this.biomesForGeneration,this.generatedTemperatures);
  this.replaceBlocksForBiome(i,j,blocks,this.biomesForGeneration);
  for (int n=0; n < 32767; n++) {
    if (blocks[n] == TwilightBlocks.wildwoodGrass && blocks[n + 1] != null)     blocks[n]=TwilightBlocks.wildwoodDirt;
  }
  Chunk var4=new Chunk(this.worldObj,blocks,i,j);
  byte[] var5=var4.getBiomeArray();
  for (int var6=0; var6 < var5.length; ++var6) {
    var5[var6]=(byte)this.biomesForGeneration[var6].biomeID;
  }
  var4.generateSkylightMap();
  return var4;
}",0.8363154406891982
130681,"public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1)) {
              flag=false;
            }
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2.canSustainPlant(par1World,par3,par4 - 1,par5,ForgeDirection.UP,(BlockSapling)Blocks.sapling);
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.wildwoodLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.wildwoodLogs,this.metaWood);
            if (this.vinesGrow && k1 > 0) {
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 - 1,par4 + k1,par5)) {
                this.setBlockAndNotifyAdequately(par1World,par3 - 1,par4 + k1,par5,TwilightBlocks.wildwoodVine,8);
              }
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 1,par4 + k1,par5)) {
                this.setBlockAndNotifyAdequately(par1World,par3 + 1,par4 + k1,par5,TwilightBlocks.wildwoodVine,2);
              }
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3,par4 + k1,par5 - 1)) {
                this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5 - 1,TwilightBlocks.wildwoodVine,1);
              }
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3,par4 + k1,par5 + 1)) {
                this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5 + 1,TwilightBlocks.wildwoodVine,4);
              }
            }
          }
        }
        if (this.vinesGrow) {
          for (k1=par4 - 3 + l; k1 <= par4 + l; ++k1) {
            i3=k1 - (par4 + l);
            l1=2 - i3 / 2;
            for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
              for (j2=par5 - l1; j2 <= par5 + l1; ++j2) {
                if (par1World.getBlock(i2,k1,j2).isLeaves(par1World,i2,k1,j2)) {
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2 - 1,k1,j2).isAir(par1World,i2 - 1,k1,j2)) {
                    this.growVines(par1World,i2 - 1,k1,j2,8);
                  }
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2 + 1,k1,j2).isAir(par1World,i2 + 1,k1,j2)) {
                    this.growVines(par1World,i2 + 1,k1,j2,2);
                  }
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2,k1,j2 - 1).isAir(par1World,i2,k1,j2 - 1)) {
                    this.growVines(par1World,i2,k1,j2 - 1,1);
                  }
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2,k1,j2 + 1).isAir(par1World,i2,k1,j2 + 1)) {
                    this.growVines(par1World,i2,k1,j2 + 1,4);
                  }
                }
              }
            }
          }
          if (par2Random.nextInt(5) == 0 && l > 5) {
            for (k1=0; k1 < 2; ++k1) {
              for (i3=0; i3 < 4; ++i3) {
                if (par2Random.nextInt(4 - k1) == 0) {
                  l1=par2Random.nextInt(3);
                }
              }
            }
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}","public boolean generate(World par1World,Random par2Random,int par3,int par4,int par5){
  int l=par2Random.nextInt(3) + this.minTreeHeight;
  boolean flag=true;
  if (par4 >= 1 && par4 + l + 1 <= 256) {
    byte b0;
    int k1;
    Block block;
    for (int i1=par4; i1 <= par4 + 1 + l; ++i1) {
      b0=1;
      if (i1 == par4) {
        b0=0;
      }
      if (i1 >= par4 + 1 + l - 2) {
        b0=2;
      }
      for (int j1=par3 - b0; j1 <= par3 + b0 && flag; ++j1) {
        for (k1=par5 - b0; k1 <= par5 + b0 && flag; ++k1) {
          if (i1 >= 0 && i1 < 256) {
            block=par1World.getBlock(j1,i1,k1);
            if (!this.isReplaceable(par1World,j1,i1,k1)) {
              flag=false;
            }
          }
 else {
            flag=false;
          }
        }
      }
    }
    if (!flag) {
      return false;
    }
 else {
      Block block2=par1World.getBlock(par3,par4 - 1,par5);
      boolean isSoil=block2 == TwilightBlocks.wildwoodGrass;
      if (isSoil && par4 < 256 - l - 1) {
        block2.onPlantGrow(par1World,par3,par4 - 1,par5,par3,par4,par5);
        b0=3;
        byte b1=0;
        int l1;
        int i2;
        int j2;
        int i3;
        for (k1=par4 - b0 + l; k1 <= par4 + l; ++k1) {
          i3=k1 - (par4 + l);
          l1=b1 + 1 - i3 / 2;
          for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
            j2=i2 - par3;
            for (int k2=par5 - l1; k2 <= par5 + l1; ++k2) {
              int l2=k2 - par5;
              if (Math.abs(j2) != l1 || Math.abs(l2) != l1 || par2Random.nextInt(2) != 0 && i3 != 0) {
                Block block1=par1World.getBlock(i2,k1,k2);
                if (block1.isAir(par1World,i2,k1,k2) || block1.isLeaves(par1World,i2,k1,k2)) {
                  this.setBlockAndNotifyAdequately(par1World,i2,k1,k2,TwilightBlocks.wildwoodLeaves,this.metaLeaves);
                }
              }
            }
          }
        }
        for (k1=0; k1 < l; ++k1) {
          block=par1World.getBlock(par3,par4 + k1,par5);
          if (block.isAir(par1World,par3,par4 + k1,par5) || block.isLeaves(par1World,par3,par4 + k1,par5)) {
            this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5,TwilightBlocks.wildwoodLogs,this.metaWood);
            if (this.vinesGrow && k1 > 0) {
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 - 1,par4 + k1,par5)) {
                this.setBlockAndNotifyAdequately(par1World,par3 - 1,par4 + k1,par5,TwilightBlocks.wildwoodVine,8);
              }
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3 + 1,par4 + k1,par5)) {
                this.setBlockAndNotifyAdequately(par1World,par3 + 1,par4 + k1,par5,TwilightBlocks.wildwoodVine,2);
              }
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3,par4 + k1,par5 - 1)) {
                this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5 - 1,TwilightBlocks.wildwoodVine,1);
              }
              if (par2Random.nextInt(3) > 0 && par1World.isAirBlock(par3,par4 + k1,par5 + 1)) {
                this.setBlockAndNotifyAdequately(par1World,par3,par4 + k1,par5 + 1,TwilightBlocks.wildwoodVine,4);
              }
            }
          }
        }
        if (this.vinesGrow) {
          for (k1=par4 - 3 + l; k1 <= par4 + l; ++k1) {
            i3=k1 - (par4 + l);
            l1=2 - i3 / 2;
            for (i2=par3 - l1; i2 <= par3 + l1; ++i2) {
              for (j2=par5 - l1; j2 <= par5 + l1; ++j2) {
                if (par1World.getBlock(i2,k1,j2).isLeaves(par1World,i2,k1,j2)) {
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2 - 1,k1,j2).isAir(par1World,i2 - 1,k1,j2)) {
                    this.growVines(par1World,i2 - 1,k1,j2,8);
                  }
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2 + 1,k1,j2).isAir(par1World,i2 + 1,k1,j2)) {
                    this.growVines(par1World,i2 + 1,k1,j2,2);
                  }
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2,k1,j2 - 1).isAir(par1World,i2,k1,j2 - 1)) {
                    this.growVines(par1World,i2,k1,j2 - 1,1);
                  }
                  if (par2Random.nextInt(4) == 0 && par1World.getBlock(i2,k1,j2 + 1).isAir(par1World,i2,k1,j2 + 1)) {
                    this.growVines(par1World,i2,k1,j2 + 1,4);
                  }
                }
              }
            }
          }
          if (par2Random.nextInt(5) == 0 && l > 5) {
            for (k1=0; k1 < 2; ++k1) {
              for (i3=0; i3 < 4; ++i3) {
                if (par2Random.nextInt(4 - k1) == 0) {
                  l1=par2Random.nextInt(3);
                }
              }
            }
          }
        }
        return true;
      }
 else {
        return false;
      }
    }
  }
 else {
    return false;
  }
}",0.9873443769935178
130682,"private void generateOverworld(World world,Random random,int x,int z){
  BiomeGenBase biome=world.getWorldChunkManager().getBiomeGenAt(x,z);
  addOreSpawn(VanillaBlocks.realmiteOre,world,random,x,z,16,16,5,4,1,25);
  addOreSpawn(VanillaBlocks.arlemiteOre,world,random,x,z,16,16,2,3,1,15);
  addOreSpawn(VanillaBlocks.rupeeOre,world,random,x,z,16,16,2,3,1,15);
  addOreSpawn(Blocks.diamond_ore,world,random,x,z,16,16,2,6,1,23);
  if (world.provider.dimensionId == 0) {
    if (random.nextInt(8) == 0) {
      int posX=x + random.nextInt(16) + 8;
      int posY=random.nextInt(150);
      int posZ=z + random.nextInt(16) + 8;
      if (random.nextInt(10) == 0 || posY < 60)       (new WorldGenLakes(VanillaBlocks.tar)).generate(world,random,posX,posY,posZ);
    }
  }
  if (world.provider.dimensionId == 0) {
    for (int i=0; i < 3; i++) {
      int posX=x + random.nextInt(16) + 8;
      int posY=random.nextInt(60);
      int posZ=z + random.nextInt(16) + 8;
      (new WorldGenDivineDungeon()).generate(world,random,posX,posY,posZ);
    }
  }
  if (biome instanceof BiomeGenForest) {
    for (int i=0; i < 3; i++) {
      int posX=x + random.nextInt(16);
      int posZ=z + random.nextInt(16);
      int posY=world.getHeightValue(posX,posZ);
      (new WorldGenDivineTree(true)).generate(world,random,posX,posY,posZ);
    }
  }
}","private void generateOverworld(World world,Random random,int x,int z){
  BiomeGenBase biome=world.getWorldChunkManager().getBiomeGenAt(x,z);
  addOreSpawn(VanillaBlocks.realmiteOre,world,random,x,z,16,16,5,4,1,25);
  addOreSpawn(VanillaBlocks.arlemiteOre,world,random,x,z,16,16,2,3,1,15);
  addOreSpawn(VanillaBlocks.rupeeOre,world,random,x,z,16,16,2,3,1,15);
  addOreSpawn(Blocks.diamond_ore,world,random,x,z,16,16,2,6,1,23);
  if (random.nextInt(8) == 0) {
    int posX=x + random.nextInt(16) + 8;
    int posY=random.nextInt(150);
    int posZ=z + random.nextInt(16) + 8;
    if (random.nextInt(10) == 0 || posY < 60)     (new WorldGenLakes(VanillaBlocks.tar)).generate(world,random,posX,posY,posZ);
  }
  for (int i=0; i < 3; i++) {
    int posX=x + random.nextInt(16) + 8;
    int posY=random.nextInt(60);
    int posZ=z + random.nextInt(16) + 8;
    (new WorldGenDivineDungeon()).generate(world,random,posX,posY,posZ);
  }
  if (biome instanceof BiomeGenForest) {
    for (int i=0; i < 3; i++) {
      int posX=x + random.nextInt(16);
      int posZ=z + random.nextInt(16);
      int posY=world.getHeightValue(posX,posZ);
      (new WorldGenDivineTree(true)).generate(world,random,posX,posY,posZ);
    }
  }
}",0.8381775333857031
130683,"private void generateNether(World world,Random random,int x,int z){
  addNetherOreSpawn(VanillaBlocks.netheriteOre,world,random,x,z,16,16,10,4,1,128);
  addNetherOreSpawn(VanillaBlocks.bloodgemOre,world,random,x,z,16,16,11,5,1,128);
  if (world.provider.dimensionId == -1) {
    for (int i=0; i < 2; ++i) {
      int posX=x + random.nextInt(16) + 8;
      int posY=random.nextInt(120) + 4;
      int posZ=z + random.nextInt(16) + 8;
      (new WorldGenBlueFire()).generate(world,random,posX,posY,posZ);
    }
  }
}","private void generateNether(World world,Random random,int x,int z){
  addNetherOreSpawn(VanillaBlocks.netheriteOre,world,random,x,z,16,16,10,4,1,128);
  addNetherOreSpawn(VanillaBlocks.bloodgemOre,world,random,x,z,16,16,11,5,1,128);
  for (int i=0; i < 2; ++i) {
    int posX=x + random.nextInt(16) + 8;
    int posY=random.nextInt(120) + 4;
    int posZ=z + random.nextInt(16) + 8;
    (new WorldGenBlueFire()).generate(world,random,posX,posY,posZ);
  }
}",0.9402061855670104
130684,"@Override public void generate(Random rand,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
switch (world.provider.dimensionId) {
case -1:
    generateNether(world,rand,chunkX * 16,chunkZ * 16);
case 0:
  generateOverworld(world,rand,chunkX * 16,chunkZ * 16);
case 1:
generateEnd(world,rand,chunkX * 16,chunkZ * 16);
}
}","@Override public void generate(Random rand,int chunkX,int chunkZ,World world,IChunkProvider chunkGenerator,IChunkProvider chunkProvider){
switch (world.provider.dimensionId) {
case -1:
    generateNether(world,rand,chunkX * 16,chunkZ * 16);
  break;
case 0:
generateOverworld(world,rand,chunkX * 16,chunkZ * 16);
break;
case 1:
generateEnd(world,rand,chunkX * 16,chunkZ * 16);
break;
}
}",0.9667994687915008
130685,"public void addNetherOreSpawn(Block block,World world,Random random,int blockXPos,int blockZPos,int maxX,int maxZ,int chancesToSpawn,int maxVeinSize,int minY,int maxY){
}","public void addNetherOreSpawn(Block block,World world,Random random,int blockXPos,int blockZPos,int maxX,int maxZ,int chancesToSpawn,int maxVeinSize,int minY,int maxY){
  int diffBtwnMinMaxY=maxY - minY;
  for (int x=0; x < chancesToSpawn; x++) {
    int posX=blockXPos + random.nextInt(maxX);
    int posY=minY + random.nextInt(diffBtwnMinMaxY);
    int posZ=blockZPos + random.nextInt(maxZ);
    (new WorldGenMinable(block,maxVeinSize,Blocks.netherrack)).generate(world,random,posX,posY,posZ);
  }
}",0.5067064083457526
130686,"public void addEndOreSpawn(Block block,World world,Random random,int blockXPos,int blockZPos,int maxX,int maxZ,int chancesToSpawn,int maxVeinSize,int minY,int maxY){
}","public void addEndOreSpawn(Block block,World world,Random random,int blockXPos,int blockZPos,int maxX,int maxZ,int chancesToSpawn,int maxVeinSize,int minY,int maxY){
  int diffBtwnMinMaxY=maxY - minY;
  for (int x=0; x < chancesToSpawn; x++) {
    int posX=blockXPos + random.nextInt(maxX);
    int posY=minY + random.nextInt(diffBtwnMinMaxY);
    int posZ=blockZPos + random.nextInt(maxZ);
    (new WorldGenMinable(block,maxVeinSize,Blocks.end_stone)).generate(world,random,posX,posY,posZ);
  }
}",0.5030120481927711
130687,"/** 
 * Adds an Ore Spawn to Minecraft. Simply register all Ores to spawn with this method in your Generation method in your IWorldGeneration extending Class
 * @param The Block to spawn
 * @param The World to spawn in
 * @param A Random object for retrieving random positions within the world to spawn the Block
 * @param An int for passing the X-Coordinate for the Generation method
 * @param An int for passing the Z-Coordinate for the Generation method
 * @param An int for setting the maximum X-Coordinate values for spawning on the X-Axis on a Per-Chunk basis
 * @param An int for setting the maximum Z-Coordinate values for spawning on the Z-Axis on a Per-Chunk basis
 * @param An int for the Number of chances available for the vein to spawn per-chunk
 * @param An int for setting the max size of a vein
 * @param An int for the minimum Y-Coordinate height at which this block may spawn
 * @param An int for the maximum Y-Coordinate height at which this block may spawn
 */
public void addOreSpawn(Block block,World world,Random random,int blockXPos,int blockZPos,int maxX,int maxZ,int chancesToSpawn,int maxVeinSize,int minY,int maxY){
}","public void addOreSpawn(Block block,World world,Random random,int blockXPos,int blockZPos,int maxX,int maxZ,int chancesToSpawn,int maxVeinSize,int minY,int maxY){
  int diffBtwnMinMaxY=maxY - minY;
  for (int x=0; x < chancesToSpawn; x++) {
    int posX=blockXPos + random.nextInt(maxX);
    int posY=minY + random.nextInt(diffBtwnMinMaxY);
    int posZ=blockZPos + random.nextInt(maxZ);
    (new WorldGenMinable(block,maxVeinSize)).generate(world,random,posX,posY,posZ);
  }
}",0.0209488601355514
130688,"public static void init(){
  RenderingRegistry.registerEntityRenderingHandler(EntityCarol.class,new RenderProjectile(EntityResourceLocation.music));
  RenderingRegistry.registerEntityRenderingHandler(EntityMusic.class,new RenderProjectile(EntityResourceLocation.music));
  RenderingRegistry.registerEntityRenderingHandler(EntityFrostclaw.class,new RenderProjectile(EntityResourceLocation.frostclaw));
  RenderingRegistry.registerEntityRenderingHandler(EntityAlicanto.class,new RenderDivineMob(new ModelAlicanto(),0.0F,EntityResourceLocation.ALICANTO));
  RenderingRegistry.registerEntityRenderingHandler(EntityFractite.class,new RenderDivineMob(new ModelFractite(),0.5F,EntityResourceLocation.FRACTITE));
  RenderingRegistry.registerEntityRenderingHandler(EntityGlacide.class,new RenderSizeable(new ModelGlacide(),0.0F,1.0F,EntityResourceLocation.GLACON));
  RenderingRegistry.registerEntityRenderingHandler(EntityHastreus.class,new RenderDivineMob(new ModelHastreus(),0.0F,EntityResourceLocation.HASTERUS));
  RenderingRegistry.registerEntityRenderingHandler(EntityFrostArcher.class,new RenderDivineMob(new ModelBiped(),0.0F,EntityResourceLocation.FROZEN_ARCHER));
  RenderingRegistry.registerEntityRenderingHandler(EntityRollum.class,new RenderDivineMob(new ModelRollum(),0.0F,EntityResourceLocation.ROLLUM));
  RenderingRegistry.registerEntityRenderingHandler(EntityWorkshopTinkerer.class,new RenderDivineMob(new ModelWorkshop(),0.0F,EntityResourceLocation.WORKSHOP_TINKER));
  RenderingRegistry.registerEntityRenderingHandler(EntityWorkshopMerchant.class,new RenderDivineMob(new ModelWorkshop(),0.0F,EntityResourceLocation.WORKSHOP_MERCHANT));
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityFrostedChest.class,new RenderTileEntityFrostedChest());
  MinecraftForgeClient.registerItemRenderer(Util.toItem(IceikaBlocks.frostedChest),new ItemRendererFrostedChest());
}","public static void init(){
  RenderingRegistry.registerEntityRenderingHandler(EntityCarol.class,new RenderProjectile(EntityResourceLocation.music));
  RenderingRegistry.registerEntityRenderingHandler(EntityMusic.class,new RenderProjectile(EntityResourceLocation.music));
  RenderingRegistry.registerEntityRenderingHandler(EntityFrostclaw.class,new RenderProjectile(EntityResourceLocation.frostclaw));
  RenderingRegistry.registerEntityRenderingHandler(EntitySnowflakeShuriken.class,new RenderIconProjectile(IceikaItems.snowflakeShuriken));
  RenderingRegistry.registerEntityRenderingHandler(EntityAlicanto.class,new RenderDivineMob(new ModelAlicanto(),0.0F,EntityResourceLocation.ALICANTO));
  RenderingRegistry.registerEntityRenderingHandler(EntityFractite.class,new RenderDivineMob(new ModelFractite(),0.5F,EntityResourceLocation.FRACTITE));
  RenderingRegistry.registerEntityRenderingHandler(EntityGlacide.class,new RenderSizeable(new ModelGlacide(),0.0F,1.0F,EntityResourceLocation.GLACON));
  RenderingRegistry.registerEntityRenderingHandler(EntityHastreus.class,new RenderDivineMob(new ModelHastreus(),0.0F,EntityResourceLocation.HASTERUS));
  RenderingRegistry.registerEntityRenderingHandler(EntityFrostArcher.class,new RenderDivineMob(new ModelBiped(),0.0F,EntityResourceLocation.FROZEN_ARCHER));
  RenderingRegistry.registerEntityRenderingHandler(EntityRollum.class,new RenderDivineMob(new ModelRollum(),0.0F,EntityResourceLocation.ROLLUM));
  RenderingRegistry.registerEntityRenderingHandler(EntityWorkshopTinkerer.class,new RenderDivineMob(new ModelWorkshop(),0.0F,EntityResourceLocation.WORKSHOP_TINKER));
  RenderingRegistry.registerEntityRenderingHandler(EntityWorkshopMerchant.class,new RenderDivineMob(new ModelWorkshop(),0.0F,EntityResourceLocation.WORKSHOP_MERCHANT));
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntityFrostedChest.class,new RenderTileEntityFrostedChest());
  MinecraftForgeClient.registerItemRenderer(Util.toItem(IceikaBlocks.frostedChest),new ItemRendererFrostedChest());
}",0.9643132220795892
130689,"@Override public ItemStack onItemRightClick(ItemStack var1,World var2,EntityPlayer var3){
  if (!var2.isRemote) {
    if (this.firetick == this.firemax && this.firemax != 0) {
      if (var1.getItem() == TwilightItemsWeapons.skythernPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserSkythern(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.halitePhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserHalite(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.wildwoodPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserWildWood(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.edenPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserEden(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.mortumPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserMortum(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.apalachiaPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserApalachia(var2,var3));
        var1.damageItem(1,var3);
      }
      this.firetick=0;
    }
 else {
      ++this.firetick;
    }
    if (this.firemax == 0) {
      if (var1.getItem() == TwilightItemsWeapons.skythernPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserSkythern(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.halitePhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserHalite(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.wildwoodPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserWildWood(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.edenPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserEden(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.mortumPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserMortum(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.apalachiaPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserApalachia(var2,var3));
        var1.damageItem(1,var3);
      }
    }
  }
  return var1;
}","@Override public ItemStack onItemRightClick(ItemStack var1,World var2,EntityPlayer var3){
  if (!var2.isRemote) {
    if (var2.getWorldTime() % 4 == 0) {
      if (var1.getItem() == TwilightItemsWeapons.skythernPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserSkythern(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.halitePhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserHalite(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.wildwoodPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserWildWood(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.edenPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserEden(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.mortumPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserMortum(var2,var3));
        var1.damageItem(1,var3);
      }
      if (var1.getItem() == TwilightItemsWeapons.apalachiaPhaser) {
        var2.playSoundAtEntity(var3,this.firesound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityPhaserApalachia(var2,var3));
        var1.damageItem(1,var3);
      }
    }
  }
  return var1;
}",0.6608003352189399
130690,"public ItemTwilightPhaser(int dam,String name){
  super(name,DivineRPGTabs.ranged);
  this.damage=dam;
  this.firemax=0;
  this.firetick=this.firemax;
  this.firesound=Sounds.phaser.getPrefixedName();
  this.setMaxStackSize(1);
  this.setMaxDamage(3000);
}","public ItemTwilightPhaser(int dam,String name){
  super(name,DivineRPGTabs.ranged);
  this.damage=dam;
  this.firesound=Sounds.phaser.getPrefixedName();
  this.setMaxStackSize(1);
  this.setMaxDamage(3000);
}",0.896551724137931
130691,"@Override public ItemStack onItemRightClick(ItemStack var1,World var2,EntityPlayer var3){
  if (!var3.capabilities.isCreativeMode)   --var1.stackSize;
  if (!var2.isRemote) {
    var2.playSoundAtEntity(var3,""String_Node_Str"",0.5F,0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
    if (var1.getItem() == VanillaItemsWeapons.shuriken) {
      var2.spawnEntityInWorld(new EntityShuriken(var2,var3));
    }
    if (var1.getItem() == VanillaItemsWeapons.vileStorm) {
      var2.spawnEntityInWorld(new EntityVileStorm(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.edenSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerEden(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.wildwoodSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerWildWoods(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.apalachiaSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerApalachia(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.skythernSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerSkythern(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.mortumSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerMortum(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.haliteSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerHalite(var2,var3));
    }
    if (var1.getItem() == ArcanaItems.lamona) {
      var2.spawnEntityInWorld(new EntityLamona(var2,var3));
    }
  }
  return var1;
}","@Override public ItemStack onItemRightClick(ItemStack var1,World var2,EntityPlayer var3){
  if (!var3.capabilities.isCreativeMode)   --var1.stackSize;
  if (!var2.isRemote) {
    var2.playSoundAtEntity(var3,""String_Node_Str"",0.5F,0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
    if (var1.getItem() == VanillaItemsWeapons.shuriken) {
      var2.spawnEntityInWorld(new EntityShuriken(var2,var3));
    }
    if (var1.getItem() == IceikaItems.snowflakeShuriken) {
      var2.spawnEntityInWorld(new EntitySnowflakeShuriken(var2,var3));
    }
    if (var1.getItem() == VanillaItemsWeapons.vileStorm) {
      var2.spawnEntityInWorld(new EntityVileStorm(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.edenSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerEden(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.wildwoodSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerWildWoods(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.apalachiaSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerApalachia(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.skythernSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerSkythern(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.mortumSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerMortum(var2,var3));
    }
    if (var1.getItem() == TwilightItemsWeapons.haliteSlicer) {
      var2.spawnEntityInWorld(new EntitySlicerHalite(var2,var3));
    }
    if (var1.getItem() == ArcanaItems.lamona) {
      var2.spawnEntityInWorld(new EntityLamona(var2,var3));
    }
  }
  return var1;
}",0.9562137797810688
130692,"public static void registerDivineRPGMob(Class entityClass,String entityName,int ID){
  LangRegistry.addMob(entityName);
  int entityID=EntityRegistry.findGlobalUniqueEntityId();
  EntityRegistry.registerGlobalEntityID(entityClass,entityName,entityID,0x000000,0xFFFFFF);
  EntityRegistry.registerModEntity(entityClass,entityName,ID,DivineRPG.instance,120,5,true);
}","public static void registerDivineRPGMob(Class entityClass,String entityName){
  LangRegistry.addMob(entityName);
  EntityRegistry.registerModEntity(entityClass,entityName,mobID,DivineRPG.instance,120,5,true);
  mobID++;
}",0.67008547008547
130693,"public static void registerProjectile(Class entityClass,String entityName){
  int ID=EntityRegistry.findGlobalUniqueEntityId();
  EntityRegistry.registerGlobalEntityID(entityClass,entityName + ""String_Node_Str"",ID);
  EntityRegistry.registerModEntity(entityClass,entityName + ""String_Node_Str"",ID,DivineRPG.instance,250,5,true);
}","public static void registerProjectile(Class entityClass,String entityName){
  EntityRegistry.registerModEntity(entityClass,entityName + ""String_Node_Str"",projectileID,DivineRPG.instance,250,5,true);
  projectileID++;
}",0.656934306569343
130694,"public static void init(){
  Util.registerProjectile(EntityStar.class,""String_Node_Str"");
  Util.registerProjectile(EntitySparkler.class,""String_Node_Str"");
  Util.registerProjectile(EntityFirefly.class,""String_Node_Str"");
  Util.registerProjectile(EntityFyracryxFireball.class,""String_Node_Str"");
  Util.registerProjectile(EntityGrenade.class,""String_Node_Str"");
  Util.registerProjectile(EntityLamona.class,""String_Node_Str"");
  Util.registerProjectile(EntityLivingStatueArrow.class,""String_Node_Str"");
  Util.registerProjectile(EntityMerikMissile.class,""String_Node_Str"");
  Util.registerProjectile(EntityReflector.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityCaptianMerik.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityConstructor.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityDatticon.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityDeathcryx.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityDeathHound.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityDramix.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityDungeonPrisoner.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityDungeonDemon.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityFyracryx.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityGolemOfRejuv.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityLeorna.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityLivingStatue.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityParasecta.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityRazorback.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntitySeimer.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityVatticus.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityParatiku.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityWraith.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityZelus.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityRoamer.class,""String_Node_Str"",Util.mobID++);
}","public static void init(){
  Util.registerProjectile(EntityStar.class,""String_Node_Str"");
  Util.registerProjectile(EntitySparkler.class,""String_Node_Str"");
  Util.registerProjectile(EntityFirefly.class,""String_Node_Str"");
  Util.registerProjectile(EntityFyracryxFireball.class,""String_Node_Str"");
  Util.registerProjectile(EntityGrenade.class,""String_Node_Str"");
  Util.registerProjectile(EntityLamona.class,""String_Node_Str"");
  Util.registerProjectile(EntityLivingStatueArrow.class,""String_Node_Str"");
  Util.registerProjectile(EntityMerikMissile.class,""String_Node_Str"");
  Util.registerProjectile(EntityReflector.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityCaptianMerik.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityConstructor.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityDatticon.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityDeathcryx.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityDeathHound.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityDramix.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityDungeonPrisoner.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityDungeonDemon.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityFyracryx.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityGolemOfRejuv.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityLeorna.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityLivingStatue.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityParasecta.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityRazorback.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntitySeimer.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityVatticus.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityParatiku.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityWraith.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityZelus.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityRoamer.class,""String_Node_Str"");
}",0.5075931891394385
130695,"public static void init(){
  Util.registerProjectile(EntityCarol.class,""String_Node_Str"");
  Util.registerProjectile(EntityMusic.class,""String_Node_Str"");
  Util.registerProjectile(EntityFrostclaw.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityAlicanto.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityFractite.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityGlacide.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityHastreus.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityFrostArcher.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityRollum.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityWorkshopTinkerer.class,""String_Node_Str"",Util.mobID++);
  Util.registerDivineRPGMob(EntityWorkshopMerchant.class,""String_Node_Str"",Util.mobID++);
}","public static void init(){
  Util.registerProjectile(EntityCarol.class,""String_Node_Str"");
  Util.registerProjectile(EntityMusic.class,""String_Node_Str"");
  Util.registerProjectile(EntityFrostclaw.class,""String_Node_Str"");
  Util.registerProjectile(EntitySnowflakeShuriken.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityAlicanto.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityFractite.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityGlacide.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityHastreus.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityFrostArcher.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityRollum.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityWorkshopTinkerer.class,""String_Node_Str"");
  Util.registerDivineRPGMob(EntityWorkshopMerchant.class,""String_Node_Str"");
}",0.6360544217687075
130696,"public static void init(){
  addRecipe(IS.frostSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',IceikaItems.iceStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.bloodgemSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bloodgem,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.infernoSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',Items.blaze_powder,'O',Blocks.redstone_ore,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.moltenSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.scorchingSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.purpleBlaze,'S',VanillaItemsOther.netheriteIngot);
  addRecipe(VanillaItemsWeapons.bluefireSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'S',VanillaItemsOther.shadowBar);
  addRecipe(VanillaItemsWeapons.poisonSaber,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',VanillaItemsOther.jungleStone,'B',VanillaItemsOther.shadowBar,'S',Items.stick);
  addRecipe(IS.slimeSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond_sword,'S',Items.slime_ball);
  addRecipe(IS.enderSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',VanillaItemsOther.legendaryEnderEye,'S',VanillaItemsOther.shadowBar);
  addRecipe(IS.arlemiteSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'S',Items.stick);
  addRecipe(IS.rupeeSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot,'S',Items.stick);
  addRecipe(IS.realmiteSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot,'S',Items.stick);
  addRecipe(IS.shuriken,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot);
  addShapelessRecipe(IS.vile,VanillaItemsOther.jungleShards,VanillaItemsWeapons.vileStorm);
  addBigRecipe(VanillaItemsWeapons.slimeSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond_sword,'S',Items.slime_ball);
  addBigRecipe(IS.longsword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'S',Items.stick);
  addRecipe(IS.oceanKnife,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.aquaticDagger,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(IS.aquaticMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(IS.aquaticTrident,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.aquaton,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.sharkSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.sharkFin,'S',VanillaItemsOther.aquaticIngot);
  addRecipe(VanillaItemsWeapons.crabclawMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.crabClaw,'S',Items.stick);
  addRecipe(IS.bedrockSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',Blocks.bedrock,'S',Items.stick);
  addRecipe(IS.divineSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.furyMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.bedrock,'S',Blocks.diamond_ore);
  addRecipe(VanillaItemsWeapons.deathBringer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.corruptedStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.corruptedMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.corruptedStone,'S',Items.stick);
  addRecipe(IS.divineSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',VanillaItemsOther.divineStone,'S',Items.stick);
  addRecipe(IS.bedrockMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock,'I',Items.stick);
  addRecipe(VanillaItemsWeapons.jungleKnife,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.jungleStone,'S',Items.stick);
  addRecipe(IS.realHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.realBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.realLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.realFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.eliteHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.eliteBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.eliteLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.eliteFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.bedrockHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.bedrockBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.bedrockLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.bedrockFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.rupeeHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.rupeeBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.rupeeLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.rupeeFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.arlemiteHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.arlemiteBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.arlemiteLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.arlemiteFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.infernoHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.infernoBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.infernoLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.infernoFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.netherHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.netherBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.netherLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.netherFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.enderHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.enderBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.enderLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.enderFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.divineHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.divineBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.divineLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.divineFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.angelicHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.angelicBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.angelicLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.angelicFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.shadowHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.shadowBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.shadowLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.shadowFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.aquastriveHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(IS.aquastriveBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(IS.aquastriveLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(IS.aquastriveFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(VanillaItemsArmor.krakenHelmet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(VanillaItemsArmor.krakenBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(VanillaItemsArmor.krakenLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(VanillaItemsArmor.krakenBoots,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(IS.netherChuck,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.arlemiteBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot);
  addRecipe(IS.rupeeBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.realBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.netherBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.bloodBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bloodgem);
  addShapelessRecipe(IS.arlemiteIngot,VanillaBlocks.arlemiteBlock);
  addShapelessRecipe(IS.rupeeIngot,VanillaBlocks.rupeeBlock);
  addShapelessRecipe(IS.realIngot,VanillaBlocks.realmiteBlock);
  addShapelessRecipe(IS.netherIngot,VanillaBlocks.netheriteBlock);
  addShapelessRecipe(IS.bloodgem,VanillaBlocks.bloodgemBlock);
  addShapelessRecipe(IS.shadow,VanillaItemsOther.rupeeIngot,VanillaItemsOther.arlemiteIngot);
  addRecipe(IS.corruptStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.corruptedShards);
  addRecipe(IS.jungleStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.jungleShards);
  addRecipe(IS.iceStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',IceikaItems.iceShards);
  addRecipe(IS.moltenStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenShards);
  addRecipe(IS.divineStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineShards);
  addRecipe(IS.enderStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderShard);
  addRecipe(IS.legEnderEye,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.krakenScale,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'K',Items.dye,0);
  addShapelessRecipe(IS.krakenSkin,VanillaItemsOther.krakenScale,VanillaItemsOther.krakenScale);
  addShapelessRecipe(IS.bacon,Items.porkchop);
  addRecipe(IS.cheese,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',Items.milk_bucket);
  addSmelting(IS.egg,IS.boiledEgg,0.3F);
  addShapelessRecipe(IS.advStew,ItemsFood.whiteMushroom,Items.mushroom_stew);
  addShapelessRecipe(IS.chickDinner,ItemsFood.advMushroomStew,Items.cooked_chicken,Items.bread);
}","public static void init(){
  addRecipe(IS.frostSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',IceikaItems.iceStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.bloodgemSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bloodgem,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.infernoSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',Items.blaze_powder,'O',Blocks.redstone_ore,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.moltenSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.scorchingSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.purpleBlaze,'S',VanillaItemsOther.netheriteIngot);
  addRecipe(VanillaItemsWeapons.bluefireSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'S',VanillaItemsOther.shadowBar);
  addRecipe(VanillaItemsWeapons.poisonSaber,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'R',VanillaItemsOther.jungleStone,'B',VanillaItemsOther.shadowBar,'S',Items.stick);
  addRecipe(IS.slimeSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond_sword,'S',Items.slime_ball);
  addRecipe(IS.enderSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'L',VanillaItemsOther.legendaryEnderEye,'S',VanillaItemsOther.shadowBar);
  addRecipe(IS.arlemiteSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'S',Items.stick);
  addRecipe(IS.rupeeSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot,'S',Items.stick);
  addRecipe(IS.realmiteSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot,'S',Items.stick);
  addRecipe(IS.shuriken,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot);
  addShapelessRecipe(IS.vile,VanillaItemsOther.jungleShards,VanillaItemsWeapons.vileStorm);
  addBigRecipe(VanillaItemsWeapons.slimeSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond_sword,'S',Items.slime_ball);
  addBigRecipe(IS.longsword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Items.iron_ingot,'S',Items.stick);
  addRecipe(IS.oceanKnife,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.aquaticDagger,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(IS.aquaticMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(IS.aquaticTrident,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.aquaton,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.sharkSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.sharkFin,'S',VanillaItemsOther.aquaticIngot);
  addRecipe(VanillaItemsWeapons.crabclawMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.crabClaw,'S',Items.stick);
  addRecipe(IS.bedrockSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'B',Blocks.bedrock,'S',Items.stick);
  addRecipe(IS.divineSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.furyMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.bedrock,'S',Blocks.diamond_ore);
  addRecipe(VanillaItemsWeapons.deathBringer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.corruptedStone,'S',Items.stick);
  addRecipe(VanillaItemsWeapons.corruptedMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.corruptedStone,'S',Items.stick);
  addRecipe(IS.divineSword,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',VanillaItemsOther.divineStone,'S',Items.stick);
  addRecipe(IS.bedrockMaul,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock,'I',Items.stick);
  addRecipe(VanillaItemsWeapons.jungleKnife,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.jungleStone,'S',Items.stick);
  addRecipe(IS.realHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.realBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.realLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.realFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.eliteHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.eliteBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.eliteLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.eliteFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaBlocks.realmiteBlock);
  addRecipe(IS.bedrockHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.bedrockBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.bedrockLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.bedrockFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',Blocks.bedrock);
  addRecipe(IS.rupeeHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.rupeeBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.rupeeLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.rupeeFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.arlemiteHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.arlemiteBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.arlemiteLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.arlemiteFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot,'X',Items.iron_ingot);
  addRecipe(IS.infernoHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.infernoBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.infernoLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.infernoFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenStone);
  addRecipe(IS.netherHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.netherBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.netherLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.netherFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.enderHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.enderBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.enderLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.enderFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.divineHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.divineBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.divineLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.divineFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineStone);
  addRecipe(IS.angelicHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.angelicBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.angelicLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.angelicFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bluefireStone,'X',IceikaItems.iceStone);
  addRecipe(IS.shadowHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.shadowBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.shadowLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.shadowFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.shadowBar);
  addRecipe(IS.aquastriveHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(IS.aquastriveBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(IS.aquastriveLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(IS.aquastriveFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.aquaticIngot);
  addRecipe(VanillaItemsArmor.krakenHelmet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(VanillaItemsArmor.krakenBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(VanillaItemsArmor.krakenLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(VanillaItemsArmor.krakenBoots,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.krakenSkin);
  addRecipe(IS.netherChuck,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.arlemiteBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.arlemiteIngot);
  addRecipe(IS.rupeeBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.rupeeIngot);
  addRecipe(IS.realBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.realmiteIngot);
  addRecipe(IS.netherBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.netheriteIngot);
  addRecipe(IS.bloodBlock,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.bloodgem);
  addShapelessRecipe(IS.arlemiteIngot,VanillaBlocks.arlemiteBlock);
  addShapelessRecipe(IS.rupeeIngot,VanillaBlocks.rupeeBlock);
  addShapelessRecipe(IS.realIngot,VanillaBlocks.realmiteBlock);
  addShapelessRecipe(IS.netherIngot,VanillaBlocks.netheriteBlock);
  addShapelessRecipe(IS.bloodgem,VanillaBlocks.bloodgemBlock);
  addShapelessRecipe(IS.shadow,VanillaItemsOther.rupeeIngot,VanillaItemsOther.arlemiteIngot);
  addRecipe(IS.corruptStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.corruptedShards);
  addRecipe(IS.jungleStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.jungleShards);
  addRecipe(IS.iceStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',IceikaItems.iceShards);
  addRecipe(IS.moltenStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.moltenShards);
  addRecipe(IS.divineStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.divineShards);
  addRecipe(IS.enderStone,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderShard);
  addRecipe(IS.legEnderEye,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',VanillaItemsOther.enderStone);
  addRecipe(IS.krakenScale,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'K',new ItemStack(Items.dye,1,0));
  addShapelessRecipe(IS.krakenSkin,VanillaItemsOther.krakenScale,VanillaItemsOther.krakenScale);
  addShapelessRecipe(IS.bacon,Items.porkchop);
  addRecipe(IS.cheese,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'M',Items.milk_bucket);
  addSmelting(IS.egg,IS.boiledEgg,0.3F);
  addShapelessRecipe(IS.advStew,ItemsFood.whiteMushroom,Items.mushroom_stew);
  addShapelessRecipe(IS.chickDinner,ItemsFood.advMushroomStew,Items.cooked_chicken,Items.bread);
}",0.9993556945234034
130697,"@Override protected Item getDropItem(){
  return TwilightItemsOther.wildWoodSoul;
}","@Override protected Item getDropItem(){
  return TwilightItemsOther.wildwoodSoul;
}",0.9879518072289156
130698,"@Override protected void dropFewItems(boolean var1,int var2){
  int var3=this.rand.nextInt(2 + var2);
  for (int var4=0; var4 < var3; ++var4) {
    this.dropItem(TwilightItemsOther.wildWoodSoul,2);
  }
}","@Override protected void dropFewItems(boolean var1,int var2){
  int var3=this.rand.nextInt(2 + var2);
  for (int var4=0; var4 < var3; ++var4) {
    this.dropItem(TwilightItemsOther.wildwoodSoul,2);
  }
}",0.9950738916256158
130699,"@Override protected Item getDropItem(){
  return TwilightItemsOther.wildWoodSoul;
}","@Override protected Item getDropItem(){
  return TwilightItemsOther.wildwoodSoul;
}",0.9879518072289156
130700,"@Override protected void dropRareDrop(int var1){
  this.dropItem(TwilightItemsOther.wildWoodSoul,2);
}","@Override protected void dropRareDrop(int var1){
  this.dropItem(TwilightItemsOther.wildwoodSoul,2);
}",0.9901960784313726
130701,"@Override protected void dropFewItems(boolean var1,int var2){
  int var3=this.rand.nextInt(2 + var2);
  for (int var4=0; var4 < var3; ++var4) {
    this.dropItem(TwilightItemsOther.wildWoodSoul,1);
  }
}","@Override protected void dropFewItems(boolean var1,int var2){
  int var3=this.rand.nextInt(2 + var2);
  for (int var4=0; var4 < var3; ++var4) {
    this.dropItem(TwilightItemsOther.wildwoodSoul,1);
  }
}",0.9950738916256158
130702,"@Override protected Item getDropItem(){
  return TwilightItemsOther.wildWoodSoul;
}","@Override protected Item getDropItem(){
  return TwilightItemsOther.wildwoodSoul;
}",0.9879518072289156
130703,"@Override protected Item getDropItem(){
  return TwilightItemsOther.wildWoodSoul;
}","@Override protected Item getDropItem(){
  return TwilightItemsOther.wildwoodSoul;
}",0.9879518072289156
130704,"@Override protected void dropRareDrop(int var1){
  this.dropItem(TwilightItemsOther.wildWoodSoul,1);
}","@Override protected void dropRareDrop(int var1){
  this.dropItem(TwilightItemsOther.wildwoodSoul,1);
}",0.9901960784313726
130705,"public ItemStack onItemRightClick(ItemStack var1,World var2,EntityPlayer var3){
  boolean var4=var3.capabilities.isCreativeMode;
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.wildWoodDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.wildwoodBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzWildWood(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.wildWoodDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.mortumDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.haliteBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzHalite(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.mortumDust);
    }
    if (var1.getItem() == TwilightItemsWeapons.mortumBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzMortum(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.mortumDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.apalachiaDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.apalachiaBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzAlapachia(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.apalachiaDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.skythernDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.skythernBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzSkythern(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.skythernDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.edenDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.edenBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzEden(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.edenDust);
    }
  }
  var1.damageItem(1,var3);
  return var1;
}","public ItemStack onItemRightClick(ItemStack var1,World var2,EntityPlayer var3){
  boolean var4=var3.capabilities.isCreativeMode;
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.wildwoodDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.wildwoodBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzWildWood(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.wildwoodDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.mortumDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.haliteBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzHalite(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.mortumDust);
    }
    if (var1.getItem() == TwilightItemsWeapons.mortumBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzMortum(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.mortumDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.apalachiaDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.apalachiaBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzAlapachia(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.apalachiaDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.skythernDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.skythernBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzSkythern(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.skythernDust);
    }
  }
  if (!var4 && !var3.inventory.hasItem(TwilightItemsOther.edenDust)) {
    return var1;
  }
 else {
    if (var1.getItem() == TwilightItemsWeapons.edenBlitz) {
      if (!var2.isRemote) {
        var2.playSoundAtEntity(var3,sound,1.0F,1.0F);
        var2.spawnEntityInWorld(new EntityBlitzEden(var2,var3));
      }
      var3.inventory.consumeInventoryItem(TwilightItemsOther.edenDust);
    }
  }
  var1.damageItem(1,var3);
  return var1;
}",0.9992050874403816
130706,"public static void init(){
  addShapelessRecipe(IS.edenFragments,TwilightItemsOther.edenSoul);
  addShapelessRecipe(IS.wildwoodFragments,TwilightItemsOther.wildwoodSoul);
  addShapelessRecipe(IS.apalachiaFragments,TwilightItemsOther.apalachiaSoul);
  addShapelessRecipe(IS.skythernFragments,TwilightItemsOther.skythernSoul);
  addShapelessRecipe(IS.mortumFragments,TwilightItemsOther.mortumSoul);
  addRecipe(IS.edenGem,""String_Node_Str"",'G',TwilightItemsOther.edenFragments);
  addRecipe(IS.wildwoodGem,""String_Node_Str"",'G',TwilightItemsOther.wildwoodFragments);
  addRecipe(IS.apalachiaGem,""String_Node_Str"",'G',TwilightItemsOther.apalachiaFragments);
  addRecipe(IS.skythernGem,""String_Node_Str"",'G',TwilightItemsOther.skythernFragments);
  addRecipe(IS.mortumGem,""String_Node_Str"",'G',TwilightItemsOther.mortumFragments);
  addRecipe(IS.edenChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.edenGem);
  addRecipe(IS.wildwoodChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.wildwoodGem);
  addRecipe(IS.apalachiaChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.apalachiaGem);
  addRecipe(IS.skythernChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.skythernGem);
  addRecipe(IS.mortumChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.mortumGem);
  addRecipe(IS.edenHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.edenBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.edenLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.edenFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.wildwoodHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.apalachiaHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.skythernHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.mortumHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.edenBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.edenChunk,""String_Node_Str"",Items.stick);
  addRecipe(IS.edenBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.edenChunk,""String_Node_Str"",Items.string);
  addRecipe(IS.edenPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.edenChunk);
  addRecipe(IS.edenBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.edenChunk);
  addRecipe(IS.edenSlicer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.edenGem);
  addRecipe(IS.edenArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.edenFragments,""String_Node_Str"",Items.stick,""String_Node_Str"",Items.feather);
  addRecipe(IS.wildwoodBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.wildwoodChunk,""String_Node_Str"",Items.stick);
  addRecipe(IS.wildwoodBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.wildwoodChunk,""String_Node_Str"",Items.string);
  addRecipe(IS.wildwoodPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodSlicer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.wildwoodGem);
  addRecipe(IS.wildwoodArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.wildwoodFragments,""String_Node_Str"",Items.stick,""String_Node_Str"",Items.feather);
  addRecipe(IS.apalachiaBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.apalachiaChunk,""String_Node_Str"",Items.stick);
  addRecipe(IS.apalachiaBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.apalachiaChunk,""String_Node_Str"",Items.string);
  addRecipe(IS.apalchiaPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaSlicer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.apalachiaGem);
  addRecipe(IS.apalachiaArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.wildwoodFragments,""String_Node_Str"",Items.stick,""String_Node_Str"",Items.feather);
  addRecipe(IS.skythernBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.skythernChunk,""String_Node_Str"",Items.stick);
  addRecipe(IS.skythernBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.skythernChunk,""String_Node_Str"",Items.string);
  addRecipe(IS.skythernPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernSlicer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.skythernGem);
  addRecipe(IS.skythernArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.skythernFragments,""String_Node_Str"",Items.stick,""String_Node_Str"",Items.feather);
  addRecipe(IS.mortumBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.mortumChunk,""String_Node_Str"",Items.stick);
  addRecipe(IS.mortumBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.mortumChunk,""String_Node_Str"",Items.string);
  addRecipe(IS.mortumPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumSlicer,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.mortumGem);
  addRecipe(IS.mortumArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",TwilightItemsOther.mortumFragments,""String_Node_Str"",Items.stick,""String_Node_Str"",Items.feather);
}","public static void init(){
  addShapelessRecipe(IS.edenFragments,TwilightItemsOther.edenSoul);
  addShapelessRecipe(IS.wildwoodFragments,TwilightItemsOther.wildwoodSoul);
  addShapelessRecipe(IS.apalachiaFragments,TwilightItemsOther.apalachiaSoul);
  addShapelessRecipe(IS.skythernFragments,TwilightItemsOther.skythernSoul);
  addShapelessRecipe(IS.mortumFragments,TwilightItemsOther.mortumSoul);
  addRecipe(IS.edenGem,""String_Node_Str"",'G',TwilightItemsOther.edenFragments);
  addRecipe(IS.wildwoodGem,""String_Node_Str"",'G',TwilightItemsOther.wildwoodFragments);
  addRecipe(IS.apalachiaGem,""String_Node_Str"",'G',TwilightItemsOther.apalachiaFragments);
  addRecipe(IS.skythernGem,""String_Node_Str"",'G',TwilightItemsOther.skythernFragments);
  addRecipe(IS.mortumGem,""String_Node_Str"",'G',TwilightItemsOther.mortumFragments);
  addRecipe(IS.edenChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.edenGem);
  addRecipe(IS.wildwoodChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.wildwoodGem);
  addRecipe(IS.apalachiaChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.apalachiaGem);
  addRecipe(IS.skythernChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.skythernGem);
  addRecipe(IS.mortumChunk,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',TwilightItemsOther.mortumGem);
  addRecipe(IS.edenHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.edenBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.edenLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.edenFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk);
  addRecipe(IS.wildwoodHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.apalachiaHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.skythernHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk);
  addRecipe(IS.mortumHead,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumBody,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumLegs,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumFeet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk);
  addRecipe(IS.edenBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk,'S',Items.stick);
  addRecipe(IS.edenBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenChunk,'X',Items.string);
  addRecipe(IS.edenPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.edenChunk);
  addRecipe(IS.edenBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.edenChunk);
  addShapelessRecipe(IS.edenSlicer,""String_Node_Str"",'X',""String_Node_Str"",'X',TwilightItemsOther.edenGem);
  addRecipe(IS.edenArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.edenFragments,'S',Items.stick,'Z',Items.feather);
  addRecipe(IS.wildwoodBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk,'S',Items.stick);
  addRecipe(IS.wildwoodBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodChunk,'X',Items.string);
  addRecipe(IS.wildwoodPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.wildwoodChunk);
  addRecipe(IS.wildwoodBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.wildwoodChunk);
  addShapelessRecipe(IS.wildwoodSlicer,TwilightItemsOther.wildwoodGem);
  addRecipe(IS.wildwoodArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodFragments,'S',Items.stick,'Z',Items.feather);
  addRecipe(IS.apalachiaBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk,'S',Items.stick);
  addRecipe(IS.apalachiaBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.apalachiaChunk,'X',Items.string);
  addRecipe(IS.apalachiaPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.apalachiaChunk);
  addRecipe(IS.apalachiaBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.apalachiaChunk);
  addShapelessRecipe(IS.apalachiaSlicer,TwilightItemsOther.apalachiaGem);
  addRecipe(IS.apalachiaArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.wildwoodFragments,'S',Items.stick,'Z',Items.feather);
  addRecipe(IS.skythernBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk,'S',Items.stick);
  addRecipe(IS.skythernBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernChunk,'X',Items.string);
  addRecipe(IS.skythernPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.skythernChunk);
  addRecipe(IS.skythernBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.skythernChunk);
  addShapelessRecipe(IS.skythernSlicer,TwilightItemsOther.skythernGem);
  addRecipe(IS.skythernArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.skythernFragments,'S',Items.stick,'Z',Items.feather);
  addRecipe(IS.mortumBlade,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk,'S',Items.stick);
  addRecipe(IS.mortumBow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumChunk,'X',Items.string);
  addRecipe(IS.mortumPhaser,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.mortumChunk);
  addRecipe(IS.mortumBlitz,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'X',TwilightItemsOther.mortumChunk);
  addShapelessRecipe(IS.mortumSlicer,TwilightItemsOther.mortumGem);
  addRecipe(IS.mortumArrow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',TwilightItemsOther.mortumFragments,'S',Items.stick,'Z',Items.feather);
}",0.9097734951820798
130707,"/** 
 * *
 */
@Override public void onPreExecute(View rootView){
  this.rootView=rootView;
  mArticleTextView=(TextView)rootView.findViewById(R.id.article_body);
  mArticlePubDateView=(TextView)rootView.findViewById(R.id.pubDateView);
  mSubtitleLayout=(RelativeLayout)rootView.findViewById(R.id.subtitleLayout);
  mScrollToReadLayout=(LinearLayout)rootView.findViewById(R.id.scrollToReadLayout);
  detailViewProgress=(ProgressBar)rootView.findViewById(R.id.detailViewProgressBar);
  detailViewProgress.setVisibility(View.VISIBLE);
}","/** 
 * *
 */
@Override public void onPreExecute(View rootView){
  this.rootView=rootView;
  mArticleTextView=(TextView)rootView.findViewById(R.id.article_body);
  mArticlePubDateView=(TextView)rootView.findViewById(R.id.pubDateView);
  mSubtitleLayout=(RelativeLayout)rootView.findViewById(R.id.subtitleLayout);
  mScrollToReadLayout=(LinearLayout)rootView.findViewById(R.id.scrollToReadLayout);
  detailViewProgress=(SmoothProgressBar)rootView.findViewById(R.id.detailViewProgressBar);
  detailViewProgress.setVisibility(View.VISIBLE);
  detailViewProgress.progressiveStart();
}",0.9577717879604672
130708,"@Override public void onPostExecute(String[] result){
  Log.d(TAG_ASYNC,""String_Node_Str"");
  titleText=result[0];
  mImageURL=result[1];
  bodyText=result[2];
  mArticlePubDate=result[3];
  mSubtitleLayout.setVisibility(View.VISIBLE);
  mArticlePubDateView.setText(mArticlePubDate);
  mArticleTextView.setVisibility(View.VISIBLE);
  mArticleTextView.setText(bodyText);
  if (mImageURL == null) {
    Log.d(TAG,""String_Node_Str"" + titleText);
    mTitleTextView=(TextView)headerStub.findViewById(R.id.article_title);
    mTitleTextView.setText(titleText);
    detailViewProgress.setVisibility(View.GONE);
  }
 else {
    Log.d(TAG,""String_Node_Str"");
    mTitleTextView=(TextView)headerStub.findViewById(R.id.article_header_title);
    mTitleTextView.setText(titleText);
    mMainImageView=(ImageView)headerStub.findViewById(R.id.article_header_image);
    Picasso picassoInstance=Picasso.with(this);
    picassoInstance.load(mImageURL).into(mMainImageView,new Callback(){
      @Override public void onSuccess(){
        Log.d(TAG_ASYNC,""String_Node_Str"");
        mMainImageView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
          @SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") @Override public void onGlobalLayout(){
            Display display=getWindowManager().getDefaultDisplay();
            Point screen=new Point();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
              display.getSize(screen);
            }
 else {
              screen.x=display.getWidth();
              screen.y=display.getHeight();
            }
            int statusBarHeight=0;
            int resId=getResources().getIdentifier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
            if (resId > 0) {
              statusBarHeight=getResources().getDimensionPixelSize(resId);
            }
            TypedValue tv=new TypedValue();
            int actionBarHeight=0;
            if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {
              actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
            }
            displayScrollToRead=(screen.y - statusBarHeight - actionBarHeight) < (mArticleTextView.getTop()) * 1.08;
            Log.d(TAG_ASYNC,""String_Node_Str"" + displayScrollToRead);
            if (displayScrollToRead) {
              mScrollToReadLayout.startAnimation(slide_up);
              mScrollToReadLayout.setVisibility(View.VISIBLE);
              Log.d(TAG_ASYNC,""String_Node_Str"" + mScrollToReadLayout.getVisibility());
            }
            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
              mMainImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
            }
 else {
              mMainImageView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
            }
          }
        }
);
        detailViewProgress.setVisibility(View.GONE);
      }
      @Override public void onError(){
        Log.d(TAG_ASYNC,""String_Node_Str"");
      }
    }
);
  }
  bodyText=null;
  titleText=null;
  mImageURL=null;
}","@Override public void onPostExecute(String[] result){
  Log.d(TAG_ASYNC,""String_Node_Str"");
  titleText=result[0];
  mImageURL=result[1];
  bodyText=result[2];
  mArticlePubDate=result[3];
  mSubtitleLayout.setVisibility(View.VISIBLE);
  mArticlePubDateView.setText(mArticlePubDate);
  mArticleTextView.setVisibility(View.VISIBLE);
  mArticleTextView.setText(bodyText);
  if (mImageURL == null) {
    Log.d(TAG,""String_Node_Str"" + titleText);
    mTitleTextView=(TextView)headerStub.findViewById(R.id.article_title);
    mTitleTextView.setText(titleText);
    detailViewProgress.progressiveStop();
    detailViewProgress.setVisibility(View.GONE);
  }
 else {
    Log.d(TAG,""String_Node_Str"");
    mTitleTextView=(TextView)headerStub.findViewById(R.id.article_header_title);
    mTitleTextView.setText(titleText);
    mMainImageView=(ImageView)headerStub.findViewById(R.id.article_header_image);
    Picasso picassoInstance=Picasso.with(this);
    picassoInstance.load(mImageURL).into(mMainImageView,new Callback(){
      @Override public void onSuccess(){
        Log.d(TAG_ASYNC,""String_Node_Str"");
        mMainImageView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
          @SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") @Override public void onGlobalLayout(){
            Display display=getWindowManager().getDefaultDisplay();
            Point screen=new Point();
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
              display.getSize(screen);
            }
 else {
              screen.x=display.getWidth();
              screen.y=display.getHeight();
            }
            int statusBarHeight=0;
            int resId=getResources().getIdentifier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
            if (resId > 0) {
              statusBarHeight=getResources().getDimensionPixelSize(resId);
            }
            TypedValue tv=new TypedValue();
            int actionBarHeight=0;
            if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {
              actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
            }
            displayScrollToRead=(screen.y - statusBarHeight - actionBarHeight) < (mArticleTextView.getTop()) * 1.08;
            Log.d(TAG_ASYNC,""String_Node_Str"" + displayScrollToRead);
            if (displayScrollToRead) {
              mScrollToReadLayout.startAnimation(slide_up);
              mScrollToReadLayout.setVisibility(View.VISIBLE);
              Log.d(TAG_ASYNC,""String_Node_Str"" + mScrollToReadLayout.getVisibility());
            }
            if (Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
              mMainImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
            }
 else {
              mMainImageView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
            }
          }
        }
);
        detailViewProgress.progressiveStop();
        detailViewProgress.setVisibility(View.GONE);
      }
      @Override public void onError(){
        Log.d(TAG_ASYNC,""String_Node_Str"");
      }
    }
);
  }
  bodyText=null;
  titleText=null;
  mImageURL=null;
}",0.9863734902446578
130709,"@Override public void onSuccess(){
  Log.d(TAG_ASYNC,""String_Node_Str"");
  mMainImageView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") @Override public void onGlobalLayout(){
      Display display=getWindowManager().getDefaultDisplay();
      Point screen=new Point();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
        display.getSize(screen);
      }
 else {
        screen.x=display.getWidth();
        screen.y=display.getHeight();
      }
      int statusBarHeight=0;
      int resId=getResources().getIdentifier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (resId > 0) {
        statusBarHeight=getResources().getDimensionPixelSize(resId);
      }
      TypedValue tv=new TypedValue();
      int actionBarHeight=0;
      if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {
        actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
      }
      displayScrollToRead=(screen.y - statusBarHeight - actionBarHeight) < (mArticleTextView.getTop()) * 1.08;
      Log.d(TAG_ASYNC,""String_Node_Str"" + displayScrollToRead);
      if (displayScrollToRead) {
        mScrollToReadLayout.startAnimation(slide_up);
        mScrollToReadLayout.setVisibility(View.VISIBLE);
        Log.d(TAG_ASYNC,""String_Node_Str"" + mScrollToReadLayout.getVisibility());
      }
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
        mMainImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mMainImageView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
    }
  }
);
  detailViewProgress.setVisibility(View.GONE);
}","@Override public void onSuccess(){
  Log.d(TAG_ASYNC,""String_Node_Str"");
  mMainImageView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @SuppressWarnings(""String_Node_Str"") @SuppressLint(""String_Node_Str"") @Override public void onGlobalLayout(){
      Display display=getWindowManager().getDefaultDisplay();
      Point screen=new Point();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
        display.getSize(screen);
      }
 else {
        screen.x=display.getWidth();
        screen.y=display.getHeight();
      }
      int statusBarHeight=0;
      int resId=getResources().getIdentifier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      if (resId > 0) {
        statusBarHeight=getResources().getDimensionPixelSize(resId);
      }
      TypedValue tv=new TypedValue();
      int actionBarHeight=0;
      if (getTheme().resolveAttribute(android.R.attr.actionBarSize,tv,true)) {
        actionBarHeight=TypedValue.complexToDimensionPixelSize(tv.data,getResources().getDisplayMetrics());
      }
      displayScrollToRead=(screen.y - statusBarHeight - actionBarHeight) < (mArticleTextView.getTop()) * 1.08;
      Log.d(TAG_ASYNC,""String_Node_Str"" + displayScrollToRead);
      if (displayScrollToRead) {
        mScrollToReadLayout.startAnimation(slide_up);
        mScrollToReadLayout.setVisibility(View.VISIBLE);
        Log.d(TAG_ASYNC,""String_Node_Str"" + mScrollToReadLayout.getVisibility());
      }
      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) {
        mMainImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      }
 else {
        mMainImageView.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      }
    }
  }
);
  detailViewProgress.progressiveStop();
  detailViewProgress.setVisibility(View.GONE);
}",0.989159891598916
130710,"public String[] getFirstPostArticle(){
  Document doc;
  String[] result=new String[4];
  String url=mArticleURL;
  try {
    doc=Jsoup.connect(url).userAgent(""String_Node_Str"").timeout(10 * 1000).get();
    Element bodyElement=doc.body();
    String FirstPostTitleXPath=ConfigService.getFirstPostHead();
    Elements titleElements=bodyElement.select(FirstPostTitleXPath);
    titleText=titleElements.first().text();
    mImageURL=getImageURL(bodyElement);
    String FirstPostArticleXPath=ConfigService.getFirstPostBody();
    Elements articleElements=doc.select(FirstPostArticleXPath);
    for (    Element el : articleElements) {
      String temp=el.text();
      if (temp.length() > 0) {
        articleText=articleText + temp + ""String_Node_Str"";
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  result[0]=titleText;
  result[1]=mImageURL;
  result[2]=articleText;
  result[3]=mArticlePubDate;
  return result;
}","public String[] getFirstPostArticle(){
  Document doc;
  String[] result=new String[4];
  String url=mArticleURL;
  try {
    doc=Jsoup.connect(url).userAgent(""String_Node_Str"").timeout(10 * 1000).get();
    Element bodyElement=doc.body();
    String FirstPostTitleXPath=ConfigService.getFirstPostHead();
    Elements titleElements=bodyElement.select(FirstPostTitleXPath);
    titleText=titleElements.first().text();
    mImageURL=getImageURL(bodyElement);
    String FirstPostArticleXPath=ConfigService.getFirstPostBody();
    Elements articleElements=doc.select(FirstPostArticleXPath);
    for (    Element el : articleElements) {
      String temp=el.text();
      if (temp.length() > 0) {
        articleText=articleText + temp + ""String_Node_Str"";
      }
    }
    result[0]=titleText;
    result[1]=mImageURL;
    result[2]=articleText;
    result[3]=mArticlePubDate;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  NullPointerException npe) {
    npe.printStackTrace();
    articleText=null;
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  return result;
}",0.854483096521313
130711,"public ConfigService(){
  if (isConfigAvailable()) {
    ParseConfig config=ParseConfig.getCurrentConfig();
    setConfigVersion(config.getNumber(""String_Node_Str""));
    setTheHinduElementsFromConfig(config);
    setTOIElementsFromConfig(config);
    setIndianExpressElementsFromConfig(config);
  }
 else {
    setTheHinduElementsFromConstants();
    setTOIElementsFromConstants();
    setIndianExpressElementsFromConstants();
  }
}","public ConfigService(){
  if (isConfigAvailable()) {
    ParseConfig config=ParseConfig.getCurrentConfig();
    setConfigVersion(config.getNumber(""String_Node_Str""));
    setTheHinduElementsFromConfig(config);
    setTOIElementsFromConfig(config);
    setIndianExpressElementsFromConfig(config);
    setFirstPostElementsFromConfig(config);
  }
 else {
    setTheHinduElementsFromConstants();
    setTOIElementsFromConstants();
    setIndianExpressElementsFromConstants();
    setFirstPostElementsFromConstants();
  }
}",0.91062039957939
130712,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_welcome_screen_feed,container,false);
  ExpandableListView expListView=(ExpandableListView)rootView.findViewById(R.id.welcome_feed_select_expandable_list);
  prepareListData();
  expListAdapter=new WelcomeScreenExpListAdapter(getActivity(),listDataHeader,listDataChild);
  expListAdapter.setExpList(expListView);
  expListView.setAdapter(expListAdapter);
  System.out.println(""String_Node_Str"" + (null == expListAdapter));
  System.out.println(""String_Node_Str"" + (null == expListView));
  System.out.println(""String_Node_Str"" + (listDataHeader.size()));
  System.out.println(""String_Node_Str"" + (listDataHeader.size()));
  Button done_button=(Button)rootView.findViewById(R.id.welcome_feed_select_explist_done_button);
  done_button.setOnClickListener(new OnClickListener(){
    public void onClick(    View next){
      HashMap<Integer,boolean[]> mChildCheckStates=expListAdapter.getClickedStates();
      callback.fsFragDoneButton(mChildCheckStates);
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  ViewGroup rootView=(ViewGroup)inflater.inflate(R.layout.fragment_welcome_screen_feed,container,false);
  ExpandableListView expListView=(ExpandableListView)rootView.findViewById(R.id.welcome_feed_select_expandable_list);
  prepareListData();
  expListAdapter=new WelcomeScreenExpListAdapter(getActivity(),listDataHeader,listDataChild);
  expListAdapter.setExpList(expListView);
  expListView.setAdapter(expListAdapter);
  Button done_button=(Button)rootView.findViewById(R.id.welcome_feed_select_explist_done_button);
  done_button.setOnClickListener(new OnClickListener(){
    public void onClick(    View next){
      HashMap<Integer,boolean[]> mChildCheckStates=expListAdapter.getClickedStates();
      callback.fsFragDoneButton(mChildCheckStates);
    }
  }
);
  return rootView;
}",0.8700729927007299
130713,"Zxid onAck(MessageTuple tuple) throws IOException {
  String source=tuple.getServerId();
  Message msg=tuple.getMessage();
  ZabMessage.Ack ack=msg.getAck();
  Zxid ackZxid=MessageBuilder.fromProtoZxid(ack.getZxid());
  PeerHandler peer=pendingPeers.get(source);
  if (peer != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
    }
    peer.setLastAckedZxid(ackZxid);
    if (lastCommittedZxid.compareTo(ackZxid) >= 0) {
      LOG.debug(""String_Node_Str"");
      Message commit=MessageBuilder.buildCommit(ackZxid);
      sendMessage(peer.getServerId(),commit);
      peer.setLastCommittedZxid(ackZxid);
      peer.startBroadcastingTask();
      pendingPeers.remove(source);
    }
  }
  if (source.equals(this.serverId)) {
    this.lastAckedZxid=ackZxid;
    if (!pendingPeers.isEmpty()) {
      for (      PeerHandler ph : pendingPeers.values()) {
        if (!ph.isSyncStarted() && ackZxid.compareTo(ph.getLastSyncedZxid()) >= 0) {
          ph.setSyncTask(new SyncPeerTask(ph.getServerId(),ph.getLastZxid(),ph.getLastSyncedZxid(),persistence.getLastSeenConfig()),establishedEpoch);
          ph.startSynchronizingTask();
        }
      }
    }
  }
  ackProcessor.processRequest(tuple);
  return ackZxid;
}","Zxid onAck(MessageTuple tuple) throws IOException {
  String source=tuple.getServerId();
  Message msg=tuple.getMessage();
  ZabMessage.Ack ack=msg.getAck();
  Zxid ackZxid=MessageBuilder.fromProtoZxid(ack.getZxid());
  PeerHandler peer=pendingPeers.get(source);
  if (peer != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
    }
    peer.setLastAckedZxid(ackZxid);
    if (lastCommittedZxid.compareTo(ackZxid) >= 0) {
      LOG.debug(""String_Node_Str"");
      Message commit=MessageBuilder.buildCommit(ackZxid);
      sendMessage(peer.getServerId(),commit);
      peer.setLastCommittedZxid(ackZxid);
      peer.startBroadcastingTask();
      pendingPeers.remove(source);
    }
  }
  if (source.equals(this.serverId)) {
    this.lastAckedZxid=ackZxid;
    if (!pendingPeers.isEmpty()) {
      for (      PeerHandler ph : pendingPeers.values()) {
        if (!ph.isSyncStarted() && ackZxid.compareTo(ph.getLastSyncedZxid()) >= 0) {
          ClusterConfiguration cnf=persistence.getLastConfigWithin(ph.getLastSyncedZxid());
          ph.setSyncTask(new SyncPeerTask(ph.getServerId(),ph.getLastZxid(),ph.getLastSyncedZxid(),cnf),establishedEpoch);
          ph.startSynchronizingTask();
        }
      }
    }
  }
  ackProcessor.processRequest(tuple);
  return ackZxid;
}",0.9495026778882938
130714,"void onSyncHistory(MessageTuple tuple) throws IOException {
  String source=tuple.getServerId();
  PeerHandler ph=new PeerHandler(source,transport,config.getTimeoutMs() / 3);
  Zxid lastZxid=MessageBuilder.fromProtoZxid(tuple.getMessage().getSyncHistory().getLastZxid());
  ph.setLastZxid(lastZxid);
  ph.setLastSyncedZxid(this.lastAckedZxid);
  ph.setSyncTask(new SyncPeerTask(ph.getServerId(),ph.getLastZxid(),ph.getLastSyncedZxid(),persistence.getLastSeenConfig()),establishedEpoch);
  Message reply=MessageBuilder.buildSyncHistoryReply(getSyncTimeoutMs());
  sendMessage(source,reply);
  ph.startSynchronizingTask();
  this.quorumMap.put(source,ph);
}","void onSyncHistory(MessageTuple tuple) throws IOException {
  String source=tuple.getServerId();
  PeerHandler ph=new PeerHandler(source,transport,config.getTimeoutMs() / 3);
  Zxid lastZxid=MessageBuilder.fromProtoZxid(tuple.getMessage().getSyncHistory().getLastZxid());
  ph.setLastZxid(lastZxid);
  ph.setLastSyncedZxid(this.lastAckedZxid);
  ClusterConfiguration cnf=persistence.getLastConfigWithin(ph.getLastSyncedZxid());
  ph.setSyncTask(new SyncPeerTask(ph.getServerId(),ph.getLastZxid(),ph.getLastSyncedZxid(),cnf),establishedEpoch);
  Message reply=MessageBuilder.buildSyncHistoryReply(getSyncTimeoutMs());
  sendMessage(source,reply);
  ph.startSynchronizingTask();
  this.quorumMap.put(source,ph);
}",0.9165446559297218
130715,"void onAckEpoch(MessageTuple tuple) throws IOException {
  String source=tuple.getServerId();
  Message msg=tuple.getMessage();
  Zxid zxid=tuple.getZxid();
  ZabMessage.AckEpoch ackEpoch=msg.getAckEpoch();
  Zxid lastPeerZxid=MessageBuilder.fromProtoZxid(ackEpoch.getLastZxid());
  PeerHandler ph=new PeerHandler(source,transport,config.getTimeoutMs() / 3);
  ph.setLastZxid(lastPeerZxid);
  ph.setLastSyncedZxid(zxid);
  quorumMap.put(source,ph);
  this.pendingPeers.put(source,ph);
  preProcessor.processRequest(tuple);
  ackProcessor.processRequest(tuple);
  commitProcessor.processRequest(tuple);
  if (lastAckedZxid.compareTo(zxid) >= 0) {
    ph.setSyncTask(new SyncPeerTask(ph.getServerId(),ph.getLastZxid(),ph.getLastSyncedZxid(),persistence.getLastSeenConfig()),this.establishedEpoch);
    ph.startSynchronizingTask();
  }
}","void onAckEpoch(MessageTuple tuple) throws IOException {
  String source=tuple.getServerId();
  Message msg=tuple.getMessage();
  Zxid zxid=tuple.getZxid();
  ZabMessage.AckEpoch ackEpoch=msg.getAckEpoch();
  Zxid lastPeerZxid=MessageBuilder.fromProtoZxid(ackEpoch.getLastZxid());
  PeerHandler ph=new PeerHandler(source,transport,config.getTimeoutMs() / 3);
  ph.setLastZxid(lastPeerZxid);
  ph.setLastSyncedZxid(zxid);
  quorumMap.put(source,ph);
  this.pendingPeers.put(source,ph);
  preProcessor.processRequest(tuple);
  ackProcessor.processRequest(tuple);
  commitProcessor.processRequest(tuple);
  if (lastAckedZxid.compareTo(zxid) >= 0) {
    ClusterConfiguration cnf=persistence.getLastConfigWithin(ph.getLastSyncedZxid());
    ph.setSyncTask(new SyncPeerTask(ph.getServerId(),ph.getLastZxid(),ph.getLastSyncedZxid(),cnf),this.establishedEpoch);
    ph.startSynchronizingTask();
  }
}",0.8227114716106605
130716,"/** 
 * Creates or restores the transaction log from a given directory.
 * @param dir the log directory.
 */
Log createLog(File dir) throws IOException {
  File logFile=new File(dir,""String_Node_Str"");
  return new SimpleLog(logFile);
}","/** 
 * Creates or restores the transaction log from a given directory.
 * @param dir the log directory.
 */
Log createLog(File dir) throws IOException {
  return new RollingLog(dir,ZabConfig.ROLLING_SIZE);
}",0.7747747747747747
130717,"/** 
 * Syncs all the appended transactions to the physical media.
 * @throws IOException in case of IO failure
 */
@Override public void sync() throws IOException {
  this.currentLog.sync();
}","/** 
 * Syncs all the appended transactions to the physical media.
 * @throws IOException in case of IO failure
 */
@Override public void sync() throws IOException {
  if (this.currentLog != null) {
    this.currentLog.sync();
  }
}",0.908235294117647
130718,"@Override public String electLeader() throws Exception {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  String serverId=clusterConfig.getServerId();
  long ackEpoch=persistence.getAckEpoch();
  HashMap<String,VoteInfo> receivedVotes=new HashMap<String,VoteInfo>();
  this.round++;
  this.voteInfo=new VoteInfo(serverId,ackEpoch,lastZxid,round,true);
  int timeoutMs=100;
  int maxTimeoutMs=1600;
  broadcast(clusterConfig);
  while (true) {
    VoteTuple tuple=getVote(timeoutMs);
    if (tuple == null) {
      if (receivedVotes.size() >= clusterConfig.getQuorumSize()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
 else {
        broadcast(clusterConfig);
        timeoutMs=(timeoutMs * 2 > maxTimeoutMs) ? maxTimeoutMs : 2 * timeoutMs;
        continue;
      }
    }
    VoteInfo vote=tuple.voteInfo;
    String source=tuple.source;
    if (vote.electing) {
      if (vote.round > this.voteInfo.round) {
        LOG.debug(""String_Node_Str"",vote.round,this.voteInfo.round);
        this.round=vote.round;
        this.voteInfo.round=vote.round;
        receivedVotes.clear();
        if (this.voteInfo.compareTo(vote) < 0) {
          this.voteInfo=vote;
        }
        broadcast(clusterConfig);
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) < 0) {
        this.voteInfo=vote;
        broadcast(clusterConfig);
      }
 else       if (vote.round < this.voteInfo.round) {
        continue;
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) > 0) {
        broadcast(clusterConfig);
      }
      receivedVotes.put(source,vote);
      if (receivedVotes.size() == clusterConfig.getPeers().size()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
    }
 else {
      this.voteInfo=vote;
      this.voteInfo.electing=false;
      return this.voteInfo.vote;
    }
  }
}","@Override public String electLeader() throws Exception {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  String serverId=clusterConfig.getServerId();
  long ackEpoch=persistence.getAckEpoch();
  HashMap<String,VoteInfo> receivedVotes=new HashMap<String,VoteInfo>();
  this.round++;
  this.voteInfo=new VoteInfo(serverId,ackEpoch,lastZxid,round,true);
  int timeoutMs=100;
  int maxTimeoutMs=1600;
  broadcast(clusterConfig);
  while (true) {
    VoteTuple tuple=getVote(timeoutMs);
    if (tuple == null) {
      if (receivedVotes.size() >= clusterConfig.getQuorumSize()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
 else {
        broadcast(clusterConfig);
        timeoutMs=(timeoutMs * 2 > maxTimeoutMs) ? maxTimeoutMs : 2 * timeoutMs;
        continue;
      }
    }
    VoteInfo vote=tuple.voteInfo;
    String source=tuple.source;
    if (!clusterConfig.contains(source)) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",source);
      continue;
    }
    if (vote.electing) {
      if (vote.round > this.voteInfo.round) {
        LOG.debug(""String_Node_Str"",vote.round,this.voteInfo.round);
        this.round=vote.round;
        this.voteInfo.round=vote.round;
        receivedVotes.clear();
        if (this.voteInfo.compareTo(vote) < 0) {
          this.voteInfo=vote;
        }
        broadcast(clusterConfig);
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) < 0) {
        this.voteInfo=vote;
        broadcast(clusterConfig);
      }
 else       if (vote.round < this.voteInfo.round) {
        continue;
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) > 0) {
        broadcast(clusterConfig);
      }
      receivedVotes.put(source,vote);
      if (receivedVotes.size() == clusterConfig.getPeers().size()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
    }
 else {
      this.voteInfo=vote;
      this.voteInfo.electing=false;
      return this.voteInfo.vote;
    }
  }
}",0.9395843402609956
130719,"/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.PROPOSED_EPOCH) {
      LOG.debug(""String_Node_Str"");
      this.transport.clear(tuple.getServerId());
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.electedLeader != null && peerId.equals(this.electedLeader)) {
        LOG.debug(""String_Node_Str"",this.electedLeader);
        throw new BackToElectionException();
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (this.currentPhase != Phase.BROADCASTING && tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}","/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  long startTime=System.nanoTime() / 1000000;
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.PROPOSED_EPOCH) {
      LOG.debug(""String_Node_Str"");
      this.transport.clear(tuple.getServerId());
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.electedLeader != null && peerId.equals(this.electedLeader)) {
        LOG.debug(""String_Node_Str"",this.electedLeader);
        throw new BackToElectionException();
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
    long curTime=System.nanoTime() / 1000000;
    if (curTime - startTime >= (long)timeoutMs) {
      throw new TimeoutException();
    }
  }
}",0.9376544905245812
130720,"/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.quorumSet.containsKey(peerId)) {
        if (this.currentPhase != Phase.BROADCASTING) {
          LOG.debug(""String_Node_Str"",peerId);
          throw new BackToElectionException();
        }
 else {
          LOG.debug(""String_Node_Str"",peerId);
          return tuple;
        }
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (this.currentPhase != Phase.BROADCASTING && tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}","/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  long startTime=System.nanoTime() / 1000000;
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.quorumSet.containsKey(peerId)) {
        if (this.currentPhase != Phase.BROADCASTING) {
          LOG.debug(""String_Node_Str"",peerId);
          throw new BackToElectionException();
        }
 else {
          LOG.debug(""String_Node_Str"",peerId);
          return tuple;
        }
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
    long curTime=System.nanoTime() / 1000000;
    if (curTime - startTime >= (long)timeoutMs) {
      throw new TimeoutException();
    }
  }
}",0.9358938153064106
130721,"@Override public void clear(String destination){
  LOG.debug(""String_Node_Str"",destination);
  Sender sender=senders.remove(destination);
  if (sender != null) {
    sender.shutdown();
    if (sender.handshakeFail) {
      try {
        Thread.sleep((int)(new Random().nextFloat() * 500));
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
    }
  }
}","@Override public void clear(String destination){
  LOG.debug(""String_Node_Str"",destination);
  Sender sender=senders.remove(destination);
  if (sender != null) {
    sender.shutdown();
    if (sender.handshakeFail) {
      try {
        Thread.sleep((int)(new Random().nextFloat() * 200));
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
    }
  }
}",0.9975124378109452
130722,"@Test(timeout=20000) public void testReconfigRecoveryCase3() throws Exception {
  QuorumTestCallback cb1=new QuorumTestCallback();
  QuorumTestCallback cb2=new QuorumTestCallback();
  QuorumTestCallback cb3=new QuorumTestCallback();
  TestStateMachine st=new TestStateMachine();
  final String server1=getUniqueHostPort();
  final String server2=getUniqueHostPort();
  final String server3=getUniqueHostPort();
  Zxid version1=new Zxid(0,1);
  Zxid version2=new Zxid(0,0);
  ArrayList<String> peers1=new ArrayList<String>();
  peers1.add(server1);
  peers1.add(server2);
  ArrayList<String> peers2=new ArrayList<String>();
  peers2.add(server1);
  peers2.add(server2);
  peers2.add(server3);
  ClusterConfiguration cnf1=new ClusterConfiguration(version1,peers1,server1);
  ClusterConfiguration cnf2=new ClusterConfiguration(version2,peers2,server2);
  ClusterConfiguration cnf3=new ClusterConfiguration(version2,peers2,server3);
  Zab.TestState state1=new Zab.TestState(server1,null,getDirectory()).setProposedEpoch(0).setLog(new DummyLog(1)).setAckEpoch(0).setClusterConfiguration(cnf1);
  Zab zab1=new Zab(st,cb1,null,state1);
  Zab.TestState state2=new Zab.TestState(server2,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(2)).setAckEpoch(1).setClusterConfiguration(cnf2);
  Zab zab2=new Zab(st,cb2,null,state2);
  Zab.TestState state3=new Zab.TestState(server3,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(1)).setAckEpoch(1).setClusterConfiguration(cnf3);
  Zab zab3=new Zab(st,cb3,null,state3);
  cb2.waitBroadcasting();
  cb3.waitBroadcasting();
  Assert.assertEquals(cb2.clusterConfig.getVersion(),cnf2.getVersion());
  Assert.assertEquals(cb3.clusterConfig.getVersion(),cnf3.getVersion());
  Assert.assertEquals(2,cb2.initialHistory.size());
  Assert.assertEquals(2,cb3.initialHistory.size());
  Assert.assertNotEquals(cb2.electedLeader,server1);
  Assert.assertNotEquals(cb3.electedLeader,server1);
  zab1.shutdown();
  zab2.shutdown();
  zab3.shutdown();
}","@Test(timeout=20000) public void testReconfigRecoveryCase3() throws Exception {
  QuorumTestCallback cb1=new QuorumTestCallback();
  QuorumTestCallback cb2=new QuorumTestCallback();
  QuorumTestCallback cb3=new QuorumTestCallback();
  TestStateMachine st=new TestStateMachine();
  final String server1=getUniqueHostPort();
  final String server2=getUniqueHostPort();
  final String server3=getUniqueHostPort();
  Zxid version1=new Zxid(0,1);
  Zxid version2=new Zxid(0,0);
  ArrayList<String> peers1=new ArrayList<String>();
  peers1.add(server1);
  peers1.add(server2);
  ArrayList<String> peers2=new ArrayList<String>();
  peers2.add(server1);
  peers2.add(server2);
  peers2.add(server3);
  ClusterConfiguration cnf1=new ClusterConfiguration(version1,peers1,server1);
  ClusterConfiguration cnf2=new ClusterConfiguration(version2,peers2,server2);
  ClusterConfiguration cnf3=new ClusterConfiguration(version2,peers2,server3);
  Zab.TestState state1=new Zab.TestState(server1,null,getDirectory()).setProposedEpoch(0).setLog(new DummyLog(1)).setAckEpoch(0).setClusterConfiguration(cnf1);
  Zab zab1=new Zab(st,cb1,null,state1);
  Zab.TestState state2=new Zab.TestState(server2,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(2)).setAckEpoch(1).setClusterConfiguration(cnf2);
  Zab zab2=new Zab(st,cb2,null,state2);
  Zab.TestState state3=new Zab.TestState(server3,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(2)).setAckEpoch(1).setClusterConfiguration(cnf3);
  Zab zab3=new Zab(st,cb3,null,state3);
  cb2.waitBroadcasting();
  cb3.waitBroadcasting();
  Assert.assertEquals(cb2.clusterConfig.getVersion(),cnf2.getVersion());
  Assert.assertEquals(cb3.clusterConfig.getVersion(),cnf3.getVersion());
  Assert.assertEquals(2,cb2.initialHistory.size());
  Assert.assertEquals(2,cb3.initialHistory.size());
  Assert.assertNotEquals(cb2.electedLeader,server1);
  Assert.assertNotEquals(cb3.electedLeader,server1);
  zab1.shutdown();
  zab2.shutdown();
  zab3.shutdown();
}",0.999498746867168
130723,"/** 
 * Entering broadcasting phase.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException  in case of timeout.
 * @throws IOException in case of IOException.
 * @throws ExecutionException in case of exception from executors.
 */
void accepting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,null,clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  long lastHeartbeatTime=System.nanoTime();
  long ackEpoch=persistence.getAckEpoch();
  stateMachine.following(electedLeader,new HashSet<String>(clusterConfig.getPeers()));
  try {
    while (true) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (source.equals(this.electedLeader)) {
        lastHeartbeatTime=System.nanoTime();
      }
 else {
        long timeDiff=(System.nanoTime() - lastHeartbeatTime) / 1000000;
        if ((int)timeDiff >= this.config.getTimeoutMs()) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader);
          throw new TimeoutException(""String_Node_Str"");
        }
        if (msg.getType() == MessageType.QUERY_LEADER) {
          LOG.debug(""String_Node_Str"",source);
          Message reply=MessageBuilder.buildQueryReply(this.electedLeader);
          sendMessage(source,reply);
        }
 else         if (msg.getType() == MessageType.ELECTION_INFO) {
          this.election.reply(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",source);
        }
        continue;
      }
      if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      if (msg.getType() == MessageType.PROPOSAL) {
        Transaction txn=MessageBuilder.fromProposal(msg.getProposal());
        Zxid zxid=txn.getZxid();
        if (zxid.getEpoch() == ackEpoch) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",zxid.getEpoch(),ackEpoch);
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (msg.getType() == MessageType.COMMIT) {
        commitProcessor.processRequest(tuple);
      }
 else       if (msg.getType() == MessageType.HEARTBEAT) {
        LOG.trace(""String_Node_Str"",source);
        Message heartbeatReply=MessageBuilder.buildHeartbeat();
        sendMessage(source,heartbeatReply);
      }
 else       if (msg.getType() == MessageType.DELIVERED) {
        onDelivered(msg,snapProcessor);
      }
 else       if (msg.getType() == MessageType.FLUSH) {
        onFlush(tuple,commitProcessor);
      }
 else {
        if (LOG.isWarnEnabled()) {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
      }
    }
  }
  finally {
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}","/** 
 * Entering broadcasting phase.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException  in case of timeout.
 * @throws IOException in case of IOException.
 * @throws ExecutionException in case of exception from executors.
 */
void accepting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,null,clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  long lastHeartbeatTime=System.nanoTime();
  long ackEpoch=persistence.getAckEpoch();
  stateMachine.following(electedLeader,new HashSet<String>(clusterConfig.getPeers()));
  try {
    while (true) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (source.equals(this.electedLeader)) {
        lastHeartbeatTime=System.nanoTime();
      }
 else {
        long timeDiff=(System.nanoTime() - lastHeartbeatTime) / 1000000;
        if ((int)timeDiff >= this.config.getTimeoutMs()) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader);
          throw new TimeoutException(""String_Node_Str"");
        }
        if (msg.getType() == MessageType.QUERY_LEADER) {
          LOG.debug(""String_Node_Str"",source);
          Message reply=MessageBuilder.buildQueryReply(this.electedLeader);
          sendMessage(source,reply);
        }
 else         if (msg.getType() == MessageType.ELECTION_INFO) {
          this.election.reply(tuple);
        }
 else         if (msg.getType() == MessageType.DELIVERED) {
          onDelivered(msg,snapProcessor);
        }
 else {
          LOG.debug(""String_Node_Str"",source);
        }
        continue;
      }
      if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      if (msg.getType() == MessageType.PROPOSAL) {
        Transaction txn=MessageBuilder.fromProposal(msg.getProposal());
        Zxid zxid=txn.getZxid();
        if (zxid.getEpoch() == ackEpoch) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",zxid.getEpoch(),ackEpoch);
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (msg.getType() == MessageType.COMMIT) {
        commitProcessor.processRequest(tuple);
      }
 else       if (msg.getType() == MessageType.HEARTBEAT) {
        LOG.trace(""String_Node_Str"",source);
        Message heartbeatReply=MessageBuilder.buildHeartbeat();
        sendMessage(source,heartbeatReply);
      }
 else       if (msg.getType() == MessageType.FLUSH) {
        onFlush(tuple,commitProcessor);
      }
 else {
        if (LOG.isWarnEnabled()) {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
      }
    }
  }
  finally {
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}",0.7002890173410404
130724,"/** 
 * Entering broadcasting phase.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException  in case of timeout.
 * @throws IOException in case of IOException.
 * @throws ExecutionException in case of exception from executors.
 */
void accepting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,null,clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  long lastHeartbeatTime=System.nanoTime();
  long ackEpoch=persistence.getAckEpoch();
  stateMachine.following(electedLeader,new HashSet<String>(clusterConfig.getPeers()));
  try {
    while (true) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (source.equals(this.electedLeader)) {
        lastHeartbeatTime=System.nanoTime();
      }
 else {
        long timeDiff=(System.nanoTime() - lastHeartbeatTime) / 1000000;
        if ((int)timeDiff >= this.config.getTimeoutMs()) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader);
          throw new TimeoutException(""String_Node_Str"");
        }
        if (msg.getType() == MessageType.QUERY_LEADER) {
          LOG.debug(""String_Node_Str"",source);
          Message reply=MessageBuilder.buildQueryReply(this.electedLeader);
          sendMessage(source,reply);
        }
 else         if (msg.getType() == MessageType.ELECTION_INFO) {
          this.election.reply(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",source);
        }
        continue;
      }
      if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      if (msg.getType() == MessageType.PROPOSAL) {
        Transaction txn=MessageBuilder.fromProposal(msg.getProposal());
        Zxid zxid=txn.getZxid();
        if (zxid.getEpoch() == ackEpoch) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",zxid.getEpoch(),ackEpoch);
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (msg.getType() == MessageType.COMMIT) {
        commitProcessor.processRequest(tuple);
      }
 else       if (msg.getType() == MessageType.HEARTBEAT) {
        LOG.trace(""String_Node_Str"",source);
        Message heartbeatReply=MessageBuilder.buildHeartbeat();
        sendMessage(source,heartbeatReply);
      }
 else       if (msg.getType() == MessageType.DELIVERED) {
        onDelivered(msg,snapProcessor);
      }
 else       if (msg.getType() == MessageType.FLUSH) {
        onFlush(tuple,commitProcessor);
      }
 else {
        if (LOG.isWarnEnabled()) {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
      }
    }
  }
  finally {
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}","/** 
 * Entering broadcasting phase.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException  in case of timeout.
 * @throws IOException in case of IOException.
 * @throws ExecutionException in case of exception from executors.
 */
void accepting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,null,clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  long lastHeartbeatTime=System.nanoTime();
  long ackEpoch=persistence.getAckEpoch();
  stateMachine.following(electedLeader,new HashSet<String>(clusterConfig.getPeers()));
  try {
    while (true) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (source.equals(this.electedLeader)) {
        lastHeartbeatTime=System.nanoTime();
      }
 else {
        long timeDiff=(System.nanoTime() - lastHeartbeatTime) / 1000000;
        if ((int)timeDiff >= this.config.getTimeoutMs()) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader);
          throw new TimeoutException(""String_Node_Str"");
        }
        if (msg.getType() == MessageType.QUERY_LEADER) {
          LOG.debug(""String_Node_Str"",source);
          Message reply=MessageBuilder.buildQueryReply(this.electedLeader);
          sendMessage(source,reply);
        }
 else         if (msg.getType() == MessageType.ELECTION_INFO) {
          this.election.reply(tuple);
        }
 else         if (msg.getType() == MessageType.DELIVERED) {
          onDelivered(msg,snapProcessor);
        }
 else {
          LOG.debug(""String_Node_Str"",source);
        }
        continue;
      }
      if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      if (msg.getType() == MessageType.PROPOSAL) {
        Transaction txn=MessageBuilder.fromProposal(msg.getProposal());
        Zxid zxid=txn.getZxid();
        if (zxid.getEpoch() == ackEpoch) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",zxid.getEpoch(),ackEpoch);
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (msg.getType() == MessageType.COMMIT) {
        commitProcessor.processRequest(tuple);
      }
 else       if (msg.getType() == MessageType.HEARTBEAT) {
        LOG.trace(""String_Node_Str"",source);
        Message heartbeatReply=MessageBuilder.buildHeartbeat();
        sendMessage(source,heartbeatReply);
      }
 else       if (msg.getType() == MessageType.FLUSH) {
        onFlush(tuple,commitProcessor);
      }
 else {
        if (LOG.isWarnEnabled()) {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
      }
    }
  }
  finally {
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}",0.7002890173410404
130725,"@Override public String electLeader() throws Exception {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  String serverId=clusterConfig.getServerId();
  long ackEpoch=persistence.getAckEpoch();
  HashMap<String,VoteInfo> receivedVotes=new HashMap<String,VoteInfo>();
  this.round++;
  this.voteInfo=new VoteInfo(serverId,ackEpoch,lastZxid,round,true);
  int timeoutMs=100;
  int maxTimeoutMs=1600;
  broadcast(clusterConfig);
  while (true) {
    VoteTuple tuple=getVote(timeoutMs);
    if (tuple == null) {
      if (receivedVotes.size() >= clusterConfig.getQuorumSize()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
 else {
        broadcast(clusterConfig);
        timeoutMs=(timeoutMs * 2 > maxTimeoutMs) ? maxTimeoutMs : 2 * timeoutMs;
        continue;
      }
    }
    VoteInfo vote=tuple.voteInfo;
    String source=tuple.source;
    if (vote.electing) {
      if (vote.round > this.voteInfo.round) {
        LOG.debug(""String_Node_Str"",vote.round,this.voteInfo.round);
        this.round=vote.round;
        this.voteInfo.round=vote.round;
        receivedVotes.clear();
        if (this.voteInfo.compareTo(vote) < 0) {
          this.voteInfo=vote;
        }
        broadcast(clusterConfig);
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) < 0) {
        this.voteInfo=vote;
        broadcast(clusterConfig);
      }
 else       if (vote.round < this.voteInfo.round) {
        continue;
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) > 0) {
        broadcast(clusterConfig);
      }
      receivedVotes.put(source,vote);
      if (receivedVotes.size() == clusterConfig.getPeers().size()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
    }
 else {
      this.voteInfo=vote;
      this.voteInfo.electing=false;
      return this.voteInfo.vote;
    }
  }
}","@Override public String electLeader() throws Exception {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  String serverId=clusterConfig.getServerId();
  long ackEpoch=persistence.getAckEpoch();
  HashMap<String,VoteInfo> receivedVotes=new HashMap<String,VoteInfo>();
  this.round++;
  this.voteInfo=new VoteInfo(serverId,ackEpoch,lastZxid,round,true);
  int timeoutMs=100;
  int maxTimeoutMs=1600;
  broadcast(clusterConfig);
  while (true) {
    VoteTuple tuple=getVote(timeoutMs);
    if (tuple == null) {
      if (receivedVotes.size() >= clusterConfig.getQuorumSize()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
 else {
        broadcast(clusterConfig);
        timeoutMs=(timeoutMs * 2 > maxTimeoutMs) ? maxTimeoutMs : 2 * timeoutMs;
        continue;
      }
    }
    VoteInfo vote=tuple.voteInfo;
    String source=tuple.source;
    if (!clusterConfig.contains(source)) {
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",source);
      continue;
    }
    if (vote.electing) {
      if (vote.round > this.voteInfo.round) {
        LOG.debug(""String_Node_Str"",vote.round,this.voteInfo.round);
        this.round=vote.round;
        this.voteInfo.round=vote.round;
        receivedVotes.clear();
        if (this.voteInfo.compareTo(vote) < 0) {
          this.voteInfo=vote;
        }
        broadcast(clusterConfig);
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) < 0) {
        this.voteInfo=vote;
        broadcast(clusterConfig);
      }
 else       if (vote.round < this.voteInfo.round) {
        continue;
      }
 else       if (vote.round == this.voteInfo.round && this.voteInfo.compareTo(vote) > 0) {
        broadcast(clusterConfig);
      }
      receivedVotes.put(source,vote);
      if (receivedVotes.size() == clusterConfig.getPeers().size()) {
        this.voteInfo.electing=false;
        return this.voteInfo.vote;
      }
    }
 else {
      this.voteInfo=vote;
      this.voteInfo.electing=false;
      return this.voteInfo.vote;
    }
  }
}",0.9395843402609956
130726,"/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.PROPOSED_EPOCH) {
      LOG.debug(""String_Node_Str"");
      this.transport.clear(tuple.getServerId());
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.electedLeader != null && peerId.equals(this.electedLeader)) {
        LOG.debug(""String_Node_Str"",this.electedLeader);
        throw new BackToElectionException();
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (this.currentPhase != Phase.BROADCASTING && tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}","/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  long startTime=System.nanoTime() / 1000000;
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.PROPOSED_EPOCH) {
      LOG.debug(""String_Node_Str"");
      this.transport.clear(tuple.getServerId());
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.electedLeader != null && peerId.equals(this.electedLeader)) {
        LOG.debug(""String_Node_Str"",this.electedLeader);
        throw new BackToElectionException();
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
    long curTime=System.nanoTime() / 1000000;
    if (curTime - startTime >= (long)timeoutMs) {
      throw new TimeoutException();
    }
  }
}",0.9376544905245812
130727,"/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.quorumSet.containsKey(peerId)) {
        if (this.currentPhase != Phase.BROADCASTING) {
          LOG.debug(""String_Node_Str"",peerId);
          throw new BackToElectionException();
        }
 else {
          LOG.debug(""String_Node_Str"",peerId);
          return tuple;
        }
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (this.currentPhase != Phase.BROADCASTING && tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}","/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  long startTime=System.nanoTime() / 1000000;
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.quorumSet.containsKey(peerId)) {
        if (this.currentPhase != Phase.BROADCASTING) {
          LOG.debug(""String_Node_Str"",peerId);
          throw new BackToElectionException();
        }
 else {
          LOG.debug(""String_Node_Str"",peerId);
          return tuple;
        }
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
    long curTime=System.nanoTime() / 1000000;
    if (curTime - startTime >= (long)timeoutMs) {
      throw new TimeoutException();
    }
  }
}",0.9358938153064106
130728,"@Override public void clear(String destination){
  LOG.debug(""String_Node_Str"",destination);
  Sender sender=senders.remove(destination);
  if (sender != null) {
    sender.shutdown();
    if (sender.handshakeFail) {
      try {
        Thread.sleep((int)(new Random().nextFloat() * 500));
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
    }
  }
}","@Override public void clear(String destination){
  LOG.debug(""String_Node_Str"",destination);
  Sender sender=senders.remove(destination);
  if (sender != null) {
    sender.shutdown();
    if (sender.handshakeFail) {
      try {
        Thread.sleep((int)(new Random().nextFloat() * 200));
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
    }
  }
}",0.9975124378109452
130729,"@Test(timeout=20000) public void testReconfigRecoveryCase3() throws Exception {
  QuorumTestCallback cb1=new QuorumTestCallback();
  QuorumTestCallback cb2=new QuorumTestCallback();
  QuorumTestCallback cb3=new QuorumTestCallback();
  TestStateMachine st=new TestStateMachine();
  final String server1=getUniqueHostPort();
  final String server2=getUniqueHostPort();
  final String server3=getUniqueHostPort();
  Zxid version1=new Zxid(0,1);
  Zxid version2=new Zxid(0,0);
  ArrayList<String> peers1=new ArrayList<String>();
  peers1.add(server1);
  peers1.add(server2);
  ArrayList<String> peers2=new ArrayList<String>();
  peers2.add(server1);
  peers2.add(server2);
  peers2.add(server3);
  ClusterConfiguration cnf1=new ClusterConfiguration(version1,peers1,server1);
  ClusterConfiguration cnf2=new ClusterConfiguration(version2,peers2,server2);
  ClusterConfiguration cnf3=new ClusterConfiguration(version2,peers2,server3);
  Zab.TestState state1=new Zab.TestState(server1,null,getDirectory()).setProposedEpoch(0).setLog(new DummyLog(1)).setAckEpoch(0).setClusterConfiguration(cnf1);
  Zab zab1=new Zab(st,cb1,null,state1);
  Zab.TestState state2=new Zab.TestState(server2,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(2)).setAckEpoch(1).setClusterConfiguration(cnf2);
  Zab zab2=new Zab(st,cb2,null,state2);
  Zab.TestState state3=new Zab.TestState(server3,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(1)).setAckEpoch(1).setClusterConfiguration(cnf3);
  Zab zab3=new Zab(st,cb3,null,state3);
  cb2.waitBroadcasting();
  cb3.waitBroadcasting();
  Assert.assertEquals(cb2.clusterConfig.getVersion(),cnf2.getVersion());
  Assert.assertEquals(cb3.clusterConfig.getVersion(),cnf3.getVersion());
  Assert.assertEquals(2,cb2.initialHistory.size());
  Assert.assertEquals(2,cb3.initialHistory.size());
  Assert.assertNotEquals(cb2.electedLeader,server1);
  Assert.assertNotEquals(cb3.electedLeader,server1);
  zab1.shutdown();
  zab2.shutdown();
  zab3.shutdown();
}","@Test(timeout=20000) public void testReconfigRecoveryCase3() throws Exception {
  QuorumTestCallback cb1=new QuorumTestCallback();
  QuorumTestCallback cb2=new QuorumTestCallback();
  QuorumTestCallback cb3=new QuorumTestCallback();
  TestStateMachine st=new TestStateMachine();
  final String server1=getUniqueHostPort();
  final String server2=getUniqueHostPort();
  final String server3=getUniqueHostPort();
  Zxid version1=new Zxid(0,1);
  Zxid version2=new Zxid(0,0);
  ArrayList<String> peers1=new ArrayList<String>();
  peers1.add(server1);
  peers1.add(server2);
  ArrayList<String> peers2=new ArrayList<String>();
  peers2.add(server1);
  peers2.add(server2);
  peers2.add(server3);
  ClusterConfiguration cnf1=new ClusterConfiguration(version1,peers1,server1);
  ClusterConfiguration cnf2=new ClusterConfiguration(version2,peers2,server2);
  ClusterConfiguration cnf3=new ClusterConfiguration(version2,peers2,server3);
  Zab.TestState state1=new Zab.TestState(server1,null,getDirectory()).setProposedEpoch(0).setLog(new DummyLog(1)).setAckEpoch(0).setClusterConfiguration(cnf1);
  Zab zab1=new Zab(st,cb1,null,state1);
  Zab.TestState state2=new Zab.TestState(server2,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(2)).setAckEpoch(1).setClusterConfiguration(cnf2);
  Zab zab2=new Zab(st,cb2,null,state2);
  Zab.TestState state3=new Zab.TestState(server3,null,getDirectory()).setProposedEpoch(1).setLog(new DummyLog(2)).setAckEpoch(1).setClusterConfiguration(cnf3);
  Zab zab3=new Zab(st,cb3,null,state3);
  cb2.waitBroadcasting();
  cb3.waitBroadcasting();
  Assert.assertEquals(cb2.clusterConfig.getVersion(),cnf2.getVersion());
  Assert.assertEquals(cb3.clusterConfig.getVersion(),cnf3.getVersion());
  Assert.assertEquals(2,cb2.initialHistory.size());
  Assert.assertEquals(2,cb3.initialHistory.size());
  Assert.assertNotEquals(cb2.electedLeader,server1);
  Assert.assertNotEquals(cb3.electedLeader,server1);
  zab1.shutdown();
  zab2.shutdown();
  zab3.shutdown();
}",0.999498746867168
130730,"@Test public void testSnapshotSynchronization() throws Exception {
  final int nTxns=50;
  QuorumTestCallback cb1=new QuorumTestCallback();
  SnapshotStateMachine st1=new SnapshotStateMachine(nTxns);
  QuorumTestCallback cb2=new QuorumTestCallback();
  SnapshotStateMachine st2=new SnapshotStateMachine(nTxns);
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  Properties prop1=new Properties();
  prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop1.setProperty(""String_Node_Str"",server1);
  prop1.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server1);
  Properties prop2=new Properties();
  prop2.setProperty(""String_Node_Str"",server2);
  prop2.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server2);
  Zab zab1=new Zab(st1,prop1,server1);
  st1.waitMemberChanged();
  for (int i=0; i < nTxns; ++i) {
    zab1.send(ByteBuffer.wrap((""String_Node_Str"" + i).getBytes()));
    Thread.sleep(20);
  }
  st1.txnsCount.await();
  Zab zab2=new Zab(st2,prop2,server1);
  st2.waitMemberChanged();
  Assert.assertEquals(st1.state,st2.state);
  zab1.shutdown();
  zab2.shutdown();
}","@Test(timeout=30000) public void testSnapshotSynchronization() throws Exception {
  final int nTxns=50;
  QuorumTestCallback cb1=new QuorumTestCallback();
  SnapshotStateMachine st1=new SnapshotStateMachine(nTxns);
  QuorumTestCallback cb2=new QuorumTestCallback();
  SnapshotStateMachine st2=new SnapshotStateMachine(nTxns);
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  Properties prop1=new Properties();
  prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop1.setProperty(""String_Node_Str"",server1);
  prop1.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server1);
  Properties prop2=new Properties();
  prop2.setProperty(""String_Node_Str"",server2);
  prop2.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server2);
  Zab zab1=new Zab(st1,prop1,server1);
  st1.waitMemberChanged();
  for (int i=0; i < nTxns; ++i) {
    zab1.send(ByteBuffer.wrap((""String_Node_Str"" + i).getBytes()));
    Thread.sleep(5);
  }
  st1.txnsCount.await();
  Zab zab2=new Zab(st2,prop2,server1);
  st2.waitMemberChanged();
  Assert.assertEquals(st1.state,st2.state);
  zab1.shutdown();
  zab2.shutdown();
}",0.9923339011925044
130731,"@Test public void testSnapshotCluster() throws Exception {
  final int nTxns=20;
  QuorumTestCallback cb1=new QuorumTestCallback();
  SnapshotStateMachine st1=new SnapshotStateMachine(nTxns);
  QuorumTestCallback cb2=new QuorumTestCallback();
  SnapshotStateMachine st2=new SnapshotStateMachine(nTxns);
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  Properties prop1=new Properties();
  prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop1.setProperty(""String_Node_Str"",server1);
  prop1.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server1);
  Properties prop2=new Properties();
  prop2.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop2.setProperty(""String_Node_Str"",server2);
  prop2.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server2);
  Zab zab1=new Zab(st1,prop1,server1);
  st1.waitMemberChanged();
  Zab zab2=new Zab(st2,prop2,server1);
  st2.waitMemberChanged();
  st1.waitMemberChanged();
  for (int i=0; i < nTxns; ++i) {
    zab1.send(ByteBuffer.wrap((""String_Node_Str"" + i).getBytes()));
    Thread.sleep(50);
  }
  st1.txnsCount.await();
  st2.txnsCount.await();
  zab1.shutdown();
  zab2.shutdown();
  SnapshotStateMachine stNew1=new SnapshotStateMachine(nTxns);
  SnapshotStateMachine stNew2=new SnapshotStateMachine(nTxns);
  prop1=new Properties();
  prop1.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server1);
  prop2=new Properties();
  prop2.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server2);
  zab1=new Zab(stNew1,prop1);
  zab2=new Zab(stNew2,prop2);
  stNew1.waitMemberChanged();
  stNew2.waitMemberChanged();
  Assert.assertEquals(st1.state,stNew1.state);
  Assert.assertEquals(st2.state,stNew2.state);
  Assert.assertEquals(stNew1.state,stNew2.state);
  zab1.shutdown();
  zab2.shutdown();
}","@Test(timeout=30000) public void testSnapshotCluster() throws Exception {
  final int nTxns=20;
  QuorumTestCallback cb1=new QuorumTestCallback();
  SnapshotStateMachine st1=new SnapshotStateMachine(nTxns);
  QuorumTestCallback cb2=new QuorumTestCallback();
  SnapshotStateMachine st2=new SnapshotStateMachine(nTxns);
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  Properties prop1=new Properties();
  prop1.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop1.setProperty(""String_Node_Str"",server1);
  prop1.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server1);
  Properties prop2=new Properties();
  prop2.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop2.setProperty(""String_Node_Str"",server2);
  prop2.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server2);
  Zab zab1=new Zab(st1,prop1,server1);
  st1.waitMemberChanged();
  Zab zab2=new Zab(st2,prop2,server1);
  st2.waitMemberChanged();
  st1.waitMemberChanged();
  for (int i=0; i < nTxns; ++i) {
    zab1.send(ByteBuffer.wrap((""String_Node_Str"" + i).getBytes()));
    Thread.sleep(50);
  }
  st1.txnsCount.await();
  st2.txnsCount.await();
  zab1.shutdown();
  zab2.shutdown();
  SnapshotStateMachine stNew1=new SnapshotStateMachine(nTxns);
  SnapshotStateMachine stNew2=new SnapshotStateMachine(nTxns);
  prop1=new Properties();
  prop1.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server1);
  prop2=new Properties();
  prop2.setProperty(""String_Node_Str"",getDirectory().getPath() + File.separator + server2);
  zab1=new Zab(stNew1,prop1);
  zab2=new Zab(stNew2,prop2);
  stNew1.waitMemberChanged();
  stNew2.waitMemberChanged();
  Assert.assertEquals(st1.state,stNew1.state);
  Assert.assertEquals(st2.state,stNew2.state);
  Assert.assertEquals(stNew1.state,stNew2.state);
  zab1.shutdown();
  zab2.shutdown();
}",0.9960453466912734
130732,"@Test public void testSnapshotSingleServer() throws Exception {
  final int nTxns=20;
  QuorumTestCallback cb1=new QuorumTestCallback();
  SnapshotStateMachine st1=new SnapshotStateMachine(nTxns);
  String server=getUniqueHostPort();
  Properties prop=new Properties();
  prop.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop.setProperty(""String_Node_Str"",server);
  prop.setProperty(""String_Node_Str"",getDirectory().getPath());
  Zab zab=new Zab(st1,prop,server);
  for (int i=0; i < nTxns; ++i) {
    zab.send(ByteBuffer.wrap((""String_Node_Str"" + i).getBytes()));
    Thread.sleep(50);
  }
  st1.txnsCount.await();
  zab.shutdown();
  SnapshotStateMachine stNew=new SnapshotStateMachine(nTxns);
  prop=new Properties();
  prop.setProperty(""String_Node_Str"",getDirectory().getPath());
  zab=new Zab(stNew,prop);
  stNew.waitMemberChanged();
  Assert.assertEquals(st1.state,stNew.state);
  zab.shutdown();
}","@Test(timeout=30000) public void testSnapshotSingleServer() throws Exception {
  final int nTxns=20;
  QuorumTestCallback cb1=new QuorumTestCallback();
  SnapshotStateMachine st1=new SnapshotStateMachine(nTxns);
  String server=getUniqueHostPort();
  Properties prop=new Properties();
  prop.setProperty(""String_Node_Str"",""String_Node_Str"");
  prop.setProperty(""String_Node_Str"",server);
  prop.setProperty(""String_Node_Str"",getDirectory().getPath());
  Zab zab=new Zab(st1,prop,server);
  for (int i=0; i < nTxns; ++i) {
    zab.send(ByteBuffer.wrap((""String_Node_Str"" + i).getBytes()));
    Thread.sleep(50);
  }
  st1.txnsCount.await();
  zab.shutdown();
  SnapshotStateMachine stNew=new SnapshotStateMachine(nTxns);
  prop=new Properties();
  prop.setProperty(""String_Node_Str"",getDirectory().getPath());
  zab=new Zab(stNew,prop);
  stNew.waitMemberChanged();
  Assert.assertEquals(st1.state,stNew.state);
  zab.shutdown();
}",0.991869918699187
130733,"/** 
 * Reads a long integer from a file that was created by the  {@link #writeLongToFile(long,File) writeIntToFile} method.
 * @param file file to read the integer value from.
 * @return the long integer value in the file
 * @throws IOException if an I/O error occurs.
 */
public static long readLongFromFile(File file) throws IOException {
  try (FileInputStream fis=new FileInputStream(file);BufferedReader br=new BufferedReader(new InputStreamReader(fis))){
    long value=Long.parseLong(br.readLine());
    return value;
  }
 }","/** 
 * Reads a long integer from a file that was created by the  {@link #writeLongToFile(long,File) writeIntToFile} method.
 * @param file file to read the integer value from.
 * @return the long integer value in the file
 * @throws IOException if an I/O error occurs.
 */
public static long readLongFromFile(File file) throws IOException {
  try (FileInputStream fis=new FileInputStream(file);BufferedReader br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")))){
    long value=Long.parseLong(br.readLine());
    return value;
  }
 }",0.9681528662420382
130734,"/** 
 * Atomically writes a long integer to a file. This method writes a long integer to a file by first writing the long integer to a temporary file and then atomically moving it to the destination, overwriting the destination file if it already exists.
 * @param value a long integer value to write.
 * @param file file to write the value to.
 * @throws IOException if an I/O error occurs.
 */
public static void writeLongToFile(long value,File file) throws IOException {
  File temp=File.createTempFile(file.getName(),null,file.getAbsoluteFile().getParentFile());
  try (FileOutputStream fos=new FileOutputStream(temp);PrintWriter pw=new PrintWriter(fos)){
    pw.print(Long.toString(value));
    fos.getChannel().force(true);
  }
   atomicMove(temp,file);
  LOG.debug(""String_Node_Str"",temp,file);
}","/** 
 * Atomically writes a long integer to a file. This method writes a long integer to a file by first writing the long integer to a temporary file and then atomically moving it to the destination, overwriting the destination file if it already exists.
 * @param value a long integer value to write.
 * @param file file to write the value to.
 * @throws IOException if an I/O error occurs.
 */
public static void writeLongToFile(long value,File file) throws IOException {
  File temp=File.createTempFile(file.getName(),null,file.getAbsoluteFile().getParentFile());
  try (FileOutputStream fos=new FileOutputStream(temp);OutputStreamWriter os=new OutputStreamWriter(fos,Charset.forName(""String_Node_Str""));PrintWriter pw=new PrintWriter(os)){
    pw.print(Long.toString(value));
    fos.getChannel().force(true);
  }
   atomicMove(temp,file);
  LOG.debug(""String_Node_Str"",temp,file);
}",0.9491124260355028
130735,"/** 
 * Starts from joining some one who is in cluster..
 * @param peer the id of server who is in cluster.
 * @throws Exception in case something goes wrong.
 */
@Override public void join(String peer) throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    LOG.debug(""String_Node_Str"",peer);
    Message query=MessageBuilder.buildQueryLeader();
    MessageTuple tuple=null;
    while (true) {
      try {
        sendMessage(peer,query);
        tuple=getExpectedMessage(MessageType.QUERY_LEADER_REPLY,peer);
        break;
      }
 catch (      TimeoutException ex) {
        int retryInterval=1;
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",retryInterval);
        Thread.sleep(retryInterval * 1000);
      }
    }
    this.electedLeader=tuple.getMessage().getReply().getLeader();
    LOG.debug(""String_Node_Str"",this.electedLeader);
    while (true) {
      try {
        joinSynchronization();
        break;
      }
 catch (      TimeoutException|BackToElectionException ex) {
        LOG.debug(""String_Node_Str"",getSyncTimeoutMs(),persistence.getLog().getLatestZxid());
        transport.clear(electedLeader);
        clearMessageQueue();
      }
    }
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeoutMs());
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
    clearMessageQueue();
  }
}","/** 
 * Starts from joining some one who is in cluster..
 * @param peer the id of server who is in cluster.
 * @throws Exception in case something goes wrong.
 */
@Override public void join(String peer) throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    LOG.debug(""String_Node_Str"",peer);
    Message query=MessageBuilder.buildQueryLeader();
    MessageTuple tuple=null;
    while (true) {
      try {
        sendMessage(peer,query);
        tuple=getExpectedMessage(MessageType.QUERY_LEADER_REPLY,peer);
        break;
      }
 catch (      TimeoutException ex) {
        long retryInterval=1;
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",retryInterval);
        Thread.sleep(retryInterval * 1000);
      }
    }
    this.electedLeader=tuple.getMessage().getReply().getLeader();
    LOG.debug(""String_Node_Str"",this.electedLeader);
    while (true) {
      try {
        joinSynchronization();
        break;
      }
 catch (      TimeoutException|BackToElectionException ex) {
        LOG.debug(""String_Node_Str"",getSyncTimeoutMs(),persistence.getLog().getLatestZxid());
        transport.clear(electedLeader);
        clearMessageQueue();
      }
    }
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeoutMs());
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
    clearMessageQueue();
  }
}",0.9983361064891848
130736,"/** 
 * Truncates this transaction log at the given zxid. This method deletes all the transactions with zxids higher than the given zxid.
 * @param zxid the transaction id.
 * @throws IOException in case of IO failure
 */
@Override public void truncate(Zxid zxid) throws IOException {
  int lastKeepIdx=getFileIdx(zxid);
  for (int i=lastKeepIdx + 1; i < logFiles.size(); ++i) {
    File file=logFiles.get(i);
    file.delete();
  }
  if (lastKeepIdx != -1) {
    File file=this.logFiles.get(lastKeepIdx);
    try (SimpleLog log=new SimpleLog(file)){
      log.truncate(zxid);
    }
   }
  logFiles.subList(lastKeepIdx + 1,logFiles.size()).clear();
  this.currentLog=getLastLog();
  this.lastSeenZxid=getLatestZxid();
}","/** 
 * Truncates this transaction log at the given zxid. This method deletes all the transactions with zxids higher than the given zxid.
 * @param zxid the transaction id.
 * @throws IOException in case of IO failure
 */
@Override public void truncate(Zxid zxid) throws IOException {
  int lastKeepIdx=getFileIdx(zxid);
  for (int i=lastKeepIdx + 1; i < logFiles.size(); ++i) {
    File file=logFiles.get(i);
    boolean result=file.delete();
    if (!result) {
      LOG.warn(""String_Node_Str"",file.getName());
    }
  }
  if (lastKeepIdx != -1) {
    File file=this.logFiles.get(lastKeepIdx);
    try (SimpleLog log=new SimpleLog(file)){
      log.truncate(zxid);
    }
   }
  logFiles.subList(lastKeepIdx + 1,logFiles.size()).clear();
  this.currentLog=getLastLog();
  this.lastSeenZxid=getLatestZxid();
}",0.9227748691099475
130737,"/** 
 * Reads a long integer from a file that was created by the  {@link #writeLongToFile(long,File) writeIntToFile} method.
 * @param file file to read the integer value from.
 * @return the long integer value in the file
 * @throws IOException if an I/O error occurs.
 */
public static long readLongFromFile(File file) throws IOException {
  try (FileInputStream fis=new FileInputStream(file);BufferedReader br=new BufferedReader(new InputStreamReader(fis))){
    long value=Long.parseLong(br.readLine());
    return value;
  }
 }","/** 
 * Reads a long integer from a file that was created by the  {@link #writeLongToFile(long,File) writeIntToFile} method.
 * @param file file to read the integer value from.
 * @return the long integer value in the file
 * @throws IOException if an I/O error occurs.
 */
public static long readLongFromFile(File file) throws IOException {
  try (FileInputStream fis=new FileInputStream(file);BufferedReader br=new BufferedReader(new InputStreamReader(fis,Charset.forName(""String_Node_Str"")))){
    long value=Long.parseLong(br.readLine());
    return value;
  }
 }",0.9681528662420382
130738,"/** 
 * Atomically writes a long integer to a file. This method writes a long integer to a file by first writing the long integer to a temporary file and then atomically moving it to the destination, overwriting the destination file if it already exists.
 * @param value a long integer value to write.
 * @param file file to write the value to.
 * @throws IOException if an I/O error occurs.
 */
public static void writeLongToFile(long value,File file) throws IOException {
  File temp=File.createTempFile(file.getName(),null,file.getAbsoluteFile().getParentFile());
  try (FileOutputStream fos=new FileOutputStream(temp);PrintWriter pw=new PrintWriter(fos)){
    pw.print(Long.toString(value));
    fos.getChannel().force(true);
  }
   atomicMove(temp,file);
  LOG.debug(""String_Node_Str"",temp,file);
}","/** 
 * Atomically writes a long integer to a file. This method writes a long integer to a file by first writing the long integer to a temporary file and then atomically moving it to the destination, overwriting the destination file if it already exists.
 * @param value a long integer value to write.
 * @param file file to write the value to.
 * @throws IOException if an I/O error occurs.
 */
public static void writeLongToFile(long value,File file) throws IOException {
  File temp=File.createTempFile(file.getName(),null,file.getAbsoluteFile().getParentFile());
  try (FileOutputStream fos=new FileOutputStream(temp);OutputStreamWriter os=new OutputStreamWriter(fos,Charset.forName(""String_Node_Str""));PrintWriter pw=new PrintWriter(os)){
    pw.print(Long.toString(value));
    fos.getChannel().force(true);
  }
   atomicMove(temp,file);
  LOG.debug(""String_Node_Str"",temp,file);
}",0.9491124260355028
130739,"/** 
 * Starts from joining some one who is in cluster..
 * @param peer the id of server who is in cluster.
 * @throws Exception in case something goes wrong.
 */
@Override public void join(String peer) throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    LOG.debug(""String_Node_Str"",peer);
    Message query=MessageBuilder.buildQueryLeader();
    MessageTuple tuple=null;
    while (true) {
      try {
        sendMessage(peer,query);
        tuple=getExpectedMessage(MessageType.QUERY_LEADER_REPLY,peer);
        break;
      }
 catch (      TimeoutException ex) {
        int retryInterval=1;
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",retryInterval);
        Thread.sleep(retryInterval * 1000);
      }
    }
    this.electedLeader=tuple.getMessage().getReply().getLeader();
    LOG.debug(""String_Node_Str"",this.electedLeader);
    while (true) {
      try {
        joinSynchronization();
        break;
      }
 catch (      TimeoutException|BackToElectionException ex) {
        LOG.debug(""String_Node_Str"",getSyncTimeoutMs(),persistence.getLog().getLatestZxid());
        transport.clear(electedLeader);
        clearMessageQueue();
      }
    }
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeoutMs());
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
    clearMessageQueue();
  }
}","/** 
 * Starts from joining some one who is in cluster..
 * @param peer the id of server who is in cluster.
 * @throws Exception in case something goes wrong.
 */
@Override public void join(String peer) throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    LOG.debug(""String_Node_Str"",peer);
    Message query=MessageBuilder.buildQueryLeader();
    MessageTuple tuple=null;
    while (true) {
      try {
        sendMessage(peer,query);
        tuple=getExpectedMessage(MessageType.QUERY_LEADER_REPLY,peer);
        break;
      }
 catch (      TimeoutException ex) {
        long retryInterval=1;
        LOG.warn(""String_Node_Str"" + ""String_Node_Str"",retryInterval);
        Thread.sleep(retryInterval * 1000);
      }
    }
    this.electedLeader=tuple.getMessage().getReply().getLeader();
    LOG.debug(""String_Node_Str"",this.electedLeader);
    while (true) {
      try {
        joinSynchronization();
        break;
      }
 catch (      TimeoutException|BackToElectionException ex) {
        LOG.debug(""String_Node_Str"",getSyncTimeoutMs(),persistence.getLog().getLatestZxid());
        transport.clear(electedLeader);
        clearMessageQueue();
      }
    }
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeoutMs());
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
    clearMessageQueue();
  }
}",0.9983361064891848
130740,"/** 
 * Truncates this transaction log at the given zxid. This method deletes all the transactions with zxids higher than the given zxid.
 * @param zxid the transaction id.
 * @throws IOException in case of IO failure
 */
@Override public void truncate(Zxid zxid) throws IOException {
  int lastKeepIdx=getFileIdx(zxid);
  for (int i=lastKeepIdx + 1; i < logFiles.size(); ++i) {
    File file=logFiles.get(i);
    file.delete();
  }
  if (lastKeepIdx != -1) {
    File file=this.logFiles.get(lastKeepIdx);
    try (SimpleLog log=new SimpleLog(file)){
      log.truncate(zxid);
    }
   }
  logFiles.subList(lastKeepIdx + 1,logFiles.size()).clear();
  this.currentLog=getLastLog();
  this.lastSeenZxid=getLatestZxid();
}","/** 
 * Truncates this transaction log at the given zxid. This method deletes all the transactions with zxids higher than the given zxid.
 * @param zxid the transaction id.
 * @throws IOException in case of IO failure
 */
@Override public void truncate(Zxid zxid) throws IOException {
  int lastKeepIdx=getFileIdx(zxid);
  for (int i=lastKeepIdx + 1; i < logFiles.size(); ++i) {
    File file=logFiles.get(i);
    boolean result=file.delete();
    if (!result) {
      LOG.warn(""String_Node_Str"",file.getName());
    }
  }
  if (lastKeepIdx != -1) {
    File file=this.logFiles.get(lastKeepIdx);
    try (SimpleLog log=new SimpleLog(file)){
      log.truncate(zxid);
    }
   }
  logFiles.subList(lastKeepIdx + 1,logFiles.size()).clear();
  this.currentLog=getLastLog();
  this.lastSeenZxid=getLatestZxid();
}",0.9227748691099475
130741,"/** 
 * Truncates this transaction log at the given zxid. This method deletes all the transactions with zxids higher than the given zxid.
 * @param zxid the transaction id.
 * @throws IOException in case of IO failure
 */
@Override public void truncate(Zxid zxid) throws IOException {
  try (SimpleLogIterator iter=new SimpleLogIterator(this.logFile)){
    while (iter.hasNext()) {
      Transaction txn=iter.next();
      if (txn.getZxid().compareTo(zxid) == 0) {
        this.lastSeenZxid=txn.getZxid();
        break;
      }
      if (txn.getZxid().compareTo(zxid) > 0) {
        iter.backward();
        break;
      }
      this.lastSeenZxid=txn.getZxid();
    }
    if (iter.hasNext()) {
      try (RandomAccessFile ra=new RandomAccessFile(this.logFile,""String_Node_Str"")){
        ra.setLength(iter.getPosition());
      }
     }
  }
 }","/** 
 * Truncates this transaction log at the given zxid. This method deletes all the transactions with zxids higher than the given zxid.
 * @param zxid the transaction id.
 * @throws IOException in case of IO failure
 */
@Override public void truncate(Zxid zxid) throws IOException {
  try (SimpleLogIterator iter=new SimpleLogIterator(this.logFile)){
    this.lastSeenZxid=Zxid.ZXID_NOT_EXIST;
    while (iter.hasNext()) {
      Transaction txn=iter.next();
      if (txn.getZxid().compareTo(zxid) == 0) {
        this.lastSeenZxid=txn.getZxid();
        break;
      }
      if (txn.getZxid().compareTo(zxid) > 0) {
        iter.backward();
        break;
      }
      this.lastSeenZxid=txn.getZxid();
    }
    if (iter.hasNext()) {
      try (RandomAccessFile ra=new RandomAccessFile(this.logFile,""String_Node_Str"")){
        ra.setLength(iter.getPosition());
      }
     }
  }
 }",0.975158867706528
130742,"/** 
 * Waits for a synchronization message from peer.
 * @param peer the id of the expected peer that synchronization message willcome from.
 * @throws InterruptedException in case of interruption.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 */
protected void waitForSync(String peer) throws InterruptedException, TimeoutException, IOException {
  LOG.debug(""String_Node_Str"",peer);
  Log log=this.persistence.getLog();
  Zxid lastZxid=log.getLatestZxid();
  Zxid lastZxidPeer=null;
  Message msg=null;
  String source=null;
  while (true) {
    MessageTuple tuple=getMessage(getSyncTimeoutMs());
    source=tuple.getServerId();
    msg=tuple.getMessage();
    if ((msg.getType() != MessageType.DIFF && msg.getType() != MessageType.TRUNCATE && msg.getType() != MessageType.SNAPSHOT && msg.getType() != MessageType.PULL_TXN_REQ) || !source.equals(peer)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      continue;
    }
 else {
      break;
    }
  }
  if (msg.getType() == MessageType.PULL_TXN_REQ) {
    LOG.debug(""String_Node_Str"",source);
    ZabMessage.Zxid z=msg.getPullTxnReq().getLastZxid();
    lastZxidPeer=MessageBuilder.fromProtoZxid(z);
    SyncPeerTask syncTask=new SyncPeerTask(source,lastZxidPeer,lastZxid,this.persistence.getLastSeenConfig());
    syncTask.run();
    MessageTuple tuple=getExpectedMessage(MessageType.DIFF,peer,getSyncTimeoutMs());
    msg=tuple.getMessage();
    ZabMessage.Diff diff=msg.getDiff();
    lastZxidPeer=MessageBuilder.fromProtoZxid(diff.getLastZxid());
    if (lastZxidPeer.compareTo(lastZxid) != 0) {
      LOG.error(""String_Node_Str"");
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    waitForSyncEnd(peer);
    return;
  }
  if (msg.getType() == MessageType.DIFF) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    ZabMessage.Diff diff=msg.getDiff();
    lastZxidPeer=MessageBuilder.fromProtoZxid(diff.getLastZxid());
    if (lastZxid.compareTo(lastZxidPeer) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
 else   if (msg.getType() == MessageType.TRUNCATE) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    ZabMessage.Truncate trunc=msg.getTruncate();
    Zxid lastPrefixZxid=MessageBuilder.fromProtoZxid(trunc.getLastPrefixZxid());
    lastZxidPeer=MessageBuilder.fromProtoZxid(trunc.getLastZxid());
    log.truncate(lastPrefixZxid);
    if (lastZxidPeer.compareTo(lastPrefixZxid) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    ZabMessage.Snapshot snap=msg.getSnapshot();
    lastZxidPeer=MessageBuilder.fromProtoZxid(snap.getLastZxid());
    Zxid snapZxid=MessageBuilder.fromProtoZxid(snap.getSnapZxid());
    msg=getExpectedMessage(MessageType.FILE_RECEIVED,peer).getMessage();
    File file=new File(msg.getFileReceived().getFullPath());
    persistence.setSnapshotFile(file,snapZxid);
    log.truncate(Zxid.ZXID_NOT_EXIST);
    if (lastZxidPeer.compareTo(Zxid.ZXID_NOT_EXIST) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
  while (true) {
    MessageTuple tuple=getExpectedMessage(MessageType.PROPOSAL,peer,getSyncTimeoutMs());
    msg=tuple.getMessage();
    source=tuple.getServerId();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
    }
    ZabMessage.Proposal prop=msg.getProposal();
    Zxid zxid=MessageBuilder.fromProtoZxid(prop.getZxid());
    log.append(MessageBuilder.fromProposal(prop));
    if (zxid.compareTo(lastZxidPeer) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
}","/** 
 * Waits for a synchronization message from peer.
 * @param peer the id of the expected peer that synchronization message willcome from.
 * @throws InterruptedException in case of interruption.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 */
protected void waitForSync(String peer) throws InterruptedException, TimeoutException, IOException {
  LOG.debug(""String_Node_Str"",peer);
  Log log=this.persistence.getLog();
  Zxid lastZxid=log.getLatestZxid();
  Zxid lastZxidPeer=null;
  Message msg=null;
  String source=null;
  while (true) {
    MessageTuple tuple=getMessage(getSyncTimeoutMs());
    source=tuple.getServerId();
    msg=tuple.getMessage();
    if ((msg.getType() != MessageType.DIFF && msg.getType() != MessageType.TRUNCATE && msg.getType() != MessageType.SNAPSHOT && msg.getType() != MessageType.PULL_TXN_REQ) || !source.equals(peer)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      continue;
    }
 else {
      break;
    }
  }
  if (msg.getType() == MessageType.PULL_TXN_REQ) {
    LOG.debug(""String_Node_Str"",source);
    ZabMessage.Zxid z=msg.getPullTxnReq().getLastZxid();
    lastZxidPeer=MessageBuilder.fromProtoZxid(z);
    SyncPeerTask syncTask=new SyncPeerTask(source,lastZxidPeer,lastZxid,this.persistence.getLastSeenConfig());
    syncTask.run();
    MessageTuple tuple=getExpectedMessage(MessageType.DIFF,peer,getSyncTimeoutMs());
    msg=tuple.getMessage();
    ZabMessage.Diff diff=msg.getDiff();
    lastZxidPeer=MessageBuilder.fromProtoZxid(diff.getLastZxid());
    if (lastZxidPeer.compareTo(lastZxid) != 0) {
      LOG.error(""String_Node_Str"");
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    waitForSyncEnd(peer);
    return;
  }
  if (msg.getType() == MessageType.DIFF) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    ZabMessage.Diff diff=msg.getDiff();
    lastZxidPeer=MessageBuilder.fromProtoZxid(diff.getLastZxid());
    if (lastZxid.compareTo(lastZxidPeer) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
 else   if (msg.getType() == MessageType.TRUNCATE) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    ZabMessage.Truncate trunc=msg.getTruncate();
    Zxid lastPrefixZxid=MessageBuilder.fromProtoZxid(trunc.getLastPrefixZxid());
    lastZxidPeer=MessageBuilder.fromProtoZxid(trunc.getLastZxid());
    log.truncate(lastPrefixZxid);
    if (lastZxidPeer.compareTo(lastPrefixZxid) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    ZabMessage.Snapshot snap=msg.getSnapshot();
    lastZxidPeer=MessageBuilder.fromProtoZxid(snap.getLastZxid());
    Zxid snapZxid=MessageBuilder.fromProtoZxid(snap.getSnapZxid());
    msg=getExpectedMessage(MessageType.FILE_RECEIVED,peer).getMessage();
    File file=new File(msg.getFileReceived().getFullPath());
    persistence.setSnapshotFile(file,snapZxid);
    log.truncate(Zxid.ZXID_NOT_EXIST);
    if (lastZxidPeer.compareTo(snapZxid) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
  while (true) {
    MessageTuple tuple=getExpectedMessage(MessageType.PROPOSAL,peer,getSyncTimeoutMs());
    msg=tuple.getMessage();
    source=tuple.getServerId();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
    }
    ZabMessage.Proposal prop=msg.getProposal();
    Zxid zxid=MessageBuilder.fromProtoZxid(prop.getZxid());
    log.append(MessageBuilder.fromProposal(prop));
    if (zxid.compareTo(lastZxidPeer) == 0) {
      waitForSyncEnd(peer);
      return;
    }
  }
}",0.9964985086240437
130743,"/** 
 * Waits until receives the CEPOCH message from the quorum.
 * @throws InterruptedException if anything wrong happens.
 * @throws TimeoutException in case of timeout.
 */
void waitProposedEpochFromQuorum() throws InterruptedException, TimeoutException, IOException {
  ClusterConfiguration currentConfig=persistence.getLastSeenConfig();
  long acknowledgedEpoch=persistence.getAckEpoch();
  while (this.quorumSet.size() < getQuorumSize() - 1) {
    MessageTuple tuple=getExpectedMessage(MessageType.PROPOSED_EPOCH,null);
    Message msg=tuple.getMessage();
    String source=tuple.getServerId();
    ZabMessage.ProposedEpoch epoch=msg.getProposedEpoch();
    ClusterConfiguration peerConfig=ClusterConfiguration.fromProto(epoch.getConfig(),source);
    long peerProposedEpoch=epoch.getProposedEpoch();
    long peerAckedEpoch=epoch.getCurrentEpoch();
    int syncTimeoutMs=epoch.getSyncTimeout();
    Zxid peerVersion=peerConfig.getVersion();
    Zxid selfVersion=currentConfig.getVersion();
    if (!peerVersion.equals(selfVersion)) {
      LOG.debug(""String_Node_Str"",peerVersion,selfVersion);
      if (peerAckedEpoch > acknowledgedEpoch || (peerAckedEpoch == acknowledgedEpoch && peerVersion.compareTo(selfVersion) > 0)) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"",source);
        throw new BackToElectionException();
      }
    }
    if (!currentConfig.contains(source)) {
      LOG.debug(""String_Node_Str"",source);
      continue;
    }
    if (this.quorumSet.containsKey(source)) {
      throw new RuntimeException(""String_Node_Str"" + source + ""String_Node_Str"");
    }
    PeerHandler ph=new PeerHandler(source,transport,config.getTimeoutMs() / 3);
    ph.setLastProposedEpoch(peerProposedEpoch);
    this.quorumSet.put(source,ph);
  }
  LOG.debug(""String_Node_Str"");
}","/** 
 * Waits until receives the CEPOCH message from the quorum.
 * @throws InterruptedException if anything wrong happens.
 * @throws TimeoutException in case of timeout.
 */
void waitProposedEpochFromQuorum() throws InterruptedException, TimeoutException, IOException {
  ClusterConfiguration currentConfig=persistence.getLastSeenConfig();
  long acknowledgedEpoch=persistence.getAckEpoch();
  while (this.quorumSet.size() < getQuorumSize() - 1) {
    MessageTuple tuple=getExpectedMessage(MessageType.PROPOSED_EPOCH,null);
    Message msg=tuple.getMessage();
    String source=tuple.getServerId();
    ZabMessage.ProposedEpoch epoch=msg.getProposedEpoch();
    ClusterConfiguration peerConfig=ClusterConfiguration.fromProto(epoch.getConfig(),source);
    long peerProposedEpoch=epoch.getProposedEpoch();
    long peerAckedEpoch=epoch.getCurrentEpoch();
    int syncTimeoutMs=epoch.getSyncTimeout();
    Zxid peerVersion=peerConfig.getVersion();
    Zxid selfVersion=currentConfig.getVersion();
    if (!peerVersion.equals(selfVersion)) {
      LOG.debug(""String_Node_Str"",peerVersion,selfVersion);
      if (peerAckedEpoch > acknowledgedEpoch || (peerAckedEpoch == acknowledgedEpoch && peerVersion.compareTo(selfVersion) > 0)) {
        LOG.debug(""String_Node_Str"" + ""String_Node_Str"",source);
        throw new BackToElectionException();
      }
    }
    if (!currentConfig.contains(source)) {
      LOG.debug(""String_Node_Str"",source);
      continue;
    }
    if (this.quorumSet.containsKey(source)) {
      throw new RuntimeException(""String_Node_Str"" + source + ""String_Node_Str"");
    }
    PeerHandler ph=new PeerHandler(source,transport,config.getTimeoutMs() / 3);
    ph.setLastProposedEpoch(peerProposedEpoch);
    ph.setSyncTimeoutMs(syncTimeoutMs);
    this.quorumSet.put(source,ph);
  }
  LOG.debug(""String_Node_Str"");
}",0.988998899889989
130744,"void sendFile(File file) throws Exception {
  long length=file.length();
  LOG.debug(""String_Node_Str"",file,length);
  Message handshake=MessageBuilder.buildFileHeader(length);
  byte[] bytes=handshake.toByteArray();
  channel.writeAndFlush(Unpooled.wrappedBuffer(bytes)).sync();
  ChannelHandler prepender=channel.pipeline().get(""String_Node_Str"");
  channel.pipeline().remove(prepender);
  ChannelHandler cwh=new ChunkedWriteHandler();
  channel.pipeline().addLast(cwh);
  RandomAccessFile raf=new RandomAccessFile(file,""String_Node_Str"");
  if (channel.pipeline().get(SslHandler.class) != null) {
    channel.writeAndFlush(new ChunkedFile(raf,0,length,8912));
  }
 else {
    FileRegion region=new DefaultFileRegion(raf.getChannel(),0,length);
    channel.writeAndFlush(region);
  }
  channel.pipeline().remove(cwh);
  channel.pipeline().addLast(prepender);
}","void sendFile(File file) throws Exception {
  long length=file.length();
  LOG.debug(""String_Node_Str"",file,length);
  Message handshake=MessageBuilder.buildFileHeader(length);
  byte[] bytes=handshake.toByteArray();
  channel.writeAndFlush(Unpooled.wrappedBuffer(bytes)).sync();
  ChannelHandler prepender=channel.pipeline().get(""String_Node_Str"");
  channel.pipeline().remove(prepender);
  ChannelHandler cwh=new ChunkedWriteHandler();
  channel.pipeline().addLast(cwh);
  RandomAccessFile raf=new RandomAccessFile(file,""String_Node_Str"");
  if (channel.pipeline().get(SslHandler.class) != null) {
    channel.writeAndFlush(new ChunkedFile(raf,0,length,8912));
  }
 else {
    FileRegion region=new DefaultFileRegion(raf.getChannel(),0,length);
    channel.writeAndFlush(region);
  }
  channel.pipeline().remove(cwh);
  channel.pipeline().addLast(""String_Node_Str"",prepender);
}",0.989667049368542
130745,"@Override protected void changePhase(Phase phase) throws IOException {
  this.currentPhase=phase;
  if (phase == Phase.DISCOVERING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerDiscovering(this.electedLeader);
    }
    if (failCallback != null) {
      failCallback.followerDiscovering();
    }
  }
 else   if (phase == Phase.SYNCHRONIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerSynchronizing(persistence.getProposedEpoch());
    }
    if (failCallback != null) {
      failCallback.followerSynchronizing();
    }
  }
 else   if (phase == Phase.BROADCASTING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.isBroadcasting=true;
    if (stateChangeCallback != null) {
      stateChangeCallback.followerBroadcasting(persistence.getAckEpoch(),getAllTxns(),persistence.getLastSeenConfig());
    }
    if (failCallback != null) {
      failCallback.followerBroadcasting();
    }
  }
 else   if (phase == Phase.FINALIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.stateMachine.recovering();
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
    this.semPendingReqs.release(ZabConfig.MAX_PENDING_REQS);
  }
}","@Override protected void changePhase(Phase phase) throws IOException {
  this.currentPhase=phase;
  if (phase == Phase.DISCOVERING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerDiscovering(this.electedLeader);
    }
    if (failCallback != null) {
      failCallback.followerDiscovering();
    }
  }
 else   if (phase == Phase.SYNCHRONIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerSynchronizing(persistence.getProposedEpoch());
    }
    if (failCallback != null) {
      failCallback.followerSynchronizing();
    }
  }
 else   if (phase == Phase.BROADCASTING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerBroadcasting(persistence.getAckEpoch(),getAllTxns(),persistence.getLastSeenConfig());
    }
    if (failCallback != null) {
      failCallback.followerBroadcasting();
    }
  }
 else   if (phase == Phase.FINALIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.stateMachine.recovering();
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
    this.semPendingReqs.release(ZabConfig.MAX_PENDING_REQS);
  }
}",0.9887133182844244
130746,"/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.PROPOSED_EPOCH) {
      LOG.debug(""String_Node_Str"");
      this.transport.clear(tuple.getServerId());
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.electedLeader != null && peerId.equals(this.electedLeader)) {
        LOG.debug(""String_Node_Str"",this.electedLeader);
        throw new BackToElectionException();
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}","/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.PROPOSED_EPOCH) {
      LOG.debug(""String_Node_Str"");
      this.transport.clear(tuple.getServerId());
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.electedLeader != null && peerId.equals(this.electedLeader)) {
        LOG.debug(""String_Node_Str"",this.electedLeader);
        throw new BackToElectionException();
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (this.currentPhase != Phase.BROADCASTING && tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}",0.5588660688458201
130747,"public void follow(String leader) throws Exception {
  this.electedLeader=leader;
  try {
    changePhase(Phase.DISCOVERING);
    sendProposedEpoch();
    waitForNewEpoch();
    LOG.debug(""String_Node_Str"");
    changePhase(Phase.SYNCHRONIZING);
    long st=System.nanoTime();
    waitForSync(this.electedLeader);
    waitForNewLeaderMessage();
    waitForCommitMessage();
    long syncTime=System.nanoTime() - st;
    adjustSyncTimeout((int)(syncTime / 1000000));
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    LOG.info(""String_Node_Str"");
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeoutMs());
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  Zab.SimulatedException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.currentPhase == Phase.SYNCHRONIZING) {
      incSyncTimeout();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getSyncTimeoutMs());
    }
    changePhase(Phase.FINALIZING);
  }
}","public void follow(String leader) throws Exception {
  this.electedLeader=leader;
  try {
    changePhase(Phase.DISCOVERING);
    sendProposedEpoch();
    waitForNewEpoch();
    LOG.debug(""String_Node_Str"");
    changePhase(Phase.SYNCHRONIZING);
    long st=System.nanoTime();
    waitForSync(this.electedLeader);
    waitForNewLeaderMessage();
    waitForCommitMessage();
    long syncTime=System.nanoTime() - st;
    adjustSyncTimeout((int)(syncTime / 1000000));
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeoutMs());
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  Zab.SimulatedException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.currentPhase == Phase.SYNCHRONIZING) {
      incSyncTimeout();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getSyncTimeoutMs());
    }
    changePhase(Phase.FINALIZING);
  }
}",0.987746008169328
130748,"/** 
 * Entering broadcasting phase.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException  in case of timeout.
 * @throws IOException in case of IOException.
 * @throws ExecutionException in case of exception from executors.
 */
void accepting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,null,clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  long lastHeartbeatTime=System.nanoTime();
  long ackEpoch=persistence.getAckEpoch();
  stateMachine.following(electedLeader,new HashSet<String>(clusterConfig.getPeers()));
  try {
    while (true) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (source.equals(this.electedLeader)) {
        lastHeartbeatTime=System.nanoTime();
      }
 else {
        long timeDiff=(System.nanoTime() - lastHeartbeatTime) / 1000000;
        if ((int)timeDiff >= this.config.getTimeoutMs()) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader);
          throw new TimeoutException(""String_Node_Str"");
        }
        if (msg.getType() == MessageType.QUERY_LEADER) {
          LOG.debug(""String_Node_Str"",source);
          Message reply=MessageBuilder.buildQueryReply(this.electedLeader);
          sendMessage(source,reply);
        }
 else {
          LOG.debug(""String_Node_Str"",source);
        }
        continue;
      }
      if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      if (msg.getType() == MessageType.PROPOSAL) {
        Transaction txn=MessageBuilder.fromProposal(msg.getProposal());
        Zxid zxid=txn.getZxid();
        if (zxid.getEpoch() == ackEpoch) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",zxid.getEpoch(),ackEpoch);
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (msg.getType() == MessageType.COMMIT) {
        commitProcessor.processRequest(tuple);
      }
 else       if (msg.getType() == MessageType.HEARTBEAT) {
        LOG.trace(""String_Node_Str"",source);
        Message heartbeatReply=MessageBuilder.buildHeartbeat();
        sendMessage(source,heartbeatReply);
      }
 else       if (msg.getType() == MessageType.DELIVERED) {
        onDelivered(msg,snapProcessor);
      }
 else       if (msg.getType() == MessageType.FLUSH) {
        onFlush(tuple,commitProcessor);
      }
 else {
        if (LOG.isWarnEnabled()) {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
      }
    }
  }
  finally {
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}","/** 
 * Entering broadcasting phase.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException  in case of timeout.
 * @throws IOException in case of IOException.
 * @throws ExecutionException in case of exception from executors.
 */
void accepting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,null,clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  long lastHeartbeatTime=System.nanoTime();
  long ackEpoch=persistence.getAckEpoch();
  stateMachine.following(electedLeader,new HashSet<String>(clusterConfig.getPeers()));
  try {
    while (true) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (source.equals(this.electedLeader)) {
        lastHeartbeatTime=System.nanoTime();
      }
 else {
        long timeDiff=(System.nanoTime() - lastHeartbeatTime) / 1000000;
        if ((int)timeDiff >= this.config.getTimeoutMs()) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader);
          throw new TimeoutException(""String_Node_Str"");
        }
        if (msg.getType() == MessageType.QUERY_LEADER) {
          LOG.debug(""String_Node_Str"",source);
          Message reply=MessageBuilder.buildQueryReply(this.electedLeader);
          sendMessage(source,reply);
        }
 else         if (msg.getType() == MessageType.ELECTION_INFO) {
          this.election.reply(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",source);
        }
        continue;
      }
      if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
      }
      if (msg.getType() == MessageType.PROPOSAL) {
        Transaction txn=MessageBuilder.fromProposal(msg.getProposal());
        Zxid zxid=txn.getZxid();
        if (zxid.getEpoch() == ackEpoch) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else {
          LOG.debug(""String_Node_Str"",zxid.getEpoch(),ackEpoch);
          throw new RuntimeException(""String_Node_Str"");
        }
      }
 else       if (msg.getType() == MessageType.COMMIT) {
        commitProcessor.processRequest(tuple);
      }
 else       if (msg.getType() == MessageType.HEARTBEAT) {
        LOG.trace(""String_Node_Str"",source);
        Message heartbeatReply=MessageBuilder.buildHeartbeat();
        sendMessage(source,heartbeatReply);
      }
 else       if (msg.getType() == MessageType.DELIVERED) {
        onDelivered(msg,snapProcessor);
      }
 else       if (msg.getType() == MessageType.FLUSH) {
        onFlush(tuple,commitProcessor);
      }
 else {
        if (LOG.isWarnEnabled()) {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
      }
    }
  }
  finally {
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}",0.9835342546309908
130749,"@Override protected void changePhase(Phase phase) throws IOException, InterruptedException, ExecutionException {
  this.currentPhase=phase;
  if (phase == Phase.DISCOVERING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderDiscovering(this.serverId);
    }
    if (failCallback != null) {
      failCallback.leaderDiscovering();
    }
  }
 else   if (phase == Phase.SYNCHRONIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderSynchronizing(persistence.getProposedEpoch());
    }
    if (failCallback != null) {
      failCallback.leaderSynchronizing();
    }
  }
 else   if (phase == Phase.BROADCASTING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.isBroadcasting=true;
    if (failCallback != null) {
      failCallback.leaderBroadcasting();
    }
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderBroadcasting(persistence.getAckEpoch(),getAllTxns(),persistence.getLastSeenConfig());
    }
  }
 else   if (phase == Phase.FINALIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.stateMachine.recovering();
    for (    PeerHandler ph : this.quorumSet.values()) {
      ph.shutdown();
      this.quorumSet.remove(ph.getServerId());
    }
    this.semPendingReqs.release(ZabConfig.MAX_PENDING_REQS);
  }
}","@Override protected void changePhase(Phase phase) throws IOException, InterruptedException, ExecutionException {
  this.currentPhase=phase;
  if (phase == Phase.DISCOVERING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderDiscovering(this.serverId);
    }
    if (failCallback != null) {
      failCallback.leaderDiscovering();
    }
  }
 else   if (phase == Phase.SYNCHRONIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderSynchronizing(persistence.getProposedEpoch());
    }
    if (failCallback != null) {
      failCallback.leaderSynchronizing();
    }
  }
 else   if (phase == Phase.BROADCASTING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    if (failCallback != null) {
      failCallback.leaderBroadcasting();
    }
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderBroadcasting(persistence.getAckEpoch(),getAllTxns(),persistence.getLastSeenConfig());
    }
  }
 else   if (phase == Phase.FINALIZING) {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.stateMachine.recovering();
    for (    PeerHandler ph : this.quorumSet.values()) {
      ph.shutdown();
      this.quorumSet.remove(ph.getServerId());
    }
    this.semPendingReqs.release(ZabConfig.MAX_PENDING_REQS);
  }
}",0.9892318736539842
130750,"/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.quorumSet.containsKey(peerId)) {
        if (!this.isBroadcasting) {
          LOG.debug(""String_Node_Str"",peerId);
          throw new BackToElectionException();
        }
 else {
          LOG.debug(""String_Node_Str"",peerId);
          return tuple;
        }
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}","/** 
 * Gets a message from the queue.
 * @param timeoutMs how to wait before raising a TimeoutException.
 * @return a message tuple contains the message and its source.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException it's interrupted.
 */
@Override protected MessageTuple getMessage(int timeoutMs) throws TimeoutException, InterruptedException {
  while (true) {
    MessageTuple tuple=messageQueue.poll(timeoutMs,TimeUnit.MILLISECONDS);
    if (tuple == null) {
      throw new TimeoutException(""String_Node_Str"");
    }
 else     if (tuple == MessageTuple.GO_BACK) {
      throw new BackToElectionException();
    }
 else     if (tuple.getMessage().getType() == MessageType.DISCONNECTED) {
      Message msg=tuple.getMessage();
      String peerId=msg.getDisconnected().getServerId();
      if (LOG.isDebugEnabled()) {
        LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
      }
      if (this.quorumSet.containsKey(peerId)) {
        if (this.currentPhase != Phase.BROADCASTING) {
          LOG.debug(""String_Node_Str"",peerId);
          throw new BackToElectionException();
        }
 else {
          LOG.debug(""String_Node_Str"",peerId);
          return tuple;
        }
      }
 else {
        LOG.debug(""String_Node_Str"",peerId);
        this.transport.clear(peerId);
      }
    }
 else     if (this.currentPhase != Phase.BROADCASTING && tuple.getMessage().getType() == MessageType.ELECTION_INFO) {
      this.election.reply(tuple);
    }
 else     if (tuple.getMessage().getType() == MessageType.SHUT_DOWN) {
      LOG.debug(""String_Node_Str"");
      throw new LeftCluster(""String_Node_Str"");
    }
 else {
      return tuple;
    }
  }
}",0.578789694427801
130751,"public void lead() throws Exception {
  try {
    changePhase(Phase.DISCOVERING);
    waitProposedEpochFromQuorum();
    proposeNewEpoch();
    waitEpochAckFromQuorum();
    LOG.debug(""String_Node_Str"",persistence.getProposedEpoch());
    String peerId=selectSyncHistoryOwner();
    LOG.debug(""String_Node_Str"",peerId);
    LOG.debug(""String_Node_Str"");
    changePhase(Phase.SYNCHRONIZING);
    if (!peerId.equals(this.serverId)) {
      synchronizeFromFollower(peerId);
    }
    persistence.setAckEpoch(persistence.getProposedEpoch());
    long st=System.nanoTime();
    beginSynchronizing();
    waitNewLeaderAckFromQuorum();
    long syncTime=System.nanoTime() - st;
    adjustSyncTimeout((int)(syncTime / 1000000));
    Message commit=MessageBuilder.buildCommit(persistence.getLog().getLatestZxid());
    broadcast(this.quorumSet.keySet().iterator(),commit);
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    for (    PeerHandler ph : this.quorumSet.values()) {
      ph.startBroadcastingTask();
      ph.updateHeartbeatTime();
    }
    LOG.info(""String_Node_Str"");
    broadcasting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.config.getTimeoutMs());
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  Zab.SimulatedException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.currentPhase == Phase.SYNCHRONIZING) {
      incSyncTimeout();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getSyncTimeoutMs());
    }
    changePhase(Phase.FINALIZING);
  }
}","public void lead() throws Exception {
  try {
    changePhase(Phase.DISCOVERING);
    waitProposedEpochFromQuorum();
    proposeNewEpoch();
    waitEpochAckFromQuorum();
    LOG.debug(""String_Node_Str"",persistence.getProposedEpoch());
    String peerId=selectSyncHistoryOwner();
    LOG.debug(""String_Node_Str"",peerId);
    LOG.debug(""String_Node_Str"");
    changePhase(Phase.SYNCHRONIZING);
    if (!peerId.equals(this.serverId)) {
      synchronizeFromFollower(peerId);
    }
    persistence.setAckEpoch(persistence.getProposedEpoch());
    long st=System.nanoTime();
    beginSynchronizing();
    waitNewLeaderAckFromQuorum();
    long syncTime=System.nanoTime() - st;
    adjustSyncTimeout((int)(syncTime / 1000000));
    Message commit=MessageBuilder.buildCommit(persistence.getLog().getLatestZxid());
    broadcast(this.quorumSet.keySet().iterator(),commit);
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    for (    PeerHandler ph : this.quorumSet.values()) {
      ph.startBroadcastingTask();
      ph.updateHeartbeatTime();
    }
    broadcasting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.config.getTimeoutMs());
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  Zab.SimulatedException e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.currentPhase == Phase.SYNCHRONIZING) {
      incSyncTimeout();
      LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getSyncTimeoutMs());
    }
    changePhase(Phase.FINALIZING);
  }
}",0.9911266469481044
130752,"/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 * @throws ExecutionException in case of exception from executors.
 */
void broadcasting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  this.establishedEpoch=persistence.getAckEpoch();
  PeerHandler lh=new PeerHandler(serverId,transport,config.getTimeoutMs() / 3);
  lh.setLastAckedZxid(lastZxid);
  lh.startBroadcastingTask();
  quorumSet.put(this.serverId,lh);
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  PreProcessor preProcessor=new PreProcessor(stateMachine,quorumSet,clusterConfig.clone());
  AckProcessor ackProcessor=new AckProcessor(quorumSet,clusterConfig.clone(),lastZxid);
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,new HashSet<String>(quorumSet.keySet()),clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  stateMachine.leading(new HashSet<String>(quorumSet.keySet()),new HashSet<String>(clusterConfig.getPeers()));
  this.lastCommittedZxid=lastZxid;
  this.lastProposedZxid=lastZxid;
  this.lastAckedZxid=lastZxid;
  try {
    while (this.quorumSet.size() >= clusterConfig.getQuorumSize()) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        ClusterConfiguration cnf=persistence.getLastSeenConfig();
        if (!cnf.contains(source)) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",source);
          continue;
        }
        int syncTimeoutMs=msg.getProposedEpoch().getSyncTimeout();
        if (syncTimeoutMs > getSyncTimeoutMs()) {
          setSyncTimeoutMs(syncTimeoutMs);
        }
        Message newEpoch=MessageBuilder.buildNewEpochMessage(establishedEpoch,getSyncTimeoutMs());
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        tuple.setZxid(lastProposedZxid);
        onAckEpoch(tuple,preProcessor,ackProcessor,commitProcessor);
      }
 else       if (msg.getType() == MessageType.QUERY_LEADER) {
        LOG.debug(""String_Node_Str"",source);
        Message reply=MessageBuilder.buildQueryReply(this.serverId);
        sendMessage(source,reply);
      }
 else       if (msg.getType() == MessageType.SYNC_HISTORY) {
        onSyncHistory(tuple);
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
          continue;
        }
        if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        if (msg.getType() == MessageType.ACK) {
          onAck(tuple,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          Zxid proposedZxid=getNextProposedZxid();
          quorumSet.get(source).setLastProposedZxid(proposedZxid);
          tuple.setZxid(proposedZxid);
          preProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH_REQ) {
          onFlushReq(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH) {
          onFlush(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else         if (msg.getType() == MessageType.PROPOSAL) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.COMMIT) {
          onCommit(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.DISCONNECTED) {
          onDisconnected(tuple,preProcessor,ackProcessor,commitProcessor);
        }
 else         if (msg.getType() == MessageType.REMOVE) {
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onRemove(tuple,preProcessor,ackProcessor,clusterConfig);
        }
 else         if (msg.getType() == MessageType.DELIVERED) {
          onDelivered(msg,snapProcessor);
        }
 else         if (msg.getType() == MessageType.JOIN) {
          LOG.debug(""String_Node_Str"",source);
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onJoin(tuple,preProcessor,ackProcessor,commitProcessor,clusterConfig);
        }
 else {
          if (LOG.isWarnEnabled()) {
            LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
        }
        PeerHandler ph=quorumSet.get(source);
        if (ph != null) {
          ph.updateHeartbeatTime();
        }
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    ackProcessor.shutdown();
    preProcessor.shutdown();
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}","/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 * @throws ExecutionException in case of exception from executors.
 */
void broadcasting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  this.establishedEpoch=persistence.getAckEpoch();
  PeerHandler lh=new PeerHandler(serverId,transport,config.getTimeoutMs() / 3);
  lh.setLastAckedZxid(lastZxid);
  lh.startBroadcastingTask();
  quorumSet.put(this.serverId,lh);
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  PreProcessor preProcessor=new PreProcessor(stateMachine,quorumSet,clusterConfig.clone());
  AckProcessor ackProcessor=new AckProcessor(quorumSet,clusterConfig.clone(),lastZxid);
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,new HashSet<String>(quorumSet.keySet()),clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  stateMachine.leading(new HashSet<String>(quorumSet.keySet()),new HashSet<String>(clusterConfig.getPeers()));
  this.lastCommittedZxid=lastZxid;
  this.lastProposedZxid=lastZxid;
  this.lastAckedZxid=lastZxid;
  try {
    while (this.quorumSet.size() >= clusterConfig.getQuorumSize()) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        ClusterConfiguration cnf=persistence.getLastSeenConfig();
        if (!cnf.contains(source)) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",source);
          continue;
        }
        int syncTimeoutMs=msg.getProposedEpoch().getSyncTimeout();
        if (syncTimeoutMs > getSyncTimeoutMs()) {
          setSyncTimeoutMs(syncTimeoutMs);
        }
        Message newEpoch=MessageBuilder.buildNewEpochMessage(establishedEpoch,getSyncTimeoutMs());
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        tuple.setZxid(lastProposedZxid);
        onAckEpoch(tuple,preProcessor,ackProcessor,commitProcessor);
      }
 else       if (msg.getType() == MessageType.QUERY_LEADER) {
        LOG.debug(""String_Node_Str"",source);
        Message reply=MessageBuilder.buildQueryReply(this.serverId);
        sendMessage(source,reply);
      }
 else       if (msg.getType() == MessageType.SYNC_HISTORY) {
        onSyncHistory(tuple);
      }
 else       if (msg.getType() == MessageType.ELECTION_INFO) {
        this.election.reply(tuple);
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
          continue;
        }
        if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        if (msg.getType() == MessageType.ACK) {
          onAck(tuple,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          Zxid proposedZxid=getNextProposedZxid();
          quorumSet.get(source).setLastProposedZxid(proposedZxid);
          tuple.setZxid(proposedZxid);
          preProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH_REQ) {
          onFlushReq(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH) {
          onFlush(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else         if (msg.getType() == MessageType.PROPOSAL) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.COMMIT) {
          onCommit(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.DISCONNECTED) {
          onDisconnected(tuple,preProcessor,ackProcessor,commitProcessor);
        }
 else         if (msg.getType() == MessageType.REMOVE) {
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onRemove(tuple,preProcessor,ackProcessor,clusterConfig);
        }
 else         if (msg.getType() == MessageType.DELIVERED) {
          onDelivered(msg,snapProcessor);
        }
 else         if (msg.getType() == MessageType.JOIN) {
          LOG.debug(""String_Node_Str"",source);
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onJoin(tuple,preProcessor,ackProcessor,commitProcessor,clusterConfig);
        }
 else {
          if (LOG.isWarnEnabled()) {
            LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
        }
        PeerHandler ph=quorumSet.get(source);
        if (ph != null) {
          ph.updateHeartbeatTime();
        }
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    ackProcessor.shutdown();
    preProcessor.shutdown();
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}",0.9911193029490616
130753,"@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    while (true) {
      MessageTuple request=ackQueue.take();
      if (request == MessageTuple.REQUEST_OF_DEATH) {
        break;
      }
      Message msg=request.getMessage();
      String source=request.getServerId();
      if (msg.getType() == MessageType.ACK) {
        ZabMessage.Ack ack=request.getMessage().getAck();
        Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
        LOG.debug(""String_Node_Str"",zxid,source);
        this.quorumSet.get(source).setLastAckedZxid(zxid);
        Zxid zxidCanCommit=null;
        if (this.pendingConfig != null) {
          zxidCanCommit=getCommittedZxid(this.pendingConfig);
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          if (zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            LOG.debug(""String_Node_Str"" + ""String_Node_Str"",pendingConfig.getVersion());
            this.clusterConfig=this.pendingConfig;
            this.pendingConfig=null;
          }
 else {
            zxidCanCommit=null;
          }
        }
        if (zxidCanCommit == null) {
          zxidCanCommit=getCommittedZxid(this.clusterConfig);
          if (pendingConfig != null && zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            Zxid version=pendingConfig.getVersion();
            zxidCanCommit=new Zxid(version.getEpoch(),version.getXid() - 1);
          }
          LOG.debug(""String_Node_Str"",zxidCanCommit);
        }
        LOG.debug(""String_Node_Str"",zxidCanCommit);
        if (zxidCanCommit.compareTo(this.lastCommittedZxid) > 0) {
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          Message commit=MessageBuilder.buildCommit(zxidCanCommit);
          for (          PeerHandler ph : quorumSet.values()) {
            ph.queueMessage(commit);
          }
          this.lastCommittedZxid=zxidCanCommit;
        }
      }
 else       if (msg.getType() == MessageType.JOIN || msg.getType() == MessageType.ACK_EPOCH) {
        PeerHandler ph=quorumSetOriginal.get(source);
        if (ph != null) {
          this.quorumSet.put(source,ph);
        }
        if (msg.getType() == MessageType.JOIN) {
          LOG.debug(""String_Node_Str"",request.getZxid(),source);
          if (pendingConfig != null) {
            LOG.error(""String_Node_Str"");
            throw new RuntimeException(""String_Node_Str"");
          }
          this.pendingConfig=this.clusterConfig.clone();
          this.pendingConfig.addPeer(source);
          this.pendingConfig.setVersion(request.getZxid());
        }
      }
 else       if (msg.getType() == MessageType.DISCONNECTED) {
        String peerId=msg.getDisconnected().getServerId();
        LOG.debug(""String_Node_Str"",peerId);
        this.quorumSet.remove(peerId);
      }
 else       if (msg.getType() == MessageType.REMOVE) {
        String serverId=msg.getRemove().getServerId();
        LOG.debug(""String_Node_Str"",request.getZxid(),serverId);
        if (pendingConfig != null) {
          LOG.error(""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
        this.pendingConfig=this.clusterConfig.clone();
        this.pendingConfig.removePeer(serverId);
        this.pendingConfig.setVersion(request.getZxid());
      }
 else {
        LOG.warn(""String_Node_Str"");
      }
    }
  }
 catch (  RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  LOG.debug(""String_Node_Str"");
  return null;
}","@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    while (true) {
      MessageTuple request=ackQueue.take();
      if (request == MessageTuple.REQUEST_OF_DEATH) {
        break;
      }
      Message msg=request.getMessage();
      String source=request.getServerId();
      if (msg.getType() == MessageType.ACK) {
        ZabMessage.Ack ack=request.getMessage().getAck();
        Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
        LOG.debug(""String_Node_Str"",zxid,source);
        this.quorumSet.get(source).setLastAckedZxid(zxid);
        Zxid zxidCanCommit=null;
        if (this.pendingConfig != null) {
          zxidCanCommit=getCommittedZxid(this.pendingConfig);
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          if (zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            LOG.debug(""String_Node_Str"" + ""String_Node_Str"",pendingConfig.getVersion());
            this.clusterConfig=this.pendingConfig;
            this.pendingConfig=null;
          }
 else {
            zxidCanCommit=null;
          }
        }
        if (zxidCanCommit == null) {
          zxidCanCommit=getCommittedZxid(this.clusterConfig);
          if (pendingConfig != null && zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            Zxid version=pendingConfig.getVersion();
            if (version.getXid() == 0) {
              zxidCanCommit=lastCommittedZxid;
            }
 else {
              zxidCanCommit=new Zxid(version.getEpoch(),version.getXid() - 1);
            }
          }
          LOG.debug(""String_Node_Str"",zxidCanCommit);
        }
        LOG.debug(""String_Node_Str"",zxidCanCommit);
        if (zxidCanCommit.compareTo(this.lastCommittedZxid) > 0) {
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          Message commit=MessageBuilder.buildCommit(zxidCanCommit);
          for (          PeerHandler ph : quorumSet.values()) {
            ph.queueMessage(commit);
          }
          this.lastCommittedZxid=zxidCanCommit;
        }
      }
 else       if (msg.getType() == MessageType.JOIN || msg.getType() == MessageType.ACK_EPOCH) {
        PeerHandler ph=quorumSetOriginal.get(source);
        if (ph != null) {
          this.quorumSet.put(source,ph);
        }
        if (msg.getType() == MessageType.JOIN) {
          LOG.debug(""String_Node_Str"",request.getZxid(),source);
          if (pendingConfig != null) {
            LOG.error(""String_Node_Str"");
            throw new RuntimeException(""String_Node_Str"");
          }
          this.pendingConfig=this.clusterConfig.clone();
          this.pendingConfig.addPeer(source);
          this.pendingConfig.setVersion(request.getZxid());
        }
      }
 else       if (msg.getType() == MessageType.DISCONNECTED) {
        String peerId=msg.getDisconnected().getServerId();
        LOG.debug(""String_Node_Str"",peerId);
        this.quorumSet.remove(peerId);
      }
 else       if (msg.getType() == MessageType.REMOVE) {
        String serverId=msg.getRemove().getServerId();
        LOG.debug(""String_Node_Str"",request.getZxid(),serverId);
        if (pendingConfig != null) {
          LOG.error(""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
        this.pendingConfig=this.clusterConfig.clone();
        this.pendingConfig.removePeer(serverId);
        this.pendingConfig.setVersion(request.getZxid());
      }
 else {
        LOG.warn(""String_Node_Str"");
      }
    }
  }
 catch (  RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  LOG.debug(""String_Node_Str"");
  return null;
}",0.9823033707865167
130754,"@Test(timeout=3000) public void testRemove() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  ackProcessor.processRequest(createRemove(server2,new Zxid(0,2)));
  ackProcessor.processRequest(createAck(server1,new Zxid(0,3)));
  receiver1.latch.await();
  receiver2.latch.await();
  Assert.assertEquals(new Zxid(0,3),receiver1.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,3),receiver2.committedZxids.get(0));
  Assert.assertEquals(1,receiver1.committedZxids.size());
  Assert.assertEquals(1,receiver2.committedZxids.size());
}","@Test(timeout=3000) public void testRemove() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  ackProcessor.processRequest(createRemove(server2,new Zxid(0,2)));
  ackProcessor.processRequest(createAck(server1,new Zxid(0,3)));
  receiver1.latch.await();
  receiver2.latch.await();
  Assert.assertEquals(new Zxid(0,3),receiver1.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,3),receiver2.committedZxids.get(0));
  Assert.assertEquals(1,receiver1.committedZxids.size());
  Assert.assertEquals(1,receiver2.committedZxids.size());
  ackProcessor.shutdown();
}",0.9905693328676214
130755,"@Test(timeout=3000) public void testAllAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,z1));
  ackProcessor.processRequest(createAck(server2,z1));
  receiver1.latch.await();
  receiver2.latch.await();
}","@Test(timeout=3000) public void testAllAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,z1));
  ackProcessor.processRequest(createAck(server2,z1));
  receiver1.latch.await();
  receiver2.latch.await();
  ackProcessor.shutdown();
}",0.9885155253083794
130756,"@Test(timeout=3000) public void testDifferentAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  String server3=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  TestReceiver receiver3=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  NettyTransport transport3=new NettyTransport(server3,receiver3,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  PeerHandler ph3=new PeerHandler(server3,transport3,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  ph3.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  peers.add(server3);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  quorumSet.put(server3,ph3);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,new Zxid(0,2)));
  ackProcessor.processRequest(createAck(server2,new Zxid(0,1)));
  ackProcessor.processRequest(createAck(server3,new Zxid(0,0)));
  receiver1.latch.await();
  receiver2.latch.await();
  receiver3.latch.await();
  Assert.assertEquals(new Zxid(0,1),receiver1.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,1),receiver2.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,1),receiver3.committedZxids.get(0));
}","@Test(timeout=3000) public void testDifferentAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  String server3=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  TestReceiver receiver3=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  NettyTransport transport3=new NettyTransport(server3,receiver3,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  PeerHandler ph3=new PeerHandler(server3,transport3,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  ph3.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  peers.add(server3);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  quorumSet.put(server3,ph3);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,new Zxid(0,2)));
  ackProcessor.processRequest(createAck(server2,new Zxid(0,1)));
  ackProcessor.processRequest(createAck(server3,new Zxid(0,0)));
  receiver1.latch.await();
  receiver2.latch.await();
  receiver3.latch.await();
  Assert.assertEquals(new Zxid(0,1),receiver1.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,1),receiver2.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,1),receiver3.committedZxids.get(0));
  ackProcessor.shutdown();
}",0.992564031947122
130757,"@Test(timeout=3000) public void testRemoveItself() throws Exception {
  String server1=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  ph1.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createRemove(server1,z1));
  ackProcessor.processRequest(createAck(server1,z1));
  receiver1.latch.await();
}","@Test(timeout=3000) public void testRemoveItself() throws Exception {
  String server1=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  ph1.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createRemove(server1,z1));
  ackProcessor.processRequest(createAck(server1,z1));
  receiver1.latch.await();
  ackProcessor.shutdown();
}",0.984070796460177
130758,"@Test(timeout=3000) public void testQuorumAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  String server3=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  TestReceiver receiver3=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  NettyTransport transport3=new NettyTransport(server3,receiver3,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  PeerHandler ph3=new PeerHandler(server3,transport3,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  ph3.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  peers.add(server3);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  quorumSet.put(server3,ph3);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,z1));
  ackProcessor.processRequest(createAck(server2,z1));
  receiver1.latch.await();
  receiver2.latch.await();
  receiver3.latch.await();
}","@Test(timeout=3000) public void testQuorumAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  String server3=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  TestReceiver receiver3=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  NettyTransport transport3=new NettyTransport(server3,receiver3,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  PeerHandler ph3=new PeerHandler(server3,transport3,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  ph3.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  peers.add(server3);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  quorumSet.put(server3,ph3);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,z1));
  ackProcessor.processRequest(createAck(server2,z1));
  receiver1.latch.await();
  receiver2.latch.await();
  receiver3.latch.await();
  ackProcessor.shutdown();
}",0.9910920488287692
130759,"@Test(timeout=3000) public void testMinorityAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  String server3=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  TestReceiver receiver3=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  NettyTransport transport3=new NettyTransport(server3,receiver3,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  PeerHandler ph3=new PeerHandler(server3,transport3,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  ph3.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  peers.add(server3);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  quorumSet.put(server3,ph3);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,z1));
  Assert.assertFalse(receiver1.latch.await(500,TimeUnit.MILLISECONDS));
  Assert.assertFalse(receiver2.latch.await(10,TimeUnit.MILLISECONDS));
  Assert.assertFalse(receiver3.latch.await(10,TimeUnit.MILLISECONDS));
}","@Test(timeout=3000) public void testMinorityAck() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  String server3=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  TestReceiver receiver3=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  NettyTransport transport3=new NettyTransport(server3,receiver3,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  PeerHandler ph3=new PeerHandler(server3,transport3,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  ph3.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  peers.add(server2);
  peers.add(server3);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  quorumSet.put(server2,ph2);
  quorumSet.put(server3,ph3);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  Zxid z1=new Zxid(0,0);
  ackProcessor.processRequest(createAck(server1,z1));
  Assert.assertFalse(receiver1.latch.await(500,TimeUnit.MILLISECONDS));
  Assert.assertFalse(receiver2.latch.await(10,TimeUnit.MILLISECONDS));
  Assert.assertFalse(receiver3.latch.await(10,TimeUnit.MILLISECONDS));
  ackProcessor.shutdown();
}",0.9915440025054808
130760,"@Test(timeout=3000) public void testJoin() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  quorumSet.put(server2,ph2);
  ackProcessor.processRequest(createJoin(server2,new Zxid(0,2)));
  ackProcessor.processRequest(createAck(server1,new Zxid(0,10)));
  receiver1.latch.await();
  receiver2.latch.await();
  Assert.assertEquals(new Zxid(0,1),receiver1.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,1),receiver2.committedZxids.get(0));
  Assert.assertEquals(1,receiver1.committedZxids.size());
  Assert.assertEquals(1,receiver2.committedZxids.size());
}","@Test(timeout=3000) public void testJoin() throws Exception {
  String server1=getUniqueHostPort();
  String server2=getUniqueHostPort();
  TestReceiver receiver1=new TestReceiver(1);
  TestReceiver receiver2=new TestReceiver(1);
  NettyTransport transport1=new NettyTransport(server1,receiver1,getDirectory());
  NettyTransport transport2=new NettyTransport(server2,receiver2,getDirectory());
  PeerHandler ph1=new PeerHandler(server1,transport1,10000);
  PeerHandler ph2=new PeerHandler(server2,transport2,10000);
  ph1.startBroadcastingTask();
  ph2.startBroadcastingTask();
  List<String> peers=new ArrayList<String>();
  peers.add(server1);
  HashMap<String,PeerHandler> quorumSet=new HashMap<String,PeerHandler>();
  quorumSet.put(server1,ph1);
  ClusterConfiguration cnf=new ClusterConfiguration(Zxid.ZXID_NOT_EXIST,peers,server1);
  AckProcessor ackProcessor=new AckProcessor(quorumSet,cnf,Zxid.ZXID_NOT_EXIST);
  quorumSet.put(server2,ph2);
  ackProcessor.processRequest(createJoin(server2,new Zxid(0,2)));
  ackProcessor.processRequest(createAck(server1,new Zxid(0,10)));
  receiver1.latch.await();
  receiver2.latch.await();
  Assert.assertEquals(new Zxid(0,1),receiver1.committedZxids.get(0));
  Assert.assertEquals(new Zxid(0,1),receiver2.committedZxids.get(0));
  Assert.assertEquals(1,receiver1.committedZxids.size());
  Assert.assertEquals(1,receiver2.committedZxids.size());
  ackProcessor.shutdown();
}",0.9904017063633132
130761,"/** 
 * Starts from joining some one who is in cluster..
 * @param peer the id of server who is in cluster.
 * @throws Exception in case something goes wrong.
 */
@Override public void join(String peer) throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    LOG.debug(""String_Node_Str"",peer);
    Message query=MessageBuilder.buildQueryLeader();
    sendMessage(peer,query);
    MessageTuple tuple=getExpectedMessage(MessageType.QUERY_LEADER_REPLY,peer);
    this.electedLeader=tuple.getMessage().getReply().getLeader();
    LOG.debug(""String_Node_Str"",this.electedLeader);
    Message join=MessageBuilder.buildJoin();
    sendMessage(this.electedLeader,join);
    changePhase(Phase.SYNCHRONIZING);
    waitForSync(this.electedLeader);
    waitForNewLeaderMessage();
    waitForCommitMessage();
    persistence.setProposedEpoch(persistence.getAckEpoch());
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeout());
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
  }
}","/** 
 * Starts from joining some one who is in cluster..
 * @param peer the id of server who is in cluster.
 * @throws Exception in case something goes wrong.
 */
@Override public void join(String peer) throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    LOG.debug(""String_Node_Str"",peer);
    Message query=MessageBuilder.buildQueryLeader();
    sendMessage(peer,query);
    MessageTuple tuple=getExpectedMessage(MessageType.QUERY_LEADER_REPLY,peer);
    this.electedLeader=tuple.getMessage().getReply().getLeader();
    LOG.debug(""String_Node_Str"",this.electedLeader);
    Message sync=MessageBuilder.buildSyncHistory();
    sendMessage(this.electedLeader,sync);
    waitForSync(this.electedLeader);
    Zxid lastZxid=persistence.getLog().getLatestZxid();
    LOG.debug(""String_Node_Str"",lastZxid);
    Message join=MessageBuilder.buildJoin(lastZxid);
    sendMessage(this.electedLeader,join);
    changePhase(Phase.SYNCHRONIZING);
    waitForSync(this.electedLeader);
    waitForNewLeaderMessage();
    waitForCommitMessage();
    persistence.setProposedEpoch(persistence.getAckEpoch());
    restoreFromSnapshot();
    deliverUndeliveredTxns();
    changePhase(Phase.BROADCASTING);
    accepting();
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    throw e;
  }
catch (  TimeoutException e) {
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",this.electedLeader,this.config.getTimeout());
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  BackToElectionException e) {
    LOG.debug(""String_Node_Str"");
    if (persistence.getLastSeenConfig() == null) {
      throw new JoinFailure(""String_Node_Str"");
    }
  }
catch (  LeftCluster e) {
    LOG.debug(""String_Node_Str"",e.getMessage());
    throw e;
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
 finally {
    if (this.electedLeader != null) {
      this.transport.clear(this.electedLeader);
    }
  }
}",0.934609250398724
130762,"/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 * @throws ExecutionException in case of exception from executors.
 */
void broadcasting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  this.establishedEpoch=persistence.getAckEpoch();
  PeerHandler lh=new PeerHandler(serverId,transport,config.getTimeout() / 3);
  lh.setLastAckedZxid(lastZxid);
  lh.startBroadcastingTask();
  quorumSet.put(this.serverId,lh);
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  PreProcessor preProcessor=new PreProcessor(stateMachine,quorumSet,clusterConfig.clone());
  AckProcessor ackProcessor=new AckProcessor(quorumSet,clusterConfig.clone(),lastZxid);
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,new HashSet<String>(quorumSet.keySet()),clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  stateMachine.leading(new HashSet<String>(quorumSet.keySet()),new HashSet<String>(clusterConfig.getPeers()));
  SendRequestTask sendTask=new SendRequestTask(this.serverId);
  this.lastCommittedZxid=lastZxid;
  this.lastProposedZxid=lastZxid;
  this.lastAckedZxid=lastZxid;
  try {
    while (this.quorumSet.size() >= clusterConfig.getQuorumSize()) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        ClusterConfiguration cnf=persistence.getLastSeenConfig();
        if (!cnf.contains(source)) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",source);
          continue;
        }
        Message newEpoch=MessageBuilder.buildNewEpochMessage(this.establishedEpoch);
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        tuple.setZxid(lastProposedZxid);
        onAckEpoch(tuple,preProcessor,ackProcessor,commitProcessor);
      }
 else       if (msg.getType() == MessageType.QUERY_LEADER) {
        LOG.debug(""String_Node_Str"",source);
        Message reply=MessageBuilder.buildQueryReply(this.serverId);
        sendMessage(source,reply);
      }
 else       if (msg.getType() == MessageType.JOIN) {
        LOG.debug(""String_Node_Str"",source);
        if (pendingCopZxid != null) {
          LOG.warn(""String_Node_Str"");
          continue;
        }
        pendingCopZxid=getNextProposedZxid();
        tuple.setZxid(pendingCopZxid);
        onJoin(tuple,preProcessor,ackProcessor,commitProcessor,clusterConfig);
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
          continue;
        }
        if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        if (msg.getType() == MessageType.ACK) {
          onAck(tuple,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          Zxid proposedZxid=getNextProposedZxid();
          quorumSet.get(source).setLastProposedZxid(proposedZxid);
          tuple.setZxid(proposedZxid);
          preProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH_REQ) {
          onFlushReq(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH) {
          onFlush(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else         if (msg.getType() == MessageType.PROPOSAL) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.COMMIT) {
          onCommit(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.DISCONNECTED) {
          onDisconnected(tuple,preProcessor,ackProcessor,commitProcessor);
        }
 else         if (msg.getType() == MessageType.REMOVE) {
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onRemove(tuple,preProcessor,ackProcessor,clusterConfig);
        }
 else         if (msg.getType() == MessageType.SHUT_DOWN) {
          throw new LeftCluster(""String_Node_Str"");
        }
 else         if (msg.getType() == MessageType.DELIVERED) {
          onDelivered(msg,snapProcessor);
        }
 else {
          if (LOG.isWarnEnabled()) {
            LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
        }
        PeerHandler ph=quorumSet.get(source);
        if (ph != null) {
          ph.updateHeartbeatTime();
        }
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    sendTask.shutdown();
    ackProcessor.shutdown();
    preProcessor.shutdown();
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}","/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 * @throws ExecutionException in case of exception from executors.
 */
void broadcasting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  this.establishedEpoch=persistence.getAckEpoch();
  PeerHandler lh=new PeerHandler(serverId,transport,config.getTimeout() / 3);
  lh.setLastAckedZxid(lastZxid);
  lh.startBroadcastingTask();
  quorumSet.put(this.serverId,lh);
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  PreProcessor preProcessor=new PreProcessor(stateMachine,quorumSet,clusterConfig.clone());
  AckProcessor ackProcessor=new AckProcessor(quorumSet,clusterConfig.clone(),lastZxid);
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport,new HashSet<String>(quorumSet.keySet()),clusterConfig,electedLeader,semPendingReqs);
  SnapshotProcessor snapProcessor=new SnapshotProcessor(stateMachine,persistence);
  stateMachine.leading(new HashSet<String>(quorumSet.keySet()),new HashSet<String>(clusterConfig.getPeers()));
  SendRequestTask sendTask=new SendRequestTask(this.serverId);
  this.lastCommittedZxid=lastZxid;
  this.lastProposedZxid=lastZxid;
  this.lastAckedZxid=lastZxid;
  try {
    while (this.quorumSet.size() >= clusterConfig.getQuorumSize()) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        ClusterConfiguration cnf=persistence.getLastSeenConfig();
        if (!cnf.contains(source)) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",source);
          continue;
        }
        Message newEpoch=MessageBuilder.buildNewEpochMessage(this.establishedEpoch);
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        tuple.setZxid(lastProposedZxid);
        onAckEpoch(tuple,preProcessor,ackProcessor,commitProcessor);
      }
 else       if (msg.getType() == MessageType.QUERY_LEADER) {
        LOG.debug(""String_Node_Str"",source);
        Message reply=MessageBuilder.buildQueryReply(this.serverId);
        sendMessage(source,reply);
      }
 else       if (msg.getType() == MessageType.SYNC_HISTORY) {
        onSyncHistory(tuple);
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
          continue;
        }
        if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        if (msg.getType() == MessageType.ACK) {
          onAck(tuple,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          Zxid proposedZxid=getNextProposedZxid();
          quorumSet.get(source).setLastProposedZxid(proposedZxid);
          tuple.setZxid(proposedZxid);
          preProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH_REQ) {
          onFlushReq(tuple);
        }
 else         if (msg.getType() == MessageType.FLUSH) {
          onFlush(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else         if (msg.getType() == MessageType.PROPOSAL) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.COMMIT) {
          onCommit(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.DISCONNECTED) {
          onDisconnected(tuple,preProcessor,ackProcessor,commitProcessor);
        }
 else         if (msg.getType() == MessageType.REMOVE) {
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onRemove(tuple,preProcessor,ackProcessor,clusterConfig);
        }
 else         if (msg.getType() == MessageType.SHUT_DOWN) {
          throw new LeftCluster(""String_Node_Str"");
        }
 else         if (msg.getType() == MessageType.DELIVERED) {
          onDelivered(msg,snapProcessor);
        }
 else         if (msg.getType() == MessageType.JOIN) {
          LOG.debug(""String_Node_Str"",source);
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onJoin(tuple,preProcessor,ackProcessor,commitProcessor,clusterConfig);
        }
 else {
          if (LOG.isWarnEnabled()) {
            LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
        }
        PeerHandler ph=quorumSet.get(source);
        if (ph != null) {
          ph.updateHeartbeatTime();
        }
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    sendTask.shutdown();
    ackProcessor.shutdown();
    preProcessor.shutdown();
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    snapProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}",0.8976953822603962
130763,"void onJoin(MessageTuple tuple,PreProcessor preProcessor,AckProcessor ackProcessor,CommitProcessor commitProcessor,ClusterConfiguration clusterConfig) throws IOException {
  String source=tuple.getServerId();
  PeerHandler ph=new PeerHandler(source,transport,config.getTimeout() / 3);
  ph.setLastZxid(Zxid.ZXID_NOT_EXIST);
  ph.setLastSyncedZxid(tuple.getZxid());
  clusterConfig.addPeer(source);
  quorumSet.put(source,ph);
  pendingPeers.put(source,ph);
  preProcessor.processRequest(tuple);
  ackProcessor.processRequest(tuple);
  commitProcessor.processRequest(tuple);
}","void onJoin(MessageTuple tuple,PreProcessor preProcessor,AckProcessor ackProcessor,CommitProcessor commitProcessor,ClusterConfiguration clusterConfig) throws IOException {
  Zxid lastZxid=MessageBuilder.fromProtoZxid(tuple.getMessage().getJoin().getLastZxid());
  String source=tuple.getServerId();
  PeerHandler ph=new PeerHandler(source,transport,config.getTimeout() / 3);
  ph.setLastZxid(lastZxid);
  ph.setLastSyncedZxid(tuple.getZxid());
  clusterConfig.addPeer(source);
  quorumSet.put(source,ph);
  pendingPeers.put(source,ph);
  preProcessor.processRequest(tuple);
  ackProcessor.processRequest(tuple);
  commitProcessor.processRequest(tuple);
}",0.9048006509357202
130764,"/** 
 * Creates a JOIN message.
 * @return a protobuf message.
 */
public static Message buildJoin(){
  return Message.newBuilder().setType(MessageType.JOIN).build();
}","/** 
 * Creates a JOIN message.
 * @return a protobuf message.
 */
public static Message buildJoin(Zxid lastZxid){
  ZabMessage.Zxid zxid=toProtoZxid(lastZxid);
  ZabMessage.Join join=ZabMessage.Join.newBuilder().setLastZxid(zxid).build();
  return Message.newBuilder().setType(MessageType.JOIN).setJoin(join).build();
}",0.6885245901639344
130765,"@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    BlockingQueue<MessageTuple> requestQueue=participantState.getRequestQueue();
    while (true) {
      MessageTuple tuple=requestQueue.take();
      if (tuple == MessageTuple.REQUEST_OF_DEATH) {
        return null;
      }
      semPendingReqs.acquire();
      sendMessage(this.leader,tuple.getMessage());
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    throw e;
  }
}","@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    BlockingQueue<MessageTuple> requestQueue=participantState.getRequestQueue();
    while (!stop) {
      MessageTuple tuple=requestQueue.poll(500,TimeUnit.MILLISECONDS);
      if (tuple == null) {
        continue;
      }
      semPendingReqs.acquire();
      sendMessage(this.leader,tuple.getMessage());
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"");
    throw e;
  }
  return null;
}",0.8870803662258393
130766,"public void shutdown() throws ExecutionException, InterruptedException {
  participantState.getRequestQueue().add(MessageTuple.REQUEST_OF_DEATH);
  this.ft.get();
  LOG.debug(""String_Node_Str"");
}","public void shutdown() throws ExecutionException, InterruptedException {
  this.stop=true;
  semPendingReqs.release();
  this.ft.get();
  LOG.debug(""String_Node_Str"");
}",0.7671232876712328
130767,"@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    while (true) {
      MessageTuple request=ackQueue.take();
      if (request == MessageTuple.REQUEST_OF_DEATH) {
        break;
      }
      Message msg=request.getMessage();
      String source=request.getServerId();
      if (msg.getType() == MessageType.ACK) {
        ZabMessage.Ack ack=request.getMessage().getAck();
        Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
        LOG.debug(""String_Node_Str"",zxid,source);
        this.quorumSet.get(source).setLastAckedZxid(zxid);
        Zxid zxidCanCommit=null;
        if (this.pendingConfig != null) {
          zxidCanCommit=getCommittedZxid(this.pendingConfig);
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          if (zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            this.clusterConfig=this.pendingConfig;
            this.pendingConfig=null;
          }
 else {
            zxidCanCommit=null;
          }
        }
        if (zxidCanCommit == null) {
          zxidCanCommit=getCommittedZxid(this.clusterConfig);
          if (pendingConfig != null && zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            Zxid version=pendingConfig.getVersion();
            zxidCanCommit=new Zxid(version.getEpoch(),version.getXid() - 1);
          }
        }
        LOG.debug(""String_Node_Str"",zxidCanCommit);
        if (zxidCanCommit.compareTo(this.lastCommittedZxid) > 0) {
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          Message commit=MessageBuilder.buildCommit(zxidCanCommit);
          for (          PeerHandler ph : quorumSet.values()) {
            ph.queueMessage(commit);
          }
          this.lastCommittedZxid=zxidCanCommit;
        }
      }
 else       if (msg.getType() == MessageType.JOIN || msg.getType() == MessageType.ACK_EPOCH) {
        PeerHandler ph=quorumSetOriginal.get(source);
        if (ph != null) {
          this.quorumSet.put(source,ph);
        }
        if (msg.getType() == MessageType.JOIN) {
          LOG.debug(""String_Node_Str"",request.getZxid(),source);
          if (pendingConfig != null) {
            LOG.error(""String_Node_Str"");
            throw new RuntimeException(""String_Node_Str"");
          }
          this.pendingConfig=this.clusterConfig.clone();
          this.pendingConfig.addPeer(source);
          this.pendingConfig.setVersion(request.getZxid());
        }
      }
 else       if (msg.getType() == MessageType.DISCONNECTED) {
        String peerId=msg.getDisconnected().getServerId();
        LOG.debug(""String_Node_Str"",peerId);
        this.quorumSet.remove(peerId);
      }
 else       if (msg.getType() == MessageType.REMOVE) {
        String serverId=msg.getRemove().getServerId();
        LOG.debug(""String_Node_Str"",request.getZxid(),serverId);
        if (pendingConfig != null) {
          LOG.error(""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
        this.pendingConfig=this.clusterConfig.clone();
        this.pendingConfig.removePeer(serverId);
        this.pendingConfig.setVersion(request.getZxid());
      }
 else {
        LOG.warn(""String_Node_Str"");
      }
    }
  }
 catch (  RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  LOG.debug(""String_Node_Str"");
  return null;
}","@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    while (true) {
      MessageTuple request=ackQueue.take();
      if (request == MessageTuple.REQUEST_OF_DEATH) {
        break;
      }
      Message msg=request.getMessage();
      String source=request.getServerId();
      if (msg.getType() == MessageType.ACK) {
        ZabMessage.Ack ack=request.getMessage().getAck();
        Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
        LOG.debug(""String_Node_Str"",zxid,source);
        this.quorumSet.get(source).setLastAckedZxid(zxid);
        Zxid zxidCanCommit=null;
        if (this.pendingConfig != null) {
          zxidCanCommit=getCommittedZxid(this.pendingConfig);
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          if (zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            LOG.debug(""String_Node_Str"" + ""String_Node_Str"",pendingConfig.getVersion());
            this.clusterConfig=this.pendingConfig;
            this.pendingConfig=null;
          }
 else {
            zxidCanCommit=null;
          }
        }
        if (zxidCanCommit == null) {
          zxidCanCommit=getCommittedZxid(this.clusterConfig);
          if (pendingConfig != null && zxidCanCommit.compareTo(pendingConfig.getVersion()) >= 0) {
            Zxid version=pendingConfig.getVersion();
            zxidCanCommit=new Zxid(version.getEpoch(),version.getXid() - 1);
          }
          LOG.debug(""String_Node_Str"",zxidCanCommit);
        }
        LOG.debug(""String_Node_Str"",zxidCanCommit);
        if (zxidCanCommit.compareTo(this.lastCommittedZxid) > 0) {
          LOG.debug(""String_Node_Str"",zxidCanCommit);
          Message commit=MessageBuilder.buildCommit(zxidCanCommit);
          for (          PeerHandler ph : quorumSet.values()) {
            ph.queueMessage(commit);
          }
          this.lastCommittedZxid=zxidCanCommit;
        }
      }
 else       if (msg.getType() == MessageType.JOIN || msg.getType() == MessageType.ACK_EPOCH) {
        PeerHandler ph=quorumSetOriginal.get(source);
        if (ph != null) {
          this.quorumSet.put(source,ph);
        }
        if (msg.getType() == MessageType.JOIN) {
          LOG.debug(""String_Node_Str"",request.getZxid(),source);
          if (pendingConfig != null) {
            LOG.error(""String_Node_Str"");
            throw new RuntimeException(""String_Node_Str"");
          }
          this.pendingConfig=this.clusterConfig.clone();
          this.pendingConfig.addPeer(source);
          this.pendingConfig.setVersion(request.getZxid());
        }
      }
 else       if (msg.getType() == MessageType.DISCONNECTED) {
        String peerId=msg.getDisconnected().getServerId();
        LOG.debug(""String_Node_Str"",peerId);
        this.quorumSet.remove(peerId);
      }
 else       if (msg.getType() == MessageType.REMOVE) {
        String serverId=msg.getRemove().getServerId();
        LOG.debug(""String_Node_Str"",request.getZxid(),serverId);
        if (pendingConfig != null) {
          LOG.error(""String_Node_Str"");
          throw new RuntimeException(""String_Node_Str"");
        }
        this.pendingConfig=this.clusterConfig.clone();
        this.pendingConfig.removePeer(serverId);
        this.pendingConfig.setVersion(request.getZxid());
      }
 else {
        LOG.warn(""String_Node_Str"");
      }
    }
  }
 catch (  RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  LOG.debug(""String_Node_Str"");
  return null;
}",0.9791271347248576
130768,"private Zxid getCommittedZxid(ClusterConfiguration cnf){
  ArrayList<Zxid> zxids=new ArrayList<Zxid>();
  for (  PeerHandler ph : quorumSet.values()) {
    LOG.debug(""String_Node_Str"",ph.getServerId(),ph.getLastAckedZxid());
    Zxid ackZxid=ph.getLastAckedZxid();
    if (ackZxid != null && cnf.contains(ph.getServerId())) {
      zxids.add(ph.getLastAckedZxid());
    }
  }
  int quorumSize=cnf.getQuorumSize();
  if (zxids.size() < quorumSize) {
    return this.lastCommittedZxid;
  }
  Collections.sort(zxids);
  return zxids.get(zxids.size() - quorumSize);
}","private Zxid getCommittedZxid(ClusterConfiguration cnf){
  ArrayList<Zxid> zxids=new ArrayList<Zxid>();
  LOG.debug(""String_Node_Str"",cnf.getVersion());
  for (  PeerHandler ph : quorumSet.values()) {
    Zxid ackZxid=ph.getLastAckedZxid();
    if (cnf.contains(ph.getServerId())) {
      if (ackZxid != null) {
        zxids.add(ackZxid);
      }
      LOG.debug(""String_Node_Str"",ph.getServerId(),ackZxid);
    }
  }
  int quorumSize=cnf.getQuorumSize();
  if (quorumSize == 0) {
    return cnf.getVersion();
  }
  if (zxids.size() < quorumSize) {
    return Zxid.ZXID_NOT_EXIST;
  }
  Collections.sort(zxids);
  return zxids.get(zxids.size() - quorumSize);
}",0.3398692810457516
130769,"/** 
 * Gets the minimal quorum size.
 */
public int getQuorumSize(){
  return this.getPeers().size() / 2 + 1;
}","/** 
 * Gets the minimal quorum size.
 */
public int getQuorumSize(){
  int clusterSize=this.getPeers().size();
  if (clusterSize == 0) {
    return 0;
  }
 else {
    return clusterSize / 2 + 1;
  }
}",0.670926517571885
130770,"void onCommit(MessageTuple tuple,CommitProcessor commitProcessor){
  Message msg=tuple.getMessage();
  if (!pendingPeers.isEmpty()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    Zxid zxidCommit=MessageBuilder.fromProtoZxid(msg.getCommit().getZxid());
    Iterator<Map.Entry<String,PeerHandler>> iter=pendingPeers.entrySet().iterator();
    while (iter.hasNext()) {
      PeerHandler ph=iter.next().getValue();
      Zxid ackZxid=ph.getLastAckedZxid();
      if (ackZxid != null && zxidCommit.compareTo(ackZxid) >= 0) {
        LOG.debug(""String_Node_Str"");
        Message commit=MessageBuilder.buildCommit(ackZxid);
        sendMessage(ph.getServerId(),commit);
        ph.startBroadcastingTask();
        iter.remove();
      }
    }
  }
  commitProcessor.processRequest(tuple);
}","void onCommit(MessageTuple tuple,CommitProcessor commitProcessor){
  Message msg=tuple.getMessage();
  this.lastCommittedZxid=MessageBuilder.fromProtoZxid(msg.getCommit().getZxid());
  if (pendingCopZxid != null && lastCommittedZxid.compareTo(this.pendingCopZxid) >= 0) {
    LOG.debug(""String_Node_Str"",pendingCopZxid);
    pendingCopZxid=null;
    if (stateChangeCallback != null) {
      stateChangeCallback.commitCop();
    }
  }
  if (!pendingPeers.isEmpty()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg));
    }
    Zxid zxidCommit=this.lastCommittedZxid;
    Iterator<Map.Entry<String,PeerHandler>> iter=pendingPeers.entrySet().iterator();
    while (iter.hasNext()) {
      PeerHandler ph=iter.next().getValue();
      Zxid ackZxid=ph.getLastAckedZxid();
      if (ackZxid != null && zxidCommit.compareTo(ackZxid) >= 0) {
        LOG.debug(""String_Node_Str"",ackZxid);
        Message commit=MessageBuilder.buildCommit(ackZxid);
        sendMessage(ph.getServerId(),commit);
        ph.startBroadcastingTask();
        iter.remove();
      }
    }
  }
  commitProcessor.processRequest(tuple);
}",0.7517447657028913
130771,"/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 * @throws ExecutionException in case of exception from executors.
 */
void broadcasting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  this.establishedEpoch=persistence.getAckEpoch();
  PeerHandler lh=new PeerHandler(serverId,transport,config.getTimeout() / 3);
  lh.setLastAckedZxid(lastZxid);
  lh.startBroadcastingTask();
  this.quorumSet.put(this.serverId,lh);
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  PreProcessor preProcessor=new PreProcessor(stateMachine,quorumSet,clusterConfig.clone());
  AckProcessor ackProcessor=new AckProcessor(quorumSet,clusterConfig.clone(),lastZxid);
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport);
  stateMachine.clusterChange(new HashSet<String>(clusterConfig.getPeers()));
  notifyQuorumSetChange();
  SendRequestTask sendTask=new SendRequestTask(this.serverId);
  Zxid pendingCopZxid=null;
  this.lastCommittedZxid=lastZxid;
  this.lastProposedZxid=lastZxid;
  this.lastAckedZxid=lastZxid;
  try {
    while (this.quorumSet.size() >= 0) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        ClusterConfiguration cnf=persistence.getLastSeenConfig();
        if (!cnf.contains(source)) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",source);
          continue;
        }
        Message newEpoch=MessageBuilder.buildNewEpochMessage(this.establishedEpoch);
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        tuple.setZxid(lastProposedZxid);
        onAckEpoch(tuple,preProcessor,ackProcessor);
      }
 else       if (msg.getType() == MessageType.QUERY_LEADER) {
        LOG.debug(""String_Node_Str"",source);
        Message reply=MessageBuilder.buildQueryReply(this.serverId);
        sendMessage(source,reply);
      }
 else       if (msg.getType() == MessageType.JOIN) {
        LOG.debug(""String_Node_Str"",source);
        if (pendingCopZxid != null) {
          LOG.warn(""String_Node_Str"");
          continue;
        }
        pendingCopZxid=getNextProposedZxid();
        tuple.setZxid(pendingCopZxid);
        onJoin(tuple,preProcessor,ackProcessor);
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
          continue;
        }
        if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        if (msg.getType() == MessageType.ACK) {
          onAck(tuple,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          tuple.setZxid(getNextProposedZxid());
          preProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else         if (msg.getType() == MessageType.PROPOSAL) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.COMMIT) {
          lastCommittedZxid=MessageBuilder.fromProtoZxid(msg.getCommit().getZxid());
          if (pendingCopZxid != null && lastCommittedZxid.compareTo(pendingCopZxid) >= 0) {
            LOG.debug(""String_Node_Str"",pendingCopZxid);
            pendingCopZxid=null;
            if (stateChangeCallback != null) {
              stateChangeCallback.commitCop();
            }
          }
          onCommit(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.DISCONNECTED) {
          onDisconnected(tuple,preProcessor,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REMOVE) {
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onRemove(tuple,preProcessor,ackProcessor);
        }
 else         if (msg.getType() == MessageType.SHUT_DOWN) {
          throw new LeftCluster(""String_Node_Str"");
        }
 else {
          if (LOG.isWarnEnabled()) {
            LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
        }
        PeerHandler ph=quorumSet.get(source);
        if (ph != null) {
          ph.updateHeartbeatTime();
        }
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    sendTask.shutdown();
    ackProcessor.shutdown();
    preProcessor.shutdown();
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}","/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 * @throws ExecutionException in case of exception from executors.
 */
void broadcasting() throws TimeoutException, InterruptedException, IOException, ExecutionException {
  Zxid lastZxid=persistence.getLog().getLatestZxid();
  this.establishedEpoch=persistence.getAckEpoch();
  PeerHandler lh=new PeerHandler(serverId,transport,config.getTimeout() / 3);
  lh.setLastAckedZxid(lastZxid);
  lh.startBroadcastingTask();
  this.quorumSet.put(this.serverId,lh);
  ClusterConfiguration clusterConfig=persistence.getLastSeenConfig();
  PreProcessor preProcessor=new PreProcessor(stateMachine,quorumSet,clusterConfig.clone());
  AckProcessor ackProcessor=new AckProcessor(quorumSet,clusterConfig.clone(),lastZxid);
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(persistence,transport,SYNC_MAX_BATCH_SIZE);
  CommitProcessor commitProcessor=new CommitProcessor(stateMachine,lastDeliveredZxid,serverId,transport);
  stateMachine.clusterChange(new HashSet<String>(clusterConfig.getPeers()));
  notifyQuorumSetChange();
  SendRequestTask sendTask=new SendRequestTask(this.serverId);
  this.lastCommittedZxid=lastZxid;
  this.lastProposedZxid=lastZxid;
  this.lastAckedZxid=lastZxid;
  try {
    while (this.quorumSet.size() >= getQuorumSize()) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getServerId();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        ClusterConfiguration cnf=persistence.getLastSeenConfig();
        if (!cnf.contains(source)) {
          LOG.warn(""String_Node_Str"" + ""String_Node_Str"",source);
          continue;
        }
        Message newEpoch=MessageBuilder.buildNewEpochMessage(this.establishedEpoch);
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",source);
        tuple.setZxid(lastProposedZxid);
        onAckEpoch(tuple,preProcessor,ackProcessor);
      }
 else       if (msg.getType() == MessageType.QUERY_LEADER) {
        LOG.debug(""String_Node_Str"",source);
        Message reply=MessageBuilder.buildQueryReply(this.serverId);
        sendMessage(source,reply);
      }
 else       if (msg.getType() == MessageType.JOIN) {
        LOG.debug(""String_Node_Str"",source);
        if (pendingCopZxid != null) {
          LOG.warn(""String_Node_Str"");
          continue;
        }
        pendingCopZxid=getNextProposedZxid();
        tuple.setZxid(pendingCopZxid);
        onJoin(tuple,preProcessor,ackProcessor);
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
          continue;
        }
        if (msg.getType() != MessageType.HEARTBEAT && LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        if (msg.getType() == MessageType.ACK) {
          onAck(tuple,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          tuple.setZxid(getNextProposedZxid());
          preProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else         if (msg.getType() == MessageType.PROPOSAL) {
          syncProcessor.processRequest(tuple);
          commitProcessor.processRequest(tuple);
        }
 else         if (msg.getType() == MessageType.COMMIT) {
          onCommit(tuple,commitProcessor);
        }
 else         if (msg.getType() == MessageType.DISCONNECTED) {
          onDisconnected(tuple,preProcessor,ackProcessor);
        }
 else         if (msg.getType() == MessageType.REMOVE) {
          if (pendingCopZxid != null) {
            LOG.warn(""String_Node_Str"");
            continue;
          }
          pendingCopZxid=getNextProposedZxid();
          tuple.setZxid(pendingCopZxid);
          onRemove(tuple,preProcessor,ackProcessor);
        }
 else         if (msg.getType() == MessageType.SHUT_DOWN) {
          throw new LeftCluster(""String_Node_Str"");
        }
 else {
          if (LOG.isWarnEnabled()) {
            LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          }
        }
        PeerHandler ph=quorumSet.get(source);
        if (ph != null) {
          ph.updateHeartbeatTime();
        }
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    sendTask.shutdown();
    ackProcessor.shutdown();
    preProcessor.shutdown();
    commitProcessor.shutdown();
    syncProcessor.shutdown();
    this.lastDeliveredZxid=commitProcessor.getLastDeliveredZxid();
    this.participantState.updateLastDeliveredZxid(this.lastDeliveredZxid);
  }
}",0.9508907531341314
130772,"@Override public Void call() throws Exception {
  Election electionAlg=new RoundRobinElection();
  try {
    if (this.joinPeer != null) {
      stateMachine.recovering();
      join(this.joinPeer);
    }
    while (true) {
      PersistentState persistence=participantState.getPersistence();
      String leader=electionAlg.electLeader(persistence);
      LOG.debug(""String_Node_Str"",leader);
      if (leader.equals(serverId)) {
        Participant participant=new Leader(participantState,stateMachine,config);
        participant.setStateChangeCallback(stateChangeCallback);
        participant.setFailureCaseCallback(failureCallback);
        ((Leader)participant).lead();
      }
 else {
        Participant participant=new Follower(participantState,stateMachine,config);
        participant.setStateChangeCallback(stateChangeCallback);
        participant.setFailureCaseCallback(failureCallback);
        ((Follower)participant).follow(leader);
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    participantState.getTransport().shutdown();
  }
catch (  Participant.LeftCluster e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  if (stateChangeCallback != null) {
    stateChangeCallback.leftCluster();
  }
  return null;
}","@Override public Void call() throws Exception {
  Election electionAlg=new RoundRobinElection();
  try {
    if (this.joinPeer != null) {
      stateMachine.recovering();
      join(this.joinPeer);
    }
    while (true) {
      stateMachine.recovering();
      PersistentState persistence=participantState.getPersistence();
      String leader=electionAlg.electLeader(persistence);
      LOG.debug(""String_Node_Str"",leader);
      if (leader.equals(serverId)) {
        Participant participant=new Leader(participantState,stateMachine,config);
        participant.setStateChangeCallback(stateChangeCallback);
        participant.setFailureCaseCallback(failureCallback);
        ((Leader)participant).lead();
      }
 else {
        Participant participant=new Follower(participantState,stateMachine,config);
        participant.setStateChangeCallback(stateChangeCallback);
        participant.setFailureCaseCallback(failureCallback);
        ((Follower)participant).follow(leader);
      }
    }
  }
 catch (  InterruptedException e) {
    LOG.debug(""String_Node_Str"");
    participantState.getTransport().shutdown();
  }
catch (  Participant.LeftCluster e) {
    LOG.debug(""String_Node_Str"");
  }
catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  if (stateChangeCallback != null) {
    stateChangeCallback.leftCluster();
  }
  return null;
}",0.9878273699741792
130773,"@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    while (true) {
      Request request=ackQueue.take();
      if (request == Request.REQUEST_OF_DEATH) {
        break;
      }
      String source=request.getServerId();
      ZabMessage.Ack ack=request.getMessage().getAck();
      Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
      this.quorumSet.get(source).setLastAckedZxid(zxid);
      ArrayList<Zxid> zxids=new ArrayList<Zxid>();
      for (      PeerHandler ph : quorumSet.values()) {
        zxids.add(ph.getLastAckedZxid());
      }
      Collections.sort(zxids);
      Zxid zxidCanCommit=zxids.get(zxids.size() - this.quorumSize);
      LOG.debug(""String_Node_Str"",zxidCanCommit);
      if (zxidCanCommit.compareTo(Zxid.ZXID_NOT_EXIST) == 0) {
        continue;
      }
      LOG.debug(""String_Node_Str"",zxidCanCommit);
      Message commit=MessageBuilder.buildCommit(zxidCanCommit);
      for (      PeerHandler ph : quorumSet.values()) {
        ph.queueMessage(commit);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  LOG.debug(""String_Node_Str"");
  return null;
}","@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  try {
    while (true) {
      Request request=ackQueue.take();
      if (request == Request.REQUEST_OF_DEATH) {
        break;
      }
      String source=request.getServerId();
      ZabMessage.Ack ack=request.getMessage().getAck();
      Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
      this.quorumSet.get(source).setLastAckedZxid(zxid);
      ArrayList<Zxid> zxids=new ArrayList<Zxid>();
      for (      PeerHandler ph : quorumSet.values()) {
        LOG.debug(""String_Node_Str"",ph.getServerId(),ph.getLastAckedZxid());
        zxids.add(ph.getLastAckedZxid());
      }
      Collections.sort(zxids);
      Zxid zxidCanCommit=zxids.get(zxids.size() - this.quorumSize);
      LOG.debug(""String_Node_Str"",zxidCanCommit);
      if (zxidCanCommit.compareTo(Zxid.ZXID_NOT_EXIST) == 0) {
        continue;
      }
      LOG.debug(""String_Node_Str"",zxidCanCommit);
      Message commit=MessageBuilder.buildCommit(zxidCanCommit);
      for (      PeerHandler ph : quorumSet.values()) {
        ph.queueMessage(commit);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
    throw e;
  }
  LOG.debug(""String_Node_Str"");
  return null;
}",0.9683257918552036
130774,"public AckProcessor(Map<String,PeerHandler> quorumSet,int quorumSize){
  this.quorumSet=quorumSet;
  this.quorumSize=quorumSize;
  ft=Executors.newSingleThreadExecutor().submit(this);
}","public AckProcessor(Map<String,PeerHandler> quorumSet,int quorumSize){
  this.quorumSet=quorumSet;
  this.quorumSize=quorumSize;
  ExecutorService es=Executors.newSingleThreadExecutor(DaemonThreadFactory.FACTORY);
  ft=es.submit(this);
  es.shutdown();
}",0.8246013667425968
130775,"public CommitProcessor(Log log,StateMachine stateMachine,String serverId){
  this.log=log;
  this.stateMachine=stateMachine;
  this.serverId=serverId;
  ft=Executors.newSingleThreadExecutor().submit(this);
}","public CommitProcessor(Log log,StateMachine stateMachine,String serverId){
  this.log=log;
  this.stateMachine=stateMachine;
  this.serverId=serverId;
  ExecutorService es=Executors.newSingleThreadExecutor(DaemonThreadFactory.FACTORY);
  ft=es.submit(this);
  es.shutdown();
}",0.7660455486542443
130776,"/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 */
void beginBroadcasting(ExecutorService es) throws TimeoutException, InterruptedException, IOException {
  int currentEpoch=getAckEpochFromFile();
  Zxid nextZxid=new Zxid(currentEpoch,0);
  PreProcessor preproc=new PreProcessor(this.stateMachine,nextZxid,this.quorumSet);
  AckProcessor ackProcessor=new AckProcessor(this.quorumSet,getQuorumSize());
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(this.log,this.transport);
  CommitProcessor commitProcessor=new CommitProcessor(this.log,this.stateMachine,this.config.getServerId());
  ShortCircuitTransport scTransport=new ShortCircuitTransport(syncProcessor,commitProcessor,this.messageQueue);
  PeerHandler lh=new PeerHandler(this.config.getServerId(),scTransport,this.config.getTimeout() / 3);
  lh.setFuture(es.submit(lh));
  this.quorumSet.put(this.config.getServerId(),lh);
  Zxid lastZxid=this.log.getLatestZxid();
  Message commit=MessageBuilder.buildCommit(lastZxid);
  queueAllPeers(commit);
  try {
    while (this.quorumSet.size() >= getQuorumSize()) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getSource();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",this.config.getServerId(),source);
        Message newEpoch=MessageBuilder.buildNewEpochMessage(currentEpoch);
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",this.config.getServerId(),source);
        AckEpoch ackEpoch=msg.getAckEpoch();
        Zxid zxid=MessageBuilder.fromProtoZxid(ackEpoch.getLastZxid());
        PeerHandler ph=new PeerHandler(source,this.transport,this.config.getTimeout() / 3);
        ph.setLastZxid(zxid);
        ph.setNewLeaderEpoch(currentEpoch);
        ph.setSyncTask(new SyncPeerTask(source,zxid));
        this.quorumSet.put(source,ph);
        ph.setFuture(es.submit(ph));
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          continue;
        }
        if (msg.getType() == MessageType.ACK) {
          LOG.debug(""String_Node_Str"",MessageBuilder.fromProtoZxid(msg.getAck().getZxid()),source);
          ackProcessor.processRequest(new Request(source,msg));
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          LOG.debug(""String_Node_Str"",source);
          preproc.processRequest(new Request(this.config.getServerId(),msg));
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        this.quorumSet.get(source).updateHeartbeatTime();
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    try {
      ackProcessor.shutdown();
      preproc.shutdown();
      commitProcessor.shutdown();
      syncProcessor.shutdown();
    }
 catch (    ExecutionException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}","/** 
 * Entering broadcasting phase, leader broadcasts proposal to followers.
 * @throws InterruptedException if it's interrupted.
 * @throws TimeoutException in case of timeout.
 * @throws IOException in case of IO failure.
 */
void beginBroadcasting(ExecutorService es) throws TimeoutException, InterruptedException, IOException {
  int currentEpoch=getAckEpochFromFile();
  Zxid nextZxid=new Zxid(currentEpoch,0);
  PreProcessor preproc=new PreProcessor(this.stateMachine,nextZxid,this.quorumSet);
  AckProcessor ackProcessor=new AckProcessor(this.quorumSet,getQuorumSize());
  SyncProposalProcessor syncProcessor=new SyncProposalProcessor(this.log,this.transport);
  CommitProcessor commitProcessor=new CommitProcessor(this.log,this.stateMachine,this.config.getServerId());
  ShortCircuitTransport scTransport=new ShortCircuitTransport(syncProcessor,commitProcessor,this.messageQueue);
  PeerHandler lh=new PeerHandler(this.config.getServerId(),scTransport,this.config.getTimeout() / 3);
  lh.setLastAckedZxid(this.log.getLatestZxid());
  lh.setFuture(es.submit(lh));
  this.quorumSet.put(this.config.getServerId(),lh);
  Zxid lastZxid=this.log.getLatestZxid();
  Message commit=MessageBuilder.buildCommit(lastZxid);
  queueAllPeers(commit);
  try {
    while (this.quorumSet.size() >= getQuorumSize()) {
      MessageTuple tuple=getMessage();
      Message msg=tuple.getMessage();
      String source=tuple.getSource();
      if (msg.getType() == MessageType.PROPOSED_EPOCH) {
        LOG.debug(""String_Node_Str"",this.config.getServerId(),source);
        Message newEpoch=MessageBuilder.buildNewEpochMessage(currentEpoch);
        sendMessage(source,newEpoch);
      }
 else       if (msg.getType() == MessageType.ACK_EPOCH) {
        LOG.debug(""String_Node_Str"",this.config.getServerId(),source);
        AckEpoch ackEpoch=msg.getAckEpoch();
        Zxid zxid=MessageBuilder.fromProtoZxid(ackEpoch.getLastZxid());
        PeerHandler ph=new PeerHandler(source,this.transport,this.config.getTimeout() / 3);
        ph.setLastZxid(zxid);
        ph.setNewLeaderEpoch(currentEpoch);
        ph.setSyncTask(new SyncPeerTask(source,zxid));
        this.quorumSet.put(source,ph);
        ph.setFuture(es.submit(ph));
      }
 else {
        if (!this.quorumSet.containsKey(source)) {
          LOG.debug(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
          continue;
        }
        if (msg.getType() == MessageType.ACK) {
          LOG.debug(""String_Node_Str"",MessageBuilder.fromProtoZxid(msg.getAck().getZxid()),source);
          ackProcessor.processRequest(new Request(source,msg));
        }
 else         if (msg.getType() == MessageType.REQUEST) {
          LOG.debug(""String_Node_Str"",source);
          preproc.processRequest(new Request(this.config.getServerId(),msg));
        }
 else         if (msg.getType() == MessageType.HEARTBEAT) {
          LOG.trace(""String_Node_Str"",source);
        }
 else {
          LOG.warn(""String_Node_Str"",TextFormat.shortDebugString(msg),source);
        }
        this.quorumSet.get(source).updateHeartbeatTime();
        checkFollowerLiveness();
      }
    }
    LOG.debug(""String_Node_Str"" + ""String_Node_Str"",getQuorumSize());
  }
  finally {
    try {
      ackProcessor.shutdown();
      preproc.shutdown();
      commitProcessor.shutdown();
      syncProcessor.shutdown();
    }
 catch (    ExecutionException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
}",0.992824718113926
130777,"/** 
 * Waits for synchronization to followers complete.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException in case of interrupt.
 */
void waitNewLeaderAckFromQuorum() throws TimeoutException, InterruptedException, IOException {
  LOG.debug(""String_Node_Str"");
  int completeCount=0;
  while (completeCount < this.quorumSet.size()) {
    MessageTuple tuple=getExpectedMessage(MessageType.ACK,null);
    ZabMessage.Ack ack=tuple.getMessage().getAck();
    String source=tuple.getSource();
    Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
    if (zxid.compareTo(this.log.getLatestZxid()) != 0) {
      LOG.error(""String_Node_Str"",source);
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (!this.quorumSet.containsKey(source)) {
      LOG.warn(""String_Node_Str"",source);
      continue;
    }
    completeCount++;
  }
}","/** 
 * Waits for synchronization to followers complete.
 * @throws TimeoutException in case of timeout.
 * @throws InterruptedException in case of interrupt.
 */
void waitNewLeaderAckFromQuorum() throws TimeoutException, InterruptedException, IOException {
  LOG.debug(""String_Node_Str"");
  int completeCount=0;
  while (completeCount < this.quorumSet.size()) {
    MessageTuple tuple=getExpectedMessage(MessageType.ACK,null);
    ZabMessage.Ack ack=tuple.getMessage().getAck();
    String source=tuple.getSource();
    Zxid zxid=MessageBuilder.fromProtoZxid(ack.getZxid());
    if (zxid.compareTo(this.log.getLatestZxid()) != 0) {
      LOG.error(""String_Node_Str"",source);
      throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
    }
    if (!this.quorumSet.containsKey(source)) {
      LOG.warn(""String_Node_Str"",source);
      continue;
    }
    this.quorumSet.get(source).setLastAckedZxid(zxid);
    completeCount++;
  }
}",0.9700924415443176
130778,"/** 
 * Begins executing follower steps. It returns if any exception is caught, which causes it goes back to election phase.
 */
void follow(){
  try {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerDiscovering(this.electedLeader);
    }
    if (failCallback != null) {
      failCallback.followerDiscovering();
    }
    sendProposedEpoch();
    receiveNewEpoch();
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerSynchronizating(getProposedEpochFromFile());
    }
    if (failCallback != null) {
      failCallback.followerSynchronizing();
    }
    waitForSync(this.electedLeader);
    waitNewLeaderMesage();
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.currentState=ZabState.FOLLOWING;
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerBroadcasting(getAckEpochFromFile(),getAllTxns());
    }
    if (failCallback != null) {
      failCallback.followerBroadcasting();
    }
    beginAccepting();
  }
 catch (  InterruptedException|TimeoutException|IOException|RuntimeException e) {
    this.transport.disconnect(this.electedLeader);
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Begins executing follower steps. It returns if any exception is caught, which causes it goes back to election phase.
 * @throws InterruptedException
 */
void follow() throws InterruptedException {
  try {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerDiscovering(this.electedLeader);
    }
    if (failCallback != null) {
      failCallback.followerDiscovering();
    }
    sendProposedEpoch();
    receiveNewEpoch();
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerSynchronizating(getProposedEpochFromFile());
    }
    if (failCallback != null) {
      failCallback.followerSynchronizing();
    }
    waitForSync(this.electedLeader);
    waitNewLeaderMesage();
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    this.currentState=ZabState.FOLLOWING;
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.followerBroadcasting(getAckEpochFromFile(),getAllTxns());
    }
    if (failCallback != null) {
      failCallback.followerBroadcasting();
    }
    beginAccepting();
  }
 catch (  InterruptedException|TimeoutException|IOException|RuntimeException e) {
    this.transport.disconnect(this.electedLeader);
    LOG.error(""String_Node_Str"",e);
    if (e instanceof InterruptedException) {
      throw (InterruptedException)e;
    }
  }
}",0.9482818465810482
130779,"/** 
 * Begins executing leader steps. It returns if any exception is caught, which causes it goes back to election phase.
 */
void lead(){
  ExecutorService es=Executors.newCachedThreadPool(DaemonThreadFactory.FACTORY);
  try {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderDiscovering(config.getServerId());
    }
    if (failCallback != null) {
      failCallback.leaderDiscovering();
    }
    getPropsedEpochFromQuorum();
    proposeNewEpoch();
    waitEpochAckFromQuorum();
    LOG.debug(""String_Node_Str"",getProposedEpochFromFile());
    String serverId=selectSyncHistoryOwner();
    LOG.debug(""String_Node_Str"",serverId);
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderSynchronizating(getProposedEpochFromFile());
    }
    if (failCallback != null) {
      failCallback.leaderSynchronizing();
    }
    if (!serverId.equals(this.config.getServerId())) {
      synchronizeFromFollower(serverId);
    }
    setAckEpoch(getProposedEpochFromFile());
    beginSynchronizing(es);
    waitNewLeaderAckFromQuorum();
    this.currentState=ZabState.LEADING;
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (failCallback != null) {
      failCallback.leaderBroadcasting();
    }
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderBroadcasting(getAckEpochFromFile(),getAllTxns());
    }
    beginBroadcasting(es);
  }
 catch (  InterruptedException|TimeoutException|IOException|RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    for (    PeerHandler ph : this.quorumSet.values()) {
      ph.shutdown();
      this.quorumSet.remove(ph.getServerId());
    }
    es.shutdown();
  }
}","/** 
 * Begins executing leader steps. It returns if any exception is caught, which causes it goes back to election phase.
 * @throws InterruptedException in case of interrupted.
 */
void lead() throws Exception {
  ExecutorService es=Executors.newCachedThreadPool(DaemonThreadFactory.FACTORY);
  try {
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderDiscovering(config.getServerId());
    }
    if (failCallback != null) {
      failCallback.leaderDiscovering();
    }
    getPropsedEpochFromQuorum();
    proposeNewEpoch();
    waitEpochAckFromQuorum();
    LOG.debug(""String_Node_Str"",getProposedEpochFromFile());
    String serverId=selectSyncHistoryOwner();
    LOG.debug(""String_Node_Str"",serverId);
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderSynchronizating(getProposedEpochFromFile());
    }
    if (failCallback != null) {
      failCallback.leaderSynchronizing();
    }
    if (!serverId.equals(this.config.getServerId())) {
      synchronizeFromFollower(serverId);
    }
    setAckEpoch(getProposedEpochFromFile());
    beginSynchronizing(es);
    waitNewLeaderAckFromQuorum();
    this.currentState=ZabState.LEADING;
    MDC.put(""String_Node_Str"",""String_Node_Str"");
    LOG.debug(""String_Node_Str"");
    if (failCallback != null) {
      failCallback.leaderBroadcasting();
    }
    if (stateChangeCallback != null) {
      stateChangeCallback.leaderBroadcasting(getAckEpochFromFile(),getAllTxns());
    }
    beginBroadcasting(es);
  }
 catch (  InterruptedException|TimeoutException|IOException|RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    for (    PeerHandler ph : this.quorumSet.values()) {
      ph.shutdown();
      this.quorumSet.remove(ph.getServerId());
    }
    es.shutdown();
    if (e instanceof InterruptedException) {
      throw (InterruptedException)e;
    }
  }
}",0.9584402257567984
130780,"/** 
 * Starts main logic of participant.
 */
@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  Election electionAlg=new RoundRobinElection();
  while (true) {
    try {
      MDC.put(""String_Node_Str"",""String_Node_Str"");
      MDC.put(""String_Node_Str"",""String_Node_Str"");
      this.currentState=ZabState.LOOKING;
      if (this.stateChangeCallback != null) {
        this.stateChangeCallback.electing();
      }
      startLeaderElection(electionAlg);
      waitLeaderElected();
      LOG.debug(""String_Node_Str"",this.electedLeader);
      if (this.electedLeader.equals(this.config.getServerId())) {
        MDC.put(""String_Node_Str"",""String_Node_Str"");
        lead();
      }
 else {
        MDC.put(""String_Node_Str"",""String_Node_Str"");
        follow();
      }
    }
 catch (    RuntimeException e) {
      LOG.warn(""String_Node_Str"",e);
    }
  }
}","/** 
 * Starts main logic of participant.
 */
@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"");
  Election electionAlg=new RoundRobinElection();
  while (true) {
    try {
      MDC.put(""String_Node_Str"",""String_Node_Str"");
      MDC.put(""String_Node_Str"",""String_Node_Str"");
      this.currentState=ZabState.LOOKING;
      if (this.stateChangeCallback != null) {
        this.stateChangeCallback.electing();
      }
      startLeaderElection(electionAlg);
      waitLeaderElected();
      LOG.debug(""String_Node_Str"",this.electedLeader);
      if (this.electedLeader.equals(this.config.getServerId())) {
        MDC.put(""String_Node_Str"",""String_Node_Str"");
        lead();
      }
 else {
        MDC.put(""String_Node_Str"",""String_Node_Str"");
        follow();
      }
    }
 catch (    InterruptedException e) {
      LOG.warn(""String_Node_Str"",e);
      this.transport.shutdown();
      return null;
    }
catch (    Exception e) {
      LOG.error(""String_Node_Str"",e);
      return null;
    }
  }
}",0.9173166926677068
130781,"void shutdown(){
  this.future.cancel(true);
  this.transport.disconnect(this.serverId);
  LOG.debug(""String_Node_Str"",this.serverId);
}","void shutdown(){
  if (this.future != null) {
    this.future.cancel(true);
  }
  this.transport.disconnect(this.serverId);
  LOG.debug(""String_Node_Str"",this.serverId);
}",0.8859934853420195
130782,"public PreProcessor(StateMachine stateMachine,Zxid nextZxid,Map<String,PeerHandler> quorumSet){
  this.stateMachine=stateMachine;
  this.nextZxid=nextZxid;
  this.quorumSet=quorumSet;
  ft=Executors.newSingleThreadExecutor().submit(this);
}","public PreProcessor(StateMachine stateMachine,Zxid nextZxid,Map<String,PeerHandler> quorumSet){
  this.stateMachine=stateMachine;
  this.nextZxid=nextZxid;
  this.quorumSet=quorumSet;
  ExecutorService es=Executors.newSingleThreadExecutor(DaemonThreadFactory.FACTORY);
  ft=es.submit(this);
  es.shutdown();
}",0.8670309653916212
130783,"/** 
 * Constructs a SyncProposalProcessor object.
 * @param log the log which the transaction will be synchronized to.
 * @param transport used to send acknowledgment.
 */
public SyncProposalProcessor(Log log,Transport transport){
  this.log=log;
  this.transport=transport;
  ft=Executors.newSingleThreadExecutor().submit(this);
}","/** 
 * Constructs a SyncProposalProcessor object.
 * @param log the log which the transaction will be synchronized to.
 * @param transport used to send acknowledgment.
 */
public SyncProposalProcessor(Log log,Transport transport){
  this.log=log;
  this.transport=transport;
  ExecutorService es=Executors.newSingleThreadExecutor(DaemonThreadFactory.FACTORY);
  ft=es.submit(this);
  es.shutdown();
}",0.9004092769440655
130784,"public void handshakeCompleted(){
  LOG.debug(""String_Node_Str"",destination);
  Sender sender=senders.get(destination);
  sender.channel.attr(REMOTE_ID).set(destination);
  sender.channel.pipeline().remove(ReadTimeoutHandler.class);
  sender.channel.pipeline().addLast(new ByteBufferHandler());
  sender.channel.pipeline().addLast(new ErrorHandler());
  sender.start();
}","public void handshakeCompleted(){
}",0.1724137931034483
130785,"@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  try {
    ByteBuf bb=(ByteBuf)msg;
    LOG.debug(""String_Node_Str"",bb);
    byte[] buffer=new byte[bb.nioBuffer().remaining()];
    bb.nioBuffer().get(buffer);
    Message message=Message.parseFrom(buffer);
    if (message.getType() != MessageType.HANDSHAKE) {
      LOG.error(""String_Node_Str"",ctx.channel().remoteAddress(),TextFormat.shortDebugString(message));
      ctx.close();
      return;
    }
    String response=message.getHandshake().getNodeId();
    if (!response.equals(destination)) {
      LOG.error(""String_Node_Str"",destination,response);
      ctx.close();
      return;
    }
    LOG.debug(""String_Node_Str"",response);
    ctx.pipeline().remove(this);
    handshakeCompleted();
  }
  finally {
    ReferenceCountUtil.release(msg);
  }
}","@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  try {
    ByteBuf bb=(ByteBuf)msg;
    LOG.debug(""String_Node_Str"",bb);
    byte[] buffer=new byte[bb.nioBuffer().remaining()];
    bb.nioBuffer().get(buffer);
    Message message=Message.parseFrom(buffer);
    if (message.getType() != MessageType.HANDSHAKE) {
      LOG.error(""String_Node_Str"",ctx.channel().remoteAddress(),TextFormat.shortDebugString(message));
      ctx.close();
      return;
    }
    String response=message.getHandshake().getNodeId();
    if (!response.equals(destination)) {
      LOG.error(""String_Node_Str"",destination,response);
      ctx.close();
      return;
    }
    ctx.pipeline().remove(this);
    handshakeCompleted();
  }
  finally {
    ReferenceCountUtil.release(msg);
  }
}",0.9740181268882177
130786,"public Sender(final String source,final String destination){
  this.isServerSide=false;
  this.destination=destination;
  String[] address=destination.split(""String_Node_Str"",2);
  String host=address[0];
  int port=Integer.parseInt(address[1]);
  LOG.debug(""String_Node_Str"",host,port);
  Bootstrap b=new Bootstrap();
  b.group(workerGroup);
  b.channel(NioSocketChannel.class);
  b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,1000);
  b.option(ChannelOption.SO_KEEPALIVE,true);
  b.option(ChannelOption.TCP_NODELAY,true);
  b.handler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel ch) throws Exception {
      ch.pipeline().addLast(new ReadTimeoutHandler(2));
      ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,0,4,0,4));
      ch.pipeline().addLast(new ClientHandshakeHandler());
      ch.pipeline().addLast(""String_Node_Str"",new LengthFieldPrepender(4));
    }
  }
);
  b.connect(host,port).addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture cfuture){
      if (cfuture.isSuccess()) {
        LOG.debug(""String_Node_Str"",destination);
        Message msg=MessageBuilder.buildHandshake(source);
        ByteBuffer bb=ByteBuffer.wrap(msg.toByteArray());
        channel=cfuture.channel();
        channel.writeAndFlush(Unpooled.wrappedBuffer(bb));
      }
 else {
        LOG.debug(""String_Node_Str"",destination,cfuture.cause());
        handshakeFailed();
      }
    }
  }
);
}","public Sender(final String source,final String destination){
  this.isServerSide=false;
  this.destination=destination;
  bootstrap=new Bootstrap();
  bootstrap.group(workerGroup);
  bootstrap.channel(NioSocketChannel.class);
  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS,1000);
  bootstrap.option(ChannelOption.SO_KEEPALIVE,true);
  bootstrap.option(ChannelOption.TCP_NODELAY,true);
  bootstrap.handler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel ch) throws Exception {
      ch.pipeline().addLast(new ReadTimeoutHandler(2));
      ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE,0,4,0,4));
      ch.pipeline().addLast(new ClientHandshakeHandler());
      ch.pipeline().addLast(""String_Node_Str"",new LengthFieldPrepender(4));
    }
  }
);
}",0.5923076923076923
130787,"@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"",destination);
  try {
    while (true) {
      ByteBuffer buf=requests.take();
      channel.writeAndFlush(Unpooled.wrappedBuffer(buf));
    }
  }
 catch (  InterruptedException ex) {
    LOG.debug(""String_Node_Str"",destination);
    return null;
  }
catch (  Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
    throw ex;
  }
 finally {
    channel.close().syncUninterruptibly();
  }
}","@Override public Void call() throws Exception {
  LOG.debug(""String_Node_Str"",hostPort,destination);
  try {
    while (true) {
      ByteBuffer buf=requests.take();
      channel.writeAndFlush(Unpooled.wrappedBuffer(buf));
    }
  }
 catch (  InterruptedException ex) {
    LOG.debug(""String_Node_Str"",destination);
    return null;
  }
catch (  Exception ex) {
    LOG.warn(""String_Node_Str"",ex);
    throw ex;
  }
 finally {
    channel.close().syncUninterruptibly();
  }
}",0.9904559915164368
130788,"public void handshakeFailed(){
  if (senders.remove(destination,this)) {
    LOG.debug(""String_Node_Str"",destination);
    receiver.onDisconnected(destination);
  }
 else   if (!senders.containsKey(destination)) {
    LOG.debug(""String_Node_Str"",destination);
    receiver.onDisconnected(destination);
  }
}","public void handshakeFailed(){
}",0.1887905604719764
130789,"@Override public void send(final String destination,ByteBuffer message){
  if (destination.equals(hostPort)) {
    receiver.onReceived(destination,message);
    return;
  }
  Sender sender=senders.get(destination);
  if (sender != null) {
    sender.requests.add(message);
  }
 else {
    LOG.debug(""String_Node_Str"",destination);
    sender=new Sender(hostPort,destination);
    sender.requests.add(message);
    senders.putIfAbsent(destination,sender);
  }
}","@Override public void send(final String destination,ByteBuffer message){
  if (destination.equals(hostPort)) {
    receiver.onReceived(destination,message);
    return;
  }
  Sender currentSender=senders.get(destination);
  if (currentSender != null) {
    currentSender.requests.add(message);
  }
 else {
    LOG.debug(""String_Node_Str"",hostPort,destination);
    Sender newSender=new Sender(hostPort,destination);
    currentSender=senders.putIfAbsent(destination,newSender);
    if (currentSender == null) {
      newSender.requests.add(message);
      newSender.startHandshake();
    }
 else {
      currentSender.requests.add(message);
    }
  }
}",0.710431654676259
130790,"@Override public void operationComplete(ChannelFuture cfuture){
  if (cfuture.isSuccess()) {
    LOG.debug(""String_Node_Str"",destination);
    Message msg=MessageBuilder.buildHandshake(source);
    ByteBuffer bb=ByteBuffer.wrap(msg.toByteArray());
    channel=cfuture.channel();
    channel.writeAndFlush(Unpooled.wrappedBuffer(bb));
  }
 else {
    LOG.debug(""String_Node_Str"",destination,cfuture.cause());
    handshakeFailed();
  }
}","@Override public void operationComplete(ChannelFuture cfuture){
  if (cfuture.isSuccess()) {
    LOG.debug(""String_Node_Str"",hostPort,destination);
    Message msg=MessageBuilder.buildHandshake(hostPort);
    ByteBuffer bb=ByteBuffer.wrap(msg.toByteArray());
    channel=cfuture.channel();
    channel.writeAndFlush(Unpooled.wrappedBuffer(bb));
  }
 else {
    LOG.debug(""String_Node_Str"",destination,cfuture.cause());
    handshakeFailed();
  }
}",0.9739524348810872
130791,"/** 
 * Goes to the next transaction record.
 * @return the next transaction record
 * @throws java.io.EOFException if it reaches the end of file before readingthe entire transaction.
 * @throws IOException in case of IO failure
 * @throws NoSuchElementException if there's no more elements to get
 */
@Override public Transaction next() throws IOException {
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  DataInputStream in=new DataInputStream(logStream);
  int epoch, xid;
  epoch=in.readInt();
  xid=in.readInt();
  Zxid zxid=new Zxid(epoch,xid);
  int bodyLength=in.readInt();
  byte[] bodyBuffer=new byte[bodyLength];
  in.readFully(bodyBuffer,0,bodyLength);
  this.lastTransactionLength=Zxid.getZxidLength() + 4 + bodyLength;
  this.position+=this.lastTransactionLength;
  return new Transaction(zxid,bodyBuffer);
}","/** 
 * Goes to the next transaction record.
 * @return the next transaction record
 * @throws java.io.EOFException if it reaches the end of file before readingthe entire transaction.
 * @throws IOException in case of IO failure
 * @throws NoSuchElementException if there's no more elements to get
 */
@Override public Transaction next() throws IOException {
  if (!hasNext()) {
    throw new NoSuchElementException();
  }
  DataInputStream in=new DataInputStream(logStream);
  int epoch, xid;
  epoch=in.readInt();
  xid=in.readInt();
  Zxid zxid=new Zxid(epoch,xid);
  int bodyLength=in.readInt();
  byte[] bodyBuffer=new byte[bodyLength];
  in.readFully(bodyBuffer,0,bodyLength);
  this.lastTransactionLength=Zxid.getZxidLength() + 4 + bodyLength;
  this.position+=this.lastTransactionLength;
  return new Transaction(zxid,ByteBuffer.wrap(bodyBuffer));
}",0.9793753682969948
130792,"/** 
 * Appends a request to transaction log.
 * @param txn the transaction which will be added to log.
 * @throws IOException in case of IO failure
 */
@Override public void append(Transaction txn) throws IOException {
  if (txn.getZxid().compareTo(this.lastZxidSeen) <= 0) {
    LOG.error(""String_Node_Str"",txn.getZxid(),this.lastZxidSeen);
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    this.logStream.writeInt(txn.getZxid().getEpoch());
    this.logStream.writeInt(txn.getZxid().getXid());
    this.logStream.writeInt(txn.getBody().length);
    this.logStream.write(txn.getBody());
    this.logStream.flush();
    this.lastZxidSeen=txn.getZxid();
  }
 catch (  IOException e) {
    this.logStream.close();
  }
}","/** 
 * Appends a request to transaction log.
 * @param txn the transaction which will be added to log.
 * @throws IOException in case of IO failure
 */
@Override public void append(Transaction txn) throws IOException {
  if (txn.getZxid().compareTo(this.lastZxidSeen) <= 0) {
    LOG.error(""String_Node_Str"",txn.getZxid(),this.lastZxidSeen);
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"");
  }
  try {
    ByteBuffer buf=txn.getBody();
    this.logStream.writeInt(txn.getZxid().getEpoch());
    this.logStream.writeInt(txn.getZxid().getXid());
    this.logStream.writeInt(buf.remaining());
    while (buf.hasRemaining()) {
      this.logStream.writeByte(buf.get());
    }
    this.logStream.flush();
    this.lastZxidSeen=txn.getZxid();
  }
 catch (  IOException e) {
    this.logStream.close();
  }
}",0.8784810126582279
130793,"public Transaction(Zxid zxid,byte[] body){
  this.zxid=zxid;
  this.body=body;
}","public Transaction(Zxid zxid,ByteBuffer body){
  this.zxid=zxid;
  this.body=body;
}",0.9390243902439024
130794,"/** 
 * Get the body of the transaction.
 * @return an array of bytes representing the body of the transaction
 */
public byte[] getBody(){
  return this.body;
}","/** 
 * Get the body of the transaction.
 * @return an array of bytes representing the body of the transaction
 */
public ByteBuffer getBody(){
  return this.body;
}",0.9693251533742332
130795,"@Test public void testReopenFile() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),""String_Node_Str"".getBytes()));
  log.close();
  log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,1),""String_Node_Str"".getBytes()));
  Log.LogIterator iter=log.getIterator(new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,1));
}","@Test public void testReopenFile() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  log.close();
  log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,1),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  Log.LogIterator iter=log.getIterator(new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,1));
}",0.9684014869888476
130796,"/** 
 * Appending a transaction with a zxid smaller than the previous zxid should result in a RuntimeException.
 */
@Test(expected=RuntimeException.class) public void testAppendSmallerZxid() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,1),""String_Node_Str"".getBytes()));
  log.append(new Transaction(new Zxid(0,0),""String_Node_Str"".getBytes()));
}","/** 
 * Appending a transaction with a zxid smaller than the previous zxid should result in a RuntimeException.
 */
@Test(expected=RuntimeException.class) public void testAppendSmallerZxid() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,1),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  log.append(new Transaction(new Zxid(0,0),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
}",0.9643605870020964
130797,"/** 
 * Appending a transaction with a zxid equal to the previous zxid should result in a RuntimeException.
 */
@Test(expected=RuntimeException.class) public void testAppendSameZxid() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),""String_Node_Str"".getBytes()));
  log.append(new Transaction(new Zxid(0,0),""String_Node_Str"".getBytes()));
}","/** 
 * Appending a transaction with a zxid equal to the previous zxid should result in a RuntimeException.
 */
@Test(expected=RuntimeException.class) public void testAppendSameZxid() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  log.append(new Transaction(new Zxid(0,0),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
}",0.9638297872340426
130798,"private SimpleLog initLog() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),""String_Node_Str"".getBytes()));
  log.append(new Transaction(new Zxid(0,1),""String_Node_Str"".getBytes()));
  log.append(new Transaction(new Zxid(0,2),""String_Node_Str"".getBytes()));
  log.append(new Transaction(new Zxid(0,3),""String_Node_Str"".getBytes()));
  return log;
}","private SimpleLog initLog() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  log.append(new Transaction(new Zxid(0,1),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  log.append(new Transaction(new Zxid(0,2),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  log.append(new Transaction(new Zxid(0,3),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  return log;
}",0.9313131313131312
130799,"@Test public void testAppend() throws IOException {
  SimpleLog log=initLog();
  Log.LogIterator iter=log.getIterator(new Zxid(0,1));
  Transaction txn=iter.next();
  Assert.assertEquals(txn.getZxid(),new Zxid(0,1));
  Assert.assertTrue(Arrays.equals(txn.getBody(),""String_Node_Str"".getBytes()));
  txn=iter.next();
  Assert.assertEquals(txn.getZxid(),new Zxid(0,2));
  Assert.assertTrue(Arrays.equals(txn.getBody(),""String_Node_Str"".getBytes()));
  txn=iter.next();
  Assert.assertEquals(txn.getZxid(),new Zxid(0,3));
  Assert.assertTrue(Arrays.equals(txn.getBody(),""String_Node_Str"".getBytes()));
  Assert.assertFalse(iter.hasNext());
}","@Test public void testAppend() throws IOException {
  SimpleLog log=initLog();
  Log.LogIterator iter=log.getIterator(new Zxid(0,1));
  Transaction txn=iter.next();
  Assert.assertEquals(txn.getZxid(),new Zxid(0,1));
  Assert.assertTrue(txn.getBody().equals(ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  txn=iter.next();
  Assert.assertEquals(txn.getZxid(),new Zxid(0,2));
  Assert.assertTrue(txn.getBody().equals(ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  txn=iter.next();
  Assert.assertEquals(txn.getZxid(),new Zxid(0,3));
  Assert.assertTrue(txn.getBody().equals(ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  Assert.assertFalse(iter.hasNext());
}",0.885145482388974
130800,"@Test public void testTruncateAndAppend() throws IOException {
  SimpleLog log=initLog();
  log.truncate(new Zxid(0,0));
  log.append(new Transaction(new Zxid(1,2),""String_Node_Str"".getBytes()));
  Log.LogIterator iter=log.getIterator(new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(1,2));
}","@Test public void testTruncateAndAppend() throws IOException {
  SimpleLog log=initLog();
  log.truncate(new Zxid(0,0));
  log.append(new Transaction(new Zxid(1,2),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  Log.LogIterator iter=log.getIterator(new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(1,2));
}",0.9776609724047306
130801,"@Test public void testAppendWithoutSync() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),""String_Node_Str"".getBytes()));
  Log.LogIterator iter=log.getIterator(new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,0));
}","@Test public void testAppendWithoutSync() throws IOException {
  File temp=File.createTempFile(LOGFILE,""String_Node_Str"");
  SimpleLog log=new SimpleLog(temp);
  log.append(new Transaction(new Zxid(0,0),ByteBuffer.wrap(""String_Node_Str"".getBytes())));
  Log.LogIterator iter=log.getIterator(new Zxid(0,0));
  Assert.assertEquals(iter.next().getZxid(),new Zxid(0,0));
}",0.9763560500695412
130802,"public AttributeDefinition getAttribute(){
  return attribute;
}","public AttributeDefinitionDraft getAttribute(){
  return attribute;
}",0.962406015037594
130803,"public static AddAttributeDefinition of(final AttributeDefinition attributeDefinition){
  return new AddAttributeDefinition(attributeDefinition);
}","public static AddAttributeDefinition of(final AttributeDefinitionDraft attributeDefinitionDraft){
  return new AddAttributeDefinition(attributeDefinitionDraft);
}",0.9514563106796116
130804,"private AddAttributeDefinition(final AttributeDefinition attributeDefinition){
  super(""String_Node_Str"");
  this.attribute=attributeDefinition;
}","private AddAttributeDefinition(final AttributeDefinitionDraft attributeDefinition){
  super(""String_Node_Str"");
  this.attribute=attributeDefinition;
}",0.9831649831649832
130805,Price getPrice();,PriceDraft getPrice();,0.8717948717948718
130806,"private LineItemImportDraftBuilder(final ProductVariantImportDraft variant,final Long quantity,final Price price,@Nullable final String productId,final LocalizedString name){
  this.price=price;
  this.variant=variant;
  this.quantity=quantity;
  this.productId=productId;
  this.name=name;
}","private LineItemImportDraftBuilder(final ProductVariantImportDraft variant,final Long quantity,final PriceDraft price,@Nullable final String productId,final LocalizedString name){
  this.price=price;
  this.variant=variant;
  this.quantity=quantity;
  this.productId=productId;
  this.name=name;
}",0.9915110356536504
130807,"public LineItemImportDraftBuilder price(final Price price){
  this.price=price;
  return this;
}","public LineItemImportDraftBuilder price(final PriceDraft price){
  this.price=price;
  return this;
}",0.9746192893401016
130808,"public static LineItemImportDraftBuilder of(final ProductVariantImportDraft variant,final long quantity,final Price price,final LocalizedString name){
  return new LineItemImportDraftBuilder(variant,quantity,price,variant.getProductId(),name);
}","/** 
 * @deprecated use LineItemImportDraftBuilder{@link #of(ProductVariantImportDraft,long,PriceDraft,LocalizedString)} instead.
 */
@Deprecated public static LineItemImportDraftBuilder of(final ProductVariantImportDraft variant,final long quantity,final Price price,final LocalizedString name){
  return new LineItemImportDraftBuilder(variant,quantity,PriceDraft.of(price),variant.getProductId(),name);
}",0.7373271889400922
130809,"public LineItemImportDraftImpl(final LocalizedString name,@Nullable final String productId,final ProductVariantImportDraft variant,final Price price,final Long quantity,@Nullable final Set<ItemState> state,@Nullable final Reference<Channel> supplyChannel,@Nullable final TaxRate taxRate,@Nullable final CustomFieldsDraft custom,@Nullable final ItemShippingDetailsDraft shippingDetails){
  this.name=name;
  this.productId=productId;
  this.variant=variant;
  this.price=price;
  this.quantity=quantity;
  this.state=state;
  this.supplyChannel=supplyChannel;
  this.taxRate=taxRate;
  this.custom=custom;
  this.shippingDetails=shippingDetails;
}","public LineItemImportDraftImpl(final LocalizedString name,@Nullable final String productId,final ProductVariantImportDraft variant,final PriceDraft price,final Long quantity,@Nullable final Set<ItemState> state,@Nullable final Reference<Channel> supplyChannel,@Nullable final TaxRate taxRate,@Nullable final CustomFieldsDraft custom,@Nullable final ItemShippingDetailsDraft shippingDetails){
  this.name=name;
  this.productId=productId;
  this.variant=variant;
  this.price=price;
  this.quantity=quantity;
  this.state=state;
  this.supplyChannel=supplyChannel;
  this.taxRate=taxRate;
  this.custom=custom;
  this.shippingDetails=shippingDetails;
}",0.9961449498843484
130810,"@Override public Price getPrice(){
  return price;
}","@Override public PriceDraft getPrice(){
  return price;
}",0.9541284403669724
130811,@Nullable List<Price> getPrices();,@Nullable List<PriceDraft> getPrices();,0.9315068493150684
130812,"/** 
 * The prices of the variant. The prices should not contain two prices for the same price scope (same currency, country and customer group). If this property is defined, then it will override the prices property from the original product variant, otherwise prices property from the original product variant would be copied in the resulting order.
 * @param prices the prices to set
 * @return this builder
 */
public ProductVariantImportDraftBuilder prices(@Nullable final List<Price> prices){
  this.prices=prices;
  return this;
}","/** 
 * The prices of the variant. The prices should not contain two prices for the same price scope (same currency, country and customer group). If this property is defined, then it will override the prices property from the original product variant, otherwise prices property from the original product variant would be copied in the resulting order.
 * @param prices the prices to set
 * @return this builder
 */
public ProductVariantImportDraftBuilder prices(@Nullable final List<Price> prices){
  this.prices=Optional.ofNullable(prices).map(prices1 -> prices1.stream().map(PriceDraft::of).map(PriceDraft.class::cast).collect(Collectors.toList())).orElse(null);
  return this;
}",0.8719211822660099
130813,"ProductVariantImportDraftImpl(@Nullable final Integer id,@Nullable final String sku,@Nullable final List<Price> prices,@Nullable final List<Image> images,@Nullable final List<AttributeImportDraft> attributes,@Nullable final String productId){
  this.attributes=attributes;
  this.id=id;
  this.sku=sku;
  this.prices=prices;
  this.images=images;
  this.productId=productId;
}","ProductVariantImportDraftImpl(@Nullable final Integer id,@Nullable final String sku,@Nullable final List<PriceDraft> prices,@Nullable final List<Image> images,@Nullable final List<AttributeImportDraft> attributes,@Nullable final String productId){
  this.attributes=attributes;
  this.id=id;
  this.sku=sku;
  this.prices=prices;
  this.images=images;
  this.productId=productId;
}",0.9933949801849404
130814,"@Nullable @Override public List<Price> getPrices(){
  return prices;
}","@Nullable @Override public List<PriceDraft> getPrices(){
  return prices;
}",0.9655172413793104
130815,"@Test public void createsLineImportDraft(){
  final String productId=""String_Node_Str"";
  final ProductVariantImportDraft variant=ProductVariantImportDraftBuilder.of(productId,1).attributes(AttributeImportDraft.of(""String_Node_Str"",yellow),AttributeImportDraft.of(""String_Node_Str"",EURO_30)).build();
  final int quantity=1;
  final Price price=Price.of(EURO_1);
  final LocalizedString name=en(""String_Node_Str"");
  final Set<ItemState> state=asSet(ItemState.of(State.referenceOfId(""String_Node_Str""),2));
  final Reference<Channel> supplyChannel=Channel.referenceOfId(""String_Node_Str"");
  final CustomFieldsDraft custom=CustomFieldsDraftBuilder.ofTypeId(""String_Node_Str"").build();
  final LineItemImportDraftBuilder lineItemImportDraftBuilder=LineItemImportDraftBuilder.of(variant,quantity,price,name).state(state).supplyChannel(supplyChannel).custom(custom);
  final LineItemImportDraft lineItemImportDraft=lineItemImportDraftBuilder.build();
  assertThat(lineItemImportDraft.getName()).isEqualTo(name);
  assertThat(lineItemImportDraft.getProductId()).isEqualTo(productId);
  assertThat(lineItemImportDraft.getVariant()).isEqualTo(variant);
  assertThat(lineItemImportDraft.getPrice()).isEqualTo(price);
  assertThat(lineItemImportDraft.getQuantity()).isEqualTo(quantity);
  assertThat(lineItemImportDraft.getState()).isEqualTo(state);
  assertThat(lineItemImportDraft.getSupplyChannel()).isEqualTo(supplyChannel);
  assertThat(lineItemImportDraft.getCustom()).isEqualTo(custom);
}","@Test public void createsLineImportDraft(){
  final String productId=""String_Node_Str"";
  final ProductVariantImportDraft variant=ProductVariantImportDraftBuilder.of(productId,1).attributes(AttributeImportDraft.of(""String_Node_Str"",yellow),AttributeImportDraft.of(""String_Node_Str"",EURO_30)).build();
  final int quantity=1;
  final Price price=Price.of(EURO_1);
  final LocalizedString name=en(""String_Node_Str"");
  final Set<ItemState> state=asSet(ItemState.of(State.referenceOfId(""String_Node_Str""),2));
  final Reference<Channel> supplyChannel=Channel.referenceOfId(""String_Node_Str"");
  final CustomFieldsDraft custom=CustomFieldsDraftBuilder.ofTypeId(""String_Node_Str"").build();
  final LineItemImportDraftBuilder lineItemImportDraftBuilder=LineItemImportDraftBuilder.of(variant,quantity,price,name).state(state).supplyChannel(supplyChannel).custom(custom);
  final LineItemImportDraft lineItemImportDraft=lineItemImportDraftBuilder.build();
  assertThat(lineItemImportDraft.getName()).isEqualTo(name);
  assertThat(lineItemImportDraft.getProductId()).isEqualTo(productId);
  assertThat(lineItemImportDraft.getVariant()).isEqualTo(variant);
  assertThat(lineItemImportDraft.getPrice()).isEqualTo(PriceDraft.of(price));
  assertThat(lineItemImportDraft.getQuantity()).isEqualTo(quantity);
  assertThat(lineItemImportDraft.getState()).isEqualTo(state);
  assertThat(lineItemImportDraft.getSupplyChannel()).isEqualTo(supplyChannel);
  assertThat(lineItemImportDraft.getCustom()).isEqualTo(custom);
}",0.9916359986617598
130816,"@Test public void lineItems() throws Exception {
  withPersistentChannel(client(),ChannelRole.INVENTORY_SUPPLY,channel -> {
    withProduct(client(),product -> {
      final int variantId=1;
      final String sku=sku(product);
      final ProductVariantImportDraft productVariantImportDraft=ProductVariantImportDraftBuilder.of(product.getId(),variantId,sku).build();
      final Price price=PRICE;
      final LocalizedString name=randomSlug();
      final LineItemImportDraft lineItemImportDraft=LineItemImportDraftBuilder.of(productVariantImportDraft,2L,price,name).supplyChannel(channel).build();
      testOrderAspect(builder -> builder.lineItems(asList(lineItemImportDraft)),order -> {
        final LineItem lineItem=order.getLineItems().get(0);
        assertThat(lineItem.getProductId()).isEqualTo(product.getId());
        assertThat(lineItem.getVariant().getId()).isEqualTo(variantId);
        final ProductVariant masterVariant=product.getMasterData().getStaged().getMasterVariant();
        assertThat(lineItem.getVariant().getAttributes()).isEqualTo(masterVariant.getAttributes());
        assertThat(lineItem.getVariant().getImages()).isEqualTo(masterVariant.getImages());
        assertThat(lineItem.getVariant().getPrices()).isEqualTo(masterVariant.getPrices());
        assertThat(lineItem.getVariant().getSku()).contains(masterVariant.getSku());
        assertThat(lineItem.getQuantity()).isEqualTo(2);
        assertThat(lineItem.getName()).isEqualTo(name);
      }
);
    }
);
  }
);
}","@Test public void lineItems() throws Exception {
  withUpdateableType(client(),type -> {
    withPersistentChannel(client(),ChannelRole.INVENTORY_SUPPLY,channel -> {
      withProduct(client(),product -> {
        final int variantId=1;
        final String sku=sku(product);
        final ProductVariantImportDraft productVariantImportDraft=ProductVariantImportDraftBuilder.of(product.getId(),variantId,sku).build();
        final String value=""String_Node_Str"";
        final PriceDraft price=PriceDraft.of(EURO_1).withCustom(CustomFieldsDraft.ofTypeIdAndObjects(type.getId(),singletonMap(STRING_FIELD_NAME,value)));
        final LocalizedString name=randomSlug();
        final LineItemImportDraft lineItemImportDraft=LineItemImportDraftBuilder.of(productVariantImportDraft,2L,price,name).supplyChannel(channel).build();
        testOrderAspect(builder -> builder.lineItems(asList(lineItemImportDraft)),order -> {
          final LineItem lineItem=order.getLineItems().get(0);
          assertThat(lineItem.getProductId()).isEqualTo(product.getId());
          assertThat(lineItem.getVariant().getId()).isEqualTo(variantId);
          final ProductVariant masterVariant=product.getMasterData().getStaged().getMasterVariant();
          assertThat(lineItem.getVariant().getAttributes()).isEqualTo(masterVariant.getAttributes());
          assertThat(lineItem.getVariant().getImages()).isEqualTo(masterVariant.getImages());
          assertThat(lineItem.getVariant().getPrices()).isEqualTo(masterVariant.getPrices());
          assertThat(lineItem.getVariant().getSku()).contains(masterVariant.getSku());
          assertThat(lineItem.getQuantity()).isEqualTo(2);
          assertThat(lineItem.getName()).isEqualTo(name);
          assertThat(lineItem.getPrice().getCustom()).isNotNull();
        }
);
      }
);
    }
);
    return type;
  }
);
}",0.888822652757079
130817,"/** 
 * The prices of the variant. The prices should not contain two prices for the same price scope (same currency, country and customer group). If this property is defined, then it will override the prices property from the original product variant, otherwise prices property from the original product variant would be copied in the resulting order.
 * @param prices the prices to set
 * @return this builder
 */
public ProductVariantImportDraftBuilder prices(@Nullable final List<Price> prices){
  this.prices=Optional.ofNullable(prices).map(prices1 -> prices1.stream().map(PriceDraft::of).map(PriceDraft.class::cast).collect(Collectors.toList())).orElse(null);
  return this;
}","/** 
 * The prices of the variant. The prices should not contain two prices for the same price scope (same currency, country and customer group). If this property is defined, then it will override the prices property from the original product variant, otherwise prices property from the original product variant would be copied in the resulting order.
 * @param prices the prices to set
 * @return this builder
 */
public ProductVariantImportDraftBuilder prices(@Nullable final List<PriceDraft> prices){
  this.prices=prices;
  return this;
}",0.8683565004088307
130818,"@Test public void orderImportCanOverrideVariantDataInTheOrder() throws Exception {
  final List<AttributeImportDraft> attributeImportDrafts=asList(AttributeImportDraft.of(TShirtProductTypeDraftSupplier.Sizes.ATTRIBUTE.getName(),TShirtProductTypeDraftSupplier.Sizes.S),AttributeImportDraft.of(TShirtProductTypeDraftSupplier.Colors.ATTRIBUTE.getName(),TShirtProductTypeDraftSupplier.Colors.RED));
  final List<Attribute> attributesOfOrder=asList(TShirtProductTypeDraftSupplier.Sizes.ATTRIBUTE.valueOf(TShirtProductTypeDraftSupplier.Sizes.S),TShirtProductTypeDraftSupplier.Colors.ATTRIBUTE.valueOf(TShirtProductTypeDraftSupplier.Colors.RED));
  final List<Image> images=asList(Image.of(""String_Node_Str"",ImageDimensions.of(1,2),""String_Node_Str""));
  final List<Price> prices=asList(Price.of(new BigDecimal(""String_Node_Str""),DefaultCurrencyUnits.EUR));
  withProduct(client(),product -> {
    final int variantId=1;
    final ProductVariantImportDraft productVariantImportDraft=ProductVariantImportDraftBuilder.of(product.getId(),variantId,sku(product)).attributes(attributeImportDrafts).images(images).prices(prices).build();
    final Price price=PRICE;
    final LocalizedString name=randomSlug();
    final LineItemImportDraft lineItemImportDraft=LineItemImportDraftBuilder.of(productVariantImportDraft,2L,price,name).build();
    testOrderAspect(builder -> builder.lineItems(asList(lineItemImportDraft)),order -> {
      final LineItem lineItem=order.getLineItems().get(0);
      final ProductVariant masterVariant=product.getMasterData().getStaged().getMasterVariant();
      final ProductVariant productVariant=lineItem.getVariant();
      assertThat(productVariant.getAttributes()).isEqualTo(attributesOfOrder).isNotEqualTo(masterVariant.getAttributes());
      assertThat(productVariant.getImages()).isEqualTo(images).isNotEqualTo(masterVariant.getImages());
    }
);
  }
);
}","@Test public void orderImportCanOverrideVariantDataInTheOrder() throws Exception {
  final List<AttributeImportDraft> attributeImportDrafts=asList(AttributeImportDraft.of(TShirtProductTypeDraftSupplier.Sizes.ATTRIBUTE.getName(),TShirtProductTypeDraftSupplier.Sizes.S),AttributeImportDraft.of(TShirtProductTypeDraftSupplier.Colors.ATTRIBUTE.getName(),TShirtProductTypeDraftSupplier.Colors.RED));
  final List<Attribute> attributesOfOrder=asList(TShirtProductTypeDraftSupplier.Sizes.ATTRIBUTE.valueOf(TShirtProductTypeDraftSupplier.Sizes.S),TShirtProductTypeDraftSupplier.Colors.ATTRIBUTE.valueOf(TShirtProductTypeDraftSupplier.Colors.RED));
  final List<Image> images=asList(Image.of(""String_Node_Str"",ImageDimensions.of(1,2),""String_Node_Str""));
  final List<PriceDraft> prices=asList(PriceDraft.of(new BigDecimal(""String_Node_Str""),DefaultCurrencyUnits.EUR));
  withProduct(client(),product -> {
    final int variantId=1;
    final ProductVariantImportDraft productVariantImportDraft=ProductVariantImportDraftBuilder.of(product.getId(),variantId,sku(product)).attributes(attributeImportDrafts).images(images).prices(prices).build();
    final Price price=PRICE;
    final LocalizedString name=randomSlug();
    final LineItemImportDraft lineItemImportDraft=LineItemImportDraftBuilder.of(productVariantImportDraft,2L,price,name).build();
    testOrderAspect(builder -> builder.lineItems(asList(lineItemImportDraft)),order -> {
      final LineItem lineItem=order.getLineItems().get(0);
      final ProductVariant masterVariant=product.getMasterData().getStaged().getMasterVariant();
      final ProductVariant productVariant=lineItem.getVariant();
      assertThat(productVariant.getAttributes()).isEqualTo(attributesOfOrder).isNotEqualTo(masterVariant.getAttributes());
      assertThat(productVariant.getImages()).isEqualTo(images).isNotEqualTo(masterVariant.getImages());
      assertEqualPrices(productVariant.getPrices(),prices);
    }
);
  }
);
}",0.9817518248175182
130819,"@Test public void lineItems() throws Exception {
  withUpdateableType(client(),type -> {
    withPersistentChannel(client(),ChannelRole.INVENTORY_SUPPLY,channel -> {
      withProduct(client(),product -> {
        final int variantId=1;
        final String sku=sku(product);
        final ProductVariantImportDraft productVariantImportDraft=ProductVariantImportDraftBuilder.of(product.getId(),variantId,sku).build();
        final String value=""String_Node_Str"";
        final PriceDraft price=PriceDraft.of(EURO_1).withCustom(CustomFieldsDraft.ofTypeIdAndObjects(type.getId(),singletonMap(STRING_FIELD_NAME,value)));
        final LocalizedString name=randomSlug();
        final LineItemImportDraft lineItemImportDraft=LineItemImportDraftBuilder.of(productVariantImportDraft,2L,price,name).supplyChannel(channel).build();
        testOrderAspect(builder -> builder.lineItems(asList(lineItemImportDraft)),order -> {
          final LineItem lineItem=order.getLineItems().get(0);
          assertThat(lineItem.getProductId()).isEqualTo(product.getId());
          assertThat(lineItem.getVariant().getId()).isEqualTo(variantId);
          final ProductVariant masterVariant=product.getMasterData().getStaged().getMasterVariant();
          assertThat(lineItem.getVariant().getAttributes()).isEqualTo(masterVariant.getAttributes());
          assertThat(lineItem.getVariant().getImages()).isEqualTo(masterVariant.getImages());
          assertThat(lineItem.getVariant().getPrices()).isEqualTo(masterVariant.getPrices());
          assertThat(lineItem.getVariant().getSku()).contains(masterVariant.getSku());
          assertThat(lineItem.getQuantity()).isEqualTo(2);
          assertThat(lineItem.getName()).isEqualTo(name);
          assertThat(lineItem.getPrice().getCustom()).isNotNull();
        }
);
      }
);
    }
);
    return type;
  }
);
}","@Test public void lineItems() throws Exception {
  withUpdateableType(client(),type -> {
    withPersistentChannel(client(),ChannelRole.INVENTORY_SUPPLY,channel -> {
      withProduct(client(),product -> {
        final String value=""String_Node_Str"";
        final PriceDraft price=PriceDraft.of(EURO_1).withCustom(CustomFieldsDraft.ofTypeIdAndObjects(type.getId(),singletonMap(STRING_FIELD_NAME,value)));
        final String orderNumber=randomString();
        final int variantId=1;
        final String sku=sku(product);
        final ProductVariantImportDraft productVariantImportDraft=ProductVariantImportDraftBuilder.of(product.getId(),variantId,sku).prices(asList(price)).build();
        final LocalizedString name=randomSlug();
        final LineItemImportDraft lineItemImportDraft=LineItemImportDraftBuilder.of(productVariantImportDraft,2L,price,name).supplyChannel(channel).build();
        testOrderAspect(builder -> builder.lineItems(asList(lineItemImportDraft)).orderNumber(orderNumber),order -> {
          final LineItem lineItem=order.getLineItems().get(0);
          assertThat(lineItem.getProductId()).isEqualTo(product.getId());
          assertThat(lineItem.getVariant().getId()).isEqualTo(variantId);
          final ProductVariant masterVariant=product.getMasterData().getStaged().getMasterVariant();
          assertThat(lineItem.getVariant().getAttributes()).isEqualTo(masterVariant.getAttributes());
          assertThat(lineItem.getVariant().getImages()).isEqualTo(masterVariant.getImages());
          assertThat(lineItem.getVariant().getPrices()).isNotEmpty();
          assertThat(lineItem.getVariant().getSku()).contains(masterVariant.getSku());
          assertThat(lineItem.getQuantity()).isEqualTo(2);
          assertThat(lineItem.getName()).isEqualTo(name);
          assertThat(lineItem.getPrice().getCustom()).isNotNull();
        }
);
      }
);
    }
);
    return type;
  }
);
}",0.7225464190981432
130820,"@Test public void customLineItems() throws Exception {
  withTransientTaxCategory(client(),taxCategory -> withProduct(client(),product -> {
    final LocalizedString name=randomSlug();
    final long quantity=16;
    final MonetaryAmount money=EURO_20;
    final Reference<TaxCategory> taxCategoryReference=defaultTaxCategory(client()).toReference();
    final String id=""String_Node_Str"";
    final String slug=""String_Node_Str"";
    final TaxRate taxRate=taxCategory.getTaxRates().get(0);
    final CustomLineItemImportDraft customLineItem=CustomLineItemImportDraftBuilder.of(name,quantity,money,taxCategoryReference).id(id).slug(slug).taxRate(taxRate).build();
    final List<CustomLineItemImportDraft> customLineItems=asList(customLineItem);
    testOrderAspect(builder -> builder.customLineItems(customLineItems),order -> {
      assertThat(order.getCustomLineItems()).hasSize(1);
      final CustomLineItem actual=order.getCustomLineItems().get(0);
      assertThat(actual.getMoney()).isEqualTo(money);
      assertThat(actual.getQuantity()).isEqualTo(quantity);
      assertThat(actual.getName()).isEqualTo(name);
      assertThat(actual.getSlug()).isEqualTo(slug);
      assertThat(actual.getTaxCategory()).isEqualTo(taxCategoryReference);
      assertThat(actual.getTaxRate()).isEqualTo(taxRate);
    }
);
  }
));
}","@Test public void customLineItems() throws Exception {
  withUpdateableType(client(),type -> {
    withTransientTaxCategory(client(),taxCategory -> withProduct(client(),product -> {
      final LocalizedString name=randomSlug();
      final long quantity=16;
      final MonetaryAmount money=EURO_20;
      final Reference<TaxCategory> taxCategoryReference=defaultTaxCategory(client()).toReference();
      final String id=""String_Node_Str"";
      final String slug=""String_Node_Str"";
      final TaxRate taxRate=taxCategory.getTaxRates().get(0);
      final String value=""String_Node_Str"";
      final PriceDraft price=PriceDraft.of(EURO_1).withCustom(CustomFieldsDraft.ofTypeIdAndObjects(type.getId(),singletonMap(STRING_FIELD_NAME,value)));
      final CustomLineItemImportDraft customLineItem=CustomLineItemImportDraftBuilder.of(name,quantity,money,taxCategoryReference).id(id).slug(slug).taxRate(taxRate).build();
      final List<CustomLineItemImportDraft> customLineItems=asList(customLineItem);
      testOrderAspect(builder -> builder.customLineItems(customLineItems),order -> {
        assertThat(order.getCustomLineItems()).hasSize(1);
        final CustomLineItem actual=order.getCustomLineItems().get(0);
        assertThat(actual.getMoney()).isEqualTo(money);
        assertThat(actual.getQuantity()).isEqualTo(quantity);
        assertThat(actual.getName()).isEqualTo(name);
        assertThat(actual.getSlug()).isEqualTo(slug);
        assertThat(actual.getTaxCategory()).isEqualTo(taxCategoryReference);
        assertThat(actual.getTaxRate()).isEqualTo(taxRate);
      }
);
    }
));
    return type;
  }
);
}",0.8973229413758048
130821,"@BeforeClass public static void clean(){
  client().executeBlocking(CartDiscountQuery.of().withPredicates(m -> m.name().locale(ENGLISH).is(""String_Node_Str""))).getResults().forEach(discount -> client().executeBlocking(CartDiscountDeleteCommand.of(discount)));
}","@BeforeClass public static void clean(){
  deleteDiscountCodesAndCartDiscounts(client());
  client().executeBlocking(CartDiscountQuery.of().withPredicates(m -> m.name().locale(ENGLISH).is(""String_Node_Str""))).getResults().forEach(discount -> client().executeBlocking(CartDiscountDeleteCommand.of(discount)));
}",0.914185639229422
130822,"@BeforeClass public static void cleanUp() throws Exception {
  ProductFixtures.deleteProductsAndProductTypes(client());
}","@BeforeClass public static void cleanUp() throws Exception {
  CartDiscountFixtures.deleteDiscountCodesAndCartDiscounts(client());
  ProductFixtures.deleteProductsAndProductTypes(client());
}",0.7756410256410257
130823,"@BeforeClass public static void setUp() throws Exception {
  ProductFixtures.deleteProductsAndProductTypes(client());
}","@BeforeClass public static void setUp() throws Exception {
  CartDiscountFixtures.deleteDiscountCodesAndCartDiscounts(client());
  ProductFixtures.deleteProductsAndProductTypes(client());
}",0.7727272727272727
130824,"@AfterClass public static void delete(){
  ProductFixtures.deleteProductsAndProductTypes(client());
  productType=null;
}","@AfterClass public static void delete(){
  CartDiscountFixtures.deleteDiscountCodesAndCartDiscounts(client());
  ProductFixtures.deleteProductsAndProductTypes(client());
  productType=null;
}",0.7756410256410257
130825,"@AfterClass public static void delete(){
  ProductFixtures.deleteProductsAndProductTypes(client());
  productType=null;
}","@AfterClass public static void delete(){
  CartDiscountFixtures.deleteDiscountCodesAndCartDiscounts(client());
  ProductFixtures.deleteProductsAndProductTypes(client());
  productType=null;
}",0.7756410256410257
130826,"@AfterClass public static void cleanUp(){
  ReviewFixtures.deleteReviews(client());
  ProductFixtures.deleteProductsAndProductTypes(client());
}","@AfterClass public static void cleanUp(){
  CartDiscountFixtures.deleteDiscountCodesAndCartDiscounts(client());
  ReviewFixtures.deleteReviews(client());
  ProductFixtures.deleteProductsAndProductTypes(client());
}",0.8044692737430168
130827,"private static AssetDraft getAssetDraft1(){
  final AssetSource assetSource1=AssetSourceBuilder.ofUri(""String_Node_Str"").key(randomKey()).contentType(""String_Node_Str"").dimensionsOfWidthAndHeight(1934,1115).build();
  final LocalizedString name=LocalizedString.ofEnglish(""String_Node_Str"");
  final LocalizedString description=LocalizedString.ofEnglish(""String_Node_Str"");
  return AssetDraftBuilder.of(singletonList(assetSource1),name).description(description).tags(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
}","private static AssetDraft getAssetDraft1(){
  final AssetSource assetSource1=AssetSourceBuilder.ofUri(""String_Node_Str"").key(randomKey()).contentType(""String_Node_Str"").dimensionsOfWidthAndHeight(1934,1115).build();
  final LocalizedString name=LocalizedString.ofEnglish(""String_Node_Str"");
  final LocalizedString description=LocalizedString.ofEnglish(""String_Node_Str"");
  return AssetDraftBuilder.of(singletonList(assetSource1),name).key(""String_Node_Str"").description(description).tags(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
}",0.9795191451469278
130828,"private static AssetDraft getAssetDraft2(){
  final AssetSource assetSource1=AssetSourceBuilder.ofUri(""String_Node_Str"").key(randomKey()).contentType(""String_Node_Str"").build();
  final LocalizedString name=LocalizedString.ofEnglish(""String_Node_Str"");
  return AssetDraftBuilder.of(singletonList(assetSource1),name).tags(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
}","private static AssetDraft getAssetDraft2(){
  final AssetSource assetSource1=AssetSourceBuilder.ofUri(""String_Node_Str"").key(randomKey()).contentType(""String_Node_Str"").build();
  final LocalizedString name=LocalizedString.ofEnglish(""String_Node_Str"");
  return AssetDraftBuilder.of(singletonList(assetSource1),name).key(""String_Node_Str"").tags(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"").build();
}",0.9723889555822328
130829,"@Override public JsonNode serialize(final T t){
  return mapper().valueToTree(t.getKey());
}","@Override public JsonNode serialize(final T t){
  return mapper().valueToTree(t);
}",0.9485714285714286
130830,"DiscountCodeDraftBuilder(final Boolean active,final List<Reference<CartDiscount>> cartDiscounts,final @Nullable String cartPredicate,final String code,final @Nullable CustomFieldsDraft custom,final @Nullable LocalizedString description,final @Nullable Long maxApplications,final @Nullable Long maxApplicationsPerCustomer,final @Nullable LocalizedString name){
  super(active,cartDiscounts,cartPredicate,code,custom,description,maxApplications,maxApplicationsPerCustomer,name);
}","DiscountCodeDraftBuilder(final Boolean active,final List<Reference<CartDiscount>> cartDiscounts,final @Nullable String cartPredicate,final String code,final @Nullable CustomFieldsDraft custom,final @Nullable LocalizedString description,final @Nullable Long maxApplications,final @Nullable Long maxApplicationsPerCustomer,final @Nullable LocalizedString name,@Nullable final ZonedDateTime validFrom,@Nullable final ZonedDateTime validUntil){
  super(active,cartDiscounts,cartPredicate,code,custom,description,maxApplications,maxApplicationsPerCustomer,name,validFrom,validUntil);
}",0.9035916824196596
130831,"DiscountCodeDraftDsl(final Boolean active,final List<Reference<CartDiscount>> cartDiscounts,final @Nullable String cartPredicate,final String code,final @Nullable CustomFieldsDraft custom,final @Nullable LocalizedString description,final @Nullable Long maxApplications,final @Nullable Long maxApplicationsPerCustomer,final @Nullable LocalizedString name){
  super(active,cartDiscounts,cartPredicate,code,custom,description,maxApplications,maxApplicationsPerCustomer,name);
}","DiscountCodeDraftDsl(final Boolean active,final List<Reference<CartDiscount>> cartDiscounts,final @Nullable String cartPredicate,final String code,final @Nullable CustomFieldsDraft custom,final @Nullable LocalizedString description,final @Nullable Long maxApplications,final @Nullable Long maxApplicationsPerCustomer,final @Nullable LocalizedString name,@Nullable final ZonedDateTime validFrom,@Nullable final ZonedDateTime validUntil){
  super(active,cartDiscounts,cartPredicate,code,custom,description,maxApplications,maxApplicationsPerCustomer,name,validFrom,validUntil);
}",0.9028571428571428
130832,"@Test public void execution() throws Exception {
  withPersistentCartDiscount(client(),cartDiscount -> {
    final String code=randomKey();
    final DiscountCodeDraft draft=DiscountCodeDraft.of(code,cartDiscount).withName(en(DiscountCodeCreateCommandIntegrationTest.class.getName())).withDescription(en(""String_Node_Str"")).withCartPredicate(CartPredicate.of(""String_Node_Str"")).withIsActive(false).withMaxApplications(5L).withMaxApplicationsPerCustomer(1L);
    final DiscountCodeCreateCommand createCommand=DiscountCodeCreateCommand.of(draft).plusExpansionPaths(m -> m.cartDiscounts());
    final DiscountCode discountCode=client().executeBlocking(createCommand);
    assertThat(discountCode.getCode()).isEqualTo(code);
    assertThat(discountCode.getName()).isEqualTo(en(DiscountCodeCreateCommandIntegrationTest.class.getName()));
    assertThat(discountCode.getDescription()).isEqualTo(en(""String_Node_Str""));
    final Reference<CartDiscount> cartDiscountReference=discountCode.getCartDiscounts().get(0);
    assertThat(cartDiscountReference).isEqualTo(cartDiscount.toReference()).is(expanded());
    assertThat(discountCode.getCartPredicate()).contains(""String_Node_Str"");
    assertThat(discountCode.isActive()).isEqualTo(false);
    assertThat(discountCode.getMaxApplications()).isEqualTo(5L);
    assertThat(discountCode.getMaxApplicationsPerCustomer()).isEqualTo(1L);
    client().executeBlocking(DiscountCodeDeleteCommand.of(discountCode));
  }
);
}","@Test public void execution() throws Exception {
  withPersistentCartDiscount(client(),cartDiscount -> {
    final ZonedDateTime start=ZonedDateTime.parse(""String_Node_Str"");
    final ZonedDateTime end=start.plusMonths(3);
    final String code=randomKey();
    final DiscountCodeDraft draft=DiscountCodeDraft.of(code,cartDiscount).withName(en(DiscountCodeCreateCommandIntegrationTest.class.getName())).withDescription(en(""String_Node_Str"")).withCartPredicate(CartPredicate.of(""String_Node_Str"")).withIsActive(false).withMaxApplications(5L).withValidFrom(start).withValidUntil(end).withMaxApplicationsPerCustomer(1L);
    final DiscountCodeCreateCommand createCommand=DiscountCodeCreateCommand.of(draft).plusExpansionPaths(m -> m.cartDiscounts());
    final DiscountCode discountCode=client().executeBlocking(createCommand);
    assertThat(discountCode.getCode()).isEqualTo(code);
    assertThat(discountCode.getName()).isEqualTo(en(DiscountCodeCreateCommandIntegrationTest.class.getName()));
    assertThat(discountCode.getDescription()).isEqualTo(en(""String_Node_Str""));
    assertThat(discountCode.getValidFrom()).isEqualTo(start);
    assertThat(discountCode.getValidUntil()).isEqualTo(end);
    final Reference<CartDiscount> cartDiscountReference=discountCode.getCartDiscounts().get(0);
    assertThat(cartDiscountReference).isEqualTo(cartDiscount.toReference()).is(expanded());
    assertThat(discountCode.getCartPredicate()).contains(""String_Node_Str"");
    assertThat(discountCode.isActive()).isEqualTo(false);
    assertThat(discountCode.getMaxApplications()).isEqualTo(5L);
    assertThat(discountCode.getMaxApplicationsPerCustomer()).isEqualTo(1L);
    client().executeBlocking(DiscountCodeDeleteCommand.of(discountCode));
  }
);
}",0.9116453325007804
130833,"public TypeSpec generateType(final TypeElement resourceDraftValueType){
  final ClassName concreteBuilderName=typeUtils.getConcreteBuilderType(resourceDraftValueType);
  final ClassName generatedBuilderName=typeUtils.getBuilderType(resourceDraftValueType);
  final List<ExecutableElement> propertyMethods=getAllPropertyMethodsSorted(resourceDraftValueType);
  final List<PropertyGenModel> properties=getPropertyGenModels(propertyMethods);
  final ResourceDraftValue resourceDraftValue=resourceDraftValueType.getAnnotation(ResourceDraftValue.class);
  final List<MethodSpec> builderMethodSpecs=properties.stream().flatMap(m -> createBuilderMethods(resourceDraftValueType,m).stream()).collect(Collectors.toList());
  final List<Modifier> fieldModifiers=new ArrayList<>();
  if (!resourceDraftValue.abstractBuilderClass()) {
    fieldModifiers.add(Modifier.PRIVATE);
  }
  final List<FieldSpec> fieldSpecs=properties.stream().map(m -> createField(m,fieldModifiers)).collect(Collectors.toList());
  final List<ClassName> additionalInterfaceNames=Stream.of(resourceDraftValue.additionalBuilderInterfaces()).map(interfaceName -> ClassName.get(elements.getTypeElement(interfaceName))).collect(Collectors.toList());
  final TypeSpec.Builder builder=TypeSpec.classBuilder(generatedBuilderName).addSuperinterfaces(additionalInterfaceNames).addAnnotation(AnnotationSpec.builder(Generated.class).addMember(""String_Node_Str"",""String_Node_Str"",getClass().getCanonicalName()).addMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + resourceDraftValueType.getQualifiedName().toString()).build());
  final TypeName builderReturnType=typeUtils.getBuilderReturnType(resourceDraftValueType);
  builder.superclass(ClassName.get(Base.class)).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Builder.class),builderReturnType));
  if (resourceDraftValue.abstractBuilderClass()) {
    builder.addJavadoc(""String_Node_Str"",resourceDraftValueType).addJavadoc(""String_Node_Str"").addModifiers(Modifier.ABSTRACT).addTypeVariable(TypeVariableName.get(""String_Node_Str"").withBounds(generatedBuilderName));
  }
 else {
    builder.addJavadoc(""String_Node_Str"",resourceDraftValueType).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
  }
  final List<Modifier> constructorModifiers=new ArrayList<>();
  if (resourceDraftValue.abstractBuilderClass()) {
    constructorModifiers.add(Modifier.PROTECTED);
  }
  builder.addFields(fieldSpecs).addMethod(createDefaultConstructor(constructorModifiers)).addMethod(createConstructor(properties,constructorModifiers)).addMethods(builderMethodSpecs).addMethods(createListPluser(resourceDraftValueType,properties)).addMethods(createListElementPluser(resourceDraftValueType,properties)).addMethods(createSetPluser(resourceDraftValueType,properties)).addMethods(createSetElementPluser(resourceDraftValueType,properties));
  if (resourceDraftValue.gettersForBuilder()) {
    List<MethodSpec> getMethods=properties.stream().map(this::createGetMethod).collect(Collectors.toList());
    builder.addMethods(getMethods);
  }
  final TypeName draftImplType=typeUtils.getDraftImplType(resourceDraftValueType);
  final TypeName buildMethodReturnType=builderReturnType;
  builder.addMethod(createBuildMethod(buildMethodReturnType,draftImplType,propertyMethods)).addMethods(createFactoryMethods(resourceDraftValue.factoryMethods(),properties,concreteBuilderName)).addMethod(createCopyFactoryMethod(resourceDraftValueType,concreteBuilderName,propertyMethods));
  if (resourceDraftValue.copyFactoryMethods().length > 0) {
    createCopyFactoryMethods(resourceDraftValueType,propertyMethods,builder);
  }
  final TypeSpec draftBuilderBaseClass=builder.build();
  return draftBuilderBaseClass;
}","public TypeSpec generateType(final TypeElement resourceDraftValueType){
  final ClassName concreteBuilderName=typeUtils.getConcreteBuilderType(resourceDraftValueType);
  final ClassName generatedBuilderName=typeUtils.getBuilderType(resourceDraftValueType);
  final List<ExecutableElement> propertyMethods=getAllPropertyMethodsSorted(resourceDraftValueType);
  final List<PropertyGenModel> properties=getPropertyGenModels(propertyMethods);
  final ResourceDraftValue resourceDraftValue=resourceDraftValueType.getAnnotation(ResourceDraftValue.class);
  final List<MethodSpec> builderMethodSpecs=properties.stream().flatMap(m -> createBuilderMethods(resourceDraftValueType,m).stream()).collect(Collectors.toList());
  final List<Modifier> fieldModifiers=new ArrayList<>();
  if (!resourceDraftValue.abstractBuilderClass()) {
    fieldModifiers.add(Modifier.PRIVATE);
  }
  final List<FieldSpec> fieldSpecs=properties.stream().map(m -> createField(m,fieldModifiers)).collect(Collectors.toList());
  final List<ClassName> additionalInterfaceNames=Stream.of(resourceDraftValue.additionalBuilderInterfaces()).map(interfaceName -> ClassName.get(elements.getTypeElement(interfaceName))).collect(Collectors.toList());
  final TypeSpec.Builder builder=TypeSpec.classBuilder(generatedBuilderName).addSuperinterfaces(additionalInterfaceNames).addAnnotation(AnnotationSpec.builder(Generated.class).addMember(""String_Node_Str"",""String_Node_Str"",getClass().getCanonicalName()).addMember(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + resourceDraftValueType.getQualifiedName().toString()).build());
  final TypeName builderReturnType=typeUtils.getBuilderReturnType(resourceDraftValueType);
  builder.superclass(ClassName.get(Base.class)).addSuperinterface(ParameterizedTypeName.get(ClassName.get(Builder.class),builderReturnType));
  if (resourceDraftValue.abstractBuilderClass()) {
    builder.addJavadoc(""String_Node_Str"",resourceDraftValueType).addJavadoc(""String_Node_Str"").addModifiers(Modifier.ABSTRACT).addTypeVariable(TypeVariableName.get(""String_Node_Str"").withBounds(generatedBuilderName));
  }
 else {
    builder.addJavadoc(""String_Node_Str"",resourceDraftValueType).addModifiers(Modifier.PUBLIC,Modifier.FINAL);
  }
  final List<Modifier> constructorModifiers=new ArrayList<>();
  if (resourceDraftValue.abstractBuilderClass()) {
    constructorModifiers.add(Modifier.PROTECTED);
  }
  builder.addFields(fieldSpecs).addMethod(createDefaultConstructor(constructorModifiers)).addMethods(builderMethodSpecs).addMethods(createListPluser(resourceDraftValueType,properties)).addMethods(createListElementPluser(resourceDraftValueType,properties)).addMethods(createSetPluser(resourceDraftValueType,properties)).addMethods(createSetElementPluser(resourceDraftValueType,properties));
  if (!properties.isEmpty()) {
    builder.addMethod(createConstructor(properties,constructorModifiers));
  }
  if (resourceDraftValue.gettersForBuilder()) {
    List<MethodSpec> getMethods=properties.stream().map(this::createGetMethod).collect(Collectors.toList());
    builder.addMethods(getMethods);
  }
  final TypeName draftImplType=typeUtils.getDraftImplType(resourceDraftValueType);
  final TypeName buildMethodReturnType=builderReturnType;
  builder.addMethod(createBuildMethod(buildMethodReturnType,draftImplType,propertyMethods)).addMethods(createFactoryMethods(resourceDraftValue.factoryMethods(),properties,concreteBuilderName)).addMethod(createCopyFactoryMethod(resourceDraftValueType,concreteBuilderName,propertyMethods));
  if (resourceDraftValue.copyFactoryMethods().length > 0) {
    createCopyFactoryMethods(resourceDraftValueType,propertyMethods,builder);
  }
  final TypeSpec draftBuilderBaseClass=builder.build();
  return draftBuilderBaseClass;
}",0.9132186996238582
130834,"@Test public void changePaymentState() throws Exception {
  withNonUpdatedOrder(client(),order -> {
    final PaymentState newState=PaymentState.PAID;
    assertThat(order.getPaymentState()).isNotEqualTo(newState);
    final Order updatedOrder=client().executeBlocking(OrderUpdateCommand.of(order,ChangePaymentState.of(newState)));
    assertThat(updatedOrder.getPaymentState()).isEqualTo(newState);
    final Query<OrderPaymentStateChangedMessage> query=MessageQuery.of().withPredicates(m -> m.resource().id().is(updatedOrder.getId())).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1L).forMessageType(OrderPaymentStateChangedMessage.MESSAGE_HINT);
    assertEventually(() -> {
      final PagedQueryResult<OrderPaymentStateChangedMessage> pagedQueryResult=client().executeBlocking(query);
      final Optional<OrderPaymentStateChangedMessage> optMessage=pagedQueryResult.head();
      assertThat(optMessage).isPresent();
      OrderPaymentStateChangedMessage message=optMessage.get();
      assertThat(message.getId()).isEqualTo(updatedOrder.getId());
      assertThat(message.getPaymentState()).isEqualTo(newState);
    }
);
    return updatedOrder;
  }
);
}","@Test public void changePaymentState() throws Exception {
  withNonUpdatedOrder(client(),order -> {
    final PaymentState newState=PaymentState.PAID;
    assertThat(order.getPaymentState()).isNotEqualTo(newState);
    final Order updatedOrder=client().executeBlocking(OrderUpdateCommand.of(order,ChangePaymentState.of(newState)));
    assertThat(updatedOrder.getPaymentState()).isEqualTo(newState);
    final Query<OrderPaymentStateChangedMessage> query=MessageQuery.of().withPredicates(m -> m.resource().id().is(updatedOrder.getId())).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1L).forMessageType(OrderPaymentStateChangedMessage.MESSAGE_HINT);
    assertEventually(() -> {
      final PagedQueryResult<OrderPaymentStateChangedMessage> pagedQueryResult=client().executeBlocking(query);
      final Optional<OrderPaymentStateChangedMessage> optMessage=pagedQueryResult.head();
      assertThat(optMessage).isPresent();
      OrderPaymentStateChangedMessage message=optMessage.get();
      assertThat(message.getResource().getId()).isEqualTo(updatedOrder.getId());
      assertThat(message.getPaymentState()).isEqualTo(newState);
    }
);
    return updatedOrder;
  }
);
}",0.9942244224422442
130835,ProductVariantExpansionModel<T> variant();,ExpansionPathContainer<T> variant();,0.6410256410256411
130836,"@Override public ProductVariantExpansionModel<T> variant(){
  return ProductVariantExpansionModel.of(buildPathExpression(),""String_Node_Str"");
}","@Override public ExpansionPathContainer<T> variant(){
  return expansionPath(""String_Node_Str"");
}",0.7107438016528925
130837,"@Override public ExpansionPathContainer<T> productSlug(){
  return new ExpansionModelImpl<T>(buildPathExpression(),""String_Node_Str"");
}","@Override public ExpansionPathContainer<T> productSlug(){
  return expansionPath(""String_Node_Str"");
}",0.8571428571428571
130838,"private ProductVariantDraftBuilder(){
}","ProductVariantDraftBuilder(@Nullable final List<AssetDraft> assets,final List<AttributeDraft> attributes,final List<Image> images,@Nullable final String key,final List<PriceDraft> prices,@Nullable final String sku){
  super(assets,attributes,images,key,prices,sku);
}",0.2026143790849673
130839,"public ProductVariantDraftBuilder plusAttribute(final AttributeDraft attribute){
  return attributes(listOf(attributes,attribute));
}","public ProductVariantDraftBuilder plusAttribute(final AttributeDraft attribute){
  return attributes != null ? attributes(listOf(attributes,attribute)) : attributes(attribute);
}",0.8553054662379421
130840,"@Test public void queryBySku(){
  final String sku=""String_Node_Str"";
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().sku(sku).plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.S)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).build();
  final ProductDraft productDraft=ProductDraftBuilder.of(productType,en(""String_Node_Str""),en(""String_Node_Str""),masterVariant).build();
  client().executeBlocking(ProductCreateCommand.of(productDraft));
  final PagedQueryResult<Product> result=client().executeBlocking(ProductQuery.of().bySku(sku,STAGED));
  assertThat(result.getResults()).hasSize(1);
  assertThat(result.getResults().get(0).getMasterData().getStaged().getMasterVariant().getSku()).contains(sku);
  assertThat(result.getResults().get(0).getMasterData().getStaged().getMasterVariant().findAttribute(Colors.ATTRIBUTE)).contains(Colors.GREEN);
  assertThat(result.getResults().get(0).getMasterData().getStaged().getMasterVariant().findAttribute(Sizes.ATTRIBUTE)).contains(Sizes.S);
}","@Test public void queryBySku(){
  final String sku=""String_Node_Str"";
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().sku(sku).attributes(Sizes.ATTRIBUTE.draftOf(Sizes.S),Colors.ATTRIBUTE.draftOf(Colors.GREEN)).build();
  final ProductDraft productDraft=ProductDraftBuilder.of(productType,en(""String_Node_Str""),en(""String_Node_Str""),masterVariant).build();
  client().executeBlocking(ProductCreateCommand.of(productDraft));
  final PagedQueryResult<Product> result=client().executeBlocking(ProductQuery.of().bySku(sku,STAGED));
  assertThat(result.getResults()).hasSize(1);
  assertThat(result.getResults().get(0).getMasterData().getStaged().getMasterVariant().getSku()).contains(sku);
  assertThat(result.getResults().get(0).getMasterData().getStaged().getMasterVariant().findAttribute(Colors.ATTRIBUTE)).contains(Colors.GREEN);
  assertThat(result.getResults().get(0).getMasterData().getStaged().getMasterVariant().findAttribute(Sizes.ATTRIBUTE)).contains(Sizes.S);
}",0.9880478087649402
130841,"private ProductVariantDraft createBananaVariant(){
  return ProductVariantDraftBuilder.of().plusAttribute(Banana.bananaColor.draftOf(""String_Node_Str"")).plusAttribute(Banana.nutrients.draftOf(asSet(AttributeContainerDraft.of(asList(Nutrient.servingSize.draftOf(1.5D),Nutrient.servingSizeUOM.draftOf(""String_Node_Str""),Nutrient.nutrientInformation.draftOf(asSet(AttributeContainerDraft.of(NutrientInfo.nutrientTypeCode.draftOf(""String_Node_Str""),NutrientInfo.measurementPrecision.draftOf(""String_Node_Str""),NutrientInfo.quantityContained.draftOf(3.8D),NutrientInfo.quantityContainedUOM.draftOf(""String_Node_Str"")),AttributeContainerDraft.of(NutrientInfo.nutrientTypeCode.draftOf(""String_Node_Str""),NutrientInfo.measurementPrecision.draftOf(""String_Node_Str""),NutrientInfo.quantityContained.draftOf(0.06D),NutrientInfo.quantityContainedUOM.draftOf(""String_Node_Str"")))))),AttributeContainerDraft.of(asList(Nutrient.servingSize.draftOf(0.05D),Nutrient.servingSizeUOM.draftOf(""String_Node_Str""),Nutrient.nutrientInformation.draftOf(asSet(AttributeContainerDraft.of(asList(NutrientInfo.nutrientTypeCode.draftOf(""String_Node_Str""),NutrientInfo.measurementPrecision.draftOf(""String_Node_Str""),NutrientInfo.quantityContained.draftOf(1.3D),NutrientInfo.quantityContainedUOM.draftOf(""String_Node_Str"")))))))))).sku(randomKey()).build();
}","private ProductVariantDraft createBananaVariant(){
  return ProductVariantDraftBuilder.of().attributes(Banana.bananaColor.draftOf(""String_Node_Str""),Banana.nutrients.draftOf(asSet(AttributeContainerDraft.of(asList(Nutrient.servingSize.draftOf(1.5D),Nutrient.servingSizeUOM.draftOf(""String_Node_Str""),Nutrient.nutrientInformation.draftOf(asSet(AttributeContainerDraft.of(NutrientInfo.nutrientTypeCode.draftOf(""String_Node_Str""),NutrientInfo.measurementPrecision.draftOf(""String_Node_Str""),NutrientInfo.quantityContained.draftOf(3.8D),NutrientInfo.quantityContainedUOM.draftOf(""String_Node_Str"")),AttributeContainerDraft.of(NutrientInfo.nutrientTypeCode.draftOf(""String_Node_Str""),NutrientInfo.measurementPrecision.draftOf(""String_Node_Str""),NutrientInfo.quantityContained.draftOf(0.06D),NutrientInfo.quantityContainedUOM.draftOf(""String_Node_Str"")))))),AttributeContainerDraft.of(asList(Nutrient.servingSize.draftOf(0.05D),Nutrient.servingSizeUOM.draftOf(""String_Node_Str""),Nutrient.nutrientInformation.draftOf(asSet(AttributeContainerDraft.of(asList(NutrientInfo.nutrientTypeCode.draftOf(""String_Node_Str""),NutrientInfo.measurementPrecision.draftOf(""String_Node_Str""),NutrientInfo.quantityContained.draftOf(1.3D),NutrientInfo.quantityContainedUOM.draftOf(""String_Node_Str"")))))))))).sku(randomKey()).build();
}",0.9507202426080364
130842,"@Override public ProductDraft get(){
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.S)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).build();
  final LocalizedString slug=en(name).slugifiedUnique();
  return ProductDraftBuilder.of(productType,en(name),slug,masterVariant).description(en(name)).metaTitle(en(""String_Node_Str"")).metaDescription(en(""String_Node_Str"")).metaKeywords(en(""String_Node_Str"")).build();
}","@Override public ProductDraft get(){
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().attributes(Sizes.ATTRIBUTE.draftOf(Sizes.S),Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).build();
  final LocalizedString slug=en(name).slugifiedUnique();
  return ProductDraftBuilder.of(productType,en(name),slug,masterVariant).description(en(name)).metaTitle(en(""String_Node_Str"")).metaDescription(en(""String_Node_Str"")).metaKeywords(en(""String_Node_Str"")).build();
}",0.97678916827853
130843,"@Override public ProductDraft get(){
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.S)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(PriceDraft.of(MoneyImpl.ofCents(1234,EUR))).build();
  final ProductVariantDraft secondVariant=ProductVariantDraftBuilder.of().plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.M)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(PriceDraft.of(MoneyImpl.ofCents(1234,EUR)),PriceDraft.of(MoneyImpl.ofCents(600,EUR)).withCustomerGroup(customerGroup)).build();
  final LocalizedString slug=en(name).slugifiedUnique();
  return ProductDraftBuilder.of(productType,en(name),slug,masterVariant).variants(asList(secondVariant)).description(en(name)).metaTitle(en(""String_Node_Str"")).metaDescription(en(""String_Node_Str"")).metaKeywords(en(""String_Node_Str"")).build();
}","@Override public ProductDraft get(){
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().attributes(Sizes.ATTRIBUTE.draftOf(Sizes.S),Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(PriceDraft.of(MoneyImpl.ofCents(1234,EUR))).build();
  final ProductVariantDraft secondVariant=ProductVariantDraftBuilder.of().attributes(Sizes.ATTRIBUTE.draftOf(Sizes.M),Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(PriceDraft.of(MoneyImpl.ofCents(1234,EUR)),PriceDraft.of(MoneyImpl.ofCents(600,EUR)).withCustomerGroup(customerGroup)).build();
  final LocalizedString slug=en(name).slugifiedUnique();
  return ProductDraftBuilder.of(productType,en(name),slug,masterVariant).variants(asList(secondVariant)).description(en(name)).metaTitle(en(""String_Node_Str"")).metaDescription(en(""String_Node_Str"")).metaKeywords(en(""String_Node_Str"")).build();
}",0.905982905982906
130844,"private static CartDiscountDraftBuilder newCartDiscountDraftBuilder(final String predicate){
  final ZonedDateTime validFrom=ZonedDateTime.now();
  final ZonedDateTime validUntil=validFrom.plusSeconds(8000);
  final LocalizedString name=en(""String_Node_Str"");
  final LocalizedString description=en(""String_Node_Str"");
  final AbsoluteCartDiscountValue value=CartDiscountValue.ofAbsolute(MoneyImpl.of(10,EUR));
  final LineItemsTarget target=LineItemsTarget.of(""String_Node_Str"");
  final String sortOrder=randomSortOrder();
  final boolean requiresDiscountCode=false;
  return CartDiscountDraftBuilder.of(name,CartDiscountPredicate.of(predicate),value,target,sortOrder,requiresDiscountCode).validFrom(validFrom).validUntil(validUntil).description(description);
}","private static CartDiscountDraftBuilder newCartDiscountDraftBuilder(final String predicate){
  final ZonedDateTime validFrom=ZonedDateTime.now().minusHours(1);
  final ZonedDateTime validUntil=validFrom.plusSeconds(8000);
  final LocalizedString name=en(""String_Node_Str"");
  final LocalizedString description=en(""String_Node_Str"");
  final AbsoluteCartDiscountValue value=CartDiscountValue.ofAbsolute(MoneyImpl.of(10,EUR));
  final LineItemsTarget target=LineItemsTarget.of(""String_Node_Str"");
  final String sortOrder=randomSortOrder();
  final boolean requiresDiscountCode=false;
  return CartDiscountDraftBuilder.of(name,CartDiscountPredicate.of(predicate),value,target,sortOrder,requiresDiscountCode).validFrom(validFrom).validUntil(validUntil).description(description);
}",0.990909090909091
130845,"@Test public void expandLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(15000);
  withDiscountedLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.lineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    assertEventually(() -> {
      final Cart loadedCart=client().executeBlocking(query).head().get();
      final Reference<CartDiscount> cartDiscountReference=loadedCart.getLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
      assertThat(cartDiscountReference.getObj()).isNotNull();
      final CartDiscount lineItemDiscount=cartDiscountReference.getObj();
      assertThat(lineItemDiscount).isNotNull();
      final CartDiscountValue customLineItemDiscountValue=lineItemDiscount.getValue();
      assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    }
);
  }
);
}","@Test public void expandLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(15000);
  withCartHavingCartDiscountedLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.lineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    assertEventually(() -> {
      final Cart loadedCart=client().executeBlocking(query).head().get();
      final Reference<CartDiscount> cartDiscountReference=loadedCart.getLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
      assertThat(cartDiscountReference.getObj()).isNotNull();
      final CartDiscount lineItemDiscount=cartDiscountReference.getObj();
      final CartDiscountValue customLineItemDiscountValue=lineItemDiscount.getValue();
      assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    }
);
  }
);
}",0.8917431192660551
130846,"@Test public void expandCustomLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(10000);
  withDiscountedCustomLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.customLineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    assertEventually(() -> {
      final Cart loadedCart=client().executeBlocking(query).head().get();
      final Reference<CartDiscount> cartDiscountReference=loadedCart.getCustomLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
      assertThat(cartDiscountReference.getObj()).isNotNull();
      final CartDiscount customLineItemDiscount=cartDiscountReference.getObj();
      assertThat(customLineItemDiscount).isNotNull();
      final CartDiscountValue customLineItemDiscountValue=customLineItemDiscount.getValue();
      assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    }
);
  }
);
}","@Test public void expandCustomLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(10000);
  withCartHavingDiscountedCustomLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.customLineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    assertEventually(() -> {
      final Cart loadedCart=client().executeBlocking(query).head().get();
      final Reference<CartDiscount> cartDiscountReference=loadedCart.getCustomLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
      assertThat(cartDiscountReference.getObj()).isNotNull();
      final CartDiscount customLineItemDiscount=cartDiscountReference.getObj();
      final CartDiscountValue customLineItemDiscountValue=customLineItemDiscount.getValue();
      assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    }
);
  }
);
}",0.8890860692102928
130847,"public static void withCartHavingDiscountedCustomLineItem(final BlockingSphereClient client,final RelativeCartDiscountValue relativeCartDiscountValue,final Consumer<Cart> consumer){
  withTaxedProduct(client,product -> {
    withCustomerAndFilledCart(client,(customer,cart) -> {
      CartDiscountFixtures.withCartDiscount(client,builder -> builder.cartPredicate(CartDiscountPredicate.of(""String_Node_Str"" + customer.getId() + ""String_Node_Str"")).value(relativeCartDiscountValue).target(CustomLineItemsTarget.of(""String_Node_Str"")),cartDiscount -> {
        assertThat(cart.getCustomLineItems()).hasSize(0);
        final MonetaryAmount money=MoneyImpl.of(""String_Node_Str"",EUR);
        final String slug=""String_Node_Str"";
        final LocalizedString name=en(""String_Node_Str"");
        final CustomLineItemDraft item=CustomLineItemDraft.of(name,slug,money,product.getTaxCategory(),5L,null);
        final AddCustomLineItem addCustomLineItemAction=AddCustomLineItem.of(item);
        final Cart updatedCart=client.executeBlocking(CartUpdateCommand.of(cart,asList(addCustomLineItemAction)));
        consumer.accept(updatedCart);
      }
);
      final Cart cartToDelete=client.executeBlocking(CartByIdGet.of(cart));
      client.executeBlocking(CartDeleteCommand.of(cartToDelete));
    }
);
  }
);
}","public static void withCartHavingDiscountedCustomLineItem(final BlockingSphereClient client,final RelativeCartDiscountValue relativeCartDiscountValue,final UnaryOperator<Cart> op){
  withTaxedProduct(client,product -> {
    withCustomer(client,(customer) -> {
      CartDiscountFixtures.withCartDiscount(client,builder -> builder.cartPredicate(CartDiscountPredicate.of(""String_Node_Str"" + customer.getId() + ""String_Node_Str"")).value(relativeCartDiscountValue).target(CustomLineItemsTarget.of(""String_Node_Str"")),cartDiscount -> {
        withCart(client,(cart) -> {
          assertThat(cart.getCustomLineItems()).hasSize(0);
          final MonetaryAmount money=MoneyImpl.of(""String_Node_Str"",EUR);
          final String slug=""String_Node_Str"";
          final LocalizedString name=en(""String_Node_Str"");
          final CustomLineItemDraft item=CustomLineItemDraft.of(name,slug,money,product.getTaxCategory(),5L,null);
          final AddCustomLineItem addCustomLineItemAction=AddCustomLineItem.of(item);
          final List<UpdateAction<Cart>> updateActions=asList(addCustomLineItemAction,SetCustomerId.of(customer.getId()),Recalculate.of().withUpdateProductData(true));
          final Cart updatedCart=client.executeBlocking(CartUpdateCommand.of(cart,updateActions));
          final Cart cartToDelete=op.apply(updatedCart);
          return cartToDelete;
        }
);
      }
);
    }
);
  }
);
}",0.7799113737075333
130848,"public static void withCartHavingCartDiscountedLineItem(final BlockingSphereClient client,final RelativeCartDiscountValue relativeCartDiscountValue,final Consumer<Cart> consumer){
  withTaxedProduct(client,product -> {
    withCart(client,(cart) -> {
      withCustomer(client,(customer) -> {
        CartDiscountFixtures.withCartDiscount(client,builder -> builder.cartPredicate(CartDiscountPredicate.of(""String_Node_Str"" + customer.getId() + ""String_Node_Str"")).value(relativeCartDiscountValue).target(LineItemsTarget.of(""String_Node_Str"" + product.getId() + ""String_Node_Str"")),cartDiscount -> {
          assertThat(cart.getLineItems()).hasSize(0);
          final long quantity=3;
          final String productId=product.getId();
          final AddLineItem addLineItemAction=AddLineItem.of(productId,1,quantity);
          final List<UpdateAction<Cart>> updateActions=asList(addLineItemAction,SetCustomerId.of(customer.getId()),Recalculate.of().withUpdateProductData(true));
          final Cart updatedCart=client.executeBlocking(CartUpdateCommand.of(cart,updateActions));
          consumer.accept(updatedCart);
        }
);
      }
);
      final Cart cartToDelete=client.executeBlocking(CartByIdGet.of(cart));
      return cartToDelete;
    }
);
  }
);
}","public static void withCartHavingCartDiscountedLineItem(final BlockingSphereClient client,final RelativeCartDiscountValue relativeCartDiscountValue,final UnaryOperator<Cart> op){
  withTaxedProduct(client,product -> {
    withCustomer(client,(customer) -> {
      CartDiscountFixtures.withCartDiscount(client,builder -> builder.cartPredicate(CartDiscountPredicate.of(""String_Node_Str"" + customer.getId() + ""String_Node_Str"")).value(relativeCartDiscountValue).target(LineItemsTarget.of(""String_Node_Str"" + product.getId() + ""String_Node_Str"")),cartDiscount -> {
        withCart(client,(cart) -> {
          assertThat(cart.getLineItems()).hasSize(0);
          final long quantity=3;
          final String productId=product.getId();
          final AddLineItem addLineItemAction=AddLineItem.of(productId,1,quantity);
          final List<UpdateAction<Cart>> updateActions=asList(addLineItemAction,SetCustomerId.of(customer.getId()),Recalculate.of().withUpdateProductData(true));
          final Cart updatedCart=client.executeBlocking(CartUpdateCommand.of(cart,updateActions));
          final Cart cartToDelete=op.apply(updatedCart);
          return cartToDelete;
        }
);
      }
);
    }
);
  }
);
}",0.6731391585760518
130849,"@Test public void expandLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(15000);
  withCartHavingCartDiscountedLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.lineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    assertEventually(() -> {
      final Cart loadedCart=client().executeBlocking(query).head().get();
      final Reference<CartDiscount> cartDiscountReference=loadedCart.getLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
      assertThat(cartDiscountReference.getObj()).isNotNull();
      final CartDiscount lineItemDiscount=cartDiscountReference.getObj();
      final CartDiscountValue customLineItemDiscountValue=lineItemDiscount.getValue();
      assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    }
);
  }
);
}","@Test public void expandLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(15000);
  withCartHavingCartDiscountedLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.lineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    final Cart loadedCart=client().executeBlocking(query).head().get();
    final Reference<CartDiscount> cartDiscountReference=loadedCart.getLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
    assertThat(cartDiscountReference.getObj()).isNotNull();
    final CartDiscount lineItemDiscount=cartDiscountReference.getObj();
    final CartDiscountValue customLineItemDiscountValue=lineItemDiscount.getValue();
    assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    return loadedCart;
  }
);
}",0.729589428975932
130850,"@Test public void expandCustomLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(10000);
  withCartHavingDiscountedCustomLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.customLineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    assertEventually(() -> {
      final Cart loadedCart=client().executeBlocking(query).head().get();
      final Reference<CartDiscount> cartDiscountReference=loadedCart.getCustomLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
      assertThat(cartDiscountReference.getObj()).isNotNull();
      final CartDiscount customLineItemDiscount=cartDiscountReference.getObj();
      final CartDiscountValue customLineItemDiscountValue=customLineItemDiscount.getValue();
      assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    }
);
  }
);
}","@Test public void expandCustomLineItemsDiscount() throws Exception {
  final RelativeCartDiscountValue relativeCartDiscountValue=RelativeCartDiscountValue.of(10000);
  withCartHavingDiscountedCustomLineItem(client(),relativeCartDiscountValue,(cart) -> {
    final CartQuery query=CartQuery.of().withPredicates(m -> m.id().is(cart.getId())).withExpansionPaths(m -> m.customLineItems().discountedPricePerQuantity().discountedPrice().includedDiscounts().discount());
    final Cart loadedCart=client().executeBlocking(query).head().get();
    final Reference<CartDiscount> cartDiscountReference=loadedCart.getCustomLineItems().get(0).getDiscountedPricePerQuantity().get(0).getDiscountedPrice().getIncludedDiscounts().get(0).getDiscount();
    assertThat(cartDiscountReference.getObj()).isNotNull();
    final CartDiscount customLineItemDiscount=cartDiscountReference.getObj();
    final CartDiscountValue customLineItemDiscountValue=customLineItemDiscount.getValue();
    assertThat(customLineItemDiscountValue).isEqualTo(relativeCartDiscountValue);
    return loadedCart;
  }
);
}",0.7320201557489693
130851,"@Test public void retryOnInvalidToken() throws Exception {
  final HttpClient httpClient=new HttpClient(){
    private boolean tokenIsValid=true;
    @Override public CompletionStage<HttpResponse> execute(    final HttpRequest httpRequest){
      return CompletableFutureUtils.successful(executeSync(httpRequest));
    }
    private HttpResponse executeSync(    final HttpRequest httpRequest){
      if (httpRequest.getUrl().contains(""String_Node_Str"")) {
        if (tokenIsValid) {
          return HttpResponse.of(200,String.format(""String_Node_Str"",getSphereClientConfig().getProjectKey()));
        }
 else {
          tokenIsValid=true;
          return HttpResponse.of(200,String.format(""String_Node_Str"",getSphereClientConfig().getProjectKey()));
        }
      }
      if (httpRequest.getUrl().contains(""String_Node_Str"")) {
        tokenIsValid=false;
        return HttpResponse.of(404);
      }
      if (httpRequest.getUrl().contains(""String_Node_Str"")) {
        if (tokenIsValid && httpRequest.getHeaders().getHeader(HttpHeaders.AUTHORIZATION).get(0).equals(""String_Node_Str"")) {
          return HttpResponse.of(404);
        }
 else {
          return HttpResponse.of(401,""String_Node_Str"");
        }
      }
      return HttpResponse.of(500);
    }
    @Override public void close(){
    }
  }
;
  final SphereAccessTokenSupplier tokenSupplier=SphereAccessTokenSupplier.ofAutoRefresh(getSphereClientConfig(),httpClient,false);
  try (final SphereClient client=SphereClient.of(getSphereClientConfig(),httpClient,tokenSupplier)){
    assertThat(client.execute(CategoryByIdGet.of(""String_Node_Str"")).toCompletableFuture().join()).isNull();
    assertThat(client.execute(ChannelByIdGet.of(""String_Node_Str"")).toCompletableFuture().join()).isNull();
  }
 }","@Test public void retryOnInvalidToken() throws Exception {
  final HttpClient httpClient=new HttpClient(){
    private volatile boolean tokenIsValid=true;
    @Override public CompletionStage<HttpResponse> execute(    final HttpRequest httpRequest){
      return CompletableFutureUtils.successful(executeSync(httpRequest));
    }
    private HttpResponse executeSync(    final HttpRequest httpRequest){
      if (httpRequest.getUrl().contains(""String_Node_Str"")) {
        if (tokenIsValid) {
          return HttpResponse.of(200,String.format(""String_Node_Str"",getSphereClientConfig().getProjectKey()));
        }
 else {
          tokenIsValid=true;
          return HttpResponse.of(200,String.format(""String_Node_Str"",getSphereClientConfig().getProjectKey()));
        }
      }
      if (httpRequest.getUrl().contains(""String_Node_Str"")) {
        tokenIsValid=false;
        return HttpResponse.of(404);
      }
      if (httpRequest.getUrl().contains(""String_Node_Str"")) {
        if (tokenIsValid && httpRequest.getHeaders().getHeader(HttpHeaders.AUTHORIZATION).get(0).equals(""String_Node_Str"")) {
          return HttpResponse.of(404);
        }
 else {
          return HttpResponse.of(401,""String_Node_Str"");
        }
      }
      return HttpResponse.of(500);
    }
    @Override public void close(){
    }
  }
;
  final SphereAccessTokenSupplier tokenSupplier=SphereAccessTokenSupplier.ofAutoRefresh(getSphereClientConfig(),httpClient,false);
  try (final SphereClient client=SphereClient.of(getSphereClientConfig(),httpClient,tokenSupplier)){
    assertThat(client.execute(CategoryByIdGet.of(""String_Node_Str"")).toCompletableFuture().join()).isNull();
    assertThat(client.execute(ChannelByIdGet.of(""String_Node_Str"")).toCompletableFuture().join()).isNull();
  }
 }",0.9974655026753028
130852,"/** 
 * @param addressId Is the Id of the address to find.
 * @return Address or null
 */
@Nullable default Address getAddressById(final String addressId){
  return findAddressById(addressId).orElse(null);
}","/** 
 * Find the address in   {@link #getAddresses()} by the address id
 * @param addressId the Id string of the address to find
 * @return Address or null
 */
@Nullable default Address getAddressById(final String addressId){
  return findAddressById(addressId).orElse(null);
}",0.71900826446281
130853,"public static SphereClient ofRetry(final SphereClient delegate){
  final int maxAttempts=5;
  final List<RetryRule> retryRules=singletonList(RetryRule.of(RetryPredicate.ofMatchingStatusCodes(BAD_GATEWAY_502,SERVICE_UNAVAILABLE_503,GATEWAY_TIMEOUT_504),unused -> RetryAction.ofScheduledRetry(maxAttempts,context -> Duration.ofSeconds(context.getAttempt() * 2))));
  return RetrySphereClientDecorator.of(delegate,retryRules);
}","public static SphereClient ofRetry(final SphereClient delegate){
  final int maxAttempts=5;
  final List<RetryRule> retryRules=singletonList(RetryRule.of(RetryPredicate.ofMatchingStatusCodes(BAD_GATEWAY_502,SERVICE_UNAVAILABLE_503,GATEWAY_TIMEOUT_504),RetryAction.ofScheduledRetry(maxAttempts,context -> Duration.ofSeconds(context.getAttempt() * 2))));
  return RetrySphereClientDecorator.of(delegate,retryRules);
}",0.988095238095238
130854,"public static SphereClient ofRetry(final SphereClient delegate){
  final List<RetryRule> retryRules=singletonList(RetryRule.of(isDeleteAndNewVersionIsKnown(),c -> retryWithNewVersion()));
  return RetrySphereClientDecorator.of(delegate,retryRules);
}","public static SphereClient ofRetry(final SphereClient delegate){
  final List<RetryRule> retryRules=singletonList(RetryRule.of(isDeleteAndNewVersionIsKnown(),retryWithNewVersion()));
  return RetrySphereClientDecorator.of(delegate,retryRules);
}",0.98989898989899
130855,"@Override public PaymentStatus build(){
  return new PaymentStatus(interfaceCode,interfaceText,state);
}","@Override public PaymentStatus build(){
  return new PaymentStatusImpl(interfaceCode,interfaceText,state);
}",0.981132075471698
130856,"protected <E extends SphereEnumeration>SphereEnumerationOptionalQueryModel<T,E> enumerationQueryModel(final String pathSegment){
  return new SphereEnumerationQueryModelImpl<>(this,pathSegment);
}","protected <E extends SphereEnumeration>SphereEnumerationQueryModelImpl<T,E> enumerationQueryModel(final String pathSegment){
  return new SphereEnumerationQueryModelImpl<>(this,pathSegment);
}",0.9690721649484536
130857,CategoryExpansionModel<ProductProjection> categories();,CategoryExpansionModel<T> categories();,0.8085106382978723
130858,ProductVariantExpansionModel<ProductProjection> allVariants();,ProductVariantExpansionModel<T> allVariants();,0.8333333333333334
130859,"@Override public CategoryExpansionModel<ProductProjection> categories(){
  return CategoryExpansionModel.of(pathExpression(),""String_Node_Str"");
}","@Override public CategoryExpansionModel<T> categories(){
  return CategoryExpansionModel.of(pathExpression(),""String_Node_Str"");
}",0.9347826086956522
130860,"@Override public ProductVariantExpansionModel<ProductProjection> allVariants(){
  final List<String> parents=pathExpression();
  final List<String> currentPaths=asList(MASTER_VARIANT,VARIANTS);
  final List<String> paths;
  if (parents.isEmpty()) {
    paths=currentPaths;
  }
 else {
    paths=parents.stream().flatMap(p -> currentPaths.stream().map(c -> (isEmpty(p) ? ""String_Node_Str"" : p + ""String_Node_Str"") + c)).collect(Collectors.toList());
  }
  return new ProductVariantExpansionModelImpl<>(paths,null);
}","@Override public ProductVariantExpansionModel<T> allVariants(){
  final List<String> parents=pathExpression();
  final List<String> currentPaths=asList(MASTER_VARIANT,VARIANTS);
  final List<String> paths;
  if (parents.isEmpty()) {
    paths=currentPaths;
  }
 else {
    paths=parents.stream().flatMap(p -> currentPaths.stream().map(c -> (isEmpty(p) ? ""String_Node_Str"" : p + ""String_Node_Str"") + c)).collect(Collectors.toList());
  }
  return new ProductVariantExpansionModelImpl<>(paths,null);
}",0.9822485207100592
130861,"@Test public void customerAlreadyRegistered(){
  withCustomer(client(),customer -> {
    final String email=customer.getEmail();
    final CustomerDraftDsl draft=CustomerDraftBuilder.of(email,""String_Node_Str"").build();
    final CustomerCreateCommand cmd=CustomerCreateCommand.of(draft);
    final Throwable throwable=catchThrowable(() -> client().executeBlocking(cmd));
    assertThat(throwable).isInstanceOf(ErrorResponseException.class);
    final ErrorResponseException e=(ErrorResponseException)throwable;
    assertThat(e.getErrors().get(0).getCode()).isEqualTo(DuplicateFieldError.CODE);
    final DuplicateFieldError error=e.getErrors().get(0).as(DuplicateFieldError.class);
    assertThat(error.getDuplicateValue()).isEqualTo(email);
    assertThat(error.getField()).isEqualTo(""String_Node_Str"");
  }
);
}","@Test public void customerAlreadyRegistered(){
  withCustomer(client(),customer -> {
    final String email=customer.getEmail();
    final CustomerDraftDsl draft=CustomerDraftBuilder.of(email,""String_Node_Str"").build();
    final CustomerCreateCommand cmd=CustomerCreateCommand.of(draft);
    final Throwable throwable=catchThrowable(() -> client().executeBlocking(cmd));
    assertThat(throwable).isInstanceOf(ErrorResponseException.class);
    final ErrorResponseException e=(ErrorResponseException)throwable;
    assertThat(e.getErrors().get(0).getCode()).isEqualTo(DuplicateFieldError.CODE);
    final DuplicateFieldError error=e.getErrors().get(0).as(DuplicateFieldError.class);
    assertThat(error.getDuplicateValue().toLowerCase()).isEqualTo(email);
    assertThat(error.getField()).isEqualTo(""String_Node_Str"");
  }
);
}",0.9914841849148418
130862,"@Test public void toStringDoesNotContainPassword(){
  final CustomerPasswordResetCommand cmd=CustomerPasswordResetCommand.of(Versioned.of(""String_Node_Str"",3L),""String_Node_Str"",""String_Node_Str"");
  assertThat(cmd.toString()).doesNotContain(""String_Node_Str"");
}","@Test public void toStringDoesNotContainPassword(){
  final CustomerPasswordResetCommand cmd=CustomerPasswordResetCommand.ofTokenAndPassword(""String_Node_Str"",""String_Node_Str"");
  assertThat(cmd.toString()).doesNotContain(""String_Node_Str"");
}",0.8954635108481263
130863,"@Override public RootJsonQueryModel<T> value(){
  return new CustomObjectValueRootJsonQueryModelImpl(null,""String_Node_Str"");
}","@Override public RootJsonQueryModel<T> value(){
  return new CustomObjectValueRootJsonQueryModelImpl<>(null,""String_Node_Str"");
}",0.9921875
130864,"/** 
 * Creates a blocking client with a configured default timeout for blocking requests. The asynchronous calls won't have a timeout by default.
 * @param delegate underlying sphere client which may be initialized with the {@link SphereClientFactory}.
 * @param defaultTimeout the default maximum duration to wait (to block the thread) which should be greater than the timeout of the underlying HTTP client
 * @return wrapped client which can perform blocking calls.
 */
static BlockingSphereClient of(final SphereClient delegate,final Duration defaultTimeout){
  return of(delegate,defaultTimeout.get(ChronoUnit.NANOS),TimeUnit.NANOSECONDS);
}","/** 
 * Creates a blocking client with a configured default timeout for blocking requests. The asynchronous calls won't have a timeout by default.
 * @param delegate underlying sphere client which may be initialized with the {@link SphereClientFactory}.
 * @param defaultTimeout the default maximum duration to wait (to block the thread) which should be greater than the timeout of the underlying HTTP client
 * @return wrapped client which can perform blocking calls.
 */
static BlockingSphereClient of(final SphereClient delegate,final Duration defaultTimeout){
  return of(delegate,defaultTimeout.toMillis(),TimeUnit.MILLISECONDS);
}",0.9719188767550702
130865,"@Override public <T>T executeBlocking(final SphereRequest<T> sphereRequest,final Duration duration){
  return executeBlocking(sphereRequest,duration.get(ChronoUnit.NANOS),TimeUnit.NANOSECONDS);
}","@Override public <T>T executeBlocking(final SphereRequest<T> sphereRequest,final Duration duration){
  return executeBlocking(sphereRequest,duration.toMillis(),TimeUnit.MILLISECONDS);
}",0.9105263157894736
130866,"public static SphereClient of(final SphereClient delegate,final Duration duration){
  return of(delegate,duration.get(ChronoUnit.NANOS),TimeUnit.NANOSECONDS);
}","public static SphereClient of(final SphereClient delegate,final Duration duration){
  return of(delegate,duration.toMillis(),TimeUnit.MILLISECONDS);
}",0.8903225806451613
130867,"public static <S extends CompletionStage<T>,T>Collector<S,?,List<T>> blockingWaitForEachCollector(final Duration duration){
  return blockingWaitForEachCollector(duration.get(ChronoUnit.NANOS),TimeUnit.NANOSECONDS);
}","public static <S extends CompletionStage<T>,T>Collector<S,?,List<T>> blockingWaitForEachCollector(final Duration duration){
  return blockingWaitForEachCollector(duration.toMillis(),TimeUnit.MILLISECONDS);
}",0.8867924528301887
130868,"public ExpansionModelImpl(final List<String> parentExpressions,final String path){
  final List<String> nullSafeParentExpressions=parentExpressions == null ? Collections.singletonList(""String_Node_Str"") : parentExpressions;
  this.pathExpressions=!isEmpty(path) ? nullSafeParentExpressions.stream().map(p -> isEmpty(p) ? path : p + ""String_Node_Str"" + path).collect(Collectors.toList()) : nullSafeParentExpressions;
}","public ExpansionModelImpl(@Nullable final List<String> parentExpressions,@Nullable final String path){
  this(parentExpressions,path != null ? singletonList(path) : null);
}",0.4847457627118644
130869,"@Test public void execution() throws Exception {
  withFilledCart(client(),cart -> {
    final OrderFromCartCreateCommand createCommand=OrderFromCartCreateCommand.of(cart).plusExpansionPaths(m -> m.cart());
    final Order order=client().executeBlocking(createCommand);
    assertThat(order.getLineItems()).isEqualTo(cart.getLineItems());
    assertThat(order.getCustomLineItems()).isEqualTo(cart.getCustomLineItems());
    assertThat(order.getCart().getId()).isEqualTo(cart.getId());
    final Cart orderedCart=order.getCart().getObj();
    assertThat(orderedCart).isNotNull();
    assertThat(orderedCart.getId()).isEqualTo(cart.getId());
    assertThat(orderedCart.getCartState()).isEqualTo(CartState.ORDERED);
  }
);
}","@Test public void execution() throws Exception {
  withFilledCart(client(),cart -> {
    final OrderFromCartCreateCommand createCommand=OrderFromCartCreateCommand.of(cart).plusExpansionPaths(m -> m.cart());
    final Order order=client().executeBlocking(createCommand);
    assertThat(order.getLineItems()).isEqualTo(cart.getLineItems());
    assertThat(order.getCustomLineItems()).isEqualTo(cart.getCustomLineItems());
    assertThat(order.getCart().getId()).isEqualTo(cart.getId());
    assertThat(order.getCart()).is(expanded());
    final Cart orderedCart=order.getCart().getObj();
    assertThat(orderedCart).isNotNull();
    assertThat(orderedCart.getId()).isEqualTo(cart.getId());
    assertThat(orderedCart.getCartState()).isEqualTo(CartState.ORDERED);
  }
);
}",0.9677852348993288
130870,"public BadRequestException(){
  super(400);
}","public BadRequestException(final String message){
  super(message,400);
}",0.7627118644067796
130871,"ErrorResponseException(final Integer statusCode,final String message,final List<? extends SphereError> errors){
  this.statusCode=statusCode;
  this.message=message;
  this.errors=errors == null ? Collections.<SphereError>emptyList() : errors;
}","ErrorResponseException(final Integer statusCode,final String message,final List<? extends SphereError> errors){
  super(message);
  this.statusCode=statusCode;
  this.errors=errors == null ? Collections.<SphereError>emptyList() : errors;
}",0.9132231404958676
130872,"public static void withShippingMethodForGermany(final TestClient client,final Consumer<ShippingMethod> consumer){
  final Optional<Zone> zoneOptional=client.execute(ZoneQuery.of().byCountry(DE)).head();
  final Zone zone;
  if (zoneOptional.isPresent()) {
    zone=zoneOptional.get();
  }
 else {
    zone=client.execute(ZoneCreateCommand.of(ZoneDraft.of(""String_Node_Str"",asSet(Location.of(DE)))));
  }
  withUpdateableShippingMethod(client,shippingMethodWithOutZone -> {
    final ShippingMethod updated=client.execute(ShippingMethodUpdateCommand.of(shippingMethodWithOutZone,AddZone.of(zone)));
    return updated;
  }
);
}","public static void withShippingMethodForGermany(final TestClient client,final Consumer<ShippingMethod> consumer){
  final Optional<Zone> zoneOptional=client.execute(ZoneQuery.of().byCountry(DE)).head();
  final Zone zone;
  if (zoneOptional.isPresent()) {
    zone=zoneOptional.get();
  }
 else {
    zone=client.execute(ZoneCreateCommand.of(ZoneDraft.of(""String_Node_Str"",asSet(Location.of(DE)))));
  }
  withUpdateableShippingMethod(client,shippingMethodWithOutZone -> {
    final ShippingMethod updated=client.execute(ShippingMethodUpdateCommand.of(shippingMethodWithOutZone,asList(AddZone.of(zone),AddShippingRate.of(ShippingRate.of(EURO_1),zone))));
    consumer.accept(updated);
    return updated;
  }
);
}",0.9141150112023898
130873,"/** 
 * Encodes urls with US-ASCII.
 * @param s String which should be URL encoded
 * @return url encoded s
 */
public static String urlEncode(final String s){
  final String encoding=""String_Node_Str"";
  try {
    return URLEncoder.encode(s,encoding);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new RuntimeException(String.format(""String_Node_Str"",s,encoding));
  }
}","/** 
 * Encodes urls with UTF-8.
 * @param s String which should be URL encoded
 * @return url encoded s
 */
public static String urlEncode(final String s){
  final String encoding=""String_Node_Str"";
  try {
    return URLEncoder.encode(s,encoding);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new CompletionException(String.format(""String_Node_Str"",s,encoding),e);
  }
}",0.9666666666666668
130874,"@Test public void fullTest(){
  withStateByBuilder(client(),stateBuilder -> stateBuilder.initial(true).type(PAYMENT_STATE),paidState -> {
    TypeFixtures.withUpdateableType(client(),type -> {
      CustomerFixtures.withCustomerAndCart(client(),((customer,cart) -> {
        final MonetaryAmount totalAmount=cart.getTotalPrice();
        final PaymentStatus paymentStatus=PaymentStatusBuilder.of().interfaceCode(randomKey()).interfaceText(randomString()).state(paidState).build();
        final PaymentMethodInfo paymentMethodInfo=PaymentMethodInfoBuilder.of().paymentInterface(""String_Node_Str"").method(""String_Node_Str"").name(randomSlug()).build();
        final List<Transaction> transactions=Collections.singletonList(TransactionBuilder.of(TransactionType.CHARGE,totalAmount,ZonedDateTime.now()).timestamp(ZonedDateTime.now()).interactionId(randomKey()).build());
        final String externalId=randomKey();
        final String interfaceId=randomKey();
        final ZonedDateTime authorizedUntil=ZonedDateTime.now().plusMonths(1);
        final PaymentDraftBuilder paymentDraftBuilder=PaymentDraftBuilder.of(totalAmount).customer(customer).externalId(externalId).interfaceId(interfaceId).amountAuthorized(totalAmount).amountPaid(totalAmount).authorizedUntil(authorizedUntil).amountRefunded(EURO_1).paymentMethodInfo(paymentMethodInfo).custom(CustomFieldsDraft.ofTypeKeyAndObjects(type.getKey(),singletonMap(TypeFixtures.STRING_FIELD_NAME,""String_Node_Str""))).paymentStatus(paymentStatus).transactions(transactions).interfaceInteractions(asList(""String_Node_Str"",""String_Node_Str"").stream().map(s -> CustomFieldsDraft.ofTypeKeyAndObjects(type.getKey(),singletonMap(TypeFixtures.STRING_FIELD_NAME,s))).collect(toList()));
        final Payment payment=execute(PaymentCreateCommand.of(paymentDraftBuilder.build()));
        final PaymentQuery paymentQuery=PaymentQuery.of().withPredicates(m -> m.id().is(payment.getId()).and(m.customer().is(customer)).and(m.externalId().is(externalId)).and(m.interfaceId().is(interfaceId)).and(m.amountPlanned().currencyCode().is(totalAmount.getCurrency())).and(m.amountAuthorized().currencyCode().is(totalAmount.getCurrency())).and(m.amountPaid().currencyCode().is(totalAmount.getCurrency())).and(m.amountRefunded().currencyCode().is(totalAmount.getCurrency())).and(m.paymentMethodInfo().method().is(paymentMethodInfo.getMethod())).and(m.paymentMethodInfo().paymentInterface().is(paymentMethodInfo.getPaymentInterface())).and(m.paymentMethodInfo().name().locale(ENGLISH).is(paymentMethodInfo.getName().get(ENGLISH))).and(m.custom().type().is(type)).and(m.paymentStatus().interfaceCode().is(paymentStatus.getInterfaceCode())).and(m.paymentStatus().interfaceText().is(paymentStatus.getInterfaceText())).and(m.paymentStatus().state().is(paidState)).and(m.transactions().amount().currencyCode().is(totalAmount.getCurrency())).and(m.transactions().interactionId().is(transactions.get(0).getInteractionId()))).withExpansionPaths(m -> m.customer()).plusExpansionPaths(m -> m.paymentStatus().state());
        final PagedQueryResult<Payment> pagedQueryResult=execute(paymentQuery);
        assertThat(pagedQueryResult).has(onlyTheResult(payment));
        final Payment loadedPayment=pagedQueryResult.head().get();
        assertThat(loadedPayment.getCustomer()).is(expanded(customer));
        assertThat(loadedPayment.getPaymentStatus().getState()).is(expanded(paidState));
        execute(PaymentDeleteCommand.of(payment));
      }
));
      return type;
    }
);
  }
);
}","@Test public void fullTest(){
  withStateByBuilder(client(),stateBuilder -> stateBuilder.initial(true).type(PAYMENT_STATE),paidState -> {
    TypeFixtures.withUpdateableType(client(),type -> {
      CustomerFixtures.withCustomerAndCart(client(),((customer,cart) -> {
        final MonetaryAmount totalAmount=cart.getTotalPrice();
        final PaymentStatus paymentStatus=PaymentStatusBuilder.of().interfaceCode(randomKey()).interfaceText(randomString()).state(paidState).build();
        final PaymentMethodInfo paymentMethodInfo=PaymentMethodInfoBuilder.of().paymentInterface(""String_Node_Str"").method(""String_Node_Str"").name(randomSlug()).build();
        final TransactionType transactionType=TransactionType.CHARGE;
        final List<Transaction> transactions=Collections.singletonList(TransactionBuilder.of(transactionType,totalAmount,ZonedDateTime.now()).timestamp(ZonedDateTime.now()).interactionId(randomKey()).build());
        final String externalId=randomKey();
        final String interfaceId=randomKey();
        final ZonedDateTime authorizedUntil=ZonedDateTime.now().plusMonths(1);
        final PaymentDraftBuilder paymentDraftBuilder=PaymentDraftBuilder.of(totalAmount).customer(customer).externalId(externalId).interfaceId(interfaceId).amountAuthorized(totalAmount).amountPaid(totalAmount).authorizedUntil(authorizedUntil).amountRefunded(EURO_1).paymentMethodInfo(paymentMethodInfo).custom(CustomFieldsDraft.ofTypeKeyAndObjects(type.getKey(),singletonMap(TypeFixtures.STRING_FIELD_NAME,""String_Node_Str""))).paymentStatus(paymentStatus).transactions(transactions).interfaceInteractions(asList(""String_Node_Str"",""String_Node_Str"").stream().map(s -> CustomFieldsDraft.ofTypeKeyAndObjects(type.getKey(),singletonMap(TypeFixtures.STRING_FIELD_NAME,s))).collect(toList()));
        final Payment payment=execute(PaymentCreateCommand.of(paymentDraftBuilder.build()));
        final PaymentQuery paymentQuery=PaymentQuery.of().withPredicates(m -> m.id().is(payment.getId()).and(m.customer().is(customer)).and(m.externalId().is(externalId)).and(m.interfaceId().is(interfaceId)).and(m.amountPlanned().currencyCode().is(totalAmount.getCurrency())).and(m.amountAuthorized().currencyCode().is(totalAmount.getCurrency())).and(m.amountPaid().currencyCode().is(totalAmount.getCurrency())).and(m.amountRefunded().currencyCode().is(totalAmount.getCurrency())).and(m.paymentMethodInfo().method().is(paymentMethodInfo.getMethod())).and(m.paymentMethodInfo().paymentInterface().is(paymentMethodInfo.getPaymentInterface())).and(m.paymentMethodInfo().name().locale(ENGLISH).is(paymentMethodInfo.getName().get(ENGLISH))).and(m.custom().type().is(type)).and(m.paymentStatus().interfaceCode().is(paymentStatus.getInterfaceCode())).and(m.paymentStatus().interfaceText().is(paymentStatus.getInterfaceText())).and(m.paymentStatus().state().is(paidState)).and(m.transactions().type().is(transactionType)).and(m.transactions().amount().currencyCode().is(totalAmount.getCurrency())).and(m.transactions().interactionId().is(transactions.get(0).getInteractionId()))).withExpansionPaths(m -> m.customer()).plusExpansionPaths(m -> m.paymentStatus().state());
        final PagedQueryResult<Payment> pagedQueryResult=execute(paymentQuery);
        assertThat(pagedQueryResult).has(onlyTheResult(payment));
        final Payment loadedPayment=pagedQueryResult.head().get();
        assertThat(loadedPayment.getCustomer()).is(expanded(customer));
        assertThat(loadedPayment.getPaymentStatus().getState()).is(expanded(paidState));
        execute(PaymentDeleteCommand.of(payment));
      }
));
      return type;
    }
);
  }
);
}",0.9654688377316114
130875,"public static <T>T deserialize(final HttpResponse httpResponse,final JavaType javaType){
  return SphereJsonUtils.readObject(Optional.ofNullable(httpResponse.getResponseBody()).orElseThrow(() -> new JsonException(httpResponse)),javaType);
}","protected static <T>T deserialize(final HttpResponse httpResponse,final JavaType javaType){
  return SphereJsonUtils.readObject(Optional.ofNullable(httpResponse.getResponseBody()).orElseThrow(() -> new JsonException(httpResponse)),javaType);
}",0.9730848861283644
130876,"@Test public void queryTaxedPrice() throws Exception {
  withFilledCart(client(),cart -> {
    final Cart loadedCart=execute(CartQuery.of().withSort(m -> m.createdAt().sort().desc()).withLimit(1).withPredicates(m -> m.taxedPrice().isPresent().and(m.taxedPrice().totalNet().centAmount().is(centAmountOf(cart.getTaxedPrice().getTotalNet()))).and(m.taxedPrice().totalGross().centAmount().is(centAmountOf(cart.getTaxedPrice().getTotalGross()))))).head().get();
    assertThat(loadedCart.getId()).isEqualTo(cart.getId());
  }
);
}","@Test public void queryTaxedPrice() throws Exception {
  withFilledCart(client(),cart -> {
    final Cart loadedCart=execute(CartQuery.of().withSort(m -> m.createdAt().sort().desc()).withLimit(1).withPredicates(m -> m.taxedPrice().isPresent().and(m.taxedPrice().totalNet().centAmount().is(centAmountOf(cart.getTaxedPrice().getTotalNet()))).and(m.taxedPrice().totalGross().centAmount().is(centAmountOf(cart.getTaxedPrice().getTotalGross())).and(m.id().is(cart.getId()))))).head().get();
    assertThat(loadedCart.getId()).isEqualTo(cart.getId());
  }
);
}",0.9731232622798888
130877,"@Test public void queryForAllMessages() throws Exception {
  withOrderAndReturnInfo(client(),((order,returnInfo) -> {
    final MessageQuery query=MessageQuery.of().withPredicates(m -> m.type().is(""String_Node_Str"")).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1);
    final Message message=execute(query).head().get();
    assertThat(message.getResource().getObj()).isNotNull();
    assertThat(message.getResource()).isEqualTo(order.toReference());
    assertThat(message.getResource().getId()).isEqualTo(order.getId());
  }
));
}","@Test public void queryForAllMessages() throws Exception {
  withOrderAndReturnInfo(client(),((order,returnInfo) -> {
    final MessageQuery query=MessageQuery.of().withPredicates(m -> m.type().is(""String_Node_Str"").and(m.resource().is(order))).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1);
    final Message message=execute(query).head().get();
    assertThat(message.getResource().getObj()).isNotNull();
    assertThat(message.getResource()).isEqualTo(order.toReference());
    assertThat(message.getResource().getId()).isEqualTo(order.getId());
  }
));
}",0.9763513513513512
130878,"@Test public void messageGetPayload() throws Exception {
  withOrderAndReturnInfo(client(),((order,returnInfo) -> {
    final Query<Message> query=MessageQuery.of().withPredicates(m -> m.type().is(ReturnInfoAddedMessage.MESSAGE_HINT)).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1);
    final PagedQueryResult<Message> pagedQueryResult=execute(query);
    final Message message=pagedQueryResult.head().get();
    final String fetchedItemId=message.getPayload().get(""String_Node_Str"").get(""String_Node_Str"").get(0).get(""String_Node_Str"").asText();
    final String actualItemId=returnInfo.getItems().get(0).getId();
    assertThat(fetchedItemId).isEqualTo(actualItemId).isNotNull();
  }
));
}","@Test public void messageGetPayload() throws Exception {
  withOrderAndReturnInfo(client(),((order,returnInfo) -> {
    final Query<Message> query=MessageQuery.of().withPredicates(m -> m.type().is(ReturnInfoAddedMessage.MESSAGE_HINT).and(m.resource().is(order))).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1);
    final PagedQueryResult<Message> pagedQueryResult=execute(query);
    final Message message=pagedQueryResult.head().get();
    final String fetchedItemId=message.getPayload().get(""String_Node_Str"").get(""String_Node_Str"").get(0).get(""String_Node_Str"").asText();
    final String actualItemId=returnInfo.getItems().get(0).getId();
    assertThat(fetchedItemId).isEqualTo(actualItemId).isNotNull();
  }
));
}",0.9813829787234044
130879,"@Test public void queryForASpecificMessage() throws Exception {
  withOrderAndReturnInfo(client(),((order,returnInfo) -> {
    final Query<ReturnInfoAddedMessage> query=MessageQuery.of().withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1).forMessageType(ReturnInfoAddedMessage.MESSAGE_HINT);
    final PagedQueryResult<ReturnInfoAddedMessage> pagedQueryResult=execute(query);
    final ReturnInfoAddedMessage message=pagedQueryResult.head().get();
    assertThat(message.getReturnInfo()).isEqualTo(returnInfo);
    assertThat(message.getResource().getObj()).isNotNull();
    assertThat(message.getResource().getId()).isEqualTo(order.getId());
  }
));
}","@Test public void queryForASpecificMessage() throws Exception {
  withOrderAndReturnInfo(client(),((order,returnInfo) -> {
    final Query<ReturnInfoAddedMessage> query=MessageQuery.of().withPredicates(m -> m.resource().is(order)).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1).forMessageType(ReturnInfoAddedMessage.MESSAGE_HINT);
    final PagedQueryResult<ReturnInfoAddedMessage> pagedQueryResult=execute(query);
    final ReturnInfoAddedMessage message=pagedQueryResult.head().get();
    assertThat(message.getReturnInfo()).isEqualTo(returnInfo);
    assertThat(message.getResource().getObj()).isNotNull();
    assertThat(message.getResource().getId()).isEqualTo(order.getId());
  }
));
}",0.9692737430167596
130880,"private void assertOrderIsFound(final Function<Order,OrderQuery> p,final boolean shouldFind){
  withOrder(client(),order -> {
    final OrderQuery query=p.apply(order).withSort(QuerySort.of(""String_Node_Str""));
    final String id=client().execute(query).head().orElseThrow(() -> new RuntimeException(""String_Node_Str"")).getId();
    if (shouldFind) {
      assertThat(id).isEqualTo(order.getId());
    }
 else {
      assertThat(id).isNotEqualTo(order.getId());
    }
  }
);
}","private void assertOrderIsFound(final Function<Order,OrderQuery> p,final boolean shouldFind){
  withOrder(client(),order -> {
    assertEventually(() -> {
      final OrderQuery query=p.apply(order).withSort(QuerySort.of(""String_Node_Str""));
      final List<Order> results=client().execute(query).getResults();
      if (shouldFind) {
        assertThat(results).extracting(""String_Node_Str"").contains(order.getId());
      }
 else {
        assertThat(results).extracting(""String_Node_Str"").doesNotContain(order.getId());
      }
    }
);
  }
);
}",0.6530214424951267
130881,"@Test public void message(){
  ProductFixtures.withUpdateableProduct(client(),product -> {
    assertThat(product.getMasterData().isPublished()).isFalse();
    final Product publishedProduct=execute(ProductUpdateCommand.of(product,Publish.of()));
    final PagedQueryResult<ProductPublishedMessage> queryResult=execute(MessageQuery.of().withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1).forMessageType(ProductPublishedMessage.MESSAGE_HINT));
    final ProductPublishedMessage message=queryResult.head().get();
    assertThat(message.getResource().getId()).isEqualTo(product.getId());
    assertThat(message.getProductProjection().getMasterVariant()).isEqualTo(publishedProduct.getMasterData().getCurrent().getMasterVariant());
    assertThat(message.getResource().getObj().getMasterData().getCurrent().getSlug()).isEqualTo(message.getProductProjection().getSlug());
    return publishedProduct;
  }
);
}","@Test public void message(){
  ProductFixtures.withUpdateableProduct(client(),product -> {
    assertThat(product.getMasterData().isPublished()).isFalse();
    final Product publishedProduct=execute(ProductUpdateCommand.of(product,Publish.of()));
    final PagedQueryResult<ProductPublishedMessage> queryResult=execute(MessageQuery.of().withPredicates(m -> m.resource().is(product)).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1).forMessageType(ProductPublishedMessage.MESSAGE_HINT));
    final ProductPublishedMessage message=queryResult.head().get();
    assertThat(message.getResource().getId()).isEqualTo(product.getId());
    assertThat(message.getProductProjection().getMasterVariant()).isEqualTo(publishedProduct.getMasterData().getCurrent().getMasterVariant());
    assertThat(message.getResource().getObj().getMasterData().getCurrent().getSlug()).isEqualTo(message.getProductProjection().getSlug());
    return publishedProduct;
  }
);
}",0.9762886597938144
130882,"@Test public void message(){
  ProductFixtures.withUpdateableProduct(client(),product -> {
    assertThat(product.getMasterData().isPublished()).isFalse();
    final Product unpublishedProduct=execute(ProductUpdateCommand.of(product,asList(Publish.of(),Unpublish.of())));
    final PagedQueryResult<ProductUnpublishedMessage> queryResult=execute(MessageQuery.of().withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1).forMessageType(ProductUnpublishedMessage.MESSAGE_HINT));
    final ProductUnpublishedMessage message=queryResult.head().get();
    assertThat(message.getResource().getId()).isEqualTo(product.getId());
    assertThat(message.getResource().getObj().getMasterData().isPublished()).isFalse();
    return unpublishedProduct;
  }
);
}","@Test public void message(){
  ProductFixtures.withUpdateableProduct(client(),product -> {
    assertThat(product.getMasterData().isPublished()).isFalse();
    final Product unpublishedProduct=execute(ProductUpdateCommand.of(product,asList(Publish.of(),Unpublish.of())));
    assertEventually(() -> {
      final PagedQueryResult<ProductUnpublishedMessage> queryResult=execute(MessageQuery.of().withPredicates(m -> m.resource().is(unpublishedProduct)).withSort(m -> m.createdAt().sort().desc()).withExpansionPaths(m -> m.resource()).withLimit(1).forMessageType(ProductUnpublishedMessage.MESSAGE_HINT));
      final ProductUnpublishedMessage message=queryResult.head().get();
      assertThat(message.getResource().getId()).as(""String_Node_Str"").isEqualTo(product.getId());
      assertThat(message.getResource().getObj().getMasterData().isPublished()).isFalse();
    }
);
    return unpublishedProduct;
  }
);
}",0.8968768414849735
130883,"/** 
 * Finds a product variant by id.
 * @param variantId the id of the variant to find
 * @return optional of a variant matching variantId
 * @see #getVariantOrMaster(int)
 */
@Nullable default ProductVariant getVariant(final int variantId){
  final ProductVariant result;
  if (variantId == getMasterVariant().getId()) {
    result=getMasterVariant();
  }
 else {
    result=getVariants().stream().filter(v -> v.getId() == variantId).findFirst().orElse(null);
  }
  return result;
}","/** 
 * Finds a product variant by id.
 * @param variantId the id of the variant to find
 * @return variant or null if no variant exists with {@code id}
 * @see #getVariantOrMaster(int)
 */
@Nullable default ProductVariant getVariant(final int variantId){
  final ProductVariant result;
  if (variantId == getMasterVariant().getId()) {
    result=getMasterVariant();
  }
 else {
    result=getVariants().stream().filter(v -> v.getId() == variantId).findFirst().orElse(null);
  }
  return result;
}",0.9083503054989815
130884,"public static <T extends ResourceView<T>,C extends UpdateCommandDsl<T,C>>UpdateCommandDslBuilder<T,C> of(final Versioned<T> versioned,final List<? extends UpdateAction<T>> updateActions,final TypeReference<T> typeReference,final String baseEndpointWithoutId,final Function<UpdateCommandDslBuilder<T,C>,C> creationFunction){
  return new UpdateCommandDslBuilder<>(versioned,updateActions,typeReference,baseEndpointWithoutId,creationFunction);
}","public static <T extends ResourceView<T,T>,C extends UpdateCommandDsl<T,C>>UpdateCommandDslBuilder<T,C> of(final Versioned<T> versioned,final List<? extends UpdateAction<T>> updateActions,final TypeReference<T> typeReference,final String baseEndpointWithoutId,final Function<UpdateCommandDslBuilder<T,C>,C> creationFunction){
  return new UpdateCommandDslBuilder<>(versioned,updateActions,typeReference,baseEndpointWithoutId,creationFunction);
}",0.9977477477477478
130885,"public static TaxRateBuilder of(final TaxRate template){
  return of(template.getName(),template.getAmount(),template.isIncludedInPrice(),template.getCountry()).id(template.getId()).state(template.getState());
}","public static TaxRateBuilder of(final String name,final double amount,final boolean includedInPrice,final CountryCode country){
  return new TaxRateBuilder(name,amount,includedInPrice,country);
}",0.458128078817734
130886,"@Override public ProductDraft get(){
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.S)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(Price.of(MoneyImpl.ofCents(1234,EUR))).build();
  final ProductVariantDraft secondVariant=ProductVariantDraftBuilder.of().plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.M)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(Price.of(MoneyImpl.ofCents(1234,EUR)),Price.of(MoneyImpl.ofCents(600,EUR)).withCustomerGroup(customerGroup)).build();
  final LocalizedStrings slug=en(name).slugifiedUnique();
  return ProductDraftBuilder.of(productType,en(name),slug,masterVariant).variants(asList(secondVariant)).description(en(name)).metaTitle(en(""String_Node_Str"")).metaDescription(en(""String_Node_Str"")).metaKeywords(en(""String_Node_Str"")).build();
}","@Override public ProductDraft get(){
  final ProductVariantDraft masterVariant=ProductVariantDraftBuilder.of().plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.S)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(Price.of(MoneyImpl.ofCents(1234,EUR))).build();
  final ProductVariantDraft secondVariant=ProductVariantDraftBuilder.of().plusAttribute(Sizes.ATTRIBUTE.draftOf(Sizes.M)).plusAttribute(Colors.ATTRIBUTE.draftOf(Colors.GREEN)).sku(UUID.randomUUID().toString()).prices(Price.of(MoneyImpl.ofCents(1234,EUR)),Price.of(MoneyImpl.ofCents(600,EUR)).withCustomerGroup(customerGroup)).build();
  final LocalizedString slug=en(name).slugifiedUnique();
  return ProductDraftBuilder.of(productType,en(name),slug,masterVariant).variants(asList(secondVariant)).description(en(name)).metaTitle(en(""String_Node_Str"")).metaDescription(en(""String_Node_Str"")).metaKeywords(en(""String_Node_Str"")).build();
}",0.9994678020223524
130887,"private LocalizedStrings en(final String value){
  return LocalizedStrings.of(Locale.ENGLISH,value);
}","private LocalizedString en(final String value){
  return LocalizedString.of(Locale.ENGLISH,value);
}",0.99009900990099
130888,"@Override public void serialize(final SphereEnumeration sphereEnumeration,final JsonGenerator jsonGenerator,final SerializerProvider serializerProvider) throws IOException {
  final String sphereName=SphereEnumeration.toSphereName(sphereEnumeration.name());
  jsonGenerator.writeString(sphereName);
}","@Override public void serialize(final SphereEnumeration sphereEnumeration,final JsonGenerator jsonGenerator,final SerializerProvider serializerProvider) throws IOException {
  final String sphereName=sphereEnumeration.toSphereName();
  jsonGenerator.writeString(sphereName);
}",0.9548611111111112
130889,"static String toSphereName(final String uppercaseName){
  return Arrays.stream(StringUtils.split(uppercaseName,'_')).map(s -> s.toLowerCase()).map(StringUtils::capitalize).collect(joining(""String_Node_Str""));
}","default String toSphereName(){
  return SphereEnumerationUtils.toSphereName(name());
}",0.4189189189189189
130890,"@Test public void queryByNameScenario(){
  assertModelsNotPresent();
  final List<Product> instances=createInBackendByName(modelNames());
  final List<String> actualNames=instances.stream().map(o -> extractName(o)).filter(name -> modelNames().contains(name)).sorted().collect(toList());
  assertThat(actualNames).overridingErrorMessage(String.format(""String_Node_Str"",IterableUtils.toString(modelNames()))).isEqualTo(modelNames());
  final String nameToFind=modelNames().get(1);
  final List<Product> results=execute(queryObjectForName(nameToFind)).getResults();
  assertThat(results).hasSize(1);
  assertThat(getNames(results)).isEqualTo(asList(nameToFind));
  assertModelsNotPresent();
}","@Test public void queryByNameScenario(){
  assertModelsNotPresent();
  final List<Product> instances=createInBackendByName(modelNames());
  final List<String> actualNames=instances.stream().map(o -> extractName(o)).filter(name -> modelNames().contains(name)).sorted().collect(toList());
  final StringJoiner joiner=new StringJoiner(""String_Node_Str"");
  modelNames().forEach(item -> joiner.add(item.toString()));
  assertThat(actualNames).overridingErrorMessage(String.format(""String_Node_Str"",""String_Node_Str"" + joiner.toString() + ""String_Node_Str"")).isEqualTo(modelNames());
  final String nameToFind=modelNames().get(1);
  final List<Product> results=execute(queryObjectForName(nameToFind)).getResults();
  assertThat(results).hasSize(1);
  assertThat(getNames(results)).isEqualTo(asList(nameToFind));
  assertModelsNotPresent();
}",0.8563934426229508
130891,"public static void main(String[] args) throws IOException {
  final List<Class<?>> classes=IntrospectionUtils.publicClassesOfProject();
  final List<Rule> rules=asList(new UpdateActionsInCorrectPackageRule(),new CommandsInCorrectPackageRule(),new QueriesInCorrectPackageRule(),new ImplClassesAreForPackageScopeRule(),new NoOptionalParametersInMethodsRule(),new NoOptionalReturnTypeForGettersRule(),new NoOptionalParametersInPublicConstructorRule(),new PublicConstructorsAreTheExceptionRule(),new BuildersNotForResources());
  final boolean allIsOk=rules.stream().map(rule -> {
    final RulesReport report=rule.check(classes);
    if (!report.isOk()) {
      System.err.println(report);
    }
    return report.isOk();
  }
).noneMatch(res -> res != true);
  if (!allIsOk) {
    System.exit(1);
  }
}","public static void main(String[] args) throws IOException {
  final List<Class<?>> classes=IntrospectionUtils.publicClassesOfProject();
  final List<Rule> rules=asList(new UpdateActionsInCorrectPackageRule(),new CommandsInCorrectPackageRule(),new QueriesInCorrectPackageRule(),new ImplClassesAreForPackageScopeRule(),new NoOptionalParametersInMethodsRule(),new NoOptionalReturnTypeForGettersRule(),new NoOptionalParametersInPublicConstructorRule(),new PublicConstructorsAreTheExceptionRule(),new BuildersNotForResources(),new NeverMixStaticAndInstanceMethodOfSameNameRule());
  final boolean allIsOk=rules.stream().map(rule -> {
    final RulesReport report=rule.check(classes);
    if (!report.isOk()) {
      System.err.println(report);
    }
    return report.isOk();
  }
).noneMatch(res -> res != true);
  if (!allIsOk) {
    System.exit(1);
  }
}",0.9684848484848484
130892,"@Test public void execution() throws Exception {
  final ZonedDateTime validFrom=ZonedDateTime.now();
  final ZonedDateTime validUntil=validFrom.plusSeconds(8000);
  final LocalizedStrings name=en(""String_Node_Str"");
  final LocalizedStrings description=en(""String_Node_Str"");
  final String predicate=""String_Node_Str"";
  final AbsoluteCartDiscountValue value=CartDiscountValue.ofAbsolute(MoneyImpl.of(10,EUR));
  final LineItemsTarget target=LineItemsTarget.of(""String_Node_Str"");
  final String sortOrder=""String_Node_Str"";
  final boolean requiresDiscountCode=false;
  final CartDiscountDraft discountDraft=CartDiscountDraftBuilder.of(name,CartPredicate.of(predicate),value,target,sortOrder,requiresDiscountCode).validFrom(validFrom).validUntil(validUntil).description(description).isActive(false).build();
  cartDiscount=execute(CartDiscountCreateCommand.of(discountDraft));
  assertThat(cartDiscount.getName()).isEqualTo(name);
  assertThat(cartDiscount.getCartPredicate()).isEqualTo(predicate);
  assertThat(cartDiscount.getValue()).isEqualTo(value);
  assertThat(cartDiscount.getTarget()).isEqualTo(target);
  assertThat(cartDiscount.getSortOrder()).isEqualTo(sortOrder);
  assertThat(cartDiscount.isRequiringDiscountCode()).isEqualTo(requiresDiscountCode);
  assertThat(cartDiscount.getValidFrom()).contains(validFrom);
  assertThat(cartDiscount.getValidUntil()).contains(validUntil);
  assertThat(cartDiscount.getDescription()).contains(description);
  assertThat(cartDiscount.getReferences()).isEqualTo(Collections.emptyList());
}","@Test public void execution() throws Exception {
  final ZonedDateTime validFrom=SphereTestUtils.now();
  final ZonedDateTime validUntil=validFrom.plusSeconds(8000);
  final LocalizedStrings name=en(""String_Node_Str"");
  final LocalizedStrings description=en(""String_Node_Str"");
  final String predicate=""String_Node_Str"";
  final AbsoluteCartDiscountValue value=CartDiscountValue.ofAbsolute(MoneyImpl.of(10,EUR));
  final LineItemsTarget target=LineItemsTarget.of(""String_Node_Str"");
  final String sortOrder=""String_Node_Str"";
  final boolean requiresDiscountCode=false;
  final CartDiscountDraft discountDraft=CartDiscountDraftBuilder.of(name,CartPredicate.of(predicate),value,target,sortOrder,requiresDiscountCode).validFrom(validFrom).validUntil(validUntil).description(description).isActive(false).build();
  cartDiscount=execute(CartDiscountCreateCommand.of(discountDraft));
  assertThat(cartDiscount.getName()).isEqualTo(name);
  assertThat(cartDiscount.getCartPredicate()).isEqualTo(predicate);
  assertThat(cartDiscount.getValue()).isEqualTo(value);
  assertThat(cartDiscount.getTarget()).isEqualTo(target);
  assertThat(cartDiscount.getSortOrder()).isEqualTo(sortOrder);
  assertThat(cartDiscount.isRequiringDiscountCode()).isEqualTo(requiresDiscountCode);
  assertThat(cartDiscount.getValidFrom()).contains(validFrom);
  assertThat(cartDiscount.getValidUntil()).contains(validUntil);
  assertThat(cartDiscount.getDescription()).contains(description);
  assertThat(cartDiscount.getReferences()).isEqualTo(Collections.emptyList());
}",0.9909208819714656
130893,"@Test public void setValidFrom() throws Exception {
  withPersistentCartDiscount(client(),cartDiscount -> {
    final ZonedDateTime dateTime=ZonedDateTime.now();
    assertThat(cartDiscount.getValidFrom()).isNotEqualTo(Optional.of(dateTime));
    final CartDiscount updatedDiscount=execute(CartDiscountUpdateCommand.of(cartDiscount,SetValidFrom.of(dateTime)));
    assertThat(updatedDiscount.getValidFrom()).contains(dateTime);
  }
);
}","@Test public void setValidFrom() throws Exception {
  withPersistentCartDiscount(client(),cartDiscount -> {
    final ZonedDateTime dateTime=SphereTestUtils.now();
    assertThat(cartDiscount.getValidFrom()).isNotEqualTo(Optional.of(dateTime));
    final CartDiscount updatedDiscount=execute(CartDiscountUpdateCommand.of(cartDiscount,SetValidFrom.of(dateTime)));
    assertThat(updatedDiscount.getValidFrom()).contains(dateTime);
  }
);
}",0.9679633867276888
130894,"private ZonedDateTime dateTimeAfterValidFromAndOldValidUntil(final CartDiscount cartDiscount){
  return cartDiscount.getValidUntil().orElse(cartDiscount.getValidFrom().orElse(ZonedDateTime.now()).plusSeconds(1000)).plusSeconds(1);
}","private ZonedDateTime dateTimeAfterValidFromAndOldValidUntil(final CartDiscount cartDiscount){
  return cartDiscount.getValidUntil().orElse(cartDiscount.getValidFrom().orElse(SphereTestUtils.now()).plusSeconds(1000)).plusSeconds(1);
}",0.9484978540772532
130895,"@Test public void setExpectedDelivery() throws Exception {
  withUpdateableInventoryEntry(client(),entry -> {
    final ZonedDateTime expectedDelivery=ZonedDateTime.now().plus(7,ChronoUnit.DAYS);
    final UpdateAction<InventoryEntry> action=SetExpectedDelivery.of(expectedDelivery);
    final InventoryEntry updatedEntry=execute(InventoryEntryUpdateCommand.of(entry,action));
    assertThat(updatedEntry.getExpectedDelivery()).contains(expectedDelivery).isNotEqualTo(entry.getExpectedDelivery());
    return updatedEntry;
  }
);
}","@Test public void setExpectedDelivery() throws Exception {
  withUpdateableInventoryEntry(client(),entry -> {
    final ZonedDateTime expectedDelivery=SphereTestUtils.now().plus(7,ChronoUnit.DAYS);
    final UpdateAction<InventoryEntry> action=SetExpectedDelivery.of(expectedDelivery);
    final InventoryEntry updatedEntry=execute(InventoryEntryUpdateCommand.of(entry,action));
    assertThat(updatedEntry.getExpectedDelivery()).contains(expectedDelivery).isNotEqualTo(entry.getExpectedDelivery());
    return updatedEntry;
  }
);
}",0.9774436090225564
130896,"@Test public void shippingInfo() throws Exception {
  withShippingMethodForGermany(client(),shippingMethod -> {
    withTransientTaxCategory(client(),taxCategory -> {
      final MonetaryAmount price=EURO_5;
      final MonetaryAmount freeAbove=EURO_30;
      final ShippingRate shippingRate=ShippingRate.of(price,freeAbove);
      final TaxRate taxRate=taxCategory.getTaxRates().get(0);
      final Reference<TaxCategory> taxCategoryRef=taxCategory.toReference();
      final Optional<Reference<ShippingMethod>> shippingMethodRef=Optional.of(shippingMethod.toReference());
      final ZonedDateTime createdAt=ZonedDateTime.now().minusSeconds(4);
      final ParcelMeasurements parcelMeasurements=ParcelMeasurements.of(2,3,1,3);
      final DeliveryItem deliveryItem=DeliveryItem.of(new LineItemLike(){
        private final String id=randomKey();
        @Override public String getId(){
          return id;
        }
        @Override public Set<ItemState> getState(){
          throw new UnsupportedOperationException();
        }
        @Override public long getQuantity(){
          return 2;
        }
        @Override public Optional<DiscountedLineItemPrice> getDiscountedPrice(){
          return Optional.empty();
        }
      }
,5);
      final String deliveryId=randomKey();
      final TrackingData trackingData=TrackingData.of().withTrackingId(""String_Node_Str"").withCarrier(""String_Node_Str"").withProvider(""String_Node_Str"").withProviderTransaction(""String_Node_Str"").withIsReturn(true);
      final Parcel parcel=Parcel.of(randomKey(),createdAt,Optional.of(parcelMeasurements),Optional.of(trackingData));
      final List<Delivery> deliveries=asList(Delivery.of(deliveryId,createdAt,asList(deliveryItem),asList(parcel)));
      final OrderShippingInfo shippingInfo=OrderShippingInfo.of(randomString(),price,shippingRate,taxRate,taxCategoryRef,shippingMethodRef,deliveries);
      testOrderAspect(builder -> builder.shippingInfo(shippingInfo),order -> assertThat(order.getShippingInfo()).contains(shippingInfo));
    }
);
  }
);
}","@Test public void shippingInfo() throws Exception {
  withShippingMethodForGermany(client(),shippingMethod -> {
    withTransientTaxCategory(client(),taxCategory -> {
      final MonetaryAmount price=EURO_5;
      final MonetaryAmount freeAbove=EURO_30;
      final ShippingRate shippingRate=ShippingRate.of(price,freeAbove);
      final TaxRate taxRate=taxCategory.getTaxRates().get(0);
      final Reference<TaxCategory> taxCategoryRef=taxCategory.toReference();
      final Optional<Reference<ShippingMethod>> shippingMethodRef=Optional.of(shippingMethod.toReference());
      final ZonedDateTime createdAt=SphereTestUtils.now().minusSeconds(4);
      final ParcelMeasurements parcelMeasurements=ParcelMeasurements.of(2,3,1,3);
      final DeliveryItem deliveryItem=DeliveryItem.of(new LineItemLike(){
        private final String id=randomKey();
        @Override public String getId(){
          return id;
        }
        @Override public Set<ItemState> getState(){
          throw new UnsupportedOperationException();
        }
        @Override public long getQuantity(){
          return 2;
        }
        @Override public Optional<DiscountedLineItemPrice> getDiscountedPrice(){
          return Optional.empty();
        }
      }
,5);
      final String deliveryId=randomKey();
      final TrackingData trackingData=TrackingData.of().withTrackingId(""String_Node_Str"").withCarrier(""String_Node_Str"").withProvider(""String_Node_Str"").withProviderTransaction(""String_Node_Str"").withIsReturn(true);
      final Parcel parcel=Parcel.of(randomKey(),createdAt,Optional.of(parcelMeasurements),Optional.of(trackingData));
      final List<Delivery> deliveries=asList(Delivery.of(deliveryId,createdAt,asList(deliveryItem),asList(parcel)));
      final OrderShippingInfo shippingInfo=OrderShippingInfo.of(randomString(),price,shippingRate,taxRate,taxCategoryRef,shippingMethodRef,deliveries);
      testOrderAspect(builder -> builder.shippingInfo(shippingInfo),order -> assertThat(order.getShippingInfo()).contains(shippingInfo));
    }
);
  }
);
}",0.9941491955143832
130897,"@Test public void getCompletedAt() throws Exception {
  final ZonedDateTime completedAt=ZonedDateTime.now().minusSeconds(5555);
  testOrderAspect(builder -> builder.completedAt(completedAt),order -> assertThat(order.getCompletedAt()).contains(completedAt));
}","@Test public void getCompletedAt() throws Exception {
  final ZonedDateTime completedAt=SphereTestUtils.now().minusSeconds(5555);
  testOrderAspect(builder -> builder.completedAt(completedAt),order -> assertThat(order.getCompletedAt()).contains(completedAt));
}",0.946153846153846
130898,"@Test public void addPriceWithValidityPeriod() throws Exception {
  final Price expectedPrice=Price.of(MoneyImpl.of(123,EUR)).withValidFrom(ZonedDateTime.now()).withValidUntil(ZonedDateTime.now().withZoneSameLocal(ZoneId.of(""String_Node_Str"")).plusHours(2));
  testAddPrice(expectedPrice);
}","@Test public void addPriceWithValidityPeriod() throws Exception {
  final Price expectedPrice=Price.of(MoneyImpl.of(123,EUR)).withValidFrom(SphereTestUtils.now()).withValidUntil(SphereTestUtils.now().withZoneSameLocal(ZoneId.of(""String_Node_Str"")).plusHours(2));
  testAddPrice(expectedPrice);
}",0.9180887372013652
130899,"@Test public void dateTimeAttribute() throws Exception {
  final ZonedDateTime now=ZonedDateTime.now().withZoneSameInstant(ZoneId.of(""String_Node_Str""));
  testSingleAndSet(AttributeAccess.ofDateTime(),AttributeAccess.ofDateTimeSet(),asSet(now,now.plus(3,ChronoUnit.DAYS)),DateTimeType.of(),AttributeDefinitionBuilder.of(""String_Node_Str"",LABEL,DateTimeType.of()).build());
}","@Test public void dateTimeAttribute() throws Exception {
  final ZonedDateTime now=SphereTestUtils.now().withZoneSameInstant(ZoneId.of(""String_Node_Str""));
  testSingleAndSet(AttributeAccess.ofDateTime(),AttributeAccess.ofDateTimeSet(),asSet(now,now.plus(3,ChronoUnit.DAYS)),DateTimeType.of(),AttributeDefinitionBuilder.of(""String_Node_Str"",LABEL,DateTimeType.of()).build());
}",0.9627659574468084
130900,"public static final ZonedDateTime tomorrowZonedDateTime(){
  return ZonedDateTime.now().plus(1,ChronoUnit.DAYS);
}","public static final ZonedDateTime tomorrowZonedDateTime(){
  return now().plus(1,ChronoUnit.DAYS);
}",0.9345794392523364
130901,"protected ByIdFetchImpl(final String id,final JsonEndpoint<T> endpoint){
  super(endpoint,id);
}","public ByIdFetchImpl(final JsonEndpoint<T> endpoint,final String identifierToSearchFor,final List<HttpQueryParameter> additionalParameters){
  super(endpoint,identifierToSearchFor,additionalParameters);
}",0.48
130902,"private ProductProjectionByIdFetch(final String id,final ProductProjectionType projectionType){
  super(id,ProductProjectionsEndpoint.ENDPOINT);
  this.projectionType=projectionType;
}","private ProductProjectionByIdFetch(final String id,final ProductProjectionType projectionType){
  super(ProductProjectionsEndpoint.ENDPOINT,id,asList(HttpQueryParameter.of(""String_Node_Str"",projectionType.isStaged().toString())));
}",0.6826923076923077
130903,"@Test public void noSearchHintNoteOnNormalException() throws Exception {
  final SphereClient client=SphereClientFactory.of().createHttpTestDouble(intent -> HttpResponse.of(500));
  assertThatThrownBy(() -> client.execute(CategoryQuery.of())).isInstanceOf(SphereException.class).matches(e -> ((SphereException)e).getAdditionalNotes().stream().allMatch(s -> !s.contains(""String_Node_Str"")));
}","@Test public void noSearchHintNoteOnNormalException() throws Exception {
  final SphereClient client=SphereClientFactory.of().createHttpTestDouble(intent -> HttpResponse.of(500));
  assertThatThrownBy(() -> client.execute(CategoryQuery.of()).toCompletableFuture().join()).hasCauseInstanceOf(SphereException.class).matches(e -> ((SphereException)e.getCause()).getAdditionalNotes().stream().allMatch(s -> !s.contains(""String_Node_Str"")));
}",0.9349397590361446
130904,"private CurrencyUnit currency(final String currencyCode){
  return CurrencyUnitBuilder.of(currencyCode,CurrencyContext.KEY_PROVIDER).build();
}","private CurrencyUnit currency(final String currencyCode){
  return MonetaryCurrencies.getCurrency(currencyCode);
}",0.7159533073929961
130905,"private CurrencyUnit currency(final String currencyCode){
  return CurrencyUnitBuilder.of(currencyCode,CurrencyContext.KEY_PROVIDER).build();
}","private CurrencyUnit currency(final String currencyCode){
  return MonetaryCurrencies.getCurrency(currencyCode);
}",0.7159533073929961
130906,"@Test public final void testConnection(){
  final HttpClient client=createClient();
  final HttpResponse response=client.execute(HttpRequest.of(HttpMethod.GET,""String_Node_Str"")).join();
  client.close();
  final String body=new String(response.getResponseBody().get());
  assertThat(response.getStatusCode()).isLessThan(400);
  assertThat(body).containsIgnoringCase(""String_Node_Str"");
}","@Test public final void testConnection(){
  final HttpClient client=createClient();
  final HttpResponse response=client.execute(HttpRequest.of(HttpMethod.GET,""String_Node_Str"")).toCompletableFuture().join();
  client.close();
  final String body=new String(response.getResponseBody().get());
  assertThat(response.getStatusCode()).isLessThan(400);
  assertThat(body).containsIgnoringCase(""String_Node_Str"");
}",0.9724310776942356
130907,"public static <T>AsyncAssertions<T> performing(final CompletableFuture<T> stage){
  return new AsyncAssertions<>(stage);
}","public static <T>AsyncAssertions<T> performing(final CompletionStage<T> stage){
  return new AsyncAssertions<>(stage);
}",0.9421487603305784
130908,"private CompletionStage<Response> getResponse(){
  return null;
}","private CompletionStage<Response> getResponse(){
  return new CompletableFuture<>();
}",0.8344370860927153
130909,"@Override public final String getMessage(){
  StringBuilder builder=new StringBuilder();
  final String httpRequest=getSphereRequest().map(x -> x.httpRequestIntent()).map(Object::toString).orElse(""String_Node_Str"");
  return builder.append(""String_Node_Str"").append(BuildInfo.version()).append(""String_Node_Str"").append(""String_Node_Str"").append(getProjectKey().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(getSphereRequest().map(x -> x.httpRequestIntent()).map(x -> ""String_Node_Str"" + x.getHttpMethod() + ""String_Node_Str""+ x.getPath()).map(x -> ""String_Node_Str"" + x + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(new Date()).append(""String_Node_Str"").append(""String_Node_Str"").append(getSphereRequest().map(Object::toString).orElse(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(httpRequest).append(""String_Node_Str"").append(""String_Node_Str"").append(getHttpResponse().map(Object::toString).orElse(""String_Node_Str"")).append(""String_Node_Str"").append(Optional.ofNullable(super.getMessage()).map(s -> ""String_Node_Str"" + s + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(additionalNotes).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(BuildInfo.version()).append(""String_Node_Str"").append(this.getClass().getCanonicalName().replace('.','/')).append(""String_Node_Str"").append(""String_Node_Str"").toString();
}","@Override public final String getMessage(){
  StringBuilder builder=new StringBuilder();
  final String httpRequest=getSphereRequest().map(x -> x.httpRequestIntent()).map(Object::toString).orElse(""String_Node_Str"");
  return builder.append(""String_Node_Str"").append(BuildInfo.version()).append(""String_Node_Str"").append(""String_Node_Str"").append(getProjectKey().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(getSphereRequest().map(x -> x.httpRequestIntent()).map(x -> ""String_Node_Str"" + x.getHttpMethod() + ""String_Node_Str""+ x.getPath()).map(x -> ""String_Node_Str"" + x + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(new Date()).append(""String_Node_Str"").append(""String_Node_Str"").append(getSphereRequest().map(Object::toString).orElse(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(httpRequest).append(""String_Node_Str"").append(""String_Node_Str"").append(getHttpResponse().map(Object::toString).orElse(""String_Node_Str"")).append(""String_Node_Str"").append(Optional.ofNullable(super.getMessage()).map(s -> ""String_Node_Str"" + s + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(additionalNotes).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(getVersionForJavadoc()).append(""String_Node_Str"").append(this.getClass().getCanonicalName().replace('.','/')).append(""String_Node_Str"").append(""String_Node_Str"").toString();
}",0.9894546550165711
130910,"public <T extends SphereError>Optional<T> as(final Class<T> errorClass){
  final ObjectMapper objectMapper=JsonUtils.newObjectMapper();
  final JsonNode jsonNode=objectMapper.createObjectNode().put(""String_Node_Str"",code).put(""String_Node_Str"",message).setAll(furtherFields);
  Optional<T> result=Optional.empty();
  try {
    final T object=JsonUtils.readObject(errorClass,jsonNode);
    result=Optional.of(object);
  }
 catch (  final JsonException e) {
    result=Optional.empty();
  }
  return result;
}","public <T extends SphereError>Optional<T> as(final Class<T> errorClass){
  final Optional<String> classErrorCodeOption=codeValueOf(errorClass);
  Optional<T> result=Optional.empty();
  if (classErrorCodeOption.map(classErrCode -> classErrCode.equals(code)).orElse(true)) {
    final ObjectMapper objectMapper=JsonUtils.newObjectMapper();
    final JsonNode jsonNode=objectMapper.createObjectNode().put(""String_Node_Str"",code).put(""String_Node_Str"",message).setAll(furtherFields);
    try {
      final T object=JsonUtils.readObject(errorClass,jsonNode);
      result=code.equals(object.getCode()) ? Optional.of(object) : Optional.<T>empty();
    }
 catch (    final JsonException e) {
      result=Optional.empty();
    }
  }
  return result;
}",0.6107114308553158
130911,"@Override public String getMessage(){
  StringBuilder builder=new StringBuilder(""String_Node_Str"").append(""String_Node_Str"");
  final String httpRequest=getUnderlyingHttpRequest().orElse(""String_Node_Str"");
  return builder.append(""String_Node_Str"").append(BuildInfo.version()).append(""String_Node_Str"").append(""String_Node_Str"").append(getProjectKey().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(httpThing.map(x -> ""String_Node_Str"" + x + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(new Date()).append(""String_Node_Str"").append(""String_Node_Str"").append(getSphereRequest().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(httpRequest).append(""String_Node_Str"").append(""String_Node_Str"").append(getUnderlyingHttpResponse().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(Optional.ofNullable(super.getMessage()).map(s -> ""String_Node_Str"" + s + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(BuildInfo.version()).append(""String_Node_Str"").append(this.getClass().getCanonicalName().replace('.','/')).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").toString();
}","@Override public final String getMessage(){
  StringBuilder builder=new StringBuilder(""String_Node_Str"").append(""String_Node_Str"");
  final String httpRequest=getUnderlyingHttpRequest().orElse(""String_Node_Str"");
  return builder.append(""String_Node_Str"").append(BuildInfo.version()).append(""String_Node_Str"").append(""String_Node_Str"").append(getProjectKey().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(httpThing.map(x -> ""String_Node_Str"" + x + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(System.getProperty(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(new Date()).append(""String_Node_Str"").append(""String_Node_Str"").append(getSphereRequest().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(httpRequest).append(""String_Node_Str"").append(""String_Node_Str"").append(getUnderlyingHttpResponse().orElse(""String_Node_Str"")).append(""String_Node_Str"").append(Optional.ofNullable(super.getMessage()).map(s -> ""String_Node_Str"" + s + ""String_Node_Str"").orElse(""String_Node_Str"")).append(""String_Node_Str"").append(""String_Node_Str"").append(BuildInfo.version()).append(""String_Node_Str"").append(this.getClass().getCanonicalName().replace('.','/')).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").toString();
}",0.9979253112033196
130912,"@Test public void localizedStringsAttribute() throws Exception {
  testSingleAndSet(AttributeAccess.ofLocalizedStrings(),AttributeAccess.ofLocalizedStringsSet(),asSet(LocalizedStrings.of(ENGLISH,""String_Node_Str""),LocalizedStrings.of(ENGLISH,""String_Node_Str"")),new LocalizedTextType(),AttributeDefinitionBuilder.of(""String_Node_Str"",LABEL,new LocalizedTextType()).inputHint(TEXT_INPUT_HINT).build());
}","@Test public void localizedStringsAttribute() throws Exception {
  testSingleAndSet(AttributeAccess.ofLocalizedStrings(),AttributeAccess.ofLocalizedStringsSet(),asSet(LocalizedStrings.of(ENGLISH,""String_Node_Str""),LocalizedStrings.of(ENGLISH,""String_Node_Str"")),new LocalizedStringsType(),AttributeDefinitionBuilder.of(""String_Node_Str"",LABEL,new LocalizedStringsType()).inputHint(TEXT_INPUT_HINT).build());
}",0.9729064039408868
130913,"@Test public void createLocalizedTextAttribute() throws Exception {
  executeTest(LocalizedTextType.class,AttributeDefinitionBuilder.of(""String_Node_Str"",LABEL,new LocalizedTextType()).inputHint(TEXT_INPUT_HINT).attributeConstraint(AttributeConstraint.COMBINATION_UNIQUE).searchable(false).required(true).build(),attributeDefinition -> {
    assertThat(attributeDefinition.getIsRequired()).isTrue();
    assertThat(attributeDefinition.getAttributeConstraint()).isEqualTo(AttributeConstraint.COMBINATION_UNIQUE);
    assertThat(attributeDefinition.getIsSearchable()).isFalse();
    assertThat(attributeDefinition.getInputHint()).isEqualTo(TEXT_INPUT_HINT);
  }
);
}","@Test public void createLocalizedTextAttribute() throws Exception {
  executeTest(LocalizedStringsType.class,AttributeDefinitionBuilder.of(""String_Node_Str"",LABEL,new LocalizedStringsType()).inputHint(TEXT_INPUT_HINT).attributeConstraint(AttributeConstraint.COMBINATION_UNIQUE).searchable(false).required(true).build(),attributeDefinition -> {
    assertThat(attributeDefinition.getIsRequired()).isTrue();
    assertThat(attributeDefinition.getAttributeConstraint()).isEqualTo(AttributeConstraint.COMBINATION_UNIQUE);
    assertThat(attributeDefinition.getIsSearchable()).isFalse();
    assertThat(attributeDefinition.getInputHint()).isEqualTo(TEXT_INPUT_HINT);
  }
);
}",0.9835082458770614
130914,"public static AttributeAccess<LocalizedStrings> ofLocalizedStrings(){
  return ofPrimitive(LocalizedStrings.typeReference(),LocalizedTextType.class);
}","public static AttributeAccess<LocalizedStrings> ofLocalizedStrings(){
  return ofPrimitive(LocalizedStrings.typeReference(),LocalizedStringsType.class);
}",0.9704918032786886
130915,"@Override public SphereClient createClient(final SphereApiConfig config,final SphereAccessTokenSupplier tokenSupplier){
  return new SphereClientImpl(config,tokenSupplier);
}","@Override public SphereClient createClient(final String projectKey,final String clientId,final String clientSecret){
  return createClient(SphereClientConfig.of(projectKey,clientId,clientSecret));
}",0.6129032258064516
130916,@Override Optional<ProductVariant> getVariant(final int variantId);,"@Override default Optional<ProductVariant> getVariant(final int variantId){
  return ProductsPackage.getVariant(variantId,this);
}",0.6802030456852792
130917,@Override ProductVariant getVariantOrMaster(final int variantId);,"@Override default ProductVariant getVariantOrMaster(final int variantId){
  return ProductsPackage.getVariantOrMaster(variantId,this);
}",0.6467661691542289
130918,@Override List<ProductVariant> getAllVariants();,"@Override default List<ProductVariant> getAllVariants(){
  return ProductsPackage.getAllVariants(this);
}",0.6274509803921569
130919,"/** 
 * Finds a product variant by id and returns the master variant if not variant with the id is present.
 * @param variantId the id of the variant to find
 * @return a variant
 * @see #getVariant(int)
 */
default ProductVariant getVariantOrMaster(final int variantId){
  return getVariant(variantId).orElseGet(() -> getMasterVariant());
}","/** 
 * Finds a product variant by id and returns the master variant if not variant with the id is present.
 * @param variantId the id of the variant to find
 * @return a variant
 * @see #getVariant(int)
 */
default ProductVariant getVariantOrMaster(final int variantId){
  return ProductsPackage.getVariantOrMaster(variantId,this);
}",0.9037037037037036
130920,"/** 
 * Gets all variants in the product including the master variant as first element in the list.
 * @see #getMasterVariant()
 * @see #getVariants()
 * @return all variants
 */
default List<ProductVariant> getAllVariants(){
  final List<ProductVariant> nonMasterVariants=getVariants();
  final ArrayList<ProductVariant> result=new ArrayList<>(1 + nonMasterVariants.size());
  result.add(getMasterVariant());
  result.addAll(nonMasterVariants);
  return result;
}","/** 
 * Gets all variants in the product including the master variant as first element in the list.
 * @see #getMasterVariant()
 * @see #getVariants()
 * @return all variants
 */
default List<ProductVariant> getAllVariants(){
  return ProductsPackage.getAllVariants(this);
}",0.6476964769647696
130921,@Override Optional<ProductVariant> getVariant(final int variantId);,"@Override default Optional<ProductVariant> getVariant(final int variantId){
  return ProductsPackage.getVariant(variantId,this);
}",0.6802030456852792
130922,@Override ProductVariant getVariantOrMaster(final int variantId);,"@Override default ProductVariant getVariantOrMaster(final int variantId){
  return ProductsPackage.getVariantOrMaster(variantId,this);
}",0.6467661691542289
130923,@Override List<ProductVariant> getAllVariants();,"@Override default List<ProductVariant> getAllVariants(){
  return ProductsPackage.getAllVariants(this);
}",0.6274509803921569
130924,"/** 
 * Takes an http response and maps it into a Java object of type T. Before calling this method, check with   {@link #canHandleResponse(HttpResponse)} if the response can be consumed.
 * @return
 */
Function<HttpResponse,T> resultMapper();","/** 
 * Takes an http response and maps it into a Java object of type T. Before calling this method, check with   {@link #canHandleResponse(HttpResponse)} if the response can be consumed.
 * @return function to map the result of the http request
 */
Function<HttpResponse,T> resultMapper();",0.9118198874296436
130925,"private String getString(final Tag tag) throws IOException {
  int pos=tag.text().indexOf(""String_Node_Str"");
  final boolean fullFileRequested=pos == -1;
  if (fullFileRequested) {
    pos=tag.text().length();
  }
  final String fullyQualifiedClassName=tag.text().substring(0,pos);
  final String partialFilePath=fullyQualifiedClassName.replace('.','/').concat(""String_Node_Str"");
  final File testFile=findFile(fullyQualifiedClassName,partialFilePath,tag);
  String imports=""String_Node_Str"";
  String res=""String_Node_Str"";
  if (fullFileRequested) {
    final int fileLength=(int)testFile.length();
    final StringBuilder fileContents=new StringBuilder(fileLength);
    final StringBuilder importStatements=new StringBuilder(fileLength);
    String lineSeparator=System.getProperty(""String_Node_Str"");
    try (Scanner scanner=new Scanner(testFile)){
      Position position=Position.START;
      while (scanner.hasNextLine()) {
        final String line=scanner.nextLine();
        final String trimmedLine=line.trim();
        if (position != Position.CODE && ""String_Node_Str"".equals(trimmedLine)) {
        }
 else         if (position == Position.START && trimmedLine.startsWith(""String_Node_Str"")) {
          position=Position.IMPORTS;
        }
 else         if (position == Position.IMPORTS && trimmedLine.startsWith(""String_Node_Str"")) {
          importStatements.append(line + lineSeparator);
        }
 else         if (position == Position.IMPORTS || position == Position.CODE) {
          position=Position.CODE;
          fileContents.append(line + lineSeparator);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      res=fileContents.toString();
      imports=importStatements.toString();
    }
   }
 else {
    final String testName=tag.text().substring(pos + 1);
    final Scanner scanner=new Scanner(testFile);
    List<String> lines=new ArrayList<>();
    boolean endFound=false;
    while (scanner.hasNext() && !endFound) {
      String current=scanner.findInLine(""String_Node_Str"" + testName + ""String_Node_Str"");
      final boolean methodStartFound=current != null;
      if (methodStartFound) {
        scanner.nextLine();
        do {
          current=scanner.nextLine();
          endFound=current.equals(""String_Node_Str"") || current.contains(""String_Node_Str"");
          if (!endFound) {
            final String currentWithoutLeadingWhitspace=current.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            lines.add(currentWithoutLeadingWhitspace);
          }
        }
 while (!endFound);
      }
 else {
        scanner.nextLine();
      }
    }
    for (    String s : lines) {
      res+=s + ""String_Node_Str"";
    }
  }
  final String htmlEscapedBody=htmlEscape(res);
  if (""String_Node_Str"".equals(htmlEscapedBody)) {
    throw new RuntimeException(""String_Node_Str"" + tag.text());
  }
  final String htmlEscapedImports=htmlEscape(imports);
  final String tagId=tag.text().replaceAll(""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"" + tagId + ""String_Node_Str""+ (fullFileRequested ? ""String_Node_Str"" + ""String_Node_Str"" + htmlEscapedImports + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ htmlEscapedBody+ ""String_Node_Str""+ ""String_Node_Str"";
}","private String getString(final Tag tag) throws IOException {
  int pos=tag.text().indexOf(""String_Node_Str"");
  final boolean fullFileRequested=pos == -1;
  if (fullFileRequested) {
    pos=tag.text().length();
  }
  final String fullyQualifiedClassName=tag.text().substring(0,pos);
  final String partialFilePath=fullyQualifiedClassName.replace('.','/').concat(""String_Node_Str"");
  final File testFile=findFile(fullyQualifiedClassName,partialFilePath,tag);
  String imports=""String_Node_Str"";
  String res=""String_Node_Str"";
  if (fullFileRequested) {
    final int fileLength=(int)testFile.length();
    final StringBuilder fileContents=new StringBuilder(fileLength);
    final StringBuilder importStatements=new StringBuilder(fileLength);
    String lineSeparator=System.getProperty(""String_Node_Str"");
    try (Scanner scanner=new Scanner(testFile)){
      Position position=Position.START;
      while (scanner.hasNextLine()) {
        final String line=scanner.nextLine();
        final String trimmedLine=line.trim();
        if (position != Position.CODE && ""String_Node_Str"".equals(trimmedLine)) {
        }
 else         if (position == Position.START && trimmedLine.startsWith(""String_Node_Str"")) {
          position=Position.IMPORTS;
        }
 else         if (position == Position.IMPORTS && trimmedLine.startsWith(""String_Node_Str"")) {
          importStatements.append(line + lineSeparator);
        }
 else         if (position == Position.IMPORTS || position == Position.CODE) {
          position=Position.CODE;
          fileContents.append(line + lineSeparator);
        }
 else {
          throw new IllegalStateException(""String_Node_Str"");
        }
      }
      res=fileContents.toString();
      imports=importStatements.toString();
    }
   }
 else {
    final String testName=tag.text().substring(pos + 1);
    final Scanner scanner=new Scanner(testFile);
    List<String> lines=new ArrayList<>();
    boolean endFound=false;
    while (scanner.hasNext() && !endFound) {
      String current=scanner.findInLine(""String_Node_Str"" + testName + ""String_Node_Str"");
      final boolean methodStartFound=current != null;
      if (methodStartFound) {
        scanner.nextLine();
        do {
          current=scanner.nextLine();
          endFound=current.equals(""String_Node_Str"") || current.contains(""String_Node_Str"");
          if (!endFound) {
            final String currentWithoutLeadingWhitespace=current.replaceFirst(""String_Node_Str"",""String_Node_Str"");
            lines.add(currentWithoutLeadingWhitespace);
          }
        }
 while (!endFound);
      }
 else {
        scanner.nextLine();
      }
    }
    for (    String s : lines) {
      res+=s + ""String_Node_Str"";
    }
  }
  final String htmlEscapedBody=htmlEscape(res);
  if (""String_Node_Str"".equals(htmlEscapedBody)) {
    throw new RuntimeException(""String_Node_Str"" + tag.text());
  }
  final String htmlEscapedImports=htmlEscape(imports);
  final String tagId=tag.text().replaceAll(""String_Node_Str"",""String_Node_Str"");
  return ""String_Node_Str"" + tagId + ""String_Node_Str""+ (fullFileRequested ? ""String_Node_Str"" + ""String_Node_Str"" + htmlEscapedImports + ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ htmlEscapedBody+ ""String_Node_Str""+ ""String_Node_Str"";
}",0.9996951219512196
130926,"@JsonIgnore public static LocalizedString of(final Locale locale,final String value){
  return new LocalizedString(locale,value);
}","@JsonIgnore public static LocalizedString of(final Map<Locale,String> translations){
  requireNonNull(translations);
  return new LocalizedString(translations);
}",0.7167235494880546
130927,"/** 
 * Delivers an immutable map of the translation.
 * @return the key-value pairs for the translation
 */
@JsonAnyGetter private Map<Locale,String> getTranslations(){
  return translations;
}","/** 
 * Delivers an immutable map of the translation.
 * @return the key-value pairs for the translation
 */
@JsonAnyGetter private Map<Locale,String> getTranslations(){
  return immutableCopyOf(translations);
}",0.8987654320987655
130928,"public static <K,V>Map<K,V> immutableCopyOf(final Map<K,V> map){
  return Collections.unmodifiableMap(copy(map));
}","public static <K,V>Map<K,V> immutableCopyOf(final Map<K,V> map){
  return Collections.unmodifiableMap(copyOf(map));
}",0.9913793103448276
130929,"public void queryByAttributeName(){
  Predicate<ProductTypeQueryModel<ProductType>> hasSizeAttribute=ProductTypeQueryModel.get().attributes().name().is(""String_Node_Str"");
  F.Promise<PagedQueryResult<ProductType>> result=client.execute(new ProductTypeQuery().withPredicate(hasSizeAttribute));
}","public void queryByAttributeName(){
  Predicate<ProductType> hasSizeAttribute=ProductTypeQueryModel.get().attributes().name().is(""String_Node_Str"");
  F.Promise<PagedQueryResult<ProductType>> result=client.execute(new ProductTypeQuery().withPredicate(hasSizeAttribute));
}",0.9594356261022928
130930,"/** 
 * returns a sort expression. Example: dog.age asc
 * @return
 */
String toSphereSort();","/** 
 * returns a sort expression. Example: dog.age asc
 * @return String with unescaped sphere sort expression
 */
String toSphereSort();",0.8051948051948052
130931,"/** 
 * @param key The key of the value used as a programmatic identifier, e.g. in facets & filters.
 * @param label A descriptive label of the value.
 */
public static PlainEnumValue of(final String key,final String label){
  return new PlainEnumValue(key,label);
}","/** 
 * @param key The key of the value used as a programmatic identifier, e.g. in facets &amp; filters.
 * @param label A descriptive label of the value.
 * @return PlainEnumValue
 */
public static PlainEnumValue of(final String key,final String label){
  return new PlainEnumValue(key,label);
}",0.9466192170818504
130932,"/** 
 * Pretty prints given JSON string, replacing passwords by   {@code 'xxxxx'}.
 * @param json JSON code as String which should be formatted
 * @return <code>json</code> formatted
 * @throws java.io.IOException if <code>json</code> is invalid JSON
 */
public static String prettyPrintJsonStringSecure(String json){
  try {
    ObjectMapper jsonParser=new ObjectMapper();
    JsonNode jsonTree=jsonParser.readValue(json,JsonNode.class);
    secure(jsonTree);
    ObjectWriter writer=jsonParser.writerWithDefaultPrettyPrinter();
    return writer.writeValueAsString(jsonTree);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Pretty prints given JSON string, replacing passwords by   {@code 'xxxxx'}.
 * @param json JSON code as String which should be formatted
 * @return <code>json</code> formatted
 */
public static String prettyPrintJsonStringSecure(String json){
  try {
    ObjectMapper jsonParser=new ObjectMapper();
    JsonNode jsonTree=jsonParser.readValue(json,JsonNode.class);
    secure(jsonTree);
    ObjectWriter writer=jsonParser.writerWithDefaultPrettyPrinter();
    return writer.writeValueAsString(jsonTree);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.3447154471544715
130933,"/** 
 * Sphere web service endpoint where the request was sent. 
 */
public String getRequestUrl(){
  return requestUrl;
}","public String getRequestUrl(){
  return requestUrl;
}",0.6057142857142858
130934,"/** 
 * The HTTP status code of the response. 
 */
public int getStatusCode(){
  return errorResponse.getStatusCode();
}","public int getStatusCode(){
  return errorResponse.getStatusCode();
}",0.7301587301587301
130935,"/** 
 * The message of the first error, for convenience. 
 */
public String getMessage(){
  return errorResponse.getMessage();
}","public String getMessage(){
  return errorResponse.getMessage();
}",0.6804123711340206
130936,"/** 
 * The individual errors. 
 */
@Nonnull public List<SphereError> getErrors(){
  return errorResponse.getErrors();
}","@Nonnull public List<SphereError> getErrors(){
  return errorResponse.getErrors();
}",0.8235294117647058
130937,"/** 
 * The HTTP status code. 
 */
public int getStatusCode(){
  return statusCode;
}","public int getStatusCode(){
  return statusCode;
}",0.7407407407407407
130938,"/** 
 * The message of the first error, for convenience. 
 */
public String getMessage(){
  return message;
}","/** 
 * The message of the first error, for convenience.
 * @return the first error message
 */
public String getMessage(){
  return message;
}",0.8650793650793651
130939,"/** 
 * The individual errors. 
 */
public List<SphereError> getErrors(){
  return errors;
}","public List<SphereError> getErrors(){
  return errors;
}",0.7567567567567568
130940,"/** 
 * Creates an executor that only allows execution of a single task at a time. 
 */
public static ThreadPoolExecutor singleTaskExecutor(String poolName){
  return new ThreadPoolExecutor(1,1,30,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),namedThreadFactory(poolName));
}","/** 
 * Creates an executor that only allows execution of a single task at a time.
 * @param poolName the name of the pool
 * @return a new ThreadPoolExecutor
 */
public static ThreadPoolExecutor singleTaskExecutor(final String poolName){
  return new ThreadPoolExecutor(1,1,30,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),namedThreadFactory(poolName));
}",0.8701095461658842
130941,"/** 
 * Creates a thread factory.
 * @param poolName Name of created threads (an auto-incrementing suffix is appended). 
 */
public static ThreadFactory namedThreadFactory(final String poolName){
  return new ThreadFactory(){
    final AtomicInteger count=new AtomicInteger(0);
    @Override public Thread newThread(    Runnable r){
      Thread newThread=new Thread(r,poolName + ""String_Node_Str"" + count.incrementAndGet());
      return newThread;
    }
  }
;
}","/** 
 * Creates a thread factory.
 * @param poolName Name of created threads (an auto-incrementing suffix is appended).
 * @return a new ThreadFactory
 */
public static ThreadFactory namedThreadFactory(final String poolName){
  return new ThreadFactory(){
    final AtomicInteger count=new AtomicInteger(0);
    @Override public Thread newThread(    Runnable r){
      Thread newThread=new Thread(r,poolName + ""String_Node_Str"" + count.incrementAndGet());
      return newThread;
    }
  }
;
}",0.9665271966527196
130942,"/** 
 * Returns all available locales.
 */
@JsonIgnore public Set<Locale> getLocales(){
  return translations.keySet();
}","@JsonIgnore public Set<Locale> getLocales(){
  return translations.keySet();
}",0.7839195979899497
130943,"/** 
 * LocalizedString containing the given entries, in order.
 * @throws IllegalArgumentException if duplicate locales are provided
 */
public LocalizedString(final Locale locale1,final String value1,final Locale locale2,final String value2){
  this(ImmutableMap.of(locale1,value1,locale2,value2));
}","/** 
 * LocalizedString containing the 2 entries.
 * @param locale1 the locale for the first entry
 * @param value1 the value for the first entry
 * @param locale2 the locale for the second entry
 * @param value2 the value for the second entry
 * @throws IllegalArgumentException if duplicate locales are provided
 */
public LocalizedString(final Locale locale1,final String value1,final Locale locale2,final String value2){
  this(ImmutableMap.of(locale1,value1,locale2,value2));
}",0.7117346938775511
130944,"/** 
 * LocalizedString containing the given entries, in order.
 * @throws IllegalArgumentException if duplicate locales are provided
 */
public LocalizedString plus(final Locale locale,final String value){
  final Map<Locale,String> newMap=new ImmutableMap.Builder<Locale,String>().putAll(translations).put(locale,value).build();
  return new LocalizedString(newMap);
}","/** 
 * LocalizedString containing the given entries.
 * @param locale the additional locale of the new entry
 * @param value the value for the <code>locale</code>
 * @return a LocalizedString containing this data and the from the parameters.
 * @throws IllegalArgumentException if duplicate locales are provided
 */
public LocalizedString plus(final Locale locale,final String value){
  final Map<Locale,String> newMap=new ImmutableMap.Builder<Locale,String>().putAll(translations).put(locale,value).build();
  return new LocalizedString(newMap);
}",0.7834602829162133
130945,"/** 
 * The ISO 4217 currency code, for example ""EUR"" or ""USD"".
 */
public String getCurrencyCode(){
  return currencyCode;
}","/** 
 * @return The ISO 4217 currency code, for example ""EUR"" or ""USD"".
 */
public String getCurrencyCode(){
  return currencyCode;
}",0.9689922480620154
130946,"/** 
 * Formats the amount to given number of decimal places. <p/> Example:  {@code price.format(2) => ""3.50""}
 */
public String format(final int decimalPlaces){
  return getAmount().setScale(decimalPlaces).toPlainString();
}","/** 
 * Formats the amount to given number of decimal places. <br> Example:  {@code price.format(2) => ""3.50""}
 * @param decimalPlaces number of the decimal places to display
 * @return formatted money output without the currency
 */
public String format(final int decimalPlaces){
  return getAmount().setScale(decimalPlaces).toPlainString();
}",0.7838312829525483
130947,"/** 
 * The cent amount.
 */
public long getCentAmount(){
  return centAmount;
}","public long getCentAmount(){
  return centAmount;
}",0.7786259541984732
130948,"/** 
 * Returns a new Money instance that is a sum of this instance and given instance.
 */
public Money plus(final Money amount){
  if (!amount.currencyCode.equals(this.currencyCode)) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",this,amount));
  }
  return new Money(centAmount + amount.centAmount,currencyCode);
}","/** 
 * Returns a new Money instance that is a sum of this instance and given instance.
 * @param amount the amount which should be added to this amount
 * @return a new money instance
 */
public Money plus(final Money amount){
  if (!amount.currencyCode.equals(this.currencyCode)) {
    throw new IllegalArgumentException(String.format(""String_Node_Str"",this,amount));
  }
  return new Money(centAmount + amount.centAmount,currencyCode);
}",0.876117496807152
130949,"/** 
 * Creates a new Money instance. Money can't represent cent fractions. The value will be rounded to nearest cent value using RoundingMode.HALF_EVEN.
 * @param amount the money value as fraction, e.g. 43.21 will be 4321 cents.
 */
public Money(final BigDecimal amount,final String currencyCode){
  this(amountToCents(amount),requireValidCurrencyCode(currencyCode));
}","/** 
 * Creates a new Money instance. Money can't represent cent fractions. The value will be rounded to nearest cent value using RoundingMode.HALF_EVEN.
 * @param amount the money value as fraction, e.g. 43.21 will be 4321 cents.
 * @param currencyCode the ISO 4217 currency code
 */
public Money(final BigDecimal amount,final String currencyCode){
  this(amountToCents(amount),requireValidCurrencyCode(currencyCode));
}",0.9368686868686869
130950,"/** 
 * Returns a new Money instance that has the amount multiplied by given factor. Fractional cents will be rounded to the nearest cent value using Banker's rounding algorithm (RoundingMode.HALF_EVEN).
 */
public Money multiply(final double multiplier){
  return multiply(multiplier,RoundingMode.HALF_EVEN);
}","/** 
 * Returns a new Money instance that has the amount multiplied by given factor. Fractional cents will be rounded to the nearest cent value using Banker's rounding algorithm (RoundingMode.HALF_EVEN).
 * @param multiplier the factor to multiply with
 * @return the new money instance
 */
public Money multiply(final double multiplier){
  return multiply(multiplier,RoundingMode.HALF_EVEN);
}",0.8822695035460993
130951,"/** 
 * The exact amount as BigDecimal, useful for implementing e.g. custom rounding / formatting methods.
 */
@JsonIgnore public BigDecimal getAmount(){
  return centsToAmount(centAmount);
}","/** 
 * The exact amount as BigDecimal, useful for implementing e.g. custom rounding / formatting methods.
 * @return the amount as decimal number
 */
@JsonIgnore public BigDecimal getAmount(){
  return centsToAmount(centAmount);
}",0.90521327014218
130952,"/** 
 * Id of the object this reference represents.
 */
public String getId(){
  return id;
}","/** 
 * Id of the object this reference represents.
 * @return the id
 */
public String getId(){
  return id;
}",0.9117647058823528
130953,"/** 
 * Type id of the object this reference represents, e.g. ""customer"".
 */
public String getTypeId(){
  return typeId;
}","/** 
 * Type id of the object this reference represents, e.g. ""customer"".
 * @return the type id
 */
public String getTypeId(){
  return typeId;
}",0.9144981412639404
130954,"/** 
 * Pretty prints given JSON string, replacing passwords by   {@code 'xxxxx'}. 
 */
public static String prettyPrintJsonStringSecure(String json) throws IOException {
  ObjectMapper jsonParser=new ObjectMapper();
  JsonNode jsonTree=jsonParser.readValue(json,JsonNode.class);
  secure(jsonTree);
  ObjectWriter writer=jsonParser.writerWithDefaultPrettyPrinter();
  return writer.writeValueAsString(jsonTree);
}","/** 
 * Pretty prints given JSON string, replacing passwords by   {@code 'xxxxx'}.
 * @param json JSON code as String which should be formatted
 * @return <code>json</code> formatted
 * @throws java.io.IOException if <code>json</code> is invalid JSON
 */
public static String prettyPrintJsonStringSecure(String json) throws IOException {
  ObjectMapper jsonParser=new ObjectMapper();
  JsonNode jsonTree=jsonParser.readValue(json,JsonNode.class);
  secure(jsonTree);
  ObjectWriter writer=jsonParser.writerWithDefaultPrettyPrinter();
  return writer.writeValueAsString(jsonTree);
}",0.8301507537688442
130955,"/** 
 * Partitions <code>list</code> in two lists according to <code>predicate</code>.
 * @param list
 * @param predicate
 * @param < T >
 * @return the first list satisfies <code>predicate</code>, the second one not.
 */
public static <T>Pair<List<T>,List<T>> partition(final List<T> list,final Predicate<T> predicate){
  final List<T> matchingPredicate=newArrayList();
  final List<T> notMatchingPredicate=newArrayList();
  for (  final T element : list) {
    if (predicate.apply(element)) {
      matchingPredicate.add(element);
    }
 else {
      notMatchingPredicate.add(element);
    }
  }
  return new Pair<>(matchingPredicate,notMatchingPredicate);
}","/** 
 * Partitions <code>list</code> in two lists according to <code>predicate</code>.
 * @param list the list which should be divided
 * @param predicate returns true if the element of <code>list</code> should belong to the first result list
 * @param < T > generic type of the list
 * @return the first list satisfies <code>predicate</code>, the second one not.
 */
public static <T>Pair<List<T>,List<T>> partition(final List<T> list,final Predicate<T> predicate){
  final List<T> matchingPredicate=newArrayList();
  final List<T> notMatchingPredicate=newArrayList();
  for (  final T element : list) {
    if (predicate.apply(element)) {
      matchingPredicate.add(element);
    }
 else {
      notMatchingPredicate.add(element);
    }
  }
  return new Pair<>(matchingPredicate,notMatchingPredicate);
}",0.9004092769440655
130956,"/** 
 * Encodes urls with US-ASCII. 
 */
public static String urlEncode(String s){
  try {
    return URLEncoder.encode(s,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + s);
  }
}","/** 
 * Encodes urls with US-ASCII.
 * @param s String which should be URL encoded
 * @return url encoded s
 */
public static String urlEncode(final String s){
  try {
    return URLEncoder.encode(s,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + s);
  }
}",0.6509274873524452
130957,"/** 
 * If this is a successful result, returns the value. You should always check for   {@link #isSuccess() isSuccess} before calling this method. 
 */
public E getError(){
  if (!isError())   throw new IllegalStateException(""String_Node_Str"");
  return error;
}","/** 
 * If this is a successful result, returns the value. You should always check for   {@link #isSuccess() isSuccess} before calling this method.
 * @return error value if defined
 */
public E getError(){
  if (!isError())   throw new IllegalStateException(""String_Node_Str"");
  return error;
}",0.9373881932021468
130958,"/** 
 * If this is a successful result, returns the value. You should always check for   {@link #isSuccess() isSuccess} before calling this method. 
 */
public T getValue(){
  if (!isSuccess())   throw new IllegalStateException(""String_Node_Str"");
  return value;
}","/** 
 * If this is a successful result, returns the value. You should always check for   {@link #isSuccess() isSuccess} before calling this method.
 * @return the value if present
 */
public T getValue(){
  if (!isSuccess())   throw new IllegalStateException(""String_Node_Str"");
  return value;
}",0.9411764705882352
130959,"/** 
 * Returns true if this is an erroneous result. 
 */
public boolean isError(){
  return !isSuccess();
}","public boolean isError(){
  return !isSuccess();
}",0.6329113924050633
130960,"/** 
 * Returns true if this is a successful result. 
 */
public boolean isSuccess(){
  return error == null;
}","public boolean isSuccess(){
  return error == null;
}",0.6463414634146342
130961,"/** 
 * Creates an instance of ClientCredentials based on config. 
 */
public static ShopClientCredentials createAndBeginRefreshInBackground(ShopClientConfig config,OAuthClient oauthClient){
  String authEndpoint=Endpoints.tokenEndpoint(config.getAuthHttpServiceUrl());
  ShopClientCredentials credentials=new ShopClientCredentials(oauthClient,authEndpoint,config.getProjectKey(),config.getClientId(),config.getClientSecret());
  credentials.beginRefresh(false);
  return credentials;
}","/** 
 * Creates an instance of ClientCredentials based on config. 
 */
public static ShopClientCredentials createAndBeginRefreshInBackground(ShopClientConfig config,OAuthClient oauthClient){
  String authEndpoint=Endpoints.tokenEndpoint(config.getAuthHttpServiceUrl());
  ShopClientCredentials credentials=new ShopClientCredentials(oauthClient,authEndpoint,config.getProjectKey(),config.getClientId(),config.getClientSecret());
  credentials.beginRefresh();
  return credentials;
}",0.9948293691830404
130962,"/** 
 * Asynchronously refreshes the tokens contained in this instance. 
 */
private void beginRefresh(final boolean isAboutToExpire){
  try {
    refreshExecutor.execute(new Runnable(){
      @Override public void run(){
        Log.debug(isAboutToExpire ? ""String_Node_Str"" : ""String_Node_Str"");
        Tokens tokens=null;
        try {
          tokens=oauthClient.getTokensForClient(tokenEndpoint,clientID,clientSecret,""String_Node_Str"" + projectID).get();
        }
 catch (        Exception e) {
          update(null,e);
          return;
        }
        update(tokens,null);
      }
    }
);
  }
 catch (  RejectedExecutionException e) {
  }
}","/** 
 * Asynchronously refreshes the tokens contained in this instance. 
 */
private void beginRefresh(){
  try {
    refreshExecutor.execute(new Runnable(){
      @Override public void run(){
        Log.debug(""String_Node_Str"");
        Tokens tokens=null;
        try {
          tokens=oauthClient.getTokensForClient(tokenEndpoint,clientID,clientSecret,""String_Node_Str"" + projectID).get();
        }
 catch (        Exception e) {
          update(null,e);
          return;
        }
        update(tokens,null);
      }
    }
);
  }
 catch (  RejectedExecutionException e) {
  }
}",0.9460112812248188
130963,"private void update(Tokens tokens,Exception e){
  if (e != null) {
    Log.error(""String_Node_Str"",e);
  }
synchronized (accessTokenLock) {
    if (e == null) {
      this.accessToken=Optional.of(Validation.success(new AccessToken(tokens.getAccessToken(),tokens.getExpiresIn(),System.currentTimeMillis())));
      Log.debug(""String_Node_Str"");
    }
 else {
      this.accessToken=Optional.of(Validation.<AccessToken>error(new SphereException(e)));
      Log.error(""String_Node_Str"",e);
    }
    accessTokenLock.notifyAll();
  }
}","private void update(Tokens tokens,Exception e){
synchronized (accessTokenLock) {
    if (e == null) {
      AccessToken newToken=new AccessToken(tokens.getAccessToken(),tokens.getExpiresIn(),System.currentTimeMillis());
      this.accessToken=Optional.of(Validation.success(newToken));
      Log.debug(""String_Node_Str"");
      if (tokens.getExpiresIn().isPresent()) {
        if (tokens.getExpiresIn().get() * 1000 > Defaults.tokenAboutToExpireMs) {
          long refreshTimeout=tokens.getExpiresIn().get() * 1000 - Defaults.tokenAboutToExpireMs;
          Log.debug(""String_Node_Str"" + refreshTimeout / 1000 + ""String_Node_Str"");
          refreshTimer.schedule(new TimerTask(){
            @Override public void run(){
              beginRefresh();
            }
          }
,refreshTimeout);
        }
 else {
          Log.warn(""String_Node_Str"" + tokens.getExpiresIn().get() + ""String_Node_Str"");
        }
      }
 else {
        Log.warn(""String_Node_Str"");
      }
    }
 else {
      this.accessToken=Optional.of(Validation.<AccessToken>error(new SphereException(e)));
      Log.error(""String_Node_Str"",e);
    }
    accessTokenLock.notifyAll();
  }
}",0.4760779681039574
130964,"@Override public void run(){
  Log.debug(isAboutToExpire ? ""String_Node_Str"" : ""String_Node_Str"");
  Tokens tokens=null;
  try {
    tokens=oauthClient.getTokensForClient(tokenEndpoint,clientID,clientSecret,""String_Node_Str"" + projectID).get();
  }
 catch (  Exception e) {
    update(null,e);
    return;
  }
  update(tokens,null);
}","@Override public void run(){
  beginRefresh();
}",0.2198952879581152
130965,"public String accessToken(){
synchronized (accessTokenLock) {
    while (!accessToken.isPresent()) {
      try {
        accessTokenLock.wait();
      }
 catch (      InterruptedException e) {
      }
    }
    Validation<AccessToken> tokenValidation=accessToken.get();
    if (tokenValidation.isError()) {
      beginRefresh(false);
      throw tokenValidation.exception();
    }
    AccessToken token=tokenValidation.value();
    if (token.remainingMs().isPresent()) {
      if (token.remainingMs().get() < Defaults.tokenAboutToExpireMs) {
        beginRefresh(true);
      }
    }
    return token.accessToken();
  }
}","public String accessToken(){
synchronized (accessTokenLock) {
    Optional<Validation<AccessToken>> token=waitForTokenAndClearIfExpired();
    if (!token.isPresent()) {
      Log.warn(""String_Node_Str"");
      beginRefresh();
      token=waitForTokenAndClearIfExpired();
    }
    if (!token.isPresent()) {
      throw new AssertionError(""String_Node_Str"");
    }
    if (token.get().isError()) {
      beginRefresh();
      throw token.get().exception();
    }
    return token.get().value().accessToken();
  }
}",0.2257495590828924
130966,"/** 
 * {@inheritDoc}  
 */
public CommandRequestBuilder<Order> order(String cartId,String cartVersion){
  return order(cartId,cartVersion,null);
}","/** 
 * {@inheritDoc}  
 */
public CommandRequestBuilder<Order> order(String cartId,int cartVersion){
  return order(cartId,cartVersion,null);
}",0.9828178694158076
130967,"public UpdateShipmentState(String id,String version,ShipmentState shipmentState){
  super(id,version);
  this.shipmentState=shipmentState;
}","public UpdateShipmentState(String id,int version,ShipmentState shipmentState){
  super(id,version);
  this.shipmentState=shipmentState;
}",0.9819494584837544
130968,"public UpdatePaymentState(String id,String version,PaymentState paymentState){
  super(id,version);
  this.paymentState=paymentState;
}","public UpdatePaymentState(String id,int version,PaymentState paymentState){
  super(id,version);
  this.paymentState=paymentState;
}",0.9812734082397004
130969,"/** 
 * {@inheritDoc}  
 */
public CommandRequestBuilder<Order> updateShipmentState(String orderId,String orderVersion,ShipmentState shipmentState){
  return createCommandRequest(endpoints.updateShipmentState(),new OrderCommands.UpdateShipmentState(orderId,orderVersion,shipmentState));
}","/** 
 * {@inheritDoc}  
 */
public CommandRequestBuilder<Order> updateShipmentState(String orderId,int orderVersion,ShipmentState shipmentState){
  return createCommandRequest(endpoints.updateShipmentState(),new OrderCommands.UpdateShipmentState(orderId,orderVersion,shipmentState));
}",0.9842931937172776
130970,"/** 
 * {@inheritDoc}  
 */
public CommandRequestBuilder<Order> updatePaymentState(String orderId,String orderVersion,PaymentState paymentState){
  return createCommandRequest(endpoints.updatePaymentState(),new OrderCommands.UpdatePaymentState(orderId,orderVersion,paymentState));
}","/** 
 * {@inheritDoc}  
 */
public CommandRequestBuilder<Order> updatePaymentState(String orderId,int orderVersion,PaymentState paymentState){
  return createCommandRequest(endpoints.updatePaymentState(),new OrderCommands.UpdatePaymentState(orderId,orderVersion,paymentState));
}",0.983957219251337
130971,"/** 
 * Sets the shipment state of the order. 
 */
public CommandRequestBuilder<Order> updateShipmentState(String orderId,String orderVersion,ShipmentState shipmentState);","/** 
 * Sets the shipment state of the order. 
 */
public CommandRequestBuilder<Order> updateShipmentState(String orderId,int orderVersion,ShipmentState shipmentState);",0.9852507374631267
130972,"/** 
 * Sets the payment state of the order. 
 */
public CommandRequestBuilder<Order> updatePaymentState(String orderId,String orderVersion,PaymentState paymentState);","/** 
 * Sets the payment state of the order. 
 */
public CommandRequestBuilder<Order> updatePaymentState(String orderId,int orderVersion,PaymentState paymentState);",0.9848942598187312
130973,"@Override public void onAnimationEnd(Animator animation){
  if (mCardStackListener != null) {
    boolean choice=getStackChoice();
    mCardStackListener.onChoiceMade(choice,last);
  }
  recycleView(last);
  final ViewGroup parent=(ViewGroup)view.getParent();
  if (null != parent) {
    parent.removeView(view);
    parent.addView(view,0);
  }
  last.setScaleX(1);
  last.setScaleY(1);
  setTranslationY(0);
  setTranslationX(0);
  requestLayout();
}","@Override public void onAnimationEnd(Animator animation){
  if (mCardStackListener != null) {
    boolean choice=finalChoice;
    mCardStackListener.onChoiceMade(choice,last);
  }
  recycleView(last);
  final ViewGroup parent=(ViewGroup)view.getParent();
  if (null != parent) {
    parent.removeView(view);
    parent.addView(view,0);
  }
  last.setScaleX(1);
  last.setScaleY(1);
  setTranslationY(0);
  setTranslationX(0);
  requestLayout();
}",0.9832775919732442
130974,"@Override public boolean onTouch(final View view,MotionEvent event){
  if (!isTopCard(view)) {
    return false;
  }
  final int X=(int)event.getRawX();
  final int Y=(int)event.getRawY();
  final int action=event.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mXStart=X;
      mYStart=Y;
      break;
    }
case MotionEvent.ACTION_UP:
  if (mBeingDragged == null) {
    return false;
  }
if (!canAcceptChoice()) {
  requestLayout();
  AnimatorSet set=new AnimatorSet();
  ObjectAnimator yTranslation=ObjectAnimator.ofFloat(mBeingDragged,""String_Node_Str"",0);
  ObjectAnimator xTranslation=ObjectAnimator.ofFloat(mBeingDragged,""String_Node_Str"",0);
  set.playTogether(xTranslation,yTranslation);
  set.setDuration(100).start();
  set.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      View finalView=mBeingDragged;
      mBeingDragged=null;
      mXDelta=0;
      mYDelta=0;
      mXStart=0;
      mYStart=0;
      requestLayout();
      if (mCardStackListener != null) {
        mCardStackListener.onCancelled(finalView);
      }
    }
  }
);
  ValueAnimator.AnimatorUpdateListener onUpdate=new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      mXDelta=(int)view.getTranslationX();
      mYDelta=(int)view.getTranslationY();
      requestLayout();
    }
  }
;
  yTranslation.addUpdateListener(onUpdate);
  xTranslation.addUpdateListener(onUpdate);
  set.start();
}
 else {
  final View last=mCards.poll();
  View recycled=getRecycledOrNew();
  if (recycled != null) {
    RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
    params.addRule(RelativeLayout.CENTER_IN_PARENT);
    mCards.offer(recycled);
    addView(recycled,0,params);
  }
  int sign=mXDelta > 0 ? +1 : -1;
  mBeingDragged=null;
  mXDelta=0;
  mYDelta=0;
  mXStart=0;
  mYStart=0;
  ObjectAnimator animation=ObjectAnimator.ofFloat(last,""String_Node_Str"",sign * 1000).setDuration(300);
  animation.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      if (mCardStackListener != null) {
        boolean choice=getStackChoice();
        mCardStackListener.onChoiceMade(choice,last);
      }
      recycleView(last);
      final ViewGroup parent=(ViewGroup)view.getParent();
      if (null != parent) {
        parent.removeView(view);
        parent.addView(view,0);
      }
      last.setScaleX(1);
      last.setScaleY(1);
      setTranslationY(0);
      setTranslationX(0);
      requestLayout();
    }
  }
);
  animation.start();
}
break;
case MotionEvent.ACTION_MOVE:
boolean choiceBoolean=getStackChoice();
float progress=getStackProgress();
view.setTranslationX(X - mXStart);
view.setTranslationY(Y - mYStart);
mXDelta=X - mXStart;
mYDelta=Y - mYStart;
mBeingDragged=view;
requestLayout();
if (mCardStackListener != null) {
mCardStackListener.onUpdateProgress(choiceBoolean,progress,mBeingDragged);
}
break;
}
return true;
}","@Override public boolean onTouch(final View view,MotionEvent event){
  if (!isTopCard(view)) {
    return false;
  }
  final int X=(int)event.getRawX();
  final int Y=(int)event.getRawY();
  final int action=event.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mXStart=X;
      mYStart=Y;
      break;
    }
case MotionEvent.ACTION_UP:
  if (mBeingDragged == null) {
    return false;
  }
if (!canAcceptChoice()) {
  requestLayout();
  AnimatorSet set=new AnimatorSet();
  ObjectAnimator yTranslation=ObjectAnimator.ofFloat(mBeingDragged,""String_Node_Str"",0);
  ObjectAnimator xTranslation=ObjectAnimator.ofFloat(mBeingDragged,""String_Node_Str"",0);
  set.playTogether(xTranslation,yTranslation);
  set.setDuration(100).start();
  set.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      View finalView=mBeingDragged;
      mBeingDragged=null;
      mXDelta=0;
      mYDelta=0;
      mXStart=0;
      mYStart=0;
      requestLayout();
      if (mCardStackListener != null) {
        mCardStackListener.onCancelled(finalView);
      }
    }
  }
);
  ValueAnimator.AnimatorUpdateListener onUpdate=new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      mXDelta=(int)view.getTranslationX();
      mYDelta=(int)view.getTranslationY();
      requestLayout();
    }
  }
;
  yTranslation.addUpdateListener(onUpdate);
  xTranslation.addUpdateListener(onUpdate);
  set.start();
}
 else {
  final View last=mCards.poll();
  View recycled=getRecycledOrNew();
  if (recycled != null) {
    RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
    params.addRule(RelativeLayout.CENTER_IN_PARENT);
    mCards.offer(recycled);
    addView(recycled,0,params);
  }
  int sign=mXDelta > 0 ? +1 : -1;
  final boolean finalChoice=mXDelta > 0;
  mBeingDragged=null;
  mXDelta=0;
  mYDelta=0;
  mXStart=0;
  mYStart=0;
  ObjectAnimator animation=ObjectAnimator.ofFloat(last,""String_Node_Str"",sign * 1000).setDuration(300);
  animation.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      if (mCardStackListener != null) {
        boolean choice=finalChoice;
        mCardStackListener.onChoiceMade(choice,last);
      }
      recycleView(last);
      final ViewGroup parent=(ViewGroup)view.getParent();
      if (null != parent) {
        parent.removeView(view);
        parent.addView(view,0);
      }
      last.setScaleX(1);
      last.setScaleY(1);
      setTranslationY(0);
      setTranslationX(0);
      requestLayout();
    }
  }
);
  animation.start();
}
break;
case MotionEvent.ACTION_MOVE:
boolean choiceBoolean=getStackChoice();
float progress=getStackProgress();
view.setTranslationX(X - mXStart);
view.setTranslationY(Y - mYStart);
mXDelta=X - mXStart;
mYDelta=Y - mYStart;
mBeingDragged=view;
requestLayout();
if (mCardStackListener != null) {
mCardStackListener.onUpdateProgress(choiceBoolean,progress,mBeingDragged);
}
break;
}
return true;
}",0.9910457307323312
130975,"private boolean adapterHasMoreItems(){
  return mCurrentPosition < mAdapter.getCount() - 1;
}","private boolean adapterHasMoreItems(){
  return mCurrentPosition < mAdapter.getCount();
}",0.978021978021978
130976,"protected void setSignaturePolicy(){
  Policy signaturePolicy=new Policy();
  if (policyDefinedByUser != null && isDefinedAllPolicyValues()) {
    signaturePolicy=policyDefinedByUser;
  }
  facade.setSignaturePolicy(signaturePolicy);
}","protected void setSignaturePolicy(){
  if (policyDefinedByUser != null && isDefinedAllPolicyValues()) {
    facade.setSignaturePolicy(policyDefinedByUser);
  }
}",0.7222222222222222
130977,"protected void setSignaturePolicy(){
  Policy signaturePolicy=new Policy();
  if (policyDefinedByUser != null && isDefinedAllPolicyValues()) {
    signaturePolicy=policyDefinedByUser;
  }
  facade.setSignaturePolicy(signaturePolicy);
}","protected void setSignaturePolicy(){
  if (policyDefinedByUser != null && isDefinedAllPolicyValues()) {
    facade.setSignaturePolicy(policyDefinedByUser);
  }
}",0.7222222222222222
130978,"private DSSDocument extractStreamDocument(ZipEntry entry){
  logger.debug(""String_Node_Str"" + entry.getSize() + ""String_Node_Str"");
  InputStream zipFileInputStream=getZipEntryInputStream(entry);
  String fileName=entry.getName();
  String lMimeType=getDataFileMimeType(fileName);
  if (""String_Node_Str"".equals(lMimeType))   lMimeType=""String_Node_Str"";
  MimeType mimeTypeCode=MimeType.fromMimeTypeString(lMimeType);
  DSSDocument document;
  if (storeDataFilesOnlyInMemory || entry.getSize() <= maxDataFileCachedInBytes) {
    document=new InMemoryDocument(zipFileInputStream,fileName,mimeTypeCode);
  }
 else {
    document=new StreamDocument(zipFileInputStream,fileName,mimeTypeCode);
  }
  return document;
}","private DSSDocument extractStreamDocument(ZipEntry entry){
  logger.debug(""String_Node_Str"",entry.getSize());
  MimeType mimeTypeCode=MimeTypeUtil.mimeTypeOf(this.getDataFileMimeType(entry.getName()));
  if (this.storeDataFilesOnlyInMemory || entry.getSize() <= this.maxDataFileCachedInBytes) {
    return new InMemoryDocument(this.getZipEntryInputStream(entry),entry.getName(),mimeTypeCode);
  }
 else {
    return new StreamDocument(this.getZipEntryInputStream(entry),entry.getName(),mimeTypeCode);
  }
}",0.4508196721311475
130979,"private void validateSignatures(List<Signature> signatures){
  List<SignatureValidationData> validationDatas=startSignatureValidationInParallelTest(signatures);
  extractValidatedSignatureErrorsTest(validationDatas);
}","private void validateSignatures(List<Signature> signatures){
  List<Future<SignatureValidationData>> validationData=startSignatureValidationInParallel(signatures);
  extractValidatedSignatureErrors(validationData);
}",0.9585253456221198
130980,"private boolean containsPolicyId(XAdESSignature xAdESSignature){
  SignaturePolicyProvider signaturePolicyProvider=Helper.getBdocSignaturePolicyProvider();
  xAdESSignature.checkSignaturePolicy(signaturePolicyProvider);
  SignaturePolicy policyId=xAdESSignature.getPolicyId();
  if (policyId == null) {
    return false;
  }
  return StringUtils.isNotBlank(policyId.getIdentifier());
}","private boolean containsPolicyId(XAdESSignature xAdESSignature){
  xAdESSignature.checkSignaturePolicy(new SignaturePolicyProvider());
  SignaturePolicy policyId=xAdESSignature.getPolicyId();
  if (policyId == null) {
    return false;
  }
  return StringUtils.isNotBlank(policyId.getIdentifier());
}",0.8554744525547445
130981,"public byte[] getDataToSign(Collection<DataFile> dataFiles){
  logger.debug(""String_Node_Str"");
  DetachedContentCreator detachedContentCreator=new DetachedContentCreator().populate(dataFiles);
  DSSDocument dssDocumentToSign=detachedContentCreator.getFirstDetachedContent();
  logger.debug(""String_Node_Str"" + xAdESSignatureParameters.toString());
  ToBeSigned dataToSign=service.getDataToSign(dssDocumentToSign,xAdESSignatureParameters);
  logger.debug(""String_Node_Str"");
  return dataToSign.getBytes();
}","public byte[] getDataToSign(Collection<DataFile> dataFiles){
  logger.debug(""String_Node_Str"");
  DetachedContentCreator detachedContentCreator=new DetachedContentCreator().populate(dataFiles);
  DSSDocument dssDocumentToSign=detachedContentCreator.getFirstDetachedContent();
  logger.debug(""String_Node_Str"" + xAdESSignatureParameters.toString());
  List<DSSDocument> detachedContentList=detachedContentCreator.getDetachedContentList();
  ToBeSigned dataToSign=xAdESService.getDataToSign(detachedContentList,xAdESSignatureParameters);
  logger.debug(""String_Node_Str"");
  return dataToSign.getBytes();
}",0.8830935251798561
130982,"public XadesSigningDssFacade(){
  initDefaultXadesParameters();
  initCertificateVerifier();
  initXadesService();
}","public XadesSigningDssFacade(){
  initDefaultXadesParameters();
  initCertificateVerifier();
  initXadesMultipleService();
}",0.9666666666666668
130983,"public void setTspSource(TSPSource tspSource){
  service.setTspSource(tspSource);
}","public void setTspSource(TSPSource tspSource){
  xAdESService.setTspSource(tspSource);
}",0.95906432748538
130984,"private void initDefaultXadesParameters(){
  xAdESSignatureParameters.clearCertificateChain();
  xAdESSignatureParameters.bLevel().setSigningDate(new Date());
  xAdESSignatureParameters.setSignaturePackaging(SignaturePackaging.DETACHED);
  xAdESSignatureParameters.setSignatureLevel(SignatureLevel.XAdES_BASELINE_LT);
  xAdESSignatureParameters.setDigestAlgorithm(DigestAlgorithm.SHA256);
  xAdESSignatureParameters.setSigningCertificateDigestMethod(DigestAlgorithm.SHA256);
}","private void initDefaultXadesParameters(){
  xAdESSignatureParameters.clearCertificateChain();
  xAdESSignatureParameters.bLevel().setSigningDate(new Date());
  xAdESSignatureParameters.setSignaturePackaging(SignaturePackaging.DETACHED);
  xAdESSignatureParameters.setSignatureLevel(SignatureLevel.XAdES_BASELINE_LT);
  xAdESSignatureParameters.setDigestAlgorithm(DigestAlgorithm.SHA256);
  xAdESSignatureParameters.setSigningCertificateDigestMethod(DigestAlgorithm.SHA256);
  xAdESSignatureParameters.setEn319132(false);
}",0.9529529529529528
130985,"public DSSDocument signDocument(byte[] signatureValue,Collection<DataFile> dataFiles){
  logger.debug(""String_Node_Str"");
  SignatureValue dssSignatureValue=new SignatureValue(xAdESSignatureParameters.getSignatureAlgorithm(),signatureValue);
  DetachedContentCreator detachedContentCreator=new DetachedContentCreator().populate(dataFiles);
  DSSDocument dssDocument=detachedContentCreator.getFirstDetachedContent();
  logger.debug(""String_Node_Str"" + xAdESSignatureParameters.toString());
  DSSDocument signedDocument=service.signDocument(dssDocument,xAdESSignatureParameters,dssSignatureValue);
  logger.debug(""String_Node_Str"");
  DSSDocument correctedSignedDocument=surroundWithXadesXmlTag(signedDocument);
  return correctedSignedDocument;
}","public DSSDocument signDocument(byte[] signatureValue,Collection<DataFile> dataFiles){
  logger.debug(""String_Node_Str"");
  SignatureValue dssSignatureValue=new SignatureValue(xAdESSignatureParameters.getSignatureAlgorithm(),signatureValue);
  DetachedContentCreator detachedContentCreator=new DetachedContentCreator().populate(dataFiles);
  DSSDocument dssDocument=detachedContentCreator.getFirstDetachedContent();
  List<DSSDocument> detachedContentList=detachedContentCreator.getDetachedContentList();
  logger.debug(""String_Node_Str"" + xAdESSignatureParameters.toString());
  xAdESSignatureParameters.setDetachedContents(detachedContentCreator.getDetachedContentList());
  DSSDocument signedDocument=xAdESService.signDocument(detachedContentList,xAdESSignatureParameters,dssSignatureValue);
  logger.debug(""String_Node_Str"");
  DSSDocument correctedSignedDocument=surroundWithXadesXmlTag(signedDocument);
  return correctedSignedDocument;
}",0.8703374777975134
130986,"public DSSDocument extendSignature(DSSDocument xadesSignature,DSSDocument detachedContent){
  logger.debug(""String_Node_Str"");
  xAdESSignatureParameters.setDetachedContents(Arrays.asList(detachedContent));
  DSSDocument extendedSignature=service.extendDocument(xadesSignature,xAdESSignatureParameters);
  logger.debug(""String_Node_Str"");
  return extendedSignature;
}","public DSSDocument extendSignature(DSSDocument xadesSignature,DSSDocument detachedContent){
  logger.debug(""String_Node_Str"");
  xAdESSignatureParameters.setDetachedContents(Arrays.asList(detachedContent));
  DSSDocument extendedSignature=xAdESService.extendDocument(xadesSignature,xAdESSignatureParameters);
  logger.debug(""String_Node_Str"");
  return extendedSignature;
}",0.99055330634278
130987,"public static String getIdentifier(String identifier){
  String id=identifier.trim();
  if (DSSXMLUtils.isOid(id)) {
    id=identifier.substring(id.lastIndexOf(':') + 1);
  }
 else {
    return id;
  }
  return id;
}","public static String getIdentifier(String identifier){
  String id=identifier.trim();
  if (DSSXMLUtils.isOid(id)) {
    id=id.substring(id.lastIndexOf(':') + 1);
  }
 else {
    return id;
  }
  return id;
}",0.981132075471698
130988,"@Test(expected=InvalidDataFileException.class) public void encodeDataFileWithSpecialCharacters() throws Exception {
  String fileName=""String_Node_Str"";
  String expectedEncoding=""String_Node_Str"";
  signAndAssertEncoding(fileName,expectedEncoding);
}","@Test public void encodeDataFileWithSpecialCharacters() throws Exception {
  String fileName=""String_Node_Str"";
  String expectedEncoding=""String_Node_Str"";
  signAndAssertEncoding(fileName,expectedEncoding);
}",0.911062906724512
130989,"private DigiDocException getFatalError(List<DigiDocException> openContainerExceptions){
  DigiDocException exception=null;
  for (  DigiDocException openContainerException : openContainerExceptions) {
    if (openContainerException.getCode() == DigiDocException.ERR_PARSE_XML) {
      exception=new DigiDocException(DigiDocException.ERR_PARSE_XML,""String_Node_Str"",openContainerException.getNestedException());
    }
  }
  return exception;
}","private DigiDocException getFatalError(List<DigiDocException> openContainerExceptions){
  DigiDocException exception=null;
  for (  DigiDocException openContainerException : openContainerExceptions) {
    if (openContainerException.getCode() == DigiDocException.ERR_PARSE_XML && openContainerException.getMessage() != null && openContainerException.getMessage().contains(""String_Node_Str"")) {
      exception=new DigiDocException(DigiDocException.ERR_PARSE_XML,""String_Node_Str"",openContainerException.getNestedException());
    }
 else {
      exception=openContainerException;
    }
  }
  return exception;
}",0.8403041825095057
130990,"/** 
 * Constructor
 * @param exceptions              add description
 * @param openContainerExceptions list of exceptions encountered when opening the container
 */
public ValidationResultForDDoc(List<DigiDocException> exceptions,List<DigiDocException> openContainerExceptions){
  logger.debug(""String_Node_Str"");
  initXMLReport();
  if (openContainerExceptions != null) {
    for (    DigiDocException exception : openContainerExceptions) {
      DigiDoc4JException digiDoc4JException=new DigiDoc4JException(exception.getCode(),exception.getMessage());
      if (!exception.getMessage().contains(""String_Node_Str"")) {
        containerExceptions.add(digiDoc4JException);
      }
      if (SignedDoc.hasFatalErrs((ArrayList)openContainerExceptions)) {
        hasFatalErrors=true;
      }
    }
    exceptions.addAll(0,openContainerExceptions);
  }
  for (  DigiDocException exception : exceptions) {
    if (exception.getMessage().contains(""String_Node_Str"") || exception.getMessage().contains(""String_Node_Str"")) {
      generateReport(exception,false);
    }
 else {
      generateReport(exception,true);
    }
  }
}","/** 
 * Constructor
 * @param exceptions              add description
 * @param openContainerExceptions list of exceptions encountered when opening the container
 */
public ValidationResultForDDoc(List<DigiDocException> exceptions,List<DigiDocException> openContainerExceptions){
  logger.debug(""String_Node_Str"");
  initXMLReport();
  if (openContainerExceptions != null) {
    for (    DigiDocException exception : openContainerExceptions) {
      DigiDoc4JException digiDoc4JException=new DigiDoc4JException(exception.getCode(),exception.getMessage());
      containerExceptions.add(digiDoc4JException);
      if (SignedDoc.hasFatalErrs((ArrayList)openContainerExceptions)) {
        hasFatalErrors=true;
      }
    }
    exceptions.addAll(0,openContainerExceptions);
  }
  for (  DigiDocException exception : exceptions) {
    if (exception.getMessage().contains(""String_Node_Str"") || exception.getMessage().contains(""String_Node_Str"")) {
      generateReport(exception,false);
    }
 else {
      generateReport(exception,true);
    }
  }
}",0.7125057683433318
130991,"@Override public String getCountryName(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getCountryName();
}","@Override public String getCountryName(){
  logger.debug(""String_Node_Str"");
  String countryName=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    countryName=origin.getSignedProperties().getSignatureProductionPlace().getCountryName();
  }
  return countryName;
}",0.6767241379310345
130992,"@Override public String getStateOrProvince(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getStateOrProvince();
}","@Override public String getStateOrProvince(){
  logger.debug(""String_Node_Str"");
  String stateOrProvince=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    stateOrProvince=origin.getSignedProperties().getSignatureProductionPlace().getStateOrProvince();
    ;
  }
  return stateOrProvince;
}",0.570281124497992
130993,"@Override public String getCity(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getCity();
}","@Override public String getCity(){
  logger.debug(""String_Node_Str"");
  String city=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    city=origin.getSignedProperties().getSignatureProductionPlace().getCity();
  }
  return city;
}",0.689156626506024
130994,"@Override public String getPostalCode(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getPostalCode();
}","@Override public String getPostalCode(){
  logger.debug(""String_Node_Str"");
  String postalCode=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    postalCode=origin.getSignedProperties().getSignatureProductionPlace().getPostalCode();
  }
  return postalCode;
}",0.3457330415754923
130995,"@Override public String getCountryName(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getCountryName();
}","@Override public String getCountryName(){
  logger.debug(""String_Node_Str"");
  String countryName=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    countryName=origin.getSignedProperties().getSignatureProductionPlace().getCountryName();
  }
  return countryName;
}",0.6767241379310345
130996,"@Override public String getStateOrProvince(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getStateOrProvince();
}","@Override public String getStateOrProvince(){
  logger.debug(""String_Node_Str"");
  String stateOrProvince=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    stateOrProvince=origin.getSignedProperties().getSignatureProductionPlace().getStateOrProvince();
    ;
  }
  return stateOrProvince;
}",0.570281124497992
130997,"@Override public String getCity(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getCity();
}","@Override public String getCity(){
  logger.debug(""String_Node_Str"");
  String city=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    city=origin.getSignedProperties().getSignatureProductionPlace().getCity();
  }
  return city;
}",0.689156626506024
130998,"@Override public String getPostalCode(){
  logger.debug(""String_Node_Str"");
  return origin.getSignedProperties().getSignatureProductionPlace().getPostalCode();
}","@Override public String getPostalCode(){
  logger.debug(""String_Node_Str"");
  String postalCode=null;
  if (origin.getSignedProperties().getSignatureProductionPlace() != null) {
    postalCode=origin.getSignedProperties().getSignatureProductionPlace().getPostalCode();
  }
  return postalCode;
}",0.3457330415754923
130999,"private static Container populateContainerBuilderWithFile(ContainerBuilder builder,TemporaryFolder testFolder) throws IOException {
  File testFile=testFolder.newFile(""String_Node_Str"");
  FileUtils.writeStringToFile(testFile,""String_Node_Str"");
  Container container=builder.withConfiguration(new Configuration(Configuration.Mode.TEST)).withDataFile(testFile.getPath(),""String_Node_Str"").build();
  return container;
}","private static Container populateContainerBuilderWithFile(ContainerBuilder builder,TemporaryFolder testFolder) throws IOException {
  File testFile=createTestFile(testFolder);
  Container container=builder.withConfiguration(new Configuration(Configuration.Mode.TEST)).withDataFile(testFile.getPath(),""String_Node_Str"").build();
  return container;
}",0.8463541666666666
131000,"private Map<String,SimpleReport> loadValidationResults(SignedDocumentValidator validator){
  logger.debug(""String_Node_Str"");
  Map<String,SimpleReport> simpleReports=new HashMap<>();
  Reports report=validate(validator);
  dssSignatureParameters.setDigestAlgorithm(report.getDiagnosticData().getSignatureDigestAlgorithm());
  do {
    SimpleReport simpleReport=report.getSimpleReport();
    if (simpleReport.getSignatureIdList().size() > 0)     simpleReports.put(simpleReport.getSignatureIdList().get(0),simpleReport);
    report=report.getNextReports();
  }
 while (report != null);
  return simpleReports;
}","private Map<String,SimpleReport> loadValidationResults(SignedDocumentValidator validator){
  logger.debug(""String_Node_Str"");
  Map<String,SimpleReport> simpleReports=new LinkedHashMap<>();
  Reports report=validate(validator);
  dssSignatureParameters.setDigestAlgorithm(report.getDiagnosticData().getSignatureDigestAlgorithm());
  do {
    SimpleReport simpleReport=report.getSimpleReport();
    if (simpleReport.getSignatureIdList().size() > 0)     simpleReports.put(simpleReport.getSignatureIdList().get(0),simpleReport);
    report=report.getNextReports();
  }
 while (report != null);
  return simpleReports;
}",0.99510603588907
